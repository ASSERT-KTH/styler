{
    "project_name": "CESNET-perun",
    "error_id": "398",
    "information": {
        "errors": [
            {
                "line": "7044",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t * @param inverseDependencies inverse dependencies that will be updated\n\t */\n\tprivate void updateInverseDependenciesForAttribute(Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n\t\t                                               AttributeDefinition attributeDefinition,\n\t\t                                               Map<AttributeDefinition, Set<AttributeDefinition>> dependencies) {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/398/AttributesManagerBlImpl.java\nindex a4c915fe6ec..e19a13332a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/398/AttributesManagerBlImpl.java\n@@ -7042,7 +7042,7 @@ public class AttributesManagerBlImpl implements AttributesManagerBl {\n \t * @param inverseDependencies inverse dependencies that will be updated\n \t */\n \tprivate void updateInverseDependenciesForAttribute(Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n-\t\t                                               AttributeDefinition attributeDefinition,\n+ AttributeDefinition attributeDefinition,\n \t\t                                               Map<AttributeDefinition, Set<AttributeDefinition>> dependencies) {\n \n \t\tif (!inverseDependencies.containsKey(attributeDefinition)) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/398/AttributesManagerBlImpl.java\nindex a4c915fe6ec..d9071ff55d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/398/AttributesManagerBlImpl.java\n@@ -150,6819 +150,7167 @@ import static cz.metacentrum.perun.core.api.AttributesManager.NS_VO_ATTR;\n  */\n public class AttributesManagerBlImpl implements AttributesManagerBl {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(AttributesManagerBlImpl.class);\n-\n-\tprivate final AttributesManagerImplApi attributesManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\t//Attributes dependencies. Attr => dependent attributes (and inverse version)\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> dependencies = new ConcurrentHashMap<>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> strongDependencies = new ConcurrentHashMap<>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new ConcurrentHashMap<>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies = new ConcurrentHashMap<>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> allDependencies = new ConcurrentHashMap<>();\n-\n-\tprivate final Object dependenciesMonitor = new Object();\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tpublic AttributesManagerBlImpl(AttributesManagerImplApi attributesManagerImpl) {\n-\t\tthis.attributesManagerImpl = attributesManagerImpl;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, facility);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, facility, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, vo);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, vo));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, group);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getVirtualAttributes(sess, resource);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource));\n-\t\treturn attributes;\n-\t}\n-\n-\tprivate List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, resource);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, member, resource);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n-\t\treturn getAttributes(sess, member, resource, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException {\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n-\t\t// filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\t\t// adds all attributes which names are in attrNames list (virtual and empty too)\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, member, group, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n-\t\t// filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t// adds virtual attributes too\n-\t\t\tattributes.addAll(this.getAttributes(sess, user));\n-\t\t\tattributes.addAll(this.getAttributes(sess, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return this.getAttributes(sess, member, group, workWithUserAttributes);\n-\n-\t\t//differentiate between user+member and member-group namespace\n-\t\tList<String> userAndMemberAttributeNames = new ArrayList<>();\n-\t\tList<String> memberGroupAttributeNames = new ArrayList<>();\n-\t\tfor (String attrName : attrNames) {\n-\t\t\tif (attrName.startsWith(AttributesManager.NS_USER_ATTR) || attrName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tuserAndMemberAttributeNames.add(attrName);\n-\t\t\t} else if (attrName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tmemberGroupAttributeNames.add(attrName);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Attribute defined by {} is not in supported namespace. Skip it there!\", attrName);\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tif (!userAndMemberAttributeNames.isEmpty())\n-\t\t\tattributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n-\t\tif (!memberGroupAttributeNames.isEmpty())\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n-\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, member, resource);\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, member, resource);\n-\t\t//remove virtual attributes with null value\n-\t\tIterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n-\t\twhile (virtualAttributesIterator.hasNext())\n-\t\t\tif (virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(virtualAttributes);\n-\n-\t\tif (workWithUserAttributes) {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Resource resource, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif (attrNames.isEmpty()) return this.getAttributes(sess, member, resource, workWithUserAttributes);\n-\n-\t\tList<String> userAndMemberAttributeNames = new ArrayList<>();\n-\t\tList<String> memberResourceAttributeNames = new ArrayList<>();\n-\t\tList<String> userFacilityAttirbuteNames = new ArrayList<>();\n-\t\tfor (String attributeName : attrNames) {\n-\t\t\tif (attributeName.startsWith(AttributesManager.NS_USER_ATTR) || attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tuserAndMemberAttributeNames.add(attributeName);\n-\t\t\t} else if (attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tmemberResourceAttributeNames.add(attributeName);\n-\t\t\t} else if (attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tuserFacilityAttirbuteNames.add(attributeName);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Attribute defined by {} is not in supported namespace. Skip it there!\", attributeName);\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\t//Call only if list of attributes is not empty\n-\t\tif (!userAndMemberAttributeNames.isEmpty())\n-\t\t\tattributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n-\t\tif (!memberResourceAttributeNames.isEmpty())\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource, memberResourceAttributeNames));\n-\t\tif (workWithUserAttributes && !userFacilityAttirbuteNames.isEmpty()) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user, facility, userFacilityAttirbuteNames));\n-\t\t}\n-\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group, Member member, Resource resource, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException, GroupResourceMismatchException {\n-\t\tcheckGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = getAttributes(sess, member, resource, attrNames, workWithUserAttributes);\n-\n-\t\tif (attrNames.isEmpty()) {\n-\t\t\tattributes.addAll(getAttributes(sess, member, group));\n-\t\t\treturn attributes;\n-\t\t}\n-\n-\t\tList<String> memberGroupAttributeNames = new ArrayList<>();\n-\n-\t\tfor (String attributeName : attrNames) {\n-\t\t\tif (attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tmemberGroupAttributeNames.add(attributeName);\n-\t\t\t}\n-\t\t}\n-\t\tif (!memberGroupAttributeNames.isEmpty()) {\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(this.getAttributes(sess, member));\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tattributes.addAll(this.getAttributes(sess, user));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException {\n-\t\tList<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, group, startPartOfName);\n-\t\tattrs.removeIf(attr -> attr.getValue() == null);\n-\t\treturn attrs;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException {\n-\t\tList<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, startPartOfName);\n-\t\tattrs.removeIf(attr -> attr.getValue() == null);\n-\t\treturn attrs;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, member, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, group, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, resource, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Attribute> attributes = this.getAttributes(sess, member, attrNames);\n-\n-\t\tif (!workWithUserAttributes) return attributes;\n-\t\telse {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tattributes.addAll(this.getAttributes(sess, user, attrNames));\n-\n-\t\t\treturn attributes;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, vo, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, UserExtSource ues, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, ues, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getUserFacilityAttributesForAnyUser(sess, facility);\n-\t\tList<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\tList<Attribute> virtualAttributes = new ArrayList<>();\n-\t\tfor (User user : facilityUsers) {\n-\t\t\tvirtualAttributes.addAll(getVirtualAttributes(sess, facility, user));\n-\t\t}\n-\n-\t\t//remove virtual attributes with null value\n-\t\tvirtualAttributes.removeIf(attribute -> attribute.getValue() == null);\n-\n-\t\tattributes.addAll(virtualAttributes);\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, facility, user);\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n-\n-\t\t//remove virtual attributes with null value\n-\t\tvirtualAttributes.removeIf(attribute -> attribute.getValue() == null);\n-\n-\t\tattributes.addAll(virtualAttributes);\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, key);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getEntitylessAttributes(sess, attrName);\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getEntitylessKeys(sess, attributeDefinition);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getEntitylessAttributeForUpdate(PerunSession sess, String key, String attrName) throws InternalErrorException, AttributeNotExistsException {\n-\t\tAttributeDefinition attrDef = this.getAttributeDefinition(sess, attrName);\n-\t\tAttribute attr = new Attribute(attrDef);\n-\n-\t\tString value = getAttributesManagerImpl().getEntitylessAttrValueForUpdate(sess, attrDef.getId(), key);\n-\n-\t\tif (value != null) {\n-\t\t\tattr.setValue(BeansUtils.stringToAttributeValue(value, attr.getType()));\n-\t\t}\n-\n-\t\treturn attr;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif (isCoreAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition))\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\n-\t\treturn getAttributesManagerImpl().getAttributesByAttributeDefinition(sess, attributeDefinition);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, facility, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, user);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, user, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, host);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, host));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupResourceMismatchException {\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, resource, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group));\n-\t\tif (workWithGroupAttributes) {\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, List<String> attrNames, boolean workWithGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif (attrNames.isEmpty()) return this.getAttributes(sess, resource, group, workWithGroupAttributes);\n-\n-\t\tList<String> groupAttributeNames = new ArrayList<>();\n-\t\tList<String> groupResourceAttributeNames = new ArrayList<>();\n-\n-\t\tfor (String attributeName : attrNames) {\n-\t\t\tif (attributeName.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\tgroupAttributeNames.add(attributeName);\n-\t\t\t} else if (attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\tgroupResourceAttributeNames.add(attributeName);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Attribute defined by {} is not in supported namespace. Skip it there!\", attributeName);\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\t//Call only if list of attributes is not empty\n-\t\tif (workWithGroupAttributes && !groupAttributeNames.isEmpty())\n-\t\t\tattributes.addAll(this.getAttributes(sess, group, attrNames));\n-\t\tif (!groupResourceAttributeNames.isEmpty())\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group, attrNames));\n-\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, ues);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, ues));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, facility, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, attributesToSet);\n-\t\tlog.debug(\"IMPORTANT: ENTERING CHECK ATTRIBUTES DEPENDENCIES\");\n-\t\tcheckAttributesDependencies(sess, facility, null, attributesToSet);\n-\t\tlog.debug(\"IMPORTANT: EXITING CHECK ATTRIBUTES DEPENDENCIES\");\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, vo, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, vo, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, vo, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, vo, null, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, group, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, group, attribute);\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, group, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, group, null, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, resource, attribute);\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, resource, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, null, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tsetAttributes(sess, member, resource, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n-\t\tsetAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n-\t\t// classification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, group, attributesToRemove, workWithUserAttributes);\n-\t\t// fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, group, attribute, false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tgetPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t// skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\t// this can handle member-group, member and user attributes too\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, group, attribute, true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, member, group, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, member, group, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, attributesToRemove);\n-\t\tUser user;\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tlog.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n-\t\t} else {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlog.debug(\"addMember timer: getMember and User [{}].\", Utils.getRunningTime(timer));\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\tboolean changed;\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, member, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, member, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, member, attributesToRemove, workWithUserAttributes);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, resource, attribute, false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tlog.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n-\t\t} else {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlog.debug(\"addMember timer: getFacility and User [{}].\", Utils.getRunningTime(timer));\n-\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\tboolean changed;\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, resource, attribute, false);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute rm [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute uf [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, member, resource, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, resource, member, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, resource, user, member, attributesToRemove);\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, resource, attribute, false);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, resource, user, member, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Facility facility, Resource resource, Group group, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, resource, group, user, member, attributesToRemove);\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, resource, attribute, false);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, group, attribute, false);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, resource, group, user, member, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, group, member, user, facility, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, member, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, member, null, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, user, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, user, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, facility, user, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, user, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, user, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, user, null, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, host, attributesToRemove);\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, host, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, host, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, host, null, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, group, attributesToRemove);\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, resource, group, attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, group, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, group, attributesToSet);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, group, attributesToRemove, workWithGroupAttributes);\n-\t\tif (!workWithGroupAttributes) {\n-\t\t\tsetAttributes(sess, resource, group, attributes);\n-\t\t} else {\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tsetAttributeWithoutCheck(sess, resource, group, attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\t\t\tsetAttributeWithoutCheck(sess, group, attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, group, attributesToSet, true);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributesToSet, true);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, ues, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, ues, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, ues, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, ues, null, attributesToSet);\n-\t}\n-\n-\tprivate void setCoreAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\n-\t\tif (!attribute.getName().equals(\"urn:perun:member:attribute-def:core:status\")) {\n-\t\t\tthrow new InternalErrorException(\"We can set only urn:perun:member:attribute-def:core:status from member's core attributes. Others are not permitted.\");\n-\t\t}\n-\n-\t\t//defensive construction\n-\t\tMember storedMember;\n-\t\ttry {\n-\t\t\tstoredMember = getPerunBl().getMembersManagerBl().getMemberById(sess, member.getId());\n-\t\t} catch (MemberNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\t\tif (!member.equals(storedMember))\n-\t\t\tthrow new InternalErrorException(\"You wan't to store core attribute for member which is not equals to member from DB (with same Id)\");\n-\n-\t\tString methodName = \"set\" + Character.toUpperCase(attribute.getFriendlyName().charAt(0)) + attribute.getFriendlyName().substring(1);\n-\t\tMethod method;\n-\t\ttry {\n-\t\t\tmethod = member.getClass().getMethod(methodName, Class.forName(attribute.getType()));\n-\t\t} catch (NoSuchMethodException ex) {\n-\t\t\tthrow new InternalErrorException(\"Bad core attribute definition. \" + attribute, ex);\n-\t\t} catch (ClassNotFoundException ex) {\n-\t\t\tthrow new InternalErrorException(\"Bad core attribute type. \" + attribute, ex);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tmethod.invoke(member, attribute.getValue());\n-\t\t} catch (IllegalAccessException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (InvocationTargetException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t} catch (IllegalArgumentException ex) {\n-\t\t\tthrow new WrongAttributeValueException(attribute, \"Probably bad type of value\", ex);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tgetPerunBl().getMembersManagerBl().updateMember(sess, member);\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAllSimilarAttributeNames(sess, startingPartOfAttributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_FACILITY_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, facility, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_VO_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, vo, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tString namespace = getNamespaceFromAttributeName(attributeName);\n-\t\tif (!namespace.startsWith(AttributesManager.NS_GROUP_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, group, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_RESOURCE_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Member member, Resource resource, String attributeName) throws InternalErrorException, MemberResourceMismatchException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, member, resource, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\t// check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, member, group, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, member, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, facility, user, attributeName);\n-\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_USER_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, user, attributeName);\n-\t}\n-\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_HOST_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, host, attributeName);\n-\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, group, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, key, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Map<String,String> getEntitylessStringAttributeMapping(PerunSession sess, String attributeName) throws WrongAttributeAssignmentException, AttributeNotExistsException, InternalErrorException {\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getEntitylessStringAttributeMapping(sess, attributeName);\n-\t}\n-\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif (!attributeName.startsWith(AttributesManager.NS_UES_ATTR))\n-\t\t\tthrow new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, ues, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getAttributesManagerImpl().getAttributeDefinition(sess, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeDefinition> getAttributesDefinitionWithRights(PerunSession sess, List<PerunBean> entities) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<AttributeDefinition> attributeDefinitions = new ArrayList<>();\n-\n-\t\t//if there is no entities, so no attribute definition will be returned => empty array list of ADs\n-\t\tif (entities == null || entities.isEmpty()) return attributeDefinitions;\n-\t\t\t//or fill list by all attributeDefinitions\n-\t\telse attributeDefinitions = this.getAttributesDefinition(sess);\n-\n-\t\t//Prepare possible objects\n-\t\tUser user = null;\n-\t\tMember member = null;\n-\t\tVo vo = null;\n-\t\tResource resource = null;\n-\t\tGroup group = null;\n-\t\tFacility facility = null;\n-\t\tHost host = null;\n-\t\tUserExtSource ues = null;\n-\n-\t\t//Iterate through all entities and fill those which are in list of entities\n-\t\tfor (PerunBean entity : entities) {\n-\t\t\tif (entity instanceof User) user = (User) entity;\n-\t\t\telse if (entity instanceof Member) member = (Member) entity;\n-\t\t\telse if (entity instanceof Vo) vo = (Vo) entity;\n-\t\t\telse if (entity instanceof Resource) resource = (Resource) entity;\n-\t\t\telse if (entity instanceof Group) group = (Group) entity;\n-\t\t\telse if (entity instanceof Facility) facility = (Facility) entity;\n-\t\t\telse if (entity instanceof Host) host = (Host) entity;\n-\t\t\telse if (entity instanceof UserExtSource) ues = (UserExtSource) entity;\n-\t\t\t\t//Else skip not identified entity (log it)\n-\t\t\telse\n-\t\t\t\tlog.warn(\"In method GetAttributesDefinitionWithRights there is entity which is not identified correctly and will be skipped: {}\", entity);\n-\t\t}\n-\n-\t\t//Iterate through all attributesDefinitions and remove those which are not in the possible namespace or user in session has no rights to read them\n-\t\tIterator<AttributeDefinition> iterator = attributeDefinitions.iterator();\n-\t\twhile (iterator.hasNext()) {\n-\t\t\tAttributeDefinition attrDef = iterator.next();\n-\n-\t\t\tif (this.isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR) && user != null && facility != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, facility)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, facility));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR) && member != null && resource != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, resource)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, resource));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR) && member != null && group != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, group)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, group));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR) && group != null && resource != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, resource)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, resource));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_USER_ATTR) && user != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_ATTR) && member != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_VO_ATTR) && vo != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, vo)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, vo));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR) && resource != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, resource)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, resource));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_GROUP_ATTR) && group != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_FACILITY_ATTR) && facility != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, facility)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, facility));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_HOST_ATTR) && host != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, host)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, host));\n-\t\t\t\t}\n-\t\t\t} else if (this.isFromNamespace(sess, attrDef, NS_UES_ATTR) && ues != null) {\n-\t\t\t\tif (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, ues)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, ues));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//if there is another namespace or if there are no entities (which are needed for the namespace) remove this attributeDefinition\n-\t\t\t\titerator.remove();\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn attributeDefinitions;\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributesDefinition(sess);\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeDefinition> getAttributesDefinition(PerunSession sess, List<String> listOfAttributesNames) throws AttributeNotExistsException, InternalErrorException {\n-\t\tList<AttributeDefinition> listOfAttributeDefinitions = new ArrayList<>();\n-\t\tfor (String name : listOfAttributesNames) {\n-\t\t\tlistOfAttributeDefinitions.add(this.getAttributeDefinition(sess, name));\n-\t\t}\n-\t\treturn listOfAttributeDefinitions;\n-\t}\n-\n-\t@Override\n-\tpublic AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getAttributesManagerImpl().getAttributeDefinitionById(sess, id);\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributesDefinitionByNamespace(sess, namespace);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, vo, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Member member, Resource resource, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tAttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n-\n-\t\tif (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, resource, id);\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\treturn attribute;\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t//user-facility attribues\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t//user and user core attributes\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n-\n-\t\tif (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, group, id);\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\t\treturn attribute;\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, member, id);\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t//user and user core attributes\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, host, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, group, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, group, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, ues, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException, MemberResourceMismatchException {\n-\t\t//fill attributes and get back only those which were really filled with new value\n-\t\tList<Attribute> filledAttributes = this.fillAttributes(sess, facility, resource, user, member, attributes, true);\n-\n-\t\t//Remove all filledAttributes from all attributes list\n-\t\tIterator<Attribute> iterAttr = attributes.iterator();\n-\t\twhile (iterAttr.hasNext()) {\n-\t\t\tAttribute attributeFromAllAttrs = iterAttr.next();\n-\t\t\tfor (Attribute attributeFromFillAttrs : filledAttributes) {\n-\t\t\t\tif (attributeFromAllAttrs.getName().equals(attributeFromFillAttrs.getName())) {\n-\t\t\t\t\titerAttr.remove();\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Set all filledAttributes withoutCheck\n-\t\tfor (Attribute attribute : filledAttributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, member, resource, attribute, false);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Join all attributes and filled attributes together\n-\t\tattributes.addAll(filledAttributes);\n-\n-\t\t//refresh all virtual attributes with new value\n-\t\tfor (Attribute attr : attributes) {\n-\t\t\tif (this.isVirtAttribute(sess, attr)) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, member, resource, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, facility, user, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, user, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, member, attr.getName()).getValue());\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Check all attributes\n-\t\tcheckAttributesValue(sess, facility, resource, user, member, attributes);\n-\n-\t\t//Check all attributes dependencies\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributes);\n-\t}\n-\n-\t@Override\n-\tpublic void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException, AttributeNotExistsException, MemberResourceMismatchException {\n-\t\t//get all attributes (for member, resource, facility and user) with values\n-\t\tList<Attribute> attributes = this.getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n-\n-\t\tthis.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n-\t}\n-\n-\t@Override\n-\tpublic void setRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException, MemberResourceMismatchException {\n-\t\t//get all attributes (for member, resource, facility, user and service) with values\n-\t\tList<Attribute> attributes = this.getRequiredAttributes(sess, service, facility, resource, user, member);\n-\n-\t\tthis.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, facility, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, facility, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(facility, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, facility, attribute);\n-\t\t}\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForFacility(attribute, facility));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, vo, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, vo, attribute)) {\n-\t\t\tcheckAttributeValue(sess, vo, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(vo, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_VO_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, vo, attribute);\n-\t\t}\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForVo(attribute, vo));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, group, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(group, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, resource, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(resource, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\ttry {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, resource, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, attribute);\n-\t\t}\n-\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForResource(attribute, resource));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\ttry {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, group, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, group, attribute);\n-\t\t}\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForGroup(attribute, group));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Member member, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, resource, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, member, resource, attribute, false)) {\n-\t\t\tcheckAttributeValue(sess, member, resource, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(resource, member, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, AttributeNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, member, group, attribute, false)) {\n-\t\t\tcheckAttributeValue(sess, member, group, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(member, group, attribute));\n-\t\t}\n-\t}\n-\n-\t@SuppressWarnings(\"unused\")\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, resource, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tif (setAttributeWithoutCheck(sess, member, resource, attribute, false)) {\n-\t\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(resource, member, attribute));\n-\t\t\t\tcheckAttributeValue(sess, member, resource, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (setAttributeWithoutCheck(sess, member, resource, attribute, true)) {\n-\t\t\t\tList<Attribute> listOfAttributes = new ArrayList<>();\n-\t\t\t\tlistOfAttributes.add(attribute);\n-\t\t\t\tcheckAttributesValue(sess, member, resource, listOfAttributes, true);\n-\t\t\t\tthis.checkAttributesDependencies(sess, resource, member, listOfAttributes, true);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\ttry {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//FIXME update changed variable\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForFacilityAndUser(attribute, facility, user));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Member member, Resource resource, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t//NS_MEMBER_RESOURCE_ATTR\n-\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, member, attribute);\n-\t\t\t\tif (changed) {\n-\t\t\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForResourceAndMember(attribute, resource, member));\n-\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, resource, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (workWithUserAttributes) {\n-\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t//NS_USER_FACILITY_ATTR\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t//NS_USER_ATTR\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Member member, Group group, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, member, group, attribute);\n-\t\t\t\tif (changed) {\n-\t\t\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForMemberAndGroup(attribute, member, group));\n-\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (workWithUserAttributes) {\n-\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(member, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributeInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttribute(sess, member, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\ttry {\n-\t\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//FIXME update \"changed\" variable\n-\n-\t\t} else if (isCoreAttribute(sess, attribute)) {\n-\t\t\ttry {\n-\t\t\t\tsetCoreAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tchanged = true; //FIXME check if attribute is acctualy changed\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, member, attribute);\n-\t\t}\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForMember(attribute, member));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, facility, user, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, facility, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, user, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(facility, user, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, user, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, user, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(user, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributeInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttribute(sess, user, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, user, attribute);\n-\t\t}\n-\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForUser(attribute, user));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, host, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, host, attribute)) {\n-\t\t\tcheckAttributeValue(sess, host, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(host, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute \" + attribute + \" can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, host, attribute);\n-\t\t}\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForHost(attribute, host));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, host, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, resource, group, attribute)) {\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(resource, group, attribute));\n-\t\t\tcheckAttributeValue(sess, resource, group, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\t//FIXME Zatim je zakazane nastavovani virtualnich atributu group_resource\n-\n-\t\t\tAttribute storedAttribute;\n-\t\t\ttry {\n-\t\t\t\tstoredAttribute = getAttribute(sess, resource, group, attribute.getName());\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t\tif (!(storedAttribute.getValue() == null ? attribute.getValue() == null : storedAttribute.getValue().equals(attribute.getValue()))) { //unless attribute and storedAttribute have equals value\n-\t\t\t\t//FIXME\n-\t\t\t\tif (attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGID\") ||\n-\t\t\t\t\t\tattribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGroupName\")) {\n-\t\t\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, resource, group, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute. \" + attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, group, attribute);\n-\t\t}\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForGroupAndResource(attribute, group, resource));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, group, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tprivate boolean setAttributeWithoutCheck(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, ues, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, ues, attribute);\n-\t\t}\n-\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForUes(attribute, ues));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\t\tif (isVirtAttribute(sess, attribute)) {\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, key, attribute);\n-\t\t}\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeSetForKey(attribute, key));\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, key, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, key, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, key, attribute)) {\n-\t\t\tcheckAttributeValue(sess, key, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(key, null, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, ues, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, ues, attribute)) {\n-\t\t\tcheckAttributeValue(sess, ues, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(ues, null, attribute));\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tpublic AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeDefinitionExistsException {\n-\t\treturn createAttribute(sess, attribute, true);\n-\t}\n-\n-\t/**\n-\t * Creates an attribute, the attribute is stored into the appropriate DB table according to the namespace.\n-\t * The calculateDependencies value specifies if the attribute module dependencies should be calculated.\n-\t *\n-\t * @param sess perun session\n-\t * @param attribute attribute to create\n-\t * @param calculateDependencies should calculate module dependencies\n-\t *\n-\t * @return attribute with set id\n-\t *\n-\t * @throws AttributeDefinitionExistsException if attribute already exists\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tprivate AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute, boolean calculateDependencies) throws InternalErrorException, AttributeDefinitionExistsException {\n-\t\tUtils.notNull(attribute.getName(), \"attribute.getName\");\n-\t\tUtils.notNull(attribute.getNamespace(), \"attribute.getNamespace\");\n-\t\tUtils.notNull(attribute.getFriendlyName(), \"attribute.getFriendlyName\");\n-\t\tUtils.notNull(attribute.getType(), \"attribute.getType\");\n-\n-\t\t//check if attribute.nameSpace is valid nameSpace\n-\t\tif (!isCorrectNameSpace(attribute.getNamespace())) {\n-\t\t\tthrow new InternalErrorException(\"Incorrect namespace \" + attribute.getNamespace());\n-\t\t}\n-\n-\t\t//check if attribute.type is valid class name\n-\t\ttry {\n-\t\t\tif (!attribute.getType().equals(BeansUtils.largeStringClassName) &&\n-\t\t\t\t\t!attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\t\tClass.forName(attribute.getType());\n-\t\t\t}\n-\t\t} catch (ClassNotFoundException ex) {\n-\t\t\tthrow new InternalErrorException(\"Wrong attribute type\", ex);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tif (attribute.isUnique()) {\n-\t\t\tif (attribute.getNamespace().startsWith(NS_ENTITYLESS_ATTR)) {\n-\t\t\t\tthrow new InternalErrorException(\"entityless attributes cannot be marked unique\");\n-\t\t\t}\n-\t\t\tif (!Arrays.asList(\"def\",\"opt\").contains(attribute.getNamespace().split(\":\")[4])) {\n-\t\t\t\tthrow new InternalErrorException(\"only 'def' and 'opt' attributes can be unique\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tattribute = getAttributesManagerImpl().createAttribute(sess, attribute);\n-\n-\t\tif (calculateDependencies) {\n-\t\t\thandleAttributeModuleDependencies(sess, attribute);\n-\t\t}\n-\n-\t\tgetPerunBl().getAuditer().log(sess, new AttributeCreated(attribute));\n-\n-\t\treturn attribute;\n-\t}\n-\n-\t/**\n-\t * For given attribute finds its dependencies and adds them to the all maps containing any dependencies.\n-\t *\n-\t * @param sess session\n-\t * @param attribute attribute\n-\t * @throws InternalErrorException internal error\n-\t */\n-\tprivate void handleAttributeModuleDependencies(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\tsynchronized (dependenciesMonitor) {\n-\t\t\t// create attribute definition in case of receiving Attribute instance\n-\t\t\tAttributeDefinition attributeDef = new AttributeDefinition(attribute);\n-\n-\t\t\tAttributesModuleImplApi module = (AttributesModuleImplApi) getAttributesManagerImpl().getAttributesModule(sess, attributeDef);\n-\n-\t\t\tif (module == null) {\n-\t\t\t\tdependencies.put(attributeDef, new HashSet<>());\n-\t\t\t\tstrongDependencies.put(attributeDef, new HashSet<>());\n-\t\t\t\tinverseDependencies.put(attributeDef, new HashSet<>());\n-\t\t\t\tinverseStrongDependencies.put(attributeDef, new HashSet<>());\n-\t\t\t\tallDependencies.put(attributeDef, new HashSet<>());\n-\t\t\t\treturn;\n-\t\t\t}\n-\n-\t\t\t// we need to create deep copies to prevent a creation of inconsistency state of dependencies if anything goes wrong\n-\t\t\tMap<AttributeDefinition, Set<AttributeDefinition>> dependenciesCopy = Utils.createDeepCopyOfMapWithSets(dependencies);\n-\t\t\tMap<AttributeDefinition, Set<AttributeDefinition>> strongDependenciesCopy = Utils.createDeepCopyOfMapWithSets(strongDependencies);\n-\t\t\tMap<AttributeDefinition, Set<AttributeDefinition>> inverseDependenciesCopy = Utils.createDeepCopyOfMapWithSets(inverseDependencies);\n-\t\t\tMap<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependenciesCopy = Utils.createDeepCopyOfMapWithSets(inverseStrongDependencies);\n-\t\t\tMap<AttributeDefinition, Set<AttributeDefinition>> allDependenciesCopy = Utils.createDeepCopyOfMapWithSets(allDependencies);\n-\n-\t\t\tSet<AttributeDefinition> moduleDependencies = getDependenciesForModule(sess, module);\n-\t\t\tSet<AttributeDefinition> moduleStrongDependencies = new HashSet<>();\n-\n-\t\t\tif (module instanceof VirtualAttributesModuleImplApi) {\n-\t\t\t\tmoduleStrongDependencies = getStrongDependenciesForModule(sess, (VirtualAttributesModuleImplApi) module);\n-\t\t\t}\n-\n-\t\t\tdependenciesCopy.put(attributeDef, moduleDependencies);\n-\t\t\tstrongDependenciesCopy.put(attributeDef, moduleStrongDependencies);\n-\n-\t\t\tupdateInverseDependenciesForAttribute(inverseDependenciesCopy, attributeDef, dependenciesCopy);\n-\t\t\tupdateInverseDependenciesForAttribute(inverseStrongDependenciesCopy, attributeDef, strongDependenciesCopy);\n-\n-\t\t\tif (isMapOfAttributesDefCyclic(inverseStrongDependenciesCopy)) {\n-\t\t\t\tthrow new InternalErrorException(\"There is a cycle in strong dependencies after adding new attribute definition: \" + attributeDef.getNamespace());\n-\t\t\t}\n-\n-\t\t\tSet<AttributeDefinition> allAttributeDependencies =\n-\t\t\t\t\tfindAllAttributeDependencies(attributeDef, inverseDependenciesCopy, inverseStrongDependenciesCopy);\n-\t\t\tallDependenciesCopy.put(attributeDef, allAttributeDependencies);\n-\n-\t\t\t// if all went well, switch dependencies maps\n-\t\t\tdependencies = dependenciesCopy;\n-\t\t\tstrongDependencies = strongDependenciesCopy;\n-\t\t\tinverseDependencies = inverseDependenciesCopy;\n-\t\t\tinverseStrongDependencies = inverseStrongDependenciesCopy;\n-\t\t\tallDependencies = allDependenciesCopy;\n-\t\t}\n-\t}\n-\n-\tprivate boolean isCorrectNameSpace(String value) {\n-\t\tfor (String entityType : AttributesManager.ENTITY_TYPES) {\n-\t\t\tif (value.matches(\"urn:perun:\" + entityType + \":attribute-def:(def|opt|virt|core)\")) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\t//Remove services' required attributes\n-\t\t//TODO\n-\n-\t\tAttributeDefinition attributeDef = new AttributeDefinition(attribute);\n-\t\t//Remove attribute dependencies\n-\t\tsynchronized (dependenciesMonitor) {\n-\n-\t\t\tremoveOppositeDependenciesForAttribute(attributeDef);\n-\n-\t\t\tif (dependencies.containsKey(attributeDef)) {\n-\t\t\t\tdependencies.remove(attributeDef);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Dependencies inconsistency. Dependencies should contain information about {}. \", attributeDef);\n-\t\t\t}\n-\t\t\tif (strongDependencies.containsKey(attributeDef)) {\n-\t\t\t\tstrongDependencies.remove(attributeDef);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Strong dependencies inconsistency. Strong dependencies should contain information about {}. \", attributeDef);\n-\t\t\t}\n-\t\t\tif (inverseDependencies.containsKey(attributeDef)) {\n-\t\t\t\tinverseDependencies.remove(attributeDef);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Inverse dependencies inconsistency. Inverse dependencies should contain information about {}. \", attributeDef);\n-\t\t\t}\n-\t\t\tif (inverseStrongDependencies.containsKey(attributeDef)) {\n-\t\t\t\tinverseStrongDependencies.remove(attributeDef);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Inverse strong dependencies inconsistency. Inverse strong dependencies should contain information about {}. \", attributeDef);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Remove attribute and all it's values\n-\t\tgetPerunBl().getAuditer().log(sess,new AttributeDeleted(attribute));\n-\t\tthis.deleteAllAttributeAuthz(sess, attribute);\n-\t\tgetAttributesManagerImpl().deleteAttribute(sess, attribute);\n-\t}\n-\n-\t/**\n-\t * This method for given attribute A removes from dependencies all relations of type\n-\t * B => A (B depends on A) where B is any other attribute. If it finds any inconsistency\n-\t * in dependencies data, it logs information about it.\n-\t *\n-\t * @param attribute attribute which dependency relations are removed\n-\t */\n-\tprivate void removeOppositeDependenciesForAttribute(AttributeDefinition attribute) {\n-\t\tSet<AttributeDefinition> attributeDeps = dependencies.get(attribute);\n-\t\tSet<AttributeDefinition> attributeInverseDeps = inverseDependencies.get(attribute);\n-\t\tSet<AttributeDefinition> attributeStrongDeps = strongDependencies.get(attribute);\n-\t\tSet<AttributeDefinition> attributeInverseStrongDeps = inverseStrongDependencies.get(attribute);\n-\n-\t\tattributeInverseDeps.forEach(attr -> {\n-\t\t\tif (dependencies.containsKey(attr)) {\n-\t\t\t\tif (!dependencies.get(attr).remove(attribute)) {\n-\t\t\t\t\tlog.warn(\"Dependencies inconsistency. Atribute {} should have dependency on attribute {}.\", attr, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Dependencies inconsistency. Dependencies should contain information about {}.\", attr);\n-\t\t\t}\n-\t\t});\n-\t\tattributeStrongDeps.forEach(attr -> {\n-\t\t\tif (inverseStrongDependencies.containsKey(attr)) {\n-\t\t\t\tif (!inverseStrongDependencies.get(attr).remove(attribute)) {\n-\t\t\t\t\tlog.warn(\"Inverse strong dependencies inconsistency. Atribute {} should have inverse strong dependency on attribute {}.\", attr, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Inverse strong dependencies inconsistency. Inverse strong dependencies inconsistency should contain information about {}.\", attr);\n-\t\t\t}\n-\t\t});\n-\t\tattributeInverseStrongDeps.forEach(attr -> {\n-\t\t\tif (strongDependencies.containsKey(attr)) {\n-\t\t\t\tif (!strongDependencies.get(attr).remove(attribute)) {\n-\t\t\t\t\tlog.warn(\"Strong dependencies inconsistency. Atribute {} should have strong dependency on attribute {}.\", attr, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Strong dependencies inconsistency. Strong dependencies should have contained information about {}.\", attr);\n-\t\t\t}\n-\t\t});\n-\t\tattributeDeps.forEach(attr -> {\n-\t\t\tif (inverseDependencies.containsKey(attr)) {\n-\t\t\t\tif (!inverseDependencies.get(attr).remove(attribute)) {\n-\t\t\t\t\tlog.warn(\"Inverse dependencies inconsistency. Atribute {} should have inverse dependency on attribute {}.\", attr, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlog.warn(\"Inverse dependencies inconsistency. Inverse dependencies should have contained information about {}.\", attr);\n-\t\t\t}\n-\t\t});\n-\n-\t\t// there is no inverse version of all dependencies so we have to walk through all\n-\t\tallDependencies.remove(attribute);\n-\t\tallDependencies.values().forEach(attributes -> attributes.remove(attribute));\n-\t}\n-\n-\t@Override\n-\tpublic void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(sess,new AttributeAuthzDeleted(attribute));\n-\t\tgetAttributesManagerImpl().deleteAllAttributeAuthz(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteAttribute(PerunSession sess, AttributeDefinition attributeDefinition, boolean force) throws InternalErrorException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getResourceRequiredAttributesDefinition(sess, resource);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n-\t\treturn getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, resource, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, resource));\n-\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user;\n-\t\t\tFacility facility;\n-\t\t\ttry {\n-\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityById(sess, resource.getFacilityId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member has non-existent user.\", e);\n-\t\t\t} catch (FacilityNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Resource has non-existent facility.\", e);\n-\t\t\t}\n-\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, group, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, group));\n-\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user;\n-\t\t\ttry {\n-\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member has non-existent user.\", e);\n-\t\t\t}\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Resource resource) throws InternalErrorException {\n-\t\tList<Integer> serviceIds = new ArrayList<>();\n-\t\tfor (Service service : services) {\n-\t\t\tserviceIds.add(service.getId());\n-\t\t}\n-\t\treturn this.attributesManagerImpl.getRequiredAttributes(sess, resource, serviceIds);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, resource);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, member, resource);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, member, resource, workWithUserAttributes);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, facility, user);\n-\t\tSet<Attribute> attributes = new HashSet<>();\n-\t\tfor (Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, facility, user));\n-\t\t}\n-\t\treturn new ArrayList<>(attributes);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, user);\n-\t\tSet<Attribute> attributes = new HashSet<>();\n-\t\tfor (Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, user));\n-\t\t}\n-\t\treturn new ArrayList<>(attributes);\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n-\t\tSet<Attribute> attributes = new HashSet<>();\n-\t\tfor (Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, member));\n-\t\t}\n-\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tattributes.addAll(this.getRequiredAttributes(sess, user));\n-\t\t}\n-\t\treturn new ArrayList<>(attributes);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\n-\t\tList<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n-\t\tList<Resource> groupResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t// get intersection of resources to determine correct set of services\n-\t\tmemberResources.retainAll(groupResources);\n-\n-\t\tSet<Attribute> attributes = new HashSet<>();\n-\n-\t\tfor (Resource resource : memberResources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, member, group));\n-\t\t}\n-\n-\t\tattributes.addAll(this.getRequiredAttributes(sess, member, workWithUserAttributes));\n-\n-\t\treturn new ArrayList<>(attributes);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, resource));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group));\n-\n-\t\tif (workWithGroupAttributes) {\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, host);\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributesDefinition(sess, service);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, facility);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, facility);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, vo);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, resource);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n-\t\treturn getRequiredAttributes(sess, service, member, resource, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif (!workWithUserAttributes)\n-\t\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource);\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException, GroupResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource));\n-\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\t}\n-\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, List<Member> members, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n-\t\t// check if members are from the same VO as resource\n-\t\tif (members.isEmpty()) {\n-\t\t\treturn new HashMap<>();\n-\t\t}\n-\n-\t\tfor (Member m : members) {\n-\t\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, m, resource);\n-\t\t}\n-\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tHashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n-\t\t\tHashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n-\n-\t\t\tfor (Member mem : memberAttributes.keySet()) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, memberAttributes.get(mem));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn resourceMemberAttributes;\n-\t\t}\n-\n-\t\t// get list of users, save user id as a key and list of member objects as a value\n-\t\tList<User> users = new ArrayList<>();\n-\t\tHashMap<User, List<Member>> userMemberIdMap = new HashMap<>();\n-\n-\t\t// Maps user ids to member objects and fills list of users\n-\t\tfor (Member m : members) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, m);\n-\t\t\tusers.add(user);\n-\t\t\tif (userMemberIdMap.containsKey(user)) {\n-\t\t\t\tuserMemberIdMap.get(user).add(m);\n-\t\t\t} else {\n-\t\t\t\tuserMemberIdMap.put(user, Collections.singletonList(m));\n-\t\t\t}\n-\t\t}\n-\n-\t\t// get facility if null\n-\t\tif (facility == null) {\n-\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t}\n-\n-\t\t// get 4 maps from Impl getRequiredAttributes\n-\t\tHashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n-\t\tHashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n-\t\tHashMap<User, List<Attribute>> userFacilityAttributes = getRequiredAttributes(sess, service, facility, users);\n-\t\tHashMap<User, List<Attribute>> userAttributes = getRequiredAttributes(sess, service, users);\n-\n-\t\tfor (Member mem : memberAttributes.keySet()) {\n-\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\tresourceMemberAttributes.put(mem, memberAttributes.get(mem));\n-\t\t\t} else {\n-\t\t\t\tresourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (User user : userFacilityAttributes.keySet()) {\n-\t\t\t// List of members for given user\n-\t\t\tList<Member> mems = userMemberIdMap.get(user);\n-\t\t\tfor (Member mem : mems) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, userFacilityAttributes.get(user));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(userFacilityAttributes.get(user));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (User user : userAttributes.keySet()) {\n-\t\t\t// List of members for given user\n-\t\t\tList<Member> mems = userMemberIdMap.get(user);\n-\t\t\tfor (Member mem : mems) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, userAttributes.get(user));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(userAttributes.get(user));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn resourceMemberAttributes;\n-\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n-\t\tif (!members.isEmpty()) {\n-\t\t\treturn attributesManagerImpl.getRequiredAttributes(sess, service, resource, members);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n-\t\tif (!members.isEmpty()) {\n-\t\t\treturn attributesManagerImpl.getRequiredAttributes(sess, resource, service, members);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n-\t\tif (!users.isEmpty()) {\n-\t\t\treturn attributesManagerImpl.getRequiredAttributes(sess, service, facility, users);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n-\t\tif (!users.isEmpty()) {\n-\t\t\treturn attributesManagerImpl.getRequiredAttributes(sess, service, users);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tif (!workWithUserAttributes)\n-\t\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, boolean withGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif (!withGroupAttributes)\n-\t\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, group));\n-\t\treturn attributes;\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, host);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Member member, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\treturn fillAttributes(sess, member, resource, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\t//skip non-empty attribute\n-\t\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn filledAttributes;\n-\t\t}\n-\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\n-\t\t\t\t//TODO and check it's namespace\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, member, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn fillAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\t//skip non-empty attribute\n-\t\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn filledAttributes;\n-\t\t}\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\n-\t\t\t\t//TODO and check it's namespace\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes, boolean returnOnlyAttributesWithChangedValue) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tif (!returnOnlyAttributesWithChangedValue) {\n-\t\t\treturn this.fillAttributes(sess, facility, resource, user, member, attributes);\n-\t\t} else {\n-\t\t\tList<Attribute> attributesWithChangedValue = new ArrayList<>();\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\t\tAttribute a;\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, member, attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t\tif (a.getValue() != null) attributesWithChangedValue.add(a);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn attributesWithChangedValue;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, host, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, host, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Group group, List<Attribute> groupReqAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, groupReqAttributes, AttributesManager.NS_GROUP_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\n-\t\tfor (Attribute attribute : groupReqAttributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif (!workWithGroupAttributes) {\n-\t\t\treturn this.fillAttributes(sess, resource, group, attributes);\n-\t\t}\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, NS_GROUP_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else {\n-\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, ues, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, ues, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_FACILITY_ATTR);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) continue;\n-\t\t\tcheckAttributeValue(sess, facility, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() != null || isTrulyRequiredAttribute(sess, group, attribute)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Member member, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tcheckAttributesValue(sess, member, resource, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tcheckAttributesValue(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n-\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute))\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithUserAttributes) checkAttributesValue(sess, member, attributes);\n-\t\telse {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Resource resource, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute))\n-\t\t\t\t\tcontinue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute))\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n-\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute))\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute))\n-\t\t\t\t\tcontinue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute))\n-\t\t\t\t\tcontinue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, Group group, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute))\n-\t\t\t\t\tcontinue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute))\n-\t\t\t\t\tcontinue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tcheckAttributeValue(sess, resource, group, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif (!workWithGroupAttribute) {\n-\t\t\tthis.checkAttributesValue(sess, resource, group, attributes);\n-\t\t}\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, key, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void forceCheckAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void forceCheckAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, key, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, key, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute: {} by key {}.\",sess.getLogId(), attribute.getName(), key);\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForKey(new AttributeDefinition(attribute), key));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.attributesManagerImpl.removeAllMemberResourceAttributes(sess, resource);\n-\t\tthis.getPerunBl().getAuditer().log(sess, new AllMemberResourceAttributesRemovedForMembers(resource));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tList<Group> groups = this.getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tfor (Group group : groups) {\n-\t\t\tthis.getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, group);\n-\t\t}\n-\t\tthis.attributesManagerImpl.removeAllGroupResourceAttributes(sess, resource);\n-\t\tthis.getPerunBl().getAuditer().log(sess, new AllGroupResourceAttributesRemovedForGroups(resource));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, key, attribute)) {\n-\t\t\tthis.checkAttributeValue(sess, key, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(key, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, facility, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute: {} from facility {}.\",sess.getLogId(), attribute.getName(), facility.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForFacility(new AttributeDefinition(attribute), facility));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, facility, attribute)) {\n-\t\t\tthis.checkAttributeValue(sess, facility, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(facility, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, boolean workWithUserAttributes, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthis.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n-\t\t\tthis.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n-\t\t} else {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthis.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck), true);\n-\t\t\t//noinspection ConstantConditions\n-\t\t\tthis.checkAttributesDependencies(sess, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributesDefinition, NS_FACILITY_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributesDefinition) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, facility, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, facility, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, resource, attribute))\n-\t\t\t\t\t\tattributesToCheck.add(attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, facility, resource, user, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, Resource resource, Group group, User user, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, resource, attribute))\n-\t\t\t\t\t\tattributesToCheck.add(attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, facility, resource, group, user, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, group, member, user, facility, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, facility);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, facility)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess,new FacilityAllAttributesRemoved(facility));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from facility {}.\", sess.getLogId(), facility.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, facility, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, facility, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tremoveAllAttributes(sess, resource, group);\n-\t\tif (workWithGroupAttributes) {\n-\t\t\tremoveAllAttributes(sess, group);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility, boolean removeAlsoUserFacilityAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tremoveAllAttributes(sess, facility);\n-\t\tif (removeAlsoUserFacilityAttributes) {\n-\t\t\tList<Attribute> userFacilityAttributes = getUserFacilityAttributesForAnyUser(sess, facility);\n-\t\t\tif (getAttributesManagerImpl().removeAllUserFacilityAttributesForAnyUser(sess, facility)) {\n-\t\t\t\tgetPerunBl().getAuditer().log(sess, new AllUserFacilityAttributesRemoved(facility));\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed all attributes from any user on facility {}.\",sess.getLogId(), facility.getId());\n-\n-\t\t\tfor (Attribute attribute : userFacilityAttributes) attribute.setValue(null);\n-\t\t\tList<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\tfor (User user : facilityUsers) {\n-\t\t\t\ttry {\n-\t\t\t\t\tcheckAttributesValue(sess, facility, user, userFacilityAttributes);\n-\t\t\t\t\tthis.checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t}\n-\t\t\t\tfor (Attribute attribute : userFacilityAttributes) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, host, attribute)) {\n-\t\t\tcheckAttributeValue(sess, host, new Attribute(attribute));\n-\t\t\ttry {\n-\t\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(host, null, new Attribute(attribute)));\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, host, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from host {}.\", sess.getLogId(), attribute.getName(), host.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForHost(new AttributeDefinition(attribute), host));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Host host, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributesDefinition, AttributesManager.NS_HOST_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributesDefinition) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, host, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, host, attributesFromDefinitions(attributesToCheck));\n-\t\ttry {\n-\t\t\tthis.checkAttributesDependencies(sess, host, null, attributesFromDefinitions(attributesToCheck));\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException, WrongAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, host);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, host)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForHost(host));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from host {}.\", sess.getLogId(), host.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, host, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, host, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, vo, attribute)) {\n-\t\t\tcheckAttributeValue(sess, vo, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(vo, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, vo, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from vo {}.\",sess.getLogId(), attribute.getName(), vo.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForVo(new AttributeDefinition(attribute), vo));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Vo vo, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, vo, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, vo, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, vo, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, vo);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, vo)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForVo(vo));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from vo {}.\",sess.getLogId(), vo.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, vo, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, vo, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(group, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, group, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from group {}.\",sess.getLogId(), attribute.getName(), group.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForGroup(new AttributeDefinition(attribute), group));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, group, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, group, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, group);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, group)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForGroup(group));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from group {}.\",sess.getLogId(), group.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, group, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, group, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tboolean changed = removeAttributeWithoutCheck(sess, resource, attribute);\n-\t\tif (changed) {\n-\t\t\tcheckAttributeValue(sess, resource, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(resource, null, new Attribute(attribute)));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\n-\t\ttry {\n-\t\t\tif (this.isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, resource, attribute);\n-\t\t\t}\n-\t\t\tif (changed) getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n-\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif (changed)\n-\t\t\tlog.info(\"{} removed attribute {} from resource {}.\",sess.getLogId(), attribute.getName(), resource.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForResource(new AttributeDefinition(attribute), resource));\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, resource);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, resource)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess,  new AllAttributesRemovedForResource(resource));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from resource {}.\",sess.getLogId(), resource.getId());\n-\t\t//remove all virtual attributes\n+    private final static Logger log = LoggerFactory.getLogger(AttributesManagerBlImpl.class);\n+\n+    private final AttributesManagerImplApi attributesManagerImpl;\n+    private PerunBl perunBl;\n+\n+    //Attributes dependencies. Attr => dependent attributes (and inverse version)\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> dependencies = new ConcurrentHashMap<>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> strongDependencies = new ConcurrentHashMap<>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new ConcurrentHashMap<>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies = new ConcurrentHashMap<>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> allDependencies = new ConcurrentHashMap<>();\n+\n+    private final Object dependenciesMonitor = new Object();\n+\n+    /**\n+     * Constructor.\n+     */\n+    public AttributesManagerBlImpl(AttributesManagerImplApi attributesManagerImpl) {\n+        this.attributesManagerImpl = attributesManagerImpl;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, facility);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Facility facility, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, facility, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, vo);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, vo));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, group);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getVirtualAttributes(sess, resource);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource));\n+        return attributes;\n+    }\n+\n+    private List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, resource);\n+    }\n+\n+    @Override\n+    public List<Attribute> getVirtualAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, member, resource);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n+        return getAttributes(sess, member, resource, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException {\n+        // get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n+        // filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+        // adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+        // adds all attributes which names are in attrNames list (virtual and empty too)\n+        return getAttributesManagerImpl().getAttributes(sess, member, group, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n+        // get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n+        // filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+        // adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            // adds virtual attributes too\n+            attributes.addAll(this.getAttributes(sess, user));\n+            attributes.addAll(this.getAttributes(sess, member));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return this.getAttributes(sess, member, group, workWithUserAttributes);\n+        }\n+\n+        //differentiate between user+member and member-group namespace\n+        List<String> userAndMemberAttributeNames = new ArrayList<>();\n+        List<String> memberGroupAttributeNames = new ArrayList<>();\n+        for (String attrName : attrNames) {\n+            if (attrName.startsWith(AttributesManager.NS_USER_ATTR) || attrName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+                userAndMemberAttributeNames.add(attrName);\n+            } else if (attrName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                memberGroupAttributeNames.add(attrName);\n+            } else {\n+                log.warn(\"Attribute defined by {} is not in supported namespace. Skip it there!\", attrName);\n+            }\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        if (!userAndMemberAttributeNames.isEmpty()) {\n+            attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n+        }\n+        if (!memberGroupAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n+        }\n+\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        // get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, member, resource);\n+        List<Attribute> virtualAttributes = getVirtualAttributes(sess, member, resource);\n+        //remove virtual attributes with null value\n+        Iterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n+        while (virtualAttributesIterator.hasNext()) {\n+            if (virtualAttributesIterator.next().getValue() == null) {\n+                virtualAttributesIterator.remove();\n+            }\n+        }\n+        // adds non-empty non-virtual attributes\n+        attributes.addAll(virtualAttributes);\n+\n+        if (workWithUserAttributes) {\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Resource resource, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (attrNames.isEmpty()) {\n+            return this.getAttributes(sess, member, resource, workWithUserAttributes);\n+        }\n+\n+        List<String> userAndMemberAttributeNames = new ArrayList<>();\n+        List<String> memberResourceAttributeNames = new ArrayList<>();\n+        List<String> userFacilityAttirbuteNames = new ArrayList<>();\n+        for (String attributeName : attrNames) {\n+            if (attributeName.startsWith(AttributesManager.NS_USER_ATTR) || attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+                userAndMemberAttributeNames.add(attributeName);\n+            } else if (attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                memberResourceAttributeNames.add(attributeName);\n+            } else if (attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                userFacilityAttirbuteNames.add(attributeName);\n+            } else {\n+                log.warn(\"Attribute defined by {} is not in supported namespace. Skip it there!\", attributeName);\n+            }\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        //Call only if list of attributes is not empty\n+        if (!userAndMemberAttributeNames.isEmpty()) {\n+            attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n+        }\n+        if (!memberResourceAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource, memberResourceAttributeNames));\n+        }\n+        if (workWithUserAttributes && !userFacilityAttirbuteNames.isEmpty()) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user, facility, userFacilityAttirbuteNames));\n+        }\n+\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Group group, Member member, Resource resource, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException, GroupResourceMismatchException {\n+        checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<Attribute> attributes = getAttributes(sess, member, resource, attrNames, workWithUserAttributes);\n+\n+        if (attrNames.isEmpty()) {\n+            attributes.addAll(getAttributes(sess, member, group));\n+            return attributes;\n+        }\n+\n+        List<String> memberGroupAttributeNames = new ArrayList<>();\n+\n+        for (String attributeName : attrNames) {\n+            if (attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                memberGroupAttributeNames.add(attributeName);\n+            }\n+        }\n+        if (!memberGroupAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(this.getAttributes(sess, member));\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            attributes.addAll(this.getAttributes(sess, user));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException {\n+        List<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, group, startPartOfName);\n+        attrs.removeIf(attr -> attr.getValue() == null);\n+        return attrs;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException {\n+        List<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, startPartOfName);\n+        attrs.removeIf(attr -> attr.getValue() == null);\n+        return attrs;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, member, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+        return getAttributesManagerImpl().getAttributes(sess, group, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+        return getAttributesManagerImpl().getAttributes(sess, resource, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n+        List<Attribute> attributes = this.getAttributes(sess, member, attrNames);\n+\n+        if (!workWithUserAttributes) {\n+            return attributes;\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            attributes.addAll(this.getAttributes(sess, user, attrNames));\n+\n+            return attributes;\n+        }\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, vo, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, UserExtSource ues, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, ues, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException {\n+        List<Attribute> attributes = getAttributesManagerImpl().getUserFacilityAttributesForAnyUser(sess, facility);\n+        List<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+        List<Attribute> virtualAttributes = new ArrayList<>();\n+        for (User user : facilityUsers) {\n+            virtualAttributes.addAll(getVirtualAttributes(sess, facility, user));\n+        }\n+\n+        //remove virtual attributes with null value\n+        virtualAttributes.removeIf(attribute -> attribute.getValue() == null);\n+\n+        attributes.addAll(virtualAttributes);\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, facility, user);\n+        List<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n+\n+        //remove virtual attributes with null value\n+        virtualAttributes.removeIf(attribute -> attribute.getValue() == null);\n+\n+        attributes.addAll(virtualAttributes);\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAttributes(sess, key);\n+    }\n+\n+    @Override\n+    public List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws InternalErrorException {\n+        return getAttributesManagerImpl().getEntitylessAttributes(sess, attrName);\n+    }\n+\n+    @Override\n+    public List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+        return getAttributesManagerImpl().getEntitylessKeys(sess, attributeDefinition);\n+    }\n+\n+    @Override\n+    public Attribute getEntitylessAttributeForUpdate(PerunSession sess, String key, String attrName) throws InternalErrorException, AttributeNotExistsException {\n+        AttributeDefinition attrDef = this.getAttributeDefinition(sess, attrName);\n+        Attribute attr = new Attribute(attrDef);\n+\n+        String value = getAttributesManagerImpl().getEntitylessAttrValueForUpdate(sess, attrDef.getId(), key);\n+\n+        if (value != null) {\n+            attr.setValue(BeansUtils.stringToAttributeValue(value, attr.getType()));\n+        }\n+\n+        return attr;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (isCoreAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition)) {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+\n+        return getAttributesManagerImpl().getAttributesByAttributeDefinition(sess, attributeDefinition);\n+    }\n+\n+    @Override\n+    public List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, facility, user);\n+    }\n+\n+    @Override\n+    public List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, user);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, user);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, user, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, host);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, host));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupResourceMismatchException {\n+        return getAttributesManagerImpl().getAttributes(sess, resource, group);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group));\n+        if (workWithGroupAttributes) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, List<String> attrNames, boolean workWithGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (attrNames.isEmpty()) {\n+            return this.getAttributes(sess, resource, group, workWithGroupAttributes);\n+        }\n+\n+        List<String> groupAttributeNames = new ArrayList<>();\n+        List<String> groupResourceAttributeNames = new ArrayList<>();\n+\n+        for (String attributeName : attrNames) {\n+            if (attributeName.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n+                groupAttributeNames.add(attributeName);\n+            } else if (attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                groupResourceAttributeNames.add(attributeName);\n+            } else {\n+                log.warn(\"Attribute defined by {} is not in supported namespace. Skip it there!\", attributeName);\n+            }\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        //Call only if list of attributes is not empty\n+        if (workWithGroupAttributes && !groupAttributeNames.isEmpty()) {\n+            attributes.addAll(this.getAttributes(sess, group, attrNames));\n+        }\n+        if (!groupResourceAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group, attrNames));\n+        }\n+\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource));\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, ues);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, ues));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, facility, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, facility, attribute);\n+                }\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, facility, attributesToSet);\n+        log.debug(\"IMPORTANT: ENTERING CHECK ATTRIBUTES DEPENDENCIES\");\n+        checkAttributesDependencies(sess, facility, null, attributesToSet);\n+        log.debug(\"IMPORTANT: EXITING CHECK ATTRIBUTES DEPENDENCIES\");\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, vo, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, vo, attribute);\n+                }\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, vo, attributesToSet);\n+        this.checkAttributesDependencies(sess, vo, null, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, group, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                setAttributeWithoutCheck(sess, group, attribute);\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, group, attributesToSet);\n+        this.checkAttributesDependencies(sess, group, null, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                setAttributeWithoutCheck(sess, resource, attribute);\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, resource, attributesToSet);\n+        this.checkAttributesDependencies(sess, resource, null, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        setAttributes(sess, member, resource, attributes, false);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n+        setAttributes(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n+        // classification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, member, group, attributesToRemove, workWithUserAttributes);\n+        // fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        if (!workWithUserAttributes) {\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    setAttributeWithoutCheck(sess, member, group, attribute, false);\n+                }\n+            }\n+        } else {\n+            getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            for (Attribute attribute : attributesToSet) {\n+                // skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    // this can handle member-group, member and user attributes too\n+                    setAttributeWithoutCheck(sess, member, group, attribute, true);\n+                }\n+            }\n+        }\n+\n+        // if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, member, group, attributesToSet, workWithUserAttributes);\n+        this.checkAttributesDependencies(sess, member, group, attributesToSet, workWithUserAttributes);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, member, attributesToRemove);\n+        User user;\n+        if (!workWithUserAttributes) {\n+            long timer = Utils.startTimer();\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            }\n+            log.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n+        } else {\n+            long timer = Utils.startTimer();\n+            user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            log.debug(\"addMember timer: getMember and User [{}].\", Utils.getRunningTime(timer));\n+            for (Attribute attribute : attributesToSet) {\n+                boolean changed;\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, user, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, member, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, member, attributesToSet, workWithUserAttributes);\n+        this.checkAttributesDependencies(sess, member, attributesToSet, workWithUserAttributes);\n+    }\n+\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes, boolean workWithUserAttributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, member, attributesToRemove, workWithUserAttributes);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        if (!workWithUserAttributes) {\n+            long timer = Utils.startTimer();\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    setAttributeWithoutCheck(sess, member, resource, attribute, false);\n+                }\n+            }\n+            log.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n+        } else {\n+            long timer = Utils.startTimer();\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            log.debug(\"addMember timer: getFacility and User [{}].\", Utils.getRunningTime(timer));\n+\n+            for (Attribute attribute : attributesToSet) {\n+                boolean changed;\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, member, resource, attribute, false);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute rm [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, facility, user, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute uf [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, user, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, member, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, member, resource, attributesToSet, workWithUserAttributes);\n+        this.checkAttributesDependencies(sess, resource, member, attributesToSet, workWithUserAttributes);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, facility, resource, user, member, attributesToRemove);\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    setAttributeWithoutCheck(sess, member, resource, attribute, false);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    setAttributeWithoutCheck(sess, facility, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    setAttributeWithoutCheck(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    setAttributeWithoutCheck(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, facility, resource, user, member, attributesToSet);\n+        this.checkAttributesDependencies(sess, resource, member, user, facility, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Facility facility, Resource resource, Group group, User user, Member member, List<Attribute> attributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, facility, resource, group, user, member, attributesToRemove);\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    setAttributeWithoutCheck(sess, member, resource, attribute, false);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    setAttributeWithoutCheck(sess, facility, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    setAttributeWithoutCheck(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    setAttributeWithoutCheck(sess, member, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                    setAttributeWithoutCheck(sess, member, group, attribute, false);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, facility, resource, group, user, member, attributesToSet);\n+        this.checkAttributesDependencies(sess, resource, group, member, user, facility, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, member, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, member, attributesToSet);\n+        this.checkAttributesDependencies(sess, member, null, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, facility, user, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                setAttributeWithoutCheck(sess, facility, user, attribute);\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, facility, user, attributesToSet);\n+        this.checkAttributesDependencies(sess, facility, user, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, user, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, user, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, user, attributesToSet);\n+        this.checkAttributesDependencies(sess, user, null, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, host, attributesToRemove);\n+        for (Attribute attribute : attributesToSet) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, host, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, host, attributesToSet);\n+        this.checkAttributesDependencies(sess, host, null, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, group, attributesToRemove);\n+        for (Attribute attribute : attributesToSet) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                setAttributeWithoutCheck(sess, resource, group, attribute);\n+            }\n+        }\n+        checkAttributesValue(sess, resource, group, attributesToSet);\n+        this.checkAttributesDependencies(sess, resource, group, attributesToSet);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, group, attributesToRemove, workWithGroupAttributes);\n+        if (!workWithGroupAttributes) {\n+            setAttributes(sess, resource, group, attributes);\n+        } else {\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                        setAttributeWithoutCheck(sess, resource, group, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_ATTR)) {\n+                        setAttributeWithoutCheck(sess, group, attribute);\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, resource, group, attributesToSet, true);\n+            this.checkAttributesDependencies(sess, resource, group, attributesToSet, true);\n+        }\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<>();\n+        List<Attribute> attributesToSet = new ArrayList<>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, ues, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, ues, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, ues, attributesToSet);\n+        this.checkAttributesDependencies(sess, ues, null, attributesToSet);\n+    }\n+\n+    private void setCoreAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+\n+        if (!attribute.getName().equals(\"urn:perun:member:attribute-def:core:status\")) {\n+            throw new InternalErrorException(\"We can set only urn:perun:member:attribute-def:core:status from member's core attributes. Others are not permitted.\");\n+        }\n+\n+        //defensive construction\n+        Member storedMember;\n+        try {\n+            storedMember = getPerunBl().getMembersManagerBl().getMemberById(sess, member.getId());\n+        } catch (MemberNotExistsException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+        if (!member.equals(storedMember)) {\n+            throw new InternalErrorException(\"You wan't to store core attribute for member which is not equals to member from DB (with same Id)\");\n+        }\n+\n+        String methodName = \"set\" + Character.toUpperCase(attribute.getFriendlyName().charAt(0)) + attribute.getFriendlyName().substring(1);\n+        Method method;\n+        try {\n+            method = member.getClass().getMethod(methodName, Class.forName(attribute.getType()));\n+        } catch (NoSuchMethodException ex) {\n+            throw new InternalErrorException(\"Bad core attribute definition. \" + attribute, ex);\n+        } catch (ClassNotFoundException ex) {\n+            throw new InternalErrorException(\"Bad core attribute type. \" + attribute, ex);\n+        }\n+\n+        try {\n+            method.invoke(member, attribute.getValue());\n+        } catch (IllegalAccessException ex) {\n+            throw new InternalErrorException(ex);\n+        } catch (InvocationTargetException ex) {\n+            throw new WrongAttributeValueException(ex);\n+        } catch (IllegalArgumentException ex) {\n+            throw new WrongAttributeValueException(attribute, \"Probably bad type of value\", ex);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        getPerunBl().getMembersManagerBl().updateMember(sess, member);\n+    }\n+\n+    @Override\n+    public List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAllSimilarAttributeNames(sess, startingPartOfAttributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_FACILITY_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, facility, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_VO_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, vo, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        String namespace = getNamespaceFromAttributeName(attributeName);\n+        if (!namespace.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, group, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_RESOURCE_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, resource, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Member member, Resource resource, String attributeName) throws InternalErrorException, MemberResourceMismatchException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, member, resource, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        // check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, member, group, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, member, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, facility, user, attributeName);\n+\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_USER_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, user, attributeName);\n+    }\n+\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        if (!attributeName.startsWith(AttributesManager.NS_HOST_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+        }\n+        return getAttributesManagerImpl().getAttribute(sess, host, attributeName);\n+\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+        }\n+        return getAttributesManagerImpl().getAttribute(sess, resource, group, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        if (!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+        }\n+        return getAttributesManagerImpl().getAttribute(sess, key, attributeName);\n+    }\n+\n+    @Override\n+    public Map<String, String> getEntitylessStringAttributeMapping(PerunSession sess, String attributeName) throws WrongAttributeAssignmentException, AttributeNotExistsException, InternalErrorException {\n+        if (!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+        }\n+        return getAttributesManagerImpl().getEntitylessStringAttributeMapping(sess, attributeName);\n+    }\n+\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_UES_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, ues, attributeName);\n+    }\n+\n+    @Override\n+    public AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException {\n+        return getAttributesManagerImpl().getAttributeDefinition(sess, attributeName);\n+    }\n+\n+    @Override\n+    public List<AttributeDefinition> getAttributesDefinitionWithRights(PerunSession sess, List<PerunBean> entities) throws InternalErrorException, AttributeNotExistsException {\n+        List<AttributeDefinition> attributeDefinitions = new ArrayList<>();\n+\n+        //if there is no entities, so no attribute definition will be returned => empty array list of ADs\n+        if (entities == null || entities.isEmpty()) {\n+            return attributeDefinitions;\n+        }\n+        //or fill list by all attributeDefinitions\n+        else {\n+            attributeDefinitions = this.getAttributesDefinition(sess);\n+        }\n+\n+        //Prepare possible objects\n+        User user = null;\n+        Member member = null;\n+        Vo vo = null;\n+        Resource resource = null;\n+        Group group = null;\n+        Facility facility = null;\n+        Host host = null;\n+        UserExtSource ues = null;\n+\n+        //Iterate through all entities and fill those which are in list of entities\n+        for (PerunBean entity : entities) {\n+            if (entity instanceof User) {\n+                user = (User) entity;\n+            } else if (entity instanceof Member) {\n+                member = (Member) entity;\n+            } else if (entity instanceof Vo) {\n+                vo = (Vo) entity;\n+            } else if (entity instanceof Resource) {\n+                resource = (Resource) entity;\n+            } else if (entity instanceof Group) {\n+                group = (Group) entity;\n+            } else if (entity instanceof Facility) {\n+                facility = (Facility) entity;\n+            } else if (entity instanceof Host) {\n+                host = (Host) entity;\n+            } else if (entity instanceof UserExtSource) {\n+                ues = (UserExtSource) entity;\n+            }\n+            //Else skip not identified entity (log it)\n+            else {\n+                log.warn(\"In method GetAttributesDefinitionWithRights there is entity which is not identified correctly and will be skipped: {}\", entity);\n+            }\n+        }\n+\n+        //Iterate through all attributesDefinitions and remove those which are not in the possible namespace or user in session has no rights to read them\n+        Iterator<AttributeDefinition> iterator = attributeDefinitions.iterator();\n+        while (iterator.hasNext()) {\n+            AttributeDefinition attrDef = iterator.next();\n+\n+            if (this.isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR) && user != null && facility != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, facility)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, facility));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR) && member != null && resource != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, resource)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, resource));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR) && member != null && group != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, group)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, group));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR) && group != null && resource != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, resource)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, resource));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_USER_ATTR) && user != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_ATTR) && member != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_VO_ATTR) && vo != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, vo)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, vo));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR) && resource != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, resource)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, resource));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_GROUP_ATTR) && group != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_FACILITY_ATTR) && facility != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, facility)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, facility));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_HOST_ATTR) && host != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, host)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, host));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_UES_ATTR) && ues != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, ues)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, ues));\n+                }\n+            } else {\n+                //if there is another namespace or if there are no entities (which are needed for the namespace) remove this attributeDefinition\n+                iterator.remove();\n+            }\n+        }\n+\n+        return attributeDefinitions;\n+    }\n+\n+    @Override\n+    public List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAttributesDefinition(sess);\n+    }\n+\n+    @Override\n+    public List<AttributeDefinition> getAttributesDefinition(PerunSession sess, List<String> listOfAttributesNames) throws AttributeNotExistsException, InternalErrorException {\n+        List<AttributeDefinition> listOfAttributeDefinitions = new ArrayList<>();\n+        for (String name : listOfAttributesNames) {\n+            listOfAttributeDefinitions.add(this.getAttributeDefinition(sess, name));\n+        }\n+        return listOfAttributeDefinitions;\n+    }\n+\n+    @Override\n+    public AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException {\n+        return getAttributesManagerImpl().getAttributeDefinitionById(sess, id);\n+    }\n+\n+    @Override\n+    public List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAttributesDefinitionByNamespace(sess, namespace);\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, vo, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Member member, Resource resource, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        AttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n+\n+        if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+            Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, resource, id);\n+            getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+            return attribute;\n+        } else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+            //user-facility attribues\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+\n+            return getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n+            //user and user core attributes\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            return getAttributesManagerImpl().getAttributeById(sess, user, id);\n+        } else {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        AttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n+\n+        if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+            Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, group, id);\n+            getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+            return attribute;\n+        } else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_MEMBER_ATTR)) {\n+            return getAttributesManagerImpl().getAttributeById(sess, member, id);\n+        } else if (getAttributesManagerImpl().isFromNamespace(attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n+            //user and user core attributes\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            return getAttributesManagerImpl().getAttributeById(sess, user, id);\n+        } else {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, user, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, host, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, group, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, group, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, ues, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException, MemberResourceMismatchException {\n+        //fill attributes and get back only those which were really filled with new value\n+        List<Attribute> filledAttributes = this.fillAttributes(sess, facility, resource, user, member, attributes, true);\n+\n+        //Remove all filledAttributes from all attributes list\n+        Iterator<Attribute> iterAttr = attributes.iterator();\n+        while (iterAttr.hasNext()) {\n+            Attribute attributeFromAllAttrs = iterAttr.next();\n+            for (Attribute attributeFromFillAttrs : filledAttributes) {\n+                if (attributeFromAllAttrs.getName().equals(attributeFromFillAttrs.getName())) {\n+                    iterAttr.remove();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        //Set all filledAttributes withoutCheck\n+        for (Attribute attribute : filledAttributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, member, resource, attribute, false);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, facility, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+\n+        //Join all attributes and filled attributes together\n+        attributes.addAll(filledAttributes);\n+\n+        //refresh all virtual attributes with new value\n+        for (Attribute attr : attributes) {\n+            if (this.isVirtAttribute(sess, attr)) {\n+                if (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, member, resource, attr.getName()).getValue());\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, facility, user, attr.getName()).getValue());\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_USER_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, user, attr.getName()).getValue());\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, AttributesManager.NS_MEMBER_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, member, attr.getName()).getValue());\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+        }\n+\n+        //Check all attributes\n+        checkAttributesValue(sess, facility, resource, user, member, attributes);\n+\n+        //Check all attributes dependencies\n+        this.checkAttributesDependencies(sess, resource, member, user, facility, attributes);\n+    }\n+\n+    @Override\n+    public void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException, AttributeNotExistsException, MemberResourceMismatchException {\n+        //get all attributes (for member, resource, facility and user) with values\n+        List<Attribute> attributes = this.getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n+\n+        this.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n+    }\n+\n+    @Override\n+    public void setRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException, MemberResourceMismatchException {\n+        //get all attributes (for member, resource, facility, user and service) with values\n+        List<Attribute> attributes = this.getRequiredAttributes(sess, service, facility, resource, user, member);\n+\n+        this.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, facility, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, facility, attribute)) {\n+            checkAttributeValue(sess, facility, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(facility, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, facility, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForFacility(attribute, facility));\n+            getAttributesManagerImpl().changedAttributeHook(sess, facility, attribute);\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, vo, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, vo, attribute)) {\n+            checkAttributeValue(sess, vo, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(vo, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_VO_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, vo, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForVo(attribute, vo));\n+            getAttributesManagerImpl().changedAttributeHook(sess, vo, attribute);\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, group, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, group, attribute)) {\n+            checkAttributeValue(sess, group, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(group, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, resource, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, resource, attribute)) {\n+            checkAttributeValue(sess, resource, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(resource, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            try {\n+                changed = getAttributesManagerImpl().setVirtualAttribute(sess, resource, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, resource, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForResource(attribute, resource));\n+            getAttributesManagerImpl().changedAttributeHook(sess, resource, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            try {\n+                changed = getAttributesManagerImpl().setVirtualAttribute(sess, group, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, group, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForGroup(attribute, group));\n+            getAttributesManagerImpl().changedAttributeHook(sess, group, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Member member, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, member, resource, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, member, resource, attribute, false)) {\n+            checkAttributeValue(sess, member, resource, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(resource, member, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, AttributeNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, member, group, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, member, group, attribute, false)) {\n+            checkAttributeValue(sess, member, group, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(member, group, attribute));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    public void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, member, resource, attribute);\n+            return;\n+        }\n+        if (!workWithUserAttributes) {\n+            if (setAttributeWithoutCheck(sess, member, resource, attribute, false)) {\n+                this.checkAttributeDependencies(sess, new RichAttribute<>(resource, member, attribute));\n+                checkAttributeValue(sess, member, resource, attribute);\n+            }\n+        } else {\n+            if (setAttributeWithoutCheck(sess, member, resource, attribute, true)) {\n+                List<Attribute> listOfAttributes = new ArrayList<>();\n+                listOfAttributes.add(attribute);\n+                checkAttributesValue(sess, member, resource, listOfAttributes, true);\n+                this.checkAttributesDependencies(sess, resource, member, listOfAttributes, true);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+            try {\n+                changed = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+\n+            //FIXME update changed variable\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, facility, user, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForFacilityAndUser(attribute, facility, user));\n+            getAttributesManagerImpl().changedAttributeHook(sess, facility, user, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Member member, Resource resource, Attribute attribute, boolean workWithUserAttributes)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+            //NS_MEMBER_RESOURCE_ATTR\n+            if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+            } else {\n+                changed = getAttributesManagerImpl().setAttribute(sess, resource, member, attribute);\n+                if (changed) {\n+                    getPerunBl().getAuditer().log(sess, new AttributeSetForResourceAndMember(attribute, resource, member));\n+                    getAttributesManagerImpl().changedAttributeHook(sess, member, resource, attribute);\n+                }\n+            }\n+        } else if (workWithUserAttributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                //NS_USER_FACILITY_ATTR\n+                User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, facility, user, attribute);\n+                }\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                //NS_USER_ATTR\n+                User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, user, attribute);\n+                }\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Member member, Group group, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+            if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, group, attribute);\n+            } else {\n+                changed = getAttributesManagerImpl().setAttribute(sess, member, group, attribute);\n+                if (changed) {\n+                    getPerunBl().getAuditer().log(sess, new AttributeSetForMemberAndGroup(attribute, member, group));\n+                    getAttributesManagerImpl().changedAttributeHook(sess, member, group, attribute);\n+                }\n+            }\n+        } else if (workWithUserAttributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, user, attribute);\n+                }\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, member, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, member, attribute)) {\n+            checkAttributeValue(sess, member, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(member, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public void setAttributeInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        setAttribute(sess, member, attribute);\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR);\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            try {\n+                return getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+\n+            //FIXME update \"changed\" variable\n+\n+        } else if (isCoreAttribute(sess, attribute)) {\n+            try {\n+                setCoreAttributeWithoutCheck(sess, member, attribute);\n+            } catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            changed = true; //FIXME check if attribute is acctualy changed\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, member, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForMember(attribute, member));\n+            getAttributesManagerImpl().changedAttributeHook(sess, member, attribute);\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, facility, user, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, facility, user, attribute)) {\n+            checkAttributeValue(sess, facility, user, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(facility, user, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, user, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, user, attribute)) {\n+            checkAttributeValue(sess, user, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(user, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public void setAttributeInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        setAttribute(sess, user, attribute);\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            return getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, user, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForUser(attribute, user));\n+            getAttributesManagerImpl().changedAttributeHook(sess, user, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, host, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, host, attribute)) {\n+            checkAttributeValue(sess, host, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(host, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            throw new InternalErrorException(\"Virtual attribute \" + attribute + \" can't be set this way yet. Please set physical attribute.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, host, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForHost(attribute, host));\n+            getAttributesManagerImpl().changedAttributeHook(sess, host, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, resource, group, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, resource, group, attribute)) {\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(resource, group, attribute));\n+            checkAttributeValue(sess, resource, group, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //FIXME Zatim je zakazane nastavovani virtualnich atributu group_resource\n+\n+            Attribute storedAttribute;\n+            try {\n+                storedAttribute = getAttribute(sess, resource, group, attribute.getName());\n+            } catch (AttributeNotExistsException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+            if (!(storedAttribute.getValue() == null ? attribute.getValue() == null : storedAttribute.getValue().equals(attribute.getValue()))) { //unless attribute and storedAttribute have equals value\n+                //FIXME\n+                if (attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGID\") ||\n+                        attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGroupName\")) {\n+                    return getAttributesManagerImpl().setVirtualAttribute(sess, resource, group, attribute);\n+                } else {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute. \" + attribute);\n+                }\n+            } else {\n+                return false;\n+            }\n+\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, resource, group, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForGroupAndResource(attribute, group, resource));\n+            getAttributesManagerImpl().changedAttributeHook(sess, resource, group, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    private boolean setAttributeWithoutCheck(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            return getAttributesManagerImpl().setVirtualAttribute(sess, ues, attribute);\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, ues, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForUes(attribute, ues));\n+            getAttributesManagerImpl().changedAttributeHook(sess, ues, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+        if (isVirtAttribute(sess, attribute)) {\n+            throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, key, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AttributeSetForKey(attribute, key));\n+            getAttributesManagerImpl().changedAttributeHook(sess, key, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, key, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, key, attribute)) {\n+            checkAttributeValue(sess, key, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(key, null, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, ues, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, ues, attribute)) {\n+            checkAttributeValue(sess, ues, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(ues, null, attribute));\n+        }\n+    }\n+\n+\n+    @Override\n+    public AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeDefinitionExistsException {\n+        return createAttribute(sess, attribute, true);\n+    }\n+\n+    /**\n+     * Creates an attribute, the attribute is stored into the appropriate DB table according to the namespace.\n+     * The calculateDependencies value specifies if the attribute module dependencies should be calculated.\n+     *\n+     * @param sess                  perun session\n+     * @param attribute             attribute to create\n+     * @param calculateDependencies should calculate module dependencies\n+     * @return attribute with set id\n+     * @throws AttributeDefinitionExistsException if attribute already exists\n+     * @throws InternalErrorException             if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    private AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute, boolean calculateDependencies) throws InternalErrorException, AttributeDefinitionExistsException {\n+        Utils.notNull(attribute.getName(), \"attribute.getName\");\n+        Utils.notNull(attribute.getNamespace(), \"attribute.getNamespace\");\n+        Utils.notNull(attribute.getFriendlyName(), \"attribute.getFriendlyName\");\n+        Utils.notNull(attribute.getType(), \"attribute.getType\");\n+\n+        //check if attribute.nameSpace is valid nameSpace\n+        if (!isCorrectNameSpace(attribute.getNamespace())) {\n+            throw new InternalErrorException(\"Incorrect namespace \" + attribute.getNamespace());\n+        }\n+\n+        //check if attribute.type is valid class name\n+        try {\n+            if (!attribute.getType().equals(BeansUtils.largeStringClassName) &&\n+                    !attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n+                Class.forName(attribute.getType());\n+            }\n+        } catch (ClassNotFoundException ex) {\n+            throw new InternalErrorException(\"Wrong attribute type\", ex);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        if (attribute.isUnique()) {\n+            if (attribute.getNamespace().startsWith(NS_ENTITYLESS_ATTR)) {\n+                throw new InternalErrorException(\"entityless attributes cannot be marked unique\");\n+            }\n+            if (!Arrays.asList(\"def\", \"opt\").contains(attribute.getNamespace().split(\":\")[4])) {\n+                throw new InternalErrorException(\"only 'def' and 'opt' attributes can be unique\");\n+            }\n+        }\n+\n+        attribute = getAttributesManagerImpl().createAttribute(sess, attribute);\n+\n+        if (calculateDependencies) {\n+            handleAttributeModuleDependencies(sess, attribute);\n+        }\n+\n+        getPerunBl().getAuditer().log(sess, new AttributeCreated(attribute));\n+\n+        return attribute;\n+    }\n+\n+    /**\n+     * For given attribute finds its dependencies and adds them to the all maps containing any dependencies.\n+     *\n+     * @param sess      session\n+     * @param attribute attribute\n+     * @throws InternalErrorException internal error\n+     */\n+    private void handleAttributeModuleDependencies(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+        synchronized (dependenciesMonitor) {\n+            // create attribute definition in case of receiving Attribute instance\n+            AttributeDefinition attributeDef = new AttributeDefinition(attribute);\n+\n+            AttributesModuleImplApi module = (AttributesModuleImplApi) getAttributesManagerImpl().getAttributesModule(sess, attributeDef);\n+\n+            if (module == null) {\n+                dependencies.put(attributeDef, new HashSet<>());\n+                strongDependencies.put(attributeDef, new HashSet<>());\n+                inverseDependencies.put(attributeDef, new HashSet<>());\n+                inverseStrongDependencies.put(attributeDef, new HashSet<>());\n+                allDependencies.put(attributeDef, new HashSet<>());\n+                return;\n+            }\n+\n+            // we need to create deep copies to prevent a creation of inconsistency state of dependencies if anything goes wrong\n+            Map<AttributeDefinition, Set<AttributeDefinition>> dependenciesCopy = Utils.createDeepCopyOfMapWithSets(dependencies);\n+            Map<AttributeDefinition, Set<AttributeDefinition>> strongDependenciesCopy = Utils.createDeepCopyOfMapWithSets(strongDependencies);\n+            Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependenciesCopy = Utils.createDeepCopyOfMapWithSets(inverseDependencies);\n+            Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependenciesCopy = Utils.createDeepCopyOfMapWithSets(inverseStrongDependencies);\n+            Map<AttributeDefinition, Set<AttributeDefinition>> allDependenciesCopy = Utils.createDeepCopyOfMapWithSets(allDependencies);\n+\n+            Set<AttributeDefinition> moduleDependencies = getDependenciesForModule(sess, module);\n+            Set<AttributeDefinition> moduleStrongDependencies = new HashSet<>();\n+\n+            if (module instanceof VirtualAttributesModuleImplApi) {\n+                moduleStrongDependencies = getStrongDependenciesForModule(sess, (VirtualAttributesModuleImplApi) module);\n+            }\n+\n+            dependenciesCopy.put(attributeDef, moduleDependencies);\n+            strongDependenciesCopy.put(attributeDef, moduleStrongDependencies);\n+\n+            updateInverseDependenciesForAttribute(inverseDependenciesCopy, attributeDef, dependenciesCopy);\n+            updateInverseDependenciesForAttribute(inverseStrongDependenciesCopy, attributeDef, strongDependenciesCopy);\n+\n+            if (isMapOfAttributesDefCyclic(inverseStrongDependenciesCopy)) {\n+                throw new InternalErrorException(\"There is a cycle in strong dependencies after adding new attribute definition: \" + attributeDef.getNamespace());\n+            }\n+\n+            Set<AttributeDefinition> allAttributeDependencies =\n+                    findAllAttributeDependencies(attributeDef, inverseDependenciesCopy, inverseStrongDependenciesCopy);\n+            allDependenciesCopy.put(attributeDef, allAttributeDependencies);\n+\n+            // if all went well, switch dependencies maps\n+            dependencies = dependenciesCopy;\n+            strongDependencies = strongDependenciesCopy;\n+            inverseDependencies = inverseDependenciesCopy;\n+            inverseStrongDependencies = inverseStrongDependenciesCopy;\n+            allDependencies = allDependenciesCopy;\n+        }\n+    }\n+\n+    private boolean isCorrectNameSpace(String value) {\n+        for (String entityType : AttributesManager.ENTITY_TYPES) {\n+            if (value.matches(\"urn:perun:\" + entityType + \":attribute-def:(def|opt|virt|core)\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+        //Remove services' required attributes\n+        //TODO\n+\n+        AttributeDefinition attributeDef = new AttributeDefinition(attribute);\n+        //Remove attribute dependencies\n+        synchronized (dependenciesMonitor) {\n+\n+            removeOppositeDependenciesForAttribute(attributeDef);\n+\n+            if (dependencies.containsKey(attributeDef)) {\n+                dependencies.remove(attributeDef);\n+            } else {\n+                log.warn(\"Dependencies inconsistency. Dependencies should contain information about {}. \", attributeDef);\n+            }\n+            if (strongDependencies.containsKey(attributeDef)) {\n+                strongDependencies.remove(attributeDef);\n+            } else {\n+                log.warn(\"Strong dependencies inconsistency. Strong dependencies should contain information about {}. \", attributeDef);\n+            }\n+            if (inverseDependencies.containsKey(attributeDef)) {\n+                inverseDependencies.remove(attributeDef);\n+            } else {\n+                log.warn(\"Inverse dependencies inconsistency. Inverse dependencies should contain information about {}. \", attributeDef);\n+            }\n+            if (inverseStrongDependencies.containsKey(attributeDef)) {\n+                inverseStrongDependencies.remove(attributeDef);\n+            } else {\n+                log.warn(\"Inverse strong dependencies inconsistency. Inverse strong dependencies should contain information about {}. \", attributeDef);\n+            }\n+        }\n+\n+        //Remove attribute and all it's values\n+        getPerunBl().getAuditer().log(sess, new AttributeDeleted(attribute));\n+        this.deleteAllAttributeAuthz(sess, attribute);\n+        getAttributesManagerImpl().deleteAttribute(sess, attribute);\n+    }\n+\n+    /**\n+     * This method for given attribute A removes from dependencies all relations of type\n+     * B => A (B depends on A) where B is any other attribute. If it finds any inconsistency\n+     * in dependencies data, it logs information about it.\n+     *\n+     * @param attribute attribute which dependency relations are removed\n+     */\n+    private void removeOppositeDependenciesForAttribute(AttributeDefinition attribute) {\n+        Set<AttributeDefinition> attributeDeps = dependencies.get(attribute);\n+        Set<AttributeDefinition> attributeInverseDeps = inverseDependencies.get(attribute);\n+        Set<AttributeDefinition> attributeStrongDeps = strongDependencies.get(attribute);\n+        Set<AttributeDefinition> attributeInverseStrongDeps = inverseStrongDependencies.get(attribute);\n+\n+        attributeInverseDeps.forEach(attr -> {\n+            if (dependencies.containsKey(attr)) {\n+                if (!dependencies.get(attr).remove(attribute)) {\n+                    log.warn(\"Dependencies inconsistency. Atribute {} should have dependency on attribute {}.\", attr, attribute);\n+                }\n+            } else {\n+                log.warn(\"Dependencies inconsistency. Dependencies should contain information about {}.\", attr);\n+            }\n+        });\n+        attributeStrongDeps.forEach(attr -> {\n+            if (inverseStrongDependencies.containsKey(attr)) {\n+                if (!inverseStrongDependencies.get(attr).remove(attribute)) {\n+                    log.warn(\"Inverse strong dependencies inconsistency. Atribute {} should have inverse strong dependency on attribute {}.\", attr, attribute);\n+                }\n+            } else {\n+                log.warn(\"Inverse strong dependencies inconsistency. Inverse strong dependencies inconsistency should contain information about {}.\", attr);\n+            }\n+        });\n+        attributeInverseStrongDeps.forEach(attr -> {\n+            if (strongDependencies.containsKey(attr)) {\n+                if (!strongDependencies.get(attr).remove(attribute)) {\n+                    log.warn(\"Strong dependencies inconsistency. Atribute {} should have strong dependency on attribute {}.\", attr, attribute);\n+                }\n+            } else {\n+                log.warn(\"Strong dependencies inconsistency. Strong dependencies should have contained information about {}.\", attr);\n+            }\n+        });\n+        attributeDeps.forEach(attr -> {\n+            if (inverseDependencies.containsKey(attr)) {\n+                if (!inverseDependencies.get(attr).remove(attribute)) {\n+                    log.warn(\"Inverse dependencies inconsistency. Atribute {} should have inverse dependency on attribute {}.\", attr, attribute);\n+                }\n+            } else {\n+                log.warn(\"Inverse dependencies inconsistency. Inverse dependencies should have contained information about {}.\", attr);\n+            }\n+        });\n+\n+        // there is no inverse version of all dependencies so we have to walk through all\n+        allDependencies.remove(attribute);\n+        allDependencies.values().forEach(attributes -> attributes.remove(attribute));\n+    }\n+\n+    @Override\n+    public void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+        getPerunBl().getAuditer().log(sess, new AttributeAuthzDeleted(attribute));\n+        getAttributesManagerImpl().deleteAllAttributeAuthz(sess, attribute);\n+    }\n+\n+    @Override\n+    public void deleteAttribute(PerunSession sess, AttributeDefinition attributeDefinition, boolean force) throws InternalErrorException {\n+        throw new InternalErrorException(\"Not implemented yet!\");\n+    }\n+\n+    @Override\n+    public List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getResourceRequiredAttributesDefinition(sess, resource);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n+        return getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, resource, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<>();\n+\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, resource));\n+\n+        if (workWithUserAttributes) {\n+            User user;\n+            Facility facility;\n+            try {\n+                user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityById(sess, resource.getFacilityId());\n+            } catch (UserNotExistsException e) {\n+                throw new ConsistencyErrorException(\"Member has non-existent user.\", e);\n+            } catch (FacilityNotExistsException e) {\n+                throw new ConsistencyErrorException(\"Resource has non-existent facility.\", e);\n+            }\n+\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, group, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        List<Attribute> attributes = new ArrayList<>();\n+\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, group));\n+\n+        if (workWithUserAttributes) {\n+            User user;\n+            try {\n+                user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+            } catch (UserNotExistsException e) {\n+                throw new ConsistencyErrorException(\"Member has non-existent user.\", e);\n+            }\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Resource resource) throws InternalErrorException {\n+        List<Integer> serviceIds = new ArrayList<>();\n+        for (Service service : services) {\n+            serviceIds.add(service.getId());\n+        }\n+        return this.attributesManagerImpl.getRequiredAttributes(sess, resource, serviceIds);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+        return this.getResourceRequiredAttributes(sess, resource, resource);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n+        return this.getResourceRequiredAttributes(sess, resource, member, resource);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n+        return this.getResourceRequiredAttributes(sess, resource, member, resource, workWithUserAttributes);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        List<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, facility, user);\n+        Set<Attribute> attributes = new HashSet<>();\n+        for (Resource resource : resources) {\n+            attributes.addAll(this.getResourceRequiredAttributes(sess, resource, facility, user));\n+        }\n+        return new ArrayList<>(attributes);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, User user) throws InternalErrorException {\n+        List<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, user);\n+        Set<Attribute> attributes = new HashSet<>();\n+        for (Resource resource : resources) {\n+            attributes.addAll(this.getResourceRequiredAttributes(sess, resource, user));\n+        }\n+        return new ArrayList<>(attributes);\n+\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n+        Set<Attribute> attributes = new HashSet<>();\n+        for (Resource resource : resources) {\n+            attributes.addAll(this.getResourceRequiredAttributes(sess, resource, member));\n+        }\n+\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            attributes.addAll(this.getRequiredAttributes(sess, user));\n+        }\n+        return new ArrayList<>(attributes);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+\n+        List<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n+        List<Resource> groupResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        // get intersection of resources to determine correct set of services\n+        memberResources.retainAll(groupResources);\n+\n+        Set<Attribute> attributes = new HashSet<>();\n+\n+        for (Resource resource : memberResources) {\n+            attributes.addAll(this.getResourceRequiredAttributes(sess, resource, member, group));\n+        }\n+\n+        attributes.addAll(this.getRequiredAttributes(sess, member, workWithUserAttributes));\n+\n+        return new ArrayList<>(attributes);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, resource));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<Attribute> attributes = new ArrayList<>();\n+\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group));\n+\n+        if (workWithGroupAttributes) {\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, host);\n+    }\n+\n+    @Override\n+    public List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributesDefinition(sess, service);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, facility);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, vo);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Resource resource) throws InternalErrorException, MemberResourceMismatchException {\n+        return getRequiredAttributes(sess, service, member, resource, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Resource resource, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (!workWithUserAttributes) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource);\n+        }\n+\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException, GroupResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource));\n+\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+        }\n+\n+        return attributes;\n+    }\n+\n+    @Override\n+    public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, List<Member> members, boolean workWithUserAttributes) throws InternalErrorException, MemberResourceMismatchException {\n+        // check if members are from the same VO as resource\n+        if (members.isEmpty()) {\n+            return new HashMap<>();\n+        }\n+\n+        for (Member m : members) {\n+            this.checkMemberIsFromTheSameVoLikeResource(sess, m, resource);\n+        }\n+\n+        if (!workWithUserAttributes) {\n+            HashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n+            HashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n+\n+            for (Member mem : memberAttributes.keySet()) {\n+                if (!resourceMemberAttributes.containsKey(mem)) {\n+                    resourceMemberAttributes.put(mem, memberAttributes.get(mem));\n+                } else {\n+                    resourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n+                }\n+            }\n+            return resourceMemberAttributes;\n+        }\n+\n+        // get list of users, save user id as a key and list of member objects as a value\n+        List<User> users = new ArrayList<>();\n+        HashMap<User, List<Member>> userMemberIdMap = new HashMap<>();\n+\n+        // Maps user ids to member objects and fills list of users\n+        for (Member m : members) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, m);\n+            users.add(user);\n+            if (userMemberIdMap.containsKey(user)) {\n+                userMemberIdMap.get(user).add(m);\n+            } else {\n+                userMemberIdMap.put(user, Collections.singletonList(m));\n+            }\n+        }\n+\n+        // get facility if null\n+        if (facility == null) {\n+            facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        }\n+\n+        // get 4 maps from Impl getRequiredAttributes\n+        HashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n+        HashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n+        HashMap<User, List<Attribute>> userFacilityAttributes = getRequiredAttributes(sess, service, facility, users);\n+        HashMap<User, List<Attribute>> userAttributes = getRequiredAttributes(sess, service, users);\n+\n+        for (Member mem : memberAttributes.keySet()) {\n+            if (!resourceMemberAttributes.containsKey(mem)) {\n+                resourceMemberAttributes.put(mem, memberAttributes.get(mem));\n+            } else {\n+                resourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n+            }\n+        }\n+\n+        for (User user : userFacilityAttributes.keySet()) {\n+            // List of members for given user\n+            List<Member> mems = userMemberIdMap.get(user);\n+            for (Member mem : mems) {\n+                if (!resourceMemberAttributes.containsKey(mem)) {\n+                    resourceMemberAttributes.put(mem, userFacilityAttributes.get(user));\n+                } else {\n+                    resourceMemberAttributes.get(mem).addAll(userFacilityAttributes.get(user));\n+                }\n+            }\n+        }\n+\n+        for (User user : userAttributes.keySet()) {\n+            // List of members for given user\n+            List<Member> mems = userMemberIdMap.get(user);\n+            for (Member mem : mems) {\n+                if (!resourceMemberAttributes.containsKey(mem)) {\n+                    resourceMemberAttributes.put(mem, userAttributes.get(user));\n+                } else {\n+                    resourceMemberAttributes.get(mem).addAll(userAttributes.get(user));\n+                }\n+            }\n+        }\n+\n+        return resourceMemberAttributes;\n+\n+    }\n+\n+    @Override\n+    public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n+        if (!members.isEmpty()) {\n+            return attributesManagerImpl.getRequiredAttributes(sess, service, resource, members);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n+        if (!members.isEmpty()) {\n+            return attributesManagerImpl.getRequiredAttributes(sess, resource, service, members);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n+        if (!users.isEmpty()) {\n+            return attributesManagerImpl.getRequiredAttributes(sess, service, facility, users);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n+        if (!users.isEmpty()) {\n+            return attributesManagerImpl.getRequiredAttributes(sess, service, users);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n+        if (!workWithUserAttributes) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n+        }\n+\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, resource));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, boolean withGroupAttributes) throws InternalErrorException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!withGroupAttributes) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, group));\n+        return attributes;\n+\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, member);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, host);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, group);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, user);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user);\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+\n+        return getAttributesManagerImpl().fillAttribute(sess, resource, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Member member, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+\n+        return getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        return fillAttributes(sess, member, resource, attributes, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, Resource resource, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (!workWithUserAttributes) {\n+            List<Attribute> filledAttributes = new ArrayList<>();\n+            for (Attribute attribute : attributes) {\n+                getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+                if (attribute.getValue() == null) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute));\n+                } else {\n+                    //skip non-empty attribute\n+                    filledAttributes.add(attribute);\n+                }\n+            }\n+            return filledAttributes;\n+        }\n+\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+\n+                //TODO and check it's namespace\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, member, group, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return fillAttributes(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (!workWithUserAttributes) {\n+            List<Attribute> filledAttributes = new ArrayList<>();\n+            for (Attribute attribute : attributes) {\n+                getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+                if (attribute.getValue() == null) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n+                } else {\n+                    //skip non-empty attribute\n+                    filledAttributes.add(attribute);\n+                }\n+            }\n+            return filledAttributes;\n+        }\n+\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+\n+                //TODO and check it's namespace\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes, boolean returnOnlyAttributesWithChangedValue) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        if (!returnOnlyAttributesWithChangedValue) {\n+            return this.fillAttributes(sess, facility, resource, user, member, attributes);\n+        } else {\n+            List<Attribute> attributesWithChangedValue = new ArrayList<>();\n+            for (Attribute attribute : attributes) {\n+                if (attribute.getValue() == null) {\n+                    Attribute a;\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, member, resource, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, member, attribute);\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                    if (a.getValue() != null) {\n+                        attributesWithChangedValue.add(a);\n+                    }\n+                }\n+            }\n+            return attributesWithChangedValue;\n+        }\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        throw new InternalErrorException(\"Not implemented yet!\");\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        throw new InternalErrorException(\"Not implemented yet!\");\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+\n+        return getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, host, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, host, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, group, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Group group, List<Attribute> groupReqAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, groupReqAttributes, AttributesManager.NS_GROUP_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+\n+        for (Attribute attribute : groupReqAttributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!workWithGroupAttributes) {\n+            return this.fillAttributes(sess, resource, group, attributes);\n+        }\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, NS_GROUP_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n+                }\n+            } else {\n+\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, ues, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, ues, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, facility, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_FACILITY_ATTR);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) {\n+                continue;\n+            }\n+            checkAttributeValue(sess, facility, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, group, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() != null || isTrulyRequiredAttribute(sess, group, attribute)) {\n+                getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Member member, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Member member, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        checkAttributesValue(sess, member, resource, attributes, false);\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        checkAttributesValue(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n+\n+            for (Attribute attribute : attributes) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+            }\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            for (Attribute attribute : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            checkAttributesValue(sess, member, attributes);\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            for (Attribute attribute : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Member member, Resource resource, List<Attribute> attributes, boolean workWithUserAttributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (!workWithUserAttributes) {\n+            for (Attribute attribute : attributes) {\n+                getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n+            }\n+        } else {\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            for (Attribute attribute : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n+\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        for (Attribute attribute : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, Group group, User user, Member member, List<Attribute> attributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        for (Attribute attribute : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, resource, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, resource, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, group, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            checkAttributeValue(sess, resource, group, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttribute)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!workWithGroupAttribute) {\n+            this.checkAttributesValue(sess, resource, group, attributes);\n+        }\n+        for (Attribute attribute : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                getAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_ATTR)) {\n+                getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        }\n+    }\n+\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            getAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            getAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, key, attribute);\n+    }\n+\n+    @Override\n+    public void forceCheckAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+    }\n+\n+    @Override\n+    public void forceCheckAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, key, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, key, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute: {} by key {}.\", sess.getLogId(), attribute.getName(), key);\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForKey(new AttributeDefinition(attribute), key));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        this.attributesManagerImpl.removeAllMemberResourceAttributes(sess, resource);\n+        this.getPerunBl().getAuditer().log(sess, new AllMemberResourceAttributesRemovedForMembers(resource));\n+    }\n+\n+    @Override\n+    public void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        List<Group> groups = this.getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        for (Group group : groups) {\n+            this.getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, group);\n+        }\n+        this.attributesManagerImpl.removeAllGroupResourceAttributes(sess, resource);\n+        this.getPerunBl().getAuditer().log(sess, new AllGroupResourceAttributesRemovedForGroups(resource));\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, key, attribute)) {\n+            this.checkAttributeValue(sess, key, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(key, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, facility, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute: {} from facility {}.\", sess.getLogId(), attribute.getName(), facility.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForFacility(new AttributeDefinition(attribute), facility));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, facility, attribute)) {\n+            this.checkAttributeValue(sess, facility, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(facility, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Member member, boolean workWithUserAttributes, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+            for (AttributeDefinition attribute : attributes) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                }\n+            }\n+            this.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n+            this.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+            for (AttributeDefinition attribute : attributes) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            this.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck), true);\n+            //noinspection ConstantConditions\n+            this.checkAttributesDependencies(sess, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Facility facility, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributesDefinition, NS_FACILITY_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributesDefinition) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, facility, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        this.checkAttributesValue(sess, facility, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, facility, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<? extends AttributeDefinition> attributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, member, resource, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+        this.checkAttributesValue(sess, facility, resource, user, member, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, member, user, facility, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Facility facility, Resource resource, Group group, User user, Member member, List<? extends AttributeDefinition> attributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, member, resource, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+        this.checkAttributesValue(sess, facility, resource, group, user, member, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, group, member, user, facility, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, facility);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, facility)) {\n+            getPerunBl().getAuditer().log(sess, new FacilityAllAttributesRemoved(facility));\n+        }\n+        log.info(\"{} removed all attributes from facility {}.\", sess.getLogId(), facility.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, facility, attributes);\n+            this.checkAttributesDependencies(sess, facility, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        removeAllAttributes(sess, resource, group);\n+        if (workWithGroupAttributes) {\n+            removeAllAttributes(sess, group);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Facility facility, boolean removeAlsoUserFacilityAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        removeAllAttributes(sess, facility);\n+        if (removeAlsoUserFacilityAttributes) {\n+            List<Attribute> userFacilityAttributes = getUserFacilityAttributesForAnyUser(sess, facility);\n+            if (getAttributesManagerImpl().removeAllUserFacilityAttributesForAnyUser(sess, facility)) {\n+                getPerunBl().getAuditer().log(sess, new AllUserFacilityAttributesRemoved(facility));\n+            }\n+            log.info(\"{} removed all attributes from any user on facility {}.\", sess.getLogId(), facility.getId());\n+\n+            for (Attribute attribute : userFacilityAttributes) {\n+                attribute.setValue(null);\n+            }\n+            List<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+            for (User user : facilityUsers) {\n+                try {\n+                    checkAttributesValue(sess, facility, user, userFacilityAttributes);\n+                    this.checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+                } catch (WrongAttributeAssignmentException ex) {\n+                    throw new ConsistencyErrorException(ex);\n+                }\n+                for (Attribute attribute : userFacilityAttributes) {\n+                    try {\n+                        getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+                    } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                        throw new InternalErrorException(ex);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, host, attribute)) {\n+            checkAttributeValue(sess, host, new Attribute(attribute));\n+            try {\n+                this.checkAttributeDependencies(sess, new RichAttribute<>(host, null, new Attribute(attribute)));\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new WrongAttributeValueException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, host, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from host {}.\", sess.getLogId(), attribute.getName(), host.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForHost(new AttributeDefinition(attribute), host));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Host host, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributesDefinition, AttributesManager.NS_HOST_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributesDefinition) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, host, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        this.checkAttributesValue(sess, host, attributesFromDefinitions(attributesToCheck));\n+        try {\n+            this.checkAttributesDependencies(sess, host, null, attributesFromDefinitions(attributesToCheck));\n+        } catch (WrongReferenceAttributeValueException ex) {\n+            throw new WrongAttributeValueException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException, WrongAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, host);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, host)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForHost(host));\n+        }\n+        log.info(\"{} removed all attributes from host {}.\", sess.getLogId(), host.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, host, attributes);\n+            this.checkAttributesDependencies(sess, host, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        } catch (WrongReferenceAttributeValueException ex) {\n+            throw new WrongAttributeValueException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, vo, attribute)) {\n+            checkAttributeValue(sess, vo, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(vo, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, vo, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from vo {}.\", sess.getLogId(), attribute.getName(), vo.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForVo(new AttributeDefinition(attribute), vo));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Vo vo, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, vo, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, vo, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, vo, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, vo);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, vo)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForVo(vo));\n+        }\n+        log.info(\"{} removed all attributes from vo {}.\", sess.getLogId(), vo.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, vo, attributes);\n+            this.checkAttributesDependencies(sess, vo, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, group, attribute)) {\n+            checkAttributeValue(sess, group, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(group, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, group, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from group {}.\", sess.getLogId(), attribute.getName(), group.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForGroup(new AttributeDefinition(attribute), group));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, group, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, group, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, group, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, group);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, group)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForGroup(group));\n+        }\n+        log.info(\"{} removed all attributes from group {}.\", sess.getLogId(), group.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, group, attributes);\n+            this.checkAttributesDependencies(sess, group, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        boolean changed = removeAttributeWithoutCheck(sess, resource, attribute);\n+        if (changed) {\n+            checkAttributeValue(sess, resource, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(resource, null, new Attribute(attribute)));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+\n+        try {\n+            if (this.isVirtAttribute(sess, attribute)) {\n+                changed = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n+            } else {\n+                changed = getAttributesManagerImpl().removeAttribute(sess, resource, attribute);\n+            }\n+            if (changed) {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n+            }\n+        } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+        if (changed) {\n+            log.info(\"{} removed attribute {} from resource {}.\", sess.getLogId(), attribute.getName(), resource.getId());\n+        }\n+        getPerunBl().getAuditer().log(sess, new AttributeRemovedForResource(new AttributeDefinition(attribute), resource));\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Resource resource, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, resource, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, resource, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, resource);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, resource)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForResource(resource));\n+        }\n+        log.info(\"{} removed all attributes from resource {}.\", sess.getLogId(), resource.getId());\n+        //remove all virtual attributes\n \t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n \t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n \t\t\t}*/\n \n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Member member, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tif (removeAttributeWithoutCheck(sess, member, resource, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, resource, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(resource, member, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, member, resource, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, resource, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from member {} on resource {}.\",sess.getLogId(), attribute.getName(), member.getId(), resource.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForResourceAndMember(new AttributeDefinition(attribute), resource, member));\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, Resource resource, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, member, resource, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, member, resource, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tprivate void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tif (!(workWithUserAttributes)) {\n-\t\t\tremoveAttributes(sess, member, resource, attributes);\n-\t\t} else {\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, resource, attribute))\n-\t\t\t\t\t\t\tattributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute))\n-\t\t\t\t\t\t\tattributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, member, resource, attributesFromDefinitions(attributesToCheck), true);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck), true);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = getAttributes(sess, member, resource);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, member, resource)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForResourceAndMember(resource, member));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from member {} on resource {}.\",sess.getLogId(), member.getId(), resource.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, member, resource, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, resource, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(member, group, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t// s workWithUserAttr.\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, member, group, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from member {} in group {}.\",sess.getLogId(), attribute.getName(), member.getId(), group.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForMemberAndGroup(new AttributeDefinition(attribute), member, group));\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tremoveAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck));\n-\t\t\tthis.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck));\n-\t\t} else {\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute))\n-\t\t\t\t\t\t\tattributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck), true);\n-\t\t\tthis.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck), true);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, member, group);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, member, group)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForMemberAndGroup(member, group));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from member {} in group {}.\",sess.getLogId(), member.getId(), group.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, member, group, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(member, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, member, attribute);\n-\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from member {}.\",sess.getLogId(), attribute.getName(), member.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForMember(new AttributeDefinition(attribute), member));\n-\t\t}\n-\n-\t\treturn changed;\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, member);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, member)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForMember(member));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from member {}.\",sess.getLogId(), member.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, member, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, member, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, user, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(facility, user, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed;\n-\n-\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from user {} on facility {}.\",sess.getLogId(), attribute.getName(), user.getId(), facility.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForFacilityAndUser(new AttributeDefinition(attribute), facility, user));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tif (getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute))\n-\t\t\t\t\t\tattributesToCheck.add(attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, facility, user);\n-\t\t//remove all non-virtual attributes\n-\t\tboolean changed = getAttributesManagerImpl().removeAllAttributes(sess, facility, user);\n-\n-\t\t//remove all virtual attributes\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n-\t\tfor (Attribute attribute : virtualAttributes) {\n-\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute) || changed;\n-\t\t}\n-\t\tattributes.addAll(virtualAttributes);\n-\t\tif (changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForFacilityAndUser(facility, user));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from user {} on facility {}.\",sess.getLogId(), user.getId(), facility.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, facility, user, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, facility, user, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\n-\t\tList<RichAttribute<User, Facility>> userFacilitiesAttributes = getAttributesManagerImpl().getAllUserFacilityRichAttributes(sess, user);\n-\n-\t\t//remove all non-virtual attributes\n-\t\tif (getAttributesManagerImpl().removeAllUserFacilityAttributes(sess, user)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllUserFacilityAttributesRemovedForFacilitiesAndUser(user));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from user {} on all facilities.\", sess.getLogId(), user.getId());\n-\n-\t\tfor (RichAttribute<User, Facility> richAttribute : userFacilitiesAttributes) {\n-\t\t\ttry {\n-\t\t\t\tcheckAttributeValue(sess, richAttribute.getSecondaryHolder(), richAttribute.getPrimaryHolder(), new Attribute(richAttribute.getAttribute()));\n-\t\t\t\tthis.checkAttributeDependencies(sess, richAttribute);\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t\tfor (RichAttribute<User, Facility> attribute : userFacilitiesAttributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, attribute.getSecondaryHolder(), attribute.getPrimaryHolder(), new Attribute(attribute.getAttribute()));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, user, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(user, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, user, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from  user {}.\", sess.getLogId(), attribute.getName(), user.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForUser(new AttributeDefinition(attribute), user));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, user, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, user, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, user);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, user)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForUser(user));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from  user {}.\", sess.getLogId(), user.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, user, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, user, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(resource, group, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tboolean changed;\n-\t\ttry {\n-\t\t\tif (this.isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, resource, group, attribute);\n-\t\t\t}\n-\n-\t\t\tif (changed)\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n-\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif (changed)\n-\t\t\tlog.info(\"{} removed attribute {} from group {} on resource {}.\", sess.getLogId(), attribute.getName(), group.getId(), resource.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForGroupAndResource(new AttributeDefinition(attribute), group, resource));\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\t//getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) attributesToCheck.add(attribute);\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n-\t\tif (!workWithGroupAttributes) {\n-\t\t\tremoveAttributes(sess, resource, group, attributes);\n-\t\t} else {\n-\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute))\n-\t\t\t\t\t\t\tattributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck), true);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck), true);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeValueException, GroupResourceMismatchException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = getAttributes(sess, resource, group);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, resource, group)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForGroupAndResource(group, resource));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from group {} on resource {}.\", sess.getLogId(), group.getId(), resource.getId());\n-\n-\t\t//remove all virtual attributes\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, resource, attributes);\n+            this.checkAttributesDependencies(sess, resource, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Member member, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        if (removeAttributeWithoutCheck(sess, member, resource, attribute)) {\n+            checkAttributeValue(sess, member, resource, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(resource, member, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, member, resource, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, resource, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from member {} on resource {}.\", sess.getLogId(), attribute.getName(), member.getId(), resource.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForResourceAndMember(new AttributeDefinition(attribute), resource, member));\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Member member, Resource resource, List<? extends AttributeDefinition> attributes)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_RESOURCE_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, member, resource, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, member, resource, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    private void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        if (!(workWithUserAttributes)) {\n+            removeAttributes(sess, member, resource, attributes);\n+        } else {\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+            for (AttributeDefinition attribute : attributes) {\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                    User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, resource, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, member, resource, attributesFromDefinitions(attributesToCheck), true);\n+            this.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck), true);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Member member, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = getAttributes(sess, member, resource);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, member, resource)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForResourceAndMember(resource, member));\n+        }\n+        log.info(\"{} removed all attributes from member {} on resource {}.\", sess.getLogId(), member.getId(), resource.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, member, resource, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, resource, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+            checkAttributeValue(sess, member, group, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(member, group, new Attribute(attribute)));\n+        }\n+    }\n+\n+    // s workWithUserAttr.\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, member, group, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from member {} in group {}.\", sess.getLogId(), attribute.getName(), member.getId(), group.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForMemberAndGroup(new AttributeDefinition(attribute), member, group));\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        removeAttributes(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+            for (AttributeDefinition attribute : attributes) {\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck));\n+            this.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck));\n+        } else {\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+            for (AttributeDefinition attribute : attributes) {\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_USER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck), true);\n+            this.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck), true);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, member, group);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, member, group)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForMemberAndGroup(member, group));\n+        }\n+        log.info(\"{} removed all attributes from member {} in group {}.\", sess.getLogId(), member.getId(), group.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, member, group, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+            checkAttributeValue(sess, member, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(member, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, member, attribute);\n+\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from member {}.\", sess.getLogId(), attribute.getName(), member.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForMember(new AttributeDefinition(attribute), member));\n+        }\n+\n+        return changed;\n+\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, member);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, member)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForMember(member));\n+        }\n+        log.info(\"{} removed all attributes from member {}.\", sess.getLogId(), member.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, member, attributes);\n+            this.checkAttributesDependencies(sess, member, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+            checkAttributeValue(sess, facility, user, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(facility, user, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed;\n+\n+        if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+            changed = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n+        } else {\n+            changed = getAttributesManagerImpl().removeAttribute(sess, facility, user, attribute);\n+        }\n+\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from user {} on facility {}.\", sess.getLogId(), attribute.getName(), user.getId(), facility.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForFacilityAndUser(new AttributeDefinition(attribute), facility, user));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Facility facility, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    if (getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else {\n+                    if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, facility, user);\n+        //remove all non-virtual attributes\n+        boolean changed = getAttributesManagerImpl().removeAllAttributes(sess, facility, user);\n+\n+        //remove all virtual attributes\n+        List<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n+        for (Attribute attribute : virtualAttributes) {\n+            changed = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute) || changed;\n+        }\n+        attributes.addAll(virtualAttributes);\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForFacilityAndUser(facility, user));\n+        }\n+        log.info(\"{} removed all attributes from user {} on facility {}.\", sess.getLogId(), user.getId(), facility.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, facility, user, attributes);\n+            this.checkAttributesDependencies(sess, facility, user, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+\n+        List<RichAttribute<User, Facility>> userFacilitiesAttributes = getAttributesManagerImpl().getAllUserFacilityRichAttributes(sess, user);\n+\n+        //remove all non-virtual attributes\n+        if (getAttributesManagerImpl().removeAllUserFacilityAttributes(sess, user)) {\n+            getPerunBl().getAuditer().log(sess, new AllUserFacilityAttributesRemovedForFacilitiesAndUser(user));\n+        }\n+        log.info(\"{} removed all attributes from user {} on all facilities.\", sess.getLogId(), user.getId());\n+\n+        for (RichAttribute<User, Facility> richAttribute : userFacilitiesAttributes) {\n+            try {\n+                checkAttributeValue(sess, richAttribute.getSecondaryHolder(), richAttribute.getPrimaryHolder(), new Attribute(richAttribute.getAttribute()));\n+                this.checkAttributeDependencies(sess, richAttribute);\n+            } catch (WrongAttributeAssignmentException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+        }\n+        for (RichAttribute<User, Facility> attribute : userFacilitiesAttributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, attribute.getSecondaryHolder(), attribute.getPrimaryHolder(), new Attribute(attribute.getAttribute()));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+            checkAttributeValue(sess, user, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(user, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, user, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from  user {}.\", sess.getLogId(), attribute.getName(), user.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForUser(new AttributeDefinition(attribute), user));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, user, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, user, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, user);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, user)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForUser(user));\n+        }\n+        log.info(\"{} removed all attributes from  user {}.\", sess.getLogId(), user.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, user, attributes);\n+            this.checkAttributesDependencies(sess, user, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        if (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n+            checkAttributeValue(sess, resource, group, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(resource, group, new Attribute(attribute)));\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        boolean changed;\n+        try {\n+            if (this.isVirtAttribute(sess, attribute)) {\n+                changed = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, group, attribute);\n+            } else {\n+                changed = getAttributesManagerImpl().removeAttribute(sess, resource, group, attribute);\n+            }\n+\n+            if (changed) {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n+            }\n+        } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+        if (changed) {\n+            log.info(\"{} removed attribute {} from group {} on resource {}.\", sess.getLogId(), attribute.getName(), group.getId(), resource.getId());\n+        }\n+        getPerunBl().getAuditer().log(sess, new AttributeRemovedForGroupAndResource(new AttributeDefinition(attribute), group, resource));\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        //getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n+                attributesToCheck.add(attribute);\n+            }\n+        }\n+        checkAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes, boolean workWithGroupAttributes)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException {\n+        if (!workWithGroupAttributes) {\n+            removeAttributes(sess, resource, group, attributes);\n+        } else {\n+\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+            for (AttributeDefinition attribute : attributes) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                    if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(attribute, AttributesManager.NS_GROUP_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, group, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+\n+            }\n+            checkAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck), true);\n+            this.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck), true);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeValueException, GroupResourceMismatchException, WrongReferenceAttributeValueException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<Attribute> attributes = getAttributes(sess, resource, group);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, resource, group)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForGroupAndResource(group, resource));\n+        }\n+        log.info(\"{} removed all attributes from group {} on resource {}.\", sess.getLogId(), group.getId(), resource.getId());\n+\n+        //remove all virtual attributes\n \t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n \t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n \t\t\t}*/\n \n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, group, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, ues, attribute)) {\n-\t\t\tcheckAttributeValue(sess, ues, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute<>(ues, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tprivate boolean removeAttributeWithoutCheck(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\n-\t\tif (getAttributesManagerImpl().isCoreAttribute(sess, attribute))\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, ues, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tlog.info(\"{} removed attribute {} from user external source {}.\", sess.getLogId(), attribute.getName(), ues.getId());\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRemovedForUes(new AttributeDefinition(attribute), ues));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, UserExtSource ues, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<>();\n-\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, ues, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, ues, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, ues, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, ues);\n-\t\tif (getAttributesManagerImpl().removeAllAttributes(sess, ues)) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AllAttributesRemovedForUserExtSource(ues));\n-\t\t}\n-\t\tlog.info(\"{} removed all attributes from user external source {}.\", sess.getLogId(), ues.getId());\n-\n-\t\tfor (Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, ues, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, ues, null, attributes);\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkActionTypeExists(sess, actionType);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkAttributeExists(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkAttributesExists(sess, attributes);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isDefAttribute(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isOptAttribute(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isCoreAttribute(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isCoreManagedAttribute(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isVirtAttribute(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) {\n-\t\treturn getAttributesManagerImpl().isFromNamespace(attribute, namespace);\n-\t}\n-\n-\t@Override\n-\tpublic void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, namespace);\n-\t}\n-\n-\t@Override\n-\tpublic void checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, namespace);\n-\t}\n-\n-\t@Override\n-\tpublic String getNamespaceFromAttributeName(String attributeName) {\n-\t\treturn attributeName.replaceFirst(\"(urn:perun:[^:]+:attribute-def:[^:]+):.*\", \"$1\");\n-\t}\n-\n-\t@Override\n-\tpublic String getFriendlyNameFromAttributeName(String attributeName) {\n-\t\treturn attributeName.replaceFirst(\"urn:perun:[^:]+:attribute-def:[^:]+:\", \"\");\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getLogins(PerunSession sess, User user) throws InternalErrorException {\n-\t\tList<Attribute> usersAttributes = this.getAttributes(sess, user);  //Get all non-empty user's attributes\n-\t\tusersAttributes.removeIf(attribute -> !attribute.getFriendlyName().startsWith(\"login-namespace:\"));\n-\t\treturn usersAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Object> getAllValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif (isCoreAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition))\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\n-\t\tif (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_RESOURCE_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllResourceValues(sess, attributeDefinition);\n-\t\t} else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllGroupResourceValues(sess, attributeDefinition);\n-\t\t} else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllGroupValues(sess, attributeDefinition);\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_FACILITY_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition);\n-\t}\n-\n-\tprivate boolean isTrulyRequiredAttribute(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_VO_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByVo(sess, vo, attributeDefinition);\n-\t}\n-\n-\tprivate boolean isTrulyRequiredAttribute(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByGroup(sess, group, attributeDefinition);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_RESOURCE_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_ATTR);\n-\t\tList<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\tfor (Resource resource : allowedResources) {\n-\t\t\tif (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n-\t\t\t\treturn true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_USER_ATTR);\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member member : members) {\n-\t\t\tList<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\tfor (Resource resource : allowedResources) {\n-\t\t\t\tif (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n-\t\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_USER_FACILITY_ATTR);\n-\t\tList<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tif (!allowedFacilities.contains(facility)) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\tif (!getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition))\n-\t\t\t\treturn false;\n-\t\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\tresources.retainAll(getPerunBl().getUsersManagerBl().getAllowedResources(sess, user));\n-\t\t\tfor (Resource resource : resources) {\n-\t\t\t\tif (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n-\t\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_RESOURCE_ATTR);\n-\t\tList<Member> allowedMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\treturn allowedMembers.contains(member) && getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_GROUP_ATTR);\n-\t\tList<Resource> assignedResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tfor (Resource resource : assignedResources) {\n-\t\t\tif (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n-\t\t\t\treturn true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tprivate boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_GROUP_RESOURCE_ATTR);\n-\t\tList<Group> assignedGroups = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\treturn assignedGroups.contains(group) && getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t}\n-\n-\t@Override\n-\tpublic Object stringToAttributeValue(String value, String type) throws InternalErrorException {\n-\t\tif (type.equals(ArrayList.class.getName()) || type.equals(LinkedHashMap.class.getName()) ||\n-\t\t\t\ttype.equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\tif (value != null && !value.isEmpty() && !value.endsWith(String.valueOf(AttributesManagerImpl.LIST_DELIMITER))) {\n-\t\t\t\tvalue = value.concat(String.valueOf(AttributesManagerImpl.LIST_DELIMITER));\n-\t\t\t}\n-\t\t}\n-\t\treturn BeansUtils.stringToAttributeValue(value, type);\n-\t}\n-\n-\t@SuppressWarnings(\"unused\")\n-\tpublic static String escapeListAttributeValue(String value) {\n-\t\treturn AttributesManagerImpl.escapeListAttributeValue(value);\n-\t}\n-\n-\tpublic static String escapeMapAttributeValue(String value) {\n-\t\treturn AttributesManagerImpl.escapeMapAttributeValue(value);\n-\t}\n-\n-\t@Override\n-\tpublic void doTheMagic(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tdoTheMagic(sess, member, false);\n-\t}\n-\n-\t@Override\n-\tpublic void doTheMagic(PerunSession sess, Member member, boolean trueMagic) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\tfor (Resource resource : resources) {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tList<Attribute> requiredAttributes;\n-\t\t\ttry {\n-\t\t\t\trequiredAttributes = getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n-\t\t\t} catch (MemberResourceMismatchException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t\tboolean allOk = false;\n-\t\t\tAttributeDefinition lastWrongAttribute = null;\n-\t\t\tint safetyCounter = 0;\n-\t\t\tdo {\n-\t\t\t\ttry {\n-\t\t\t\t\tsetRequiredAttributes(sess, facility, resource, user, member, requiredAttributes);\n-\t\t\t\t\tallOk = true;\n-\t\t\t\t} catch (AttributeNotExistsException | MemberResourceMismatchException | WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t\tif (!trueMagic) throw ex;\n-\t\t\t\t\tAttributeDefinition wrongAttributeDefinition = ex.getAttribute();\n-\t\t\t\t\tif (wrongAttributeDefinition == null)\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"WrongAttributeValueException doesn't have set the wrong attribute.\", ex);\n-\t\t\t\t\tif (wrongAttributeDefinition.equals(lastWrongAttribute))\n-\t\t\t\t\t\tthrow new WrongAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n-\t\t\t\t\tlastWrongAttribute = wrongAttributeDefinition;\n-\t\t\t\t\tfindAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null);\n-\t\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t\tif (!trueMagic) throw ex;\n-\t\t\t\t\tAttributeDefinition wrongAttributeDefinition = ex.getReferenceAttribute();\n-\t\t\t\t\tif (wrongAttributeDefinition == null)\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"WrongReferenceAttributeValueException doesn't have set reference attribute.\", ex);\n-\t\t\t\t\tif (wrongAttributeDefinition.equals(lastWrongAttribute))\n-\t\t\t\t\t\tthrow new WrongReferenceAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n-\t\t\t\t\tlastWrongAttribute = wrongAttributeDefinition;\n-\t\t\t\t\tif (!findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null)) {\n-\t\t\t\t\t\t//this attribute can't be fixed here\n-\t\t\t\t\t\tthrow ex;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tsafetyCounter++;\n-\t\t\t\tif (safetyCounter == 50)\n-\t\t\t\t\tthrow new InternalErrorException(\"Method doTheMagic possibly stays in infinite loop.\");\n-\t\t\t} while (trueMagic && !allOk);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void mergeAttributesValues(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tthis.mergeAttributeValue(sess, user, attribute);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void mergeAttributesValues(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tthis.mergeAttributeValue(sess, member, attribute);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Merges attribute value for supported attribute's namespaces if the attribute type is list or map. In other cases it only stores new value.\n-\t * <p>\n-\t * If attribute has null value or it's value is same as value of attribute already stored in Perun, return stored attribute instead.\n-\t * If the type is list, new values are added to the current stored list.\n-\t * It the type is map, new values are added and existing are overwritten with new values, but only if there is any change.\n-\t * <p>\n-\t * Supported namespaces\n-\t * - user attributes\n-\t * - member attributes\n-\t *\n-\t * @param sess session\n-\t * @param attribute     attribute to merge it's value if possible\n-\t * @param primaryHolder holder defines object for which is attribute stored in Perun\n-\t * @return attribute after merging his value\n-\t * @throws InternalErrorException                if one of mandatory objects is null or some internal problem has occured\n-\t * @throws WrongAttributeValueException          attribute value of set attribute is not correct\n-\t * @throws WrongReferenceAttributeValueException any reference attribute value is not correct\n-\t * @throws WrongAttributeAssignmentException     if attribute is not from the same namespace defined by primaryHolder\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate Attribute mergeAttributeValue(PerunSession sess, Attribute attribute, PerunBean primaryHolder) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\t//If attribute is null, throw an exception\n-\t\tif (attribute == null) throw new InternalErrorException(\"Can't merge null attribute with anything!\");\n-\t\tif (primaryHolder == null)\n-\t\t\tthrow new InternalErrorException(\"Can't merge attribute value without notNull primaryHolder!\");\n-\n-\t\t//Get stored attribute in Perun\n-\t\tAttribute storedAttribute;\n-\t\ttry {\n-\t\t\tif (primaryHolder instanceof User) {\n-\t\t\t\tstoredAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (User) primaryHolder, attribute.getName());\n-\t\t\t} else if (primaryHolder instanceof Member) {\n-\t\t\t\tstoredAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (Member) primaryHolder, attribute.getName());\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t}\n-\n-\t\t//if attribute to merge has null value or it's value is same as stored attribute's value, return the stored attribute\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null || Objects.equals(attribute.getValue(), storedAttribute.getValue()))\n-\t\t\treturn storedAttribute;\n-\n-\t\t// Check type ArrayList\n-\t\tif (attribute.getType().equals(ArrayList.class.getName()) || attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\tArrayList<String> updatedList = (ArrayList<String>) storedAttribute.getValue();\n-\t\t\t// If there were someting then find values which haven't been already stored\n-\t\t\tif (updatedList != null) {\n-\t\t\t\tfor (String value : ((ArrayList<String>) attribute.getValue())) {\n-\t\t\t\t\tif (!updatedList.contains(value)) {\n-\t\t\t\t\t\tupdatedList.add(value);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tattribute.setValue(updatedList);\n-\t\t\t}\n-\t\t\t// Check type LinkedHashMap\n-\t\t} else if (attribute.getType().equals(LinkedHashMap.class.getName())) {\n-\t\t\t//Find values which haven't been already stored\n-\t\t\tLinkedHashMap<String, String> updatedMap = (LinkedHashMap<String, String>) storedAttribute.getValue();\n-\t\t\tif (updatedMap != null) {\n-\t\t\t\tLinkedHashMap<String, String> receivedMap = (LinkedHashMap<String, String>) attribute.getValue();\n-\t\t\t\tupdatedMap.putAll(receivedMap);\n-\t\t\t\tattribute.setValue(updatedMap);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Other types as String, Integer, Boolean etc. will be replaced by new value (no way how to merge them properly)\n-\t\tif (primaryHolder instanceof User) {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, (User) primaryHolder, attribute);\n-\t\t} else //noinspection ConstantConditions\n-\t\t\tif (primaryHolder instanceof Member) {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, (Member) primaryHolder, attribute);\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n-\t\t}\n-\n-\t\treturn attribute;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn this.mergeAttributeValue(sess, attribute, user);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute mergeAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn this.mergeAttributeValue(sess, attribute, member);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn mergeAttributeValue(sess, user, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn mergeAttributeValue(sess, member, attribute);\n-\t}\n-\n-\tpublic void checkAttributeAssignment(PerunSession sess, AttributeDefinition attributeDefinition, PerunBean handler) throws WrongAttributeAssignmentException, InternalErrorException {\n-\t\tthis.checkAttributeAssignment(sess, attributeDefinition, handler, null);\n-\t}\n-\n-\tpublic void checkAttributeAssignment(PerunSession sess, AttributeDefinition attributeDefinition, PerunBean handler1, PerunBean handler2) throws WrongAttributeAssignmentException, InternalErrorException {\n-\t\tString richObjectRegex = \"^rich\";\n-\t\tString firstIdentifier;\n-\t\tString secondIdentifier;\n-\t\tString identifier;\n-\t\tString reverseIdentifier;\n-\n-\t\t//Prepare identifier and reverse identifier of namespace for handlers\n-\t\tif(handler1 != null && handler2 != null) {\n-\t\t\tfirstIdentifier = handler1.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");\n-\t\t\tsecondIdentifier = handler2.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");;\n-\t\t\tidentifier = firstIdentifier + \"_\" + secondIdentifier;\n-\t\t\treverseIdentifier = secondIdentifier + \"_\" + firstIdentifier;\n-\t\t} else if(handler1 != null) {\n-\t\t\tfirstIdentifier = handler1.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");;\n-\t\t\tidentifier = firstIdentifier;\n-\t\t\treverseIdentifier = identifier;\n-\t\t} else if(handler2 != null) {\n-\t\t\tfirstIdentifier = handler2.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");;\n-\t\t\tidentifier = firstIdentifier;\n-\t\t\treverseIdentifier = identifier;\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Both handlers can't be null!\");\n-\t\t}\n-\n-\t\t//There is exception for entityless attributes and for user_ext_source attributes\n-\t\tif(identifier.equals(String.class.getSimpleName().toLowerCase())) {\n-\t\t\tidentifier = \"entityless\";\n-\t\t\treverseIdentifier = identifier;\n-\t\t} else if(identifier.equals(\"userextsource\")) {\n-\t\t\tidentifier = \"user_ext_source\";\n-\t\t\treverseIdentifier = identifier;\n-\t\t}\n-\n-\t\t//Looking for namespace by identifier in map of all exist namespaces\n-\t\tString namespaceByHandlers = AttributesManagerImpl.BEANS_TO_NAMESPACES_MAP.get(identifier);\n-\t\t//If namespace for identifier not exists, try to look for reverse identifier if it is different from identifier\n-\t\tif(namespaceByHandlers == null && !identifier.equals(reverseIdentifier)) namespaceByHandlers = AttributesManagerImpl.BEANS_TO_NAMESPACES_MAP.get(reverseIdentifier);\n-\t\t//If namespace not exists, throw exception\n-\t\tif(namespaceByHandlers == null) throw new InternalErrorException(\"Unable to get namespace for objects: \" + handler1 + \" and \" + handler2);\n-\n-\t\t//Check namespace of attribute definition\n-\t\tcheckNamespace(sess, attributeDefinition, namespaceByHandlers);\n-\t}\n-\n-\t@SuppressWarnings(\"SameParameterValue\")\n-\tprivate boolean findAndSetValueInList(List<Attribute> attributes, AttributeDefinition attributeDefinition, Object value) {\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getId() == attributeDefinition.getId()) {\n-\t\t\t\tattribute.setValue(value);\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(perunSession, new AttributeUpdated(attributeDefinition));\n-\t\treturn getAttributesManagerImpl().updateAttributeDefinition(perunSession, attributeDefinition);\n-\t}\n-\n-\t@SuppressWarnings(\"SameParameterValue\")\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (workWithGroupAttributes) {\n-\t\t\tList<Attribute> groupAttributes = new ArrayList<>();\n-\t\t\tList<Attribute> groupResourceAttributes = new ArrayList<>();\n-\t\t\tfor (Attribute attr : attributes) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attr, NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\tgroupResourceAttributes.add(attr);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_GROUP_ATTR)) {\n-\t\t\t\t\tgroupAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, resource, group, groupResourceAttributes);\n-\t\t\tcheckAttributesDependencies(sess, group, null, groupAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, resource, group, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<>();\n-\t\t\tfor (Attribute attr : attributes) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, member, null, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, User user, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> userAttributes = new ArrayList<>();\n-\t\tList<Attribute> memberAttributes = new ArrayList<>();\n-\t\tList<Attribute> memberResourceAttributes = new ArrayList<>();\n-\t\tList<Attribute> userFacilityAttributes = new ArrayList<>();\n-\t\tfor (Attribute attr : attributes) {\n-\t\t\tif (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n-\t\t\t\tuserAttributes.add(attr);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n-\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tmemberResourceAttributes.add(attr);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tuserFacilityAttributes.add(attr);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\tcheckAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\tcheckAttributesDependencies(sess, resource, member, memberResourceAttributes);\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, Member member, User user, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> userAttributes = new ArrayList<>();\n-\t\tList<Attribute> memberAttributes = new ArrayList<>();\n-\t\tList<Attribute> memberResourceAttributes = new ArrayList<>();\n-\t\tList<Attribute> userFacilityAttributes = new ArrayList<>();\n-\t\tList<Attribute> memberGroupAttributes = new ArrayList<>();\n-\t\tfor (Attribute attr : attributes) {\n-\t\t\tif (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n-\t\t\t\tuserAttributes.add(attr);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n-\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tmemberResourceAttributes.add(attr);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tuserFacilityAttributes.add(attr);\n-\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tmemberGroupAttributes.add(attr);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\tcheckAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\tcheckAttributesDependencies(sess, resource, member, memberResourceAttributes);\n-\t\tcheckAttributesDependencies(sess, member, group, memberGroupAttributes);\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<>();\n-\t\t\tList<Attribute> memberResourceAttributes = new ArrayList<>();\n-\t\t\tList<Attribute> userFacilityAttributes = new ArrayList<>();\n-\t\t\tfor (Attribute attr : attributes) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tmemberResourceAttributes.add(attr);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tuserFacilityAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t\tcheckAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\t\tcheckAttributesDependencies(sess, resource, member, memberResourceAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, resource, member, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<>();\n-\t\t\tList<Attribute> memberGroupAttributes = new ArrayList<>();\n-\t\t\tfor (Attribute attr : attributes) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tmemberGroupAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t\tcheckAttributesDependencies(sess, member, group, memberGroupAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, member, group, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Object primaryHolder, Object secondaryHolder, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (attributes != null && !attributes.isEmpty()) {\n-\t\t\tfor (Attribute attr : attributes) {\n-\t\t\t\tcheckAttributeDependencies(sess, new RichAttribute<>(primaryHolder, secondaryHolder, attr));\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeDependencies(PerunSession sess, RichAttribute richAttr) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (getAllDependencies() == null || getAllDependencies().isEmpty())\n-\t\t\tlog.error(\"Map of all dependencies is empty. If this is not test, its an error probably.\");\n-\t\tif (richAttr == null || richAttr.getAttribute() == null)\n-\t\t\tthrow new InternalErrorException(\"RichAttribute or Attribute in it can't be null!\");\n-\t\telse {\n-\t\t\t//Get All attributeDef which are dependencies\n-\t\t\tSet<AttributeDefinition> dependencies = getAllDependencies().get(new AttributeDefinition(richAttr.getAttribute()));\n-\t\t\tif (dependencies != null && !dependencies.isEmpty()) {\n-\t\t\t\tfor (AttributeDefinition dependency : dependencies) {\n-\t\t\t\t\tList<RichAttribute> richAttributesToCheck;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trichAttributesToCheck = getRichAttributesWithHoldersForAttributeDefinition(sess, dependency, richAttr);\n-\t\t\t\t\t} catch (AttributeNotExistsException | VoNotExistsException | UserNotExistsException | GroupResourceMismatchException | MemberResourceMismatchException ex) {\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (RichAttribute richAttribute : richAttributesToCheck) {\n-\t\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_VO_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Vo) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for VO Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Vo) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For VO Attribute there must be VO in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_GROUP_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Group Attribute there must be Group in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member Attribute there must be Member in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_USER_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for User Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For User Attribute there must be User in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Resource Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Resource Attribute there must be Resource in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_FACILITY_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Facility Attribute there must be Facility in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), AttributesManager.NS_ENTITYLESS_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof String) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Entityless Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (String) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Entityless Attribute there must be String in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), AttributesManager.NS_HOST_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Host) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Host Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Host) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Host Attribute there must be Host in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t\t} catch (GroupResourceMismatchException ex) {\n-\t\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t\t} catch (GroupResourceMismatchException ex) {\n-\t\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Group_Resource Attribute there must be Group or Resource in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getSecondaryHolder(), (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t\t} catch (MemberResourceMismatchException ex) {\n-\t\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), (Resource) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t\t} catch (MemberResourceMismatchException ex) {\n-\t\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member_Resource Attribute there must be Member or Resource in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member_Group Attribute there must be Member or Group in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), (User) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getSecondaryHolder(), (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Facility_User Attribute there must be Facility or User in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<RichAttribute> getRichAttributesWithHoldersForAttributeDefinition(PerunSession sess, AttributeDefinition attrDef, RichAttribute aidingAttr) throws InternalErrorException, AttributeNotExistsException, UserNotExistsException, VoNotExistsException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n-\t\t//Filling objects from aidingAttr\n-\t\tif (aidingAttr == null) throw new InternalErrorException(\"Aiding attribute cant be null.\");\n-\t\tif (attrDef == null) throw new InternalErrorException(\"attrDef cant be null.\");\n-\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\n-\t\t//All possible useful objects\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\t\tString key = null;\n-\t\tUserExtSource userExtSource = null;\n-\n-\t\t//Get object for primaryHolder of aidingAttr\n-\t\tif (aidingAttr.getPrimaryHolder() != null) {\n-\t\t\tif (aidingAttr.getPrimaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof Facility)\n-\t\t\t\tfacility = (Facility) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof Group) group = (Group) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof Member) member = (Member) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof User) user = (User) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof Host) host = (Host) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof Resource)\n-\t\t\t\tresource = (Resource) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof UserExtSource)\n-\t\t\t\tuserExtSource = (UserExtSource) aidingAttr.getPrimaryHolder();\n-\t\t\telse if (aidingAttr.getPrimaryHolder() instanceof String) key = (String) aidingAttr.getPrimaryHolder();\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Aiding attribute must have primaryHolder which is not null.\");\n-\t\t}\n-\n-\t\t//Get object for secondaryHolder of aidingAttr\n-\t\tif (aidingAttr.getSecondaryHolder() != null) {\n-\t\t\tif (aidingAttr.getSecondaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof Facility)\n-\t\t\t\tfacility = (Facility) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof Group) group = (Group) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof Member)\n-\t\t\t\tmember = (Member) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof User) user = (User) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof Host) host = (Host) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof Resource)\n-\t\t\t\tresource = (Resource) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof UserExtSource)\n-\t\t\t\tuserExtSource = (UserExtSource) aidingAttr.getSecondaryHolder();\n-\t\t\telse if (aidingAttr.getSecondaryHolder() instanceof String) key = (String) aidingAttr.getSecondaryHolder();\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in secondaryHolder of aidingAttr\");\n-\t\t\t}\n-\t\t} // If not, its ok, secondary holder can be null\n-\n-\t\t//First i choose what i am looking for by descriptionAttr\n-\t\t//Second on the fact what i really have in aidingAttr i try to find what i am looking for\n-\t\t//IMPORTANT: If member is not allowed on connected objects (INVALID or DISABLED status), we skip these objects\n-\n-\t\tif (getAttributesManagerImpl().isFromNamespace(attrDef, NS_VO_ATTR)) {\n-\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\t//we do not need object resource to resolve this case\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need object resource to resolve this case\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, group, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t//we do not need object group to resolve this case\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getVoAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_GROUP_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to use the resource object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, group, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_FACILITY_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to use the group object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getFacilityAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_MEMBER_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\t//we do not need to use the resource object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to use the resource object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, group, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t//we do not need to use the group object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_RESOURCE_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to use the group object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getResourceAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_USER_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\t//we do not need to use the resource object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to use the resource object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, group, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t//we do not need to use the group object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, AttributesManager.NS_HOST_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to user the group object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getHostAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, group, resource, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to use the resource object\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, group, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, group, resource, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_USER_FACILITY_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, member, resource, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, group, resource, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, member, group, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_UES_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\t//we do not need to use the resource object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t//we do not need to use the resource object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, group, attrDef));\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, user, facility, attrDef));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t//we do not need to use the group object here\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, member, attrDef));\n-\t\t\t} else if (group != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, group, attrDef));\n-\t\t\t} else if (member != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, member, attrDef));\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, resource, attrDef));\n-\t\t\t} else if (user != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, user, attrDef));\n-\t\t\t} else if (host != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, host, attrDef));\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, facility, attrDef));\n-\t\t\t} else if (vo != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, vo, attrDef));\n-\t\t\t} else if (userExtSource != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, userExtSource, attrDef));\n-\t\t\t} else if (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, attrDef));\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n-\t\t\t}\n-\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(attrDef, AttributesManager.NS_ENTITYLESS_ATTR)) {\n-\t\t\tif (key != null) {\n-\t\t\t\tlistOfRichAttributes.addAll(getEntitylessAttributes(sess, key, attrDef));\n-\t\t\t} else {\n-\t\t\t\tlistOfRichAttributes.addAll(getEntitylessAttributes(sess, attrDef));\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"There is unrecognized namespace in attribute \" + attrDef);\n-\t\t}\n-\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Checks if the attributes represent empty values. If so, converts them into null.\n-\t *\n-\t * @param attributes attributes to be checked if are null\n-\t */\n-\tprivate void convertEmptyAttrValueToNull(List<Attribute> attributes) throws ConsistencyErrorException {\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Checks if the attribute represents empty value. If so, converts it into null.\n-\t *\n-\t * @param attribute attribute to be checked if is null\n-\t */\n-\tprivate void convertEmptyAttrValueToNull(Attribute attribute) throws ConsistencyErrorException {\n-\t\tif (attribute.getValue() == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (attribute.getValue() instanceof Integer) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (attribute.getValue() instanceof String) {\n-\t\t\tif (((String) attribute.getValue()).matches(\"\\\\s*\")) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof Boolean) {\n-\t\t\tif (attribute.getValue().equals(Boolean.FALSE)) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof ArrayList) {\n-\t\t\tif (((ArrayList) attribute.getValue()).isEmpty()) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof LinkedHashMap) {\n-\t\t\tif (((LinkedHashMap) attribute.getValue()).isEmpty()) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new ConsistencyErrorException(\"Invalid attribute value type: \" + attribute.getType() +\n-\t\t\t\t\t\" class: \" + attribute.getValue().getClass().getName());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Gets the getAttributesManagerImpl().\n-\t *\n-\t * @return The getAttributesManagerImpl().\n-\t */\n-\tprivate AttributesManagerImplApi getAttributesManagerImpl() {\n-\t\treturn this.attributesManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\tprivate List<Attribute> attributesFromDefinitions(List<? extends AttributeDefinition> attributesDefinition) {\n-\t\tList<Attribute> attributes = new ArrayList<>(attributesDefinition.size());\n-\t\tfor (AttributeDefinition attributeDefinition : attributesDefinition) {\n-\t\t\tattributes.add(new Attribute(attributeDefinition));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tprotected void initialize() throws InternalErrorException {\n-\t\tlog.debug(\"AttributesManagerBlImpl initialize started.\");\n-\n-\t\t//Get PerunSession\n-\t\tString attributesManagerInitializator = \"attributesManagerBlImplInitializator\";\n-\t\tPerunPrincipal pp = new PerunPrincipal(attributesManagerInitializator, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL);\n-\t\tPerunSession sess = perunBl.getPerunSession(pp, new PerunClient());\n-\n-\t\t//Load all attributes modules\n-\t\tServiceLoader<AttributesModuleImplApi> attributeModulesLoader = ServiceLoader.load(AttributesModuleImplApi.class);\n-\t\tgetAttributesManagerImpl().initAttributeModules(attributeModulesLoader);\n-\t\tgetAttributesManagerImpl().registerAttributeModules(attributeModulesLoader);\n-\n-\t\t//Check if all core attributes exists, create if doesn't\n-\t\tMap<AttributeDefinition, List<AttributeRights>> attributes = new HashMap<>();\n-\t\t//Facility.id\n-\t\tAttributeDefinition attr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_FACILITY_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"id\");\n-\t\tattr.setDisplayName(\"Facility id\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\tList<AttributeRights> rights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Facility.name\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_FACILITY_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"name\");\n-\t\tattr.setDisplayName(\"Facility name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Resource.id\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"id\");\n-\t\tattr.setDisplayName(\"Resource id\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Resource.name\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"name\");\n-\t\tattr.setDisplayName(\"Resource name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Resource.description\n-\t\tattr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"description\");\n-\t\tattr.setDisplayName(\"Resource description\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Member.id\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_MEMBER_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"id\");\n-\t\tattr.setDisplayName(\"Member id\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.id\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"id\");\n-\t\tattr.setDisplayName(\"User id\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.firstName\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"firstName\");\n-\t\tattr.setDisplayName(\"User first name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.lastName\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"lastName\");\n-\t\tattr.setDisplayName(\"User last name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.middleName\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"middleName\");\n-\t\tattr.setDisplayName(\"User middle name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.titleBefore\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"titleBefore\");\n-\t\tattr.setDisplayName(\"User title before\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.titleAfter\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"titleAfter\");\n-\t\tattr.setDisplayName(\"User title after\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.serviceUser\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(Boolean.class.getName());\n-\t\tattr.setFriendlyName(\"serviceUser\");\n-\t\tattr.setDisplayName(\"If user is service user or not.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//User.displayName\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"displayName\");\n-\t\tattr.setDisplayName(\"Display name\");\n-\t\tattr.setDescription(\"Displayed user's name.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Group.id\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"id\");\n-\t\tattr.setDisplayName(\"Group id\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Group.name\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"name\");\n-\t\tattr.setDisplayName(\"Group full name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Group.description\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"description\");\n-\t\tattr.setDisplayName(\"Group description\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Group.parentGroupId\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"parentGroupId\");\n-\t\tattr.setDisplayName(\"Id of group's parent group.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Vo.id\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"id\");\n-\t\tattr.setDisplayName(\"Vo id\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Vo.name\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"name\");\n-\t\tattr.setDisplayName(\"Vo full name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Vo.createdAt\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"createdAt\");\n-\t\tattr.setDisplayName(\"Vo created date\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Vo.shortName\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"shortName\");\n-\t\tattr.setDisplayName(\"Vo short name\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Host.id\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_HOST_ATTR_CORE);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"id\");\n-\t\tattr.setDisplayName(\"Host id\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//Host.hostname\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_HOST_ATTR_CORE);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"hostname\");\n-\t\tattr.setDisplayName(\"Host hostname\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t// *** Def attributes\n-\n-\t\t//urn:perun:user:attribute-def:def:organization\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"organization\");\n-\t\tattr.setDisplayName(\"Organization\");\n-\t\tattr.setDescription(\"Organization, from which user comes from. Provided by IDP.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:user:attribute-def:def:preferredMail\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"preferredMail\");\n-\t\tattr.setDisplayName(\"Preferred mail\");\n-\t\tattr.setDescription(\"E-mail address preferred for communication.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:user:attribute-def:def:phone\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"phone\");\n-\t\tattr.setDisplayName(\"Phone\");\n-\t\tattr.setDescription(\"Phone number in organization. Provided by IDP.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:member:attribute-def:def:mail\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_MEMBER_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"mail\");\n-\t\tattr.setDisplayName(\"Mail\");\n-\t\tattr.setDescription(\"E-mail address in organization (VO wide).\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:member:attribute-def:def:organization\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_MEMBER_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"organization\");\n-\t\tattr.setDisplayName(\"Organization (for VO)\");\n-\t\tattr.setDescription(\"Organization, from which user comes from (VO wide).\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn_perun_member_attribute_def_def_suspensionInfo\n-\t\tattr = (new urn_perun_member_attribute_def_def_suspensionInfo()).getAttributeDefinition();\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:vo:attribute-def:def:membershipExpirationRules\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setDisplayName(\"Membership expiration rules\");\n-\t\tattr.setFriendlyName(\"membershipExpirationRules\");\n-\t\tattr.setNamespace(\"urn:perun:vo:attribute-def:def\");\n-\t\tattr.setDescription(\"Set of rules to determine date of membership expiration. If not set, membership is not limited.\");\n-\t\tattr.setType(LinkedHashMap.class.getName());\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:groupMembershipExpirationRules\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setDisplayName(\"Group membership expiration rules\");\n-\t\tattr.setFriendlyName(\"groupMembershipExpirationRules\");\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setDescription(\"Set of rules to determine date of group membership expiration. If not set, membership is not limited.\");\n-\t\tattr.setType(LinkedHashMap.class.getName());\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:member:group:attribute-def:def:groupMembershipExpiration\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setDisplayName(\"Group membership expiration\");\n-\t\tattr.setFriendlyName(\"groupMembershipExpiration\");\n-\t\tattr.setNamespace(AttributesManager.NS_MEMBER_GROUP_ATTR_DEF);\n-\t\tattr.setDescription(\"When the member expires in group, format YYYY-MM-DD.\");\n-\t\tattr.setType(String.class.getName());\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\tattributes.put(attr, rights);\n-\n-\n-\n-\t\t//urn:perun:group:attribute-def:def:groupExtSource\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"groupExtSource\");\n-\t\tattr.setDisplayName(\"Group extSource\");\n-\t\tattr.setDescription(\"External source from which group comes from. Used for groups synchronization.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:groupMembersExtSource\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"groupMembersExtSource\");\n-\t\tattr.setDisplayName(\"Group members extSource\");\n-\t\tattr.setDescription(\"External source from which group members comes from. Used for group synchronization. If not set, members are loaded from the same external source as group itself.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:groupMembersQuery\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"groupMembersQuery\");\n-\t\tattr.setDisplayName(\"Group members query\");\n-\t\tattr.setDescription(\"Query (SQL) on external source which retrieves list of it's members.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:synchronizationEnabled\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"synchronizationEnabled\");\n-\t\tattr.setDisplayName(\"Group synchronization enabled\");\n-\t\tattr.setDescription(\"Enables group synchronization from external source.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:synchronizationInterval\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"synchronizationInterval\");\n-\t\tattr.setDisplayName(\"Synchronization interval\");\n-\t\tattr.setDescription(\"Time between two successful synchronizations.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:lastSynchronizationState\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"lastSynchronizationState\");\n-\t\tattr.setDisplayName(\"Last synchronization state\");\n-\t\tattr.setDescription(\"If group is synchronized, there will be information about state of last synchronization.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:lastSynchronizationTimestamp\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"lastSynchronizationTimestamp\");\n-\t\tattr.setDisplayName(\"Last Synchronization timestamp\");\n-\t\tattr.setDescription(\"If group is synchronized, there will be the last timestamp of group synchronization.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:lightweightSynchronization\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(Boolean.class.getName());\n-\t\tattr.setFriendlyName(\"lightweightSynchronization\");\n-\t\tattr.setDisplayName(\"Lightweight Synchronization\");\n-\t\tattr.setDescription(\"If true, then do not update actual members.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:lastSuccessSynchronizationTimestamp\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"lastSuccessSynchronizationTimestamp\");\n-\t\tattr.setDisplayName(\"Last successful synchronization timestamp\");\n-\t\tattr.setDescription(\"If group is synchronized, there will be timestamp of last successful synchronization.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:group:attribute-def:def:authoritativeGroup\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setFriendlyName(\"authoritativeGroup\");\n-\t\tattr.setDisplayName(\"Authoritative Group\");\n-\t\tattr.setDescription(\"If group is authoritative for member. (for synchronization)\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:facility:attribute-def:def:login-namespace\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_FACILITY_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"login-namespace\");\n-\t\tattr.setDisplayName(\"Login namespace\");\n-\t\tattr.setDescription(\"Define namespace for all user's logins on Facility.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:resource:attribute-def:def:userSettingsName\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"userSettingsName\");\n-\t\tattr.setDisplayName(\"User settings name\");\n-\t\tattr.setDescription(\"Name displayed in user profile resource settings. To display certain resource in user profile settings this attribute value needs to be set.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:resource:attribute-def:def:userSettingsDescription\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"userSettingsDescription\");\n-\t\tattr.setDisplayName(\"User settings description\");\n-\t\tattr.setDescription(\"Description displayed in user profile resource settings.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:vo:attribute-def:def:aupLink\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"aupLink\");\n-\t\tattr.setDisplayName(\"Link to AUP\");\n-\t\tattr.setDescription(\"Link to AUP of a virtual organization.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:user_facility:attribute-def:virt:login\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_FACILITY_ATTR_VIRT);\n-\t\tattr.setType(String.class.getName());\n-\t\tattr.setFriendlyName(\"login\");\n-\t\tattr.setDisplayName(\"Login\");\n-\t\tattr.setDescription(\"User's logname at facility. Value is determined automatically from all user's logins by Facility's namespace.\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn:perun:user:attribute-def:virt:groupNames\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_ATTR_VIRT);\n-\t\tattr.setType(ArrayList.class.getName());\n-\t\tattr.setFriendlyName(\"groupNames\");\n-\t\tattr.setDisplayName(\"Group names\");\n-\t\tattr.setDescription(\"Names of groups where user is member\");\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn_perun_facility_attribute_def_virt_GIDRanges\n-\t\tattr = new AttributeDefinition( (new urn_perun_facility_attribute_def_virt_GIDRanges()).getAttributeDefinition() );\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn_perun_entityless_attribute_def_def_namespace_GIDRanges\n-\t\tattr = new AttributeDefinition( (new urn_perun_entityless_attribute_def_def_namespace_GIDRanges()).getAttributeDefinition() );\n-\t\t//set attribute rights (with dummy id of attribute - not known yet)\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n-\t\trights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\t//urn_perun_entityless_attribute_def_def_randomPwdResetTemplate\n-\t\tattr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_ENTITYLESS_ATTR_DEF);\n-\t\tattr.setType(\"java.lang.LargeString\");\n-\t\tattr.setFriendlyName(\"randomPwdResetTemplate\");\n-\t\tattr.setDisplayName(\"Random password reset templates.\");\n-\t\tattr.setDescription(\"Random password reset templates. Each value should be String representing an HTML page.\" +\n-\t\t\t\" Keywords {password} and {login} will be replaced.\");\n-\n-\t\trights = new ArrayList<>();\n-\t\trights.add(new AttributeRights(-1, Role.PERUNADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n-\t\tattributes.put(attr, rights);\n-\n-\t\tif (perunBl.isPerunReadOnly()) log.debug(\"Loading attributes manager init in readOnly version.\");\n-\n-\t\tfor (Map.Entry<AttributeDefinition, List<AttributeRights>> entry : attributes.entrySet()) {\n-\t\t\tAttributeDefinition attribute = entry.getKey();\n-\t\t\tList<AttributeRights> listOfRights = entry.getValue();\n-\t\t\ttry {\n-\t\t\t\t// If attribute definition is not found, catch exception and create this attribute definition\n-\t\t\t\tgetAttributeDefinition(sess, attribute.getName());\n-\t\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t\tif (perunBl.isPerunReadOnly()) {\n-\t\t\t\t\tthrow new InternalErrorException(\"There is missing required attribute \" + attribute + \" and can't be created because this instance is read only.\");\n-\t\t\t\t} else {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tattribute = createAttribute(sess, attribute, false);\n-\t\t\t\t\t} catch (AttributeDefinitionExistsException ex) {\n-\t\t\t\t\t\t//should not happen\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Attribute \" + attribute + \" already exists in Perun when attributeInitializer tried to create it.\");\n-\t\t\t\t\t}\n-\t\t\t\t\t//set correct id of attribute to rights\n-\t\t\t\t\tfor (AttributeRights listOfRight : listOfRights) {\n-\t\t\t\t\t\tlistOfRight.setAttributeId(attribute.getId());\n-\t\t\t\t\t}\n-\t\t\t\t\tsetAttributeRights(sess, listOfRights);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Prepare all attribute definition from system perun\n-\t\tSet<AttributeDefinition> allAttributesDef = new HashSet<>();\n-\t\tallAttributesDef.addAll(this.getAttributesDefinition(sess));\n-\n-\t\t//Basic state of all maps (record for every existing attributeDefinitions)\n-\t\tfor (AttributeDefinition ad : allAttributesDef) {\n-\t\t\tdependencies.put(ad, new HashSet<>());\n-\t\t\tstrongDependencies.put(ad, new HashSet<>());\n-\t\t\tinverseDependencies.put(ad, new HashSet<>());\n-\t\t\tinverseStrongDependencies.put(ad, new HashSet<>());\n-\t\t\tallDependencies.put(ad, new HashSet<>());\n-\t\t}\n-\n-\t\tlog.debug(\"Dependencies and StrongDependencies filling started.\");\n-\n-\t\t//Fill dep and strongDep maps\n-\t\tfor (AttributeDefinition ad : allAttributesDef) {\n-\t\t\tAttributesModuleImplApi module;\n-\t\t\tList<String> depList;\n-\t\t\tList<String> strongDepList = new ArrayList<>();\n-\t\t\tSet<AttributeDefinition> depSet = new HashSet<>();\n-\t\t\tSet<AttributeDefinition> strongDepSet = new HashSet<>();\n-\n-\t\t\t//Return null to object if module not exist\n-\t\t\tObject attributeModule = getAttributesManagerImpl().getAttributesModule(sess, ad);\n-\n-\t\t\t//If there is any existing module\n-\t\t\tif (attributeModule != null) {\n-\t\t\t\tmodule = (AttributesModuleImplApi) attributeModule;\n-\n-\t\t\t\tdepSet = getDependenciesForModule(sess, module);\n-\n-\t\t\t\tif(module instanceof VirtualAttributesModuleImplApi) {\n-\t\t\t\t\tstrongDepSet = getStrongDependenciesForModule(sess, (VirtualAttributesModuleImplApi) module);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tdependencies.put(ad, depSet);\n-\t\t\tstrongDependencies.put(ad, strongDepSet);\n-\t\t}\n-\n-\t\tlog.debug(\"Dependencies and StrongDependencies was filled successfully.\");\n-\n-\t\tlog.debug(\"InverseDependencies and InverseStrongDependencies filling started.\");\n-\n-\t\t//First create inversion map for simple dependencies\n-\t\tinverseDependencies = generateInverseDependencies(dependencies);\n-\n-\t\t//Second create inversion map for strong dependencies\n-\t\tinverseStrongDependencies = generateInverseDependencies(inverseStrongDependencies);\n-\n-\t\tlog.debug(\"InverseDependencies and InverseStrongDependencies was filled successfully.\");\n-\n-\t\tlog.debug(\"Cycle test of InverseStrongDependencies started.\");\n-\t\t//Test StrDepInveMap on cycles\n-\n-\t\tif (isMapOfAttributesDefCyclic(inverseStrongDependencies)) {\n-\t\t\tlog.error(\"There is cycle in inverseStrongDependencies so map of All attribute will be not created!\");\n-\t\t} else {\n-\t\t\tlog.debug(\"Cycle test of InverseStrongDependencies was successfull.\");\n-\t\t\tlog.debug(\"Filling map of allDependencies started.\");\n-\n-\t\t\tfor (AttributeDefinition key : allDependencies.keySet()) {\n-\t\t\t\tSet<AttributeDefinition> dependenciesOfAttribute = findAllAttributeDependencies(key,\n-\t\t\t\t\t\tinverseDependencies, inverseStrongDependencies);\n-\n-\t\t\t\tallDependencies.put(key, dependenciesOfAttribute);\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Map of allDependencies was filled successfully.\");\n-\t\t}\n-\n-\t\t//DEBUG creating file with all dependencies of all attributes (180+- on devel)\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, resource, group, attributes);\n+            this.checkAttributesDependencies(sess, resource, group, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, ues, attribute)) {\n+            checkAttributeValue(sess, ues, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute<>(ues, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    private boolean removeAttributeWithoutCheck(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, ues, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            log.info(\"{} removed attribute {} from user external source {}.\", sess.getLogId(), attribute.getName(), ues.getId());\n+            getPerunBl().getAuditer().log(sess, new AttributeRemovedForUes(new AttributeDefinition(attribute), ues));\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, UserExtSource ues, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, ues, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, ues, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, ues, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, ues);\n+        if (getAttributesManagerImpl().removeAllAttributes(sess, ues)) {\n+            getPerunBl().getAuditer().log(sess, new AllAttributesRemovedForUserExtSource(ues));\n+        }\n+        log.info(\"{} removed all attributes from user external source {}.\", sess.getLogId(), ues.getId());\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, ues, attributes);\n+            this.checkAttributesDependencies(sess, ues, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n+            } catch (WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException {\n+        getAttributesManagerImpl().checkActionTypeExists(sess, actionType);\n+    }\n+\n+    @Override\n+    public void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException {\n+        getAttributesManagerImpl().checkAttributeExists(sess, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException {\n+        getAttributesManagerImpl().checkAttributesExists(sess, attributes);\n+    }\n+\n+    @Override\n+    public boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isDefAttribute(sess, attribute);\n+    }\n+\n+    @Override\n+    public boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isOptAttribute(sess, attribute);\n+    }\n+\n+    @Override\n+    public boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isCoreAttribute(sess, attribute);\n+    }\n+\n+    @Override\n+    public boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isCoreManagedAttribute(sess, attribute);\n+    }\n+\n+    @Override\n+    public boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isVirtAttribute(sess, attribute);\n+    }\n+\n+    @Override\n+    public boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) {\n+        return getAttributesManagerImpl().isFromNamespace(attribute, namespace);\n+    }\n+\n+    @Override\n+    public void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, namespace);\n+    }\n+\n+    @Override\n+    public void checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, namespace);\n+    }\n+\n+    @Override\n+    public String getNamespaceFromAttributeName(String attributeName) {\n+        return attributeName.replaceFirst(\"(urn:perun:[^:]+:attribute-def:[^:]+):.*\", \"$1\");\n+    }\n+\n+    @Override\n+    public String getFriendlyNameFromAttributeName(String attributeName) {\n+        return attributeName.replaceFirst(\"urn:perun:[^:]+:attribute-def:[^:]+:\", \"\");\n+    }\n+\n+    @Override\n+    public List<Attribute> getLogins(PerunSession sess, User user) throws InternalErrorException {\n+        List<Attribute> usersAttributes = this.getAttributes(sess, user);  //Get all non-empty user's attributes\n+        usersAttributes.removeIf(attribute -> !attribute.getFriendlyName().startsWith(\"login-namespace:\"));\n+        return usersAttributes;\n+    }\n+\n+    @Override\n+    public List<Object> getAllValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (isCoreAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition)) {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+\n+        if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_RESOURCE_ATTR)) {\n+            return getAttributesManagerImpl().getAllResourceValues(sess, attributeDefinition);\n+        } else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+            return getAttributesManagerImpl().getAllGroupResourceValues(sess, attributeDefinition);\n+        } else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_ATTR)) {\n+            return getAttributesManagerImpl().getAllGroupValues(sess, attributeDefinition);\n+        } else {\n+            throw new InternalErrorException(\"Not implemented yet!\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_FACILITY_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition);\n+    }\n+\n+    private boolean isTrulyRequiredAttribute(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_VO_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByVo(sess, vo, attributeDefinition);\n+    }\n+\n+    private boolean isTrulyRequiredAttribute(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_GROUP_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByGroup(sess, group, attributeDefinition);\n+    }\n+\n+    @Override\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_RESOURCE_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+    }\n+\n+    @Override\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_MEMBER_ATTR);\n+        List<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+        for (Resource resource : allowedResources) {\n+            if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_USER_ATTR);\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member member : members) {\n+            List<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+            for (Resource resource : allowedResources) {\n+                if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_USER_FACILITY_ATTR);\n+        List<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        if (!allowedFacilities.contains(facility)) {\n+            return false;\n+        } else {\n+            if (!getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition)) {\n+                return false;\n+            }\n+            List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+            resources.retainAll(getPerunBl().getUsersManagerBl().getAllowedResources(sess, user));\n+            for (Resource resource : resources) {\n+                if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+    }\n+\n+    @Override\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        this.checkNamespace(sess, attributeDefinition, NS_MEMBER_RESOURCE_ATTR);\n+        List<Member> allowedMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+        return allowedMembers.contains(member) && getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+    }\n+\n+    @Override\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_MEMBER_GROUP_ATTR);\n+        List<Resource> assignedResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        for (Resource resource : assignedResources) {\n+            if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        this.checkNamespace(sess, attributeDefinition, NS_GROUP_RESOURCE_ATTR);\n+        List<Group> assignedGroups = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        return assignedGroups.contains(group) && getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+    }\n+\n+    @Override\n+    public Object stringToAttributeValue(String value, String type) throws InternalErrorException {\n+        if (type.equals(ArrayList.class.getName()) || type.equals(LinkedHashMap.class.getName()) ||\n+                type.equals(BeansUtils.largeArrayListClassName)) {\n+            if (value != null && !value.isEmpty() && !value.endsWith(String.valueOf(AttributesManagerImpl.LIST_DELIMITER))) {\n+                value = value.concat(String.valueOf(AttributesManagerImpl.LIST_DELIMITER));\n+            }\n+        }\n+        return BeansUtils.stringToAttributeValue(value, type);\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    public static String escapeListAttributeValue(String value) {\n+        return AttributesManagerImpl.escapeListAttributeValue(value);\n+    }\n+\n+    public static String escapeMapAttributeValue(String value) {\n+        return AttributesManagerImpl.escapeMapAttributeValue(value);\n+    }\n+\n+    @Override\n+    public void doTheMagic(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        doTheMagic(sess, member, false);\n+    }\n+\n+    @Override\n+    public void doTheMagic(PerunSession sess, Member member, boolean trueMagic) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+        for (Resource resource : resources) {\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            List<Attribute> requiredAttributes;\n+            try {\n+                requiredAttributes = getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n+            } catch (MemberResourceMismatchException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+            boolean allOk = false;\n+            AttributeDefinition lastWrongAttribute = null;\n+            int safetyCounter = 0;\n+            do {\n+                try {\n+                    setRequiredAttributes(sess, facility, resource, user, member, requiredAttributes);\n+                    allOk = true;\n+                } catch (AttributeNotExistsException | MemberResourceMismatchException | WrongAttributeAssignmentException ex) {\n+                    throw new ConsistencyErrorException(ex);\n+                } catch (WrongAttributeValueException ex) {\n+                    if (!trueMagic) {\n+                        throw ex;\n+                    }\n+                    AttributeDefinition wrongAttributeDefinition = ex.getAttribute();\n+                    if (wrongAttributeDefinition == null) {\n+                        throw new ConsistencyErrorException(\"WrongAttributeValueException doesn't have set the wrong attribute.\", ex);\n+                    }\n+                    if (wrongAttributeDefinition.equals(lastWrongAttribute)) {\n+                        throw new WrongAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n+                    }\n+                    lastWrongAttribute = wrongAttributeDefinition;\n+                    findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null);\n+                } catch (WrongReferenceAttributeValueException ex) {\n+                    if (!trueMagic) {\n+                        throw ex;\n+                    }\n+                    AttributeDefinition wrongAttributeDefinition = ex.getReferenceAttribute();\n+                    if (wrongAttributeDefinition == null) {\n+                        throw new ConsistencyErrorException(\"WrongReferenceAttributeValueException doesn't have set reference attribute.\", ex);\n+                    }\n+                    if (wrongAttributeDefinition.equals(lastWrongAttribute)) {\n+                        throw new WrongReferenceAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n+                    }\n+                    lastWrongAttribute = wrongAttributeDefinition;\n+                    if (!findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null)) {\n+                        //this attribute can't be fixed here\n+                        throw ex;\n+                    }\n+                }\n+                safetyCounter++;\n+                if (safetyCounter == 50) {\n+                    throw new InternalErrorException(\"Method doTheMagic possibly stays in infinite loop.\");\n+                }\n+            } while (trueMagic && !allOk);\n+        }\n+    }\n+\n+    @Override\n+    public void mergeAttributesValues(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        for (Attribute attribute : attributes) {\n+            this.mergeAttributeValue(sess, user, attribute);\n+        }\n+    }\n+\n+    @Override\n+    public void mergeAttributesValues(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        for (Attribute attribute : attributes) {\n+            this.mergeAttributeValue(sess, member, attribute);\n+        }\n+    }\n+\n+    /**\n+     * Merges attribute value for supported attribute's namespaces if the attribute type is list or map. In other cases it only stores new value.\n+     * <p>\n+     * If attribute has null value or it's value is same as value of attribute already stored in Perun, return stored attribute instead.\n+     * If the type is list, new values are added to the current stored list.\n+     * It the type is map, new values are added and existing are overwritten with new values, but only if there is any change.\n+     * <p>\n+     * Supported namespaces\n+     * - user attributes\n+     * - member attributes\n+     *\n+     * @param sess          session\n+     * @param attribute     attribute to merge it's value if possible\n+     * @param primaryHolder holder defines object for which is attribute stored in Perun\n+     * @return attribute after merging his value\n+     * @throws InternalErrorException                if one of mandatory objects is null or some internal problem has occured\n+     * @throws WrongAttributeValueException          attribute value of set attribute is not correct\n+     * @throws WrongReferenceAttributeValueException any reference attribute value is not correct\n+     * @throws WrongAttributeAssignmentException     if attribute is not from the same namespace defined by primaryHolder\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private Attribute mergeAttributeValue(PerunSession sess, Attribute attribute, PerunBean primaryHolder) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        //If attribute is null, throw an exception\n+        if (attribute == null) {\n+            throw new InternalErrorException(\"Can't merge null attribute with anything!\");\n+        }\n+        if (primaryHolder == null) {\n+            throw new InternalErrorException(\"Can't merge attribute value without notNull primaryHolder!\");\n+        }\n+\n+        //Get stored attribute in Perun\n+        Attribute storedAttribute;\n+        try {\n+            if (primaryHolder instanceof User) {\n+                storedAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (User) primaryHolder, attribute.getName());\n+            } else if (primaryHolder instanceof Member) {\n+                storedAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (Member) primaryHolder, attribute.getName());\n+            } else {\n+                throw new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new ConsistencyErrorException(e);\n+        }\n+\n+        //if attribute to merge has null value or it's value is same as stored attribute's value, return the stored attribute\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null || Objects.equals(attribute.getValue(), storedAttribute.getValue())) {\n+            return storedAttribute;\n+        }\n+\n+        // Check type ArrayList\n+        if (attribute.getType().equals(ArrayList.class.getName()) || attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n+            ArrayList<String> updatedList = (ArrayList<String>) storedAttribute.getValue();\n+            // If there were someting then find values which haven't been already stored\n+            if (updatedList != null) {\n+                for (String value : ((ArrayList<String>) attribute.getValue())) {\n+                    if (!updatedList.contains(value)) {\n+                        updatedList.add(value);\n+                    }\n+                }\n+                attribute.setValue(updatedList);\n+            }\n+            // Check type LinkedHashMap\n+        } else if (attribute.getType().equals(LinkedHashMap.class.getName())) {\n+            //Find values which haven't been already stored\n+            LinkedHashMap<String, String> updatedMap = (LinkedHashMap<String, String>) storedAttribute.getValue();\n+            if (updatedMap != null) {\n+                LinkedHashMap<String, String> receivedMap = (LinkedHashMap<String, String>) attribute.getValue();\n+                updatedMap.putAll(receivedMap);\n+                attribute.setValue(updatedMap);\n+            }\n+        }\n+\n+        //Other types as String, Integer, Boolean etc. will be replaced by new value (no way how to merge them properly)\n+        if (primaryHolder instanceof User) {\n+            getPerunBl().getAttributesManagerBl().setAttribute(sess, (User) primaryHolder, attribute);\n+        } else //noinspection ConstantConditions\n+            if (primaryHolder instanceof Member) {\n+                getPerunBl().getAttributesManagerBl().setAttribute(sess, (Member) primaryHolder, attribute);\n+            } else {\n+                throw new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n+            }\n+\n+        return attribute;\n+    }\n+\n+    @Override\n+    public Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return this.mergeAttributeValue(sess, attribute, user);\n+    }\n+\n+    @Override\n+    public Attribute mergeAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return this.mergeAttributeValue(sess, attribute, member);\n+    }\n+\n+    @Override\n+    public Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return mergeAttributeValue(sess, user, attribute);\n+    }\n+\n+    @Override\n+    public Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return mergeAttributeValue(sess, member, attribute);\n+    }\n+\n+    public void checkAttributeAssignment(PerunSession sess, AttributeDefinition attributeDefinition, PerunBean handler) throws WrongAttributeAssignmentException, InternalErrorException {\n+        this.checkAttributeAssignment(sess, attributeDefinition, handler, null);\n+    }\n+\n+    public void checkAttributeAssignment(PerunSession sess, AttributeDefinition attributeDefinition, PerunBean handler1, PerunBean handler2) throws WrongAttributeAssignmentException, InternalErrorException {\n+        String richObjectRegex = \"^rich\";\n+        String firstIdentifier;\n+        String secondIdentifier;\n+        String identifier;\n+        String reverseIdentifier;\n+\n+        //Prepare identifier and reverse identifier of namespace for handlers\n+        if (handler1 != null && handler2 != null) {\n+            firstIdentifier = handler1.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");\n+            secondIdentifier = handler2.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");\n+            ;\n+            identifier = firstIdentifier + \"_\" + secondIdentifier;\n+            reverseIdentifier = secondIdentifier + \"_\" + firstIdentifier;\n+        } else if (handler1 != null) {\n+            firstIdentifier = handler1.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");\n+            ;\n+            identifier = firstIdentifier;\n+            reverseIdentifier = identifier;\n+        } else if (handler2 != null) {\n+            firstIdentifier = handler2.getClass().getSimpleName().toLowerCase().replaceFirst(richObjectRegex, \"\");\n+            ;\n+            identifier = firstIdentifier;\n+            reverseIdentifier = identifier;\n+        } else {\n+            throw new InternalErrorException(\"Both handlers can't be null!\");\n+        }\n+\n+        //There is exception for entityless attributes and for user_ext_source attributes\n+        if (identifier.equals(String.class.getSimpleName().toLowerCase())) {\n+            identifier = \"entityless\";\n+            reverseIdentifier = identifier;\n+        } else if (identifier.equals(\"userextsource\")) {\n+            identifier = \"user_ext_source\";\n+            reverseIdentifier = identifier;\n+        }\n+\n+        //Looking for namespace by identifier in map of all exist namespaces\n+        String namespaceByHandlers = AttributesManagerImpl.BEANS_TO_NAMESPACES_MAP.get(identifier);\n+        //If namespace for identifier not exists, try to look for reverse identifier if it is different from identifier\n+        if (namespaceByHandlers == null && !identifier.equals(reverseIdentifier)) {\n+            namespaceByHandlers = AttributesManagerImpl.BEANS_TO_NAMESPACES_MAP.get(reverseIdentifier);\n+        }\n+        //If namespace not exists, throw exception\n+        if (namespaceByHandlers == null) {\n+            throw new InternalErrorException(\"Unable to get namespace for objects: \" + handler1 + \" and \" + handler2);\n+        }\n+\n+        //Check namespace of attribute definition\n+        checkNamespace(sess, attributeDefinition, namespaceByHandlers);\n+    }\n+\n+    @SuppressWarnings(\"SameParameterValue\")\n+    private boolean findAndSetValueInList(List<Attribute> attributes, AttributeDefinition attributeDefinition, Object value) {\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getId() == attributeDefinition.getId()) {\n+                attribute.setValue(value);\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+        getPerunBl().getAuditer().log(perunSession, new AttributeUpdated(attributeDefinition));\n+        return getAttributesManagerImpl().updateAttributeDefinition(perunSession, attributeDefinition);\n+    }\n+\n+    @SuppressWarnings(\"SameParameterValue\")\n+    private void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithGroupAttributes) {\n+            List<Attribute> groupAttributes = new ArrayList<>();\n+            List<Attribute> groupResourceAttributes = new ArrayList<>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(attr, NS_GROUP_RESOURCE_ATTR)) {\n+                    groupResourceAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_GROUP_ATTR)) {\n+                    groupAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, resource, group, groupResourceAttributes);\n+            checkAttributesDependencies(sess, group, null, groupAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, resource, group, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<Attribute> userAttributes = new ArrayList<>();\n+            List<Attribute> memberAttributes = new ArrayList<>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n+                    userAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n+                    memberAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, member, null, memberAttributes);\n+            checkAttributesDependencies(sess, user, null, userAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, member, null, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, User user, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        List<Attribute> userAttributes = new ArrayList<>();\n+        List<Attribute> memberAttributes = new ArrayList<>();\n+        List<Attribute> memberResourceAttributes = new ArrayList<>();\n+        List<Attribute> userFacilityAttributes = new ArrayList<>();\n+        for (Attribute attr : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n+                userAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n+                memberAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_RESOURCE_ATTR)) {\n+                memberResourceAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_FACILITY_ATTR)) {\n+                userFacilityAttributes.add(attr);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attr);\n+            }\n+        }\n+        checkAttributesDependencies(sess, member, null, memberAttributes);\n+        checkAttributesDependencies(sess, user, null, userAttributes);\n+        checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+        checkAttributesDependencies(sess, resource, member, memberResourceAttributes);\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, Member member, User user, Facility facility, List<Attribute> attributes)\n+            throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        List<Attribute> userAttributes = new ArrayList<>();\n+        List<Attribute> memberAttributes = new ArrayList<>();\n+        List<Attribute> memberResourceAttributes = new ArrayList<>();\n+        List<Attribute> userFacilityAttributes = new ArrayList<>();\n+        List<Attribute> memberGroupAttributes = new ArrayList<>();\n+        for (Attribute attr : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n+                userAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n+                memberAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_RESOURCE_ATTR)) {\n+                memberResourceAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_FACILITY_ATTR)) {\n+                userFacilityAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_GROUP_ATTR)) {\n+                memberGroupAttributes.add(attr);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attr);\n+            }\n+        }\n+        checkAttributesDependencies(sess, member, null, memberAttributes);\n+        checkAttributesDependencies(sess, user, null, userAttributes);\n+        checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+        checkAttributesDependencies(sess, resource, member, memberResourceAttributes);\n+        checkAttributesDependencies(sess, member, group, memberGroupAttributes);\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            List<Attribute> userAttributes = new ArrayList<>();\n+            List<Attribute> memberAttributes = new ArrayList<>();\n+            List<Attribute> memberResourceAttributes = new ArrayList<>();\n+            List<Attribute> userFacilityAttributes = new ArrayList<>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n+                    userAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n+                    memberAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_RESOURCE_ATTR)) {\n+                    memberResourceAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_FACILITY_ATTR)) {\n+                    userFacilityAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, member, null, memberAttributes);\n+            checkAttributesDependencies(sess, user, null, userAttributes);\n+            checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+            checkAttributesDependencies(sess, resource, member, memberResourceAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, resource, member, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<Attribute> userAttributes = new ArrayList<>();\n+            List<Attribute> memberAttributes = new ArrayList<>();\n+            List<Attribute> memberGroupAttributes = new ArrayList<>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(attr, NS_USER_ATTR)) {\n+                    userAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_ATTR)) {\n+                    memberAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(attr, NS_MEMBER_GROUP_ATTR)) {\n+                    memberGroupAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, member, null, memberAttributes);\n+            checkAttributesDependencies(sess, user, null, userAttributes);\n+            checkAttributesDependencies(sess, member, group, memberGroupAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, member, group, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Object primaryHolder, Object secondaryHolder, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (attributes != null && !attributes.isEmpty()) {\n+            for (Attribute attr : attributes) {\n+                checkAttributeDependencies(sess, new RichAttribute<>(primaryHolder, secondaryHolder, attr));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void checkAttributeDependencies(PerunSession sess, RichAttribute richAttr) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (getAllDependencies() == null || getAllDependencies().isEmpty()) {\n+            log.error(\"Map of all dependencies is empty. If this is not test, its an error probably.\");\n+        }\n+        if (richAttr == null || richAttr.getAttribute() == null) {\n+            throw new InternalErrorException(\"RichAttribute or Attribute in it can't be null!\");\n+        } else {\n+            //Get All attributeDef which are dependencies\n+            Set<AttributeDefinition> dependencies = getAllDependencies().get(new AttributeDefinition(richAttr.getAttribute()));\n+            if (dependencies != null && !dependencies.isEmpty()) {\n+                for (AttributeDefinition dependency : dependencies) {\n+                    List<RichAttribute> richAttributesToCheck;\n+                    try {\n+                        richAttributesToCheck = getRichAttributesWithHoldersForAttributeDefinition(sess, dependency, richAttr);\n+                    } catch (AttributeNotExistsException | VoNotExistsException | UserNotExistsException | GroupResourceMismatchException | MemberResourceMismatchException ex) {\n+                        throw new InternalErrorException(ex);\n+                    }\n+                    for (RichAttribute richAttribute : richAttributesToCheck) {\n+                        if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_VO_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Vo) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for VO Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Vo) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For VO Attribute there must be VO in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_GROUP_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Group Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Group Attribute there must be Group in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_MEMBER_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Member Attribute there must be Member in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_USER_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for User Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For User Attribute there must be User in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_RESOURCE_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Resource Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Resource Attribute there must be Resource in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_FACILITY_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Facility Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Facility Attribute there must be Facility in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), AttributesManager.NS_ENTITYLESS_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof String) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Entityless Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (String) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Entityless Attribute there must be String in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), AttributesManager.NS_HOST_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Host) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Host Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Host) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Host Attribute there must be Host in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_GROUP_RESOURCE_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n+                                    try {\n+                                        this.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                    } catch (GroupResourceMismatchException ex) {\n+                                        throw new ConsistencyErrorException(ex);\n+                                    }\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                    try {\n+                                        this.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                    } catch (GroupResourceMismatchException ex) {\n+                                        throw new ConsistencyErrorException(ex);\n+                                    }\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Group_Resource Attribute there must be Group or Resource in primaryHolder.\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_MEMBER_RESOURCE_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n+                                    try {\n+                                        this.checkAttributeValue(sess, (Member) richAttribute.getSecondaryHolder(), (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                    } catch (MemberResourceMismatchException ex) {\n+                                        throw new ConsistencyErrorException(ex);\n+                                    }\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                    try {\n+                                        this.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), (Resource) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                    } catch (MemberResourceMismatchException ex) {\n+                                        throw new ConsistencyErrorException(ex);\n+                                    }\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Member_Resource Attribute there must be Member or Resource in primaryHolder.\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_MEMBER_GROUP_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n+                                    this.checkAttributeValue(sess, (Member) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                    this.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Member_Group Attribute there must be Member or Group in primaryHolder.\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(richAttribute.getAttribute(), NS_USER_FACILITY_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof User) {\n+                                    this.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), (User) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Facility) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n+                                    this.checkAttributeValue(sess, (Facility) richAttribute.getSecondaryHolder(), (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Facility_User Attribute there must be Facility or User in primaryHolder.\");\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<RichAttribute> getRichAttributesWithHoldersForAttributeDefinition(PerunSession sess, AttributeDefinition attrDef, RichAttribute aidingAttr)\n+            throws InternalErrorException, AttributeNotExistsException, UserNotExistsException, VoNotExistsException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupResourceMismatchException, MemberResourceMismatchException {\n+        //Filling objects from aidingAttr\n+        if (aidingAttr == null) {\n+            throw new InternalErrorException(\"Aiding attribute cant be null.\");\n+        }\n+        if (attrDef == null) {\n+            throw new InternalErrorException(\"attrDef cant be null.\");\n+        }\n+\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+\n+        //All possible useful objects\n+        Vo vo = null;\n+        Facility facility = null;\n+        Group group = null;\n+        Member member = null;\n+        User user = null;\n+        Host host = null;\n+        Resource resource = null;\n+        String key = null;\n+        UserExtSource userExtSource = null;\n+\n+        //Get object for primaryHolder of aidingAttr\n+        if (aidingAttr.getPrimaryHolder() != null) {\n+            if (aidingAttr.getPrimaryHolder() instanceof Vo) {\n+                vo = (Vo) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Facility) {\n+                facility = (Facility) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Group) {\n+                group = (Group) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Member) {\n+                member = (Member) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof User) {\n+                user = (User) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Host) {\n+                host = (Host) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Resource) {\n+                resource = (Resource) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof UserExtSource) {\n+                userExtSource = (UserExtSource) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof String) {\n+                key = (String) aidingAttr.getPrimaryHolder();\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n+            }\n+        } else {\n+            throw new InternalErrorException(\"Aiding attribute must have primaryHolder which is not null.\");\n+        }\n+\n+        //Get object for secondaryHolder of aidingAttr\n+        if (aidingAttr.getSecondaryHolder() != null) {\n+            if (aidingAttr.getSecondaryHolder() instanceof Vo) {\n+                vo = (Vo) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Facility) {\n+                facility = (Facility) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Group) {\n+                group = (Group) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Member) {\n+                member = (Member) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof User) {\n+                user = (User) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Host) {\n+                host = (Host) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Resource) {\n+                resource = (Resource) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof UserExtSource) {\n+                userExtSource = (UserExtSource) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof String) {\n+                key = (String) aidingAttr.getSecondaryHolder();\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized object in secondaryHolder of aidingAttr\");\n+            }\n+        } // If not, its ok, secondary holder can be null\n+\n+        //First i choose what i am looking for by descriptionAttr\n+        //Second on the fact what i really have in aidingAttr i try to find what i am looking for\n+        //IMPORTANT: If member is not allowed on connected objects (INVALID or DISABLED status), we skip these objects\n+\n+        if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_VO_ATTR)) {\n+\n+            if (resource != null && member != null) {\n+                //we do not need object resource to resolve this case\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, member, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need object resource to resolve this case\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, group, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                //we do not need object group to resolve this case\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, member, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getVoAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_GROUP_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to use the resource object here\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, group, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getGroupAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_FACILITY_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to use the group object here\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, resource, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getFacilityAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_MEMBER_ATTR)) {\n+            if (resource != null && member != null) {\n+                //we do not need to use the resource object here\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, member, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to use the resource object here\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, group, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                //we do not need to use the group object here\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, member, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getMemberAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_RESOURCE_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to use the group object here\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, resource, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getResourceAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_USER_ATTR)) {\n+            if (resource != null && member != null) {\n+                //we do not need to use the resource object here\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, member, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to use the resource object here\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, group, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                //we do not need to use the group object here\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, member, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getUserAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, AttributesManager.NS_HOST_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to user the group object here\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, resource, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getHostAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_GROUP_RESOURCE_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, group, resource, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getGroupResourceAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_MEMBER_GROUP_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to use the resource object\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, group, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getMemberGroupAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_MEMBER_RESOURCE_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, group, resource, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getMemberResourceAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_USER_FACILITY_ATTR)) {\n+            if (resource != null && member != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, member, resource, attrDef));\n+            } else if (group != null && resource != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, group, resource, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, member, group, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getUserFacilityAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, NS_UES_ATTR)) {\n+            if (resource != null && member != null) {\n+                //we do not need to use the resource object here\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, member, attrDef));\n+            } else if (group != null && resource != null) {\n+                //we do not need to use the resource object here\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, group, attrDef));\n+            } else if (user != null && facility != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, user, facility, attrDef));\n+            } else if (member != null && group != null) {\n+                //we do not need to use the group object here\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, member, attrDef));\n+            } else if (group != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, group, attrDef));\n+            } else if (member != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, member, attrDef));\n+            } else if (resource != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, resource, attrDef));\n+            } else if (user != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, user, attrDef));\n+            } else if (host != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, host, attrDef));\n+            } else if (facility != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, facility, attrDef));\n+            } else if (vo != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, vo, attrDef));\n+            } else if (userExtSource != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, userExtSource, attrDef));\n+            } else if (key != null) {\n+                listOfRichAttributes.addAll(this.getUserExtSourceAttributes(sess, attrDef));\n+            } else {\n+                throw new InternalErrorException(\"Unknown combination of PerunBeans: \" + aidingAttr);\n+            }\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(attrDef, AttributesManager.NS_ENTITYLESS_ATTR)) {\n+            if (key != null) {\n+                listOfRichAttributes.addAll(getEntitylessAttributes(sess, key, attrDef));\n+            } else {\n+                listOfRichAttributes.addAll(getEntitylessAttributes(sess, attrDef));\n+            }\n+\n+        } else {\n+            throw new InternalErrorException(\"There is unrecognized namespace in attribute \" + attrDef);\n+        }\n+\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Checks if the attributes represent empty values. If so, converts them into null.\n+     *\n+     * @param attributes attributes to be checked if are null\n+     */\n+    private void convertEmptyAttrValueToNull(List<Attribute> attributes) throws ConsistencyErrorException {\n+        for (Attribute attribute : attributes) {\n+            convertEmptyAttrValueToNull(attribute);\n+        }\n+    }\n+\n+    /**\n+     * Checks if the attribute represents empty value. If so, converts it into null.\n+     *\n+     * @param attribute attribute to be checked if is null\n+     */\n+    private void convertEmptyAttrValueToNull(Attribute attribute) throws ConsistencyErrorException {\n+        if (attribute.getValue() == null) {\n+            return;\n+        }\n+        if (attribute.getValue() instanceof Integer) {\n+            return;\n+        }\n+        if (attribute.getValue() instanceof String) {\n+            if (((String) attribute.getValue()).matches(\"\\\\s*\")) {\n+                attribute.setValue(null);\n+            }\n+        } else if (attribute.getValue() instanceof Boolean) {\n+            if (attribute.getValue().equals(Boolean.FALSE)) {\n+                attribute.setValue(null);\n+            }\n+        } else if (attribute.getValue() instanceof ArrayList) {\n+            if (((ArrayList) attribute.getValue()).isEmpty()) {\n+                attribute.setValue(null);\n+            }\n+        } else if (attribute.getValue() instanceof LinkedHashMap) {\n+            if (((LinkedHashMap) attribute.getValue()).isEmpty()) {\n+                attribute.setValue(null);\n+            }\n+        } else {\n+            throw new ConsistencyErrorException(\"Invalid attribute value type: \" + attribute.getType() +\n+                    \" class: \" + attribute.getValue().getClass().getName());\n+        }\n+    }\n+\n+    /**\n+     * Gets the getAttributesManagerImpl().\n+     *\n+     * @return The getAttributesManagerImpl().\n+     */\n+    private AttributesManagerImplApi getAttributesManagerImpl() {\n+        return this.attributesManagerImpl;\n+    }\n+\n+    /**\n+     * Gets the perunBl.\n+     *\n+     * @return The perunBl.\n+     */\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n+\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n+\n+    private List<Attribute> attributesFromDefinitions(List<? extends AttributeDefinition> attributesDefinition) {\n+        List<Attribute> attributes = new ArrayList<>(attributesDefinition.size());\n+        for (AttributeDefinition attributeDefinition : attributesDefinition) {\n+            attributes.add(new Attribute(attributeDefinition));\n+        }\n+        return attributes;\n+    }\n+\n+    protected void initialize() throws InternalErrorException {\n+        log.debug(\"AttributesManagerBlImpl initialize started.\");\n+\n+        //Get PerunSession\n+        String attributesManagerInitializator = \"attributesManagerBlImplInitializator\";\n+        PerunPrincipal pp = new PerunPrincipal(attributesManagerInitializator, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL);\n+        PerunSession sess = perunBl.getPerunSession(pp, new PerunClient());\n+\n+        //Load all attributes modules\n+        ServiceLoader<AttributesModuleImplApi> attributeModulesLoader = ServiceLoader.load(AttributesModuleImplApi.class);\n+        getAttributesManagerImpl().initAttributeModules(attributeModulesLoader);\n+        getAttributesManagerImpl().registerAttributeModules(attributeModulesLoader);\n+\n+        //Check if all core attributes exists, create if doesn't\n+        Map<AttributeDefinition, List<AttributeRights>> attributes = new HashMap<>();\n+        //Facility.id\n+        AttributeDefinition attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_FACILITY_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"id\");\n+        attr.setDisplayName(\"Facility id\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        List<AttributeRights> rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Facility.name\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_FACILITY_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"name\");\n+        attr.setDisplayName(\"Facility name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Resource.id\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"id\");\n+        attr.setDisplayName(\"Resource id\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Resource.name\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"name\");\n+        attr.setDisplayName(\"Resource name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Resource.description\n+        attr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"description\");\n+        attr.setDisplayName(\"Resource description\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Member.id\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_MEMBER_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"id\");\n+        attr.setDisplayName(\"Member id\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //User.id\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"id\");\n+        attr.setDisplayName(\"User id\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //User.firstName\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"firstName\");\n+        attr.setDisplayName(\"User first name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //User.lastName\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"lastName\");\n+        attr.setDisplayName(\"User last name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //User.middleName\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"middleName\");\n+        attr.setDisplayName(\"User middle name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //User.titleBefore\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"titleBefore\");\n+        attr.setDisplayName(\"User title before\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //User.titleAfter\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"titleAfter\");\n+        attr.setDisplayName(\"User title after\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //User.serviceUser\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(Boolean.class.getName());\n+        attr.setFriendlyName(\"serviceUser\");\n+        attr.setDisplayName(\"If user is service user or not.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        attributes.put(attr, rights);\n+\n+        //User.displayName\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"displayName\");\n+        attr.setDisplayName(\"Display name\");\n+        attr.setDescription(\"Displayed user's name.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Group.id\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"id\");\n+        attr.setDisplayName(\"Group id\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Group.name\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"name\");\n+        attr.setDisplayName(\"Group full name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Group.description\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"description\");\n+        attr.setDisplayName(\"Group description\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Group.parentGroupId\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"parentGroupId\");\n+        attr.setDisplayName(\"Id of group's parent group.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        attributes.put(attr, rights);\n+\n+        //Vo.id\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"id\");\n+        attr.setDisplayName(\"Vo id\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        attributes.put(attr, rights);\n+\n+        //Vo.name\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"name\");\n+        attr.setDisplayName(\"Vo full name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Vo.createdAt\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"createdAt\");\n+        attr.setDisplayName(\"Vo created date\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        attributes.put(attr, rights);\n+\n+        //Vo.shortName\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_VO_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"shortName\");\n+        attr.setDisplayName(\"Vo short name\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Host.id\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_HOST_ATTR_CORE);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"id\");\n+        attr.setDisplayName(\"Host id\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //Host.hostname\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_HOST_ATTR_CORE);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"hostname\");\n+        attr.setDisplayName(\"Host hostname\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        // *** Def attributes\n+\n+        //urn:perun:user:attribute-def:def:organization\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"organization\");\n+        attr.setDisplayName(\"Organization\");\n+        attr.setDescription(\"Organization, from which user comes from. Provided by IDP.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:user:attribute-def:def:preferredMail\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"preferredMail\");\n+        attr.setDisplayName(\"Preferred mail\");\n+        attr.setDescription(\"E-mail address preferred for communication.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:user:attribute-def:def:phone\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"phone\");\n+        attr.setDisplayName(\"Phone\");\n+        attr.setDescription(\"Phone number in organization. Provided by IDP.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:member:attribute-def:def:mail\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_MEMBER_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"mail\");\n+        attr.setDisplayName(\"Mail\");\n+        attr.setDescription(\"E-mail address in organization (VO wide).\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:member:attribute-def:def:organization\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_MEMBER_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"organization\");\n+        attr.setDisplayName(\"Organization (for VO)\");\n+        attr.setDescription(\"Organization, from which user comes from (VO wide).\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn_perun_member_attribute_def_def_suspensionInfo\n+        attr = (new urn_perun_member_attribute_def_def_suspensionInfo()).getAttributeDefinition();\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:vo:attribute-def:def:membershipExpirationRules\n+        attr = new AttributeDefinition();\n+        attr.setDisplayName(\"Membership expiration rules\");\n+        attr.setFriendlyName(\"membershipExpirationRules\");\n+        attr.setNamespace(\"urn:perun:vo:attribute-def:def\");\n+        attr.setDescription(\"Set of rules to determine date of membership expiration. If not set, membership is not limited.\");\n+        attr.setType(LinkedHashMap.class.getName());\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:groupMembershipExpirationRules\n+        attr = new AttributeDefinition();\n+        attr.setDisplayName(\"Group membership expiration rules\");\n+        attr.setFriendlyName(\"groupMembershipExpirationRules\");\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setDescription(\"Set of rules to determine date of group membership expiration. If not set, membership is not limited.\");\n+        attr.setType(LinkedHashMap.class.getName());\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:member:group:attribute-def:def:groupMembershipExpiration\n+        attr = new AttributeDefinition();\n+        attr.setDisplayName(\"Group membership expiration\");\n+        attr.setFriendlyName(\"groupMembershipExpiration\");\n+        attr.setNamespace(AttributesManager.NS_MEMBER_GROUP_ATTR_DEF);\n+        attr.setDescription(\"When the member expires in group, format YYYY-MM-DD.\");\n+        attr.setType(String.class.getName());\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        attributes.put(attr, rights);\n+\n+\n+        //urn:perun:group:attribute-def:def:groupExtSource\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"groupExtSource\");\n+        attr.setDisplayName(\"Group extSource\");\n+        attr.setDescription(\"External source from which group comes from. Used for groups synchronization.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:groupMembersExtSource\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"groupMembersExtSource\");\n+        attr.setDisplayName(\"Group members extSource\");\n+        attr.setDescription(\"External source from which group members comes from. Used for group synchronization. If not set, members are loaded from the same external source as group itself.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:groupMembersQuery\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"groupMembersQuery\");\n+        attr.setDisplayName(\"Group members query\");\n+        attr.setDescription(\"Query (SQL) on external source which retrieves list of it's members.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:synchronizationEnabled\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"synchronizationEnabled\");\n+        attr.setDisplayName(\"Group synchronization enabled\");\n+        attr.setDescription(\"Enables group synchronization from external source.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:synchronizationInterval\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"synchronizationInterval\");\n+        attr.setDisplayName(\"Synchronization interval\");\n+        attr.setDescription(\"Time between two successful synchronizations.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:lastSynchronizationState\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"lastSynchronizationState\");\n+        attr.setDisplayName(\"Last synchronization state\");\n+        attr.setDescription(\"If group is synchronized, there will be information about state of last synchronization.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:lastSynchronizationTimestamp\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"lastSynchronizationTimestamp\");\n+        attr.setDisplayName(\"Last Synchronization timestamp\");\n+        attr.setDescription(\"If group is synchronized, there will be the last timestamp of group synchronization.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:lightweightSynchronization\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(Boolean.class.getName());\n+        attr.setFriendlyName(\"lightweightSynchronization\");\n+        attr.setDisplayName(\"Lightweight Synchronization\");\n+        attr.setDescription(\"If true, then do not update actual members.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:lastSuccessSynchronizationTimestamp\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"lastSuccessSynchronizationTimestamp\");\n+        attr.setDisplayName(\"Last successful synchronization timestamp\");\n+        attr.setDescription(\"If group is synchronized, there will be timestamp of last successful synchronization.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:group:attribute-def:def:authoritativeGroup\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+        attr.setType(Integer.class.getName());\n+        attr.setFriendlyName(\"authoritativeGroup\");\n+        attr.setDisplayName(\"Authoritative Group\");\n+        attr.setDescription(\"If group is authoritative for member. (for synchronization)\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:facility:attribute-def:def:login-namespace\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_FACILITY_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"login-namespace\");\n+        attr.setDisplayName(\"Login namespace\");\n+        attr.setDescription(\"Define namespace for all user's logins on Facility.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:resource:attribute-def:def:userSettingsName\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"userSettingsName\");\n+        attr.setDisplayName(\"User settings name\");\n+        attr.setDescription(\"Name displayed in user profile resource settings. To display certain resource in user profile settings this attribute value needs to be set.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:resource:attribute-def:def:userSettingsDescription\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_RESOURCE_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"userSettingsDescription\");\n+        attr.setDisplayName(\"User settings description\");\n+        attr.setDescription(\"Description displayed in user profile resource settings.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:vo:attribute-def:def:aupLink\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"aupLink\");\n+        attr.setDisplayName(\"Link to AUP\");\n+        attr.setDescription(\"Link to AUP of a virtual organization.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:user_facility:attribute-def:virt:login\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_FACILITY_ATTR_VIRT);\n+        attr.setType(String.class.getName());\n+        attr.setFriendlyName(\"login\");\n+        attr.setDisplayName(\"Login\");\n+        attr.setDescription(\"User's logname at facility. Value is determined automatically from all user's logins by Facility's namespace.\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn:perun:user:attribute-def:virt:groupNames\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_ATTR_VIRT);\n+        attr.setType(ArrayList.class.getName());\n+        attr.setFriendlyName(\"groupNames\");\n+        attr.setDisplayName(\"Group names\");\n+        attr.setDescription(\"Names of groups where user is member\");\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn_perun_facility_attribute_def_virt_GIDRanges\n+        attr = new AttributeDefinition((new urn_perun_facility_attribute_def_virt_GIDRanges()).getAttributeDefinition());\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn_perun_entityless_attribute_def_def_namespace_GIDRanges\n+        attr = new AttributeDefinition((new urn_perun_entityless_attribute_def_def_namespace_GIDRanges()).getAttributeDefinition());\n+        //set attribute rights (with dummy id of attribute - not known yet)\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.SELF, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.VOADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.GROUPADMIN, Collections.singletonList(ActionType.READ)));\n+        rights.add(new AttributeRights(-1, Role.FACILITYADMIN, Collections.singletonList(ActionType.READ)));\n+        attributes.put(attr, rights);\n+\n+        //urn_perun_entityless_attribute_def_def_randomPwdResetTemplate\n+        attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_ENTITYLESS_ATTR_DEF);\n+        attr.setType(\"java.lang.LargeString\");\n+        attr.setFriendlyName(\"randomPwdResetTemplate\");\n+        attr.setDisplayName(\"Random password reset templates.\");\n+        attr.setDescription(\"Random password reset templates. Each value should be String representing an HTML page.\" +\n+                \" Keywords {password} and {login} will be replaced.\");\n+\n+        rights = new ArrayList<>();\n+        rights.add(new AttributeRights(-1, Role.PERUNADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+        attributes.put(attr, rights);\n+\n+        if (perunBl.isPerunReadOnly()) {\n+            log.debug(\"Loading attributes manager init in readOnly version.\");\n+        }\n+\n+        for (Map.Entry<AttributeDefinition, List<AttributeRights>> entry : attributes.entrySet()) {\n+            AttributeDefinition attribute = entry.getKey();\n+            List<AttributeRights> listOfRights = entry.getValue();\n+            try {\n+                // If attribute definition is not found, catch exception and create this attribute definition\n+                getAttributeDefinition(sess, attribute.getName());\n+            } catch (AttributeNotExistsException e) {\n+                if (perunBl.isPerunReadOnly()) {\n+                    throw new InternalErrorException(\"There is missing required attribute \" + attribute + \" and can't be created because this instance is read only.\");\n+                } else {\n+                    try {\n+                        attribute = createAttribute(sess, attribute, false);\n+                    } catch (AttributeDefinitionExistsException ex) {\n+                        //should not happen\n+                        throw new InternalErrorException(\"Attribute \" + attribute + \" already exists in Perun when attributeInitializer tried to create it.\");\n+                    }\n+                    //set correct id of attribute to rights\n+                    for (AttributeRights listOfRight : listOfRights) {\n+                        listOfRight.setAttributeId(attribute.getId());\n+                    }\n+                    setAttributeRights(sess, listOfRights);\n+                }\n+            }\n+        }\n+\n+        //Prepare all attribute definition from system perun\n+        Set<AttributeDefinition> allAttributesDef = new HashSet<>();\n+        allAttributesDef.addAll(this.getAttributesDefinition(sess));\n+\n+        //Basic state of all maps (record for every existing attributeDefinitions)\n+        for (AttributeDefinition ad : allAttributesDef) {\n+            dependencies.put(ad, new HashSet<>());\n+            strongDependencies.put(ad, new HashSet<>());\n+            inverseDependencies.put(ad, new HashSet<>());\n+            inverseStrongDependencies.put(ad, new HashSet<>());\n+            allDependencies.put(ad, new HashSet<>());\n+        }\n+\n+        log.debug(\"Dependencies and StrongDependencies filling started.\");\n+\n+        //Fill dep and strongDep maps\n+        for (AttributeDefinition ad : allAttributesDef) {\n+            AttributesModuleImplApi module;\n+            List<String> depList;\n+            List<String> strongDepList = new ArrayList<>();\n+            Set<AttributeDefinition> depSet = new HashSet<>();\n+            Set<AttributeDefinition> strongDepSet = new HashSet<>();\n+\n+            //Return null to object if module not exist\n+            Object attributeModule = getAttributesManagerImpl().getAttributesModule(sess, ad);\n+\n+            //If there is any existing module\n+            if (attributeModule != null) {\n+                module = (AttributesModuleImplApi) attributeModule;\n+\n+                depSet = getDependenciesForModule(sess, module);\n+\n+                if (module instanceof VirtualAttributesModuleImplApi) {\n+                    strongDepSet = getStrongDependenciesForModule(sess, (VirtualAttributesModuleImplApi) module);\n+                }\n+            }\n+            dependencies.put(ad, depSet);\n+            strongDependencies.put(ad, strongDepSet);\n+        }\n+\n+        log.debug(\"Dependencies and StrongDependencies was filled successfully.\");\n+\n+        log.debug(\"InverseDependencies and InverseStrongDependencies filling started.\");\n+\n+        //First create inversion map for simple dependencies\n+        inverseDependencies = generateInverseDependencies(dependencies);\n+\n+        //Second create inversion map for strong dependencies\n+        inverseStrongDependencies = generateInverseDependencies(inverseStrongDependencies);\n+\n+        log.debug(\"InverseDependencies and InverseStrongDependencies was filled successfully.\");\n+\n+        log.debug(\"Cycle test of InverseStrongDependencies started.\");\n+        //Test StrDepInveMap on cycles\n+\n+        if (isMapOfAttributesDefCyclic(inverseStrongDependencies)) {\n+            log.error(\"There is cycle in inverseStrongDependencies so map of All attribute will be not created!\");\n+        } else {\n+            log.debug(\"Cycle test of InverseStrongDependencies was successfull.\");\n+            log.debug(\"Filling map of allDependencies started.\");\n+\n+            for (AttributeDefinition key : allDependencies.keySet()) {\n+                Set<AttributeDefinition> dependenciesOfAttribute = findAllAttributeDependencies(key,\n+                        inverseDependencies, inverseStrongDependencies);\n+\n+                allDependencies.put(key, dependenciesOfAttribute);\n+            }\n+\n+            log.debug(\"Map of allDependencies was filled successfully.\");\n+        }\n+\n+        //DEBUG creating file with all dependencies of all attributes (180+- on devel)\n \t\t/*String pathToFile = \"./AllDependencies.log\";\n \t\t\tFile f = new File(pathToFile);\n \t\t\ttry {\n@@ -6981,3550 +7329,3566 @@ public class AttributesManagerBlImpl implements AttributesManagerBl {\n \t\t\t} catch (IOException ex) {\n \t\t\tlog.error(\"Error at saving AllDependencies file.\");\n \t\t\t}*/\n-\t\t//DEBUG end\n-\n-\t\tlog.debug(\"AttributesManagerBlImpl initialize ended.\");\n-\t}\n-\n-\t/**\n-\t * Finds all attributes that depend on given attribute definition.\n-\t * ATTENTION: before using this method, make sure there is no cycle in given dependencies.\n-\t *\n-\t * @param key attribute definition\n-\t * @param inverseDependencies inverse dependencies\n-\t * @param inverseStrongDependencies inverse strong dependencies\n-\t * @return Set of all attribute definitions that depend on given attribute definition\n-\t */\n-\tprivate Set<AttributeDefinition> findAllAttributeDependencies(AttributeDefinition key,\n-\t\t\tMap<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n-\t\t\tMap<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies) {\n-\n-\t\tSet<AttributeDefinition> dependenciesOfAttribute = new HashSet<>();\n-\n-\t\tdependenciesOfAttribute.addAll(inverseStrongDependencies.get(key));\n-\t\tdependenciesOfAttribute.addAll(inverseDependencies.get(key));\n-\t\tList<AttributeDefinition> stackingAttributes = new ArrayList<>(inverseStrongDependencies.get(key));\n-\t\twhile (!stackingAttributes.isEmpty()) {\n-\t\t\tAttributeDefinition firstAttr = stackingAttributes.get(0);\n-\t\t\tstackingAttributes.remove(firstAttr);\n-\t\t\tdependenciesOfAttribute.addAll(inverseStrongDependencies.get(firstAttr));\n-\t\t\tdependenciesOfAttribute.addAll(inverseDependencies.get(firstAttr));\n-\t\t\tstackingAttributes.addAll(inverseStrongDependencies.get(firstAttr));\n-\t\t}\n-\n-\t\treturn dependenciesOfAttribute;\n-\t}\n-\n-\t/**\n-\t * Generates inverse dependencies from given dependencies.\n-\t *\n-\t * @param dependencies input dependencies\n-\t */\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> generateInverseDependencies(Map<AttributeDefinition,\n-\t\t\tSet<AttributeDefinition>> dependencies) {\n-\n-\t\tMap<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new HashMap<>();\n-\t\tdependencies.keySet().forEach(attr -> inverseDependencies.put(attr, new HashSet<>()));\n-\n-\t\tSet<AttributeDefinition> depSet = dependencies.keySet();\n-\t\tdepSet.forEach(ad -> updateInverseDependenciesForAttribute(inverseDependencies, ad, dependencies));\n-\n-\t\treturn inverseDependencies;\n-\t}\n-\n-\t/**\n-\t * Into given inverse dependencies adds data about inverse dependencies for\n-\t * given AttributeDefinition. The inverse dependencies are calculated from\n-\t * given normal dependencies.\n-\t *\n-\t * @param attributeDefinition attribute definition\n-\t * @param dependencies input dependencies\n-\t * @param inverseDependencies inverse dependencies that will be updated\n-\t */\n-\tprivate void updateInverseDependenciesForAttribute(Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n-\t\t                                               AttributeDefinition attributeDefinition,\n-\t\t                                               Map<AttributeDefinition, Set<AttributeDefinition>> dependencies) {\n-\n-\t\tif (!inverseDependencies.containsKey(attributeDefinition)) {\n-\t\t\tinverseDependencies.put(attributeDefinition, new HashSet<>());\n-\t\t}\n-\n-\t\tSet<AttributeDefinition> keySet;\n-\t\tkeySet = dependencies.get(attributeDefinition);\n-\n-\t\tfor (AttributeDefinition keySetItem : keySet) {\n-\t\t\tSet<AttributeDefinition> changeSet;\n-\t\t\tchangeSet = inverseDependencies.get(keySetItem);\n-\t\t\tchangeSet.add(attributeDefinition);\n-\t\t}\n-\t}\n-\n-\n-\t/**\n-\t * Finds all attribute definitions that the given module depends on.\n-\t *\n-\t * @param sess session\n-\t * @param module module\n-\t * @return Set of attribute definitions that the given module depends on.\n-\t * @throws InternalErrorException internal error\n-\t */\n-\tprivate Set<AttributeDefinition> getDependenciesForModule(PerunSession sess, AttributesModuleImplApi module) throws InternalErrorException {\n-\t\tList<String> depList = module.getDependencies();\n-\n-\t\treturn findAttributeDefinitionsForDependencies(sess, depList);\n-\t}\n-\n-\t/**\n-\t * Find modules strong dependencies.\n-\t *\n-\t * For given virtual attribute module find all of its strong dependencies.\n-\t *\n-\t * @param sess session\n-\t * @param module module\n-\t * @return strong dependencies of given module\n-\t * @throws InternalErrorException internal error\n-\t */\n-\tprivate Set<AttributeDefinition> getStrongDependenciesForModule(PerunSession sess, VirtualAttributesModuleImplApi module) throws InternalErrorException {\n-\t\tList<String> strongDepList = module.getStrongDependencies();\n-\n-\t\treturn findAttributeDefinitionsForDependencies(sess, strongDepList);\n-\t}\n-\n-\t/**\n-\t * For given list of dependencies names find theirs attributeDefinitions.\n-\t *\n-\t * @param sess session\n-\t * @param dependenciesNames names of attribute modules for dependencies\n-\t * @return Set of attribute definitions for given dependencies\n-\t * @throws InternalErrorException internal error\n-\t */\n-\tprivate Set<AttributeDefinition> findAttributeDefinitionsForDependencies(PerunSession sess, List<String> dependenciesNames) throws InternalErrorException {\n-\t\tSet<AttributeDefinition> strongDepSet = new HashSet<>();\n-\n-\t\tfor (String s : dependenciesNames) {\n-\t\t\tif (!s.endsWith(\"*\")) {\n-\t\t\t\ttry {\n-\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, s);\n-\t\t\t\t\tstrongDepSet.add(attrDef);\n-\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\tlog.error(\"AttributeDefinition can't be found for dependency {}\", s);\n-\t\t\t\t}\n-\t\t\t\t//If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n-\t\t\t} else {\n-\t\t\t\tList<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length() - 2));\n-\t\t\t\tfor (String variant : allVariantOfDependence) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n-\t\t\t\t\t\tstrongDepSet.add(attrDef);\n-\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\tlog.error(\"For attribute dependency name {} can't be found attributeDefinition.\", variant);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn strongDepSet;\n-\t}\n-\n-\t/**\n-\t * This method try to find cycle between strongDependencies of Attributes modules.\n-\t * If exist at least 1 cycle, return true.\n-\t * If there is no cycle, return false.\n-\t *\n-\t * @return true if cycle exist, false if cycle not exist\n-\t */\n-\tprivate static boolean isMapOfAttributesDefCyclic(Map<AttributeDefinition, Set<AttributeDefinition>> map) {\n-\t\tSet<AttributeDefinition> processed = new HashSet<>();\n-\t\tSet<AttributeDefinition> unprocessed = new HashSet<>();\n-\t\tList<AttributeDefinition> stack = new ArrayList<>();\n-\n-\t\tfor (AttributeDefinition attributeDef : map.keySet()) {\n-\t\t\tstack.add(attributeDef);\n-\t\t\twhile (!stack.isEmpty()) {\n-\t\t\t\tAttributeDefinition firstInStack = stack.get(0);\n-\t\t\t\tif (map.get(firstInStack).contains(attributeDef)) {\n-\t\t\t\t\tlog.error(\"Cycle exist for \" + attributeDef);\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t\tprocessed.add(firstInStack);\n-\t\t\t\tunprocessed.addAll(map.get(firstInStack));\n-\t\t\t\tunprocessed.removeAll(processed);\n-\t\t\t\tstack.remove(firstInStack);\n-\t\t\t\tfor (AttributeDefinition unprocessedAttr : unprocessed) {\n-\t\t\t\t\tif (!stack.contains(unprocessedAttr)) stack.add(unprocessedAttr);\n-\t\t\t\t}\n-\t\t\t\tunprocessed.clear();\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> setWritableTrue(PerunSession sess, List<Attribute> attributes) throws InternalErrorException {\n-\t\tList<Attribute> emptyList = new ArrayList<>();\n-\t\tif (attributes == null) return emptyList;\n-\n-\t\tfor (Attribute a : attributes) {\n-\t\t\tif (a != null) a.setWritable(true);\n-\t\t}\n-\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException {\n-\t\tList<AttributeRights> listOfAr = getAttributesManagerImpl().getAttributeRights(sess, attributeId);\n-\n-\t\t//Do not return VoObsever rights by this method\n-\t\tif (listOfAr != null) {\n-\t\t\tlistOfAr.removeIf(ar -> ar.getRole().equals(Role.VOOBSERVER));\n-\t\t}\n-\n-\t\treturn listOfAr;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributeRights(PerunSession sess, List<AttributeRights> rights) throws InternalErrorException {\n-\t\tfor (AttributeRights right : rights) {\n-\t\t\tgetAttributesManagerImpl().setAttributeRight(sess, right);\n-\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRightsSet(right));\n-\n-\t\t\t//If these rights are for VoAdmin, do the same for VoObserver but only for READ privilegies\n-\t\t\tif (right.getRole().equals(Role.VOADMIN)) {\n-\t\t\t\tList<ActionType> onlyReadActionType = new ArrayList<>();\n-\t\t\t\tif (right.getRights().contains(ActionType.READ)) onlyReadActionType.add(ActionType.READ);\n-\t\t\t\tright.setRights(onlyReadActionType);\n-\t\t\t\tright.setRole(Role.VOOBSERVER);\n-\t\t\t\t//Rights are now set for VoObserver with read privilegies on the same attribute like VoAdmin\n-\t\t\t\tgetAttributesManagerImpl().setAttributeRight(sess, right);\n-\t\t\t\tgetPerunBl().getAuditer().log(sess, new AttributeRightsSet(right));\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getUserVirtualAttributeModule(sess, attribute);\n-\t}\n-\n-\t/**\n-\t * Check if member is assigned on resource. If not, throw MemberResourceMismatchException Exception\n-\t */\n-\tprivate void checkMemberIsFromTheSameVoLikeResource(PerunSession sess, Member member, Resource resource) throws MemberResourceMismatchException, InternalErrorException {\n-\t\tUtils.notNull(sess, \"sess\");\n-\t\tUtils.notNull(member, \"member\");\n-\t\tUtils.notNull(resource, \"resource\");\n-\n-\t\tif (member.getVoId() != resource.getVoId())\n-\t\t\tthrow new MemberResourceMismatchException(\"Member is not from the same vo like Resource: \" + member + \" \" + resource);\n-\t}\n-\n-\t/**\n-\t * Check if group is assigned on resource. If not, throw WrongAttributeAssignment Exception\n-\t */\n-\t@Override\n-\tpublic void checkGroupIsFromTheSameVoLikeResource(PerunSession sess, Group group, Resource resource) throws GroupResourceMismatchException, InternalErrorException {\n-\t\tUtils.notNull(sess, \"sess\");\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(resource, \"resource\");\n-\n-\t\tif (group.getVoId() != resource.getVoId())\n-\t\t\tthrow new GroupResourceMismatchException(\"Group is not from the same vo like Resource: \" + group + \" \" + resource);\n-\t}\n-\n-\t@Override\n-\tpublic Set<Pair<Integer, Integer>> getPerunBeanIdsForUniqueAttributeValue(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\tif(!attribute.isUnique()) {\n-\t\t\tthrow new InternalErrorException(\"attribute definition is not marked as unique: \"+attribute);\n-\t\t}\n-\t\treturn attributesManagerImpl.getPerunBeanIdsForUniqueAttributeValue(sess, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void convertAttributeToUnique(PerunSession session, int attrId) throws InternalErrorException, AttributeNotExistsException, AttributeAlreadyMarkedUniqueException {\n-\t\tAttributeDefinition attrDef = getAttributeDefinitionById(session, attrId);\n-\t\tif(attrDef.isUnique()) throw new AttributeAlreadyMarkedUniqueException(\"Cannot convert attribute because it is already marked as unique\", attrDef);\n-\t\tif(attrDef.getNamespace().startsWith(NS_ENTITYLESS_ATTR)) throw new InternalErrorException(\"entityless atributes cannot be converted to unique\");\n-\t\tif(!Arrays.asList(\"def\",\"opt\").contains(attrDef.getNamespace().split(\":\")[4])) {\n-\t\t\tthrow new InternalErrorException(\"only 'def' and 'opt' attributes can be converted to unique\");\n-\t\t}\n-\t\tlog.info(\"converting attribute {} to unique\",attrDef.getName());\n-\t\tattrDef.setUnique(true);\n-\t\tthis.updateAttributeDefinition(session, attrDef);\n-\t\tlong startTime = System.currentTimeMillis();\n-\t\tattributesManagerImpl.convertAttributeValuesToUnique(session, attrDef);\n-\t\tlong endTime = System.currentTimeMillis();\n-\t\tlog.debug(\"Attribute {} was converted to unique in {} ms\",attrDef.getName(),(endTime-startTime));\n-\t}\n-\n-\t@Override\n-\tpublic String getAttributeModulesDependenciesGraphAsString(PerunSession session, GraphTextFormat format) throws InternalErrorException {\n-\t\tGraph graph = getAttributeModulesDependenciesGraph(session);\n-\n-\t\treturn format.getSerializer().generateTextFileContent(graph);\n-\t}\n-\n-\t@Override\n-\tpublic String getAttributeModulesDependenciesGraphAsString(PerunSession session, GraphTextFormat format, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\t\tNodeGenerator<AttributeDefinition> nodeGenerator = new ModuleDependencyNodeGenerator();\n-\t\tGraph graph = getAttributeModulesDependenciesGraph(session, nodeGenerator);\n-\n-\t\tSet<Node> componentNodes = graph.getComponentNodes(nodeGenerator.generate(attributeDefinition, 0L));\n-\n-\t\tSet<Node> notUsedNodes = new HashSet<>(graph.getNodes().keySet());\n-\t\tnotUsedNodes.removeAll(componentNodes);\n-\n-\t\tgraph.removeNodes(notUsedNodes);\n-\n-\t\tGraphSerializer graphSerializer = format.getSerializer();\n-\n-\t\treturn graphSerializer.generateTextFileContent(graph);\n-\t}\n-\n-\t@Override\n-\tpublic Graphviz getAttributeModulesDependenciesGraphAsImage(PerunSession session) throws InternalErrorException {\n-\n-\t\tString graphText = getAttributeModulesDependenciesGraphAsString(session, GraphTextFormat.DOT);\n-\n-\t\treturn convertDotStringGraph(graphText);\n-\t}\n-\n-\t@Override\n-\tpublic Graphviz getAttributeModulesDependenciesGraphAsImage(PerunSession session, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\n-\t\tString graphText = getAttributeModulesDependenciesGraphAsString(session, GraphTextFormat.DOT, attributeDefinition);\n-\n-\t\treturn convertDotStringGraph(graphText);\n-\t}\n-\n-\t@Override\n-\tpublic Graph getAttributeModulesDependenciesGraph(PerunSession session) throws InternalErrorException {\n-\t\treturn getAttributeModulesDependenciesGraph(session, new ModuleDependencyNodeGenerator());\n-\t}\n-\n-\tprivate Graph getAttributeModulesDependenciesGraph(PerunSession session, NodeGenerator<AttributeDefinition> nodeGenerator) {\n-\t\tGraphDefinition<AttributeDefinition> graphDefinition = new GraphDefinition<AttributeDefinition>()\n-\t\t\t\t.addEntitiesData(strongDependencies).withEdgeType(GraphEdge.Type.BOLD)\n-\t\t\t\t.addEntitiesData(dependencies).withEdgeType(GraphEdge.Type.DASHED);\n-\n-\t\treturn new NoDuplicatedEdgesGraphGenerator().generate(nodeGenerator, graphDefinition);\n-\t}\n-\n-\t@Override\n-\tpublic Map<AttributeDefinition, Set<AttributeDefinition>> getAllDependencies() {\n-\t\treturn allDependencies;\n-\t}\n-\n-\t/**\n-\t * Converts DOT String graph representation to Graphviz.\n-\t *\n-\t * @param graphString graph string\n-\t * @return converted graph\n-\t * @throws InternalErrorException internal error\n-\t */\n-\tprivate Graphviz convertDotStringGraph(String graphString) throws InternalErrorException {\n-\n-\t\tMutableGraph graph;\n-\n-\t\ttry {\n-\t\t\tgraph = Parser.read(graphString);\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new InternalErrorException(\"Generated invalid format of DOT graph.\");\n-\t\t}\n-\n-\t\treturn Graphviz.fromGraph(graph);\n-\t}\n-\n-\t// ------------ PRIVATE METHODS FOR ATTRIBUTE DEPENDENCIES LOGIC --------------\n-\t// These methods get one or two Perun Beans and return list of richAttributes\n-\t// of specific type defined by name of method which actually exists in Perun\n-\t// and they are connected to the Perun Beans in parameters. If there is any\n-\t// possibility to filter them by members, use only allowed members connections.\n-\t// If member is not allowed (is in state Disabled or Invalid), remove\n-\t// all objects connected to him from structure for getting attributes.\n-\t//\n-\t// Example: We have USER and we want all GROUP attributes connected to this\n-\t// User. So we find all members connected to this user and only for those who\n-\t// are allowed (NOT have status DISABLED or INVALID we find all connected groups\n-\t// and then we find all group attributes for these groups and return them\n-\t// as RichAttributes.\n-\t// ----------------------------------------------------------------------------\n-\n-\t// ---------------------------------VO-----------------------------------------\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given User.\n-\t * That means find all Vos where given user has allowed member.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of Rich attributes for given user\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given member.\n-\t * If member is allowed returns its Vo's Rich attribute.\n-\t * Otherwise no attributes are returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tVo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\t\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, vo, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given group.\n-\t * Finds directly the Vo where the group belongs.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, VoNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tVo vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, vo, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given resource.\n-\t * Finds the Vo that the resource is assigned to.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return list of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, VoNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tVo vo = getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId());\n-\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, vo, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given Vo.\n-\t * Find attributes for given Vo directly.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      virtual organization\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(vo, null, attribute));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given Facility.\n-\t * Finds allowed Vos for given facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, voElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given host.\n-\t * Finds facility for given host and gets allowed Vos for the facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAtrributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given userExtSource. That means find user for given userExtSource and\n-\t * find all Vos where given user has allowed member.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource user external source\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Vo RichAttributes for given user and facility.\n-\t * That means:\n-\t * 1. Finds all members for given user. For each member, if is allowed, find all its groups.\n-\t * 2. For given facility find all its resource. For each resource finds assigned groups.\n-\t * 3. Then compare these groups and keeps only those that were in both lists.\n-\t * 4. For those groups finds theirs Vos and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromUser = new ArrayList<>();\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tgroupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tList<Group> groupsFromFacility = new ArrayList<>();\n-\t\tfor (Resource resourceElement : resourcesFromFacility) {\n-\t\t\tgroupsFromFacility.addAll(perunBl.getResourcesManagerBl().getAssignedGroups(sess, resourceElement));\n-\t\t}\n-\t\tgroupsFromUser.retainAll(groupsFromFacility);\n-\t\tgroupsFromUser = new ArrayList<>(new HashSet<>(groupsFromUser));\n-\n-\t\tList<Vo> vos = new ArrayList<>();\n-\t\tfor (Group groupElement : groupsFromUser) {\n-\t\t\tvos.add(getPerunBl().getGroupsManagerBl().getVo(sess, groupElement));\n-\t\t}\n-\n-\t\tvos = new ArrayList<>(new HashSet<>(vos));\n-\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tlistOfRichAttributes.addAll(getVoAttributes(sess, voElement, attrDef));\n-\t\t}\n-\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all Vo RichAttributes.\n-\t * Finds attributes for all Vos.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getVoAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(voElement, null, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------USER----------------------------------------\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given user.\n-\t * Finds attributes for given user directly.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(user, null, attribute));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given member.\n-\t * Checks if given member is allowed. If so, gets its user and return its attribute.\n-\t * If member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, user, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given member.\n-\t * Finds all members for given group. For each allowed member gets its user. Returns attributes for those users.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tfor (Member memberElement : members) {\n-\t\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given resource.\n-\t * Gets allowed users for given resource. Returns attributes for those users.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\tfor (User userElement : usersFromResource) {\n-\t\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, userElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given vo.\n-\t * Find all members of given vo. For each allowed member gets its user and returns rich attributes for those users.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      vo\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\tfor (Member memberElement : members) {\n-\t\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given facility.\n-\t * Finds allowed users for given facility. For each of them returns rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\tfor (User userElement : usersFromFacility) {\n-\t\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, userElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given host.\n-\t * For given host finds its facility. Then for this facility finds allowed users and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given userExtSource.\n-\t * For given userExtSource finds its user. Then for this user gets its attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource user external source\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant User RichAttributes for given user and facility.\n-\t * That means:\n-\t * 1. Finds all allowed facilities for given user.\n-\t * 2. Checks if those facilities contains given facility.\n-\t * 3. If so, returns the user's rich attribute, an empty list otherwise.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tif (facilitiesFromUser.contains(facility)) {\n-\t\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, user, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns RichAttributes for all users.\n-\t * Finds all users. Returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getUserAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<User> allUsers = getPerunBl().getUsersManagerBl().getUsers(sess);\n-\t\tfor (User userElement : allUsers) {\n-\t\t\tlistOfRichAttributes.addAll(getUserAttributes(sess, userElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------MEMBER--------------------------------------\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given user.\n-\t * Finds all members for given user. For those members that are allowed returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given member.\n-\t * Checks if given member is allowed. If so, returns its attribute.\n-\t * Otherwise an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(member, null, attribute));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given group.\n-\t * Finds all members for given group. For each member that is allowed returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given resource.\n-\t * Finds allowed members who can access the resource.\n-\t * For those members that are allowed returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\tfor (Member memberElement : membersFromResource) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given Vo.\n-\t * Gets all members of given Vo. For each allowed member returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      virtual organization\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\tfor (Member memberElement : membersFromVo) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given facility.\n-\t * Finds members that can access the given facility. For each allowed member returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\tfor (Member memberElement : membersFromFacility) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given host.\n-\t * Finds facility for given host. Finds all members who can access the facility.\n-\t * For each allowed member returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given userExtSource.\n-\t * For given userExtSource finds user. Finds all members for the user.\n-\t * For each allowed member returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource user external source\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Member RichAttributes for given user and facility.\n-\t * That means:\n-\t * 1. Finds members for given user.\n-\t * 2. Finds members for given facility.\n-\t * 3. Keeps those that are in both lists.\n-\t * 4. For each of them return its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\tmembersFromUser.retainAll(membersFromFacility);\n-\t\tmembersFromUser = new ArrayList<>(new HashSet<>(membersFromUser));\n-\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns RichAttributes for all allowed members.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session.\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getMemberAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberAttributes(sess, voElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------GROUP---------------------------------------\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given user.\n-\t * Finds members for given user. For each allowed member returns its group's rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : members) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given member.\n-\t * Checks if given member is allowed. If so, finds all groups for it. For each group returns its rich attribute.\n-\t * If member is not allowed return an empty List.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\tfor (Group groupElement : groupsFromMember) {\n-\t\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given group.\n-\t * Finds rich attribute for given group directly.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(group, null, attribute));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given resource.\n-\t * Finds groups assigned for given resource. Returns rich attributes for those groups.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tfor (Group groupElement : groupsFromResource) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given Vo.\n-\t * Finds groups that belongs in given Vo. For each group return its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      virtual organization\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groups = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n-\t\tfor (Group groupElement : groups) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given facility.\n-\t * Finds groups that are assigned to given facility. For each group returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\tfor (Group groupElement : groupsFromFacility) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given host.\n-\t * Finds facility for given host. Finds groups assigned to this host. For each group returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given userExtSource.\n-\t * Finds user for given userExtSource. Finds members for this user.\n-\t * For each allowed member returns its group's rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource user external source\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given member and group.\n-\t * Checks if the member is allowed. If so, returns rich attribute for given group.\n-\t * Otherwise an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tlistOfRichAttributes = getGroupAttributes(sess, group, attrDef);\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given member and resource.\n-\t * That means:\n-\t * 1. Check if member is allowed, if is not, returns an empty list.\n-\t * 2. Finds assigned groups for given resource.\n-\t * 3. Finds all groups for given member.\n-\t * 4. Keeps those groups that are in both lists.\n-\t * 5. Returns rich attributes for those groups.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param member   member\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\tgroupsFromResource.retainAll(groupsFromMember);\n-\t\t\tgroupsFromResource = new ArrayList<>(new HashSet<>(groupsFromResource));\n-\t\t\tfor (Group groupElement : groupsFromResource) {\n-\t\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Group RichAttributes for given user and facility.\n-\t * That means:\n-\t * 1. Finds all members for given user.\n-\t * 2. For each member that is allowed, find its group.\n-\t * 3. Finds group assigned to given facility.\n-\t * 4. Keeps groups that are in both list.\n-\t * 5. For those groups returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tSet<Group> groupsFromMembers = new HashSet<>();\n-\t\tfor (Member memberElement : members) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\tgroupsFromMembers.retainAll(getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility));\n-\t\tfor (Group groupElement : groupsFromMembers) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns rich attributes for all groups.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return list of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getGroupAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupAttributes(sess, voElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------RESOURCE------------------------------------\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given user.\n-\t * Finds members for given user. For each allowed member finds resources the member can access.\n-\t * For each of those resources returns theirs rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return list of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : members) {\n-\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given member.\n-\t * If member is not allowed returns an empty list.\n-\t * Otherwise finds resources the member can access.\n-\t * Then returns rich attributes for those resources.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return list of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\tfor (Resource resourceElement : resourcesFromMember) {\n-\t\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given group.\n-\t * Finds assigned resources for given group. For those resources returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return list of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given resource.\n-\t * Finds rich attribute for the given resource.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     sesion\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, null, attribute));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given vo.\n-\t * Finds resources assigned to given Vo. For each returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      virtual organization\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\tfor (Resource resourceElement : resourcesFromVo) {\n-\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given facility.\n-\t * Finds assigned resources to the given facility. Returns rich attributes of these resources.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tfor (Resource resourceElement : resourcesFromFacility) {\n-\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given host.\n-\t * Finds the given host's facility. For this facility finds assigned resources.\n-\t * For each of those resources returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given userExtSource.\n-\t * Finds user for given userExtSource. Finds members for the user.\n-\t * For each allowed member finds resources the member can access.\n-\t * For each of those resources returns theirs rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource user external source\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given member and group.\n-\t * 1. Checks if member is allowed, if is not returns an empty list.\n-\t * 2. Otherwise finds assigned resources to given group.\n-\t * 3. For those resources returns theirs rich attributes\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Resource> resourcesFromGroup = new ArrayList<>(new HashSet<>(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group)));\n-\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given member and resource.\n-\t * 1. Checks if member is allowed, if not so, an empty list is returned\n-\t * 2. Otherwise returns rich attribute for given resource\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param member   member\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, null, attribute));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Resource RichAttributes for given user and facility.\n-\t * 1. Finds members for given user\n-\t * 2. For each allowed member finds its allowed resources\n-\t * 3. Finds assigned resources to given facility\n-\t * 4. Keeps only resources that are in both lists\n-\t * 5. For those resources returns theirs rich attributes\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tList<Resource> resourcesFromUser = new ArrayList<>();\n-\t\tfor (Member memberElement : members) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tresourcesFromUser.retainAll(resourcesFromFacility);\n-\t\tresourcesFromUser = new ArrayList<>(new HashSet<>(resourcesFromUser));\n-\t\tfor (Resource resourceElement : resourcesFromUser) {\n-\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Finds rich attributes for all resources.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getResourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tlistOfRichAttributes.addAll(getResourceAttributes(sess, voElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------FACILITY------------------------------------\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given user.\n-\t * Finds facilities that the given user can access.\n-\t * For those facilities are returned rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, facilityElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given member.\n-\t * 1. Checks if given member is allowed, if not, an empty list is returned.\n-\t * 2. Otherwise finds groups for given member.\n-\t * 3. For those groups finds assigned resources.\n-\t * 4. Finds facility for each resource.\n-\t * 5. Returns rich attributes for those facilities.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\tfor (Group groupElement : groupsForMember) {\n-\t\t\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, groupElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given group.\n-\t * 1. For the given group finds assigned resources.\n-\t * 2. Finds facility for each resource.\n-\t * 3. Returns rich attributes for those facilities.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given resource.\n-\t * Finds facility that the resource belongs to and return its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given vo.\n-\t * Finds resources assigned to given vo.\n-\t * For each resource finds facility it belongs to.\n-\t * Returns rich attributes for these resources.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      virtual organization\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given Facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(facility, null, attribute));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given host.\n-\t * Finds the facility the given host is assigned to.\n-\t * For this facility returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given user.\n-\t * Finds user for given userExtSource.\n-\t * Finds facilities that the user can access.\n-\t * For those facilities are returned rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource user external source\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given member and group.\n-\t * 1. Checks if the member is allowed, if not, empty list is returned\n-\t * 2. Otherwise for the given group finds assigned resources.\n-\t * 3. Finds facility for each resource.\n-\t * 4. Returns rich attributes for those facilities.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tlistOfRichAttributes = getFacilityAttributes(sess, group, attrDef);\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given member and resource.\n-\t * 1. Checks if the given member is allowed. If not, an empty list is returned.\n-\t * 2. Otherwise finds facility that the resource belongs to and returns its rich attribute.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param member   member\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, resource, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Facility RichAttributes for given user and facility\n-\t * 1. Finds facilities the given user can access.\n-\t * 2. Checks if those facilities contains the given one. If they do, return this facility's rich attribute.\n-\t * 3. Otherwise an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tif (facilitiesFromUser.contains(facility)) {\n-\t\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, facility, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Finds all facilities rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getFacilityAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tlistOfRichAttributes.addAll(getFacilityAttributes(sess, facilityElement, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------HOST----------------------------------------\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given user.\n-\t * Finds facilities where the given user is allowed.\n-\t * For each of those facilities finds theirs hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, facilityElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given member.\n-\t * If member is not allowed returns an empty list.\n-\t * Otherwise finds groups for the given member.\n-\t * For those groups finds assigned resources.\n-\t * For each of those resources finds theirs facilities.\n-\t * For each of those facilities finds theirs hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (perunBl.getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\tfor (Group groupElement : groupsForMember) {\n-\t\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, groupElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given group.\n-\t * For the given group finds assigned resources.\n-\t * For each of those resources finds theirs facilities.\n-\t * For each of those facilities finds theirs hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given resource.\n-\t * For the given resource finds its facility.\n-\t * For the facility finds its hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resources\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given vo.\n-\t * Finds assigned resources to the given vo.\n-\t * For each of those resources finds theirs facilities.\n-\t * For each of those facilities finds theirs hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      virtual organization\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given facility.\n-\t * For the given facility finds its hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\tfor (Host hostElement : hostsFromFacility) {\n-\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, hostElement, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given host.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, host, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(host, null, attribute));\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given userExtSource.\n-\t * Finds user for the given userExtSource.\n-\t * Finds facilities where the user is allowed.\n-\t * For each of those facilities finds theirs hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource userExtSource\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given member and group.\n-\t * If the member is not allowed returns an empty list.\n-\t * Otherwise, for the given group finds assigned resources.\n-\t * For each of those resources finds theirs facilities.\n-\t * For each of those facilities finds theirs hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, group, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given member and resource.\n-\t * For the given resource finds its facility.\n-\t * For the facility finds its hosts.\n-\t * For each of those host returns its rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resources\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tlistOfRichAttributes = getHostAttributes(sess, resource, attrDef);\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant Host RichAttributes for given user and facility.\n-\t * Checks if user can access the facility. If not, an empty list is returned.\n-\t * Otherwise, gets hosts from the given facility and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facility)) {\n-\t\t\tList<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\tfor (Host hostElement : hostsFromFacility) {\n-\t\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, hostElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns rich attributes for all hosts.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttributes\n-\t */\n-\tprivate List<RichAttribute> getHostAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tlistOfRichAttributes.addAll(getHostAttributes(sess, facilityElement, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------USER-EXT-SOURCE-------------------------------\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given user.\n-\t * Finds all user's userExtSources and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n-\t\tfor (UserExtSource userExtSourceElement : userExtSources) {\n-\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, userExtSourceElement, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given member.\n-\t * Checks if the given member is allowed. If not, an empty list is returned.\n-\t * Otherwise, finds all its user's userExtSources and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, user, attrDef));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given group.\n-\t * Finds all members for given group.\n-\t * For all allowed members finds theirs user's userExtSources and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> groupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tfor (Member memberElement : groupMembers) {\n-\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given resource.\n-\t * Finds allowed members for the given resource.\n-\t * Finds theirs user's userExtSources and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> resourceMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\tfor (Member memberElement : resourceMembers) {\n-\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given vo.\n-\t * Finds allowed members for the given vo.\n-\t * Finds theirs user's userExtSources and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      vo\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> voMembers = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\tfor (Member memberElement : voMembers) {\n-\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given facility.\n-\t * Finds allowed members for the given facility.\n-\t * Finds theirs user's userExtSources and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> facilityMembers = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\tfor (Member memberElement : facilityMembers) {\n-\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given host.\n-\t * Finds allowed members for the given host's facility.\n-\t * Finds theirs user's userExtSources and returns theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, facility, attrDef));\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given userExtSource.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource userExtSource\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userExtSource, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(userExtSource, null, attribute));\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserExtSource RichAttributes for given user and facility.\n-\t * Checks if the given user can access the given facility. If not, an empty list is returned.\n-\t * Otherwise, finds all given user's userExtSources and return theirs rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\tif (usersFromFacility.contains(user)) {\n-\t\t\tList<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n-\t\t\tfor (UserExtSource userExtSourceElement : userExtSources) {\n-\t\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, userExtSourceElement, attrDef));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns RichAttributes for all userExtSource.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tlistOfRichAttributes.addAll(getUserExtSourceAttributes(sess, facilityElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------GROUP-RESOURCE-------------------------------\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given user.\n-\t * That means, returns all GroupResource rich attributes for those groups where the given user has at least one\n-\t * allowed member and for those resources that the given user can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : members) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupResourceAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given member.\n-\t * That means, returns all GroupResource rich attributes for those groups that the given member is assigned to\n-\t * and for those resources that the given member can access.\n-\t * If the given member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\tList<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\tfor (Resource resourceElement : resourcesFromMember) {\n-\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\tgroupsFromResourceElement.retainAll(groupsFromMember);\n-\t\t\t\tgroupsFromResourceElement = new ArrayList<>(new HashSet<>(groupsFromResourceElement));\n-\t\t\t\tfor (Group groupElement : groupsFromResourceElement) {\n-\t\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, groupElement, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given group.\n-\t * That means, returns all GroupResource rich attributes for the given group and resources that the given group\n-\t * can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, group, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given resource.\n-\t * That means, returns all GroupResource rich attributes for the given resource and those groups that can access\n-\t * this resource.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tfor (Group groupElement : groupsFromResource) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, groupElement, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given vo.\n-\t * That means, returns all GroupResource rich attributes for those resources, that can be accessed by the given vo.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      vo\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given facility.\n-\t * That means, returns all GroupResource rich attributes for those resources, that are located on the given facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tfor (Resource resourceElement : resourcesFromFacility) {\n-\t\t\tlistOfRichAttributes.addAll(getGroupResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given facility.\n-\t * That means, returns all GroupResource rich attributes for those resources, that are located on the facility\n-\t * with the given host.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    facility\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getGroupResourceAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given userExtSource.\n-\t * That means, returns all GroupResource rich attributes for groups, where user with given userExtSource has\n-\t * at least one allowed member and for those resources, that can the user access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource userExtSource\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getGroupResourceAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given group and resource.\n-\t * That means, returns all GroupResource rich attributes for the given group and resource.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param group    group\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Group group, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, group, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, group, attribute));\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given group and member.\n-\t * That means, returns all GroupResource rich attributes for the given group and those resources, that can the\n-\t * given member access. If the given member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\t// there is no need to get Resources from Member because Members are only in those groups from which we already took Resources\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tlistOfRichAttributes = getGroupResourceAttributes(sess, group, attrDef);\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given resource and member.\n-\t * That means, returns all GroupResource rich attributes for the given resource and those groups, that can the\n-\t * given member access and that can access the given resource.\n-\t * If the given member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param member   member\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\tgroupsFromResource.retainAll(groupsFromMember);\n-\t\t\tgroupsFromResource = new ArrayList<>(new HashSet<>(groupsFromResource));\n-\t\t\tfor (Group groupElement : groupsFromResource) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, groupElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant GroupResource RichAttributes for given user and facility.\n-\t * That means, returns all GroupResource rich attributes for those groups, where has the given user at least\n-\t * one allowed member, and for those resources, that can be accessed via this groups and are located on the\n-\t * given facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\t//Groups from User\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tList<Group> groupsFromUser = new ArrayList<>();\n-\t\tfor (Member memberElement : members) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tgroupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\t//Retain of Groups from facility\n-\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\tgroupsFromFacility.retainAll(groupsFromUser);\n-\t\t//Resources from user\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tList<Resource> resourcesFromUser = new ArrayList<>();\n-\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\t//Resource from facility\n-\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t//Retain of Resources\n-\t\tresourcesFromFacility.retainAll(resourcesFromUser);\n-\t\t//All possibilities\n-\t\tresourcesFromFacility = new ArrayList<>(new HashSet<>(resourcesFromFacility));\n-\t\tfor (Resource resourceElement : resourcesFromFacility) {\n-\t\t\tList<Group> groupsForResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\tgroupsForResourceElement.retainAll(groupsFromFacility);\n-\t\t\tgroupsForResourceElement = new ArrayList<>(new HashSet<>(groupsForResourceElement));\n-\t\t\tfor (Group groupElement : groupsForResourceElement) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, groupElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all GroupResource RichAttributes.\n-\t * That means, returns all GroupResource rich attributes with all groups and those resources, that can be accessed\n-\t * via these groups.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getGroupResourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\tList<Resource> resources = new ArrayList<>();\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tresources.addAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facilityElement));\n-\t\t}\n-\t\tresources = new ArrayList<>(new HashSet<>(resources));\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\tfor (Group groupElement : groupsFromResourceElement) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, groupElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------MEMBER-GROUP-------------------------------\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given user.\n-\t * That means, returns all MemberGroup rich attributes for those members, who belong to the given user and are allowed,\n-\t * and for those groups that those members can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberGroupAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given member.\n-\t * That means, returns all MemberGroup rich attributes for the given member, and for groups that can this member access.\n-\t * If the given member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Group> groupsFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\tfor (Group groupElement : groupsFromMembers) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(member, groupElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given group.\n-\t * That means, returns all MemberGroup rich attributes for the given group and those members who belong to this group\n-\t * and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromGroups = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tfor (Member memberElement : membersFromGroups) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(memberElement, group, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given resource.\n-\t * That means, returns all MemberGroup rich attributes for groups that can access the given resource and for members\n-\t * that can access those groups and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tfor (Group groupElement : groupsFromResources) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberGroupAttributes(sess, groupElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given vo.\n-\t * That means, returns all MemberGroup rich attributes for groups from the given vo and for those members, who\n-\t * belong to these groups and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      vo\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n-\t\tfor (Group groupElement : groupsFromVo) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberGroupAttributes(sess, groupElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given facility.\n-\t * That means, returns all MemberGroup rich attributes for groups that can access the given facility and for members\n-\t * that can access these groups and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\tfor (Group groupElement : groupsFromFacility) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberGroupAttributes(sess, groupElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given host.\n-\t * That means, returns all MemberGroup rich attributes for groups that can access the given host's facility and\n-\t * for members that can access these groups and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getMemberGroupAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given userExtSource.\n-\t * That means, returns all MemberGroup rich attributes for those members, who belong to the given userExtSource's user\n-\t * and are allowed, and for those groups that those members can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource userExtSource\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getMemberGroupAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given member and group.\n-\t * That means, returns all MemberGroup rich attributes for the given member and group.\n-\t * If the member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, group, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(member, group, attribute));\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given member and resource.\n-\t * That means, returns all MemberGroup rich attributes for the given member and groups that can access the given resource.\n-\t * If the member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param member   member\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\t//If member is not allowed, skip whole process\n-\t\tif (!getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) return listOfRichAttributes;\n-\t\tList<Group> groupFromMembers = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tgroupFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t}\n-\t\tList<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tgroupsFromResources.retainAll(groupFromMembers);\n-\t\tgroupsFromResources = new ArrayList<>(new HashSet<>(groupsFromResources));\n-\t\tfor (Group groupElement : groupsFromResources) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(member, groupElement, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberGroup RichAttributes for given user and facility.\n-\t * That means, returns all MemberGroup rich attributes for members that belong to the given user and are allowed\n-\t * and those groups that can access the given facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\t// get all groups from facility\n-\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t// get all groups from user\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tSet<Group> groupsFromMembers = new HashSet<>();\n-\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t}\n-\t\t// retain of groups\n-\t\tgroupsFromMembers.retainAll(groupsFromFacility);\n-\t\tList<Group> retainedGroups = new ArrayList<>(groupsFromMembers);\n-\t\t// all possible groups\n-\t\tfor (Group groupElement : retainedGroups) {\n-\t\t\t// get all members for 'groupElement' variable\n-\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, groupElement);\n-\t\t\tmembersFromGroup.retainAll(membersFromUser);\n-\t\t\t// all possibilities\n-\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(memberElement, groupElement, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all MemberGroup RichAttributes.\n-\t * That means, returns all MemberGroup rich attributes for all members who are allowed and all groups that can those\n-\t * members access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberGroupAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\tList<Group> groupsFromVo = new ArrayList<>();\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tgroupsFromVo.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n-\t\t}\n-\t\tgroupsFromVo = new ArrayList<>(new HashSet<>(groupsFromVo));\n-\t\tfor (Group groupElement : groupsFromVo) {\n-\t\t\t// get all members for 'groupElement' variable\n-\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, groupElement);\n-\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(memberElement, groupElement, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------MEMBER-RESOURCE-------------------------------\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given user.\n-\t * That means, returns all MemberResource rich attributes for those members, who belong to the given user and are allowed,\n-\t * and for those resources that can those members access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member memberElement : members) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberResourceAttributes(sess, memberElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given member.\n-\t * That means, returns all MemberResource rich attributes for the given member and those resources that can those\n-\t * members access.\n-\t * If the given member is not allowed, an empty list is returned.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\tfor (Resource resourceElement : resources) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, resourceElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, member, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given group.\n-\t * That means, returns all MemberResource rich attributes for allowed members from the given group and for the resources\n-\t * that can those members access via this group.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\tList<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\tmembersForResourceElement.retainAll(membersFromGroup);\n-\t\t\tmembersForResourceElement = new ArrayList<>(new HashSet<>(membersForResourceElement));\n-\t\t\tfor (Member memberElement : membersForResourceElement) {\n-\t\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, memberElement, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given resource.\n-\t * That means, returns all MemberResource rich attributes for the given resource and for those members that can\n-\t * access the given resource and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\tfor (Member memberElement : members) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resource, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, memberElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given vo.\n-\t * That means, returns all MemberResource rich attributes for resources that belongs to the given vo and for members\n-\t * that can access those resource and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      vo\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given facility.\n-\t * That means, returns all MemberResource rich attributes for resources that belongs to the given facility and for\n-\t * members who can access those resources and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tlistOfRichAttributes.addAll(getMemberResourceAttributes(sess, resourceElement, attrDef));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given host.\n-\t * That means, returns all MemberResource rich attributes for resources that belongs to the given host's facility\n-\t * and for members who can access those resources and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getMemberResourceAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given userExtSource.\n-\t * That means, returns all MemberResource rich attributes for members of given userExtSource's user that are allowed\n-\t * and for those resources that those members can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource userExtSource\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tlistOfRichAttributes.addAll(getMemberResourceAttributes(sess, user, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given group and resource.\n-\t * That means, returns all MemberResource rich attributes for the given resource and groups that can access this\n-\t * resource via theirs allowed users.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param group    group\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Group group, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\tmembersFromGroup.retainAll(membersFromResource);\n-\t\tmembersFromGroup = new ArrayList<>(new HashSet<>(membersFromGroup));\n-\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resource, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, memberElement, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given group and member.\n-\t * That means, returns all MemberResource rich attributes for the given member and resources that can this member\n-\t * access via the given group.\n-\t * If the given member is not allowed, returns an empty list.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\t//we can take everything from group, because member should be assigned to this group already\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, resourceElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, member, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given resource and member.\n-\t * That means, returns all MemberResource rich attributes for the given member and resource.\n-\t * If the given member is not allowed, returns an empty list.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param member   member\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, resource, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resource, member, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant MemberResource RichAttributes for given user and facility.\n-\t * That means, returns all MemberResource rich attributes for the given user's members who are allowed and for\n-\t * resources that can those members access and are located on the given facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\tmembersFromUser.retainAll(membersFromFacility);\n-\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tList<Resource> resourcesFromUser = getPerunBl().getUsersManagerBl().getAllowedResources(sess, user);\n-\t\tresourcesFromUser.retainAll(resourcesFromFacility);\n-\t\tresourcesFromUser = new ArrayList<>(new HashSet<>(resourcesFromUser));\n-\t\tfor (Resource resourceElement : resourcesFromUser) {\n-\t\t\tList<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\tmembersForResourceElement.retainAll(membersFromUser);\n-\t\t\tmembersForResourceElement = new ArrayList<>(new HashSet<>(membersForResourceElement));\n-\t\t\tfor (Member memberElement : membersForResourceElement) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resourceElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, memberElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all MemberResource RichAttributes.\n-\t * That means, returns all MemberResource RichAttributes for all members who are allowed and all resources they\n-\t * can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getMemberResourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\tList<Resource> resources = new ArrayList<>();\n-\t\tfor (Vo voElement : vos) {\n-\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n-\t\t}\n-\t\tresources = new ArrayList<>(new HashSet<>(resources));\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\tfor (Member memberElement : membersFromResource) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resourceElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(resourceElement, memberElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------USER-FACILITY-------------------------------\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given user.\n-\t * That means, returns all UserFacility rich attributes for the given user and for facilities it can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param user    user\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facilityElement, user, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given member.\n-\t * That means, returns all UserFacility rich attributes for the facilities the given member can access and for its user.\n-\t * If the given member is not allowed, returns an empty list\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\tList<Facility> facilities = new ArrayList<>();\n-\t\t\tfor (Resource resourceElement : memberResources) {\n-\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t}\n-\t\t\tfacilities = new ArrayList<>(new HashSet<>(facilities));\n-\t\t\tList<Facility> userAllowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\tfor (Facility facilityElement : facilities) {\n-\t\t\t\tif (userAllowedFacilities.contains(facilityElement)) {\n-\t\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facilityElement, user, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given group.\n-\t * That means, returns all UserFacility rich attributes for the facilities that can access members from the given\n-\t * group and that are allowed and for users from these members.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tList<User> users = new ArrayList<>();\n-\t\tfor (Member memberElement : members) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tusers.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tList<Facility> facilities = new ArrayList<>();\n-\t\tfor (Resource resourceElement : resources) {\n-\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t}\n-\t\tusers = new ArrayList<>(new HashSet<>(users));\n-\t\tfor (User userElement : users) {\n-\t\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n-\t\t\tfacilities.retainAll(facilitiesFromUser);\n-\t\t\tfacilities = new ArrayList<>(new HashSet<>(facilities));\n-\t\t\tfor (Facility facilityElement : facilities) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facilityElement, userElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given resource.\n-\t * That means, returns all UserFacility rich attributes for the facility from the given resource and for members\n-\t * that can access this resource and are allowed.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\tfor (User userElement : usersFromResource) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facility, userElement, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given vo.\n-\t * That means, returns all UserFacility rich attributes for the users who has at least one allowed member in the\n-\t * given Vo and for the facilities that can those users access via a group in this Vo.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param vo      vo\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getGroups(sess, vo);\n-\t\tfor (Group groupElement : groupsFromVo) {\n-\t\t\tList<Facility> groupFacilities = getPerunBl().getFacilitiesManagerBl().getAssignedFacilities(sess, groupElement);\n-\t\t\tList<Member> groupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, groupElement);\n-\t\t\tList<Member> allowedMembers = new ArrayList<>();\n-\t\t\tfor (Member memberElement : groupMembers) {\n-\t\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\t\tallowedMembers.add(memberElement);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tList<User> groupUsers = new ArrayList<>();\n-\t\t\tfor (Member memberElement : allowedMembers) {\n-\t\t\t\tgroupUsers.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t\tfor (Facility facilityElement : groupFacilities) {\n-\t\t\t\tfor (User userElement : groupUsers) {\n-\t\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facilityElement, userElement, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given facility.\n-\t * That means, returns all UserFacility rich attributes for the given facility and users that can access it.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\tfor (User userElement : users) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facility, userElement, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given host.\n-\t * That means, returns all UserFacility rich attributes for the given host's facility and users that can access it.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param host    host\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\tlistOfRichAttributes.addAll(getUserFacilityAttributes(sess, facility, attrDef));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given userExtSource.\n-\t * That means, returns all UserFacility rich attributes for the given userExtSource's user and for facilities it can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess          session\n-\t * @param userExtSource userExtSource\n-\t * @param attrDef       type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facilityElement, user, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given group and resource.\n-\t * That means, returns all UserFacility rich attributes for users who has at least one allowed member in the given group\n-\t * and for facilities that those users can access via the given group and via the given resource.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param group    group\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Group group, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t//get Users from Group\n-\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\tList<User> usersFromGroup = new ArrayList<>();\n-\t\tfor (Member memberElement : members) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\t//get users from resource\n-\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\tList<User> usersFromResource = new ArrayList<>();\n-\t\tfor (Member memberElement : membersFromResource) {\n-\t\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n-\t\t\t\tusersFromResource.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t}\n-\t\tusersFromGroup.retainAll(usersFromResource);\n-\t\tusersFromGroup = new ArrayList<>(new HashSet<>(usersFromGroup));\n-\t\tfor (User userElement : usersFromGroup) {\n-\t\t\tif (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement).contains(facility)) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facility, userElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given group and member.\n-\t * That means, returns all UserFacility rich attributes for user of the given member and for facilities this member\n-\t * can access via the given group.\n-\t * If the given member is not allowed, returns an empty list.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param member  member\n-\t * @param group   group\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\tList<Facility> facilitiesFromResources = new ArrayList<>();\n-\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t}\n-\t\t\tfacilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n-\t\t\tUser userFromMember = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tfor (Facility facilityElement : facilitiesFromResources) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userFromMember, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facilityElement, userFromMember, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all relevant UserFacility RichAttributes for given resource and member.\n-\t * That means, returns all UserFacility rich attributes for user of the given member and for facilities this member\n-\t * can access via the given resource.\n-\t * If the given member is not allowed, returns an empty list.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param member   member\n-\t * @param resource resource\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tif (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tList<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n-\t\t\tif (memberResources.contains(resource)) {\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facility, user, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns UserFacility RichAttributes for the given user and facility.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess     session\n-\t * @param user     user\n-\t * @param facility facility\n-\t * @param attrDef  type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(facility, user, attribute));\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all UserFacility RichAttributes.\n-\t * That means, returns all UserFacility rich attributes for all users and all facilities these users can access.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getUserFacilityAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\tfor (Facility facilityElement : facilities) {\n-\t\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facilityElement);\n-\t\t\tfor (User userElement : users) {\n-\t\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute<>(facilityElement, userElement, attribute));\n-\t\t\t}\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------------------------ENTITYLESS---------------------------------\n-\n-\t/**\n-\t * Returns all entityless rich attributes.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getEntitylessAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tList<String> keys = this.getEntitylessKeys(sess, attrDef);\n-\t\tfor (String keyElement : keys) {\n-\t\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, keyElement, attrDef.getName());\n-\t\t\tlistOfRichAttributes.add(new RichAttribute<>(keyElement, null, attribute));\n-\t\t}\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Returns all entityless rich attributes for the given key.\n-\t * Each rich attribute is returned only once.\n-\t *\n-\t * @param sess    session\n-\t * @param key     key\n-\t * @param attrDef type of attribute that will be returned\n-\t * @return List of RichAttribute\n-\t */\n-\tprivate List<RichAttribute> getEntitylessAttributes(PerunSession sess, String key, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<>();\n-\t\tAttribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, key, attrDef.getName());\n-\t\tlistOfRichAttributes.add(new RichAttribute<>(key, null, attribute));\n-\t\tlistOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t// --------------END OF METHODS FOR ATTRIBUTES DEPENDENCIES-------------------\n+        //DEBUG end\n+\n+        log.debug(\"AttributesManagerBlImpl initialize ended.\");\n+    }\n+\n+    /**\n+     * Finds all attributes that depend on given attribute definition.\n+     * ATTENTION: before using this method, make sure there is no cycle in given dependencies.\n+     *\n+     * @param key                       attribute definition\n+     * @param inverseDependencies       inverse dependencies\n+     * @param inverseStrongDependencies inverse strong dependencies\n+     * @return Set of all attribute definitions that depend on given attribute definition\n+     */\n+    private Set<AttributeDefinition> findAllAttributeDependencies(AttributeDefinition key,\n+                                                                  Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n+                                                                  Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies) {\n+\n+        Set<AttributeDefinition> dependenciesOfAttribute = new HashSet<>();\n+\n+        dependenciesOfAttribute.addAll(inverseStrongDependencies.get(key));\n+        dependenciesOfAttribute.addAll(inverseDependencies.get(key));\n+        List<AttributeDefinition> stackingAttributes = new ArrayList<>(inverseStrongDependencies.get(key));\n+        while (!stackingAttributes.isEmpty()) {\n+            AttributeDefinition firstAttr = stackingAttributes.get(0);\n+            stackingAttributes.remove(firstAttr);\n+            dependenciesOfAttribute.addAll(inverseStrongDependencies.get(firstAttr));\n+            dependenciesOfAttribute.addAll(inverseDependencies.get(firstAttr));\n+            stackingAttributes.addAll(inverseStrongDependencies.get(firstAttr));\n+        }\n+\n+        return dependenciesOfAttribute;\n+    }\n+\n+    /**\n+     * Generates inverse dependencies from given dependencies.\n+     *\n+     * @param dependencies input dependencies\n+     */\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> generateInverseDependencies(Map<AttributeDefinition,\n+            Set<AttributeDefinition>> dependencies) {\n+\n+        Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new HashMap<>();\n+        dependencies.keySet().forEach(attr -> inverseDependencies.put(attr, new HashSet<>()));\n+\n+        Set<AttributeDefinition> depSet = dependencies.keySet();\n+        depSet.forEach(ad -> updateInverseDependenciesForAttribute(inverseDependencies, ad, dependencies));\n+\n+        return inverseDependencies;\n+    }\n+\n+    /**\n+     * Into given inverse dependencies adds data about inverse dependencies for\n+     * given AttributeDefinition. The inverse dependencies are calculated from\n+     * given normal dependencies.\n+     *\n+     * @param attributeDefinition attribute definition\n+     * @param dependencies        input dependencies\n+     * @param inverseDependencies inverse dependencies that will be updated\n+     */\n+    private void updateInverseDependenciesForAttribute(Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n+                                                       AttributeDefinition attributeDefinition,\n+                                                       Map<AttributeDefinition, Set<AttributeDefinition>> dependencies) {\n+\n+        if (!inverseDependencies.containsKey(attributeDefinition)) {\n+            inverseDependencies.put(attributeDefinition, new HashSet<>());\n+        }\n+\n+        Set<AttributeDefinition> keySet;\n+        keySet = dependencies.get(attributeDefinition);\n+\n+        for (AttributeDefinition keySetItem : keySet) {\n+            Set<AttributeDefinition> changeSet;\n+            changeSet = inverseDependencies.get(keySetItem);\n+            changeSet.add(attributeDefinition);\n+        }\n+    }\n+\n+\n+    /**\n+     * Finds all attribute definitions that the given module depends on.\n+     *\n+     * @param sess   session\n+     * @param module module\n+     * @return Set of attribute definitions that the given module depends on.\n+     * @throws InternalErrorException internal error\n+     */\n+    private Set<AttributeDefinition> getDependenciesForModule(PerunSession sess, AttributesModuleImplApi module) throws InternalErrorException {\n+        List<String> depList = module.getDependencies();\n+\n+        return findAttributeDefinitionsForDependencies(sess, depList);\n+    }\n+\n+    /**\n+     * Find modules strong dependencies.\n+     * <p>\n+     * For given virtual attribute module find all of its strong dependencies.\n+     *\n+     * @param sess   session\n+     * @param module module\n+     * @return strong dependencies of given module\n+     * @throws InternalErrorException internal error\n+     */\n+    private Set<AttributeDefinition> getStrongDependenciesForModule(PerunSession sess, VirtualAttributesModuleImplApi module) throws InternalErrorException {\n+        List<String> strongDepList = module.getStrongDependencies();\n+\n+        return findAttributeDefinitionsForDependencies(sess, strongDepList);\n+    }\n+\n+    /**\n+     * For given list of dependencies names find theirs attributeDefinitions.\n+     *\n+     * @param sess              session\n+     * @param dependenciesNames names of attribute modules for dependencies\n+     * @return Set of attribute definitions for given dependencies\n+     * @throws InternalErrorException internal error\n+     */\n+    private Set<AttributeDefinition> findAttributeDefinitionsForDependencies(PerunSession sess, List<String> dependenciesNames) throws InternalErrorException {\n+        Set<AttributeDefinition> strongDepSet = new HashSet<>();\n+\n+        for (String s : dependenciesNames) {\n+            if (!s.endsWith(\"*\")) {\n+                try {\n+                    AttributeDefinition attrDef = getAttributeDefinition(sess, s);\n+                    strongDepSet.add(attrDef);\n+                } catch (AttributeNotExistsException ex) {\n+                    log.error(\"AttributeDefinition can't be found for dependency {}\", s);\n+                }\n+                //If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n+            } else {\n+                List<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length() - 2));\n+                for (String variant : allVariantOfDependence) {\n+                    try {\n+                        AttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n+                        strongDepSet.add(attrDef);\n+                    } catch (AttributeNotExistsException ex) {\n+                        log.error(\"For attribute dependency name {} can't be found attributeDefinition.\", variant);\n+                    }\n+                }\n+            }\n+        }\n+\n+        return strongDepSet;\n+    }\n+\n+    /**\n+     * This method try to find cycle between strongDependencies of Attributes modules.\n+     * If exist at least 1 cycle, return true.\n+     * If there is no cycle, return false.\n+     *\n+     * @return true if cycle exist, false if cycle not exist\n+     */\n+    private static boolean isMapOfAttributesDefCyclic(Map<AttributeDefinition, Set<AttributeDefinition>> map) {\n+        Set<AttributeDefinition> processed = new HashSet<>();\n+        Set<AttributeDefinition> unprocessed = new HashSet<>();\n+        List<AttributeDefinition> stack = new ArrayList<>();\n+\n+        for (AttributeDefinition attributeDef : map.keySet()) {\n+            stack.add(attributeDef);\n+            while (!stack.isEmpty()) {\n+                AttributeDefinition firstInStack = stack.get(0);\n+                if (map.get(firstInStack).contains(attributeDef)) {\n+                    log.error(\"Cycle exist for \" + attributeDef);\n+                    return true;\n+                }\n+                processed.add(firstInStack);\n+                unprocessed.addAll(map.get(firstInStack));\n+                unprocessed.removeAll(processed);\n+                stack.remove(firstInStack);\n+                for (AttributeDefinition unprocessedAttr : unprocessed) {\n+                    if (!stack.contains(unprocessedAttr)) {\n+                        stack.add(unprocessedAttr);\n+                    }\n+                }\n+                unprocessed.clear();\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public List<Attribute> setWritableTrue(PerunSession sess, List<Attribute> attributes) throws InternalErrorException {\n+        List<Attribute> emptyList = new ArrayList<>();\n+        if (attributes == null) {\n+            return emptyList;\n+        }\n+\n+        for (Attribute a : attributes) {\n+            if (a != null) {\n+                a.setWritable(true);\n+            }\n+        }\n+\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException {\n+        List<AttributeRights> listOfAr = getAttributesManagerImpl().getAttributeRights(sess, attributeId);\n+\n+        //Do not return VoObsever rights by this method\n+        if (listOfAr != null) {\n+            listOfAr.removeIf(ar -> ar.getRole().equals(Role.VOOBSERVER));\n+        }\n+\n+        return listOfAr;\n+    }\n+\n+    @Override\n+    public void setAttributeRights(PerunSession sess, List<AttributeRights> rights) throws InternalErrorException {\n+        for (AttributeRights right : rights) {\n+            getAttributesManagerImpl().setAttributeRight(sess, right);\n+            getPerunBl().getAuditer().log(sess, new AttributeRightsSet(right));\n+\n+            //If these rights are for VoAdmin, do the same for VoObserver but only for READ privilegies\n+            if (right.getRole().equals(Role.VOADMIN)) {\n+                List<ActionType> onlyReadActionType = new ArrayList<>();\n+                if (right.getRights().contains(ActionType.READ)) {\n+                    onlyReadActionType.add(ActionType.READ);\n+                }\n+                right.setRights(onlyReadActionType);\n+                right.setRole(Role.VOOBSERVER);\n+                //Rights are now set for VoObserver with read privilegies on the same attribute like VoAdmin\n+                getAttributesManagerImpl().setAttributeRight(sess, right);\n+                getPerunBl().getAuditer().log(sess, new AttributeRightsSet(right));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+        return getAttributesManagerImpl().getUserVirtualAttributeModule(sess, attribute);\n+    }\n+\n+    /**\n+     * Check if member is assigned on resource. If not, throw MemberResourceMismatchException Exception\n+     */\n+    private void checkMemberIsFromTheSameVoLikeResource(PerunSession sess, Member member, Resource resource) throws MemberResourceMismatchException, InternalErrorException {\n+        Utils.notNull(sess, \"sess\");\n+        Utils.notNull(member, \"member\");\n+        Utils.notNull(resource, \"resource\");\n+\n+        if (member.getVoId() != resource.getVoId()) {\n+            throw new MemberResourceMismatchException(\"Member is not from the same vo like Resource: \" + member + \" \" + resource);\n+        }\n+    }\n+\n+    /**\n+     * Check if group is assigned on resource. If not, throw WrongAttributeAssignment Exception\n+     */\n+    @Override\n+    public void checkGroupIsFromTheSameVoLikeResource(PerunSession sess, Group group, Resource resource) throws GroupResourceMismatchException, InternalErrorException {\n+        Utils.notNull(sess, \"sess\");\n+        Utils.notNull(group, \"group\");\n+        Utils.notNull(resource, \"resource\");\n+\n+        if (group.getVoId() != resource.getVoId()) {\n+            throw new GroupResourceMismatchException(\"Group is not from the same vo like Resource: \" + group + \" \" + resource);\n+        }\n+    }\n+\n+    @Override\n+    public Set<Pair<Integer, Integer>> getPerunBeanIdsForUniqueAttributeValue(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+        if (!attribute.isUnique()) {\n+            throw new InternalErrorException(\"attribute definition is not marked as unique: \" + attribute);\n+        }\n+        return attributesManagerImpl.getPerunBeanIdsForUniqueAttributeValue(sess, attribute);\n+    }\n+\n+    @Override\n+    public void convertAttributeToUnique(PerunSession session, int attrId) throws InternalErrorException, AttributeNotExistsException, AttributeAlreadyMarkedUniqueException {\n+        AttributeDefinition attrDef = getAttributeDefinitionById(session, attrId);\n+        if (attrDef.isUnique()) {\n+            throw new AttributeAlreadyMarkedUniqueException(\"Cannot convert attribute because it is already marked as unique\", attrDef);\n+        }\n+        if (attrDef.getNamespace().startsWith(NS_ENTITYLESS_ATTR)) {\n+            throw new InternalErrorException(\"entityless atributes cannot be converted to unique\");\n+        }\n+        if (!Arrays.asList(\"def\", \"opt\").contains(attrDef.getNamespace().split(\":\")[4])) {\n+            throw new InternalErrorException(\"only 'def' and 'opt' attributes can be converted to unique\");\n+        }\n+        log.info(\"converting attribute {} to unique\", attrDef.getName());\n+        attrDef.setUnique(true);\n+        this.updateAttributeDefinition(session, attrDef);\n+        long startTime = System.currentTimeMillis();\n+        attributesManagerImpl.convertAttributeValuesToUnique(session, attrDef);\n+        long endTime = System.currentTimeMillis();\n+        log.debug(\"Attribute {} was converted to unique in {} ms\", attrDef.getName(), (endTime - startTime));\n+    }\n+\n+    @Override\n+    public String getAttributeModulesDependenciesGraphAsString(PerunSession session, GraphTextFormat format) throws InternalErrorException {\n+        Graph graph = getAttributeModulesDependenciesGraph(session);\n+\n+        return format.getSerializer().generateTextFileContent(graph);\n+    }\n+\n+    @Override\n+    public String getAttributeModulesDependenciesGraphAsString(PerunSession session, GraphTextFormat format, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+        NodeGenerator<AttributeDefinition> nodeGenerator = new ModuleDependencyNodeGenerator();\n+        Graph graph = getAttributeModulesDependenciesGraph(session, nodeGenerator);\n+\n+        Set<Node> componentNodes = graph.getComponentNodes(nodeGenerator.generate(attributeDefinition, 0L));\n+\n+        Set<Node> notUsedNodes = new HashSet<>(graph.getNodes().keySet());\n+        notUsedNodes.removeAll(componentNodes);\n+\n+        graph.removeNodes(notUsedNodes);\n+\n+        GraphSerializer graphSerializer = format.getSerializer();\n+\n+        return graphSerializer.generateTextFileContent(graph);\n+    }\n+\n+    @Override\n+    public Graphviz getAttributeModulesDependenciesGraphAsImage(PerunSession session) throws InternalErrorException {\n+\n+        String graphText = getAttributeModulesDependenciesGraphAsString(session, GraphTextFormat.DOT);\n+\n+        return convertDotStringGraph(graphText);\n+    }\n+\n+    @Override\n+    public Graphviz getAttributeModulesDependenciesGraphAsImage(PerunSession session, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+\n+        String graphText = getAttributeModulesDependenciesGraphAsString(session, GraphTextFormat.DOT, attributeDefinition);\n+\n+        return convertDotStringGraph(graphText);\n+    }\n+\n+    @Override\n+    public Graph getAttributeModulesDependenciesGraph(PerunSession session) throws InternalErrorException {\n+        return getAttributeModulesDependenciesGraph(session, new ModuleDependencyNodeGenerator());\n+    }\n+\n+    private Graph getAttributeModulesDependenciesGraph(PerunSession session, NodeGenerator<AttributeDefinition> nodeGenerator) {\n+        GraphDefinition<AttributeDefinition> graphDefinition = new GraphDefinition<AttributeDefinition>()\n+                .addEntitiesData(strongDependencies).withEdgeType(GraphEdge.Type.BOLD)\n+                .addEntitiesData(dependencies).withEdgeType(GraphEdge.Type.DASHED);\n+\n+        return new NoDuplicatedEdgesGraphGenerator().generate(nodeGenerator, graphDefinition);\n+    }\n+\n+    @Override\n+    public Map<AttributeDefinition, Set<AttributeDefinition>> getAllDependencies() {\n+        return allDependencies;\n+    }\n+\n+    /**\n+     * Converts DOT String graph representation to Graphviz.\n+     *\n+     * @param graphString graph string\n+     * @return converted graph\n+     * @throws InternalErrorException internal error\n+     */\n+    private Graphviz convertDotStringGraph(String graphString) throws InternalErrorException {\n+\n+        MutableGraph graph;\n+\n+        try {\n+            graph = Parser.read(graphString);\n+        } catch (IOException e) {\n+            throw new InternalErrorException(\"Generated invalid format of DOT graph.\");\n+        }\n+\n+        return Graphviz.fromGraph(graph);\n+    }\n+\n+    // ------------ PRIVATE METHODS FOR ATTRIBUTE DEPENDENCIES LOGIC --------------\n+    // These methods get one or two Perun Beans and return list of richAttributes\n+    // of specific type defined by name of method which actually exists in Perun\n+    // and they are connected to the Perun Beans in parameters. If there is any\n+    // possibility to filter them by members, use only allowed members connections.\n+    // If member is not allowed (is in state Disabled or Invalid), remove\n+    // all objects connected to him from structure for getting attributes.\n+    //\n+    // Example: We have USER and we want all GROUP attributes connected to this\n+    // User. So we find all members connected to this user and only for those who\n+    // are allowed (NOT have status DISABLED or INVALID we find all connected groups\n+    // and then we find all group attributes for these groups and return them\n+    // as RichAttributes.\n+    // ----------------------------------------------------------------------------\n+\n+    // ---------------------------------VO-----------------------------------------\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given User.\n+     * That means find all Vos where given user has allowed member.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of Rich attributes for given user\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : membersFromUser) {\n+            listOfRichAttributes.addAll(getVoAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given member.\n+     * If member is allowed returns its Vo's Rich attribute.\n+     * Otherwise no attributes are returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            Vo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+            listOfRichAttributes.addAll(getVoAttributes(sess, vo, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given group.\n+     * Finds directly the Vo where the group belongs.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, VoNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Vo vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+        listOfRichAttributes.addAll(getVoAttributes(sess, vo, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given resource.\n+     * Finds the Vo that the resource is assigned to.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return list of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, VoNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Vo vo = getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId());\n+        listOfRichAttributes.addAll(getVoAttributes(sess, vo, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given Vo.\n+     * Find attributes for given Vo directly.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      virtual organization\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(vo, null, attribute));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given Facility.\n+     * Finds allowed Vos for given facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n+        for (Vo voElement : vos) {\n+            listOfRichAttributes.addAll(getVoAttributes(sess, voElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given host.\n+     * Finds facility for given host and gets allowed Vos for the facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAtrributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getVoAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given userExtSource. That means find user for given userExtSource and\n+     * find all Vos where given user has allowed member.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource user external source\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getVoAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Vo RichAttributes for given user and facility.\n+     * That means:\n+     * 1. Finds all members for given user. For each member, if is allowed, find all its groups.\n+     * 2. For given facility find all its resource. For each resource finds assigned groups.\n+     * 3. Then compare these groups and keeps only those that were in both lists.\n+     * 4. For those groups finds theirs Vos and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromUser = new ArrayList<>();\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : membersFromUser) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                groupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+            }\n+        }\n+        List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        List<Group> groupsFromFacility = new ArrayList<>();\n+        for (Resource resourceElement : resourcesFromFacility) {\n+            groupsFromFacility.addAll(perunBl.getResourcesManagerBl().getAssignedGroups(sess, resourceElement));\n+        }\n+        groupsFromUser.retainAll(groupsFromFacility);\n+        groupsFromUser = new ArrayList<>(new HashSet<>(groupsFromUser));\n+\n+        List<Vo> vos = new ArrayList<>();\n+        for (Group groupElement : groupsFromUser) {\n+            vos.add(getPerunBl().getGroupsManagerBl().getVo(sess, groupElement));\n+        }\n+\n+        vos = new ArrayList<>(new HashSet<>(vos));\n+\n+        for (Vo voElement : vos) {\n+            listOfRichAttributes.addAll(getVoAttributes(sess, voElement, attrDef));\n+        }\n+\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all Vo RichAttributes.\n+     * Finds attributes for all Vos.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getVoAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+        for (Vo voElement : vos) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(voElement, null, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------USER----------------------------------------\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given user.\n+     * Finds attributes for given user directly.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(user, null, attribute));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given member.\n+     * Checks if given member is allowed. If so, gets its user and return its attribute.\n+     * If member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            listOfRichAttributes.addAll(getUserAttributes(sess, user, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given member.\n+     * Finds all members for given group. For each allowed member gets its user. Returns attributes for those users.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        for (Member memberElement : members) {\n+            listOfRichAttributes.addAll(getUserAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given resource.\n+     * Gets allowed users for given resource. Returns attributes for those users.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+        for (User userElement : usersFromResource) {\n+            listOfRichAttributes.addAll(getUserAttributes(sess, userElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given vo.\n+     * Find all members of given vo. For each allowed member gets its user and returns rich attributes for those users.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      vo\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+        for (Member memberElement : members) {\n+            listOfRichAttributes.addAll(getUserAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given facility.\n+     * Finds allowed users for given facility. For each of them returns rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+        for (User userElement : usersFromFacility) {\n+            listOfRichAttributes.addAll(getUserAttributes(sess, userElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given host.\n+     * For given host finds its facility. Then for this facility finds allowed users and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getUserAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given userExtSource.\n+     * For given userExtSource finds its user. Then for this user gets its attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource user external source\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getUserAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant User RichAttributes for given user and facility.\n+     * That means:\n+     * 1. Finds all allowed facilities for given user.\n+     * 2. Checks if those facilities contains given facility.\n+     * 3. If so, returns the user's rich attribute, an empty list otherwise.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        if (facilitiesFromUser.contains(facility)) {\n+            listOfRichAttributes.addAll(getUserAttributes(sess, user, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns RichAttributes for all users.\n+     * Finds all users. Returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getUserAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<User> allUsers = getPerunBl().getUsersManagerBl().getUsers(sess);\n+        for (User userElement : allUsers) {\n+            listOfRichAttributes.addAll(getUserAttributes(sess, userElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------MEMBER--------------------------------------\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given user.\n+     * Finds all members for given user. For those members that are allowed returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : membersFromUser) {\n+            listOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given member.\n+     * Checks if given member is allowed. If so, returns its attribute.\n+     * Otherwise an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(member, null, attribute));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given group.\n+     * Finds all members for given group. For each member that is allowed returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        for (Member memberElement : membersFromGroup) {\n+            listOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given resource.\n+     * Finds allowed members who can access the resource.\n+     * For those members that are allowed returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+        for (Member memberElement : membersFromResource) {\n+            listOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given Vo.\n+     * Gets all members of given Vo. For each allowed member returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      virtual organization\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+        for (Member memberElement : membersFromVo) {\n+            listOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given facility.\n+     * Finds members that can access the given facility. For each allowed member returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+        for (Member memberElement : membersFromFacility) {\n+            listOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given host.\n+     * Finds facility for given host. Finds all members who can access the facility.\n+     * For each allowed member returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getMemberAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given userExtSource.\n+     * For given userExtSource finds user. Finds all members for the user.\n+     * For each allowed member returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource user external source\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getMemberAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Member RichAttributes for given user and facility.\n+     * That means:\n+     * 1. Finds members for given user.\n+     * 2. Finds members for given facility.\n+     * 3. Keeps those that are in both lists.\n+     * 4. For each of them return its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+        membersFromUser.retainAll(membersFromFacility);\n+        membersFromUser = new ArrayList<>(new HashSet<>(membersFromUser));\n+        for (Member memberElement : membersFromUser) {\n+            listOfRichAttributes.addAll(getMemberAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns RichAttributes for all allowed members.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session.\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getMemberAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+        for (Vo voElement : vos) {\n+            listOfRichAttributes.addAll(getMemberAttributes(sess, voElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------GROUP---------------------------------------\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given user.\n+     * Finds members for given user. For each allowed member returns its group's rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : members) {\n+            listOfRichAttributes.addAll(getGroupAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given member.\n+     * Checks if given member is allowed. If so, finds all groups for it. For each group returns its rich attribute.\n+     * If member is not allowed return an empty List.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+            for (Group groupElement : groupsFromMember) {\n+                listOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given group.\n+     * Finds rich attribute for given group directly.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(group, null, attribute));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given resource.\n+     * Finds groups assigned for given resource. Returns rich attributes for those groups.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        for (Group groupElement : groupsFromResource) {\n+            listOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given Vo.\n+     * Finds groups that belongs in given Vo. For each group return its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      virtual organization\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groups = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n+        for (Group groupElement : groups) {\n+            listOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given facility.\n+     * Finds groups that are assigned to given facility. For each group returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+        for (Group groupElement : groupsFromFacility) {\n+            listOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given host.\n+     * Finds facility for given host. Finds groups assigned to this host. For each group returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getGroupAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given userExtSource.\n+     * Finds user for given userExtSource. Finds members for this user.\n+     * For each allowed member returns its group's rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource user external source\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getGroupAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given member and group.\n+     * Checks if the member is allowed. If so, returns rich attribute for given group.\n+     * Otherwise an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            listOfRichAttributes = getGroupAttributes(sess, group, attrDef);\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given member and resource.\n+     * That means:\n+     * 1. Check if member is allowed, if is not, returns an empty list.\n+     * 2. Finds assigned groups for given resource.\n+     * 3. Finds all groups for given member.\n+     * 4. Keeps those groups that are in both lists.\n+     * 5. Returns rich attributes for those groups.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param member   member\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+            List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+            groupsFromResource.retainAll(groupsFromMember);\n+            groupsFromResource = new ArrayList<>(new HashSet<>(groupsFromResource));\n+            for (Group groupElement : groupsFromResource) {\n+                listOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Group RichAttributes for given user and facility.\n+     * That means:\n+     * 1. Finds all members for given user.\n+     * 2. For each member that is allowed, find its group.\n+     * 3. Finds group assigned to given facility.\n+     * 4. Keeps groups that are in both list.\n+     * 5. For those groups returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        Set<Group> groupsFromMembers = new HashSet<>();\n+        for (Member memberElement : members) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+            }\n+        }\n+        groupsFromMembers.retainAll(getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility));\n+        for (Group groupElement : groupsFromMembers) {\n+            listOfRichAttributes.addAll(getGroupAttributes(sess, groupElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns rich attributes for all groups.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return list of RichAttributes\n+     */\n+    private List<RichAttribute> getGroupAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+        for (Vo voElement : vos) {\n+            listOfRichAttributes.addAll(getGroupAttributes(sess, voElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------RESOURCE------------------------------------\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given user.\n+     * Finds members for given user. For each allowed member finds resources the member can access.\n+     * For each of those resources returns theirs rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return list of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : members) {\n+            listOfRichAttributes.addAll(getResourceAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given member.\n+     * If member is not allowed returns an empty list.\n+     * Otherwise finds resources the member can access.\n+     * Then returns rich attributes for those resources.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return list of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+            for (Resource resourceElement : resourcesFromMember) {\n+                listOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given group.\n+     * Finds assigned resources for given group. For those resources returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return list of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        for (Resource resourceElement : resourcesFromGroup) {\n+            listOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given resource.\n+     * Finds rich attribute for the given resource.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     sesion\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(resource, null, attribute));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given vo.\n+     * Finds resources assigned to given Vo. For each returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      virtual organization\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+        for (Resource resourceElement : resourcesFromVo) {\n+            listOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given facility.\n+     * Finds assigned resources to the given facility. Returns rich attributes of these resources.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        for (Resource resourceElement : resourcesFromFacility) {\n+            listOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given host.\n+     * Finds the given host's facility. For this facility finds assigned resources.\n+     * For each of those resources returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getResourceAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given userExtSource.\n+     * Finds user for given userExtSource. Finds members for the user.\n+     * For each allowed member finds resources the member can access.\n+     * For each of those resources returns theirs rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource user external source\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getResourceAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given member and group.\n+     * 1. Checks if member is allowed, if is not returns an empty list.\n+     * 2. Otherwise finds assigned resources to given group.\n+     * 3. For those resources returns theirs rich attributes\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Resource> resourcesFromGroup = new ArrayList<>(new HashSet<>(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group)));\n+            for (Resource resourceElement : resourcesFromGroup) {\n+                listOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given member and resource.\n+     * 1. Checks if member is allowed, if not so, an empty list is returned\n+     * 2. Otherwise returns rich attribute for given resource\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param member   member\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(resource, null, attribute));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Resource RichAttributes for given user and facility.\n+     * 1. Finds members for given user\n+     * 2. For each allowed member finds its allowed resources\n+     * 3. Finds assigned resources to given facility\n+     * 4. Keeps only resources that are in both lists\n+     * 5. For those resources returns theirs rich attributes\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        List<Resource> resourcesFromUser = new ArrayList<>();\n+        for (Member memberElement : members) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+            }\n+        }\n+        List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        resourcesFromUser.retainAll(resourcesFromFacility);\n+        resourcesFromUser = new ArrayList<>(new HashSet<>(resourcesFromUser));\n+        for (Resource resourceElement : resourcesFromUser) {\n+            listOfRichAttributes.addAll(getResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Finds rich attributes for all resources.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getResourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+        for (Vo voElement : vos) {\n+            listOfRichAttributes.addAll(getResourceAttributes(sess, voElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------FACILITY------------------------------------\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given user.\n+     * Finds facilities that the given user can access.\n+     * For those facilities are returned rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        for (Facility facilityElement : facilities) {\n+            listOfRichAttributes.addAll(getFacilityAttributes(sess, facilityElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given member.\n+     * 1. Checks if given member is allowed, if not, an empty list is returned.\n+     * 2. Otherwise finds groups for given member.\n+     * 3. For those groups finds assigned resources.\n+     * 4. Finds facility for each resource.\n+     * 5. Returns rich attributes for those facilities.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+            for (Group groupElement : groupsForMember) {\n+                listOfRichAttributes.addAll(getFacilityAttributes(sess, groupElement, attrDef));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given group.\n+     * 1. For the given group finds assigned resources.\n+     * 2. Finds facility for each resource.\n+     * 3. Returns rich attributes for those facilities.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        for (Resource resourceElement : resources) {\n+            listOfRichAttributes.addAll(getFacilityAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given resource.\n+     * Finds facility that the resource belongs to and return its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        listOfRichAttributes.addAll(getFacilityAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given vo.\n+     * Finds resources assigned to given vo.\n+     * For each resource finds facility it belongs to.\n+     * Returns rich attributes for these resources.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      virtual organization\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+        for (Resource resourceElement : resources) {\n+            listOfRichAttributes.addAll(getFacilityAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given Facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(facility, null, attribute));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given host.\n+     * Finds the facility the given host is assigned to.\n+     * For this facility returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getFacilityAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given user.\n+     * Finds user for given userExtSource.\n+     * Finds facilities that the user can access.\n+     * For those facilities are returned rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource user external source\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getFacilityAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given member and group.\n+     * 1. Checks if the member is allowed, if not, empty list is returned\n+     * 2. Otherwise for the given group finds assigned resources.\n+     * 3. Finds facility for each resource.\n+     * 4. Returns rich attributes for those facilities.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            listOfRichAttributes = getFacilityAttributes(sess, group, attrDef);\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given member and resource.\n+     * 1. Checks if the given member is allowed. If not, an empty list is returned.\n+     * 2. Otherwise finds facility that the resource belongs to and returns its rich attribute.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param member   member\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            listOfRichAttributes.addAll(getFacilityAttributes(sess, resource, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Facility RichAttributes for given user and facility\n+     * 1. Finds facilities the given user can access.\n+     * 2. Checks if those facilities contains the given one. If they do, return this facility's rich attribute.\n+     * 3. Otherwise an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        if (facilitiesFromUser.contains(facility)) {\n+            listOfRichAttributes.addAll(getFacilityAttributes(sess, facility, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Finds all facilities rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getFacilityAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+        for (Facility facilityElement : facilities) {\n+            listOfRichAttributes.addAll(getFacilityAttributes(sess, facilityElement, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------HOST----------------------------------------\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given user.\n+     * Finds facilities where the given user is allowed.\n+     * For each of those facilities finds theirs hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        for (Facility facilityElement : facilities) {\n+            listOfRichAttributes.addAll(getHostAttributes(sess, facilityElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given member.\n+     * If member is not allowed returns an empty list.\n+     * Otherwise finds groups for the given member.\n+     * For those groups finds assigned resources.\n+     * For each of those resources finds theirs facilities.\n+     * For each of those facilities finds theirs hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (perunBl.getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+            for (Group groupElement : groupsForMember) {\n+                listOfRichAttributes.addAll(getHostAttributes(sess, groupElement, attrDef));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given group.\n+     * For the given group finds assigned resources.\n+     * For each of those resources finds theirs facilities.\n+     * For each of those facilities finds theirs hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        for (Resource resourceElement : resources) {\n+            listOfRichAttributes.addAll(getHostAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given resource.\n+     * For the given resource finds its facility.\n+     * For the facility finds its hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resources\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        listOfRichAttributes.addAll(getHostAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given vo.\n+     * Finds assigned resources to the given vo.\n+     * For each of those resources finds theirs facilities.\n+     * For each of those facilities finds theirs hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      virtual organization\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+        for (Resource resourceElement : resources) {\n+            listOfRichAttributes.addAll(getHostAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given facility.\n+     * For the given facility finds its hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+        for (Host hostElement : hostsFromFacility) {\n+            listOfRichAttributes.addAll(getHostAttributes(sess, hostElement, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given host.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, host, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(host, null, attribute));\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given userExtSource.\n+     * Finds user for the given userExtSource.\n+     * Finds facilities where the user is allowed.\n+     * For each of those facilities finds theirs hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource userExtSource\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getHostAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given member and group.\n+     * If the member is not allowed returns an empty list.\n+     * Otherwise, for the given group finds assigned resources.\n+     * For each of those resources finds theirs facilities.\n+     * For each of those facilities finds theirs hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            listOfRichAttributes.addAll(getHostAttributes(sess, group, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given member and resource.\n+     * For the given resource finds its facility.\n+     * For the facility finds its hosts.\n+     * For each of those host returns its rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resources\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            listOfRichAttributes = getHostAttributes(sess, resource, attrDef);\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant Host RichAttributes for given user and facility.\n+     * Checks if user can access the facility. If not, an empty list is returned.\n+     * Otherwise, gets hosts from the given facility and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facility)) {\n+            List<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+            for (Host hostElement : hostsFromFacility) {\n+                listOfRichAttributes.addAll(getHostAttributes(sess, hostElement, attrDef));\n+            }\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns rich attributes for all hosts.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttributes\n+     */\n+    private List<RichAttribute> getHostAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+        for (Facility facilityElement : facilities) {\n+            listOfRichAttributes.addAll(getHostAttributes(sess, facilityElement, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------USER-EXT-SOURCE-------------------------------\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given user.\n+     * Finds all user's userExtSources and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n+        for (UserExtSource userExtSourceElement : userExtSources) {\n+            listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, userExtSourceElement, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given member.\n+     * Checks if the given member is allowed. If not, an empty list is returned.\n+     * Otherwise, finds all its user's userExtSources and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, user, attrDef));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given group.\n+     * Finds all members for given group.\n+     * For all allowed members finds theirs user's userExtSources and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> groupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        for (Member memberElement : groupMembers) {\n+            listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given resource.\n+     * Finds allowed members for the given resource.\n+     * Finds theirs user's userExtSources and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> resourceMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+        for (Member memberElement : resourceMembers) {\n+            listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given vo.\n+     * Finds allowed members for the given vo.\n+     * Finds theirs user's userExtSources and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      vo\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> voMembers = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+        for (Member memberElement : voMembers) {\n+            listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given facility.\n+     * Finds allowed members for the given facility.\n+     * Finds theirs user's userExtSources and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> facilityMembers = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+        for (Member memberElement : facilityMembers) {\n+            listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given host.\n+     * Finds allowed members for the given host's facility.\n+     * Finds theirs user's userExtSources and returns theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, facility, attrDef));\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given userExtSource.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource userExtSource\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userExtSource, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(userExtSource, null, attribute));\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserExtSource RichAttributes for given user and facility.\n+     * Checks if the given user can access the given facility. If not, an empty list is returned.\n+     * Otherwise, finds all given user's userExtSources and return theirs rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+        if (usersFromFacility.contains(user)) {\n+            List<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n+            for (UserExtSource userExtSourceElement : userExtSources) {\n+                listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, userExtSourceElement, attrDef));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns RichAttributes for all userExtSource.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserExtSourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+        for (Facility facilityElement : facilities) {\n+            listOfRichAttributes.addAll(getUserExtSourceAttributes(sess, facilityElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------GROUP-RESOURCE-------------------------------\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given user.\n+     * That means, returns all GroupResource rich attributes for those groups where the given user has at least one\n+     * allowed member and for those resources that the given user can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : members) {\n+            listOfRichAttributes.addAll(getGroupResourceAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given member.\n+     * That means, returns all GroupResource rich attributes for those groups that the given member is assigned to\n+     * and for those resources that the given member can access.\n+     * If the given member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+            List<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+            for (Resource resourceElement : resourcesFromMember) {\n+                List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                groupsFromResourceElement.retainAll(groupsFromMember);\n+                groupsFromResourceElement = new ArrayList<>(new HashSet<>(groupsFromResourceElement));\n+                for (Group groupElement : groupsFromResourceElement) {\n+                    Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute<>(resourceElement, groupElement, attribute));\n+                }\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given group.\n+     * That means, returns all GroupResource rich attributes for the given group and resources that the given group\n+     * can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        for (Resource resourceElement : resourcesFromGroup) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(resourceElement, group, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given resource.\n+     * That means, returns all GroupResource rich attributes for the given resource and those groups that can access\n+     * this resource.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        for (Group groupElement : groupsFromResource) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(resource, groupElement, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given vo.\n+     * That means, returns all GroupResource rich attributes for those resources, that can be accessed by the given vo.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      vo\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+        for (Resource resourceElement : resources) {\n+            listOfRichAttributes.addAll(getGroupResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given facility.\n+     * That means, returns all GroupResource rich attributes for those resources, that are located on the given facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        for (Resource resourceElement : resourcesFromFacility) {\n+            listOfRichAttributes.addAll(getGroupResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given facility.\n+     * That means, returns all GroupResource rich attributes for those resources, that are located on the facility\n+     * with the given host.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    facility\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getGroupResourceAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given userExtSource.\n+     * That means, returns all GroupResource rich attributes for groups, where user with given userExtSource has\n+     * at least one allowed member and for those resources, that can the user access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource userExtSource\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getGroupResourceAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given group and resource.\n+     * That means, returns all GroupResource rich attributes for the given group and resource.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param group    group\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Group group, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, group, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(resource, group, attribute));\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given group and member.\n+     * That means, returns all GroupResource rich attributes for the given group and those resources, that can the\n+     * given member access. If the given member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        // there is no need to get Resources from Member because Members are only in those groups from which we already took Resources\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            listOfRichAttributes = getGroupResourceAttributes(sess, group, attrDef);\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given resource and member.\n+     * That means, returns all GroupResource rich attributes for the given resource and those groups, that can the\n+     * given member access and that can access the given resource.\n+     * If the given member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param member   member\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+            List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+            groupsFromResource.retainAll(groupsFromMember);\n+            groupsFromResource = new ArrayList<>(new HashSet<>(groupsFromResource));\n+            for (Group groupElement : groupsFromResource) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resource, groupElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant GroupResource RichAttributes for given user and facility.\n+     * That means, returns all GroupResource rich attributes for those groups, where has the given user at least\n+     * one allowed member, and for those resources, that can be accessed via this groups and are located on the\n+     * given facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        //Groups from User\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        List<Group> groupsFromUser = new ArrayList<>();\n+        for (Member memberElement : members) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                groupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+            }\n+        }\n+        //Retain of Groups from facility\n+        List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+        groupsFromFacility.retainAll(groupsFromUser);\n+        //Resources from user\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        List<Resource> resourcesFromUser = new ArrayList<>();\n+        for (Member memberElement : membersFromUser) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+            }\n+        }\n+        //Resource from facility\n+        List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        //Retain of Resources\n+        resourcesFromFacility.retainAll(resourcesFromUser);\n+        //All possibilities\n+        resourcesFromFacility = new ArrayList<>(new HashSet<>(resourcesFromFacility));\n+        for (Resource resourceElement : resourcesFromFacility) {\n+            List<Group> groupsForResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+            groupsForResourceElement.retainAll(groupsFromFacility);\n+            groupsForResourceElement = new ArrayList<>(new HashSet<>(groupsForResourceElement));\n+            for (Group groupElement : groupsForResourceElement) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resourceElement, groupElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all GroupResource RichAttributes.\n+     * That means, returns all GroupResource rich attributes with all groups and those resources, that can be accessed\n+     * via these groups.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getGroupResourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+        List<Resource> resources = new ArrayList<>();\n+        for (Facility facilityElement : facilities) {\n+            resources.addAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facilityElement));\n+        }\n+        resources = new ArrayList<>(new HashSet<>(resources));\n+        for (Resource resourceElement : resources) {\n+            List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+            for (Group groupElement : groupsFromResourceElement) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resourceElement, groupElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------MEMBER-GROUP-------------------------------\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given user.\n+     * That means, returns all MemberGroup rich attributes for those members, who belong to the given user and are allowed,\n+     * and for those groups that those members can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : membersFromUser) {\n+            listOfRichAttributes.addAll(getMemberGroupAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given member.\n+     * That means, returns all MemberGroup rich attributes for the given member, and for groups that can this member access.\n+     * If the given member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Group> groupsFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+            for (Group groupElement : groupsFromMembers) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(member, groupElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given group.\n+     * That means, returns all MemberGroup rich attributes for the given group and those members who belong to this group\n+     * and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromGroups = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        for (Member memberElement : membersFromGroups) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(memberElement, group, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given resource.\n+     * That means, returns all MemberGroup rich attributes for groups that can access the given resource and for members\n+     * that can access those groups and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        for (Group groupElement : groupsFromResources) {\n+            listOfRichAttributes.addAll(getMemberGroupAttributes(sess, groupElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given vo.\n+     * That means, returns all MemberGroup rich attributes for groups from the given vo and for those members, who\n+     * belong to these groups and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      vo\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n+        for (Group groupElement : groupsFromVo) {\n+            listOfRichAttributes.addAll(getMemberGroupAttributes(sess, groupElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given facility.\n+     * That means, returns all MemberGroup rich attributes for groups that can access the given facility and for members\n+     * that can access these groups and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+        for (Group groupElement : groupsFromFacility) {\n+            listOfRichAttributes.addAll(getMemberGroupAttributes(sess, groupElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given host.\n+     * That means, returns all MemberGroup rich attributes for groups that can access the given host's facility and\n+     * for members that can access these groups and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getMemberGroupAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given userExtSource.\n+     * That means, returns all MemberGroup rich attributes for those members, who belong to the given userExtSource's user\n+     * and are allowed, and for those groups that those members can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource userExtSource\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getMemberGroupAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given member and group.\n+     * That means, returns all MemberGroup rich attributes for the given member and group.\n+     * If the member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, group, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(member, group, attribute));\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given member and resource.\n+     * That means, returns all MemberGroup rich attributes for the given member and groups that can access the given resource.\n+     * If the member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param member   member\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        //If member is not allowed, skip whole process\n+        if (!getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            return listOfRichAttributes;\n+        }\n+        List<Group> groupFromMembers = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            groupFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+        }\n+        List<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        groupsFromResources.retainAll(groupFromMembers);\n+        groupsFromResources = new ArrayList<>(new HashSet<>(groupsFromResources));\n+        for (Group groupElement : groupsFromResources) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(member, groupElement, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberGroup RichAttributes for given user and facility.\n+     * That means, returns all MemberGroup rich attributes for members that belong to the given user and are allowed\n+     * and those groups that can access the given facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        // get all groups from facility\n+        List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+        // get all groups from user\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        Set<Group> groupsFromMembers = new HashSet<>();\n+        for (Member memberElement : membersFromUser) {\n+            groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+        }\n+        // retain of groups\n+        groupsFromMembers.retainAll(groupsFromFacility);\n+        List<Group> retainedGroups = new ArrayList<>(groupsFromMembers);\n+        // all possible groups\n+        for (Group groupElement : retainedGroups) {\n+            // get all members for 'groupElement' variable\n+            List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, groupElement);\n+            membersFromGroup.retainAll(membersFromUser);\n+            // all possibilities\n+            for (Member memberElement : membersFromGroup) {\n+                if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                    Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute<>(memberElement, groupElement, attribute));\n+                }\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all MemberGroup RichAttributes.\n+     * That means, returns all MemberGroup rich attributes for all members who are allowed and all groups that can those\n+     * members access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberGroupAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+        List<Group> groupsFromVo = new ArrayList<>();\n+        for (Vo voElement : vos) {\n+            groupsFromVo.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n+        }\n+        groupsFromVo = new ArrayList<>(new HashSet<>(groupsFromVo));\n+        for (Group groupElement : groupsFromVo) {\n+            // get all members for 'groupElement' variable\n+            List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, groupElement);\n+            for (Member memberElement : membersFromGroup) {\n+                if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                    Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute<>(memberElement, groupElement, attribute));\n+                }\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------MEMBER-RESOURCE-------------------------------\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given user.\n+     * That means, returns all MemberResource rich attributes for those members, who belong to the given user and are allowed,\n+     * and for those resources that can those members access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member memberElement : members) {\n+            listOfRichAttributes.addAll(getMemberResourceAttributes(sess, memberElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given member.\n+     * That means, returns all MemberResource rich attributes for the given member and those resources that can those\n+     * members access.\n+     * If the given member is not allowed, an empty list is returned.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+            for (Resource resourceElement : resources) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, resourceElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resourceElement, member, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given group.\n+     * That means, returns all MemberResource rich attributes for allowed members from the given group and for the resources\n+     * that can those members access via this group.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        for (Resource resourceElement : resourcesFromGroup) {\n+            List<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+            membersForResourceElement.retainAll(membersFromGroup);\n+            membersForResourceElement = new ArrayList<>(new HashSet<>(membersForResourceElement));\n+            for (Member memberElement : membersForResourceElement) {\n+                if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                    Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute<>(resourceElement, memberElement, attribute));\n+                }\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given resource.\n+     * That means, returns all MemberResource rich attributes for the given resource and for those members that can\n+     * access the given resource and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+        for (Member memberElement : members) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resource, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resource, memberElement, attribute));\n+            }\n+        }\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given vo.\n+     * That means, returns all MemberResource rich attributes for resources that belongs to the given vo and for members\n+     * that can access those resource and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      vo\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+        for (Resource resourceElement : resources) {\n+            listOfRichAttributes.addAll(getMemberResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given facility.\n+     * That means, returns all MemberResource rich attributes for resources that belongs to the given facility and for\n+     * members who can access those resources and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        for (Resource resourceElement : resources) {\n+            listOfRichAttributes.addAll(getMemberResourceAttributes(sess, resourceElement, attrDef));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given host.\n+     * That means, returns all MemberResource rich attributes for resources that belongs to the given host's facility\n+     * and for members who can access those resources and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getMemberResourceAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given userExtSource.\n+     * That means, returns all MemberResource rich attributes for members of given userExtSource's user that are allowed\n+     * and for those resources that those members can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource userExtSource\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        listOfRichAttributes.addAll(getMemberResourceAttributes(sess, user, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given group and resource.\n+     * That means, returns all MemberResource rich attributes for the given resource and groups that can access this\n+     * resource via theirs allowed users.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param group    group\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Group group, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+        membersFromGroup.retainAll(membersFromResource);\n+        membersFromGroup = new ArrayList<>(new HashSet<>(membersFromGroup));\n+        for (Member memberElement : membersFromGroup) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resource, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(resource, memberElement, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given group and member.\n+     * That means, returns all MemberResource rich attributes for the given member and resources that can this member\n+     * access via the given group.\n+     * If the given member is not allowed, returns an empty list.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        //we can take everything from group, because member should be assigned to this group already\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+            for (Resource resourceElement : resourcesFromGroup) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, resourceElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resourceElement, member, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given resource and member.\n+     * That means, returns all MemberResource rich attributes for the given member and resource.\n+     * If the given member is not allowed, returns an empty list.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param member   member\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, resource, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(resource, member, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant MemberResource RichAttributes for given user and facility.\n+     * That means, returns all MemberResource rich attributes for the given user's members who are allowed and for\n+     * resources that can those members access and are located on the given facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+        membersFromUser.retainAll(membersFromFacility);\n+        List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        List<Resource> resourcesFromUser = getPerunBl().getUsersManagerBl().getAllowedResources(sess, user);\n+        resourcesFromUser.retainAll(resourcesFromFacility);\n+        resourcesFromUser = new ArrayList<>(new HashSet<>(resourcesFromUser));\n+        for (Resource resourceElement : resourcesFromUser) {\n+            List<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+            membersForResourceElement.retainAll(membersFromUser);\n+            membersForResourceElement = new ArrayList<>(new HashSet<>(membersForResourceElement));\n+            for (Member memberElement : membersForResourceElement) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resourceElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resourceElement, memberElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all MemberResource RichAttributes.\n+     * That means, returns all MemberResource RichAttributes for all members who are allowed and all resources they\n+     * can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getMemberResourceAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException, MemberResourceMismatchException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+        List<Resource> resources = new ArrayList<>();\n+        for (Vo voElement : vos) {\n+            resources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n+        }\n+        resources = new ArrayList<>(new HashSet<>(resources));\n+        for (Resource resourceElement : resources) {\n+            List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+            for (Member memberElement : membersFromResource) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, resourceElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(resourceElement, memberElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------USER-FACILITY-------------------------------\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given user.\n+     * That means, returns all UserFacility rich attributes for the given user and for facilities it can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param user    user\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, User user, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        for (Facility facilityElement : facilities) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(facilityElement, user, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given member.\n+     * That means, returns all UserFacility rich attributes for the facilities the given member can access and for its user.\n+     * If the given member is not allowed, returns an empty list\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Member member, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+            List<Facility> facilities = new ArrayList<>();\n+            for (Resource resourceElement : memberResources) {\n+                facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+            }\n+            facilities = new ArrayList<>(new HashSet<>(facilities));\n+            List<Facility> userAllowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+            for (Facility facilityElement : facilities) {\n+                if (userAllowedFacilities.contains(facilityElement)) {\n+                    Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute<>(facilityElement, user, attribute));\n+                }\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given group.\n+     * That means, returns all UserFacility rich attributes for the facilities that can access members from the given\n+     * group and that are allowed and for users from these members.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        List<User> users = new ArrayList<>();\n+        for (Member memberElement : members) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                users.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+            }\n+        }\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        List<Facility> facilities = new ArrayList<>();\n+        for (Resource resourceElement : resources) {\n+            facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+        }\n+        users = new ArrayList<>(new HashSet<>(users));\n+        for (User userElement : users) {\n+            List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n+            facilities.retainAll(facilitiesFromUser);\n+            facilities = new ArrayList<>(new HashSet<>(facilities));\n+            for (Facility facilityElement : facilities) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(facilityElement, userElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given resource.\n+     * That means, returns all UserFacility rich attributes for the facility from the given resource and for members\n+     * that can access this resource and are allowed.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+        for (User userElement : usersFromResource) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(facility, userElement, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given vo.\n+     * That means, returns all UserFacility rich attributes for the users who has at least one allowed member in the\n+     * given Vo and for the facilities that can those users access via a group in this Vo.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param vo      vo\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Vo vo, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getGroups(sess, vo);\n+        for (Group groupElement : groupsFromVo) {\n+            List<Facility> groupFacilities = getPerunBl().getFacilitiesManagerBl().getAssignedFacilities(sess, groupElement);\n+            List<Member> groupMembers = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, groupElement);\n+            List<Member> allowedMembers = new ArrayList<>();\n+            for (Member memberElement : groupMembers) {\n+                if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                    allowedMembers.add(memberElement);\n+                }\n+            }\n+            List<User> groupUsers = new ArrayList<>();\n+            for (Member memberElement : allowedMembers) {\n+                groupUsers.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+            }\n+            for (Facility facilityElement : groupFacilities) {\n+                for (User userElement : groupUsers) {\n+                    Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute<>(facilityElement, userElement, attribute));\n+                }\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given facility.\n+     * That means, returns all UserFacility rich attributes for the given facility and users that can access it.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+        for (User userElement : users) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(facility, userElement, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given host.\n+     * That means, returns all UserFacility rich attributes for the given host's facility and users that can access it.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param host    host\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Host host, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+        listOfRichAttributes.addAll(getUserFacilityAttributes(sess, facility, attrDef));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given userExtSource.\n+     * That means, returns all UserFacility rich attributes for the given userExtSource's user and for facilities it can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess          session\n+     * @param userExtSource userExtSource\n+     * @param attrDef       type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, UserExtSource userExtSource, AttributeDefinition attrDef) throws InternalErrorException, UserNotExistsException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        User user = getPerunBl().getUsersManagerBl().getUserByUserExtSource(sess, userExtSource);\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        for (Facility facilityElement : facilities) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(facilityElement, user, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given group and resource.\n+     * That means, returns all UserFacility rich attributes for users who has at least one allowed member in the given group\n+     * and for facilities that those users can access via the given group and via the given resource.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param group    group\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Group group, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        //get Users from Group\n+        List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+        List<User> usersFromGroup = new ArrayList<>();\n+        for (Member memberElement : members) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+            }\n+        }\n+        //get users from resource\n+        List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+        List<User> usersFromResource = new ArrayList<>();\n+        for (Member memberElement : membersFromResource) {\n+            if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, memberElement)) {\n+                usersFromResource.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+            }\n+        }\n+        usersFromGroup.retainAll(usersFromResource);\n+        usersFromGroup = new ArrayList<>(new HashSet<>(usersFromGroup));\n+        for (User userElement : usersFromGroup) {\n+            if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement).contains(facility)) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(facility, userElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given group and member.\n+     * That means, returns all UserFacility rich attributes for user of the given member and for facilities this member\n+     * can access via the given group.\n+     * If the given member is not allowed, returns an empty list.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param member  member\n+     * @param group   group\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Member member, Group group, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+            List<Facility> facilitiesFromResources = new ArrayList<>();\n+            for (Resource resourceElement : resourcesFromGroup) {\n+                facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+            }\n+            facilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n+            User userFromMember = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            for (Facility facilityElement : facilitiesFromResources) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userFromMember, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(facilityElement, userFromMember, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all relevant UserFacility RichAttributes for given resource and member.\n+     * That means, returns all UserFacility rich attributes for user of the given member and for facilities this member\n+     * can access via the given resource.\n+     * If the given member is not allowed, returns an empty list.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param member   member\n+     * @param resource resource\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, Member member, Resource resource, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        if (getPerunBl().getMembersManagerBl().isMemberAllowed(sess, member)) {\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            List<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n+            if (memberResources.contains(resource)) {\n+                User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(facility, user, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns UserFacility RichAttributes for the given user and facility.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess     session\n+     * @param user     user\n+     * @param facility facility\n+     * @param attrDef  type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, User user, Facility facility, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(facility, user, attribute));\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all UserFacility RichAttributes.\n+     * That means, returns all UserFacility rich attributes for all users and all facilities these users can access.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getUserFacilityAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+        for (Facility facilityElement : facilities) {\n+            List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facilityElement);\n+            for (User userElement : users) {\n+                Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute<>(facilityElement, userElement, attribute));\n+            }\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------------------------ENTITYLESS---------------------------------\n+\n+    /**\n+     * Returns all entityless rich attributes.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getEntitylessAttributes(PerunSession sess, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        List<String> keys = this.getEntitylessKeys(sess, attrDef);\n+        for (String keyElement : keys) {\n+            Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, keyElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute<>(keyElement, null, attribute));\n+        }\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Returns all entityless rich attributes for the given key.\n+     * Each rich attribute is returned only once.\n+     *\n+     * @param sess    session\n+     * @param key     key\n+     * @param attrDef type of attribute that will be returned\n+     * @return List of RichAttribute\n+     */\n+    private List<RichAttribute> getEntitylessAttributes(PerunSession sess, String key, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<>();\n+        Attribute attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, key, attrDef.getName());\n+        listOfRichAttributes.add(new RichAttribute<>(key, null, attribute));\n+        listOfRichAttributes = new ArrayList<>(new HashSet<>(listOfRichAttributes));\n+        return listOfRichAttributes;\n+    }\n+\n+    // --------------END OF METHODS FOR ATTRIBUTES DEPENDENCIES-------------------\n }\n",
            "diff_size": 10715
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/398/AttributesManagerBlImpl.java\nindex a4c915fe6ec..e19a13332a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/398/AttributesManagerBlImpl.java\n@@ -7042,7 +7042,7 @@ public class AttributesManagerBlImpl implements AttributesManagerBl {\n \t * @param inverseDependencies inverse dependencies that will be updated\n \t */\n \tprivate void updateInverseDependenciesForAttribute(Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n-\t\t                                               AttributeDefinition attributeDefinition,\n+ AttributeDefinition attributeDefinition,\n \t\t                                               Map<AttributeDefinition, Set<AttributeDefinition>> dependencies) {\n \n \t\tif (!inverseDependencies.containsKey(attributeDefinition)) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/398/AttributesManagerBlImpl.java\nindex a4c915fe6ec..462e62295f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/398/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/398/AttributesManagerBlImpl.java\n@@ -7042,7 +7042,7 @@ public class AttributesManagerBlImpl implements AttributesManagerBl {\n \t * @param inverseDependencies inverse dependencies that will be updated\n \t */\n \tprivate void updateInverseDependenciesForAttribute(Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies,\n-\t\t                                               AttributeDefinition attributeDefinition,\n+                                                 AttributeDefinition attributeDefinition,\n \t\t                                               Map<AttributeDefinition, Set<AttributeDefinition>> dependencies) {\n \n \t\tif (!inverseDependencies.containsKey(attributeDefinition)) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}