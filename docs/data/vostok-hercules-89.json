{
    "project_name": "vostok-hercules",
    "error_id": "89",
    "information": {
        "errors": [
            {
                "line": "78",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 163).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                eventValidator = container.register(new EventValidator(validationProperties));\n\n                sendRequestProcessor = container.register(new SendRequestProcessor(sendRequestProcessorProperties, eventSender, eventValidator, metricsCollector));\n\n                server = container.register(createHttpServer(httpServerProperties));\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/89/GateApplication.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/89/GateApplication.java\nindex 4037ee12d6c..00a119a76b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/89/GateApplication.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/89/GateApplication.java\n@@ -37,100 +37,100 @@ import java.util.Properties;\n  * @author Gregory Koshelev\n  */\n public class GateApplication {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(GateApplication.class);\n-\n-    private static MetricsCollector metricsCollector;\n-    private static CuratorClient curatorClient;\n-    private static AuthManager authManager;\n-    private static AuthValidationManager authValidationManager;\n-    private static StreamStorage streamStorage;\n-    private static EventSender eventSender;\n-    private static EventValidator eventValidator;\n-    private static SendRequestProcessor sendRequestProcessor;\n-    private static HttpServer server;\n-    private static BeaconService beaconService;\n-\n-    public static void main(String[] args) {\n-        Application.run(\"Hercules Gate\", \"gate\", args, (properties, container) -> {\n-                Properties metricsProperties = PropertiesUtil.ofScope(properties, Scopes.METRICS);\n-                Properties curatorProperties = PropertiesUtil.ofScope(properties, Scopes.CURATOR);\n-                Properties validationProperties = PropertiesUtil.ofScope(properties, \"validation\");\n-                Properties eventSenderProperties = PropertiesUtil.ofScope(properties, \"gate.event.sender\");\n-                Properties sendRequestProcessorProperties = PropertiesUtil.ofScope(properties, \"gate.send.request.processor\");\n-                Properties httpServerProperties = PropertiesUtil.ofScope(properties, Scopes.HTTP_SERVER);\n-                Properties sdProperties = PropertiesUtil.ofScope(properties, Scopes.SERVICE_DISCOVERY);\n-\n-                metricsCollector = container.register(new MetricsCollector(metricsProperties));\n-                CommonMetrics.registerCommonMetrics(metricsCollector);\n-\n-                curatorClient = container.register(new CuratorClient(curatorProperties));\n-\n-                authManager = container.register(new AuthManager(curatorClient));\n-\n-                authValidationManager = container.register(new AuthValidationManager(curatorClient));\n-\n-                streamStorage = container.register(new StreamStorage(new StreamRepository(curatorClient)));\n-\n-                eventSender = container.register(new EventSender(eventSenderProperties, new HashPartitioner(new NaiveHasher()), metricsCollector));\n-\n-                eventValidator = container.register(new EventValidator(validationProperties));\n-\n-                sendRequestProcessor = container.register(new SendRequestProcessor(sendRequestProcessorProperties, eventSender, eventValidator, metricsCollector));\n-\n-                server = container.register(createHttpServer(httpServerProperties));\n-\n-                beaconService = container.register(new BeaconService(sdProperties, curatorClient));\n-            });\n-    }\n-\n-    private static HttpServer createHttpServer(Properties httpServerProperties) {\n-        Properties throttlingProperties = PropertiesUtil.ofScope(httpServerProperties, Scopes.THROTTLING);\n-\n-        CapacityThrottle<HttpServerRequest> throttle = new CapacityThrottle<>(\n-                throttlingProperties,\n-                new DefaultHttpServerRequestWeigher());\n-        metricsCollector.gauge(\"throttling.totalCapacity\", throttle::totalCapacity);\n-        metricsCollector.gauge(\"throttling.availableCapacity\", throttle::availableCapacity);\n-\n-        ThrottledRequestProcessor<HttpServerRequest> throttledRequestProcessor = new DefaultThrottledHttpServerRequestProcessor();\n-\n-        long maxContentLength = PropertiesUtil.get(HttpServer.Props.MAX_CONTENT_LENGTH, httpServerProperties).get();\n-\n-        AuthProvider authProvider = new AuthProvider(new AdminAuthManager(Collections.emptySet()), authManager);\n-        HandlerWrapper authHandlerWrapper = new OrdinaryAuthHandlerWrapper(authProvider);\n-\n-        HttpHandler sendAsyncHandler = authHandlerWrapper.wrap(\n-                new GateHandler(\n-                        authProvider,\n-                        throttle,\n-                        throttledRequestProcessor,\n-                        sendRequestProcessor,\n-                        authValidationManager,\n-                        streamStorage,\n-                        true,\n-                        maxContentLength,\n-                        metricsCollector));\n-        HttpHandler sendHandler = authHandlerWrapper.wrap(\n-                new GateHandler(\n-                        authProvider,\n-                        throttle,\n-                        throttledRequestProcessor,\n-                        sendRequestProcessor,\n-                        authValidationManager,\n-                        streamStorage,\n-                        false,\n-                        maxContentLength,\n-                        metricsCollector));\n-\n-        RouteHandler handler = new InstrumentedRouteHandlerBuilder(httpServerProperties, metricsCollector).\n-                post(\"/stream/sendAsync\", sendAsyncHandler).\n-                post(\"/stream/send\", sendHandler).\n-                build();\n-\n-        return new UndertowHttpServer(\n-                Application.application().getConfig().getHost(),\n-                Application.application().getConfig().getPort(),\n-                httpServerProperties,\n-                handler);\n-    }\n+  private static final Logger LOGGER = LoggerFactory.getLogger(GateApplication.class);\n+\n+  private static MetricsCollector metricsCollector;\n+  private static CuratorClient curatorClient;\n+  private static AuthManager authManager;\n+  private static AuthValidationManager authValidationManager;\n+  private static StreamStorage streamStorage;\n+  private static EventSender eventSender;\n+  private static EventValidator eventValidator;\n+  private static SendRequestProcessor sendRequestProcessor;\n+  private static HttpServer server;\n+  private static BeaconService beaconService;\n+\n+  public static void main(String[] args) {\n+    Application.run(\"Hercules Gate\", \"gate\", args, (properties, container) -> {\n+      Properties metricsProperties = PropertiesUtil.ofScope(properties, Scopes.METRICS);\n+      Properties curatorProperties = PropertiesUtil.ofScope(properties, Scopes.CURATOR);\n+      Properties validationProperties = PropertiesUtil.ofScope(properties, \"validation\");\n+      Properties eventSenderProperties = PropertiesUtil.ofScope(properties, \"gate.event.sender\");\n+      Properties sendRequestProcessorProperties = PropertiesUtil.ofScope(properties, \"gate.send.request.processor\");\n+      Properties httpServerProperties = PropertiesUtil.ofScope(properties, Scopes.HTTP_SERVER);\n+      Properties sdProperties = PropertiesUtil.ofScope(properties, Scopes.SERVICE_DISCOVERY);\n+\n+      metricsCollector = container.register(new MetricsCollector(metricsProperties));\n+      CommonMetrics.registerCommonMetrics(metricsCollector);\n+\n+      curatorClient = container.register(new CuratorClient(curatorProperties));\n+\n+      authManager = container.register(new AuthManager(curatorClient));\n+\n+      authValidationManager = container.register(new AuthValidationManager(curatorClient));\n+\n+      streamStorage = container.register(new StreamStorage(new StreamRepository(curatorClient)));\n+\n+      eventSender = container.register(new EventSender(eventSenderProperties, new HashPartitioner(new NaiveHasher()), metricsCollector));\n+\n+      eventValidator = container.register(new EventValidator(validationProperties));\n+\n+      sendRequestProcessor = container.register(new SendRequestProcessor(sendRequestProcessorProperties, eventSender, eventValidator, metricsCollector));\n+\n+      server = container.register(createHttpServer(httpServerProperties));\n+\n+      beaconService = container.register(new BeaconService(sdProperties, curatorClient));\n+    });\n+  }\n+\n+  private static HttpServer createHttpServer(Properties httpServerProperties) {\n+    Properties throttlingProperties = PropertiesUtil.ofScope(httpServerProperties, Scopes.THROTTLING);\n+\n+    CapacityThrottle<HttpServerRequest> throttle = new CapacityThrottle<>(\n+      throttlingProperties,\n+      new DefaultHttpServerRequestWeigher());\n+    metricsCollector.gauge(\"throttling.totalCapacity\", throttle::totalCapacity);\n+    metricsCollector.gauge(\"throttling.availableCapacity\", throttle::availableCapacity);\n+\n+    ThrottledRequestProcessor<HttpServerRequest> throttledRequestProcessor = new DefaultThrottledHttpServerRequestProcessor();\n+\n+    long maxContentLength = PropertiesUtil.get(HttpServer.Props.MAX_CONTENT_LENGTH, httpServerProperties).get();\n+\n+    AuthProvider authProvider = new AuthProvider(new AdminAuthManager(Collections.emptySet()), authManager);\n+    HandlerWrapper authHandlerWrapper = new OrdinaryAuthHandlerWrapper(authProvider);\n+\n+    HttpHandler sendAsyncHandler = authHandlerWrapper.wrap(\n+      new GateHandler(\n+        authProvider,\n+        throttle,\n+        throttledRequestProcessor,\n+        sendRequestProcessor,\n+        authValidationManager,\n+        streamStorage,\n+        true,\n+        maxContentLength,\n+        metricsCollector));\n+    HttpHandler sendHandler = authHandlerWrapper.wrap(\n+      new GateHandler(\n+        authProvider,\n+        throttle,\n+        throttledRequestProcessor,\n+        sendRequestProcessor,\n+        authValidationManager,\n+        streamStorage,\n+        false,\n+        maxContentLength,\n+        metricsCollector));\n+\n+    RouteHandler handler = new InstrumentedRouteHandlerBuilder(httpServerProperties, metricsCollector).\n+      post(\"/stream/sendAsync\", sendAsyncHandler).\n+      post(\"/stream/send\", sendHandler).\n+      build();\n+\n+    return new UndertowHttpServer(\n+      Application.application().getConfig().getHost(),\n+      Application.application().getConfig().getPort(),\n+      httpServerProperties,\n+      handler);\n+  }\n }\n",
            "diff_size": 96
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/89/GateApplication.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/89/GateApplication.java\nindex 4037ee12d6c..d97bad700bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/89/GateApplication.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/89/GateApplication.java\n@@ -52,7 +52,7 @@ public class GateApplication {\n \n     public static void main(String[] args) {\n         Application.run(\"Hercules Gate\", \"gate\", args, (properties, container) -> {\n-                Properties metricsProperties = PropertiesUtil.ofScope(properties, Scopes.METRICS);\n+    Properties metricsProperties = PropertiesUtil.ofScope(properties, Scopes.METRICS);\n                 Properties curatorProperties = PropertiesUtil.ofScope(properties, Scopes.CURATOR);\n                 Properties validationProperties = PropertiesUtil.ofScope(properties, \"validation\");\n                 Properties eventSenderProperties = PropertiesUtil.ofScope(properties, \"gate.event.sender\");\n@@ -106,26 +106,22 @@ public class GateApplication {\n                         throttledRequestProcessor,\n                         sendRequestProcessor,\n                         authValidationManager,\n-                        streamStorage,\n-                        true,\n+                        streamStorage, true,\n                         maxContentLength,\n                         metricsCollector));\n-        HttpHandler sendHandler = authHandlerWrapper.wrap(\n+\n+HttpHandler sendHandler = authHandlerWrapper.wrap(\n                 new GateHandler(\n                         authProvider,\n                         throttle,\n                         throttledRequestProcessor,\n                         sendRequestProcessor,\n                         authValidationManager,\n-                        streamStorage,\n-                        false,\n+                        streamStorage, false,\n                         maxContentLength,\n                         metricsCollector));\n \n-        RouteHandler handler = new InstrumentedRouteHandlerBuilder(httpServerProperties, metricsCollector).\n-                post(\"/stream/sendAsync\", sendAsyncHandler).\n-                post(\"/stream/send\", sendHandler).\n-                build();\n+RouteHandler handler = new InstrumentedRouteHandlerBuilder(httpServerProperties, metricsCollector).post(\"/stream/sendAsync\", sendAsyncHandler).post(\"/stream/send\", sendHandler).build();\n \n         return new UndertowHttpServer(\n                 Application.application().getConfig().getHost(),\n@@ -133,4 +129,4 @@ public class GateApplication {\n                 httpServerProperties,\n                 handler);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/89/GateApplication.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/89/GateApplication.java\nindex 4037ee12d6c..e609d724d19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/89/GateApplication.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/89/GateApplication.java\n@@ -29,16 +29,17 @@ import ru.kontur.vostok.hercules.undertow.util.DefaultThrottledHttpServerRequest\n import ru.kontur.vostok.hercules.undertow.util.UndertowHttpServer;\n import ru.kontur.vostok.hercules.undertow.util.handlers.InstrumentedRouteHandlerBuilder;\n import ru.kontur.vostok.hercules.util.properties.PropertiesUtil;\n-\n import java.util.Collections;\n import java.util.Properties;\n \n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class GateApplication {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(GateApplication.class);\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(GateApplication.class);\n     private static MetricsCollector metricsCollector;\n     private static CuratorClient curatorClient;\n     private static AuthManager authManager;\n@@ -52,85 +53,52 @@ public class GateApplication {\n \n     public static void main(String[] args) {\n         Application.run(\"Hercules Gate\", \"gate\", args, (properties, container) -> {\n-                Properties metricsProperties = PropertiesUtil.ofScope(properties, Scopes.METRICS);\n-                Properties curatorProperties = PropertiesUtil.ofScope(properties, Scopes.CURATOR);\n-                Properties validationProperties = PropertiesUtil.ofScope(properties, \"validation\");\n-                Properties eventSenderProperties = PropertiesUtil.ofScope(properties, \"gate.event.sender\");\n-                Properties sendRequestProcessorProperties = PropertiesUtil.ofScope(properties, \"gate.send.request.processor\");\n-                Properties httpServerProperties = PropertiesUtil.ofScope(properties, Scopes.HTTP_SERVER);\n-                Properties sdProperties = PropertiesUtil.ofScope(properties, Scopes.SERVICE_DISCOVERY);\n-\n-                metricsCollector = container.register(new MetricsCollector(metricsProperties));\n-                CommonMetrics.registerCommonMetrics(metricsCollector);\n-\n-                curatorClient = container.register(new CuratorClient(curatorProperties));\n-\n-                authManager = container.register(new AuthManager(curatorClient));\n-\n-                authValidationManager = container.register(new AuthValidationManager(curatorClient));\n-\n-                streamStorage = container.register(new StreamStorage(new StreamRepository(curatorClient)));\n-\n-                eventSender = container.register(new EventSender(eventSenderProperties, new HashPartitioner(new NaiveHasher()), metricsCollector));\n-\n-                eventValidator = container.register(new EventValidator(validationProperties));\n-\n-                sendRequestProcessor = container.register(new SendRequestProcessor(sendRequestProcessorProperties, eventSender, eventValidator, metricsCollector));\n-\n-                server = container.register(createHttpServer(httpServerProperties));\n-\n-                beaconService = container.register(new BeaconService(sdProperties, curatorClient));\n-            });\n+            Properties metricsProperties = PropertiesUtil.ofScope(properties, Scopes.METRICS);\n+            Properties curatorProperties = PropertiesUtil.ofScope(properties, Scopes.CURATOR);\n+            Properties validationProperties = PropertiesUtil.ofScope(properties, \"validation\");\n+            Properties eventSenderProperties = PropertiesUtil.ofScope(properties, \"gate.event.sender\");\n+            Properties sendRequestProcessorProperties = PropertiesUtil.ofScope(properties, \"gate.send.request.processor\");\n+            Properties httpServerProperties = PropertiesUtil.ofScope(properties, Scopes.HTTP_SERVER);\n+            Properties sdProperties = PropertiesUtil.ofScope(properties, Scopes.SERVICE_DISCOVERY);\n+            metricsCollector = container.register(new MetricsCollector(metricsProperties));\n+            CommonMetrics.registerCommonMetrics(metricsCollector);\n+            curatorClient = container.register(new CuratorClient(curatorProperties));\n+            authManager = container.register(new AuthManager(curatorClient));\n+            authValidationManager = container.register(new AuthValidationManager(curatorClient));\n+            streamStorage = container.register(new StreamStorage(new StreamRepository(curatorClient)));\n+            eventSender = container.register(new EventSender(\n+                eventSenderProperties,\n+                new HashPartitioner(new NaiveHasher()),\n+                metricsCollector\n+                                             ));\n+            eventValidator = container.register(new EventValidator(validationProperties));\n+            sendRequestProcessor = container.register(new SendRequestProcessor(sendRequestProcessorProperties, eventSender, eventValidator, metricsCollector));\n+            server = container.register(createHttpServer(httpServerProperties));\n+            beaconService = container.register(new BeaconService(sdProperties, curatorClient));\n+        });\n     }\n \n     private static HttpServer createHttpServer(Properties httpServerProperties) {\n         Properties throttlingProperties = PropertiesUtil.ofScope(httpServerProperties, Scopes.THROTTLING);\n-\n-        CapacityThrottle<HttpServerRequest> throttle = new CapacityThrottle<>(\n-                throttlingProperties,\n-                new DefaultHttpServerRequestWeigher());\n+        CapacityThrottle<HttpServerRequest> throttle = new CapacityThrottle<>(throttlingProperties, new DefaultHttpServerRequestWeigher());\n         metricsCollector.gauge(\"throttling.totalCapacity\", throttle::totalCapacity);\n         metricsCollector.gauge(\"throttling.availableCapacity\", throttle::availableCapacity);\n \n         ThrottledRequestProcessor<HttpServerRequest> throttledRequestProcessor = new DefaultThrottledHttpServerRequestProcessor();\n-\n-        long maxContentLength = PropertiesUtil.get(HttpServer.Props.MAX_CONTENT_LENGTH, httpServerProperties).get();\n-\n+        long maxContentLength = PropertiesUtil.get(HttpServer.Props.MAX_CONTENT_LENGTH, httpServerProperties)\n+        .get();\n         AuthProvider authProvider = new AuthProvider(new AdminAuthManager(Collections.emptySet()), authManager);\n         HandlerWrapper authHandlerWrapper = new OrdinaryAuthHandlerWrapper(authProvider);\n-\n-        HttpHandler sendAsyncHandler = authHandlerWrapper.wrap(\n-                new GateHandler(\n-                        authProvider,\n-                        throttle,\n-                        throttledRequestProcessor,\n-                        sendRequestProcessor,\n-                        authValidationManager,\n-                        streamStorage,\n-                        true,\n-                        maxContentLength,\n-                        metricsCollector));\n-        HttpHandler sendHandler = authHandlerWrapper.wrap(\n-                new GateHandler(\n-                        authProvider,\n-                        throttle,\n-                        throttledRequestProcessor,\n-                        sendRequestProcessor,\n-                        authValidationManager,\n-                        streamStorage,\n-                        false,\n-                        maxContentLength,\n-                        metricsCollector));\n-\n-        RouteHandler handler = new InstrumentedRouteHandlerBuilder(httpServerProperties, metricsCollector).\n-                post(\"/stream/sendAsync\", sendAsyncHandler).\n-                post(\"/stream/send\", sendHandler).\n-                build();\n-\n-        return new UndertowHttpServer(\n-                Application.application().getConfig().getHost(),\n-                Application.application().getConfig().getPort(),\n-                httpServerProperties,\n-                handler);\n+        HttpHandler sendAsyncHandler = authHandlerWrapper.wrap(new GateHandler(authProvider, throttle, throttledRequestProcessor, sendRequestProcessor, authValidationManager, streamStorage, true, maxContentLength, metricsCollector));\n+        HttpHandler sendHandler = authHandlerWrapper.wrap(new GateHandler(authProvider, throttle, throttledRequestProcessor, sendRequestProcessor, authValidationManager, streamStorage, false, maxContentLength, metricsCollector));\n+        RouteHandler handler = new InstrumentedRouteHandlerBuilder(httpServerProperties, metricsCollector)\n+            .post(\"/stream/sendAsync\", sendAsyncHandler)\n+            .post(\"/stream/send\", sendHandler)\n+            .build();\n+        return new UndertowHttpServer(Application.application()\n+        .getConfig()\n+        .getHost(), Application.application()\n+        .getConfig()\n+        .getPort(), httpServerProperties, handler);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 76
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}