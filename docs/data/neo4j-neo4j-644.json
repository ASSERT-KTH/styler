{
    "project_name": "neo4j-neo4j",
    "error_id": "644",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/644/Type.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/644/Type.java\nindex 6d5f781973b..f57192af84b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/644/Type.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/644/Type.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Comparator;\n@@ -46,7 +47,7 @@ abstract class Type\n     /**\n      * Compares {@link Type types} against each other. The ordering adheres to that of {@link ValueGroup}.\n      */\n-    static final Comparator<Type> COMPARATOR = comparing( t -> t.valueGroup );\n+    static final Comparator<Type> COMPARATOR = comparing(t -> t.valueGroup);\n \n     /**\n      * {@link ValueGroup} for values that this type manages.\n@@ -69,7 +70,7 @@ abstract class Type\n      */\n     private final Value maxValue;\n \n-    Type( ValueGroup valueGroup, byte typeId, Value minValue, Value maxValue )\n+    Type(ValueGroup valueGroup, byte typeId, Value minValue, Value maxValue)\n     {\n         this.valueGroup = valueGroup;\n         this.typeId = typeId;\n@@ -79,126 +80,136 @@ abstract class Type\n \n     /**\n      * Size of the key state of this type in the given {@link GenericKey}.\n+     *\n      * @param state the {@link GenericKey} holding the initialized key state.\n      * @return size, in bytes of the key state, not counting tree overhead or entity id.\n      */\n-    abstract int valueSize( GenericKey state );\n+    abstract int valueSize(GenericKey state);\n \n     /**\n      * Copies key state from {@code from} to {@code to}.\n-     * @param to key state to copy into.\n+     *\n+     * @param to   key state to copy into.\n      * @param from key state to copy from.\n      */\n-    abstract void copyValue( GenericKey to, GenericKey from );\n+    abstract void copyValue(GenericKey to, GenericKey from);\n \n     /**\n      * Calculates minimal splitter between {@code left} and {@code right} and copies that state, potentially a sub-part of that state into {@code into}.\n-     * @param left left key state to compare.\n+     *\n+     * @param left  left key state to compare.\n      * @param right right key state to compare.\n-     * @param into state which gets initialized with the minimal splitter key state between {@code left} and {@code right}.\n+     * @param into  state which gets initialized with the minimal splitter key state between {@code left} and {@code right}.\n      */\n-    void minimalSplitter( GenericKey left, GenericKey right, GenericKey into )\n+    void minimalSplitter(GenericKey left, GenericKey right, GenericKey into)\n     {\n         // if not a specific implementation then default is to just copy from 'right'\n-        into.copyFromInternal( right );\n+        into.copyFromInternal(right);\n     }\n \n     /**\n      * Materializes the key state into an actual {@link Value} object.\n+     *\n      * @param state key state to materialize a {@link Value} from.\n      * @return a {@link Value} from the given {@code state}.\n      */\n-    abstract Value asValue( GenericKey state );\n+    abstract Value asValue(GenericKey state);\n \n     /**\n      * Compares {@code left} and {@code right} key state. Follows semantics of {@link Comparator#compare(Object, Object)}.\n-     * @param left left key state to compare.\n+     *\n+     * @param left  left key state to compare.\n      * @param right right key state to compare.\n      * @return comparison between the {@code left} and {@code right} key state.\n      */\n-    abstract int compareValue( GenericKey left, GenericKey right );\n+    abstract int compareValue(GenericKey left, GenericKey right);\n \n     /**\n      * Serializes key state from {@code state} into the {@code cursor}.\n+     *\n      * @param cursor {@link PageCursor} initialized at correct offset, capable of writing the key state.\n-     * @param state key state to write to the {@code cursor}.\n+     * @param state  key state to write to the {@code cursor}.\n      */\n-    abstract void putValue( PageCursor cursor, GenericKey state );\n+    abstract void putValue(PageCursor cursor, GenericKey state);\n \n     /**\n      * Deserializes key state from {@code cursor} into {@code state}.\n+     *\n      * @param cursor {@link PageCursor} initialized at correct offset to read from.\n-     * @param size total number of remaining bytes for this key state.\n-     * @param into {@link GenericKey} to deserialize the key state into.\n+     * @param size   total number of remaining bytes for this key state.\n+     * @param into   {@link GenericKey} to deserialize the key state into.\n      * @return whether or not this was a sane read. Returning {@code false} should mean that it was simply a bad read,\n      * and that the next read in this shouldRetry loop will get a good read. This will signal that it's not worth it to read any further\n      * for this key and that the cursor have been told about this error, via {@link PageCursor#setCursorException(String)}.\n      * Otherwise, for a successful read, returns {@code true}.\n      */\n-    abstract boolean readValue( PageCursor cursor, int size, GenericKey into );\n+    abstract boolean readValue(PageCursor cursor, int size, GenericKey into);\n \n     /**\n      * Initializes key state to be the lowest possible of this type, i.e. all actual key states of this type are bigger in comparison.\n+     *\n      * @param state key state to initialize as lowest of this type.\n      */\n-    void initializeAsLowest( GenericKey state )\n+    void initializeAsLowest(GenericKey state)\n     {\n-        state.writeValue( minValue, LOW );\n+        state.writeValue(minValue, LOW);\n     }\n \n     /**\n      * Initializes key state to be the highest possible of this type, i.e. all actual key states of this type are smaller in comparison.\n+     *\n      * @param state key state to initialize as highest of this type.\n      */\n-    void initializeAsHighest( GenericKey state )\n+    void initializeAsHighest(GenericKey state)\n     {\n-        state.writeValue( maxValue, HIGH );\n+        state.writeValue(maxValue, HIGH);\n     }\n \n     /**\n      * Generate a string-representation of the key state of this type, mainly for debugging purposes.\n+     *\n      * @param state the key state containing the state to generate string representation for.\n      * @return a string-representation of the key state of this type.\n      */\n-    String toString( GenericKey state )\n+    String toString(GenericKey state)\n     {\n         // For most types it's a straight-forward Value#toString().\n-        return asValue( state ).toString();\n+        return asValue(state).toString();\n     }\n \n-    static byte[] ensureBigEnough( byte[] array, int targetLength )\n+    static byte[] ensureBigEnough(byte[] array, int targetLength)\n     {\n         return array == null || array.length < targetLength ? new byte[targetLength] : array;\n     }\n \n-    static byte[][] ensureBigEnough( byte[][] array, int targetLength )\n+    static byte[][] ensureBigEnough(byte[][] array, int targetLength)\n     {\n         return array == null || array.length < targetLength ? new byte[targetLength][] : array;\n     }\n \n-    static long[] ensureBigEnough( long[] array, int targetLength )\n+    static long[] ensureBigEnough(long[] array, int targetLength)\n     {\n         return array == null || array.length < targetLength ? new long[targetLength] : array;\n     }\n \n-    static boolean booleanOf( long longValue )\n+    static boolean booleanOf(long longValue)\n     {\n         return (longValue & MASK_BOOLEAN) == TRUE;\n     }\n \n-    String toDetailedString( GenericKey state )\n+    String toDetailedString(GenericKey state)\n     {\n-        StringJoiner joiner = new StringJoiner( \", \" );\n-        joiner.add( toString( state ) );\n+        StringJoiner joiner = new StringJoiner(\", \");\n+        joiner.add(toString(state));\n \n         // Mutable, meta-state\n-        joiner.add( \"type=\" + state.type.getClass().getSimpleName() );\n-        joiner.add( \"inclusion=\" + state.inclusion );\n-        joiner.add( \"isArray=\" + state.isArray );\n+        joiner.add(\"type=\" + state.type.getClass().getSimpleName());\n+        joiner.add(\"inclusion=\" + state.inclusion);\n+        joiner.add(\"isArray=\" + state.isArray);\n \n-        addTypeSpecificDetails( joiner, state );\n+        addTypeSpecificDetails(joiner, state);\n         return joiner.toString();\n     }\n \n-    protected abstract void addTypeSpecificDetails( StringJoiner joiner, GenericKey state );\n+    protected abstract void addTypeSpecificDetails(StringJoiner joiner, GenericKey state);\n }\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}