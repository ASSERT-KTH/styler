{
    "project_name": "wso2-attic-commons",
    "error_id": "259",
    "information": {
        "errors": [
            {
                "line": "73",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            Variable var = __scope.getVisibleVariable(varName);\n            VariableInstance varInstance = new VariableInstance(__scopeInstanceId, var);\n            Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n            value = DOMUtils.domToString(varNode);\n        }\n        catch(Throwable e)",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/259/EventContextImpl.java\nindex 544a59e0e58..0f3ea6cf801 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/259/EventContextImpl.java\n@@ -70,7 +70,7 @@ public class EventContextImpl implements EventContext\n         {\n             Variable var = __scope.getVisibleVariable(varName);\n             VariableInstance varInstance = new VariableInstance(__scopeInstanceId, var);\n-            Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n+        Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n             value = DOMUtils.domToString(varNode);\n         }\n         catch(Throwable e)\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/259/EventContextImpl.java\nindex 544a59e0e58..36699deb418 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/259/EventContextImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.runtime;\n \n import org.apache.ode.bpel.evt.EventContext;\n@@ -28,90 +29,83 @@ import java.util.Iterator;\n \n /**\n  * Bpel Event Context Implementation.\n+ *\n  * @author Raja Balasubramanian\n  */\n-public class EventContextImpl implements EventContext\n-{\n-    /**\n-     * Scope Object used in this scope instance.\n-     */\n-    private OScope __scope;\n-    /**\n-     * Scope Instance ID\n-     */\n-    private Long __scopeInstanceId;\n-    /**\n-     * BPEL Runtime Context\n-     */\n-    private BpelRuntimeContext __runtimeContext;\n+public class EventContextImpl implements EventContext {\n+  /**\n+   * Scope Object used in this scope instance.\n+   */\n+  private OScope __scope;\n+  /**\n+   * Scope Instance ID\n+   */\n+  private Long __scopeInstanceId;\n+  /**\n+   * BPEL Runtime Context\n+   */\n+  private BpelRuntimeContext __runtimeContext;\n \n-    /**\n-     * Constructor\n-     * @param __scope Scope Object used in this scope instance.\n-     * @param __scopeInstanceId Scope Instance ID\n-     * @param __runtimeContext BPEL Runtime Context\n-     */\n-    public EventContextImpl(OScope __scope, Long __scopeInstanceId, BpelRuntimeContext __runtimeContext)\n-    {\n-        this.__scope = __scope;\n-        this.__scopeInstanceId = __scopeInstanceId;\n-        this.__runtimeContext = __runtimeContext;\n-    }\n+  /**\n+   * Constructor\n+   *\n+   * @param __scope           Scope Object used in this scope instance.\n+   * @param __scopeInstanceId Scope Instance ID\n+   * @param __runtimeContext  BPEL Runtime Context\n+   */\n+  public EventContextImpl(OScope __scope, Long __scopeInstanceId, BpelRuntimeContext __runtimeContext) {\n+    this.__scope = __scope;\n+    this.__scopeInstanceId = __scopeInstanceId;\n+    this.__runtimeContext = __runtimeContext;\n+  }\n \n-    /**\n-     * Get Variable data for the given variable name, for this scope instance\n-     * @param varName Variable Name\n-     * @return DOM Node as XML String. If no value exists or variable not initialized, NULL will be returnrd.\n-     */\n-    public String getVariableData(String varName)\n-    {\n-        String value = null;\n-        try\n-        {\n-            Variable var = __scope.getVisibleVariable(varName);\n-            VariableInstance varInstance = new VariableInstance(__scopeInstanceId, var);\n-            Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n-            value = DOMUtils.domToString(varNode);\n-        }\n-        catch(Throwable e)\n-        {\n-            //Don't throw any exception back to the caller. Just return null as value.\n-        }\n-        return value;\n+  /**\n+   * Get Variable data for the given variable name, for this scope instance\n+   *\n+   * @param varName Variable Name\n+   * @return DOM Node as XML String. If no value exists or variable not initialized, NULL will be returnrd.\n+   */\n+  public String getVariableData(String varName) {\n+    String value = null;\n+    try {\n+      Variable var = __scope.getVisibleVariable(varName);\n+      VariableInstance varInstance = new VariableInstance(__scopeInstanceId, var);\n+      Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n+      value = DOMUtils.domToString(varNode);\n+    } catch (Throwable e) {\n+      //Don't throw any exception back to the caller. Just return null as value.\n     }\n+    return value;\n+  }\n \n-    /**\n-     * Get All variable names used in this scope Instance\n-     * @return Array of Variable Names. If no variable(s) exists, null will be returned.\n-     */\n-    public String[] getVariableNames()\n-    {\n-        String[] __varNames = null;\n-        try\n-        {\n-            int varSize = __scope.variables.size();\n-            __varNames = new String[varSize];\n+  /**\n+   * Get All variable names used in this scope Instance\n+   *\n+   * @return Array of Variable Names. If no variable(s) exists, null will be returned.\n+   */\n+  public String[] getVariableNames() {\n+    String[] __varNames = null;\n+    try {\n+      int varSize = __scope.variables.size();\n+      __varNames = new String[varSize];\n \n-            Iterator<String> _varNames = __scope.variables.keySet().iterator();\n-            int i = 0;\n-            while(_varNames.hasNext())\n-            {\n-                __varNames[i++] = _varNames.next();\n-            }\n-        }\n-        catch(Throwable e)\n-        {\n-            //Don't throw any exception back to the caller. Just return null as value.\n-        }\n-        return __varNames;\n+      Iterator<String> _varNames = __scope.variables.keySet().iterator();\n+      int i = 0;\n+      while (_varNames.hasNext()) {\n+        __varNames[i++] = _varNames.next();\n+      }\n+    } catch (Throwable e) {\n+      //Don't throw any exception back to the caller. Just return null as value.\n     }\n+    return __varNames;\n+  }\n \n-    /**\n-     * Get ScopeInstanceId\n-     * @return scopeInstanceId\n-     */\n-    public Long getScopeInstanceId()\n-    {\n-        return __scopeInstanceId;\n-    }\n+  /**\n+   * Get ScopeInstanceId\n+   *\n+   * @return scopeInstanceId\n+   */\n+  public Long getScopeInstanceId() {\n+    return __scopeInstanceId;\n+  }\n }\n",
            "diff_size": 83
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/259/EventContextImpl.java\nindex 544a59e0e58..6311b889159 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/259/EventContextImpl.java\n@@ -110,8 +110,7 @@ public class EventContextImpl implements EventContext\n      * Get ScopeInstanceId\n      * @return scopeInstanceId\n      */\n-    public Long getScopeInstanceId()\n-    {\n+    public Long getScopeInstanceId() {\n         return __scopeInstanceId;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/259/EventContextImpl.java\nindex 544a59e0e58..0f3ea6cf801 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/259/EventContextImpl.java\n@@ -70,7 +70,7 @@ public class EventContextImpl implements EventContext\n         {\n             Variable var = __scope.getVisibleVariable(varName);\n             VariableInstance varInstance = new VariableInstance(__scopeInstanceId, var);\n-            Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n+        Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n             value = DOMUtils.domToString(varNode);\n         }\n         catch(Throwable e)\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/259/EventContextImpl.java\nindex 544a59e0e58..77cd3b74363 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/259/EventContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/259/EventContextImpl.java\n@@ -70,7 +70,7 @@ public class EventContextImpl implements EventContext\n         {\n             Variable var = __scope.getVisibleVariable(varName);\n             VariableInstance varInstance = new VariableInstance(__scopeInstanceId, var);\n-            Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name, false);\n+            Node varNode = __runtimeContext.readVariable(varInstance.scopeInstance, varInstance.declaration.name,false);\n             value = DOMUtils.domToString(varNode);\n         }\n         catch(Throwable e)\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}