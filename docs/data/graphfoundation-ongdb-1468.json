{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1468",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "252",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "315",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "385",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "407",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "415",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "510",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "519",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "553",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "582",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "643",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "736",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "736",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "809",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "809",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "811",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "811",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "817",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "817",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "831",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "831",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "833",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "833",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "843",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "843",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "846",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "855",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "855",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "871",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "871",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "880",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "880",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "882",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "882",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "887",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "887",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "892",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "892",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "901",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "901",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "927",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "927",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "929",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "929",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "934",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "934",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "939",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "950",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "950",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "950",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "961",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "961",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "961",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "964",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "964",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "964",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "966",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "966",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1468/DurationValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1468/DurationValue.java\nindex 56f58be04c8..d96f3999852 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1468/DurationValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1468/DurationValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.lang.invoke.MethodHandle;\n@@ -71,916 +72,898 @@ import static org.neo4j.values.utils.TemporalUtil.SECONDS_PER_DAY;\n  */\n public final class DurationValue extends ScalarValue implements TemporalAmount, Comparable<DurationValue>\n {\n-    public static DurationValue duration( Duration value )\n-    {\n-        requireNonNull( value, \"Duration\" );\n-        return newDuration( 0, 0, value.getSeconds(), value.getNano() );\n-    }\n-\n-    public static DurationValue duration( Period value )\n-    {\n-        requireNonNull( value, \"Period\" );\n-        return newDuration( value.toTotalMonths(), value.getDays(), 0, 0 );\n-    }\n-\n-    public static DurationValue duration( long months, long days, long seconds, long nanos )\n-    {\n-        return newDuration( months, days, seconds, nanos );\n-    }\n-\n-    public static DurationValue parse( CharSequence text )\n-    {\n-        return TemporalValue.parse( DurationValue.class, PATTERN, DurationValue::parse, text );\n-    }\n-\n-    public static DurationValue parse( TextValue text )\n-    {\n-        return TemporalValue.parse( DurationValue.class, PATTERN, DurationValue::parse, text );\n-    }\n-\n-    static DurationValue build( Map<String,? extends AnyValue> input )\n-    {\n-        StructureBuilder<AnyValue,DurationValue> builder = builder();\n-        for ( Map.Entry<String,? extends AnyValue> entry : input.entrySet() )\n-        {\n-            builder.add( entry.getKey(), entry.getValue() );\n-        }\n-        return builder.build();\n-    }\n-\n-    public static DurationValue build( MapValue map )\n-    {\n-        return StructureBuilder.build( builder(), map );\n-    }\n-\n-    public static DurationValue between( TemporalUnit unit, Temporal from, Temporal to )\n-    {\n-        if ( unit == null )\n-        {\n-            return durationBetween( from, to );\n-        }\n-        else if ( unit instanceof ChronoUnit )\n-        {\n-            switch ( (ChronoUnit) unit )\n-            {\n-            case MONTHS:\n-                return newDuration( assertValidUntil( from, to ,unit ), 0, 0, 0 );\n-            case DAYS:\n-                return newDuration( 0, assertValidUntil( from, to ,unit ), 0, 0 );\n-            case SECONDS:\n-                return durationInSecondsAndNanos( from, to );\n-            default:\n-                throw new UnsupportedTemporalUnitException( \"Unsupported unit: \" + unit );\n-            }\n-        }\n-        else\n-        {\n-            throw new UnsupportedTemporalUnitException( \"Unsupported unit: \" + unit );\n-        }\n-    }\n-\n-    static StructureBuilder<AnyValue,DurationValue> builder()\n-    {\n-        return new DurationBuilder<AnyValue,DurationValue>()\n-        {\n-            @Override\n-            DurationValue create(\n-                    AnyValue years,\n-                    AnyValue months,\n-                    AnyValue weeks,\n-                    AnyValue days,\n-                    AnyValue hours,\n-                    AnyValue minutes,\n-                    AnyValue seconds,\n-                    AnyValue milliseconds,\n-                    AnyValue microseconds,\n-                    AnyValue nanoseconds )\n-            {\n-                return approximate(\n-                        safeCastFloatingPoint( \"years\", years, 0 ) * 12 +\n-                                safeCastFloatingPoint( \"months\", months, 0 ),\n-                        safeCastFloatingPoint( \"weeks\", weeks, 0 ) * 7 +\n-                                safeCastFloatingPoint( \"days\", days, 0 ),\n-                        safeCastFloatingPoint( \"hours\", hours, 0 ) * 3600 +\n-                                safeCastFloatingPoint( \"minutes\", minutes, 0 ) * 60 +\n-                                safeCastFloatingPoint( \"seconds\", seconds, 0 ),\n-                        safeCastFloatingPoint( \"milliseconds\", milliseconds, 0 ) * 1_000_000 +\n-                                safeCastFloatingPoint( \"microseconds\", microseconds, 0 ) * 1_000 +\n-                                safeCastFloatingPoint( \"nanoseconds\", nanoseconds, 0 )\n-                );\n-            }\n-        };\n-    }\n-\n-    public abstract static class Compiler<Input> extends DurationBuilder<Input,MethodHandle>\n-    {\n-    }\n-\n-    private static final DurationValue ZERO = new DurationValue( 0, 0, 0, 0 );\n-    private static final List<TemporalUnit> UNITS = unmodifiableList( asList( MONTHS, DAYS, SECONDS, NANOS ) );\n-    // This comparator is safe until 292,271,023,045 years. After that, we have an overflow.\n-    private static final Comparator<DurationValue> COMPARATOR =\n-            Comparator.comparingLong( DurationValue::getAverageLengthInSeconds )\n-                    // nanos are guaranteed to be smaller than NANOS_PER_SECOND\n-                    .thenComparingLong( d -> d.nanos )\n-                    // At this point, the durations have the same length and we compare by the individual fields.\n-                    .thenComparingLong( d -> d.months )\n-                    .thenComparingLong( d -> d.days )\n-                    .thenComparingLong( d -> d.seconds );\n-    private final long months;\n-    private final long days;\n-    private final long seconds;\n-    private final int nanos;\n-\n-    private static DurationValue newDuration( long months, long days, long seconds, long nanos )\n-    {\n-        return seconds == 0 && days == 0 && months == 0 && nanos == 0 // ordered by probability of non-zero\n-                ? ZERO : new DurationValue( months, days, seconds, nanos );\n-    }\n-\n-    private DurationValue( long months, long days, long seconds, long nanos )\n-    {\n-        assertNoOverflow( months, days, seconds, nanos );\n-        seconds = secondsWithNanos( seconds, nanos );\n-        nanos %= NANOS_PER_SECOND;\n-        // normalize nanos to be between 0 and NANOS_PER_SECOND-1\n-        if ( nanos < 0 )\n-        {\n-            seconds -= 1;\n-            nanos += NANOS_PER_SECOND;\n-        }\n-        this.months = months;\n-        this.days = days;\n-        this.seconds = seconds;\n-        this.nanos = (int) nanos;\n-    }\n-\n-    @Override\n-    public int compareTo( DurationValue other )\n-    {\n-        return COMPARATOR.compare( this, other );\n-    }\n-\n-    @Override\n-    int unsafeCompareTo( Value otherValue )\n-    {\n-        return compareTo( (DurationValue) otherValue );\n-    }\n-\n-    private long getAverageLengthInSeconds()\n-    {\n-        return calcAverageLengthInSeconds( this.months, this.days, this.seconds );\n-    }\n-\n-    private long calcAverageLengthInSeconds( long months, long days, long seconds )\n-    {\n-        long daysInSeconds = Math.multiplyExact( days, SECONDS_PER_DAY );\n-        long monthsInSeconds = Math.multiplyExact( months, AVG_SECONDS_PER_MONTH );\n-        return Math.addExact( seconds, Math.addExact( daysInSeconds, monthsInSeconds ) );\n-    }\n-\n-    private long secondsWithNanos( long seconds, long nanos )\n-    {\n-        return Math.addExact( seconds, nanos / NANOS_PER_SECOND );\n-    }\n-\n-    private void assertNoOverflow( long months, long days, long seconds, long nanos )\n-    {\n-        try\n-        {\n-            calcAverageLengthInSeconds( months, days, seconds );\n-            secondsWithNanos( seconds, nanos );\n-        }\n-        catch ( ArithmeticException e )\n-        {\n-            throw new InvalidValuesArgumentException(\n-                    String.format( \"Invalid value for duration, will cause overflow. Value was months=%d, days=%d, seconds=%d, nanos=%d\",\n-                            months, days, seconds, nanos ), e );\n-        }\n-    }\n-\n-    long nanosOfDay()\n-    {\n-        return (seconds % SECONDS_PER_DAY) * NANOS_PER_SECOND + nanos;\n-    }\n-\n-    long totalMonths()\n-    {\n-        return months;\n-    }\n-\n-    /**\n-     * The number of days of this duration, as computed by the days and the whole days made up of seconds. This\n-     * excludes the days contributed by the months.\n-     *\n-     * @return the total number of days of this duration.\n-     */\n-    long totalDays()\n-    {\n-        return days + (seconds / SECONDS_PER_DAY);\n-    }\n-\n-    private static final String UNIT_BASED_PATTERN = \"(?:(?<years>[-+]?[0-9]+(?:[.,][0-9]+)?)Y)?\"\n-            + \"(?:(?<months>[-+]?[0-9]+(?:[.,][0-9]+)?)M)?\"\n-            + \"(?:(?<weeks>[-+]?[0-9]+(?:[.,][0-9]+)?)W)?\"\n-            + \"(?:(?<days>[-+]?[0-9]+(?:[.,][0-9]+)?)D)?\"\n-            + \"(?<T>T\"\n-            + \"(?:(?<hours>[-+]?[0-9]+(?:[.,][0-9]+)?)H)?\"\n-            + \"(?:(?<minutes>[-+]?[0-9]+(?:[.,][0-9]+)?)M)?\"\n-            + \"(?:(?<seconds>[-+]?[0-9]+)(?:[.,](?<subseconds>[0-9]{1,9}))?S)?)?\";\n-    private static final String DATE_BASED_PATTERN = \"(?:\"\n-            + \"(?<year>[0-9]{4})(?:\"\n-            + \"-(?<longMonth>[0-9]{2})-(?<longDay>[0-9]{2})|\"\n-            + \"(?<shortMonth>[0-9]{2})(?<shortDay>[0-9]{2}))\"\n-            + \")?(?<time>T\"\n-            + \"(?:(?<shortHour>[0-9]{2})(?:(?<shortMinute>[0-9]{2})\"\n-            + \"(?:(?<shortSecond>[0-9]{2})(?:[.,](?<shortSub>[0-9]{1,9}))?)?)?|\"\n-            + \"(?<longHour>[0-9]{2}):(?<longMinute>[0-9]{2})\"\n-            + \"(?::(?<longSecond>[0-9]{2})(?:[.,](?<longSub>[0-9]{1,9}))?)?))?\";\n-    private static final Pattern PATTERN = Pattern.compile(\n-            \"(?<sign>[-+]?)P(?:\" + UNIT_BASED_PATTERN + \"|\" + DATE_BASED_PATTERN + \")\",\n-            CASE_INSENSITIVE );\n-\n-    private static DurationValue parse( Matcher matcher )\n-    {\n-        String year = matcher.group( \"year\" );\n-        String time = matcher.group( \"time\" );\n-        if ( year != null || time != null )\n-        {\n-            return parseDateDuration( year, matcher, time != null );\n-        }\n-        else\n-        {\n-            return parseDuration( matcher );\n-        }\n-    }\n-\n-    private static DurationValue parseDuration( Matcher matcher )\n-    {\n-        int sign = \"-\".equals( matcher.group( \"sign\" ) ) ? -1 : 1;\n-        String y = matcher.group( \"years\" );\n-        String m = matcher.group( \"months\" );\n-        String w = matcher.group( \"weeks\" );\n-        String d = matcher.group( \"days\" );\n-        String t = matcher.group( \"T\" );\n-        if ( (y == null && m == null && w == null && d == null && t == null) || \"T\".equalsIgnoreCase( t ) )\n-        {\n-            return null;\n-        }\n-        int pos;\n-        if ( (pos = fractionPoint( y )) >= 0 )\n-        {\n-            if ( m != null || w != null || d != null || t != null )\n-            {\n-                return null;\n-            }\n-            return approximate( parseFractional( y, pos ) * 12, 0, 0, 0 );\n-        }\n-        long months = optLong( y ) * 12;\n-        if ( (pos = fractionPoint( m )) >= 0 )\n-        {\n-            if ( w != null || d != null || t != null )\n-            {\n-                return null;\n-            }\n-            return approximate( months + parseFractional( m, pos ), 0, 0, 0 );\n-        }\n-        months += optLong( m );\n-        if ( (pos = fractionPoint( w )) >= 0 )\n-        {\n-            if ( d != null || t != null )\n-            {\n-                return null;\n-            }\n-            return approximate( months, parseFractional( w, pos ) * 7, 0, 0 );\n-        }\n-        long days = optLong( w ) * 7;\n-        if ( (pos = fractionPoint( d )) >= 0 )\n-        {\n-            if ( t != null )\n-            {\n-                return null;\n-            }\n-            return approximate( months, days + parseFractional( d, pos ), 0, 0 );\n-        }\n-        days += optLong( d );\n-        return parseDuration( sign, months, days, matcher, false, \"hours\", \"minutes\", \"seconds\", \"subseconds\" );\n-    }\n-\n-    private static DurationValue parseDateDuration( String year, Matcher matcher, boolean time )\n-    {\n-        int sign = \"-\".equals( matcher.group( \"sign\" ) ) ? -1 : 1;\n-        long months = 0;\n-        long days = 0;\n-        if ( year != null )\n-        {\n-            String month = matcher.group( \"longMonth\" );\n-            String day;\n-            if ( month == null )\n-            {\n-                month = matcher.group( \"shortMonth\" );\n-                day = matcher.group( \"shortDay\" );\n-            }\n-            else\n-            {\n-                day = matcher.group( \"longDay\" );\n-            }\n-            months = parseLong( month );\n-            if ( months > 12 )\n-            {\n-                throw new InvalidValuesArgumentException( \"months is out of range: \" + month );\n-            }\n-            months += parseLong( year ) * 12;\n-            days = parseLong( day );\n-            if ( days > 31 )\n-            {\n-                throw new InvalidValuesArgumentException( \"days is out of range: \" + day );\n-            }\n-        }\n-        if ( time )\n-        {\n-            if ( matcher.group( \"longHour\" ) != null )\n-            {\n-                return parseDuration(\n-                        sign, months, days, matcher, true, \"longHour\", \"longMinute\", \"longSecond\", \"longSub\" );\n-            }\n-            else\n-            {\n-                return parseDuration(\n-                        sign, months, days, matcher, true, \"shortHour\", \"shortMinute\", \"shortSecond\", \"shortSub\" );\n-            }\n-        }\n-        else\n-        {\n-            return duration( sign * months, sign * days, 0, 0 );\n-        }\n-    }\n-\n-    private static DurationValue parseDuration(\n-            int sign, long months, long days, Matcher matcher, boolean strict,\n-            String hour, String min, String sec, String sub )\n-    {\n-        String h = matcher.group( hour );\n-        String m = matcher.group( min );\n-        String s = matcher.group( sec );\n-        String n = matcher.group( sub );\n-        if ( !strict )\n-        {\n-            int pos;\n-            if ( (pos = fractionPoint( h )) >= 0 )\n-            {\n-                if ( m != null || s != null )\n-                {\n-                    return null;\n-                }\n-                return approximate( months, days, parseFractional( h, pos ) * 3600, 0 );\n-            }\n-            if ( (pos = fractionPoint( m )) >= 0 )\n-            {\n-                if ( s != null )\n-                {\n-                    return null;\n-                }\n-                return approximate( months, days, parseFractional( m, pos ) * 60, 0 );\n-            }\n-        }\n-        long hours = optLong( h );\n-        long minutes = optLong( m );\n-        long seconds = optLong( s );\n-        if ( strict )\n-        {\n-            if ( hours > 24 )\n-            {\n-                throw new InvalidValuesArgumentException( \"hours out of range: \" + hours );\n-            }\n-            if ( minutes > 60 )\n-            {\n-                throw new InvalidValuesArgumentException( \"minutes out of range: \" + minutes );\n-            }\n-            if ( seconds > 60 )\n-            {\n-                throw new InvalidValuesArgumentException( \"seconds out of range: \" + seconds );\n-            }\n-        }\n-        seconds += hours * 3600 + minutes * 60;\n-        long nanos = optLong( n );\n-        if ( nanos != 0 )\n-        {\n-            for ( int i = n.length(); i < 9; i++ )\n-            {\n-                nanos *= 10;\n-            }\n-            if ( s.startsWith( \"-\" ) )\n-            {\n-                nanos = -nanos;\n-            }\n-        }\n-        return duration( sign * months, sign * days, sign * seconds, sign * nanos );\n-    }\n-\n-    private static double parseFractional( String input, int pos )\n-    {\n-        return parseDouble( input.charAt( pos ) == '.' ? input :\n-                (input.substring( 0, pos ) + \".\" + input.substring( pos + 1 )) );\n-    }\n-\n-    private static int fractionPoint( String field )\n-    {\n-        if ( field == null )\n-        {\n-            return -1;\n-        }\n-        int fractionPoint = field.indexOf( '.' );\n-        if ( fractionPoint < 0 )\n-        {\n-            fractionPoint = field.indexOf( ',' );\n-        }\n-        return fractionPoint;\n-    }\n-\n-    private static long optLong( String value )\n-    {\n-        return value == null ? 0 : parseLong( value );\n-    }\n-\n-    static DurationValue durationBetween( Temporal from, Temporal to )\n-    {\n-        long months = 0;\n-        long days = 0;\n-        if ( from.isSupported( EPOCH_DAY ) && to.isSupported( EPOCH_DAY ) )\n-        {\n-            months = assertValidUntil( from, to, ChronoUnit.MONTHS );\n-            try\n-            {\n-                from = from.plus( months, ChronoUnit.MONTHS );\n-            }\n-            catch ( DateTimeException | ArithmeticException e )\n-            {\n-                throw new TemporalArithmeticException( e.getMessage(), e );\n-            }\n-\n-            days = assertValidUntil( from, to, ChronoUnit.DAYS );\n-            try\n-            {\n-                from = from.plus( days, ChronoUnit.DAYS );\n-            }\n-            catch ( DateTimeException | ArithmeticException e )\n-            {\n-                throw new TemporalArithmeticException( e.getMessage(), e );\n-            }\n-        }\n-        long nanos = assertValidUntil( from, to, NANOS );\n-        return newDuration( months, days, nanos / NANOS_PER_SECOND, nanos % NANOS_PER_SECOND );\n-    }\n-\n-    private static DurationValue durationInSecondsAndNanos( Temporal from, Temporal to )\n-    {\n-        long seconds;\n-        long nanos;\n-        boolean negate = false;\n-        if ( from.isSupported( OFFSET_SECONDS ) && !to.isSupported( OFFSET_SECONDS ) )\n-        {\n-            negate = true;\n-            Temporal tmp = from;\n-            from = to;\n-            to = tmp;\n-        }\n-        seconds = assertValidUntil( from, to, SECONDS );\n-        int fromNanos = from.isSupported( NANO_OF_SECOND ) ? from.get( NANO_OF_SECOND ) : 0;\n-        int toNanos = to.isSupported( NANO_OF_SECOND ) ? to.get( NANO_OF_SECOND ) : 0;\n-        nanos = toNanos - fromNanos;\n-\n-        boolean differenceIsLessThanOneSecond = seconds == 0\n-                && from.isSupported( SECOND_OF_MINUTE )\n-                && to.isSupported( SECOND_OF_MINUTE )\n-                && from.get( SECOND_OF_MINUTE ) != to.get( SECOND_OF_MINUTE );\n-\n-        if ( nanos < 0 && ( seconds > 0 || differenceIsLessThanOneSecond ) )\n-        {\n-            nanos = NANOS_PER_SECOND + nanos;\n-        }\n-        else if ( nanos > 0 && ( seconds < 0 || differenceIsLessThanOneSecond ) )\n-        {\n-            nanos = nanos - NANOS_PER_SECOND;\n-        }\n-        if ( negate )\n-        {\n-            seconds = -seconds;\n-            nanos = -nanos;\n-        }\n-        return duration( 0, 0, seconds, nanos );\n-    }\n-\n-    @Override\n-    public boolean equals( Value other )\n-    {\n-        if ( other instanceof DurationValue )\n-        {\n-            DurationValue that = (DurationValue) other;\n-            return that.months == this.months &&\n-                    that.days == this.days &&\n-                    that.seconds == this.seconds &&\n-                    that.nanos == this.nanos;\n-        }\n-        else\n-        {\n-            return false;\n-        }\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n-    {\n-        writer.writeDuration( months, days, seconds, nanos );\n-    }\n-\n-    @Override\n-    public TemporalAmount asObjectCopy()\n-    {\n-        return this;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return prettyPrint();\n-    }\n-\n-    @Override\n-    public String getTypeName()\n-    {\n-        return \"Duration\";\n+  public static DurationValue duration(Duration value)\n+  {\n+    requireNonNull(value, \"Duration\");\n+    return newDuration(0, 0, value.getSeconds(), value.getNano());\n+  }\n+\n+  public static DurationValue duration(Period value)\n+  {\n+    requireNonNull(value, \"Period\");\n+    return newDuration(value.toTotalMonths(), value.getDays(), 0, 0);\n+  }\n+\n+  public static DurationValue duration(long months, long days, long seconds, long nanos)\n+  {\n+    return newDuration(months, days, seconds, nanos);\n+  }\n+\n+  public static DurationValue parse(CharSequence text)\n+  {\n+    return TemporalValue.parse(DurationValue.class, PATTERN, DurationValue::parse, text);\n+  }\n+\n+  public static DurationValue parse(TextValue text)\n+  {\n+    return TemporalValue.parse(DurationValue.class, PATTERN, DurationValue::parse, text);\n+  }\n+\n+  static DurationValue build(Map<String, ? extends AnyValue> input)\n+  {\n+    StructureBuilder<AnyValue, DurationValue> builder = builder();\n+    for (Map.Entry<String, ? extends AnyValue> entry : input.entrySet())\n+    {\n+      builder.add(entry.getKey(), entry.getValue());\n+    }\n+    return builder.build();\n+  }\n+\n+  public static DurationValue build(MapValue map)\n+  {\n+    return StructureBuilder.build(builder(), map);\n+  }\n+\n+  public static DurationValue between(TemporalUnit unit, Temporal from, Temporal to)\n+  {\n+    if (unit == null)\n+    {\n+      return durationBetween(from, to);\n+    } else if (unit instanceof ChronoUnit)\n+    {\n+      switch ((ChronoUnit) unit)\n+      {\n+        case MONTHS:\n+          return newDuration(assertValidUntil(from, to, unit), 0, 0, 0);\n+        case DAYS:\n+          return newDuration(0, assertValidUntil(from, to, unit), 0, 0);\n+        case SECONDS:\n+          return durationInSecondsAndNanos(from, to);\n+        default:\n+          throw new UnsupportedTemporalUnitException(\"Unsupported unit: \" + unit);\n+      }\n+    } else\n+    {\n+      throw new UnsupportedTemporalUnitException(\"Unsupported unit: \" + unit);\n+    }\n+  }\n+\n+  static StructureBuilder<AnyValue, DurationValue> builder()\n+  {\n+    return new DurationBuilder<AnyValue, DurationValue>()\n+    {\n+      @Override\n+      DurationValue create(\n+          AnyValue years,\n+          AnyValue months,\n+          AnyValue weeks,\n+          AnyValue days,\n+          AnyValue hours,\n+          AnyValue minutes,\n+          AnyValue seconds,\n+          AnyValue milliseconds,\n+          AnyValue microseconds,\n+          AnyValue nanoseconds)\n+      {\n+        return approximate(\n+            safeCastFloatingPoint(\"years\", years, 0) * 12 +\n+                safeCastFloatingPoint(\"months\", months, 0),\n+            safeCastFloatingPoint(\"weeks\", weeks, 0) * 7 +\n+                safeCastFloatingPoint(\"days\", days, 0),\n+            safeCastFloatingPoint(\"hours\", hours, 0) * 3600 +\n+                safeCastFloatingPoint(\"minutes\", minutes, 0) * 60 +\n+                safeCastFloatingPoint(\"seconds\", seconds, 0),\n+            safeCastFloatingPoint(\"milliseconds\", milliseconds, 0) * 1_000_000 +\n+                safeCastFloatingPoint(\"microseconds\", microseconds, 0) * 1_000 +\n+                safeCastFloatingPoint(\"nanoseconds\", nanoseconds, 0)\n+        );\n+      }\n+    };\n+  }\n+\n+  public abstract static class Compiler<Input> extends DurationBuilder<Input, MethodHandle>\n+  {\n+  }\n+\n+  private static final DurationValue ZERO = new DurationValue(0, 0, 0, 0);\n+  private static final List<TemporalUnit> UNITS = unmodifiableList(asList(MONTHS, DAYS, SECONDS, NANOS));\n+  // This comparator is safe until 292,271,023,045 years. After that, we have an overflow.\n+  private static final Comparator<DurationValue> COMPARATOR =\n+      Comparator.comparingLong(DurationValue::getAverageLengthInSeconds)\n+          // nanos are guaranteed to be smaller than NANOS_PER_SECOND\n+          .thenComparingLong(d -> d.nanos)\n+          // At this point, the durations have the same length and we compare by the individual fields.\n+          .thenComparingLong(d -> d.months)\n+          .thenComparingLong(d -> d.days)\n+          .thenComparingLong(d -> d.seconds);\n+  private final long months;\n+  private final long days;\n+  private final long seconds;\n+  private final int nanos;\n+\n+  private static DurationValue newDuration(long months, long days, long seconds, long nanos)\n+  {\n+    return seconds == 0 && days == 0 && months == 0 && nanos == 0 // ordered by probability of non-zero\n+        ? ZERO : new DurationValue(months, days, seconds, nanos);\n+  }\n+\n+  private DurationValue(long months, long days, long seconds, long nanos)\n+  {\n+    assertNoOverflow(months, days, seconds, nanos);\n+    seconds = secondsWithNanos(seconds, nanos);\n+    nanos %= NANOS_PER_SECOND;\n+    // normalize nanos to be between 0 and NANOS_PER_SECOND-1\n+    if (nanos < 0)\n+    {\n+      seconds -= 1;\n+      nanos += NANOS_PER_SECOND;\n+    }\n+    this.months = months;\n+    this.days = days;\n+    this.seconds = seconds;\n+    this.nanos = (int) nanos;\n+  }\n+\n+  @Override\n+  public int compareTo(DurationValue other)\n+  {\n+    return COMPARATOR.compare(this, other);\n+  }\n+\n+  @Override\n+  int unsafeCompareTo(Value otherValue)\n+  {\n+    return compareTo((DurationValue) otherValue);\n+  }\n+\n+  private long getAverageLengthInSeconds()\n+  {\n+    return calcAverageLengthInSeconds(this.months, this.days, this.seconds);\n+  }\n+\n+  private long calcAverageLengthInSeconds(long months, long days, long seconds)\n+  {\n+    long daysInSeconds = Math.multiplyExact(days, SECONDS_PER_DAY);\n+    long monthsInSeconds = Math.multiplyExact(months, AVG_SECONDS_PER_MONTH);\n+    return Math.addExact(seconds, Math.addExact(daysInSeconds, monthsInSeconds));\n+  }\n+\n+  private long secondsWithNanos(long seconds, long nanos)\n+  {\n+    return Math.addExact(seconds, nanos / NANOS_PER_SECOND);\n+  }\n+\n+  private void assertNoOverflow(long months, long days, long seconds, long nanos)\n+  {\n+    try\n+    {\n+      calcAverageLengthInSeconds(months, days, seconds);\n+      secondsWithNanos(seconds, nanos);\n+    } catch (ArithmeticException e)\n+    {\n+      throw new InvalidValuesArgumentException(\n+          String.format(\"Invalid value for duration, will cause overflow. Value was months=%d, days=%d, seconds=%d, nanos=%d\",\n+              months, days, seconds, nanos), e);\n+    }\n+  }\n+\n+  long nanosOfDay()\n+  {\n+    return (seconds % SECONDS_PER_DAY) * NANOS_PER_SECOND + nanos;\n+  }\n+\n+  long totalMonths()\n+  {\n+    return months;\n+  }\n+\n+  /**\n+   * The number of days of this duration, as computed by the days and the whole days made up of seconds. This\n+   * excludes the days contributed by the months.\n+   *\n+   * @return the total number of days of this duration.\n+   */\n+  long totalDays()\n+  {\n+    return days + (seconds / SECONDS_PER_DAY);\n+  }\n+\n+  private static final String UNIT_BASED_PATTERN = \"(?:(?<years>[-+]?[0-9]+(?:[.,][0-9]+)?)Y)?\"\n+      + \"(?:(?<months>[-+]?[0-9]+(?:[.,][0-9]+)?)M)?\"\n+      + \"(?:(?<weeks>[-+]?[0-9]+(?:[.,][0-9]+)?)W)?\"\n+      + \"(?:(?<days>[-+]?[0-9]+(?:[.,][0-9]+)?)D)?\"\n+      + \"(?<T>T\"\n+      + \"(?:(?<hours>[-+]?[0-9]+(?:[.,][0-9]+)?)H)?\"\n+      + \"(?:(?<minutes>[-+]?[0-9]+(?:[.,][0-9]+)?)M)?\"\n+      + \"(?:(?<seconds>[-+]?[0-9]+)(?:[.,](?<subseconds>[0-9]{1,9}))?S)?)?\";\n+  private static final String DATE_BASED_PATTERN = \"(?:\"\n+      + \"(?<year>[0-9]{4})(?:\"\n+      + \"-(?<longMonth>[0-9]{2})-(?<longDay>[0-9]{2})|\"\n+      + \"(?<shortMonth>[0-9]{2})(?<shortDay>[0-9]{2}))\"\n+      + \")?(?<time>T\"\n+      + \"(?:(?<shortHour>[0-9]{2})(?:(?<shortMinute>[0-9]{2})\"\n+      + \"(?:(?<shortSecond>[0-9]{2})(?:[.,](?<shortSub>[0-9]{1,9}))?)?)?|\"\n+      + \"(?<longHour>[0-9]{2}):(?<longMinute>[0-9]{2})\"\n+      + \"(?::(?<longSecond>[0-9]{2})(?:[.,](?<longSub>[0-9]{1,9}))?)?))?\";\n+  private static final Pattern PATTERN = Pattern.compile(\n+      \"(?<sign>[-+]?)P(?:\" + UNIT_BASED_PATTERN + \"|\" + DATE_BASED_PATTERN + \")\",\n+      CASE_INSENSITIVE);\n+\n+  private static DurationValue parse(Matcher matcher)\n+  {\n+    String year = matcher.group(\"year\");\n+    String time = matcher.group(\"time\");\n+    if (year != null || time != null)\n+    {\n+      return parseDateDuration(year, matcher, time != null);\n+    } else\n+    {\n+      return parseDuration(matcher);\n+    }\n+  }\n+\n+  private static DurationValue parseDuration(Matcher matcher)\n+  {\n+    int sign = \"-\".equals(matcher.group(\"sign\")) ? -1 : 1;\n+    String y = matcher.group(\"years\");\n+    String m = matcher.group(\"months\");\n+    String w = matcher.group(\"weeks\");\n+    String d = matcher.group(\"days\");\n+    String t = matcher.group(\"T\");\n+    if ((y == null && m == null && w == null && d == null && t == null) || \"T\".equalsIgnoreCase(t))\n+    {\n+      return null;\n+    }\n+    int pos;\n+    if ((pos = fractionPoint(y)) >= 0)\n+    {\n+      if (m != null || w != null || d != null || t != null)\n+      {\n+        return null;\n+      }\n+      return approximate(parseFractional(y, pos) * 12, 0, 0, 0);\n+    }\n+    long months = optLong(y) * 12;\n+    if ((pos = fractionPoint(m)) >= 0)\n+    {\n+      if (w != null || d != null || t != null)\n+      {\n+        return null;\n+      }\n+      return approximate(months + parseFractional(m, pos), 0, 0, 0);\n+    }\n+    months += optLong(m);\n+    if ((pos = fractionPoint(w)) >= 0)\n+    {\n+      if (d != null || t != null)\n+      {\n+        return null;\n+      }\n+      return approximate(months, parseFractional(w, pos) * 7, 0, 0);\n+    }\n+    long days = optLong(w) * 7;\n+    if ((pos = fractionPoint(d)) >= 0)\n+    {\n+      if (t != null)\n+      {\n+        return null;\n+      }\n+      return approximate(months, days + parseFractional(d, pos), 0, 0);\n+    }\n+    days += optLong(d);\n+    return parseDuration(sign, months, days, matcher, false, \"hours\", \"minutes\", \"seconds\", \"subseconds\");\n+  }\n+\n+  private static DurationValue parseDateDuration(String year, Matcher matcher, boolean time)\n+  {\n+    int sign = \"-\".equals(matcher.group(\"sign\")) ? -1 : 1;\n+    long months = 0;\n+    long days = 0;\n+    if (year != null)\n+    {\n+      String month = matcher.group(\"longMonth\");\n+      String day;\n+      if (month == null)\n+      {\n+        month = matcher.group(\"shortMonth\");\n+        day = matcher.group(\"shortDay\");\n+      } else\n+      {\n+        day = matcher.group(\"longDay\");\n+      }\n+      months = parseLong(month);\n+      if (months > 12)\n+      {\n+        throw new InvalidValuesArgumentException(\"months is out of range: \" + month);\n+      }\n+      months += parseLong(year) * 12;\n+      days = parseLong(day);\n+      if (days > 31)\n+      {\n+        throw new InvalidValuesArgumentException(\"days is out of range: \" + day);\n+      }\n+    }\n+    if (time)\n+    {\n+      if (matcher.group(\"longHour\") != null)\n+      {\n+        return parseDuration(\n+            sign, months, days, matcher, true, \"longHour\", \"longMinute\", \"longSecond\", \"longSub\");\n+      } else\n+      {\n+        return parseDuration(\n+            sign, months, days, matcher, true, \"shortHour\", \"shortMinute\", \"shortSecond\", \"shortSub\");\n+      }\n+    } else\n+    {\n+      return duration(sign * months, sign * days, 0, 0);\n+    }\n+  }\n+\n+  private static DurationValue parseDuration(\n+      int sign, long months, long days, Matcher matcher, boolean strict,\n+      String hour, String min, String sec, String sub)\n+  {\n+    String h = matcher.group(hour);\n+    String m = matcher.group(min);\n+    String s = matcher.group(sec);\n+    String n = matcher.group(sub);\n+    if (!strict)\n+    {\n+      int pos;\n+      if ((pos = fractionPoint(h)) >= 0)\n+      {\n+        if (m != null || s != null)\n+        {\n+          return null;\n+        }\n+        return approximate(months, days, parseFractional(h, pos) * 3600, 0);\n+      }\n+      if ((pos = fractionPoint(m)) >= 0)\n+      {\n+        if (s != null)\n+        {\n+          return null;\n+        }\n+        return approximate(months, days, parseFractional(m, pos) * 60, 0);\n+      }\n+    }\n+    long hours = optLong(h);\n+    long minutes = optLong(m);\n+    long seconds = optLong(s);\n+    if (strict)\n+    {\n+      if (hours > 24)\n+      {\n+        throw new InvalidValuesArgumentException(\"hours out of range: \" + hours);\n+      }\n+      if (minutes > 60)\n+      {\n+        throw new InvalidValuesArgumentException(\"minutes out of range: \" + minutes);\n+      }\n+      if (seconds > 60)\n+      {\n+        throw new InvalidValuesArgumentException(\"seconds out of range: \" + seconds);\n+      }\n+    }\n+    seconds += hours * 3600 + minutes * 60;\n+    long nanos = optLong(n);\n+    if (nanos != 0)\n+    {\n+      for (int i = n.length(); i < 9; i++)\n+      {\n+        nanos *= 10;\n+      }\n+      if (s.startsWith(\"-\"))\n+      {\n+        nanos = -nanos;\n+      }\n+    }\n+    return duration(sign * months, sign * days, sign * seconds, sign * nanos);\n+  }\n+\n+  private static double parseFractional(String input, int pos)\n+  {\n+    return parseDouble(input.charAt(pos) == '.' ? input :\n+        (input.substring(0, pos) + \".\" + input.substring(pos + 1)));\n+  }\n+\n+  private static int fractionPoint(String field)\n+  {\n+    if (field == null)\n+    {\n+      return -1;\n+    }\n+    int fractionPoint = field.indexOf('.');\n+    if (fractionPoint < 0)\n+    {\n+      fractionPoint = field.indexOf(',');\n+    }\n+    return fractionPoint;\n+  }\n+\n+  private static long optLong(String value)\n+  {\n+    return value == null ? 0 : parseLong(value);\n+  }\n+\n+  static DurationValue durationBetween(Temporal from, Temporal to)\n+  {\n+    long months = 0;\n+    long days = 0;\n+    if (from.isSupported(EPOCH_DAY) && to.isSupported(EPOCH_DAY))\n+    {\n+      months = assertValidUntil(from, to, ChronoUnit.MONTHS);\n+      try\n+      {\n+        from = from.plus(months, ChronoUnit.MONTHS);\n+      } catch (DateTimeException | ArithmeticException e)\n+      {\n+        throw new TemporalArithmeticException(e.getMessage(), e);\n+      }\n+\n+      days = assertValidUntil(from, to, ChronoUnit.DAYS);\n+      try\n+      {\n+        from = from.plus(days, ChronoUnit.DAYS);\n+      } catch (DateTimeException | ArithmeticException e)\n+      {\n+        throw new TemporalArithmeticException(e.getMessage(), e);\n+      }\n+    }\n+    long nanos = assertValidUntil(from, to, NANOS);\n+    return newDuration(months, days, nanos / NANOS_PER_SECOND, nanos % NANOS_PER_SECOND);\n+  }\n+\n+  private static DurationValue durationInSecondsAndNanos(Temporal from, Temporal to)\n+  {\n+    long seconds;\n+    long nanos;\n+    boolean negate = false;\n+    if (from.isSupported(OFFSET_SECONDS) && !to.isSupported(OFFSET_SECONDS))\n+    {\n+      negate = true;\n+      Temporal tmp = from;\n+      from = to;\n+      to = tmp;\n+    }\n+    seconds = assertValidUntil(from, to, SECONDS);\n+    int fromNanos = from.isSupported(NANO_OF_SECOND) ? from.get(NANO_OF_SECOND) : 0;\n+    int toNanos = to.isSupported(NANO_OF_SECOND) ? to.get(NANO_OF_SECOND) : 0;\n+    nanos = toNanos - fromNanos;\n+\n+    boolean differenceIsLessThanOneSecond = seconds == 0\n+        && from.isSupported(SECOND_OF_MINUTE)\n+        && to.isSupported(SECOND_OF_MINUTE)\n+        && from.get(SECOND_OF_MINUTE) != to.get(SECOND_OF_MINUTE);\n+\n+    if (nanos < 0 && (seconds > 0 || differenceIsLessThanOneSecond))\n+    {\n+      nanos = NANOS_PER_SECOND + nanos;\n+    } else if (nanos > 0 && (seconds < 0 || differenceIsLessThanOneSecond))\n+    {\n+      nanos = nanos - NANOS_PER_SECOND;\n+    }\n+    if (negate)\n+    {\n+      seconds = -seconds;\n+      nanos = -nanos;\n+    }\n+    return duration(0, 0, seconds, nanos);\n+  }\n+\n+  @Override\n+  public boolean equals(Value other)\n+  {\n+    if (other instanceof DurationValue)\n+    {\n+      DurationValue that = (DurationValue) other;\n+      return that.months == this.months &&\n+          that.days == this.days &&\n+          that.seconds == this.seconds &&\n+          that.nanos == this.nanos;\n+    } else\n+    {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeDuration(months, days, seconds, nanos);\n+  }\n+\n+  @Override\n+  public TemporalAmount asObjectCopy()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return prettyPrint();\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"Duration\";\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    if (this == ZERO)\n+    {\n+      return \"PT0S\"; // no need to allocate a string builder if we know the result\n+    }\n+    StringBuilder str = new StringBuilder().append(\"P\");\n+    append(str, months / 12, 'Y');\n+    append(str, months % 12, 'M');\n+    append(str, days, 'D');\n+    if (seconds != 0 || nanos != 0)\n+    {\n+      boolean negative = seconds < 0;\n+      long s = seconds;\n+      int n = nanos;\n+      if (negative && nanos != 0)\n+      {\n+        s++;\n+        n -= NANOS_PER_SECOND;\n+      }\n+      str.append('T');\n+      append(str, s / 3600, 'H');\n+      s %= 3600;\n+      append(str, s / 60, 'M');\n+      s %= 60;\n+      if (s != 0)\n+      {\n+        if (negative && s >= 0 && n != 0)\n+        {\n+          str.append('-');\n+        }\n+        str.append(s);\n+        if (n != 0)\n+        {\n+          nanos(str, n);\n+        }\n+        str.append('S');\n+      } else if (n != 0)\n+      {\n+        if (negative)\n+        {\n+          str.append('-');\n+        }\n+        str.append('0');\n+        nanos(str, n);\n+        str.append('S');\n+      }\n+    }\n+    if (str.length() == 1)\n+    { // this was all zeros (but not ZERO for some reason), ensure well formed output:\n+      str.append(\"T0S\");\n+    }\n+    return str.toString();\n+  }\n+\n+  private void nanos(StringBuilder str, int nanos)\n+  {\n+    str.append('.');\n+    int n = nanos < 0 ? -nanos : nanos;\n+    for (int mod = (int) NANOS_PER_SECOND; mod > 1 && n > 0; n %= mod)\n+    {\n+      str.append(n / (mod /= 10));\n+    }\n+  }\n+\n+  private static void append(StringBuilder str, long quantity, char unit)\n+  {\n+    if (quantity != 0)\n+    {\n+      str.append(quantity).append(unit);\n+    }\n+  }\n+\n+  @Override\n+  public ValueGroup valueGroup()\n+  {\n+    return ValueGroup.DURATION;\n+  }\n+\n+  @Override\n+  public NumberType numberType()\n+  {\n+    return NO_NUMBER;\n+  }\n+\n+  @Override\n+  protected int computeHash()\n+  {\n+    int result = (int) (months ^ (months >>> 32));\n+    result = 31 * result + (int) (days ^ (days >>> 32));\n+    result = 31 * result + (int) (seconds ^ (seconds >>> 32));\n+    result = 31 * result + nanos;\n+    return result;\n+  }\n+\n+  @Override\n+  public long updateHash(HashFunction hashFunction, long hash)\n+  {\n+    hash = hashFunction.update(hash, months);\n+    hash = hashFunction.update(hash, days);\n+    hash = hashFunction.update(hash, seconds);\n+    hash = hashFunction.update(hash, nanos);\n+    return hash;\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapDuration(this);\n+  }\n+\n+  @Override\n+  public long get(TemporalUnit unit)\n+  {\n+    if (unit instanceof ChronoUnit)\n+    {\n+      switch ((ChronoUnit) unit)\n+      {\n+        case MONTHS:\n+          return months;\n+        case DAYS:\n+          return days;\n+        case SECONDS:\n+          return seconds;\n+        case NANOS:\n+          return nanos;\n+        default:\n+          break;\n+      }\n+    }\n+    throw new UnsupportedTemporalUnitException(\"Unsupported unit: \" + unit);\n+  }\n+\n+  /**\n+   * In contrast to {@link #get(TemporalUnit)}, this method supports more units, namely:\n+   * <p>\n+   * years, hours, minutes, milliseconds, microseconds,\n+   * monthsOfYear, minutesOfHour, secondsOfMinute, millisecondsOfSecond, microsecondsOfSecond, nanosecondsOfSecond\n+   */\n+  public LongValue get(String fieldName)\n+  {\n+    long val = DurationFields.fromName(fieldName).asTimeStamp(months, days, seconds, nanos);\n+    return Values.longValue(val);\n+  }\n+\n+  @Override\n+  public List<TemporalUnit> getUnits()\n+  {\n+    return UNITS;\n+  }\n+\n+  public DurationValue plus(long amount, TemporalUnit unit)\n+  {\n+    if (unit instanceof ChronoUnit)\n+    {\n+      switch ((ChronoUnit) unit)\n+      {\n+        case NANOS:\n+          return duration(months, days, seconds, nanos + amount);\n+        case MICROS:\n+          return duration(months, days, seconds, nanos + amount * 1000);\n+        case MILLIS:\n+          return duration(months, days, seconds, nanos + amount * 1000_000);\n+        case SECONDS:\n+          return duration(months, days, seconds + amount, nanos);\n+        case MINUTES:\n+          return duration(months, days, seconds + amount * 60, nanos);\n+        case HOURS:\n+          return duration(months, days, seconds + amount * 3600, nanos);\n+        case HALF_DAYS:\n+          return duration(months, days, seconds + amount * 12 * 3600, nanos);\n+        case DAYS:\n+          return duration(months, days + amount, seconds, nanos);\n+        case WEEKS:\n+          return duration(months, days + amount * 7, seconds, nanos);\n+        case MONTHS:\n+          return duration(months + amount, days, seconds, nanos);\n+        case YEARS:\n+          return duration(months + amount * 12, days, seconds, nanos);\n+        case DECADES:\n+          return duration(months + amount * 120, days, seconds, nanos);\n+        case CENTURIES:\n+          return duration(months + amount * 1200, days, seconds, nanos);\n+        case MILLENNIA:\n+          return duration(months + amount * 12000, days, seconds, nanos);\n+        default:\n+          break;\n+      }\n+    }\n+    throw new UnsupportedOperationException(\"Unsupported unit: \" + unit);\n+  }\n+\n+  @Override\n+  public Temporal addTo(Temporal temporal)\n+  {\n+    if (months != 0 && temporal.isSupported(MONTHS))\n+    {\n+      temporal = assertValidPlus(temporal, months, MONTHS);\n+    }\n+    if (days != 0 && temporal.isSupported(DAYS))\n+    {\n+      temporal = assertValidPlus(temporal, days, DAYS);\n+    }\n+    if (seconds != 0)\n+    {\n+      if (temporal.isSupported(SECONDS))\n+      {\n+        temporal = assertValidPlus(temporal, seconds, SECONDS);\n+      } else\n+      {\n+        long asDays = seconds / SECONDS_PER_DAY;\n+        if (asDays != 0)\n+        {\n+          temporal = assertValidPlus(temporal, asDays, DAYS);\n+        }\n+      }\n+    }\n+    if (nanos != 0 && temporal.isSupported(NANOS))\n+    {\n+      temporal = assertValidPlus(temporal, nanos, NANOS);\n+    }\n+    return temporal;\n+  }\n+\n+  @Override\n+  public Temporal subtractFrom(Temporal temporal)\n+  {\n+    if (months != 0 && temporal.isSupported(MONTHS))\n+    {\n+      temporal = assertValidMinus(temporal, months, MONTHS);\n+    }\n+    if (days != 0 && temporal.isSupported(DAYS))\n+    {\n+      temporal = assertValidMinus(temporal, days, DAYS);\n+    }\n+    if (seconds != 0)\n+    {\n+      if (temporal.isSupported(SECONDS))\n+      {\n+        temporal = assertValidMinus(temporal, seconds, SECONDS);\n+      } else if (temporal.isSupported(DAYS))\n+      {\n+        long asDays = seconds / SECONDS_PER_DAY;\n+        if (asDays != 0)\n+        {\n+          temporal = assertValidMinus(temporal, asDays, DAYS);\n+        }\n+      }\n     }\n-\n-    @Override\n-    public String prettyPrint()\n+    if (nanos != 0 && temporal.isSupported(NANOS))\n     {\n-        if ( this == ZERO )\n-        {\n-            return \"PT0S\"; // no need to allocate a string builder if we know the result\n-        }\n-        StringBuilder str = new StringBuilder().append( \"P\" );\n-        append( str, months / 12, 'Y' );\n-        append( str, months % 12, 'M' );\n-        append( str, days, 'D' );\n-        if ( seconds != 0 || nanos != 0 )\n-        {\n-            boolean negative = seconds < 0;\n-            long s = seconds;\n-            int n = nanos;\n-            if ( negative && nanos != 0 )\n-            {\n-                s++;\n-                n -= NANOS_PER_SECOND;\n-            }\n-            str.append( 'T' );\n-            append( str, s / 3600, 'H' );\n-            s %= 3600;\n-            append( str, s / 60, 'M' );\n-            s %= 60;\n-            if ( s != 0 )\n-            {\n-                if ( negative && s >= 0 && n != 0 )\n-                {\n-                    str.append( '-' );\n-                }\n-                str.append( s );\n-                if ( n != 0 )\n-                {\n-                    nanos( str, n );\n-                }\n-                str.append( 'S' );\n-            }\n-            else if ( n != 0 )\n-            {\n-                if ( negative )\n-                {\n-                    str.append( '-' );\n-                }\n-                str.append( '0' );\n-                nanos( str, n );\n-                str.append( 'S' );\n-            }\n-        }\n-        if ( str.length() == 1 )\n-        { // this was all zeros (but not ZERO for some reason), ensure well formed output:\n-            str.append( \"T0S\" );\n-        }\n-        return str.toString();\n+      temporal = assertValidMinus(temporal, nanos, NANOS);\n     }\n+    return temporal;\n+  }\n \n-    private void nanos( StringBuilder str, int nanos )\n-    {\n-        str.append( '.' );\n-        int n = nanos < 0 ? -nanos : nanos;\n-        for ( int mod = (int)NANOS_PER_SECOND; mod > 1 && n > 0; n %= mod )\n-        {\n-            str.append( n / (mod /= 10) );\n-        }\n-    }\n+  public DurationValue add(DurationValue that)\n+  {\n+    return duration(\n+        this.months + that.months,\n+        this.days + that.days,\n+        this.seconds + that.seconds,\n+        this.nanos + that.nanos);\n+  }\n \n-    private static void append( StringBuilder str, long quantity, char unit )\n-    {\n-        if ( quantity != 0 )\n-        {\n-            str.append( quantity ).append( unit );\n-        }\n-    }\n+  public DurationValue sub(DurationValue that)\n+  {\n+    return duration(\n+        this.months - that.months,\n+        this.days - that.days,\n+        this.seconds - that.seconds,\n+        this.nanos - that.nanos);\n+  }\n \n-    @Override\n-    public ValueGroup valueGroup()\n+  public DurationValue mul(NumberValue number)\n+  {\n+    if (number instanceof IntegralValue)\n     {\n-        return ValueGroup.DURATION;\n+      long factor = number.longValue();\n+      return duration(months * factor, days * factor, seconds * factor, nanos * factor);\n     }\n-\n-    @Override\n-    public NumberType numberType()\n-    {\n-        return NO_NUMBER;\n-    }\n-\n-    @Override\n-    protected int computeHash()\n+    if (number instanceof FloatingPointValue)\n     {\n-        int result = (int) (months ^ (months >>> 32));\n-        result = 31 * result + (int) (days ^ (days >>> 32));\n-        result = 31 * result + (int) (seconds ^ (seconds >>> 32));\n-        result = 31 * result + nanos;\n-        return result;\n+      double factor = number.doubleValue();\n+      return approximate(months * factor, days * factor, seconds * factor, nanos * factor);\n     }\n+    throw new InvalidValuesArgumentException(\"Factor must be either integer of floating point number.\");\n+  }\n \n-    @Override\n-    public long updateHash( HashFunction hashFunction, long hash )\n-    {\n-        hash = hashFunction.update( hash, months );\n-        hash = hashFunction.update( hash, days );\n-        hash = hashFunction.update( hash, seconds );\n-        hash = hashFunction.update( hash, nanos );\n-        return hash;\n-    }\n+  public DurationValue div(NumberValue number)\n+  {\n+    double divisor = number.doubleValue();\n+    return approximate(months / divisor, days / divisor, seconds / divisor, nanos / divisor);\n+  }\n \n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n-    {\n-        return mapper.mapDuration( this );\n-    }\n-\n-    @Override\n-    public long get( TemporalUnit unit )\n-    {\n-        if ( unit instanceof ChronoUnit )\n-        {\n-            switch ( (ChronoUnit) unit )\n-            {\n-            case MONTHS:\n-                return months;\n-            case DAYS:\n-                return days;\n-            case SECONDS:\n-                return seconds;\n-            case NANOS:\n-                return nanos;\n-            default:\n-                break;\n-            }\n-        }\n-        throw new UnsupportedTemporalUnitException( \"Unsupported unit: \" + unit );\n-    }\n-\n-    /**\n-     * In contrast to {@link #get(TemporalUnit)}, this method supports more units, namely:\n-     *\n-     * years, hours, minutes, milliseconds, microseconds,\n-     * monthsOfYear, minutesOfHour, secondsOfMinute, millisecondsOfSecond, microsecondsOfSecond, nanosecondsOfSecond\n-     */\n-    public LongValue get( String fieldName )\n-    {\n-        long val = DurationFields.fromName( fieldName ).asTimeStamp( months, days, seconds, nanos );\n-        return Values.longValue( val );\n-    }\n+  static DurationValue approximate(double months, double days, double seconds, double nanos)\n+  {\n \n-    @Override\n-    public List<TemporalUnit> getUnits()\n-    {\n-        return UNITS;\n-    }\n+    long monthsAsLong = safeDoubleToLong(months);\n \n-    public DurationValue plus( long amount, TemporalUnit unit )\n-    {\n-        if ( unit instanceof ChronoUnit )\n-        {\n-            switch ( (ChronoUnit) unit )\n-            {\n-            case NANOS:\n-                return duration( months, days, seconds, nanos + amount );\n-            case MICROS:\n-                return duration( months, days, seconds, nanos + amount * 1000 );\n-            case MILLIS:\n-                return duration( months, days, seconds, nanos + amount * 1000_000 );\n-            case SECONDS:\n-                return duration( months, days, seconds + amount, nanos );\n-            case MINUTES:\n-                return duration( months, days, seconds + amount * 60, nanos );\n-            case HOURS:\n-                return duration( months, days, seconds + amount * 3600, nanos );\n-            case HALF_DAYS:\n-                return duration( months, days, seconds + amount * 12 * 3600, nanos );\n-            case DAYS:\n-                return duration( months, days + amount, seconds, nanos );\n-            case WEEKS:\n-                return duration( months, days + amount * 7, seconds, nanos );\n-            case MONTHS:\n-                return duration( months + amount, days, seconds, nanos );\n-            case YEARS:\n-                return duration( months + amount * 12, days, seconds, nanos );\n-            case DECADES:\n-                return duration( months + amount * 120, days, seconds, nanos );\n-            case CENTURIES:\n-                return duration( months + amount * 1200, days, seconds, nanos );\n-            case MILLENNIA:\n-                return duration( months + amount * 12000, days, seconds, nanos );\n-            default:\n-                break;\n-            }\n-        }\n-        throw new UnsupportedOperationException( \"Unsupported unit: \" + unit );\n-    }\n+    double monthDiffInNanos = AVG_NANOS_PER_MONTH * months - AVG_NANOS_PER_MONTH * monthsAsLong;\n+    days += monthDiffInNanos / (NANOS_PER_SECOND * SECONDS_PER_DAY);\n+    long daysAsLong = safeDoubleToLong(days);\n \n-    @Override\n-    public Temporal addTo( Temporal temporal )\n-    {\n-        if ( months != 0 && temporal.isSupported( MONTHS ) )\n-        {\n-            temporal = assertValidPlus( temporal, months, MONTHS );\n-        }\n-        if ( days != 0 && temporal.isSupported( DAYS ) )\n-        {\n-            temporal = assertValidPlus( temporal, days, DAYS );\n-        }\n-        if ( seconds != 0 )\n-        {\n-            if ( temporal.isSupported( SECONDS ) )\n-            {\n-                temporal = assertValidPlus( temporal, seconds, SECONDS );\n-            }\n-            else\n-            {\n-                long asDays = seconds / SECONDS_PER_DAY;\n-                if ( asDays != 0 )\n-                {\n-                    temporal = assertValidPlus( temporal, asDays, DAYS );\n-                }\n-            }\n-        }\n-        if ( nanos != 0 && temporal.isSupported( NANOS ) )\n-        {\n-            temporal = assertValidPlus( temporal, nanos, NANOS );\n-        }\n-        return temporal;\n-    }\n+    double daysDiffInNanos = NANOS_PER_SECOND * SECONDS_PER_DAY * days - NANOS_PER_SECOND * SECONDS_PER_DAY * daysAsLong;\n+    seconds += daysDiffInNanos / NANOS_PER_SECOND;\n+    long secondsAsLong = safeDoubleToLong(seconds);\n \n-    @Override\n-    public Temporal subtractFrom( Temporal temporal )\n-    {\n-        if ( months != 0 && temporal.isSupported( MONTHS ) )\n-        {\n-            temporal = assertValidMinus( temporal, months, MONTHS );\n-        }\n-        if ( days != 0 && temporal.isSupported( DAYS ) )\n-        {\n-            temporal = assertValidMinus( temporal, days, DAYS );\n-        }\n-        if ( seconds != 0 )\n-        {\n-            if ( temporal.isSupported( SECONDS ) )\n-            {\n-                temporal = assertValidMinus( temporal, seconds, SECONDS );\n-            }\n-            else if ( temporal.isSupported( DAYS ) )\n-            {\n-                long asDays = seconds / SECONDS_PER_DAY;\n-                if ( asDays != 0 )\n-                {\n-                    temporal = assertValidMinus( temporal, asDays, DAYS );\n-                }\n-            }\n-        }\n-        if ( nanos != 0 && temporal.isSupported( NANOS ) )\n-        {\n-            temporal = assertValidMinus( temporal, nanos, NANOS );\n-        }\n-        return temporal;\n-    }\n+    double secondsDiffInNanos = NANOS_PER_SECOND * seconds - NANOS_PER_SECOND * secondsAsLong;\n+    nanos += secondsDiffInNanos;\n+    long nanosAsLong = safeDoubleToLong(nanos);\n \n-    public DurationValue add( DurationValue that )\n-    {\n-        return duration(\n-                this.months + that.months,\n-                this.days + that.days,\n-                this.seconds + that.seconds,\n-                this.nanos + that.nanos );\n-    }\n+    return duration(monthsAsLong, daysAsLong, secondsAsLong, nanosAsLong);\n+  }\n \n-    public DurationValue sub( DurationValue that )\n+  /**\n+   * Will cast a double to a long, but only if it is inside the limits of [Long.MIN_VALUE, LONG.MAX_VALUE]\n+   * We need this to detect overflow errors, whereas normal truncation is OK while approximating.\n+   */\n+  private static long safeDoubleToLong(double d)\n+  {\n+    if (d > Long.MAX_VALUE || d < Long.MIN_VALUE)\n     {\n-        return duration(\n-                this.months - that.months,\n-                this.days - that.days,\n-                this.seconds - that.seconds,\n-                this.nanos - that.nanos );\n+      throw new ArithmeticException(\"long overflow\");\n     }\n+    return (long) d;\n+  }\n \n-    public DurationValue mul( NumberValue number )\n+  private static Temporal assertValidPlus(Temporal temporal, long amountToAdd, TemporalUnit unit)\n+  {\n+    try\n     {\n-        if ( number instanceof IntegralValue )\n-        {\n-            long factor = number.longValue();\n-            return duration( months * factor, days * factor, seconds * factor, nanos * factor );\n-        }\n-        if ( number instanceof FloatingPointValue )\n-        {\n-            double factor = number.doubleValue();\n-            return approximate( months * factor, days * factor, seconds * factor, nanos * factor );\n-        }\n-        throw new InvalidValuesArgumentException( \"Factor must be either integer of floating point number.\" );\n-    }\n-\n-    public DurationValue div( NumberValue number )\n+      return temporal.plus(amountToAdd, unit);\n+    } catch (DateTimeException | ArithmeticException e)\n     {\n-        double divisor = number.doubleValue();\n-        return approximate( months / divisor, days / divisor, seconds / divisor, nanos / divisor );\n+      throw new TemporalArithmeticException(e.getMessage(), e);\n     }\n+  }\n \n-    static DurationValue approximate( double months, double days, double seconds, double nanos )\n+  private static Temporal assertValidMinus(Temporal temporal, long amountToAdd, TemporalUnit unit)\n+  {\n+    try\n     {\n-\n-        long monthsAsLong = safeDoubleToLong(months);\n-\n-        double monthDiffInNanos = AVG_NANOS_PER_MONTH * months - AVG_NANOS_PER_MONTH * monthsAsLong;\n-        days += monthDiffInNanos / (NANOS_PER_SECOND * SECONDS_PER_DAY);\n-        long daysAsLong = safeDoubleToLong(days);\n-\n-        double daysDiffInNanos = NANOS_PER_SECOND * SECONDS_PER_DAY * days - NANOS_PER_SECOND * SECONDS_PER_DAY * daysAsLong;\n-        seconds += daysDiffInNanos / NANOS_PER_SECOND;\n-        long secondsAsLong = safeDoubleToLong(seconds);\n-\n-        double secondsDiffInNanos = NANOS_PER_SECOND * seconds - NANOS_PER_SECOND * secondsAsLong;\n-        nanos += secondsDiffInNanos;\n-        long nanosAsLong = safeDoubleToLong(nanos);\n-\n-        return duration( monthsAsLong, daysAsLong, secondsAsLong, nanosAsLong );\n-    }\n-\n-    /**\n-     * Will cast a double to a long, but only if it is inside the limits of [Long.MIN_VALUE, LONG.MAX_VALUE]\n-     * We need this to detect overflow errors, whereas normal truncation is OK while approximating.\n-     */\n-    private static long safeDoubleToLong( double d )\n+      return temporal.minus(amountToAdd, unit);\n+    } catch (DateTimeException | ArithmeticException e)\n     {\n-        if ( d > Long.MAX_VALUE || d < Long.MIN_VALUE )\n-        {\n-            throw new ArithmeticException( \"long overflow\" );\n-        }\n-        return (long) d;\n+      throw new TemporalArithmeticException(e.getMessage(), e);\n     }\n+  }\n \n-    private static Temporal assertValidPlus( Temporal temporal, long amountToAdd, TemporalUnit unit )\n+  private static long assertValidUntil(Temporal from, Temporal to, TemporalUnit unit)\n+  {\n+    try\n     {\n-        try\n-        {\n-            return temporal.plus(amountToAdd,  unit);\n-        }\n-        catch ( DateTimeException | ArithmeticException e )\n-        {\n-            throw new TemporalArithmeticException( e.getMessage(), e );\n-        }\n-    }\n-\n-    private static Temporal assertValidMinus( Temporal temporal, long amountToAdd, TemporalUnit unit )\n+      return from.until(to, unit);\n+    } catch (UnsupportedTemporalTypeException e)\n     {\n-        try\n-        {\n-            return temporal.minus(amountToAdd,  unit);\n-        }\n-        catch ( DateTimeException | ArithmeticException e )\n-        {\n-            throw new TemporalArithmeticException( e.getMessage(), e );\n-        }\n-    }\n-\n-    private static long assertValidUntil( Temporal from, Temporal to, TemporalUnit unit )\n+      throw new UnsupportedTemporalUnitException(e.getMessage(), e);\n+    } catch (DateTimeException e)\n     {\n-        try\n-        {\n-            return from.until( to, unit );\n-        }\n-        catch ( UnsupportedTemporalTypeException e )\n-        {\n-            throw new UnsupportedTemporalUnitException( e.getMessage(), e );\n-        }\n-        catch ( DateTimeException e )\n-        {\n-            throw new InvalidValuesArgumentException( e.getMessage(), e );\n-        }\n+      throw new InvalidValuesArgumentException(e.getMessage(), e);\n     }\n+  }\n }\n",
            "diff_size": 1144
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}