{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3528",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "120",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "332",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "353",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "360",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "430",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "457",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "463",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "526",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "573",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "580",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "614",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "620",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "638",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "765",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "777",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3528/IndexingService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3528/IndexingService.java\nindex c911e8d26ec..dc16660cae5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3528/IndexingService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3528/IndexingService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.File;\n@@ -91,726 +92,714 @@ import static org.neo4j.kernel.impl.api.index.IndexPopulationFailure.failure;\n  */\n public class IndexingService extends LifecycleAdapter implements IndexingUpdateService\n {\n-    private final IndexSamplingController samplingController;\n-    private final IndexProxyCreator indexProxyCreator;\n-    private final IndexStoreView storeView;\n-    private final IndexProviderMap providerMap;\n-    private final IndexMapReference indexMapRef;\n-    private final Iterable<IndexRule> indexRules;\n-    private final Log log;\n-    private final TokenNameLookup tokenNameLookup;\n-    private final MultiPopulatorFactory multiPopulatorFactory;\n-    private final LogProvider logProvider;\n-    private final Monitor monitor;\n-    private final SchemaState schemaState;\n-    private final IndexPopulationJobController populationJobController;\n-    private final Map<Long,IndexProxy> indexesToDropAfterCompletedRecovery = new HashMap<>();\n-\n-    enum State\n-    {\n-        NOT_STARTED,\n-        STARTING,\n-        RUNNING,\n-        STOPPED\n-    }\n-\n-    public interface Monitor\n-    {\n-        void initialState( SchemaIndexDescriptor descriptor, InternalIndexState state );\n-\n-        void populationCompleteOn( SchemaIndexDescriptor descriptor );\n-\n-        void indexPopulationScanStarting();\n-\n-        void indexPopulationScanComplete();\n-\n-        void awaitingPopulationOfRecoveredIndex( long indexId, SchemaIndexDescriptor descriptor );\n-    }\n-\n-    public static class MonitorAdapter implements Monitor\n-    {\n-        @Override\n-        public void initialState( SchemaIndexDescriptor descriptor, InternalIndexState state )\n-        {   // Do nothing\n-        }\n-\n-        @Override\n-        public void populationCompleteOn( SchemaIndexDescriptor descriptor )\n-        {   // Do nothing\n-        }\n-\n-        @Override\n-        public void indexPopulationScanStarting()\n-        {   // Do nothing\n-        }\n-\n-        @Override\n-        public void indexPopulationScanComplete()\n-        {   // Do nothing\n-        }\n-\n-        @Override\n-        public void awaitingPopulationOfRecoveredIndex( long indexId, SchemaIndexDescriptor descriptor )\n-        {   // Do nothing\n-        }\n-    }\n-\n-    public static final Monitor NO_MONITOR = new MonitorAdapter();\n-\n-    private volatile State state = State.NOT_STARTED;\n-\n-    IndexingService( IndexProxyCreator indexProxyCreator,\n-            IndexProviderMap providerMap,\n-            IndexMapReference indexMapRef,\n-            IndexStoreView storeView,\n-            Iterable<IndexRule> indexRules,\n-            IndexSamplingController samplingController,\n-            TokenNameLookup tokenNameLookup,\n-            JobScheduler scheduler,\n-            SchemaState schemaState,\n-            MultiPopulatorFactory multiPopulatorFactory,\n-            LogProvider logProvider,\n-            Monitor monitor )\n-    {\n-        this.indexProxyCreator = indexProxyCreator;\n-        this.providerMap = providerMap;\n-        this.indexMapRef = indexMapRef;\n-        this.storeView = storeView;\n-        this.indexRules = indexRules;\n-        this.samplingController = samplingController;\n-        this.tokenNameLookup = tokenNameLookup;\n-        this.schemaState = schemaState;\n-        this.multiPopulatorFactory = multiPopulatorFactory;\n-        this.logProvider = logProvider;\n-        this.monitor = monitor;\n-        this.populationJobController = new IndexPopulationJobController( scheduler );\n-        this.log = logProvider.getLog( getClass() );\n-    }\n-\n-    /**\n-     * Called while the database starts up, before recovery.\n-     */\n+  private final IndexSamplingController samplingController;\n+  private final IndexProxyCreator indexProxyCreator;\n+  private final IndexStoreView storeView;\n+  private final IndexProviderMap providerMap;\n+  private final IndexMapReference indexMapRef;\n+  private final Iterable<IndexRule> indexRules;\n+  private final Log log;\n+  private final TokenNameLookup tokenNameLookup;\n+  private final MultiPopulatorFactory multiPopulatorFactory;\n+  private final LogProvider logProvider;\n+  private final Monitor monitor;\n+  private final SchemaState schemaState;\n+  private final IndexPopulationJobController populationJobController;\n+  private final Map<Long, IndexProxy> indexesToDropAfterCompletedRecovery = new HashMap<>();\n+\n+  enum State\n+  {\n+    NOT_STARTED,\n+    STARTING,\n+    RUNNING,\n+    STOPPED\n+  }\n+\n+  public interface Monitor\n+  {\n+    void initialState(SchemaIndexDescriptor descriptor, InternalIndexState state);\n+\n+    void populationCompleteOn(SchemaIndexDescriptor descriptor);\n+\n+    void indexPopulationScanStarting();\n+\n+    void indexPopulationScanComplete();\n+\n+    void awaitingPopulationOfRecoveredIndex(long indexId, SchemaIndexDescriptor descriptor);\n+  }\n+\n+  public static class MonitorAdapter implements Monitor\n+  {\n     @Override\n-    public void init()\n-    {\n-        indexMapRef.modify( indexMap ->\n-        {\n-            Map<InternalIndexState, List<IndexLogRecord>> indexStates = new EnumMap<>( InternalIndexState.class );\n-            for ( IndexRule indexRule : indexRules )\n-            {\n-                IndexProxy indexProxy;\n-\n-                long indexId = indexRule.getId();\n-                SchemaIndexDescriptor descriptor = indexRule.getIndexDescriptor();\n-                IndexProvider.Descriptor providerDescriptor = indexRule.getProviderDescriptor();\n-                IndexProvider provider = providerMap.lookup( providerDescriptor );\n-                InternalIndexState initialState = provider.getInitialState( indexId, descriptor );\n-                indexStates.computeIfAbsent( initialState, internalIndexState -> new ArrayList<>() )\n-                .add( new IndexLogRecord( indexId, descriptor ) );\n-\n-                log.debug( indexStateInfo( \"init\", indexId, initialState, descriptor ) );\n-                switch ( initialState )\n-                {\n-                case ONLINE:\n-                    monitor.initialState( descriptor, ONLINE );\n-                    indexProxy = indexProxyCreator.createOnlineIndexProxy( indexId, descriptor, providerDescriptor );\n-                    break;\n-                case POPULATING:\n-                    // The database was shut down during population, or a crash has occurred, or some other sad thing.\n-                    monitor.initialState( descriptor, POPULATING );\n-                    indexProxy = indexProxyCreator.createRecoveringIndexProxy(\n-                            indexId, descriptor, providerDescriptor );\n-                    break;\n-                case FAILED:\n-                    monitor.initialState( descriptor, FAILED );\n-                    IndexPopulationFailure failure = failure( provider.getPopulationFailure( indexId, descriptor ) );\n-                    indexProxy = indexProxyCreator.createFailedIndexProxy( indexId, descriptor, providerDescriptor, failure );\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException( \"\" + initialState );\n-                }\n-                indexMap.putIndexProxy( indexId, indexProxy );\n-            }\n-            logIndexStateSummary( \"init\", indexStates );\n-            return indexMap;\n-        } );\n+    public void initialState(SchemaIndexDescriptor descriptor, InternalIndexState state)\n+    {   // Do nothing\n     }\n \n-    // Recovery semantics: This is to be called after init, and after the database has run recovery.\n     @Override\n-    public void start() throws Exception\n-    {\n-        state = State.STARTING;\n-\n-        // During recovery there could have been dropped indexes. Dropping an index means also updating the counts store,\n-        // which is problematic during recovery. So instead drop those indexes here, after recovery completed.\n-        performRecoveredIndexDropActions();\n-\n-        // Recovery will not do refresh (update read views) while applying recovered transactions and instead\n-        // do it at one point after recovery... i.e. here\n-        indexMapRef.indexMapSnapshot().forEachIndexProxy( indexProxyOperation( \"refresh\", IndexProxy::refresh ) );\n-\n-        final PrimitiveLongObjectMap<RebuildingIndexDescriptor> rebuildingDescriptors = Primitive.longObjectMap();\n-        indexMapRef.modify( indexMap ->\n-        {\n-            Map<InternalIndexState, List<IndexLogRecord>> indexStates = new EnumMap<>( InternalIndexState.class );\n-\n-            // Find all indexes that are not already online, do not require rebuilding, and create them\n-            indexMap.forEachIndexProxy( ( indexId, proxy ) ->\n-            {\n-                InternalIndexState state = proxy.getState();\n-                SchemaIndexDescriptor descriptor = proxy.getDescriptor();\n-                indexStates.computeIfAbsent( state, internalIndexState -> new ArrayList<>() )\n-                .add( new IndexLogRecord( indexId, descriptor ) );\n-                log.debug( indexStateInfo( \"start\", indexId, state, descriptor ) );\n-                switch ( state )\n-                {\n-                case ONLINE:\n-                    // Don't do anything, index is ok.\n-                    break;\n-                case POPULATING:\n-                    // Remember for rebuilding\n-                    rebuildingDescriptors.put( indexId,\n-                            new RebuildingIndexDescriptor( descriptor, proxy.getProviderDescriptor() ) );\n-                    break;\n-                case FAILED:\n-                    // Don't do anything, the user needs to drop the index and re-create\n-                    break;\n-                default:\n-                    throw new IllegalStateException( \"Unknown state: \" + state );\n-                }\n-            } );\n-            logIndexStateSummary( \"start\", indexStates );\n-\n-            // Drop placeholder proxies for indexes that need to be rebuilt\n-            dropRecoveringIndexes( indexMap, rebuildingDescriptors.iterator() );\n-\n-            // Rebuild indexes by recreating and repopulating them\n-            if ( !rebuildingDescriptors.isEmpty() )\n-            {\n-                IndexPopulationJob populationJob = newIndexPopulationJob();\n-                rebuildingDescriptors.visitEntries(\n-                        (PrimitiveLongObjectVisitor<RebuildingIndexDescriptor,Exception>) ( indexId, descriptor ) ->\n-                        {\n-                            IndexProxy proxy = indexProxyCreator.createPopulatingIndexProxy(\n-                                    indexId,\n-                                    descriptor.getSchemaIndexDescriptor(),\n-                                    descriptor.getProviderDescriptor(),\n-                                    false, // never pass through a tentative online state during recovery\n-                                    monitor,\n-                                    populationJob );\n-                            proxy.start();\n-                            indexMap.putIndexProxy( indexId, proxy );\n-                            return false;\n-                        } );\n-                startIndexPopulation( populationJob );\n-            }\n-            return indexMap;\n-        } );\n-\n-        samplingController.recoverIndexSamples();\n-        samplingController.start();\n-\n-        // So at this point we've started population of indexes that needs to be rebuilt in the background.\n-        // Indexes backing uniqueness constraints are normally built within the transaction creating the constraint\n-        // and so we shouldn't leave such indexes in a populating state after recovery.\n-        // This is why we now go and wait for those indexes to be fully populated.\n-        rebuildingDescriptors.visitEntries(\n-                (PrimitiveLongObjectVisitor<RebuildingIndexDescriptor,Exception>) ( indexId, descriptor ) ->\n-                {\n-                    if ( descriptor.getSchemaIndexDescriptor().type() != SchemaIndexDescriptor.Type.UNIQUE )\n-                    {\n-                        // It's not a uniqueness constraint, so don't wait for it to be rebuilt\n-                        return false;\n-                    }\n-\n-                    IndexProxy proxy;\n-                    try\n-                    {\n-                        proxy = getIndexProxy( indexId );\n-                    }\n-                    catch ( IndexNotFoundKernelException e )\n-                    {\n-                        throw new IllegalStateException(\n-                                \"What? This index was seen during recovery just now, why isn't it available now?\" );\n-                    }\n-\n-                    monitor.awaitingPopulationOfRecoveredIndex( indexId, descriptor.getSchemaIndexDescriptor() );\n-                    awaitOnline( proxy );\n-                    return false;\n-                } );\n-\n-        state = State.RUNNING;\n-    }\n-\n-    private void performRecoveredIndexDropActions()\n-    {\n-        indexesToDropAfterCompletedRecovery.values().forEach( index ->\n-        {\n-            try\n-            {\n-                index.drop();\n-            }\n-            catch ( Exception e )\n-            {\n-                // This is OK to get during recovery because the underlying index can be in any unknown state\n-                // while we're recovering. Let's just move on to closing it instead.\n-                try\n-                {\n-                    index.close();\n-                }\n-                catch ( IOException closeException )\n-                {\n-                    // This is OK for the same reason as above\n-                }\n-            }\n-        } );\n-        indexesToDropAfterCompletedRecovery.clear();\n-    }\n-\n-    /**\n-     * Polls the {@link IndexProxy#getState() state of the index} and waits for it to be either\n-     * {@link InternalIndexState#ONLINE}, in which case the wait is over, or {@link InternalIndexState#FAILED},\n-     * in which an exception is thrown.\n-     */\n-    private void awaitOnline( IndexProxy proxy ) throws InterruptedException\n-    {\n-        while ( true )\n-        {\n-            switch ( proxy.getState() )\n-            {\n-            case ONLINE:\n-                return;\n-            case FAILED:\n-                throw new IllegalStateException(\n-                        \"Index entered \" + FAILED + \" state while recovery waited for it to be fully populated\" );\n-            case POPULATING:\n-                // Sleep a short while and look at state again the next loop iteration\n-                Thread.sleep( 10 );\n-                break;\n-            default:\n-                throw new IllegalStateException( proxy.getState().name() );\n-            }\n-        }\n+    public void populationCompleteOn(SchemaIndexDescriptor descriptor)\n+    {   // Do nothing\n     }\n \n-    // We need to stop indexing service on shutdown since we can have transactions that are ongoing/finishing\n-    // after we start stopping components and those transactions should be able to finish successfully\n     @Override\n-    public void shutdown() throws ExecutionException, InterruptedException\n-    {\n-        state = State.STOPPED;\n-        samplingController.stop();\n-        populationJobController.stop();\n-        closeAllIndexes();\n+    public void indexPopulationScanStarting()\n+    {   // Do nothing\n     }\n \n-    public DoubleLongRegister indexUpdatesAndSize( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException\n-    {\n-        final long indexId = indexMapRef.getOnlineIndexId( descriptor );\n-        final DoubleLongRegister output = Registers.newDoubleLongRegister();\n-        storeView.indexUpdatesAndSize( indexId, output );\n-        return output;\n+    @Override\n+    public void indexPopulationScanComplete()\n+    {   // Do nothing\n     }\n \n-    public double indexUniqueValuesPercentage( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException\n-    {\n-        final long indexId = indexMapRef.getOnlineIndexId( descriptor );\n-        final DoubleLongRegister output = Registers.newDoubleLongRegister();\n-        storeView.indexSample( indexId, output );\n-        long unique = output.readFirst();\n-        long size = output.readSecond();\n-        if ( size == 0 )\n+    @Override\n+    public void awaitingPopulationOfRecoveredIndex(long indexId, SchemaIndexDescriptor descriptor)\n+    {   // Do nothing\n+    }\n+  }\n+\n+  public static final Monitor NO_MONITOR = new MonitorAdapter();\n+\n+  private volatile State state = State.NOT_STARTED;\n+\n+  IndexingService(IndexProxyCreator indexProxyCreator,\n+                  IndexProviderMap providerMap,\n+                  IndexMapReference indexMapRef,\n+                  IndexStoreView storeView,\n+                  Iterable<IndexRule> indexRules,\n+                  IndexSamplingController samplingController,\n+                  TokenNameLookup tokenNameLookup,\n+                  JobScheduler scheduler,\n+                  SchemaState schemaState,\n+                  MultiPopulatorFactory multiPopulatorFactory,\n+                  LogProvider logProvider,\n+                  Monitor monitor)\n+  {\n+    this.indexProxyCreator = indexProxyCreator;\n+    this.providerMap = providerMap;\n+    this.indexMapRef = indexMapRef;\n+    this.storeView = storeView;\n+    this.indexRules = indexRules;\n+    this.samplingController = samplingController;\n+    this.tokenNameLookup = tokenNameLookup;\n+    this.schemaState = schemaState;\n+    this.multiPopulatorFactory = multiPopulatorFactory;\n+    this.logProvider = logProvider;\n+    this.monitor = monitor;\n+    this.populationJobController = new IndexPopulationJobController(scheduler);\n+    this.log = logProvider.getLog(getClass());\n+  }\n+\n+  /**\n+   * Called while the database starts up, before recovery.\n+   */\n+  @Override\n+  public void init()\n+  {\n+    indexMapRef.modify(indexMap ->\n+    {\n+      Map<InternalIndexState, List<IndexLogRecord>> indexStates = new EnumMap<>(InternalIndexState.class);\n+      for (IndexRule indexRule : indexRules)\n+      {\n+        IndexProxy indexProxy;\n+\n+        long indexId = indexRule.getId();\n+        SchemaIndexDescriptor descriptor = indexRule.getIndexDescriptor();\n+        IndexProvider.Descriptor providerDescriptor = indexRule.getProviderDescriptor();\n+        IndexProvider provider = providerMap.lookup(providerDescriptor);\n+        InternalIndexState initialState = provider.getInitialState(indexId, descriptor);\n+        indexStates.computeIfAbsent(initialState, internalIndexState -> new ArrayList<>())\n+            .add(new IndexLogRecord(indexId, descriptor));\n+\n+        log.debug(indexStateInfo(\"init\", indexId, initialState, descriptor));\n+        switch (initialState)\n         {\n-            return 1.0d;\n+          case ONLINE:\n+            monitor.initialState(descriptor, ONLINE);\n+            indexProxy = indexProxyCreator.createOnlineIndexProxy(indexId, descriptor, providerDescriptor);\n+            break;\n+          case POPULATING:\n+            // The database was shut down during population, or a crash has occurred, or some other sad thing.\n+            monitor.initialState(descriptor, POPULATING);\n+            indexProxy = indexProxyCreator.createRecoveringIndexProxy(\n+                indexId, descriptor, providerDescriptor);\n+            break;\n+          case FAILED:\n+            monitor.initialState(descriptor, FAILED);\n+            IndexPopulationFailure failure = failure(provider.getPopulationFailure(indexId, descriptor));\n+            indexProxy = indexProxyCreator.createFailedIndexProxy(indexId, descriptor, providerDescriptor, failure);\n+            break;\n+          default:\n+            throw new IllegalArgumentException(\"\" + initialState);\n         }\n-        else\n+        indexMap.putIndexProxy(indexId, indexProxy);\n+      }\n+      logIndexStateSummary(\"init\", indexStates);\n+      return indexMap;\n+    });\n+  }\n+\n+  // Recovery semantics: This is to be called after init, and after the database has run recovery.\n+  @Override\n+  public void start() throws Exception\n+  {\n+    state = State.STARTING;\n+\n+    // During recovery there could have been dropped indexes. Dropping an index means also updating the counts store,\n+    // which is problematic during recovery. So instead drop those indexes here, after recovery completed.\n+    performRecoveredIndexDropActions();\n+\n+    // Recovery will not do refresh (update read views) while applying recovered transactions and instead\n+    // do it at one point after recovery... i.e. here\n+    indexMapRef.indexMapSnapshot().forEachIndexProxy(indexProxyOperation(\"refresh\", IndexProxy::refresh));\n+\n+    final PrimitiveLongObjectMap<RebuildingIndexDescriptor> rebuildingDescriptors = Primitive.longObjectMap();\n+    indexMapRef.modify(indexMap ->\n+    {\n+      Map<InternalIndexState, List<IndexLogRecord>> indexStates = new EnumMap<>(InternalIndexState.class);\n+\n+      // Find all indexes that are not already online, do not require rebuilding, and create them\n+      indexMap.forEachIndexProxy((indexId, proxy) ->\n+      {\n+        InternalIndexState state = proxy.getState();\n+        SchemaIndexDescriptor descriptor = proxy.getDescriptor();\n+        indexStates.computeIfAbsent(state, internalIndexState -> new ArrayList<>())\n+            .add(new IndexLogRecord(indexId, descriptor));\n+        log.debug(indexStateInfo(\"start\", indexId, state, descriptor));\n+        switch (state)\n         {\n-            return ((double) unique) / ((double) size);\n+          case ONLINE:\n+            // Don't do anything, index is ok.\n+            break;\n+          case POPULATING:\n+            // Remember for rebuilding\n+            rebuildingDescriptors.put(indexId,\n+                new RebuildingIndexDescriptor(descriptor, proxy.getProviderDescriptor()));\n+            break;\n+          case FAILED:\n+            // Don't do anything, the user needs to drop the index and re-create\n+            break;\n+          default:\n+            throw new IllegalStateException(\"Unknown state: \" + state);\n         }\n-    }\n+      });\n+      logIndexStateSummary(\"start\", indexStates);\n \n-    public void validateBeforeCommit( SchemaDescriptor index, Value[] tuple )\n-    {\n-        indexMapRef.validateBeforeCommit( index, tuple );\n-    }\n+      // Drop placeholder proxies for indexes that need to be rebuilt\n+      dropRecoveringIndexes(indexMap, rebuildingDescriptors.iterator());\n \n-    /**\n-     * Applies updates from the given {@link IndexUpdates}, which may contain updates for one or more indexes.\n-     * As long as index updates are derived from physical commands and store state there's special treatment\n-     * during recovery since we cannot read from an unrecovered store, so in that case the nodes ids are simply\n-     * noted and reindexed after recovery of the store has completed. That is also why {@link IndexUpdates}\n-     * has one additional accessor method for getting the node ids.\n-     *\n-     * As far as {@link IndexingService} is concerned recovery happens between calls to {@link #init()} and\n-     * {@link #start()}.\n-     *\n-     * @param updates {@link IndexUpdates} to apply.\n-     * @throws IOException potentially thrown from index updating.\n-     * @throws IndexEntryConflictException potentially thrown from index updating.\n-     */\n-    @Override\n-    public void apply( IndexUpdates updates ) throws IOException, IndexEntryConflictException\n-    {\n-        if ( state == State.NOT_STARTED )\n-        {\n-            // We're in recovery, which means we'll be telling indexes to apply with additional care for making\n-            // idempotent changes.\n-            apply( updates, IndexUpdateMode.RECOVERY );\n-        }\n-        else if ( state == State.RUNNING || state == State.STARTING )\n-        {\n-            apply( updates, IndexUpdateMode.ONLINE );\n-        }\n-        else\n+      // Rebuild indexes by recreating and repopulating them\n+      if (!rebuildingDescriptors.isEmpty())\n+      {\n+        IndexPopulationJob populationJob = newIndexPopulationJob();\n+        rebuildingDescriptors.visitEntries(\n+            (PrimitiveLongObjectVisitor<RebuildingIndexDescriptor, Exception>) (indexId, descriptor) ->\n+            {\n+              IndexProxy proxy = indexProxyCreator.createPopulatingIndexProxy(\n+                  indexId,\n+                  descriptor.getSchemaIndexDescriptor(),\n+                  descriptor.getProviderDescriptor(),\n+                  false, // never pass through a tentative online state during recovery\n+                  monitor,\n+                  populationJob);\n+              proxy.start();\n+              indexMap.putIndexProxy(indexId, proxy);\n+              return false;\n+            });\n+        startIndexPopulation(populationJob);\n+      }\n+      return indexMap;\n+    });\n+\n+    samplingController.recoverIndexSamples();\n+    samplingController.start();\n+\n+    // So at this point we've started population of indexes that needs to be rebuilt in the background.\n+    // Indexes backing uniqueness constraints are normally built within the transaction creating the constraint\n+    // and so we shouldn't leave such indexes in a populating state after recovery.\n+    // This is why we now go and wait for those indexes to be fully populated.\n+    rebuildingDescriptors.visitEntries(\n+        (PrimitiveLongObjectVisitor<RebuildingIndexDescriptor, Exception>) (indexId, descriptor) ->\n         {\n+          if (descriptor.getSchemaIndexDescriptor().type() != SchemaIndexDescriptor.Type.UNIQUE)\n+          {\n+            // It's not a uniqueness constraint, so don't wait for it to be rebuilt\n+            return false;\n+          }\n+\n+          IndexProxy proxy;\n+          try\n+          {\n+            proxy = getIndexProxy(indexId);\n+          } catch (IndexNotFoundKernelException e)\n+          {\n             throw new IllegalStateException(\n-                    \"Can't apply index updates \" + asList( updates ) + \" while indexing service is \" + state );\n-        }\n-    }\n-\n-    private void apply( Iterable<IndexEntryUpdate<SchemaDescriptor>> updates, IndexUpdateMode updateMode )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        try ( IndexUpdaterMap updaterMap = indexMapRef.createIndexUpdaterMap( updateMode ) )\n+                \"What? This index was seen during recovery just now, why isn't it available now?\");\n+          }\n+\n+          monitor.awaitingPopulationOfRecoveredIndex(indexId, descriptor.getSchemaIndexDescriptor());\n+          awaitOnline(proxy);\n+          return false;\n+        });\n+\n+    state = State.RUNNING;\n+  }\n+\n+  private void performRecoveredIndexDropActions()\n+  {\n+    indexesToDropAfterCompletedRecovery.values().forEach(index ->\n+    {\n+      try\n+      {\n+        index.drop();\n+      } catch (Exception e)\n+      {\n+        // This is OK to get during recovery because the underlying index can be in any unknown state\n+        // while we're recovering. Let's just move on to closing it instead.\n+        try\n         {\n-            for ( IndexEntryUpdate<SchemaDescriptor> indexUpdate : updates )\n-            {\n-                processUpdate( updaterMap, indexUpdate );\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Iterable<IndexEntryUpdate<SchemaDescriptor>> convertToIndexUpdates( NodeUpdates nodeUpdates )\n-    {\n-        Iterable<SchemaDescriptor> relatedIndexes =\n-                                            indexMapRef.getRelatedIndexes(\n-                                                nodeUpdates.labelsChanged(),\n-                                                nodeUpdates.labelsUnchanged(),\n-                                                nodeUpdates.propertiesChanged() );\n-\n-        return nodeUpdates.forIndexKeys( relatedIndexes, storeView );\n-    }\n-\n-    /**\n-     * Creates one or more indexes. They will all be populated by one and the same store scan.\n-     *\n-     * This code is called from the transaction infrastructure during transaction commits, which means that\n-     * it is *vital* that it is stable, and handles errors very well. Failing here means that the entire db\n-     * will shut down.\n-     */\n-    public void createIndexes( IndexRule... rules ) throws IOException\n-    {\n-        IndexPopulationStarter populationStarter = new IndexPopulationStarter( rules );\n-        indexMapRef.modify( populationStarter );\n-        populationStarter.startPopulation();\n-    }\n-\n-    private void processUpdate( IndexUpdaterMap updaterMap, IndexEntryUpdate<SchemaDescriptor> indexUpdate )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        IndexUpdater updater = updaterMap.getUpdater( indexUpdate.indexKey().schema() );\n-        if ( updater != null )\n+          index.close();\n+        } catch (IOException closeException)\n         {\n-            updater.process( indexUpdate );\n+          // This is OK for the same reason as above\n         }\n-    }\n-\n-    public void dropIndex( IndexRule rule ) throws IOException\n-    {\n-        indexMapRef.modify( indexMap ->\n+      }\n+    });\n+    indexesToDropAfterCompletedRecovery.clear();\n+  }\n+\n+  /**\n+   * Polls the {@link IndexProxy#getState() state of the index} and waits for it to be either\n+   * {@link InternalIndexState#ONLINE}, in which case the wait is over, or {@link InternalIndexState#FAILED},\n+   * in which an exception is thrown.\n+   */\n+  private void awaitOnline(IndexProxy proxy) throws InterruptedException\n+  {\n+    while (true)\n+    {\n+      switch (proxy.getState())\n+      {\n+        case ONLINE:\n+          return;\n+        case FAILED:\n+          throw new IllegalStateException(\n+              \"Index entered \" + FAILED + \" state while recovery waited for it to be fully populated\");\n+        case POPULATING:\n+          // Sleep a short while and look at state again the next loop iteration\n+          Thread.sleep(10);\n+          break;\n+        default:\n+          throw new IllegalStateException(proxy.getState().name());\n+      }\n+    }\n+  }\n+\n+  // We need to stop indexing service on shutdown since we can have transactions that are ongoing/finishing\n+  // after we start stopping components and those transactions should be able to finish successfully\n+  @Override\n+  public void shutdown() throws ExecutionException, InterruptedException\n+  {\n+    state = State.STOPPED;\n+    samplingController.stop();\n+    populationJobController.stop();\n+    closeAllIndexes();\n+  }\n+\n+  public DoubleLongRegister indexUpdatesAndSize(SchemaDescriptor descriptor) throws IndexNotFoundKernelException\n+  {\n+    final long indexId = indexMapRef.getOnlineIndexId(descriptor);\n+    final DoubleLongRegister output = Registers.newDoubleLongRegister();\n+    storeView.indexUpdatesAndSize(indexId, output);\n+    return output;\n+  }\n+\n+  public double indexUniqueValuesPercentage(SchemaDescriptor descriptor) throws IndexNotFoundKernelException\n+  {\n+    final long indexId = indexMapRef.getOnlineIndexId(descriptor);\n+    final DoubleLongRegister output = Registers.newDoubleLongRegister();\n+    storeView.indexSample(indexId, output);\n+    long unique = output.readFirst();\n+    long size = output.readSecond();\n+    if (size == 0)\n+    {\n+      return 1.0d;\n+    } else\n+    {\n+      return ((double) unique) / ((double) size);\n+    }\n+  }\n+\n+  public void validateBeforeCommit(SchemaDescriptor index, Value[] tuple)\n+  {\n+    indexMapRef.validateBeforeCommit(index, tuple);\n+  }\n+\n+  /**\n+   * Applies updates from the given {@link IndexUpdates}, which may contain updates for one or more indexes.\n+   * As long as index updates are derived from physical commands and store state there's special treatment\n+   * during recovery since we cannot read from an unrecovered store, so in that case the nodes ids are simply\n+   * noted and reindexed after recovery of the store has completed. That is also why {@link IndexUpdates}\n+   * has one additional accessor method for getting the node ids.\n+   * <p>\n+   * As far as {@link IndexingService} is concerned recovery happens between calls to {@link #init()} and\n+   * {@link #start()}.\n+   *\n+   * @param updates {@link IndexUpdates} to apply.\n+   * @throws IOException                 potentially thrown from index updating.\n+   * @throws IndexEntryConflictException potentially thrown from index updating.\n+   */\n+  @Override\n+  public void apply(IndexUpdates updates) throws IOException, IndexEntryConflictException\n+  {\n+    if (state == State.NOT_STARTED)\n+    {\n+      // We're in recovery, which means we'll be telling indexes to apply with additional care for making\n+      // idempotent changes.\n+      apply(updates, IndexUpdateMode.RECOVERY);\n+    } else if (state == State.RUNNING || state == State.STARTING)\n+    {\n+      apply(updates, IndexUpdateMode.ONLINE);\n+    } else\n+    {\n+      throw new IllegalStateException(\n+          \"Can't apply index updates \" + asList(updates) + \" while indexing service is \" + state);\n+    }\n+  }\n+\n+  private void apply(Iterable<IndexEntryUpdate<SchemaDescriptor>> updates, IndexUpdateMode updateMode)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    try (IndexUpdaterMap updaterMap = indexMapRef.createIndexUpdaterMap(updateMode))\n+    {\n+      for (IndexEntryUpdate<SchemaDescriptor> indexUpdate : updates)\n+      {\n+        processUpdate(updaterMap, indexUpdate);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Iterable<IndexEntryUpdate<SchemaDescriptor>> convertToIndexUpdates(NodeUpdates nodeUpdates)\n+  {\n+    Iterable<SchemaDescriptor> relatedIndexes =\n+        indexMapRef.getRelatedIndexes(\n+            nodeUpdates.labelsChanged(),\n+            nodeUpdates.labelsUnchanged(),\n+            nodeUpdates.propertiesChanged());\n+\n+    return nodeUpdates.forIndexKeys(relatedIndexes, storeView);\n+  }\n+\n+  /**\n+   * Creates one or more indexes. They will all be populated by one and the same store scan.\n+   * <p>\n+   * This code is called from the transaction infrastructure during transaction commits, which means that\n+   * it is *vital* that it is stable, and handles errors very well. Failing here means that the entire db\n+   * will shut down.\n+   */\n+  public void createIndexes(IndexRule... rules) throws IOException\n+  {\n+    IndexPopulationStarter populationStarter = new IndexPopulationStarter(rules);\n+    indexMapRef.modify(populationStarter);\n+    populationStarter.startPopulation();\n+  }\n+\n+  private void processUpdate(IndexUpdaterMap updaterMap, IndexEntryUpdate<SchemaDescriptor> indexUpdate)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    IndexUpdater updater = updaterMap.getUpdater(indexUpdate.indexKey().schema());\n+    if (updater != null)\n+    {\n+      updater.process(indexUpdate);\n+    }\n+  }\n+\n+  public void dropIndex(IndexRule rule) throws IOException\n+  {\n+    indexMapRef.modify(indexMap ->\n+    {\n+      long indexId = rule.getId();\n+      IndexProxy index = indexMap.removeIndexProxy(indexId);\n+\n+      if (state == State.RUNNING)\n+      {\n+        assert index != null : \"Index \" + rule + \" doesn't exists\";\n+        index.drop();\n+      } else if (index != null)\n+      {\n+        // Dropping an index means also updating the counts store, which is problematic during recovery.\n+        // So instead make a note of it and actually perform the index drops after recovery.\n+        indexesToDropAfterCompletedRecovery.put(indexId, index);\n+      }\n+      return indexMap;\n+    });\n+  }\n+\n+  public void triggerIndexSampling(IndexSamplingMode mode)\n+  {\n+    log.info(\"Manual trigger for sampling all indexes [\" + mode + \"]\");\n+    samplingController.sampleIndexes(mode);\n+  }\n+\n+  public void triggerIndexSampling(SchemaDescriptor descriptor, IndexSamplingMode mode)\n+      throws IndexNotFoundKernelException\n+  {\n+    String description = descriptor.userDescription(tokenNameLookup);\n+    log.info(\"Manual trigger for sampling index \" + description + \" [\" + mode + \"]\");\n+    samplingController.sampleIndex(indexMapRef.getIndexId(descriptor), mode);\n+  }\n+\n+  private void dropRecoveringIndexes(IndexMap indexMap, PrimitiveLongIterator indexesToRebuild)\n+      throws IOException\n+  {\n+    while (indexesToRebuild.hasNext())\n+    {\n+      IndexProxy indexProxy = indexMap.removeIndexProxy(indexesToRebuild.next());\n+      assert indexProxy != null;\n+      indexProxy.drop();\n+    }\n+  }\n+\n+  public void activateIndex(long indexId) throws\n+      IndexNotFoundKernelException, IndexActivationFailedKernelException, IndexPopulationFailedKernelException\n+  {\n+    try\n+    {\n+      if (state == State.RUNNING) // don't do this during recovery.\n+      {\n+        IndexProxy index = getIndexProxy(indexId);\n+        index.awaitStoreScanCompleted();\n+        index.activate();\n+        log.info(\"Constraint %s is %s.\", index.getDescriptor(), ONLINE.name());\n+      }\n+    } catch (InterruptedException e)\n+    {\n+      Thread.interrupted();\n+      throw new IndexActivationFailedKernelException(e, \"Unable to activate index, thread was interrupted.\");\n+    }\n+  }\n+\n+  public IndexProxy getIndexProxy(long indexId) throws IndexNotFoundKernelException\n+  {\n+    return indexMapRef.getIndexProxy(indexId);\n+  }\n+\n+  public IndexProxy getIndexProxy(SchemaDescriptor descriptor) throws IndexNotFoundKernelException\n+  {\n+    return indexMapRef.getIndexProxy(descriptor);\n+  }\n+\n+  public long getIndexId(SchemaDescriptor descriptor) throws IndexNotFoundKernelException\n+  {\n+    return indexMapRef.getIndexId(descriptor);\n+  }\n+\n+  public void validateIndex(long indexId)\n+      throws IndexNotFoundKernelException, IndexPopulationFailedKernelException,\n+      UniquePropertyValueValidationException\n+  {\n+    getIndexProxy(indexId).validate();\n+  }\n+\n+  public void forceAll(IOLimiter limiter)\n+  {\n+    indexMapRef.indexMapSnapshot().forEachIndexProxy(indexProxyOperation(\"force\", proxy -> proxy.force(limiter)));\n+  }\n+\n+  private BiConsumer<Long, IndexProxy> indexProxyOperation(String name, ThrowingConsumer<IndexProxy, Exception> operation)\n+  {\n+    return (id, indexProxy) ->\n+    {\n+      try\n+      {\n+        operation.accept(indexProxy);\n+      } catch (Exception e)\n+      {\n+        try\n         {\n-            long indexId = rule.getId();\n-            IndexProxy index = indexMap.removeIndexProxy( indexId );\n-\n-            if ( state == State.RUNNING )\n-            {\n-                assert index != null : \"Index \" + rule + \" doesn't exists\";\n-                index.drop();\n-            }\n-            else if ( index != null )\n-            {\n-                // Dropping an index means also updating the counts store, which is problematic during recovery.\n-                // So instead make a note of it and actually perform the index drops after recovery.\n-                indexesToDropAfterCompletedRecovery.put( indexId, index );\n-            }\n-            return indexMap;\n-        } );\n-    }\n-\n-    public void triggerIndexSampling( IndexSamplingMode mode )\n-    {\n-        log.info( \"Manual trigger for sampling all indexes [\" + mode + \"]\" );\n-        samplingController.sampleIndexes( mode );\n-    }\n-\n-    public void triggerIndexSampling( SchemaDescriptor descriptor, IndexSamplingMode mode )\n-            throws IndexNotFoundKernelException\n-    {\n-        String description = descriptor.userDescription( tokenNameLookup );\n-        log.info( \"Manual trigger for sampling index \" + description + \" [\" + mode + \"]\" );\n-        samplingController.sampleIndex( indexMapRef.getIndexId( descriptor ), mode );\n-    }\n-\n-    private void dropRecoveringIndexes( IndexMap indexMap, PrimitiveLongIterator indexesToRebuild )\n-            throws IOException\n-    {\n-        while ( indexesToRebuild.hasNext() )\n+          IndexProxy proxy = indexMapRef.getIndexProxy(id);\n+          throw new UnderlyingStorageException(\"Unable to \" + name + \" \" + proxy, e);\n+        } catch (IndexNotFoundKernelException infe)\n         {\n-            IndexProxy indexProxy = indexMap.removeIndexProxy( indexesToRebuild.next() );\n-            assert indexProxy != null;\n-            indexProxy.drop();\n+          // index was dropped while trying to operate on it, we can continue to other indexes\n         }\n-    }\n+      }\n+    };\n+  }\n \n-    public void activateIndex( long indexId ) throws\n-            IndexNotFoundKernelException, IndexActivationFailedKernelException, IndexPopulationFailedKernelException\n+  private void closeAllIndexes()\n+  {\n+    indexMapRef.modify(indexMap ->\n     {\n+      Iterable<IndexProxy> indexesToStop = indexMap.getAllIndexProxies();\n+      for (IndexProxy index : indexesToStop)\n+      {\n         try\n         {\n-            if ( state == State.RUNNING ) // don't do this during recovery.\n-            {\n-                IndexProxy index = getIndexProxy( indexId );\n-                index.awaitStoreScanCompleted();\n-                index.activate();\n-                log.info( \"Constraint %s is %s.\", index.getDescriptor(), ONLINE.name() );\n-            }\n-        }\n-        catch ( InterruptedException e )\n+          index.close();\n+        } catch (Exception e)\n         {\n-            Thread.interrupted();\n-            throw new IndexActivationFailedKernelException( e, \"Unable to activate index, thread was interrupted.\" );\n+          log.error(\"Unable to close index\", e);\n         }\n-    }\n+      }\n+      // Effectively clearing it\n+      return new IndexMap();\n+    });\n+  }\n \n-    public IndexProxy getIndexProxy( long indexId ) throws IndexNotFoundKernelException\n+  public PrimitiveLongSet getIndexIds()\n+  {\n+    Iterable<IndexProxy> indexProxies = indexMapRef.getAllIndexProxies();\n+    PrimitiveLongSet indexIds = Primitive.longSet();\n+    for (IndexProxy indexProxy : indexProxies)\n     {\n-        return indexMapRef.getIndexProxy( indexId );\n+      indexIds.add(indexProxy.getIndexId());\n     }\n+    return indexIds;\n+  }\n \n-    public IndexProxy getIndexProxy( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException\n+  public ResourceIterator<File> snapshotIndexFiles() throws IOException\n+  {\n+    Collection<ResourceIterator<File>> snapshots = new ArrayList<>();\n+    for (IndexProxy indexProxy : indexMapRef.getAllIndexProxies())\n     {\n-        return indexMapRef.getIndexProxy( descriptor );\n+      snapshots.add(indexProxy.snapshotFiles());\n     }\n+    return Iterators.concatResourceIterators(snapshots.iterator());\n+  }\n \n-    public long getIndexId( SchemaDescriptor descriptor ) throws IndexNotFoundKernelException\n-    {\n-        return indexMapRef.getIndexId( descriptor );\n-    }\n+  private IndexPopulationJob newIndexPopulationJob()\n+  {\n+    MultipleIndexPopulator multiPopulator = multiPopulatorFactory.create(storeView, logProvider, schemaState);\n+    return new IndexPopulationJob(multiPopulator, monitor);\n+  }\n \n-    public void validateIndex( long indexId )\n-            throws IndexNotFoundKernelException, IndexPopulationFailedKernelException,\n-            UniquePropertyValueValidationException\n-    {\n-        getIndexProxy( indexId ).validate();\n-    }\n+  private void startIndexPopulation(IndexPopulationJob job)\n+  {\n+    populationJobController.startIndexPopulation(job);\n+  }\n \n-    public void forceAll( IOLimiter limiter )\n-    {\n-        indexMapRef.indexMapSnapshot().forEachIndexProxy( indexProxyOperation( \"force\", proxy -> proxy.force( limiter ) ) );\n-    }\n+  private String indexStateInfo(String tag, Long indexId, InternalIndexState state, SchemaIndexDescriptor descriptor)\n+  {\n+    return format(\"IndexingService.%s: index %d on %s is %s\", tag, indexId,\n+        descriptor.schema().userDescription(tokenNameLookup), state.name());\n+  }\n \n-    private BiConsumer<Long,IndexProxy> indexProxyOperation( String name, ThrowingConsumer<IndexProxy,Exception> operation )\n+  private void logIndexStateSummary(String method, Map<InternalIndexState, List<IndexLogRecord>> indexStates)\n+  {\n+    if (indexStates.isEmpty())\n     {\n-        return ( id, indexProxy ) ->\n-        {\n-            try\n-            {\n-                operation.accept( indexProxy );\n-            }\n-            catch ( Exception e )\n-            {\n-                try\n-                {\n-                    IndexProxy proxy = indexMapRef.getIndexProxy( id );\n-                    throw new UnderlyingStorageException( \"Unable to \" + name + \" \" + proxy, e );\n-                }\n-                catch ( IndexNotFoundKernelException infe )\n-                {\n-                    // index was dropped while trying to operate on it, we can continue to other indexes\n-                }\n-            }\n-        };\n+      return;\n     }\n-\n-    private void closeAllIndexes()\n+    int mostPopularStateCount = Integer.MIN_VALUE;\n+    InternalIndexState mostPopularState = null;\n+    for (Map.Entry<InternalIndexState, List<IndexLogRecord>> indexStateEntry : indexStates.entrySet())\n     {\n-        indexMapRef.modify( indexMap ->\n-        {\n-            Iterable<IndexProxy> indexesToStop = indexMap.getAllIndexProxies();\n-            for ( IndexProxy index : indexesToStop )\n-            {\n-                try\n-                {\n-                    index.close();\n-                }\n-                catch ( Exception e )\n-                {\n-                    log.error( \"Unable to close index\", e );\n-                }\n-            }\n-            // Effectively clearing it\n-            return new IndexMap();\n-        } );\n+      if (indexStateEntry.getValue().size() > mostPopularStateCount)\n+      {\n+        mostPopularState = indexStateEntry.getKey();\n+        mostPopularStateCount = indexStateEntry.getValue().size();\n+      }\n     }\n-\n-    public PrimitiveLongSet getIndexIds()\n+    indexStates.remove(mostPopularState);\n+    for (Map.Entry<InternalIndexState, List<IndexLogRecord>> indexStateEntry : indexStates.entrySet())\n     {\n-        Iterable<IndexProxy> indexProxies = indexMapRef.getAllIndexProxies();\n-        PrimitiveLongSet indexIds = Primitive.longSet();\n-        for ( IndexProxy indexProxy : indexProxies )\n-        {\n-            indexIds.add( indexProxy.getIndexId() );\n-        }\n-        return indexIds;\n-    }\n-\n-    public ResourceIterator<File> snapshotIndexFiles() throws IOException\n-    {\n-        Collection<ResourceIterator<File>> snapshots = new ArrayList<>();\n-        for ( IndexProxy indexProxy : indexMapRef.getAllIndexProxies() )\n-        {\n-            snapshots.add( indexProxy.snapshotFiles() );\n-        }\n-        return Iterators.concatResourceIterators( snapshots.iterator() );\n+      InternalIndexState state = indexStateEntry.getKey();\n+      List<IndexLogRecord> logRecords = indexStateEntry.getValue();\n+      for (IndexLogRecord logRecord : logRecords)\n+      {\n+        log.info(indexStateInfo(method, logRecord.getIndexId(), state, logRecord.getDescriptor()));\n+      }\n     }\n+    log.info(format(\"IndexingService.%s: indexes not specifically mentioned above are %s\", method, mostPopularState));\n+  }\n \n-    private IndexPopulationJob newIndexPopulationJob()\n-    {\n-        MultipleIndexPopulator multiPopulator = multiPopulatorFactory.create( storeView, logProvider, schemaState );\n-        return new IndexPopulationJob( multiPopulator, monitor );\n-    }\n+  private final class IndexPopulationStarter implements ThrowingFunction<IndexMap, IndexMap, IOException>\n+  {\n+    private final IndexRule[] rules;\n+    private IndexPopulationJob populationJob;\n \n-    private void startIndexPopulation( IndexPopulationJob job )\n+    IndexPopulationStarter(IndexRule[] rules)\n     {\n-        populationJobController.startIndexPopulation( job );\n+      this.rules = rules;\n     }\n \n-    private String indexStateInfo( String tag, Long indexId, InternalIndexState state, SchemaIndexDescriptor descriptor )\n-    {\n-        return format( \"IndexingService.%s: index %d on %s is %s\", tag, indexId,\n-                descriptor.schema().userDescription( tokenNameLookup ), state.name() );\n-    }\n-\n-    private void logIndexStateSummary( String method, Map<InternalIndexState,List<IndexLogRecord>> indexStates )\n+    @Override\n+    public IndexMap apply(IndexMap indexMap) throws IOException\n     {\n-        if ( indexStates.isEmpty() )\n+      for (IndexRule rule : rules)\n+      {\n+        long ruleId = rule.getId();\n+        if (state == State.NOT_STARTED)\n         {\n-            return;\n+          // In case of recovery remove any previously recorded INDEX DROP for this particular index rule id,\n+          // in some scenario where rule ids may be reused.\n+          indexesToDropAfterCompletedRecovery.remove(ruleId);\n         }\n-        int mostPopularStateCount = Integer.MIN_VALUE;\n-        InternalIndexState mostPopularState = null;\n-        for ( Map.Entry<InternalIndexState,List<IndexLogRecord>> indexStateEntry : indexStates.entrySet() )\n+        IndexProxy index = indexMap.getIndexProxy(ruleId);\n+        if (index != null && state == State.NOT_STARTED)\n         {\n-            if ( indexStateEntry.getValue().size() > mostPopularStateCount )\n-            {\n-                mostPopularState = indexStateEntry.getKey();\n-                mostPopularStateCount = indexStateEntry.getValue().size();\n-            }\n+          // During recovery we might run into this scenario:\n+          // - We're starting recovery on a database, where init() is called and all indexes that\n+          //   are found in the store, instantiated and put into the IndexMap. Among them is index X.\n+          // - While we recover the database we bump into a transaction creating index Y, with the\n+          //   same IndexDescriptor, i.e. same label/property, as X. This is possible since this took\n+          //   place before the creation of X.\n+          // - When Y is dropped in between this creation and the creation of X (it will have to be\n+          //   otherwise X wouldn't have had an opportunity to be created) the index is removed from\n+          //   the IndexMap, both by id AND descriptor.\n+          //\n+          // Because of the scenario above we need to put this created index into the IndexMap\n+          // again, otherwise it will disappear from the IndexMap (at least for lookup by descriptor)\n+          // and not be able to accept changes applied from recovery later on.\n+          indexMap.putIndexProxy(ruleId, index);\n+          continue;\n         }\n-        indexStates.remove( mostPopularState );\n-        for ( Map.Entry<InternalIndexState,List<IndexLogRecord>> indexStateEntry : indexStates.entrySet() )\n+        final SchemaIndexDescriptor descriptor = rule.getIndexDescriptor();\n+        Descriptor providerDescriptor = rule.getProviderDescriptor();\n+        boolean flipToTentative = rule.canSupportUniqueConstraint();\n+        if (state == State.RUNNING)\n         {\n-            InternalIndexState state = indexStateEntry.getKey();\n-            List<IndexLogRecord> logRecords = indexStateEntry.getValue();\n-            for ( IndexLogRecord logRecord : logRecords )\n-            {\n-                log.info( indexStateInfo( method, logRecord.getIndexId(), state, logRecord.getDescriptor() ) );\n-            }\n+          populationJob = populationJob == null ? newIndexPopulationJob() : populationJob;\n+          index = indexProxyCreator.createPopulatingIndexProxy(\n+              ruleId, descriptor, providerDescriptor, flipToTentative, monitor, populationJob);\n+          index.start();\n+        } else\n+        {\n+          index = indexProxyCreator.createRecoveringIndexProxy(ruleId, descriptor, providerDescriptor);\n         }\n-        log.info( format( \"IndexingService.%s: indexes not specifically mentioned above are %s\", method, mostPopularState ) );\n+\n+        indexMap.putIndexProxy(rule.getId(), index);\n+      }\n+      return indexMap;\n     }\n \n-    private final class IndexPopulationStarter implements ThrowingFunction<IndexMap,IndexMap,IOException>\n+    void startPopulation()\n     {\n-        private final IndexRule[] rules;\n-        private IndexPopulationJob populationJob;\n-\n-        IndexPopulationStarter( IndexRule[] rules )\n-        {\n-            this.rules = rules;\n-        }\n+      if (populationJob != null)\n+      {\n+        startIndexPopulation(populationJob);\n+      }\n+    }\n+  }\n \n-        @Override\n-        public IndexMap apply( IndexMap indexMap ) throws IOException\n-        {\n-            for ( IndexRule rule : rules )\n-            {\n-                long ruleId = rule.getId();\n-                if ( state == State.NOT_STARTED )\n-                {\n-                    // In case of recovery remove any previously recorded INDEX DROP for this particular index rule id,\n-                    // in some scenario where rule ids may be reused.\n-                    indexesToDropAfterCompletedRecovery.remove( ruleId );\n-                }\n-                IndexProxy index = indexMap.getIndexProxy( ruleId );\n-                if ( index != null && state == State.NOT_STARTED )\n-                {\n-                    // During recovery we might run into this scenario:\n-                    // - We're starting recovery on a database, where init() is called and all indexes that\n-                    //   are found in the store, instantiated and put into the IndexMap. Among them is index X.\n-                    // - While we recover the database we bump into a transaction creating index Y, with the\n-                    //   same IndexDescriptor, i.e. same label/property, as X. This is possible since this took\n-                    //   place before the creation of X.\n-                    // - When Y is dropped in between this creation and the creation of X (it will have to be\n-                    //   otherwise X wouldn't have had an opportunity to be created) the index is removed from\n-                    //   the IndexMap, both by id AND descriptor.\n-                    //\n-                    // Because of the scenario above we need to put this created index into the IndexMap\n-                    // again, otherwise it will disappear from the IndexMap (at least for lookup by descriptor)\n-                    // and not be able to accept changes applied from recovery later on.\n-                    indexMap.putIndexProxy( ruleId, index );\n-                    continue;\n-                }\n-                final SchemaIndexDescriptor descriptor = rule.getIndexDescriptor();\n-                Descriptor providerDescriptor = rule.getProviderDescriptor();\n-                boolean flipToTentative = rule.canSupportUniqueConstraint();\n-                if ( state == State.RUNNING )\n-                {\n-                    populationJob = populationJob == null ? newIndexPopulationJob() : populationJob;\n-                    index = indexProxyCreator.createPopulatingIndexProxy(\n-                            ruleId, descriptor, providerDescriptor, flipToTentative, monitor, populationJob );\n-                    index.start();\n-                }\n-                else\n-                {\n-                    index = indexProxyCreator.createRecoveringIndexProxy( ruleId, descriptor, providerDescriptor );\n-                }\n-\n-                indexMap.putIndexProxy( rule.getId(), index );\n-            }\n-            return indexMap;\n-        }\n+  private static final class IndexLogRecord\n+  {\n+    private final long indexId;\n+    private final SchemaIndexDescriptor descriptor;\n \n-        void startPopulation()\n-        {\n-            if ( populationJob != null )\n-            {\n-                startIndexPopulation( populationJob );\n-            }\n-        }\n+    IndexLogRecord(long indexId, SchemaIndexDescriptor descriptor)\n+    {\n+      this.indexId = indexId;\n+      this.descriptor = descriptor;\n     }\n \n-    private static final class IndexLogRecord\n+    public long getIndexId()\n     {\n-        private final long indexId;\n-        private final SchemaIndexDescriptor descriptor;\n-\n-        IndexLogRecord( long indexId, SchemaIndexDescriptor descriptor )\n-        {\n-            this.indexId = indexId;\n-            this.descriptor = descriptor;\n-        }\n-\n-        public long getIndexId()\n-        {\n-            return indexId;\n-        }\n+      return indexId;\n+    }\n \n-        public SchemaIndexDescriptor getDescriptor()\n-        {\n-            return descriptor;\n-        }\n+    public SchemaIndexDescriptor getDescriptor()\n+    {\n+      return descriptor;\n     }\n+  }\n }\n",
            "diff_size": 1099
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}