{
    "project_name": "Angel-ML-angel",
    "error_id": "581",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/581/SampleNeighborPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/581/SampleNeighborPartResult.java\nindex cb5a6482ecf..8b91d873232 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/581/SampleNeighborPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/581/SampleNeighborPartResult.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.sampleneighbor4;\n \n import com.tencent.angel.common.ByteBufSerdeUtils;\n@@ -36,8 +37,8 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   boolean sampleTypes;\n \n   public SampleNeighborPartResult(int partId, ServerLongAnyRow row,\n-      long[] keys, int numSample,\n-      boolean sampleTypes) {\n+                                  long[] keys, int numSample,\n+                                  boolean sampleTypes) {\n     this.partId = partId;\n     this.keys = keys;\n     this.numSample = numSample;\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/581/SampleNeighborPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/581/SampleNeighborPartResult.java\nindex cb5a6482ecf..c623179760d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/581/SampleNeighborPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/581/SampleNeighborPartResult.java\n@@ -36,8 +36,7 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   boolean sampleTypes;\n \n   public SampleNeighborPartResult(int partId, ServerLongAnyRow row,\n-      long[] keys, int numSample,\n-      boolean sampleTypes) {\n+long[] keys, int numSample, boolean sampleTypes) {\n     this.partId = partId;\n     this.keys = keys;\n     this.numSample = numSample;\n@@ -190,4 +189,4 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/581/SampleNeighborPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/581/SampleNeighborPartResult.java\nindex cb5a6482ecf..b87b1a9174e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/581/SampleNeighborPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/581/SampleNeighborPartResult.java\n@@ -29,15 +29,15 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   private int[] indptr;\n   private int[] types;\n   private long[] neighbors;\n-\n   ServerLongAnyRow row;\n   long[] keys;\n+\n+\n   int numSample;\n+\n   boolean sampleTypes;\n \n-  public SampleNeighborPartResult(int partId, ServerLongAnyRow row,\n-      long[] keys, int numSample,\n-      boolean sampleTypes) {\n+  public SampleNeighborPartResult(int partId, ServerLongAnyRow row, long[] keys, int numSample, boolean sampleTypes) {\n     this.partId = partId;\n     this.keys = keys;\n     this.numSample = numSample;\n@@ -45,9 +45,7 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n     this.sampleTypes = sampleTypes;\n   }\n \n-  public SampleNeighborPartResult() {\n-\n-  }\n+  public SampleNeighborPartResult() {}\n \n   public int[] getIndptr() {\n     return indptr;\n@@ -69,10 +67,10 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   public void serialize(ByteBuf buf) {\n     // sample happens here to avoid memory copy on servers\n     Random rand = new Random(System.currentTimeMillis());\n-\n     buf.writeInt(partId); // write partition id first\n     buf.writeBoolean(sampleTypes);\n     buf.writeInt(keys.length);\n+\n     int writeIndex = buf.writerIndex();\n     buf.writeInt(0);\n \n@@ -95,7 +93,6 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n       if (numSample <= 0 || numSample >= neighbor.length) {\n         size = neighbor.length;\n       }\n-\n       length += size; // # neighbors/types\n       buf.writeInt(size);\n \n@@ -113,7 +110,6 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n         }\n       }\n     }\n-\n     buf.setInt(writeIndex, length);\n   }\n \n@@ -121,9 +117,9 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   public void deserialize(ByteBuf buf) {\n     partId = buf.readInt();\n     sampleTypes = buf.readBoolean();\n+\n     int keysLen = buf.readInt();\n     int neighborLen = buf.readInt();\n-\n     indptr = new int[keysLen + 1];\n     neighbors = new long[neighborLen];\n     if (sampleTypes) {\n@@ -155,7 +151,6 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   @Override\n   public int bufferLen() {\n     int len = 4 + 4 + 4 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes);\n-\n     for (int i = 0; i < keys.length; i++) {\n       Node node = (Node) row.get(keys[i]);\n       if (node == null) {\n@@ -173,9 +168,7 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n       if (numSample <= 0 || numSample >= neighbor.length) {\n         size = neighbor.length;\n       }\n-\n       len += 4;\n-\n       if (sampleTypes) {\n         for (int j = 0; j < size; j++) {\n           len += 8 + 4;\n@@ -189,5 +182,4 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n     return len;\n   }\n \n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}