{
    "project_name": "CESNET-perun",
    "error_id": "485",
    "information": {
        "errors": [
            {
                "line": "153",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t *\n\t * Description can be null.\n\t * \n\t * @param sess\n\t * @param securityTeam\n\t * @param user",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/485/SecurityTeamsManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/485/SecurityTeamsManagerBl.java\nindex 359f2ec368c..ac5753a2ef7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/485/SecurityTeamsManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/485/SecurityTeamsManagerBl.java\n@@ -16,332 +16,331 @@ import java.util.List;\n  */\n public interface SecurityTeamsManagerBl {\n \n-\t/**\n-\t * Get list of SecurityTeams by access rights\n-\t *  - PERUNADMIN : all teams\n-\t *  - SECURITYADMIN : teams where user is admin\n-\t *\n-\t * @param sess\n-\t * @return list of security teams by access rights\n-\t * @throws InternalErrorException\n-\t */\n-\tList<SecurityTeam> getSecurityTeams(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * get all security teams in perun system\n-\t *\n-\t * @param sess\n-\t * @return list of all security teams\n-\t * @throws InternalErrorException\n-\t */\n-\tList<SecurityTeam> getAllSecurityTeams(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Create security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return Newly created Security team with new id\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamExistsException\n-\t */\n-\tSecurityTeam createSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n-\n-\t/**\n-\t * Update security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return updated security team\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t */\n-\tSecurityTeam updateSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamNotExistsException;\n-\n-\t/**\n-\t * Delete security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param forceDelete TRUE if Team should be forcefully deleted.\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t * @throws RelationExistsException if forceDelete == FALSE and team is assigned to any facility or has blacklisted users.\n-\t */\n-\tvoid deleteSecurityTeam(PerunSession sess, SecurityTeam securityTeam, boolean forceDelete) throws InternalErrorException, SecurityTeamNotExistsException, RelationExistsException;\n-\n-\t/**\n-\t * get security team by its id\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return security team with given id\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t */\n-\tSecurityTeam getSecurityTeamById(PerunSession sess, int id) throws InternalErrorException, SecurityTeamNotExistsException;\n-\n-\t/**\n-\t * get security team by its name\n-\t *\n-\t * @param sess\n-\t * @param name\n-\t * @return security team with given name\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t */\n-\tSecurityTeam getSecurityTeamByName(PerunSession sess, String name) throws InternalErrorException, SecurityTeamNotExistsException;\n-\n-\t/**\n-\t * get all security admins of given security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return list of users which are security admins in security team\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getAdmins(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n-\n-\t/**\n-\t * create security admin from given user and add him as security admin of given security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyAdminException\n-\t */\n-\tvoid addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Create group as security admins group of given security team (all users in group will have security admin rights)\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyAdminException\n-\t */\n-\tvoid addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Remove security admin role for given security team from user\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotAdminException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, UserNotAdminException;\n-\n-\t/**\n-\t * Remove security admin role for given security team from group\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotAdminException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, GroupNotAdminException;\n-\n-\t/**\n-\t * Blacklist user by given security team with description.\n-\t *\n-\t * Description can be null.\n-\t * \n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @param description\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid addUserToBlacklist(PerunSession sess, SecurityTeam securityTeam, User user, String description) throws InternalErrorException;\n-\n-\t/**\n-\t * remove user from blacklist of given security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeUserFromBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove user from all blacklists\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeUserFromAllBlacklists(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * get blacklist of security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return list of blacklisted users by security team\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getBlacklist(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n-\n-\t/**\n-\t * get union of blacklists of all security teams assigned to facility\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @return list of blacklisted users for facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getBlacklist(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * get blacklist of security team containing also description\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return List of pairs of blacklisted users by security team\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n-\n-\t/**\n-\t * get union of blacklists of all security teams assigned to facility containing also description\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @return List of pairs of blacklisted users for facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * check if security team exists\n-\t * throw exception if doesn't\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @throws SecurityTeamNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkSecurityTeamExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamNotExistsException, InternalErrorException;\n-\n-\t/**\n-\t * check if security team does <b>not</b> exist\n-\t * throw exception if do\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @throws SecurityTeamExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkSecurityTeamNotExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamExistsException, InternalErrorException;\n-\n-\t/**\n-\t * check if name is unique\n-\t * throw exception if it is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkSecurityTeamUniqueName(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n-\n-\t/**\n-\t * check if user is not security admin of given security team\n-\t * throw exception if it is\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws AlreadyAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if user is security admin of given security team\n-\t * throw exception if is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws UserNotAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if group is not security admin of given security team\n-\t * throw exception if it is\n-\t *\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws AlreadyAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkGroupIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if group is security admin of given security team\n-\t * throw exception if is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws GroupNotAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkGroupIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if user is not blacklisted by given security team\n-\t * throw exception if is\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws UserAlreadyBlacklistedException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsNotInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyBlacklistedException, InternalErrorException;\n-\n-\t/**\n-\t * check if user is blacklisted by given security team\n-\t * throw exception if is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws UserAlreadyRemovedException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyRemovedException, InternalErrorException;\n-\n-\t/**\n-\t * control if user is blacklisted by given security team\n-\t *\n-\t * @param sess\n-\t * @param st\n-\t * @param user\n-\t * @return true if given user is blacklisted\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserBlacklisted(PerunSession sess, SecurityTeam st, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if user is blacklisted by any security team\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return true if given user is blacklisted by any security team\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserBlacklisted(PerunSession sess, User user) throws InternalErrorException;\n+    /**\n+     * Get list of SecurityTeams by access rights\n+     * - PERUNADMIN : all teams\n+     * - SECURITYADMIN : teams where user is admin\n+     *\n+     * @param sess\n+     * @return list of security teams by access rights\n+     * @throws InternalErrorException\n+     */\n+    List<SecurityTeam> getSecurityTeams(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * get all security teams in perun system\n+     *\n+     * @param sess\n+     * @return list of all security teams\n+     * @throws InternalErrorException\n+     */\n+    List<SecurityTeam> getAllSecurityTeams(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Create security team\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @return Newly created Security team with new id\n+     * @throws InternalErrorException\n+     * @throws SecurityTeamExistsException\n+     */\n+    SecurityTeam createSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n+\n+    /**\n+     * Update security team\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @return updated security team\n+     * @throws InternalErrorException\n+     * @throws SecurityTeamNotExistsException\n+     */\n+    SecurityTeam updateSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamNotExistsException;\n+\n+    /**\n+     * Delete security team\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param forceDelete  TRUE if Team should be forcefully deleted.\n+     * @throws InternalErrorException\n+     * @throws SecurityTeamNotExistsException\n+     * @throws RelationExistsException        if forceDelete == FALSE and team is assigned to any facility or has blacklisted users.\n+     */\n+    void deleteSecurityTeam(PerunSession sess, SecurityTeam securityTeam, boolean forceDelete) throws InternalErrorException, SecurityTeamNotExistsException, RelationExistsException;\n+\n+    /**\n+     * get security team by its id\n+     *\n+     * @param sess\n+     * @param id\n+     * @return security team with given id\n+     * @throws InternalErrorException\n+     * @throws SecurityTeamNotExistsException\n+     */\n+    SecurityTeam getSecurityTeamById(PerunSession sess, int id) throws InternalErrorException, SecurityTeamNotExistsException;\n+\n+    /**\n+     * get security team by its name\n+     *\n+     * @param sess\n+     * @param name\n+     * @return security team with given name\n+     * @throws InternalErrorException\n+     * @throws SecurityTeamNotExistsException\n+     */\n+    SecurityTeam getSecurityTeamByName(PerunSession sess, String name) throws InternalErrorException, SecurityTeamNotExistsException;\n+\n+    /**\n+     * get all security admins of given security team\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @return list of users which are security admins in security team\n+     * @throws InternalErrorException\n+     */\n+    List<User> getAdmins(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n+\n+    /**\n+     * create security admin from given user and add him as security admin of given security team\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws AlreadyAdminException\n+     */\n+    void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, AlreadyAdminException;\n+\n+    /**\n+     * Create group as security admins group of given security team (all users in group will have security admin rights)\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param group\n+     * @throws InternalErrorException\n+     * @throws AlreadyAdminException\n+     */\n+    void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, AlreadyAdminException;\n+\n+    /**\n+     * Remove security admin role for given security team from user\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws UserNotAdminException\n+     */\n+    void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, UserNotAdminException;\n+\n+    /**\n+     * Remove security admin role for given security team from group\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param group\n+     * @throws InternalErrorException\n+     * @throws GroupNotAdminException\n+     */\n+    void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, GroupNotAdminException;\n+\n+    /**\n+     * Blacklist user by given security team with description.\n+     * <p>\n+     * Description can be null.\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @param description\n+     * @throws InternalErrorException\n+     */\n+    void addUserToBlacklist(PerunSession sess, SecurityTeam securityTeam, User user, String description) throws InternalErrorException;\n+\n+    /**\n+     * remove user from blacklist of given security team\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @throws InternalErrorException\n+     */\n+    void removeUserFromBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException;\n+\n+    /**\n+     * Remove user from all blacklists\n+     *\n+     * @param sess\n+     * @param user\n+     * @throws InternalErrorException\n+     */\n+    void removeUserFromAllBlacklists(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * get blacklist of security team\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @return list of blacklisted users by security team\n+     * @throws InternalErrorException\n+     */\n+    List<User> getBlacklist(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n+\n+    /**\n+     * get union of blacklists of all security teams assigned to facility\n+     *\n+     * @param sess\n+     * @param facility\n+     * @return list of blacklisted users for facility\n+     * @throws InternalErrorException\n+     */\n+    List<User> getBlacklist(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * get blacklist of security team containing also description\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @return List of pairs of blacklisted users by security team\n+     * @throws InternalErrorException\n+     */\n+    List<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n+\n+    /**\n+     * get union of blacklists of all security teams assigned to facility containing also description\n+     *\n+     * @param sess\n+     * @param facility\n+     * @return List of pairs of blacklisted users for facility\n+     * @throws InternalErrorException\n+     */\n+    List<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * check if security team exists\n+     * throw exception if doesn't\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @throws SecurityTeamNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    void checkSecurityTeamExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamNotExistsException, InternalErrorException;\n+\n+    /**\n+     * check if security team does <b>not</b> exist\n+     * throw exception if do\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @throws SecurityTeamExistsException\n+     * @throws InternalErrorException\n+     */\n+    void checkSecurityTeamNotExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamExistsException, InternalErrorException;\n+\n+    /**\n+     * check if name is unique\n+     * throw exception if it is not\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @throws InternalErrorException\n+     */\n+    void checkSecurityTeamUniqueName(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n+\n+    /**\n+     * check if user is not security admin of given security team\n+     * throw exception if it is\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @throws AlreadyAdminException\n+     * @throws InternalErrorException\n+     */\n+    void checkUserIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException;\n+\n+    /**\n+     * check if user is security admin of given security team\n+     * throw exception if is not\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @throws UserNotAdminException\n+     * @throws InternalErrorException\n+     */\n+    void checkUserIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException;\n+\n+    /**\n+     * check if group is not security admin of given security team\n+     * throw exception if it is\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param group\n+     * @throws AlreadyAdminException\n+     * @throws InternalErrorException\n+     */\n+    void checkGroupIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException;\n+\n+    /**\n+     * check if group is security admin of given security team\n+     * throw exception if is not\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param group\n+     * @throws GroupNotAdminException\n+     * @throws InternalErrorException\n+     */\n+    void checkGroupIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException;\n+\n+    /**\n+     * check if user is not blacklisted by given security team\n+     * throw exception if is\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @throws UserAlreadyBlacklistedException\n+     * @throws InternalErrorException\n+     */\n+    void checkUserIsNotInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyBlacklistedException, InternalErrorException;\n+\n+    /**\n+     * check if user is blacklisted by given security team\n+     * throw exception if is not\n+     *\n+     * @param sess\n+     * @param securityTeam\n+     * @param user\n+     * @throws UserAlreadyRemovedException\n+     * @throws InternalErrorException\n+     */\n+    void checkUserIsInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyRemovedException, InternalErrorException;\n+\n+    /**\n+     * control if user is blacklisted by given security team\n+     *\n+     * @param sess\n+     * @param st\n+     * @param user\n+     * @return true if given user is blacklisted\n+     * @throws InternalErrorException\n+     */\n+    boolean isUserBlacklisted(PerunSession sess, SecurityTeam st, User user) throws InternalErrorException;\n+\n+    /**\n+     * Check if user is blacklisted by any security team\n+     *\n+     * @param sess\n+     * @param user\n+     * @return true if given user is blacklisted by any security team\n+     * @throws InternalErrorException\n+     */\n+    boolean isUserBlacklisted(PerunSession sess, User user) throws InternalErrorException;\n \n }\n",
            "diff_size": 327
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/485/SecurityTeamsManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/485/SecurityTeamsManagerBl.java\nindex 359f2ec368c..4758bf7f866 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/485/SecurityTeamsManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/485/SecurityTeamsManagerBl.java\n@@ -1,6 +1,5 @@\n package cz.metacentrum.perun.core.bl;\n \n-\n import cz.metacentrum.perun.core.api.Facility;\n import cz.metacentrum.perun.core.api.Group;\n import cz.metacentrum.perun.core.api.Pair;\n@@ -8,340 +7,401 @@ import cz.metacentrum.perun.core.api.PerunSession;\n import cz.metacentrum.perun.core.api.SecurityTeam;\n import cz.metacentrum.perun.core.api.User;\n import cz.metacentrum.perun.core.api.exceptions.*;\n-\n import java.util.List;\n \n /**\n  * @author Ondrej Velisek <ondrejvelisek@gmail.com>\n  */\n+\n+\n public interface SecurityTeamsManagerBl {\n \n-\t/**\n-\t * Get list of SecurityTeams by access rights\n-\t *  - PERUNADMIN : all teams\n-\t *  - SECURITYADMIN : teams where user is admin\n-\t *\n-\t * @param sess\n-\t * @return list of security teams by access rights\n-\t * @throws InternalErrorException\n-\t */\n-\tList<SecurityTeam> getSecurityTeams(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * get all security teams in perun system\n-\t *\n-\t * @param sess\n-\t * @return list of all security teams\n-\t * @throws InternalErrorException\n-\t */\n-\tList<SecurityTeam> getAllSecurityTeams(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Create security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return Newly created Security team with new id\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamExistsException\n-\t */\n-\tSecurityTeam createSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n-\n-\t/**\n-\t * Update security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return updated security team\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t */\n-\tSecurityTeam updateSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamNotExistsException;\n-\n-\t/**\n-\t * Delete security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param forceDelete TRUE if Team should be forcefully deleted.\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t * @throws RelationExistsException if forceDelete == FALSE and team is assigned to any facility or has blacklisted users.\n-\t */\n-\tvoid deleteSecurityTeam(PerunSession sess, SecurityTeam securityTeam, boolean forceDelete) throws InternalErrorException, SecurityTeamNotExistsException, RelationExistsException;\n-\n-\t/**\n-\t * get security team by its id\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return security team with given id\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t */\n-\tSecurityTeam getSecurityTeamById(PerunSession sess, int id) throws InternalErrorException, SecurityTeamNotExistsException;\n-\n-\t/**\n-\t * get security team by its name\n-\t *\n-\t * @param sess\n-\t * @param name\n-\t * @return security team with given name\n-\t * @throws InternalErrorException\n-\t * @throws SecurityTeamNotExistsException\n-\t */\n-\tSecurityTeam getSecurityTeamByName(PerunSession sess, String name) throws InternalErrorException, SecurityTeamNotExistsException;\n-\n-\t/**\n-\t * get all security admins of given security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return list of users which are security admins in security team\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getAdmins(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n-\n-\t/**\n-\t * create security admin from given user and add him as security admin of given security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyAdminException\n-\t */\n-\tvoid addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Create group as security admins group of given security team (all users in group will have security admin rights)\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyAdminException\n-\t */\n-\tvoid addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Remove security admin role for given security team from user\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotAdminException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, UserNotAdminException;\n-\n-\t/**\n-\t * Remove security admin role for given security team from group\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotAdminException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, GroupNotAdminException;\n-\n-\t/**\n-\t * Blacklist user by given security team with description.\n-\t *\n-\t * Description can be null.\n-\t * \n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @param description\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid addUserToBlacklist(PerunSession sess, SecurityTeam securityTeam, User user, String description) throws InternalErrorException;\n-\n-\t/**\n-\t * remove user from blacklist of given security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeUserFromBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove user from all blacklists\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeUserFromAllBlacklists(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * get blacklist of security team\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return list of blacklisted users by security team\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getBlacklist(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n-\n-\t/**\n-\t * get union of blacklists of all security teams assigned to facility\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @return list of blacklisted users for facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getBlacklist(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * get blacklist of security team containing also description\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @return List of pairs of blacklisted users by security team\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n-\n-\t/**\n-\t * get union of blacklists of all security teams assigned to facility containing also description\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @return List of pairs of blacklisted users for facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * check if security team exists\n-\t * throw exception if doesn't\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @throws SecurityTeamNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkSecurityTeamExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamNotExistsException, InternalErrorException;\n-\n-\t/**\n-\t * check if security team does <b>not</b> exist\n-\t * throw exception if do\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @throws SecurityTeamExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkSecurityTeamNotExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamExistsException, InternalErrorException;\n-\n-\t/**\n-\t * check if name is unique\n-\t * throw exception if it is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkSecurityTeamUniqueName(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n-\n-\t/**\n-\t * check if user is not security admin of given security team\n-\t * throw exception if it is\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws AlreadyAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if user is security admin of given security team\n-\t * throw exception if is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws UserNotAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if group is not security admin of given security team\n-\t * throw exception if it is\n-\t *\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws AlreadyAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkGroupIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if group is security admin of given security team\n-\t * throw exception if is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param group\n-\t * @throws GroupNotAdminException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkGroupIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException;\n-\n-\t/**\n-\t * check if user is not blacklisted by given security team\n-\t * throw exception if is\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws UserAlreadyBlacklistedException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsNotInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyBlacklistedException, InternalErrorException;\n-\n-\t/**\n-\t * check if user is blacklisted by given security team\n-\t * throw exception if is not\n-\t *\n-\t * @param sess\n-\t * @param securityTeam\n-\t * @param user\n-\t * @throws UserAlreadyRemovedException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid checkUserIsInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyRemovedException, InternalErrorException;\n-\n-\t/**\n-\t * control if user is blacklisted by given security team\n-\t *\n-\t * @param sess\n-\t * @param st\n-\t * @param user\n-\t * @return true if given user is blacklisted\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserBlacklisted(PerunSession sess, SecurityTeam st, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if user is blacklisted by any security team\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return true if given user is blacklisted by any security team\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserBlacklisted(PerunSession sess, User user) throws InternalErrorException;\n-\n-}\n+ /**\n+  * Get list of SecurityTeams by access rights\n+  *  - PERUNADMIN : all teams\n+  *  - SECURITYADMIN : teams where user is admin\n+  *\n+  * @param sess\n+  * @return list of security teams by access rights\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<SecurityTeam> getSecurityTeams(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * get all security teams in perun system\n+  *\n+  * @param sess\n+  * @return list of all security teams\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<SecurityTeam> getAllSecurityTeams(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Create security team\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @return Newly created Security team with new id\n+  * @throws InternalErrorException\n+  * @throws SecurityTeamExistsException\n+  */\n+\n+\n+ SecurityTeam createSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n+\n+ /**\n+  * Update security team\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @return updated security team\n+  * @throws InternalErrorException\n+  * @throws SecurityTeamNotExistsException\n+  */\n+\n+\n+ SecurityTeam updateSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamNotExistsException;\n+\n+ /**\n+  * Delete security team\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param forceDelete TRUE if Team should be forcefully deleted.\n+  * @throws InternalErrorException\n+  * @throws SecurityTeamNotExistsException\n+  * @throws RelationExistsException if forceDelete == FALSE and team is assigned to any facility or has blacklisted users.\n+  */\n+\n+\n+ void deleteSecurityTeam(PerunSession sess, SecurityTeam securityTeam, boolean forceDelete) throws InternalErrorException, SecurityTeamNotExistsException, RelationExistsException;\n+\n+ /**\n+  * get security team by its id\n+  *\n+  * @param sess\n+  * @param id\n+  * @return security team with given id\n+  * @throws InternalErrorException\n+  * @throws SecurityTeamNotExistsException\n+  */\n+\n+\n+ SecurityTeam getSecurityTeamById(PerunSession sess, int id) throws InternalErrorException, SecurityTeamNotExistsException;\n+\n+ /**\n+  * get security team by its name\n+  *\n+  * @param sess\n+  * @param name\n+  * @return security team with given name\n+  * @throws InternalErrorException\n+  * @throws SecurityTeamNotExistsException\n+  */\n+\n+\n+ SecurityTeam getSecurityTeamByName(PerunSession sess, String name) throws InternalErrorException, SecurityTeamNotExistsException;\n+\n+ /**\n+  * get all security admins of given security team\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @return list of users which are security admins in security team\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getAdmins(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n+\n+ /**\n+  * create security admin from given user and add him as security admin of given security team\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws AlreadyAdminException\n+  */\n+\n+\n+ void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, AlreadyAdminException;\n+\n+ /**\n+  * Create group as security admins group of given security team (all users in group will have security admin rights)\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param group\n+  * @throws InternalErrorException\n+  * @throws AlreadyAdminException\n+  */\n+\n+\n+ void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, AlreadyAdminException;\n+\n+ /**\n+  * Remove security admin role for given security team from user\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws UserNotAdminException\n+  */\n+\n+\n+ void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, UserNotAdminException;\n+\n+ /**\n+  * Remove security admin role for given security team from group\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param group\n+  * @throws InternalErrorException\n+  * @throws GroupNotAdminException\n+  */\n+\n+\n+ void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, GroupNotAdminException;\n+\n+ /**\n+  * Blacklist user by given security team with description.\n+  *\n+  * Description can be null.\n+  * \n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @param description\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void addUserToBlacklist(PerunSession sess, SecurityTeam securityTeam, User user, String description) throws InternalErrorException;\n+\n+ /**\n+  * remove user from blacklist of given security team\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeUserFromBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException;\n+\n+ /**\n+  * Remove user from all blacklists\n+  *\n+  * @param sess\n+  * @param user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeUserFromAllBlacklists(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * get blacklist of security team\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @return list of blacklisted users by security team\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getBlacklist(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n+\n+ /**\n+  * get union of blacklists of all security teams assigned to facility\n+  *\n+  * @param sess\n+  * @param facility\n+  * @return list of blacklisted users for facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getBlacklist(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * get blacklist of security team containing also description\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @return List of pairs of blacklisted users by security team\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException;\n+\n+ /**\n+  * get union of blacklists of all security teams assigned to facility containing also description\n+  *\n+  * @param sess\n+  * @param facility\n+  * @return List of pairs of blacklisted users for facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Pair<User, String>> getBlacklistWithDescription(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * check if security team exists\n+  * throw exception if doesn't\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @throws SecurityTeamNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkSecurityTeamExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamNotExistsException, InternalErrorException;\n+\n+ /**\n+  * check if security team does <b>not</b> exist\n+  * throw exception if do\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @throws SecurityTeamExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkSecurityTeamNotExists(PerunSession sess, SecurityTeam securityTeam) throws SecurityTeamExistsException, InternalErrorException;\n+\n+ /**\n+  * check if name is unique\n+  * throw exception if it is not\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkSecurityTeamUniqueName(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException, SecurityTeamExistsException;\n+\n+ /**\n+  * check if user is not security admin of given security team\n+  * throw exception if it is\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @throws AlreadyAdminException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkUserIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException, InternalErrorException;\n+\n+ /**\n+  * check if user is security admin of given security team\n+  * throw exception if is not\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @throws UserNotAdminException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkUserIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException, InternalErrorException;\n+\n+ /**\n+  * check if group is not security admin of given security team\n+  * throw exception if it is\n+  *\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param group\n+  * @throws AlreadyAdminException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkGroupIsNotSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException, InternalErrorException;\n+\n+ /**\n+  * check if group is security admin of given security team\n+  * throw exception if is not\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param group\n+  * @throws GroupNotAdminException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkGroupIsSecurityAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException, InternalErrorException;\n+\n+ /**\n+  * check if user is not blacklisted by given security team\n+  * throw exception if is\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @throws UserAlreadyBlacklistedException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkUserIsNotInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyBlacklistedException, InternalErrorException;\n+\n+ /**\n+  * check if user is blacklisted by given security team\n+  * throw exception if is not\n+  *\n+  * @param sess\n+  * @param securityTeam\n+  * @param user\n+  * @throws UserAlreadyRemovedException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void checkUserIsInBlacklist(PerunSession sess, SecurityTeam securityTeam, User user) throws UserAlreadyRemovedException, InternalErrorException;\n+\n+ /**\n+  * control if user is blacklisted by given security team\n+  *\n+  * @param sess\n+  * @param st\n+  * @param user\n+  * @return true if given user is blacklisted\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isUserBlacklisted(PerunSession sess, SecurityTeam st, User user) throws InternalErrorException;\n+\n+ /**\n+  * Check if user is blacklisted by any security team\n+  *\n+  * @param sess\n+  * @param user\n+  * @return true if given user is blacklisted by any security team\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isUserBlacklisted(PerunSession sess, User user) throws InternalErrorException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 393
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}