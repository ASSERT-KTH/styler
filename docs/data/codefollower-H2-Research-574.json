{
    "project_name": "codefollower-H2-Research",
    "error_id": "574",
    "information": {
        "errors": [
            {
                "line": "80",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public int getMemory() {\n    \t//\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n        return value.length() * 2 + 48;\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/574/ValueString.java\nindex 32fdaaa3ad2..6aa503c7501 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/574/ValueString.java\n@@ -77,8 +77,8 @@ public class ValueString extends Value {\n \n     @Override\n     public int getMemory() {\n-    \t//\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n-        return value.length() * 2 + 48;\n+    //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52 return value.length() * 2 + 48;\n+ return value.length() * 2 + 48;\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/574/ValueString.java\nindex 32fdaaa3ad2..f405ca0a487 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/574/ValueString.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.value;\n \n import java.sql.PreparedStatement;\n@@ -18,85 +19,85 @@ import org.h2.util.StringUtils;\n  */\n public class ValueString extends Value {\n \n-    /**\n-     * Empty string. Should not be used in places where empty string can be\n-     * treated as {@code NULL} depending on database mode.\n-     */\n-    public static final ValueString EMPTY = new ValueString(\"\");\n-\n-    /**\n-     * The string data.\n-     */\n-    protected final String value;\n-\n-    protected ValueString(String value) {\n-        this.value = value;\n-    }\n-\n-    @Override\n-    public String getSQL() {\n-        return StringUtils.quoteStringSQL(value);\n-    }\n-\n-    @Override\n-    public boolean equals(Object other) {\n-        return other instanceof ValueString\n-                && value.equals(((ValueString) other).value);\n-    }\n-\n-    @Override\n-    public int compareTypeSafe(Value o, CompareMode mode) {\n-        return mode.compareString(value, ((ValueString) o).value, false);\n-    }\n-\n-    @Override\n-    public String getString() {\n-        return value;\n-    }\n-\n-    @Override\n-    public long getPrecision() {\n-        return value.length();\n-    }\n-\n-    @Override\n-    public Object getObject() {\n-        return value;\n-    }\n-\n-    @Override\n-    public void set(PreparedStatement prep, int parameterIndex)\n-            throws SQLException {\n-        prep.setString(parameterIndex, value);\n-    }\n-\n-    @Override\n-    public int getDisplaySize() {\n-        return value.length();\n-    }\n-\n-    @Override\n-    public int getMemory() {\n-    \t//\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n-        return value.length() * 2 + 48;\n-    }\n-\n-    @Override\n-    public Value convertPrecision(long precision, boolean force) {\n-        if (precision == 0 || value.length() <= precision) {\n-            return this;\n-        }\n-        int p = MathUtils.convertLongToInt(precision);\n-        return getNew(value.substring(0, p));\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        // TODO hash performance: could build a quicker hash\n-        // by hashing the size and a few characters\n-        return value.hashCode();\n-\n-        // proposed code:\n+  /**\n+   * Empty string. Should not be used in places where empty string can be\n+   * treated as {@code NULL} depending on database mode.\n+   */\n+  public static final ValueString EMPTY = new ValueString(\"\");\n+\n+  /**\n+   * The string data.\n+   */\n+  protected final String value;\n+\n+  protected ValueString(String value) {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  public String getSQL() {\n+    return StringUtils.quoteStringSQL(value);\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    return other instanceof ValueString\n+        && value.equals(((ValueString) other).value);\n+  }\n+\n+  @Override\n+  public int compareTypeSafe(Value o, CompareMode mode) {\n+    return mode.compareString(value, ((ValueString) o).value, false);\n+  }\n+\n+  @Override\n+  public String getString() {\n+    return value;\n+  }\n+\n+  @Override\n+  public long getPrecision() {\n+    return value.length();\n+  }\n+\n+  @Override\n+  public Object getObject() {\n+    return value;\n+  }\n+\n+  @Override\n+  public void set(PreparedStatement prep, int parameterIndex)\n+      throws SQLException {\n+    prep.setString(parameterIndex, value);\n+  }\n+\n+  @Override\n+  public int getDisplaySize() {\n+    return value.length();\n+  }\n+\n+  @Override\n+  public int getMemory() {\n+    //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n+    return value.length() * 2 + 48;\n+  }\n+\n+  @Override\n+  public Value convertPrecision(long precision, boolean force) {\n+    if (precision == 0 || value.length() <= precision) {\n+      return this;\n+    }\n+    int p = MathUtils.convertLongToInt(precision);\n+    return getNew(value.substring(0, p));\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    // TODO hash performance: could build a quicker hash\n+    // by hashing the size and a few characters\n+    return value.hashCode();\n+\n+    // proposed code:\n //        private int hash = 0;\n //\n //        public int hashCode() {\n@@ -120,54 +121,54 @@ public class ValueString extends Value {\n //            return h;\n //        }\n \n-    }\n-\n-    @Override\n-    public int getType() {\n-        return Value.STRING;\n-    }\n-\n-    /**\n-     * Get or create a string value for the given string.\n-     *\n-     * @param s the string\n-     * @return the value\n-     */\n-    public static Value get(String s) {\n-        return get(s, false);\n-    }\n-\n-    /**\n-     * Get or create a string value for the given string.\n-     *\n-     * @param s the string\n-     * @param treatEmptyStringsAsNull whether or not to treat empty strings as\n-     *            NULL\n-     * @return the value\n-     */\n-    public static Value get(String s, boolean treatEmptyStringsAsNull) {\n-        if (s.isEmpty()) {\n-            return treatEmptyStringsAsNull ? ValueNull.INSTANCE : EMPTY;\n-        }\n-        ValueString obj = new ValueString(StringUtils.cache(s));\n-        //\u5b57\u7b26\u4e32\u957f\u5ea6\u592a\u5927\u65f6\u5c31\u4e0d\u7f13\u5b58\u4e86\n-        if (s.length() > SysProperties.OBJECT_CACHE_MAX_PER_ELEMENT_SIZE) {\n-            return obj;\n-        }\n-        return Value.cache(obj);\n-        // this saves memory, but is really slow\n-        // return new ValueString(s.intern());\n-    }\n-\n-    /**\n-     * Create a new String value of the current class.\n-     * This method is meant to be overridden by subclasses.\n-     *\n-     * @param s the string\n-     * @return the value\n-     */\n-    protected Value getNew(String s) {\n-        return ValueString.get(s);\n-    }\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return Value.STRING;\n+  }\n+\n+  /**\n+   * Get or create a string value for the given string.\n+   *\n+   * @param s the string\n+   * @return the value\n+   */\n+  public static Value get(String s) {\n+    return get(s, false);\n+  }\n+\n+  /**\n+   * Get or create a string value for the given string.\n+   *\n+   * @param s                       the string\n+   * @param treatEmptyStringsAsNull whether or not to treat empty strings as\n+   *                                NULL\n+   * @return the value\n+   */\n+  public static Value get(String s, boolean treatEmptyStringsAsNull) {\n+    if (s.isEmpty()) {\n+      return treatEmptyStringsAsNull ? ValueNull.INSTANCE : EMPTY;\n+    }\n+    ValueString obj = new ValueString(StringUtils.cache(s));\n+    //\u5b57\u7b26\u4e32\u957f\u5ea6\u592a\u5927\u65f6\u5c31\u4e0d\u7f13\u5b58\u4e86\n+    if (s.length() > SysProperties.OBJECT_CACHE_MAX_PER_ELEMENT_SIZE) {\n+      return obj;\n+    }\n+    return Value.cache(obj);\n+    // this saves memory, but is really slow\n+    // return new ValueString(s.intern());\n+  }\n+\n+  /**\n+   * Create a new String value of the current class.\n+   * This method is meant to be overridden by subclasses.\n+   *\n+   * @param s the string\n+   * @return the value\n+   */\n+  protected Value getNew(String s) {\n+    return ValueString.get(s);\n+  }\n \n }\n",
            "diff_size": 129
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/574/ValueString.java\nindex 32fdaaa3ad2..f306177d197 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/574/ValueString.java\n@@ -7,7 +7,6 @@ package org.h2.value;\n \n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n-\n import org.h2.engine.SysProperties;\n import org.h2.util.MathUtils;\n import org.h2.util.StringUtils;\n@@ -16,17 +15,23 @@ import org.h2.util.StringUtils;\n  * Implementation of the VARCHAR data type.\n  * It is also the base class for other ValueString* classes.\n  */\n+\n+\n public class ValueString extends Value {\n \n     /**\n      * Empty string. Should not be used in places where empty string can be\n      * treated as {@code NULL} depending on database mode.\n      */\n+\n+\n     public static final ValueString EMPTY = new ValueString(\"\");\n \n     /**\n      * The string data.\n      */\n+\n+\n     protected final String value;\n \n     protected ValueString(String value) {\n@@ -40,8 +45,7 @@ public class ValueString extends Value {\n \n     @Override\n     public boolean equals(Object other) {\n-        return other instanceof ValueString\n-                && value.equals(((ValueString) other).value);\n+        return other instanceof ValueString && value.equals(((ValueString) other).value);\n     }\n \n     @Override\n@@ -65,8 +69,7 @@ public class ValueString extends Value {\n     }\n \n     @Override\n-    public void set(PreparedStatement prep, int parameterIndex)\n-            throws SQLException {\n+    public void set(PreparedStatement prep, int parameterIndex) throws SQLException {\n         prep.setString(parameterIndex, value);\n     }\n \n@@ -77,7 +80,7 @@ public class ValueString extends Value {\n \n     @Override\n     public int getMemory() {\n-    \t//\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n+        //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n         return value.length() * 2 + 48;\n     }\n \n@@ -119,7 +122,6 @@ public class ValueString extends Value {\n //            }\n //            return h;\n //        }\n-\n     }\n \n     @Override\n@@ -133,6 +135,8 @@ public class ValueString extends Value {\n      * @param s the string\n      * @return the value\n      */\n+\n+\n     public static Value get(String s) {\n         return get(s, false);\n     }\n@@ -145,6 +149,8 @@ public class ValueString extends Value {\n      *            NULL\n      * @return the value\n      */\n+\n+\n     public static Value get(String s, boolean treatEmptyStringsAsNull) {\n         if (s.isEmpty()) {\n             return treatEmptyStringsAsNull ? ValueNull.INSTANCE : EMPTY;\n@@ -166,8 +172,10 @@ public class ValueString extends Value {\n      * @param s the string\n      * @return the value\n      */\n+\n+\n     protected Value getNew(String s) {\n         return ValueString.get(s);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/574/ValueString.java\nindex 32fdaaa3ad2..6aa503c7501 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/574/ValueString.java\n@@ -77,8 +77,8 @@ public class ValueString extends Value {\n \n     @Override\n     public int getMemory() {\n-    \t//\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n-        return value.length() * 2 + 48;\n+    //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52 return value.length() * 2 + 48;\n+ return value.length() * 2 + 48;\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/574/ValueString.java\nindex 32fdaaa3ad2..cb7ebcffa8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/574/ValueString.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/574/ValueString.java\n@@ -77,8 +77,8 @@ public class ValueString extends Value {\n \n     @Override\n     public int getMemory() {\n-    \t//\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n-        return value.length() * 2 + 48;\n+        //\u4e00\u4e2a\u5b57\u7b26\u5360\u4e24\u4e2a\u5b57\u8282\u6240\u4ee5\u8981\u4e58\u4ee52\n+    return value.length() * 2 + 48;\n     }\n \n     @Override\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}