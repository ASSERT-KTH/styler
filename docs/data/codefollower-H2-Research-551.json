{
    "project_name": "codefollower-H2-Research",
    "error_id": "551",
    "information": {
        "errors": [
            {
                "line": "270",
                "column": "11",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        if (columns == null) {\n//<<<<<<< HEAD\n//        \t//\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n//        \t//\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n//        \t//UPDATE PUBLIC.MERGETEST SET  WHERE ID=?\n//            if (list.size() > 0 && list.get(0).length == 0) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "270",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "271",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/551/Merge.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/551/Merge.java\nindex 2135dfc2f0b..d05e33cdde4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/551/Merge.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/551/Merge.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.dml;\n \n import java.util.ArrayList;\n@@ -37,235 +38,235 @@ import org.h2.value.Value;\n //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n public class Merge extends Prepared {\n \n-    private Table targetTable;\n-    private TableFilter targetTableFilter;\n-    private Column[] columns;\n-    private Column[] keys;\n-    private final ArrayList<Expression[]> valuesExpressionList = Utils.newSmallArrayList();\n-    private Query query;\n-    private Prepared update;\n+  private Table targetTable;\n+  private TableFilter targetTableFilter;\n+  private Column[] columns;\n+  private Column[] keys;\n+  private final ArrayList<Expression[]> valuesExpressionList = Utils.newSmallArrayList();\n+  private Query query;\n+  private Prepared update;\n \n-    public Merge(Session session) {\n-        super(session);\n-    }\n+  public Merge(Session session) {\n+    super(session);\n+  }\n \n-    @Override\n-    public void setCommand(Command command) {\n-        super.setCommand(command);\n-        if (query != null) {\n-            query.setCommand(command);\n-        }\n+  @Override\n+  public void setCommand(Command command) {\n+    super.setCommand(command);\n+    if (query != null) {\n+      query.setCommand(command);\n     }\n+  }\n \n-    public void setTargetTable(Table targetTable) {\n-        this.targetTable = targetTable;\n-    }\n+  public void setTargetTable(Table targetTable) {\n+    this.targetTable = targetTable;\n+  }\n \n-    public void setColumns(Column[] columns) {\n-        this.columns = columns;\n-    }\n+  public void setColumns(Column[] columns) {\n+    this.columns = columns;\n+  }\n \n-    public void setKeys(Column[] keys) {\n-        this.keys = keys;\n-    }\n+  public void setKeys(Column[] keys) {\n+    this.keys = keys;\n+  }\n \n-    public void setQuery(Query query) {\n-        this.query = query;\n-    }\n+  public void setQuery(Query query) {\n+    this.query = query;\n+  }\n \n-    /**\n-     * Add a row to this merge statement.\n-     *\n-     * @param expr the list of values\n-     */\n-    public void addRow(Expression[] expr) {\n-        valuesExpressionList.add(expr);\n-    }\n+  /**\n+   * Add a row to this merge statement.\n+   *\n+   * @param expr the list of values\n+   */\n+  public void addRow(Expression[] expr) {\n+    valuesExpressionList.add(expr);\n+  }\n \n-    @Override\n-    public int update() {\n-        int count;\n-        session.getUser().checkRight(targetTable, Right.INSERT);\n-        session.getUser().checkRight(targetTable, Right.UPDATE);\n-        setCurrentRowNumber(0);\n-        GeneratedKeys generatedKeys = session.getGeneratedKeys();\n-        Mode mode = session.getDatabase().getMode();\n-        if (!valuesExpressionList.isEmpty()) {\n-            // process values in list\n-            count = 0;\n-            generatedKeys.initialize(targetTable);\n-            for (int x = 0, size = valuesExpressionList.size(); x < size; x++) {\n-                setCurrentRowNumber(x + 1);\n-                generatedKeys.nextRow();\n-                Expression[] expr = valuesExpressionList.get(x);\n-                Row newRow = targetTable.getTemplateRow();\n-                for (int i = 0, len = columns.length; i < len; i++) {\n-                    Column c = columns[i];\n-                    int index = c.getColumnId();\n-                    Expression e = expr[i];\n-                    if (e != null) {\n-                        // e can be null (DEFAULT)\n-                        try {\n-                            Value v = c.convert(e.getValue(session), mode);\n-                            newRow.setValue(index, v);\n-                            if (e.isGeneratedKey()) {\n-                                generatedKeys.add(c);\n-                            }\n-                        } catch (DbException ex) {\n-                            throw setRow(ex, count, getSQL(expr));\n-                        }\n-                    }\n-                }\n-                merge(newRow);\n-                count++;\n-            }\n-        } else {\n-            // process select data for list\n-            query.setNeverLazy(true);\n-            ResultInterface rows = query.query(0);\n-            count = 0;\n-            targetTable.fire(session, Trigger.UPDATE | Trigger.INSERT, true);\n-            targetTable.lock(session, true, false);\n-            while (rows.next()) {\n-                count++;\n-                generatedKeys.nextRow();\n-                Value[] r = rows.currentRow();\n-                Row newRow = targetTable.getTemplateRow();\n-                setCurrentRowNumber(count);\n-                for (int j = 0; j < columns.length; j++) {\n-                    Column c = columns[j];\n-                    int index = c.getColumnId();\n-                    try {\n-                        Value v = c.convert(r[j], mode);\n-                        newRow.setValue(index, v);\n-                    } catch (DbException ex) {\n-                        throw setRow(ex, count, getSQL(r));\n-                    }\n-                }\n-                merge(newRow);\n+  @Override\n+  public int update() {\n+    int count;\n+    session.getUser().checkRight(targetTable, Right.INSERT);\n+    session.getUser().checkRight(targetTable, Right.UPDATE);\n+    setCurrentRowNumber(0);\n+    GeneratedKeys generatedKeys = session.getGeneratedKeys();\n+    Mode mode = session.getDatabase().getMode();\n+    if (!valuesExpressionList.isEmpty()) {\n+      // process values in list\n+      count = 0;\n+      generatedKeys.initialize(targetTable);\n+      for (int x = 0, size = valuesExpressionList.size(); x < size; x++) {\n+        setCurrentRowNumber(x + 1);\n+        generatedKeys.nextRow();\n+        Expression[] expr = valuesExpressionList.get(x);\n+        Row newRow = targetTable.getTemplateRow();\n+        for (int i = 0, len = columns.length; i < len; i++) {\n+          Column c = columns[i];\n+          int index = c.getColumnId();\n+          Expression e = expr[i];\n+          if (e != null) {\n+            // e can be null (DEFAULT)\n+            try {\n+              Value v = c.convert(e.getValue(session), mode);\n+              newRow.setValue(index, v);\n+              if (e.isGeneratedKey()) {\n+                generatedKeys.add(c);\n+              }\n+            } catch (DbException ex) {\n+              throw setRow(ex, count, getSQL(expr));\n             }\n-            rows.close();\n-            targetTable.fire(session, Trigger.UPDATE | Trigger.INSERT, false);\n+          }\n+        }\n+        merge(newRow);\n+        count++;\n+      }\n+    } else {\n+      // process select data for list\n+      query.setNeverLazy(true);\n+      ResultInterface rows = query.query(0);\n+      count = 0;\n+      targetTable.fire(session, Trigger.UPDATE | Trigger.INSERT, true);\n+      targetTable.lock(session, true, false);\n+      while (rows.next()) {\n+        count++;\n+        generatedKeys.nextRow();\n+        Value[] r = rows.currentRow();\n+        Row newRow = targetTable.getTemplateRow();\n+        setCurrentRowNumber(count);\n+        for (int j = 0; j < columns.length; j++) {\n+          Column c = columns[j];\n+          int index = c.getColumnId();\n+          try {\n+            Value v = c.convert(r[j], mode);\n+            newRow.setValue(index, v);\n+          } catch (DbException ex) {\n+            throw setRow(ex, count, getSQL(r));\n+          }\n         }\n-        return count;\n+        merge(newRow);\n+      }\n+      rows.close();\n+      targetTable.fire(session, Trigger.UPDATE | Trigger.INSERT, false);\n     }\n+    return count;\n+  }\n \n-    /**\n-     * Merge the given row.\n-     *\n-     * @param row the row\n-     */\n-    protected void merge(Row row) {\n-        ArrayList<Parameter> k = update.getParameters();\n-        for (int i = 0; i < columns.length; i++) {\n-            Column col = columns[i];\n-            Value v = row.getValue(col.getColumnId());\n-            Parameter p = k.get(i);\n-            p.setValue(v);\n-        }\n-        for (int i = 0; i < keys.length; i++) {\n-            Column col = keys[i];\n-            Value v = row.getValue(col.getColumnId());\n-            if (v == null) {\n-                throw DbException.get(ErrorCode.COLUMN_CONTAINS_NULL_VALUES_1, col.getSQL());\n-            }\n-            Parameter p = k.get(columns.length + i);\n-            p.setValue(v);\n-        }\n+  /**\n+   * Merge the given row.\n+   *\n+   * @param row the row\n+   */\n+  protected void merge(Row row) {\n+    ArrayList<Parameter> k = update.getParameters();\n+    for (int i = 0; i < columns.length; i++) {\n+      Column col = columns[i];\n+      Value v = row.getValue(col.getColumnId());\n+      Parameter p = k.get(i);\n+      p.setValue(v);\n+    }\n+    for (int i = 0; i < keys.length; i++) {\n+      Column col = keys[i];\n+      Value v = row.getValue(col.getColumnId());\n+      if (v == null) {\n+        throw DbException.get(ErrorCode.COLUMN_CONTAINS_NULL_VALUES_1, col.getSQL());\n+      }\n+      Parameter p = k.get(columns.length + i);\n+      p.setValue(v);\n+    }\n //<<<<<<< HEAD\n //        //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n //=======\n \n-        // try an update\n-        int count = update.update();\n+    // try an update\n+    int count = update.update();\n \n-        // if update fails try an insert\n-        if (count == 0) {\n-            try {\n-                targetTable.validateConvertUpdateSequence(session, row);\n-                boolean done = targetTable.fireBeforeRow(session, null, row);\n-                if (!done) {\n-                    targetTable.lock(session, true, false);\n-                    targetTable.addRow(session, row);\n-                    session.getGeneratedKeys().confirmRow(row);\n-                    session.log(targetTable, UndoLogRecord.INSERT, row);\n-                    targetTable.fireAfterRow(session, null, row, false);\n-                }\n-            } catch (DbException e) {\n-                if (e.getErrorCode() == ErrorCode.DUPLICATE_KEY_1) {\n-                    // possibly a concurrent merge or insert\n-                    Index index = (Index) e.getSource();\n-                    if (index != null) {\n-                        // verify the index columns match the key\n-                        Column[] indexColumns = index.getColumns();\n-                        boolean indexMatchesKeys = true;\n-                        if (indexColumns.length <= keys.length) {\n-                            for (int i = 0; i < indexColumns.length; i++) {\n-                                if (indexColumns[i] != keys[i]) {\n-                                    indexMatchesKeys = false;\n-                                    break;\n-                                }\n-                            }\n-                        }\n-                        if (indexMatchesKeys) {\n-                            throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1, targetTable.getName());\n-                        }\n-                    }\n+    // if update fails try an insert\n+    if (count == 0) {\n+      try {\n+        targetTable.validateConvertUpdateSequence(session, row);\n+        boolean done = targetTable.fireBeforeRow(session, null, row);\n+        if (!done) {\n+          targetTable.lock(session, true, false);\n+          targetTable.addRow(session, row);\n+          session.getGeneratedKeys().confirmRow(row);\n+          session.log(targetTable, UndoLogRecord.INSERT, row);\n+          targetTable.fireAfterRow(session, null, row, false);\n+        }\n+      } catch (DbException e) {\n+        if (e.getErrorCode() == ErrorCode.DUPLICATE_KEY_1) {\n+          // possibly a concurrent merge or insert\n+          Index index = (Index) e.getSource();\n+          if (index != null) {\n+            // verify the index columns match the key\n+            Column[] indexColumns = index.getColumns();\n+            boolean indexMatchesKeys = true;\n+            if (indexColumns.length <= keys.length) {\n+              for (int i = 0; i < indexColumns.length; i++) {\n+                if (indexColumns[i] != keys[i]) {\n+                  indexMatchesKeys = false;\n+                  break;\n                 }\n-                throw e;\n+              }\n+            }\n+            if (indexMatchesKeys) {\n+              throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1, targetTable.getName());\n             }\n-        } else if (count != 1) {\n-            throw DbException.get(ErrorCode.DUPLICATE_KEY_1, targetTable.getSQL());\n+          }\n         }\n+        throw e;\n+      }\n+    } else if (count != 1) {\n+      throw DbException.get(ErrorCode.DUPLICATE_KEY_1, targetTable.getSQL());\n     }\n+  }\n \n-    @Override\n-    public String getPlanSQL() {\n-        StatementBuilder buff = new StatementBuilder(\"MERGE INTO \");\n-        buff.append(targetTable.getSQL()).append('(');\n-        for (Column c : columns) {\n-            buff.appendExceptFirst(\", \");\n-            buff.append(c.getSQL());\n-        }\n-        buff.append(')');\n-        if (keys != null) {\n-            buff.append(\" KEY(\");\n-            buff.resetCount();\n-            for (Column c : keys) {\n-                buff.appendExceptFirst(\", \");\n-                buff.append(c.getSQL());\n-            }\n-            buff.append(')');\n+  @Override\n+  public String getPlanSQL() {\n+    StatementBuilder buff = new StatementBuilder(\"MERGE INTO \");\n+    buff.append(targetTable.getSQL()).append('(');\n+    for (Column c : columns) {\n+      buff.appendExceptFirst(\", \");\n+      buff.append(c.getSQL());\n+    }\n+    buff.append(')');\n+    if (keys != null) {\n+      buff.append(\" KEY(\");\n+      buff.resetCount();\n+      for (Column c : keys) {\n+        buff.appendExceptFirst(\", \");\n+        buff.append(c.getSQL());\n+      }\n+      buff.append(')');\n+    }\n+    buff.append('\\n');\n+    if (!valuesExpressionList.isEmpty()) {\n+      buff.append(\"VALUES \");\n+      int row = 0;\n+      for (Expression[] expr : valuesExpressionList) {\n+        if (row++ > 0) {\n+          buff.append(\", \");\n         }\n-        buff.append('\\n');\n-        if (!valuesExpressionList.isEmpty()) {\n-            buff.append(\"VALUES \");\n-            int row = 0;\n-            for (Expression[] expr : valuesExpressionList) {\n-                if (row++ > 0) {\n-                    buff.append(\", \");\n-                }\n-                buff.append('(');\n-                buff.resetCount();\n-                for (Expression e : expr) {\n-                    buff.appendExceptFirst(\", \");\n-                    if (e == null) {\n-                        buff.append(\"DEFAULT\");\n-                    } else {\n-                        buff.append(e.getSQL());\n-                    }\n-                }\n-                buff.append(')');\n-            }\n-        } else {\n-            buff.append(query.getPlanSQL());\n+        buff.append('(');\n+        buff.resetCount();\n+        for (Expression e : expr) {\n+          buff.appendExceptFirst(\", \");\n+          if (e == null) {\n+            buff.append(\"DEFAULT\");\n+          } else {\n+            buff.append(e.getSQL());\n+          }\n         }\n-        return buff.toString();\n+        buff.append(')');\n+      }\n+    } else {\n+      buff.append(query.getPlanSQL());\n     }\n+    return buff.toString();\n+  }\n \n-    @Override\n-    public void prepare() {\n-        if (columns == null) {\n+  @Override\n+  public void prepare() {\n+    if (columns == null) {\n //<<<<<<< HEAD\n //        \t//\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n //        \t//\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n@@ -276,94 +277,93 @@ public class Merge extends Prepared {\n //            } else {\n //                columns = table.getColumns(); //\u5982: MERGE INTO MergeTest(SELECT * FROM tmpSelectTest)\n //=======\n-            if (!valuesExpressionList.isEmpty() && valuesExpressionList.get(0).length == 0) {\n-                // special case where table is used as a sequence\n-                columns = new Column[0];\n-            } else {\n-                columns = targetTable.getColumns();\n-            }\n+      if (!valuesExpressionList.isEmpty() && valuesExpressionList.get(0).length == 0) {\n+        // special case where table is used as a sequence\n+        columns = new Column[0];\n+      } else {\n+        columns = targetTable.getColumns();\n+      }\n+    }\n+    if (!valuesExpressionList.isEmpty()) {\n+      for (Expression[] expr : valuesExpressionList) {\n+        if (expr.length != columns.length) {\n+          throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n         }\n-        if (!valuesExpressionList.isEmpty()) {\n-            for (Expression[] expr : valuesExpressionList) {\n-                if (expr.length != columns.length) {\n-                    throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-                }\n-                for (int i = 0; i < expr.length; i++) {\n-                    Expression e = expr[i];\n-                    if (e != null) {\n-                        expr[i] = e.optimize(session);\n-                    }\n-                }\n-            }\n-        } else {\n-            query.prepare();\n-            if (query.getColumnCount() != columns.length) {\n-                throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-            }\n+        for (int i = 0; i < expr.length; i++) {\n+          Expression e = expr[i];\n+          if (e != null) {\n+            expr[i] = e.optimize(session);\n+          }\n         }\n+      }\n+    } else {\n+      query.prepare();\n+      if (query.getColumnCount() != columns.length) {\n+        throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n+      }\n+    }\n //<<<<<<< HEAD\n //        if (keys == null) { //\u5982\u679c\u6ca1\u6709\u6307\u5b9akey\uff0c\u8868\u91cc\u5fc5\u987b\u6709\u4e3b\u952e\u5b57\u6bb5\n //            Index idx = table.getPrimaryKey();\n //            if (idx == null) { //org.h2.table.Table.getPrimaryKey()\u91cc\u5df2\u5904\u7406null\u7684\u60c5\u51b5\u4e86\uff0c\u9664\u975e\u6709\u5b57\u7c7b\u8986\u76d6\u5b83\n //=======\n-        if (keys == null) {\n-            Index idx = targetTable.getPrimaryKey();\n-            if (idx == null) {\n-                throw DbException.get(ErrorCode.CONSTRAINT_NOT_FOUND_1, \"PRIMARY KEY\");\n-            }\n-            keys = idx.getColumns();\n-        }\n-        //\u4f8b\u5982: UPDATE PUBLIC.MERGETEST SET ID=?, NAME=? WHERE ID=?\n-        //columns\u5c31\u662f\u8981\u66f4\u65b0\u7684\u5b57\u6bb5\uff0ckeys\u5f53\u6210where\u6761\u4ef6\u4e14\u7528and\u62fc\u88c5\n-        StatementBuilder buff = new StatementBuilder(\"UPDATE \");\n-        buff.append(targetTable.getSQL()).append(\" SET \");\n-        for (Column c : columns) {\n-            buff.appendExceptFirst(\", \");\n-            buff.append(c.getSQL()).append(\"=?\");\n-        }\n-        buff.append(\" WHERE \");\n-        buff.resetCount();\n-        for (Column c : keys) {\n-            buff.appendExceptFirst(\" AND \");\n-            buff.append(c.getSQL()).append(\"=?\");\n-        }\n-        String sql = buff.toString();\n-        update = session.prepare(sql);\n+    if (keys == null) {\n+      Index idx = targetTable.getPrimaryKey();\n+      if (idx == null) {\n+        throw DbException.get(ErrorCode.CONSTRAINT_NOT_FOUND_1, \"PRIMARY KEY\");\n+      }\n+      keys = idx.getColumns();\n     }\n-\n-    @Override\n-    public boolean isTransactional() {\n-        return true;\n+    //\u4f8b\u5982: UPDATE PUBLIC.MERGETEST SET ID=?, NAME=? WHERE ID=?\n+    //columns\u5c31\u662f\u8981\u66f4\u65b0\u7684\u5b57\u6bb5\uff0ckeys\u5f53\u6210where\u6761\u4ef6\u4e14\u7528and\u62fc\u88c5\n+    StatementBuilder buff = new StatementBuilder(\"UPDATE \");\n+    buff.append(targetTable.getSQL()).append(\" SET \");\n+    for (Column c : columns) {\n+      buff.appendExceptFirst(\", \");\n+      buff.append(c.getSQL()).append(\"=?\");\n     }\n-\n-    @Override\n-    public ResultInterface queryMeta() {\n-        return null;\n+    buff.append(\" WHERE \");\n+    buff.resetCount();\n+    for (Column c : keys) {\n+      buff.appendExceptFirst(\" AND \");\n+      buff.append(c.getSQL()).append(\"=?\");\n     }\n+    String sql = buff.toString();\n+    update = session.prepare(sql);\n+  }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.MERGE;\n-    }\n+  @Override\n+  public boolean isTransactional() {\n+    return true;\n+  }\n \n-    @Override\n-    public boolean isCacheable() {\n-        return true;\n-    }\n+  @Override\n+  public ResultInterface queryMeta() {\n+    return null;\n+  }\n \n-    public Table getTargetTable() {\n-        return targetTable;\n-    }\n+  @Override\n+  public int getType() {\n+    return CommandInterface.MERGE;\n+  }\n \n-    public TableFilter getTargetTableFilter() {\n-        return targetTableFilter;\n-    }\n+  @Override\n+  public boolean isCacheable() {\n+    return true;\n+  }\n \n-    public void setTargetTableFilter(TableFilter targetTableFilter) {\n-        this.targetTableFilter = targetTableFilter;\n-        setTargetTable(targetTableFilter.getTable());\n-    }\n+  public Table getTargetTable() {\n+    return targetTable;\n+  }\n+\n+  public TableFilter getTargetTableFilter() {\n+    return targetTableFilter;\n+  }\n \n+  public void setTargetTableFilter(TableFilter targetTableFilter) {\n+    this.targetTableFilter = targetTableFilter;\n+    setTargetTable(targetTableFilter.getTable());\n+  }\n \n \n }\n",
            "diff_size": 355
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "267",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/551/Merge.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/551/Merge.java\nindex 2135dfc2f0b..e6e6ffacb00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/551/Merge.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/551/Merge.java\n@@ -172,11 +172,8 @@ public class Merge extends Prepared {\n             Parameter p = k.get(columns.length + i);\n             p.setValue(v);\n         }\n-//<<<<<<< HEAD\n-//        //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n-//=======\n-\n-        // try an update\n+//<<<\n+// try an update\n         int count = update.update();\n \n         // if update fails try an insert\n@@ -364,6 +361,4 @@ public class Merge extends Prepared {\n         setTargetTable(targetTableFilter.getTable());\n     }\n \n-\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/551/Merge.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/551/Merge.java\nindex 2135dfc2f0b..7a7407301ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/551/Merge.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/551/Merge.java\n@@ -6,7 +6,6 @@\n package org.h2.command.dml;\n \n import java.util.ArrayList;\n-\n import org.h2.api.ErrorCode;\n import org.h2.api.Trigger;\n import org.h2.command.Command;\n@@ -35,6 +34,8 @@ import org.h2.value.Value;\n  * MERGE\n  */\n //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n+\n+\n public class Merge extends Prepared {\n \n     private Table targetTable;\n@@ -57,18 +58,22 @@ public class Merge extends Prepared {\n         }\n     }\n \n+\n     public void setTargetTable(Table targetTable) {\n         this.targetTable = targetTable;\n     }\n \n+\n     public void setColumns(Column[] columns) {\n         this.columns = columns;\n     }\n \n+\n     public void setKeys(Column[] keys) {\n         this.keys = keys;\n     }\n \n+\n     public void setQuery(Query query) {\n         this.query = query;\n     }\n@@ -78,6 +83,8 @@ public class Merge extends Prepared {\n      *\n      * @param expr the list of values\n      */\n+\n+\n     public void addRow(Expression[] expr) {\n         valuesExpressionList.add(expr);\n     }\n@@ -155,6 +162,8 @@ public class Merge extends Prepared {\n      *\n      * @param row the row\n      */\n+\n+\n     protected void merge(Row row) {\n         ArrayList<Parameter> k = update.getParameters();\n         for (int i = 0; i < columns.length; i++) {\n@@ -267,9 +276,9 @@ public class Merge extends Prepared {\n     public void prepare() {\n         if (columns == null) {\n //<<<<<<< HEAD\n-//        \t//\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n-//        \t//\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n-//        \t//UPDATE PUBLIC.MERGETEST SET  WHERE ID=?\n+//          //\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n+//          //\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n+//          //UPDATE PUBLIC.MERGETEST SET  WHERE ID=?\n //            if (list.size() > 0 && list.get(0).length == 0) {\n //                // special case where table is used as a sequence\n //                columns = new Column[0];\n@@ -351,19 +360,20 @@ public class Merge extends Prepared {\n         return true;\n     }\n \n+\n     public Table getTargetTable() {\n         return targetTable;\n     }\n \n+\n     public TableFilter getTargetTableFilter() {\n         return targetTableFilter;\n     }\n \n+\n     public void setTargetTableFilter(TableFilter targetTableFilter) {\n         this.targetTableFilter = targetTableFilter;\n         setTargetTable(targetTableFilter.getTable());\n     }\n \n-\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "270",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "270",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}