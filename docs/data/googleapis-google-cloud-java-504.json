{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "504",
    "information": {
        "errors": [
            {
                "line": "326",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 104).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assertEquals(TABLE_ID, request.getTable());\n    assertEquals(ROWS, request.getRows());\n    request = InsertAllRequest.of(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS.get(0), ROWS.get(1));\n    assertEquals(TABLE_ID, request.getTable());\n    assertEquals(ROWS, request.getRows());\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/504/InsertAllRequestTest.java\nindex a25622399aa..c4e9ed01afe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/504/InsertAllRequestTest.java\n@@ -323,7 +323,8 @@ public class InsertAllRequestTest {\n     request = InsertAllRequest.of(TABLE_INFO, ROWS.get(0), ROWS.get(1));\n     assertEquals(TABLE_ID, request.getTable());\n     assertEquals(ROWS, request.getRows());\n-    request = InsertAllRequest.of(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS.get(0), ROWS.get(1));\n+    request = InsertAllRequest.of(TABLE_ID.getDataset(), TABLE_ID.getTable(),ROWS\n+    .get(0), ROWS.get(1));\n     assertEquals(TABLE_ID, request.getTable());\n     assertEquals(ROWS, request.getRows());\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/504/InsertAllRequestTest.java\nindex a25622399aa..f498e84aa78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/504/InsertAllRequestTest.java\n@@ -323,7 +323,8 @@ public class InsertAllRequestTest {\n     request = InsertAllRequest.of(TABLE_INFO, ROWS.get(0), ROWS.get(1));\n     assertEquals(TABLE_ID, request.getTable());\n     assertEquals(ROWS, request.getRows());\n-    request = InsertAllRequest.of(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS.get(0), ROWS.get(1));\n+    request =\n+        InsertAllRequest.of(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS.get(0), ROWS.get(1));\n     assertEquals(TABLE_ID, request.getTable());\n     assertEquals(ROWS, request.getRows());\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'ImmutableList' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "'InsertAllRequest' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "326",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/504/InsertAllRequestTest.java\nindex a25622399aa..b671b50e496 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/504/InsertAllRequestTest.java\n@@ -38,10 +38,10 @@ public class InsertAllRequestTest {\n   private static final List<InsertAllRequest.RowToInsert> ROWS =\n       ImmutableList.of(InsertAllRequest.RowToInsert.of(CONTENT1),\n           InsertAllRequest.RowToInsert.of(CONTENT2));\n-  private static final List<InsertAllRequest.RowToInsert> ROWS_WITH_ID =\n+    private static final List<InsertAllRequest.RowToInsert> ROWS_WITH_ID =\n       ImmutableList.of(InsertAllRequest.RowToInsert.of(\"id1\", CONTENT1),\n           InsertAllRequest.RowToInsert.of(\"id2\", CONTENT2));\n-  private static final TableId TABLE_ID = TableId.of(\"dataset\", \"table\");\n+    private static final TableId TABLE_ID = TableId.of(\"dataset\", \"table\");\n   private static final Schema TABLE_SCHEMA = Schema.of();\n   private static final TableDefinition TABLE_DEFINITION = StandardTableDefinition.of(TABLE_SCHEMA);\n   private static final TableInfo TABLE_INFO = TableInfo.of(TABLE_ID, TABLE_DEFINITION);\n@@ -65,49 +65,49 @@ public class InsertAllRequestTest {\n           .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .setSkipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST4 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST4 =\n       InsertAllRequest.newBuilder(TABLE_ID, ROWS)\n           .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .setSkipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST5 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST5 =\n       InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID)\n           .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .setSkipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST6 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST6 =\n       InsertAllRequest.newBuilder(TABLE_ID, ROWS.get(0), ROWS.get(1))\n           .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .setSkipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST7 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST7 =\n       InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID.get(0),\n           ROWS_WITH_ID.get(1))\n           .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .setSkipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST8 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST8 =\n       InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable())\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n           .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .setSkipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST9 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST9 =\n       InsertAllRequest.newBuilder(TABLE_INFO)\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n           .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .setSkipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST10 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST10 =\n       InsertAllRequest.newBuilder(TABLE_INFO)\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n           .setIgnoreUnknownValues(true)\n           .setSkipInvalidRows(false)\n           .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST11 =\n+    private static final InsertAllRequest INSERT_ALL_REQUEST11 =\n       InsertAllRequest.newBuilder(TABLE_INFO)\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n@@ -115,68 +115,68 @@ public class InsertAllRequestTest {\n           .setSkipInvalidRows(false)\n           .setTemplateSuffix(TEMPLATE_SUFFIX)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST1 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST1 =\n       InsertAllRequest.builder(TABLE_ID)\n           .addRow(CONTENT1)\n           .addRow(CONTENT2)\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST2 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST2 =\n       InsertAllRequest.builder(TABLE_ID)\n           .rows(ROWS)\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST3 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST3 =\n       InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable())\n           .rows(ROWS_WITH_ID)\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST4 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST4 =\n       InsertAllRequest.builder(TABLE_ID, ROWS)\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST5 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST5 =\n       InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID)\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST6 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST6 =\n       InsertAllRequest.builder(TABLE_ID, ROWS.get(0), ROWS.get(1))\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST7 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST7 =\n       InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID.get(0),\n           ROWS_WITH_ID.get(1))\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST8 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST8 =\n       InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable())\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST9 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST9 =\n       InsertAllRequest.builder(TABLE_INFO)\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n           .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n           .skipInvalidRows(SKIP_INVALID_ROWS)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST10 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST10 =\n       InsertAllRequest.builder(TABLE_INFO)\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n           .ignoreUnknownValues(true)\n           .skipInvalidRows(false)\n           .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST11 =\n+    private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST11 =\n       InsertAllRequest.builder(TABLE_INFO)\n           .addRow(\"id1\", CONTENT1)\n           .addRow(\"id2\", CONTENT2)\n@@ -185,7 +185,7 @@ public class InsertAllRequestTest {\n           .templateSuffix(TEMPLATE_SUFFIX)\n           .build();\n \n-  @Test\n+@Test\n   public void testBuilder() {\n     assertEquals(TABLE_ID, INSERT_ALL_REQUEST1.getTable());\n     assertEquals(TABLE_ID, INSERT_ALL_REQUEST2.getTable());\n@@ -351,4 +351,4 @@ public class InsertAllRequestTest {\n     assertEquals(expected.skipInvalidRows(), value.skipInvalidRows());\n     assertEquals(expected.getTemplateSuffix(), value.getTemplateSuffix());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 268).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 274).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 249).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 220).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 270).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 276).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 244).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/504/InsertAllRequestTest.java\nindex a25622399aa..7c0a3ff1922 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/504/InsertAllRequestTest.java\n@@ -23,24 +23,17 @@ import static org.junit.Assert.assertTrue;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n-\n import org.junit.Test;\n-\n import java.util.List;\n import java.util.Map;\n \n+\n public class InsertAllRequestTest {\n \n-  private static final Map<String, Object> CONTENT1 =\n-      ImmutableMap.<String, Object>of(\"key\", \"val1\");\n-  private static final Map<String, Object> CONTENT2 =\n-      ImmutableMap.<String, Object>of(\"key\", \"val2\");\n-  private static final List<InsertAllRequest.RowToInsert> ROWS =\n-      ImmutableList.of(InsertAllRequest.RowToInsert.of(CONTENT1),\n-          InsertAllRequest.RowToInsert.of(CONTENT2));\n-  private static final List<InsertAllRequest.RowToInsert> ROWS_WITH_ID =\n-      ImmutableList.of(InsertAllRequest.RowToInsert.of(\"id1\", CONTENT1),\n-          InsertAllRequest.RowToInsert.of(\"id2\", CONTENT2));\n+  private static final Map<String, Object> CONTENT1 = ImmutableMap.<String, Object>of(\"key\", \"val1\");\n+  private static final Map<String, Object> CONTENT2 = ImmutableMap.<String, Object>of(\"key\", \"val2\");\n+  private static final List<InsertAllRequest.RowToInsert> ROWS = ImmutableList.of(InsertAllRequest.RowToInsert.of(CONTENT1), InsertAllRequest.RowToInsert.of(CONTENT2));\n+  private static final List<InsertAllRequest.RowToInsert> ROWS_WITH_ID = ImmutableList.of(InsertAllRequest.RowToInsert.of(\"id1\", CONTENT1), InsertAllRequest.RowToInsert.of(\"id2\", CONTENT2));\n   private static final TableId TABLE_ID = TableId.of(\"dataset\", \"table\");\n   private static final Schema TABLE_SCHEMA = Schema.of();\n   private static final TableDefinition TABLE_DEFINITION = StandardTableDefinition.of(TABLE_SCHEMA);\n@@ -48,142 +41,28 @@ public class InsertAllRequestTest {\n   private static final boolean SKIP_INVALID_ROWS = true;\n   private static final boolean IGNORE_UNKNOWN_VALUES = false;\n   private static final String TEMPLATE_SUFFIX = \"templateSuffix\";\n-  private static final InsertAllRequest INSERT_ALL_REQUEST1 = InsertAllRequest.newBuilder(TABLE_ID)\n-      .addRow(CONTENT1)\n-      .addRow(CONTENT2)\n-      .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-      .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-      .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST2 = InsertAllRequest.newBuilder(TABLE_ID)\n-      .setRows(ROWS)\n-      .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-      .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-      .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST3 =\n-      InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable())\n-          .setRows(ROWS_WITH_ID)\n-          .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST4 =\n-      InsertAllRequest.newBuilder(TABLE_ID, ROWS)\n-          .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST5 =\n-      InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID)\n-          .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST6 =\n-      InsertAllRequest.newBuilder(TABLE_ID, ROWS.get(0), ROWS.get(1))\n-          .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST7 =\n-      InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID.get(0),\n-          ROWS_WITH_ID.get(1))\n-          .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST8 =\n-      InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable())\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST9 =\n-      InsertAllRequest.newBuilder(TABLE_INFO)\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .setSkipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST10 =\n-      InsertAllRequest.newBuilder(TABLE_INFO)\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .setIgnoreUnknownValues(true)\n-          .setSkipInvalidRows(false)\n-          .build();\n-  private static final InsertAllRequest INSERT_ALL_REQUEST11 =\n-      InsertAllRequest.newBuilder(TABLE_INFO)\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .setIgnoreUnknownValues(true)\n-          .setSkipInvalidRows(false)\n-          .setTemplateSuffix(TEMPLATE_SUFFIX)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST1 =\n-      InsertAllRequest.builder(TABLE_ID)\n-          .addRow(CONTENT1)\n-          .addRow(CONTENT2)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST2 =\n-      InsertAllRequest.builder(TABLE_ID)\n-          .rows(ROWS)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST3 =\n-      InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable())\n-          .rows(ROWS_WITH_ID)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST4 =\n-      InsertAllRequest.builder(TABLE_ID, ROWS)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST5 =\n-      InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST6 =\n-      InsertAllRequest.builder(TABLE_ID, ROWS.get(0), ROWS.get(1))\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST7 =\n-      InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID.get(0),\n-          ROWS_WITH_ID.get(1))\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST8 =\n-      InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable())\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST9 =\n-      InsertAllRequest.builder(TABLE_INFO)\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .ignoreUnknownValues(IGNORE_UNKNOWN_VALUES)\n-          .skipInvalidRows(SKIP_INVALID_ROWS)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST10 =\n-      InsertAllRequest.builder(TABLE_INFO)\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .ignoreUnknownValues(true)\n-          .skipInvalidRows(false)\n-          .build();\n-  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST11 =\n-      InsertAllRequest.builder(TABLE_INFO)\n-          .addRow(\"id1\", CONTENT1)\n-          .addRow(\"id2\", CONTENT2)\n-          .ignoreUnknownValues(true)\n-          .skipInvalidRows(false)\n-          .templateSuffix(TEMPLATE_SUFFIX)\n-          .build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST1 = InsertAllRequest.newBuilder(TABLE_ID).addRow(CONTENT1).addRow(CONTENT2).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST2 = InsertAllRequest.newBuilder(TABLE_ID).setRows(ROWS).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST3 = InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable()).setRows(ROWS_WITH_ID).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST4 = InsertAllRequest.newBuilder(TABLE_ID, ROWS).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST5 = InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST6 = InsertAllRequest.newBuilder(TABLE_ID, ROWS.get(0), ROWS.get(1)).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST7 = InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID.get(0), ROWS_WITH_ID.get(1)).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST8 = InsertAllRequest.newBuilder(TABLE_ID.getDataset(), TABLE_ID.getTable()).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST9 = InsertAllRequest.newBuilder(TABLE_INFO).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).setIgnoreUnknownValues(IGNORE_UNKNOWN_VALUES).setSkipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST10 = InsertAllRequest.newBuilder(TABLE_INFO).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).setIgnoreUnknownValues(true).setSkipInvalidRows(false).build();\n+  private static final InsertAllRequest INSERT_ALL_REQUEST11 = InsertAllRequest.newBuilder(TABLE_INFO).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).setIgnoreUnknownValues(true).setSkipInvalidRows(false).setTemplateSuffix(TEMPLATE_SUFFIX).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST1 = InsertAllRequest.builder(TABLE_ID).addRow(CONTENT1).addRow(CONTENT2).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST2 = InsertAllRequest.builder(TABLE_ID).rows(ROWS).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST3 = InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable()).rows(ROWS_WITH_ID).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST4 = InsertAllRequest.builder(TABLE_ID, ROWS).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST5 = InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST6 = InsertAllRequest.builder(TABLE_ID, ROWS.get(0), ROWS.get(1)).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST7 = InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS_WITH_ID.get(0), ROWS_WITH_ID.get(1)).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST8 = InsertAllRequest.builder(TABLE_ID.getDataset(), TABLE_ID.getTable()).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST9 = InsertAllRequest.builder(TABLE_INFO).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).ignoreUnknownValues(IGNORE_UNKNOWN_VALUES).skipInvalidRows(SKIP_INVALID_ROWS).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST10 = InsertAllRequest.builder(TABLE_INFO).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).ignoreUnknownValues(true).skipInvalidRows(false).build();\n+  private static final InsertAllRequest DEPRECATED_INSERT_ALL_REQUEST11 = InsertAllRequest.builder(TABLE_INFO).addRow(\"id1\", CONTENT1).addRow(\"id2\", CONTENT2).ignoreUnknownValues(true).skipInvalidRows(false).templateSuffix(TEMPLATE_SUFFIX).build();\n \n   @Test\n   public void testBuilder() {\n@@ -351,4 +230,4 @@ public class InsertAllRequestTest {\n     assertEquals(expected.skipInvalidRows(), value.skipInvalidRows());\n     assertEquals(expected.getTemplateSuffix(), value.getTemplateSuffix());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 150
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "326",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/504/InsertAllRequestTest.java\nindex a25622399aa..c4e9ed01afe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/504/InsertAllRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/504/InsertAllRequestTest.java\n@@ -323,7 +323,8 @@ public class InsertAllRequestTest {\n     request = InsertAllRequest.of(TABLE_INFO, ROWS.get(0), ROWS.get(1));\n     assertEquals(TABLE_ID, request.getTable());\n     assertEquals(ROWS, request.getRows());\n-    request = InsertAllRequest.of(TABLE_ID.getDataset(), TABLE_ID.getTable(), ROWS.get(0), ROWS.get(1));\n+    request = InsertAllRequest.of(TABLE_ID.getDataset(), TABLE_ID.getTable(),ROWS\n+    .get(0), ROWS.get(1));\n     assertEquals(TABLE_ID, request.getTable());\n     assertEquals(ROWS, request.getRows());\n   }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}