{
    "project_name": "wso2-attic-commons",
    "error_id": "231",
    "information": {
        "errors": [
            {
                "line": "158",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                                \" and csp\" + i + \".value = :cspvalue\" + i);\n\n                        parameters.put(\"cspname\" + i, propKey.substring(propKey.lastIndexOf(\"}\") + 1, propKey.length()));\n                        parameters.put(\"cspnamespace\" + i, namespace);\n                        parameters.put(\"cspvalue\" + i, value);\n                    } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/231/CriteriaBuilder.java\nindex 1661bd07778..a02108472d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/231/CriteriaBuilder.java\n@@ -155,7 +155,7 @@ class CriteriaBuilder {\n                                 \" and csp\" + i + \".namespace = :cspnamespace\" + i +\n                                 \" and csp\" + i + \".value = :cspvalue\" + i);\n \n-                        parameters.put(\"cspname\" + i, propKey.substring(propKey.lastIndexOf(\"}\") + 1, propKey.length()));\n+                    parameters.put(\"cspname\" + i, propKey.substring(propKey.lastIndexOf(\"}\") + 1, propKey.length()));\n                         parameters.put(\"cspnamespace\" + i, namespace);\n                         parameters.put(\"cspvalue\" + i, value);\n                     } else {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/231/CriteriaBuilder.java\nindex 1661bd07778..6dd8305e31c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/231/CriteriaBuilder.java\n@@ -46,211 +46,222 @@ import org.hibernate.criterion.Restrictions;\n  * {@link org.hibernate.Criteria} objects.\n  */\n class CriteriaBuilder {\n-    static final Log __log = LogFactory.getLog(CriteriaBuilder.class);\n-\n-    /**\n-     * Build a HQL query from an instance filter.\n-     * @param filter filter\n-     */\n-    Query buildHQLQuery(Session session, InstanceFilter filter) {\n-        Map<String, Object> parameters = new HashMap<String, Object>();\n-\n-        StringBuffer query = new StringBuffer();\n-\n-        query.append(\"select pi from HProcessInstance as pi left join fetch pi.fault \");\n-\n-        if (filter != null) {\n-            // Building each clause\n-            ArrayList<String> clauses = new ArrayList<String>();\n-\n-            // iid filter\n-            if ( filter.getIidFilter() != null ) {\n-                StringBuffer filters = new StringBuffer();\n-                List<String> iids = filter.getIidFilter();\n-                for (int m = 0; m < iids.size(); m++) {\n-                    filters.append(\" pi.id = :iid\").append(m);\n-                    parameters.put(\"iid\" + m, Long.parseLong(iids.get(m)));\n-                    if (m < iids.size() - 1) filters.append(\" or\");\n-                }\n-                clauses.add(\" (\" + filters + \")\");\n-            }\n-\n-            // pid filter\n-            if (filter.getPidFilter() != null) {\n-                StringBuffer filters = new StringBuffer();\n-                List<String> pids = filter.getPidFilter();\n-                String cmp;\n-                if (filter.arePidsNegative()) {\n-                    cmp = \" != \";\n-                } else {\n-                    cmp = \" = \";\n-                }\n-                for (int m = 0; m < pids.size(); m++) {\n-                    filters.append(\" pi.process.processId \").append(cmp).append(\" :pid\").append(m);\n-                    parameters.put(\"pid\" + m, pids.get(m));\n-                    if (m < pids.size() - 1) filters.append(\" or\");\n-                }\n-                clauses.add(\" (\" + filters + \")\");\n-            }\n-\n-            // name filter\n-            if (filter.getNameFilter() != null) {\n-                clauses.add(\" pi.process.typeName like :pname\");\n-                parameters.put(\"pname\", filter.getNameFilter().replaceAll(\"\\\\*\", \"%\"));\n-            }\n-\n-            // name space filter\n-            if (filter.getNamespaceFilter() != null) {\n-                clauses.add(\" pi.process.typeNamespace like :pnamespace\");\n-                parameters.put(\"pnamespace\", filter.getNamespaceFilter().replaceAll(\"\\\\*\", \"%\"));\n-            }\n-\n-            // started filter\n-            if (filter.getStartedDateFilter() != null) {\n-                for ( String ds : filter.getStartedDateFilter() ) {\n-                    // named parameters not needed as date is parsed and is hence not\n-                    // prone to HQL injections\n-                    clauses.add(\" pi.created \" + dateFilter(ds));\n-                }\n-            }\n-\n-            // last-active filter\n-            if (filter.getLastActiveDateFilter() != null) {\n-                for ( String ds : filter.getLastActiveDateFilter() ) {\n-                    // named parameters not needed as date is parsed and is hence not\n-                    // prone to HQL injections\n-                    clauses.add(\" pi.lastActiveTime \" + dateFilter(ds));\n-                }\n-            }\n-\n-            // status filter\n-            if (filter.getStatusFilter() != null) {\n-                StringBuffer filters = new StringBuffer();\n-                List<Short> states = filter.convertFilterState();\n-                for (int m = 0; m < states.size(); m++) {\n-                    filters.append(\" pi.state = :pstate\").append(m);\n-                    parameters.put(\"pstate\" + m, states.get(m));\n-                    if (m < states.size() - 1) filters.append(\" or\");\n-                }\n-                clauses.add(\" (\" + filters.toString() + \")\");\n-            }\n-\n-            // $property filter\n-            if (filter.getPropertyValuesFilter() != null) {\n-                Map<String,String> props = filter.getPropertyValuesFilter();\n-                // join to correlation sets\n-                query.append(\" inner join pi.correlationSets as cs\");\n-                int i = 0;\n-                for (String propKey : props.keySet()) {\n-                    i++;\n-                    // join to props for each prop\n-                    query.append(\" inner join cs.properties as csp\"+i);\n-                    // add clause for prop key and value\n-\n-                    // spaces have to be escaped, might be better handled in InstanceFilter\n-                    String value = props.get(propKey).replaceAll(\"&#32;\", \" \");\n-                    if (propKey.startsWith(\"{\")) {\n-                        String namespace = propKey.substring(1, propKey.lastIndexOf(\"}\"));\n-                        clauses.add(\" csp\" + i + \".name = :cspname\" + i +\n-                                \" and csp\" + i + \".namespace = :cspnamespace\" + i +\n-                                \" and csp\" + i + \".value = :cspvalue\" + i);\n-\n-                        parameters.put(\"cspname\" + i, propKey.substring(propKey.lastIndexOf(\"}\") + 1, propKey.length()));\n-                        parameters.put(\"cspnamespace\" + i, namespace);\n-                        parameters.put(\"cspvalue\" + i, value);\n-                    } else {\n-                        clauses.add(\" csp\" + i + \".name = :cspname\" + i +\n-                                \" and csp\" + i + \".value = :cspvalue\" + i);\n-\n-                        parameters.put(\"cspname\" + i, propKey);\n-                        parameters.put(\"cspvalue\" + i, value);\n-                    }\n-                }\n-            }\n-\n-            // order by\n-            StringBuffer orderby = new StringBuffer(\"\");\n-            if (filter.getOrders() != null) {\n-                orderby.append(\" order by\");\n-                List<String> orders = filter.getOrders();\n-                for (int m = 0; m < orders.size(); m++) {\n-                    String field = orders.get(m);\n-                    String ord = \" asc\";\n-                    if (field.startsWith(\"-\")) {\n-                        ord = \" desc\";\n-                    }\n-                    String fieldName = \" pi.id\";\n-                    if (field.endsWith(\"name\")) {\n-                        fieldName = \" pi.process.typeName\";\n-                    }\n-                    if (field.endsWith(\"namespace\")) {\n-                        fieldName = \" pi.process.typeNamespace\";\n-                    }\n-                    if ( field.endsWith(\"version\")) {\n-                        fieldName = \" pi.process.version\";\n-                    }\n-                    if ( field.endsWith(\"status\")) {\n-                        fieldName = \" pi.state\";\n-                    }\n-                    if ( field.endsWith(\"started\")) {\n-                        fieldName = \" pi.created\";\n-                    }\n-                    if ( field.endsWith(\"last-active\")) {\n-                        fieldName = \" pi.lastActiveTime\";\n-                    }\n-                    orderby.append(fieldName + ord);\n-                    if (m < orders.size() - 1) orderby.append(\", \");\n-                }\n-\n-            }\n-\n-            // Preparing the statement\n-            if (clauses.size() > 0) {\n-                query.append(\" where\");\n-                for (int m = 0; m < clauses.size(); m++) {\n-                    query.append(clauses.get(m));\n-                    if (m < clauses.size() - 1) query.append(\" and\");\n-                }\n-            }\n-\n-            query.append(orderby);\n+  static final Log __log = LogFactory.getLog(CriteriaBuilder.class);\n+\n+  /**\n+   * Build a HQL query from an instance filter.\n+   *\n+   * @param filter filter\n+   */\n+  Query buildHQLQuery(Session session, InstanceFilter filter) {\n+    Map<String, Object> parameters = new HashMap<String, Object>();\n+\n+    StringBuffer query = new StringBuffer();\n+\n+    query.append(\"select pi from HProcessInstance as pi left join fetch pi.fault \");\n+\n+    if (filter != null) {\n+      // Building each clause\n+      ArrayList<String> clauses = new ArrayList<String>();\n+\n+      // iid filter\n+      if (filter.getIidFilter() != null) {\n+        StringBuffer filters = new StringBuffer();\n+        List<String> iids = filter.getIidFilter();\n+        for (int m = 0; m < iids.size(); m++) {\n+          filters.append(\" pi.id = :iid\").append(m);\n+          parameters.put(\"iid\" + m, Long.parseLong(iids.get(m)));\n+          if (m < iids.size() - 1) {\n+            filters.append(\" or\");\n+          }\n         }\n+        clauses.add(\" (\" + filters + \")\");\n+      }\n \n-        if (__log.isDebugEnabled()) {\n-            __log.debug(query.toString());\n+      // pid filter\n+      if (filter.getPidFilter() != null) {\n+        StringBuffer filters = new StringBuffer();\n+        List<String> pids = filter.getPidFilter();\n+        String cmp;\n+        if (filter.arePidsNegative()) {\n+          cmp = \" != \";\n+        } else {\n+          cmp = \" = \";\n+        }\n+        for (int m = 0; m < pids.size(); m++) {\n+          filters.append(\" pi.process.processId \").append(cmp).append(\" :pid\").append(m);\n+          parameters.put(\"pid\" + m, pids.get(m));\n+          if (m < pids.size() - 1) {\n+            filters.append(\" or\");\n+          }\n         }\n+        clauses.add(\" (\" + filters + \")\");\n+      }\n+\n+      // name filter\n+      if (filter.getNameFilter() != null) {\n+        clauses.add(\" pi.process.typeName like :pname\");\n+        parameters.put(\"pname\", filter.getNameFilter().replaceAll(\"\\\\*\", \"%\"));\n+      }\n \n-        Query q = session.createQuery(query.toString());\n+      // name space filter\n+      if (filter.getNamespaceFilter() != null) {\n+        clauses.add(\" pi.process.typeNamespace like :pnamespace\");\n+        parameters.put(\"pnamespace\", filter.getNamespaceFilter().replaceAll(\"\\\\*\", \"%\"));\n+      }\n \n-        for (String p : parameters.keySet()) {\n-            q.setParameter(p, parameters.get(p));\n+      // started filter\n+      if (filter.getStartedDateFilter() != null) {\n+        for (String ds : filter.getStartedDateFilter()) {\n+          // named parameters not needed as date is parsed and is hence not\n+          // prone to HQL injections\n+          clauses.add(\" pi.created \" + dateFilter(ds));\n         }\n+      }\n \n-        if (filter.getLimit() != 0) {\n-            q.setMaxResults(filter.getLimit());\n+      // last-active filter\n+      if (filter.getLastActiveDateFilter() != null) {\n+        for (String ds : filter.getLastActiveDateFilter()) {\n+          // named parameters not needed as date is parsed and is hence not\n+          // prone to HQL injections\n+          clauses.add(\" pi.lastActiveTime \" + dateFilter(ds));\n         }\n+      }\n \n-        return q;\n-    }\n+      // status filter\n+      if (filter.getStatusFilter() != null) {\n+        StringBuffer filters = new StringBuffer();\n+        List<Short> states = filter.convertFilterState();\n+        for (int m = 0; m < states.size(); m++) {\n+          filters.append(\" pi.state = :pstate\").append(m);\n+          parameters.put(\"pstate\" + m, states.get(m));\n+          if (m < states.size() - 1) {\n+            filters.append(\" or\");\n+          }\n+        }\n+        clauses.add(\" (\" + filters.toString() + \")\");\n+      }\n+\n+      // $property filter\n+      if (filter.getPropertyValuesFilter() != null) {\n+        Map<String, String> props = filter.getPropertyValuesFilter();\n+        // join to correlation sets\n+        query.append(\" inner join pi.correlationSets as cs\");\n+        int i = 0;\n+        for (String propKey : props.keySet()) {\n+          i++;\n+          // join to props for each prop\n+          query.append(\" inner join cs.properties as csp\" + i);\n+          // add clause for prop key and value\n+\n+          // spaces have to be escaped, might be better handled in InstanceFilter\n+          String value = props.get(propKey).replaceAll(\"&#32;\", \" \");\n+          if (propKey.startsWith(\"{\")) {\n+            String namespace = propKey.substring(1, propKey.lastIndexOf(\"}\"));\n+            clauses.add(\" csp\" + i + \".name = :cspname\" + i +\n+              \" and csp\" + i + \".namespace = :cspnamespace\" + i +\n+              \" and csp\" + i + \".value = :cspvalue\" + i);\n+\n+            parameters.put(\"cspname\" + i, propKey.substring(propKey.lastIndexOf(\"}\") + 1, propKey.length()));\n+            parameters.put(\"cspnamespace\" + i, namespace);\n+            parameters.put(\"cspvalue\" + i, value);\n+          } else {\n+            clauses.add(\" csp\" + i + \".name = :cspname\" + i +\n+              \" and csp\" + i + \".value = :cspvalue\" + i);\n+\n+            parameters.put(\"cspname\" + i, propKey);\n+            parameters.put(\"cspvalue\" + i, value);\n+          }\n+        }\n+      }\n \n-    private static String dateFilter(String filter) {\n-        String date = Filter.getDateWithoutOp(filter);\n-        String op = filter.substring(0,filter.indexOf(date));\n-        Date dt = null;\n-        try {\n-            dt = ISO8601DateParser.parse(date);\n-        } catch (ParseException e) {\n-            e.printStackTrace();\n+      // order by\n+      StringBuffer orderby = new StringBuffer(\"\");\n+      if (filter.getOrders() != null) {\n+        orderby.append(\" order by\");\n+        List<String> orders = filter.getOrders();\n+        for (int m = 0; m < orders.size(); m++) {\n+          String field = orders.get(m);\n+          String ord = \" asc\";\n+          if (field.startsWith(\"-\")) {\n+            ord = \" desc\";\n+          }\n+          String fieldName = \" pi.id\";\n+          if (field.endsWith(\"name\")) {\n+            fieldName = \" pi.process.typeName\";\n+          }\n+          if (field.endsWith(\"namespace\")) {\n+            fieldName = \" pi.process.typeNamespace\";\n+          }\n+          if (field.endsWith(\"version\")) {\n+            fieldName = \" pi.process.version\";\n+          }\n+          if (field.endsWith(\"status\")) {\n+            fieldName = \" pi.state\";\n+          }\n+          if (field.endsWith(\"started\")) {\n+            fieldName = \" pi.created\";\n+          }\n+          if (field.endsWith(\"last-active\")) {\n+            fieldName = \" pi.lastActiveTime\";\n+          }\n+          orderby.append(fieldName + ord);\n+          if (m < orders.size() - 1) {\n+            orderby.append(\", \");\n+          }\n         }\n-        Timestamp ts = new Timestamp(dt.getTime());\n-        return op + \" '\" + ts.toString() + \"'\";\n+\n+      }\n+\n+      // Preparing the statement\n+      if (clauses.size() > 0) {\n+        query.append(\" where\");\n+        for (int m = 0; m < clauses.size(); m++) {\n+          query.append(clauses.get(m));\n+          if (m < clauses.size() - 1) {\n+            query.append(\" and\");\n+          }\n+        }\n+      }\n+\n+      query.append(orderby);\n     }\n \n+    if (__log.isDebugEnabled()) {\n+      __log.debug(query.toString());\n+    }\n+\n+    Query q = session.createQuery(query.toString());\n+\n+    for (String p : parameters.keySet()) {\n+      q.setParameter(p, parameters.get(p));\n+    }\n+\n+    if (filter.getLimit() != 0) {\n+      q.setMaxResults(filter.getLimit());\n+    }\n+\n+    return q;\n+  }\n+\n+  private static String dateFilter(String filter) {\n+    String date = Filter.getDateWithoutOp(filter);\n+    String op = filter.substring(0, filter.indexOf(date));\n+    Date dt = null;\n+    try {\n+      dt = ISO8601DateParser.parse(date);\n+    } catch (ParseException e) {\n+      e.printStackTrace();\n+    }\n+    Timestamp ts = new Timestamp(dt.getTime());\n+    return op + \" '\" + ts.toString() + \"'\";\n+  }\n \n \n   /**\n    * Build a Hibernate {@link Criteria} from an instance filter.\n-   * @param crit target (destination) criteria\n+   *\n+   * @param crit   target (destination) criteria\n    * @param filter filter\n    */\n   void buildCriteria(Criteria crit, InstanceFilter filter) {\n@@ -259,24 +270,24 @@ class CriteriaBuilder {\n     // Filtering on PID\n     List<String> pids = filter.getPidFilter();\n     if (pids != null && pids.size() > 0) {\n-        Disjunction disj = Restrictions.disjunction();\n-        for (String pid: pids) {\n-            if( !filter.arePidsNegative() ) {\n-                disj.add(Restrictions.eq(\"processId\", pid));\n-            } else {\n-                disj.add(Restrictions.ne(\"processId\", pid));\n-            }\n+      Disjunction disj = Restrictions.disjunction();\n+      for (String pid : pids) {\n+        if (!filter.arePidsNegative()) {\n+          disj.add(Restrictions.eq(\"processId\", pid));\n+        } else {\n+          disj.add(Restrictions.ne(\"processId\", pid));\n         }\n-        processCrit.add(disj);\n+      }\n+      processCrit.add(disj);\n     }\n \n     List<String> iids = filter.getIidFilter();\n     if (iids != null && iids.size() > 0) {\n-        Disjunction disj = Restrictions.disjunction();\n-        for (String iid: iids) {\n-            disj.add(Restrictions.eq(\"id\", new Long(iid)));\n-        }\n-        crit.add(disj);\n+      Disjunction disj = Restrictions.disjunction();\n+      for (String iid : iids) {\n+        disj.add(Restrictions.eq(\"id\", new Long(iid)));\n+      }\n+      crit.add(disj);\n     }\n \n     // Filtering on name and namespace\n@@ -305,7 +316,7 @@ class CriteriaBuilder {\n     }\n     if (filter.getLastActiveDateFilter() != null) {\n       for (String ladf : filter.getLastActiveDateFilter()) {\n-        addFilterOnPrefixedDate(crit, ladf,  \"lastActiveTime\");\n+        addFilterOnPrefixedDate(crit, ladf, \"lastActiveTime\");\n       }\n     }\n \n@@ -313,16 +324,16 @@ class CriteriaBuilder {\n     if (filter.getPropertyValuesFilter() != null) {\n       Criteria propCrit = crit.createCriteria(\"correlationSets\").createCriteria(\"properties\");\n       for (Map.Entry<String, String> corValue : filter.getPropertyValuesFilter().entrySet()) {\n-        String propName = (String)corValue.getKey();\n+        String propName = (String) corValue.getKey();\n         if (propName.startsWith(\"{\")) {\n           String namespace = propName.substring(1, propName.lastIndexOf(\"}\"));\n           propName = propName.substring(propName.lastIndexOf(\"}\") + 1, propName.length());\n           propCrit.add(Restrictions.eq(\"name\", propName))\n-                  .add(Restrictions.eq(\"namespace\", namespace))\n-                  .add(Restrictions.eq(\"value\", corValue.getValue()));\n+            .add(Restrictions.eq(\"namespace\", namespace))\n+            .add(Restrictions.eq(\"value\", corValue.getValue()));\n         } else {\n           propCrit.add(Restrictions.eq(\"name\", corValue.getKey()))\n-                  .add(Restrictions.eq(\"value\", corValue.getValue()));\n+            .add(Restrictions.eq(\"value\", corValue.getValue()));\n         }\n       }\n     }\n@@ -334,45 +345,72 @@ class CriteriaBuilder {\n         String orderKey = key;\n         if (key.startsWith(\"+\") || key.startsWith(\"-\")) {\n           orderKey = key.substring(1, key.length());\n-          if (key.startsWith(\"-\")) ascending = false;\n+          if (key.startsWith(\"-\")) {\n+            ascending = false;\n+          }\n         }\n \n         if (\"name\".equals(orderKey)) {\n-          if (ascending) processCrit.addOrder(Property.forName(\"typeName\").asc());\n-          else processCrit.addOrder(Property.forName(\"typeName\").desc());\n+          if (ascending) {\n+            processCrit.addOrder(Property.forName(\"typeName\").asc());\n+          } else {\n+            processCrit.addOrder(Property.forName(\"typeName\").desc());\n+          }\n         } else if (\"namespace\".equals(orderKey)) {\n-          if (ascending) processCrit.addOrder(Property.forName(\"typeNamespace\").asc());\n-          else processCrit.addOrder(Property.forName(\"typeNamespace\").desc());\n+          if (ascending) {\n+            processCrit.addOrder(Property.forName(\"typeNamespace\").asc());\n+          } else {\n+            processCrit.addOrder(Property.forName(\"typeNamespace\").desc());\n+          }\n         } else if (\"pid\".equals(orderKey)) {\n-          if (ascending) processCrit.addOrder(Property.forName(\"processId\").asc());\n-          else processCrit.addOrder(Property.forName(\"processId\").desc());\n+          if (ascending) {\n+            processCrit.addOrder(Property.forName(\"processId\").asc());\n+          } else {\n+            processCrit.addOrder(Property.forName(\"processId\").desc());\n+          }\n         } else if (\"version\".equals(orderKey)) {\n-          if (ascending) processCrit.addOrder(Property.forName(\"version\").asc());\n-          else processCrit.addOrder(Property.forName(\"version\").desc());\n+          if (ascending) {\n+            processCrit.addOrder(Property.forName(\"version\").asc());\n+          } else {\n+            processCrit.addOrder(Property.forName(\"version\").desc());\n+          }\n         } else if (\"status\".equals(orderKey)) {\n-          if (ascending) crit.addOrder(Property.forName(\"state\").asc());\n-          else crit.addOrder(Property.forName(\"state\").desc());\n+          if (ascending) {\n+            crit.addOrder(Property.forName(\"state\").asc());\n+          } else {\n+            crit.addOrder(Property.forName(\"state\").desc());\n+          }\n         } else if (\"started\".equals(orderKey)) {\n-          if (ascending) crit.addOrder(Property.forName(\"created\").asc());\n-          else crit.addOrder(Property.forName(\"created\").desc());\n+          if (ascending) {\n+            crit.addOrder(Property.forName(\"created\").asc());\n+          } else {\n+            crit.addOrder(Property.forName(\"created\").desc());\n+          }\n         } else if (\"last-active\".equals(orderKey)) {\n-          if (ascending) crit.addOrder(Property.forName(\"lastActiveTime\").asc());\n-          else crit.addOrder(Property.forName(\"lastActiveTime\").desc());\n+          if (ascending) {\n+            crit.addOrder(Property.forName(\"lastActiveTime\").asc());\n+          } else {\n+            crit.addOrder(Property.forName(\"lastActiveTime\").desc());\n+          }\n         }\n       }\n     }\n \n-    if (filter.getLimit() > 0) crit.setMaxResults(filter.getLimit());\n+    if (filter.getLimit() > 0) {\n+      crit.setMaxResults(filter.getLimit());\n+    }\n   }\n \n   /**\n    * Build criteria for an event filter.\n-   * @param crit target criteria\n+   *\n+   * @param crit    target criteria\n    * @param efilter event filter\n    */\n   void buildCriteria(Criteria crit, BpelEventFilter efilter) {\n-    if (efilter.getTypeFilter() != null)\n-      crit.add(Restrictions.like(\"type\", efilter.getTypeFilter().replace('*','%')));\n+    if (efilter.getTypeFilter() != null) {\n+      crit.add(Restrictions.like(\"type\", efilter.getTypeFilter().replace('*', '%')));\n+    }\n \n     // Specific filter for started and last active dates.\n     if (efilter.getTimestampFilter() != null) {\n@@ -381,11 +419,13 @@ class CriteriaBuilder {\n       }\n     }\n \n-    if (efilter.limit > 0) crit.setMaxResults(efilter.limit);\n+    if (efilter.limit > 0) {\n+      crit.setMaxResults(efilter.limit);\n+    }\n   }\n \n   void addScopeFilter(Criteria crit, String scopeId) {\n-    crit.add(Restrictions.eq(\"\",scopeId));\n+    crit.add(Restrictions.eq(\"\", scopeId));\n   }\n \n   static void addFilterOnPrefixedDate(Criteria crit, String prefixedDate, String dateAttribute) {\n@@ -395,15 +435,15 @@ class CriteriaBuilder {\n     } catch (ParseException e) {\n       // Never occurs, the deploy date format is pre-validated by the filter\n     }\n-    addFilterOnPrefixedDate(crit,prefixedDate,realDate,dateAttribute);\n+    addFilterOnPrefixedDate(crit, prefixedDate, realDate, dateAttribute);\n   }\n \n   private static Date parseDateExpression(String date) throws ParseException {\n-      if( date.toLowerCase().startsWith(\"-\") && date.length() > 1 ) {\n-          return RelativeDateParser.parseRelativeDate(date.substring(1));\n-      } else {\n-          return ISO8601DateParser.parse(date);\n-      }\n+    if (date.toLowerCase().startsWith(\"-\") && date.length() > 1) {\n+      return RelativeDateParser.parseRelativeDate(date.substring(1));\n+    } else {\n+      return ISO8601DateParser.parse(date);\n+    }\n   }\n \n   static void addFilterOnPrefixedDate(Criteria crit, String op, Date date, String dateAttribute) {\n",
            "diff_size": 414
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/231/CriteriaBuilder.java\nindex 1661bd07778..9bf4389666a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/231/CriteriaBuilder.java\n@@ -246,9 +246,7 @@ class CriteriaBuilder {\n         return op + \" '\" + ts.toString() + \"'\";\n     }\n \n-\n-\n-  /**\n+/**\n    * Build a Hibernate {@link Criteria} from an instance filter.\n    * @param crit target (destination) criteria\n    * @param filter filter\n@@ -305,7 +303,7 @@ class CriteriaBuilder {\n     }\n     if (filter.getLastActiveDateFilter() != null) {\n       for (String ladf : filter.getLastActiveDateFilter()) {\n-        addFilterOnPrefixedDate(crit, ladf,  \"lastActiveTime\");\n+        addFilterOnPrefixedDate(crit, ladf, \"lastActiveTime\");\n       }\n     }\n \n@@ -334,7 +332,8 @@ class CriteriaBuilder {\n         String orderKey = key;\n         if (key.startsWith(\"+\") || key.startsWith(\"-\")) {\n           orderKey = key.substring(1, key.length());\n-          if (key.startsWith(\"-\")) ascending = false;\n+          if (key.startsWith(\"-\"))\n+    ascending = false;\n         }\n \n         if (\"name\".equals(orderKey)) {\n@@ -425,4 +424,4 @@ class CriteriaBuilder {\n   }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/231/CriteriaBuilder.java\nindex 1661bd07778..a02108472d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/231/CriteriaBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/231/CriteriaBuilder.java\n@@ -155,7 +155,7 @@ class CriteriaBuilder {\n                                 \" and csp\" + i + \".namespace = :cspnamespace\" + i +\n                                 \" and csp\" + i + \".value = :cspvalue\" + i);\n \n-                        parameters.put(\"cspname\" + i, propKey.substring(propKey.lastIndexOf(\"}\") + 1, propKey.length()));\n+                    parameters.put(\"cspname\" + i, propKey.substring(propKey.lastIndexOf(\"}\") + 1, propKey.length()));\n                         parameters.put(\"cspnamespace\" + i, namespace);\n                         parameters.put(\"cspvalue\" + i, value);\n                     } else {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}