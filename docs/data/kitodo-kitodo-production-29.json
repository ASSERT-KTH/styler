{
    "project_name": "kitodo-kitodo-production",
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "44",
                "severity": "warning",
                "message": "Line is longer than 140 characters (found 155).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     */\n    private static Triple<String, String, String> formAKeyForARuleInATemporaryMap(RestrictivePermit restrictivePermit) {\n        return Triple.of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null), restrictivePermit.getValue().orElse(null));\n    }\n\n    /**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/29/Rule.java\nindex e2b270abe94..97944b037fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/29/Rule.java\n@@ -41,7 +41,10 @@ public class Rule {\n      * @return key is triple\n      */\n     private static Triple<String, String, String> formAKeyForARuleInATemporaryMap(RestrictivePermit restrictivePermit) {\n-        return Triple.of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null), restrictivePermit.getValue().orElse(null));\n+        return Triple.of(restrictivePermit.getDivision().orElse(null),restrictivePermit.getKey().orElse(null),restrictivePermit.getValue(\n+)\n+\n+        .orElse(null));\n     }\n \n     /**\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/29/Rule.java\nindex e2b270abe94..82a9d0777b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/29/Rule.java\n@@ -36,12 +36,12 @@ public class Rule {\n      * problem because the rule is basically the key is three fields and applies\n      * everything.\n      *\n-     * @param restrictivePermit\n-     *            restrictive permit for which a hash key is to be formed\n+     * @param restrictivePermit restrictive permit for which a hash key is to be formed\n      * @return key is triple\n      */\n     private static Triple<String, String, String> formAKeyForARuleInATemporaryMap(RestrictivePermit restrictivePermit) {\n-        return Triple.of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null), restrictivePermit.getValue().orElse(null));\n+        return Triple.of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null),\n+            restrictivePermit.getValue().orElse(null));\n     }\n \n     /**\n@@ -58,10 +58,8 @@ public class Rule {\n      * Constructor for a new rule. May come with a restrictive permit or\n      * without.\n      *\n-     * @param ruleset\n-     *            the ruleset\n-     * @param optionalRestrictivePermit\n-     *            there may be a restrictive permit, or not\n+     * @param ruleset                   the ruleset\n+     * @param optionalRestrictivePermit there may be a restrictive permit, or not\n      */\n     public Rule(Ruleset ruleset, Optional<RestrictivePermit> optionalRestrictivePermit) {\n         this.ruleset = ruleset;\n@@ -75,14 +73,12 @@ public class Rule {\n      * is just like that. We have that twice for subdivisions and options so\n      * this is summarized here and only getter is fetched from outside.\n      *\n-     * @param possibilities\n-     *            list of possibilities unfiltered\n-     * @param getter\n-     *            which field to read\n+     * @param possibilities list of possibilities unfiltered\n+     * @param getter        which field to read\n      * @return list is filtered\n      */\n     private Map<String, String> filterPossibilitiesBasedOnRule(Map<String, String> possibilities,\n-            Function<RestrictivePermit, Optional<String>> getter) {\n+                                                               Function<RestrictivePermit, Optional<String>> getter) {\n         if (optionalRestrictivePermit.isPresent()) {\n             Map<String, String> filteredPossibilities = new LinkedHashMap<>();\n             RestrictivePermit restrictivePermit = optionalRestrictivePermit.get();\n@@ -111,8 +107,7 @@ public class Rule {\n     /**\n      * Returns only the allowed sub-divisions by rule, possibly only resorted.\n      *\n-     * @param divisions\n-     *            list input\n+     * @param divisions list input\n      * @return exit\n      */\n     Map<String, String> getAllowedSubdivisions(Map<String, String> divisions) {\n@@ -168,16 +163,15 @@ public class Rule {\n     /**\n      * Returns a permit rule for a key.\n      *\n-     * @param keyId\n-     *            key for which a permit rule is to be returned\n+     * @param keyId key for which a permit rule is to be returned\n      * @return permit rule for the key\n      */\n     Rule getRuleForKey(String keyId, boolean division) {\n         Rule permitRuleForKey = optionalRestrictivePermit.isPresent()\n-                ? new Rule(ruleset,\n-                        optionalRestrictivePermit.get().getPermits().parallelStream()\n-                                .filter(rule -> keyId.equals(rule.getKey().orElse(null))).findAny())\n-                : new Rule(ruleset, Optional.empty());\n+            ? new Rule(ruleset,\n+            optionalRestrictivePermit.get().getPermits().parallelStream()\n+                .filter(rule -> keyId.equals(rule.getKey().orElse(null))).findAny())\n+            : new Rule(ruleset, Optional.empty());\n         if (division) {\n             permitRuleForKey.merge(ruleset.getRuleForKey(keyId));\n         }\n@@ -187,8 +181,7 @@ public class Rule {\n     /**\n      * Returns the selection items allowed by the rule.\n      *\n-     * @param selectItems\n-     *            the selection items\n+     * @param selectItems the selection items\n      * @return the selection items\n      */\n     Map<String, String> getSelectItems(Map<String, String> selectItems) {\n@@ -203,7 +196,7 @@ public class Rule {\n      */\n     boolean isRepeatable() {\n         return !optionalRestrictivePermit.isPresent() || optionalRestrictivePermit.get().getMaxOccurs() == null\n-                || optionalRestrictivePermit.get().getMaxOccurs() > 1;\n+            || optionalRestrictivePermit.get().getMaxOccurs() > 1;\n     }\n \n     /**\n@@ -213,7 +206,7 @@ public class Rule {\n      */\n     boolean isUnspecifiedUnrestricted() {\n         return !optionalRestrictivePermit.isPresent()\n-                || optionalRestrictivePermit.get().getUnspecified().equals(Unspecified.UNRESTRICTED);\n+            || optionalRestrictivePermit.get().getUnspecified().equals(Unspecified.UNRESTRICTED);\n     }\n \n     /**\n@@ -224,10 +217,8 @@ public class Rule {\n      * other rule otherwise considered as well. This is important but difficult\n      * to implement and so it is done now.\n      *\n-     * @param one\n-     *            a rule\n-     * @param another\n-     *            the other rule\n+     * @param one     a rule\n+     * @param another the other rule\n      * @return merged rule\n      */\n     private RestrictivePermit merge(RestrictivePermit one, RestrictivePermit another) {\n@@ -243,8 +234,8 @@ public class Rule {\n         // if one of both is forbidden, then it is forbidden\n         merged.setUnspecified(\n             one.getUnspecified().equals(Unspecified.FORBIDDEN) || another.getUnspecified().equals(Unspecified.FORBIDDEN)\n-                    ? Unspecified.FORBIDDEN\n-                    : Unspecified.UNRESTRICTED);\n+                ? Unspecified.FORBIDDEN\n+                : Unspecified.UNRESTRICTED);\n \n         // for sub-rules, apply recursively\n         HashMap<Triple<String, String, String>, RestrictivePermit> anotherPermits = new LinkedHashMap<>();\n@@ -271,14 +262,13 @@ public class Rule {\n      * Combines two rules. The function happens in separate, this is just\n      * wrapping.\n      *\n-     * @param other\n-     *            the other rule\n+     * @param other the other rule\n      */\n     void merge(Rule other) {\n         if (optionalRestrictivePermit.isPresent()) {\n             if (other.optionalRestrictivePermit.isPresent()) {\n                 optionalRestrictivePermit = Optional\n-                        .of(merge(optionalRestrictivePermit.get(), other.optionalRestrictivePermit.get()));\n+                    .of(merge(optionalRestrictivePermit.get(), other.optionalRestrictivePermit.get()));\n             }\n         } else {\n             optionalRestrictivePermit = other.optionalRestrictivePermit;\n@@ -291,12 +281,9 @@ public class Rule {\n      * {@link #merge(RestrictivePermit, RestrictivePermit)} function and connects the quantities. Merge is\n      * with strictness here, that is, the stricter value of both becomes valid.\n      *\n-     * @param one\n-     *            one rule\n-     * @param another\n-     *            another rule\n-     * @param merged\n-     *            merged rule\n+     * @param one     one rule\n+     * @param another another rule\n+     * @param merged  merged rule\n      */\n     private void mergeQuantities(RestrictivePermit one, RestrictivePermit another, RestrictivePermit merged) {\n         if (one.getMinOccurs() == null) {\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/29/Rule.java\nindex e2b270abe94..61bb8668d12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/29/Rule.java\n@@ -319,4 +319,4 @@ public class Rule {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 258).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "262",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/29/Rule.java\nindex e2b270abe94..a603b56a565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/29/Rule.java\n@@ -19,7 +19,6 @@ import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Optional;\n import java.util.function.Function;\n-\n import org.apache.commons.lang3.tuple.Triple;\n import org.kitodo.dataeditor.ruleset.xml.RestrictivePermit;\n import org.kitodo.dataeditor.ruleset.xml.Ruleset;\n@@ -30,6 +29,7 @@ import org.kitodo.dataeditor.ruleset.xml.Unspecified;\n  * in the ruleset, the rule behaves as if there is a rule that declares no\n  * restrictions.\n  */\n+\n public class Rule {\n     /**\n      * Generates a triplet of rule with triple as a key. This is due to the\n@@ -40,6 +40,7 @@ public class Rule {\n      *            restrictive permit for which a hash key is to be formed\n      * @return key is triple\n      */\n+\n     private static Triple<String, String, String> formAKeyForARuleInATemporaryMap(RestrictivePermit restrictivePermit) {\n         return Triple.of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null), restrictivePermit.getValue().orElse(null));\n     }\n@@ -47,6 +48,8 @@ public class Rule {\n     /**\n      * Maybe a rule, but maybe not.\n      */\n+\n+\n     private Optional<RestrictivePermit> optionalRestrictivePermit;\n \n     /**\n@@ -63,6 +66,8 @@ public class Rule {\n      * @param optionalRestrictivePermit\n      *            there may be a restrictive permit, or not\n      */\n+\n+\n     public Rule(Ruleset ruleset, Optional<RestrictivePermit> optionalRestrictivePermit) {\n         this.ruleset = ruleset;\n         this.optionalRestrictivePermit = optionalRestrictivePermit;\n@@ -81,8 +86,9 @@ public class Rule {\n      *            which field to read\n      * @return list is filtered\n      */\n-    private Map<String, String> filterPossibilitiesBasedOnRule(Map<String, String> possibilities,\n-            Function<RestrictivePermit, Optional<String>> getter) {\n+\n+\n+    private Map<String, String> filterPossibilitiesBasedOnRule(Map<String, String> possibilities, Function<RestrictivePermit, Optional<String>> getter) {\n         if (optionalRestrictivePermit.isPresent()) {\n             Map<String, String> filteredPossibilities = new LinkedHashMap<>();\n             RestrictivePermit restrictivePermit = optionalRestrictivePermit.get();\n@@ -115,6 +121,8 @@ public class Rule {\n      *            list input\n      * @return exit\n      */\n+\n+\n     Map<String, String> getAllowedSubdivisions(Map<String, String> divisions) {\n         return filterPossibilitiesBasedOnRule(divisions, RestrictivePermit::getDivision);\n     }\n@@ -125,6 +133,8 @@ public class Rule {\n      *\n      * @return the key declarations explicitly allowed\n      */\n+\n+\n     LinkedList<KeyDeclaration> getExplicitlyPermittedKeys(KeyDeclaration keyDeclaration) {\n         LinkedList<KeyDeclaration> explicitlyPermittedKeys = new LinkedList<>();\n         if (optionalRestrictivePermit.isPresent()) {\n@@ -144,6 +154,8 @@ public class Rule {\n      *\n      * @return maximum count\n      */\n+\n+\n     int getMaxOccurs() {\n         if (optionalRestrictivePermit.isPresent() && optionalRestrictivePermit.get().getMaxOccurs() != null) {\n             return optionalRestrictivePermit.get().getMaxOccurs();\n@@ -157,6 +169,8 @@ public class Rule {\n      *\n      * @return minimum count\n      */\n+\n+\n     int getMinOccurs() {\n         if (optionalRestrictivePermit.isPresent() && optionalRestrictivePermit.get().getMinOccurs() != null) {\n             return optionalRestrictivePermit.get().getMinOccurs();\n@@ -172,12 +186,10 @@ public class Rule {\n      *            key for which a permit rule is to be returned\n      * @return permit rule for the key\n      */\n+\n+\n     Rule getRuleForKey(String keyId, boolean division) {\n-        Rule permitRuleForKey = optionalRestrictivePermit.isPresent()\n-                ? new Rule(ruleset,\n-                        optionalRestrictivePermit.get().getPermits().parallelStream()\n-                                .filter(rule -> keyId.equals(rule.getKey().orElse(null))).findAny())\n-                : new Rule(ruleset, Optional.empty());\n+        Rule permitRuleForKey = optionalRestrictivePermit.isPresent() ? new Rule(ruleset, optionalRestrictivePermit.get().getPermits().parallelStream().filter(rule -> keyId.equals(rule.getKey().orElse(null))).findAny()) : new Rule(ruleset, Optional.empty());\n         if (division) {\n             permitRuleForKey.merge(ruleset.getRuleForKey(keyId));\n         }\n@@ -191,6 +203,8 @@ public class Rule {\n      *            the selection items\n      * @return the selection items\n      */\n+\n+\n     Map<String, String> getSelectItems(Map<String, String> selectItems) {\n         return filterPossibilitiesBasedOnRule(selectItems, RestrictivePermit::getValue);\n     }\n@@ -201,9 +215,11 @@ public class Rule {\n      *\n      * @return whether this is repeatable\n      */\n+\n+\n     boolean isRepeatable() {\n         return !optionalRestrictivePermit.isPresent() || optionalRestrictivePermit.get().getMaxOccurs() == null\n-                || optionalRestrictivePermit.get().getMaxOccurs() > 1;\n+            || optionalRestrictivePermit.get().getMaxOccurs() > 1;\n     }\n \n     /**\n@@ -211,9 +227,10 @@ public class Rule {\n      *\n      * @return whether unspecified is unrestricted\n      */\n+\n+\n     boolean isUnspecifiedUnrestricted() {\n-        return !optionalRestrictivePermit.isPresent()\n-                || optionalRestrictivePermit.get().getUnspecified().equals(Unspecified.UNRESTRICTED);\n+        return !optionalRestrictivePermit.isPresent() || optionalRestrictivePermit.get().getUnspecified().equals(Unspecified.UNRESTRICTED);\n     }\n \n     /**\n@@ -230,6 +247,8 @@ public class Rule {\n      *            the other rule\n      * @return merged rule\n      */\n+\n+\n     private RestrictivePermit merge(RestrictivePermit one, RestrictivePermit another) {\n         RestrictivePermit merged = new RestrictivePermit();\n \n@@ -237,14 +256,10 @@ public class Rule {\n         merged.setDivision(one.getDivision());\n         merged.setKey(one.getKey());\n         merged.setValue(one.getValue());\n-\n         mergeQuantities(one, another, merged);\n \n         // if one of both is forbidden, then it is forbidden\n-        merged.setUnspecified(\n-            one.getUnspecified().equals(Unspecified.FORBIDDEN) || another.getUnspecified().equals(Unspecified.FORBIDDEN)\n-                    ? Unspecified.FORBIDDEN\n-                    : Unspecified.UNRESTRICTED);\n+        merged.setUnspecified(one.getUnspecified().equals(Unspecified.FORBIDDEN) || another.getUnspecified().equals(Unspecified.FORBIDDEN) ? Unspecified.FORBIDDEN : Unspecified.UNRESTRICTED);\n \n         // for sub-rules, apply recursively\n         HashMap<Triple<String, String, String>, RestrictivePermit> anotherPermits = new LinkedHashMap<>();\n@@ -263,7 +278,6 @@ public class Rule {\n         }\n         mergedPermits.addAll(anotherPermits.values());\n         merged.setPermits(mergedPermits);\n-\n         return merged;\n     }\n \n@@ -274,11 +288,11 @@ public class Rule {\n      * @param other\n      *            the other rule\n      */\n+\n     void merge(Rule other) {\n         if (optionalRestrictivePermit.isPresent()) {\n             if (other.optionalRestrictivePermit.isPresent()) {\n-                optionalRestrictivePermit = Optional\n-                        .of(merge(optionalRestrictivePermit.get(), other.optionalRestrictivePermit.get()));\n+                optionalRestrictivePermit = Optional.of(merge(optionalRestrictivePermit.get(), other.optionalRestrictivePermit.get()));\n             }\n         } else {\n             optionalRestrictivePermit = other.optionalRestrictivePermit;\n@@ -298,6 +312,8 @@ public class Rule {\n      * @param merged\n      *            merged rule\n      */\n+\n+\n     private void mergeQuantities(RestrictivePermit one, RestrictivePermit another, RestrictivePermit merged) {\n         if (one.getMinOccurs() == null) {\n             merged.setMinOccurs(another.getMinOccurs());\n@@ -308,7 +324,6 @@ public class Rule {\n                 merged.setMinOccurs(Math.max(one.getMinOccurs(), another.getMinOccurs()));\n             }\n         }\n-\n         if (one.getMaxOccurs() == null) {\n             merged.setMaxOccurs(another.getMaxOccurs());\n         } else {\n@@ -319,4 +334,4 @@ public class Rule {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/29/Rule.java\nindex e2b270abe94..97944b037fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/29/Rule.java\n@@ -41,7 +41,10 @@ public class Rule {\n      * @return key is triple\n      */\n     private static Triple<String, String, String> formAKeyForARuleInATemporaryMap(RestrictivePermit restrictivePermit) {\n-        return Triple.of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null), restrictivePermit.getValue().orElse(null));\n+        return Triple.of(restrictivePermit.getDivision().orElse(null),restrictivePermit.getKey().orElse(null),restrictivePermit.getValue(\n+)\n+\n+        .orElse(null));\n     }\n \n     /**\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "120",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "43",
                    "column": "121",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "column": "121",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'return' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "47",
                    "column": "2",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "column": "2",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 1, expected is 4, indentation should be the same level as line 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/29/Rule.java\nindex e2b270abe94..01e8ae05110 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/29/Rule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/29/Rule.java\n@@ -40,11 +40,13 @@ public class Rule {\n      *            restrictive permit for which a hash key is to be formed\n      * @return key is triple\n      */\n-    private static Triple<String, String, String> formAKeyForARuleInATemporaryMap(RestrictivePermit restrictivePermit) {\n-        return Triple.of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null), restrictivePermit.getValue().orElse(null));\n-    }\n+    private static Triple<String, String, String> formAKeyForARuleInATemporaryMap(RestrictivePermit restrictivePermit) {return\n+Triple\n \n-    /**\n+    .of(restrictivePermit.getDivision().orElse(null), restrictivePermit.getKey().orElse(null), restrictivePermit.getValue().orElse(null));\n+ }\n+\n+ /**\n      * Maybe a rule, but maybe not.\n      */\n     private Optional<RestrictivePermit> optionalRestrictivePermit;\n",
            "diff_size": 7
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}