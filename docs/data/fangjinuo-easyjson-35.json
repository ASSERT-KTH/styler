{
    "project_name": "fangjinuo-easyjson",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "113",
                "column": "54",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n    private Mapper createMapper() {\n        if (useAnnotations && !caseInsensitiveFields &&\n                !acceptSingleValueAsArray && ignoreSet == null\n                && Str.isEmpty(view) && respectIgnore) {\n            return new MapperSimple(fieldAccessType.create(true));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/35/JsonParserFactory.java\nindex 71d3af10f93..728b692010c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/35/JsonParserFactory.java\n@@ -110,8 +110,7 @@ public class JsonParserFactory {\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n                 && Str.isEmpty(view) && respectIgnore) {\n             return new MapperSimple(fieldAccessType.create(true));\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "113",
                    "column": "54",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/35/JsonParserFactory.java\nindex 71d3af10f93..a30345fcee5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/35/JsonParserFactory.java\n@@ -103,28 +103,28 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createFastParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(false, chop, lazyChop, checkDates),\n-                createMapper());\n+            new JsonFastParser(false, chop, lazyChop, checkDates),\n+            createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     private Mapper createMapper() {\n         if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n-                && Str.isEmpty(view) && respectIgnore) {\n+            !acceptSingleValueAsArray && ignoreSet == null\n+            && Str.isEmpty(view) && respectIgnore) {\n             return new MapperSimple(fieldAccessType.create(true));\n         }\n         return new MapperComplex(fieldAccessType, useAnnotations,\n-                caseInsensitiveFields, ignoreSet, view,\n-                respectIgnore, acceptSingleValueAsArray);\n+            caseInsensitiveFields, ignoreSet, view,\n+            respectIgnore, acceptSingleValueAsArray);\n     }\n \n \n     public JsonParserAndMapper createFastObjectMapperParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n-                createMapper());\n+            new JsonFastParser(true),\n+            createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n@@ -132,8 +132,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createUTF8DirectByteParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n+            new JsonUTF8Parser(),\n+            createMapper()\n         );\n \n         jsonParser.setCharset(Charsets.UTF_8);\n@@ -143,8 +143,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createASCIIParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n+            new JsonAsciiParser(),\n+            createMapper()\n         );\n \n         jsonParser.setCharset(Charsets.US_ASCII);\n@@ -155,8 +155,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createLaxParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n-                createMapper());\n+            new JsonParserLax(false, chop, lazyChop, checkDates),\n+            createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -165,8 +165,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n+            new JsonParserLax(false, chop, lazyChop, false, events),\n+            createMapper()\n         );\n \n         jsonParser.setCharset(charset);\n@@ -176,7 +176,7 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createCharacterSourceParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n-                createMapper());\n+            createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -184,7 +184,7 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createJsonCharArrayParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n-                createMapper());\n+            createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -207,8 +207,8 @@ public class JsonParserFactory {\n         }\n \n         return new JsonMappingParser(\n-                createMapper(), charset,\n-                lax, chop, lazyChop);\n+            createMapper(), charset,\n+            lax, chop, lazyChop);\n     }\n \n \n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/35/JsonParserFactory.java\nindex 71d3af10f93..ee7ee00644c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/naturalize/35/JsonParserFactory.java\n@@ -40,8 +40,6 @@ import java.nio.charset.Charset;\n import java.util.Set;\n \n public class JsonParserFactory {\n-\n-\n     private Charset charset = Charsets.UTF_8;\n     private boolean lax;\n     private boolean chop = false;\n@@ -57,8 +55,7 @@ public class JsonParserFactory {\n \n     private boolean checkDates = true;\n \n-\n-    public FieldAccessMode getFieldAccessType() {\n+public FieldAccessMode getFieldAccessType() {\n         return fieldAccessType;\n     }\n \n@@ -102,28 +99,24 @@ public class JsonParserFactory {\n     }\n \n     public JsonParserAndMapper createFastParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(false, chop, lazyChop, checkDates),\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(false, chop, lazyChop, checkDates),\n                 createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n                 && Str.isEmpty(view) && respectIgnore) {\n-            return new MapperSimple(fieldAccessType.create(true));\n+    return new MapperSimple(fieldAccessType.create(true));\n         }\n         return new MapperComplex(fieldAccessType, useAnnotations,\n                 caseInsensitiveFields, ignoreSet, view,\n                 respectIgnore, acceptSingleValueAsArray);\n     }\n \n-\n-    public JsonParserAndMapper createFastObjectMapperParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n+public JsonParserAndMapper createFastObjectMapperParser() {\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(true),\n                 createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -131,43 +124,33 @@ public class JsonParserFactory {\n \n \n     public JsonParserAndMapper createUTF8DirectByteParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n-        );\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonUTF8Parser(),\n+                createMapper());\n \n         jsonParser.setCharset(Charsets.UTF_8);\n         return jsonParser;\n-\n     }\n \n     public JsonParserAndMapper createASCIIParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n-        );\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonAsciiParser(),\n+                createMapper());\n \n         jsonParser.setCharset(Charsets.US_ASCII);\n         return jsonParser;\n-\n     }\n \n \n     public JsonParserAndMapper createLaxParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, checkDates),\n                 createMapper());\n-\n-        jsonParser.setCharset(charset);\n+jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n \n     public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n-        );\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, false, events),\n+                createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -177,16 +160,14 @@ public class JsonParserFactory {\n     public JsonParserAndMapper createCharacterSourceParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n                 createMapper());\n-\n-        jsonParser.setCharset(charset);\n+jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     public JsonParserAndMapper createJsonCharArrayParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n                 createMapper());\n-\n-        jsonParser.setCharset(charset);\n+jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n@@ -200,19 +181,15 @@ public class JsonParserFactory {\n     }\n \n     public JsonParserAndMapper create() {\n-\n-\n-        if (charset == null) {\n+    if (charset == null) {\n             charset = Charsets.UTF_8;\n         }\n-\n-        return new JsonMappingParser(\n+return new JsonMappingParser(\n                 createMapper(), charset,\n                 lax, chop, lazyChop);\n     }\n \n-\n-    public boolean isUsePropertiesFirst() {\n+public boolean isUsePropertiesFirst() {\n         return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n     }\n \n@@ -224,7 +201,6 @@ public class JsonParserFactory {\n \n     public boolean isUseFieldsFirst() {\n         return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n-\n     }\n \n \n@@ -258,7 +234,6 @@ public class JsonParserFactory {\n     public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n         this.useAnnotations = useAnnotations;\n         return this;\n-\n     }\n \n \n@@ -274,7 +249,6 @@ public class JsonParserFactory {\n     public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n         this.caseInsensitiveFields = caseInsensitiveFields;\n         return this;\n-\n     }\n \n \n@@ -317,7 +291,6 @@ public class JsonParserFactory {\n     public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n         this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n         return this;\n-\n     }\n \n \n@@ -329,4 +302,4 @@ public class JsonParserFactory {\n     public boolean isCheckDatesSet() {\n         return checkDates;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/35/JsonParserFactory.java\nindex 71d3af10f93..e7332db790f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/35/JsonParserFactory.java\n@@ -4,7 +4,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *  \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *          http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -35,13 +35,10 @@ import io.advantageous.boon.core.reflection.MapperComplex;\n import io.advantageous.boon.core.reflection.MapperSimple;\n import io.advantageous.boon.core.reflection.fields.FieldAccessMode;\n import io.advantageous.boon.json.implementation.*;\n-\n import java.nio.charset.Charset;\n import java.util.Set;\n \n public class JsonParserFactory {\n-\n-\n     private Charset charset = Charsets.UTF_8;\n     private boolean lax;\n     private boolean chop = false;\n@@ -49,12 +46,10 @@ public class JsonParserFactory {\n     private FieldAccessMode fieldAccessType = FieldAccessMode.FIELD;\n     private boolean useAnnotations = true;\n     private boolean caseInsensitiveFields;\n-\n     private Set<String> ignoreSet;\n     private String view;\n     private boolean respectIgnore = true;\n     private boolean acceptSingleValueAsArray;\n-\n     private boolean checkDates = true;\n \n \n@@ -62,7 +57,6 @@ public class JsonParserFactory {\n         return fieldAccessType;\n     }\n \n-\n     public boolean isChop() {\n         return chop;\n     }\n@@ -91,7 +85,6 @@ public class JsonParserFactory {\n         return this;\n     }\n \n-\n     public JsonParserFactory setCharset(Charset charset) {\n         this.charset = charset;\n         return this;\n@@ -102,95 +95,60 @@ public class JsonParserFactory {\n     }\n \n     public JsonParserAndMapper createFastParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(false, chop, lazyChop, checkDates),\n-                createMapper());\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(false, chop, lazyChop, checkDates), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n-                && Str.isEmpty(view) && respectIgnore) {\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null && Str.isEmpty(view) && respectIgnore) {\n             return new MapperSimple(fieldAccessType.create(true));\n         }\n-        return new MapperComplex(fieldAccessType, useAnnotations,\n-                caseInsensitiveFields, ignoreSet, view,\n-                respectIgnore, acceptSingleValueAsArray);\n+        return new MapperComplex(fieldAccessType, useAnnotations, caseInsensitiveFields, ignoreSet, view, respectIgnore, acceptSingleValueAsArray);\n     }\n \n-\n     public JsonParserAndMapper createFastObjectMapperParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n-                createMapper());\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(true), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n-\n     public JsonParserAndMapper createUTF8DirectByteParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n-        );\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonUTF8Parser(), createMapper());\n         jsonParser.setCharset(Charsets.UTF_8);\n         return jsonParser;\n-\n     }\n \n     public JsonParserAndMapper createASCIIParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n-        );\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonAsciiParser(), createMapper());\n         jsonParser.setCharset(Charsets.US_ASCII);\n         return jsonParser;\n-\n     }\n \n-\n     public JsonParserAndMapper createLaxParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n-                createMapper());\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, checkDates), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n-\n     public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n-        );\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, false, events), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n-\n     public JsonParserAndMapper createCharacterSourceParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n-                createMapper());\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     public JsonParserAndMapper createJsonCharArrayParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n-                createMapper());\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n-\n     public JsonParserAndMapper createLazyFinalParser() {\n         return createFastParser();\n     }\n@@ -200,23 +158,16 @@ public class JsonParserFactory {\n     }\n \n     public JsonParserAndMapper create() {\n-\n-\n         if (charset == null) {\n             charset = Charsets.UTF_8;\n         }\n-\n-        return new JsonMappingParser(\n-                createMapper(), charset,\n-                lax, chop, lazyChop);\n+        return new JsonMappingParser(createMapper(), charset, lax, chop, lazyChop);\n     }\n \n-\n     public boolean isUsePropertiesFirst() {\n         return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n     }\n \n-\n     public JsonParserFactory usePropertiesFirst() {\n         fieldAccessType = FieldAccessMode.PROPERTY_THEN_FIELD;\n         return this;\n@@ -224,28 +175,23 @@ public class JsonParserFactory {\n \n     public boolean isUseFieldsFirst() {\n         return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n-\n     }\n \n-\n     public JsonParserFactory useFieldsFirst() {\n         this.fieldAccessType = FieldAccessMode.FIELD_THEN_PROPERTY;\n         return this;\n     }\n \n-\n     public JsonParserFactory useFieldsOnly() {\n         this.fieldAccessType = FieldAccessMode.FIELD;\n         return this;\n     }\n \n-\n     public JsonParserFactory usePropertyOnly() {\n         this.fieldAccessType = FieldAccessMode.PROPERTY;\n         return this;\n     }\n \n-\n     public JsonParserFactory useAnnotations() {\n         this.useAnnotations = true;\n         return this;\n@@ -258,10 +204,8 @@ public class JsonParserFactory {\n     public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n         this.useAnnotations = useAnnotations;\n         return this;\n-\n     }\n \n-\n     public JsonParserFactory caseInsensitiveFields() {\n         this.caseInsensitiveFields = true;\n         return this;\n@@ -274,10 +218,8 @@ public class JsonParserFactory {\n     public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n         this.caseInsensitiveFields = caseInsensitiveFields;\n         return this;\n-\n     }\n \n-\n     public Set<String> getIgnoreSet() {\n         return ignoreSet;\n     }\n@@ -317,10 +259,8 @@ public class JsonParserFactory {\n     public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n         this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n         return this;\n-\n     }\n \n-\n     public JsonParserFactory setCheckDates(boolean flag) {\n         this.checkDates = flag;\n         return this;\n@@ -329,4 +269,4 @@ public class JsonParserFactory {\n     public boolean isCheckDatesSet() {\n         return checkDates;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/35/JsonParserFactory.java\nindex 71d3af10f93..728b692010c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/35/JsonParserFactory.java\n@@ -110,8 +110,7 @@ public class JsonParserFactory {\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n                 && Str.isEmpty(view) && respectIgnore) {\n             return new MapperSimple(fieldAccessType.create(true));\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/35/JsonParserFactory.java\nindex 71d3af10f93..728b692010c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/35/JsonParserFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/35/JsonParserFactory.java\n@@ -110,8 +110,7 @@ public class JsonParserFactory {\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n                 && Str.isEmpty(view) && respectIgnore) {\n             return new MapperSimple(fieldAccessType.create(true));\n         }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij"
    ]
}