{
    "project_name": "zanata-zanata-platform",
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "115",
                "column": "30",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "\n    public static class DateUnitAndFigure {\n        private String unit; // s(second) m(minute) or d(day)\n        private int figure;\n\n        public String getUnit() {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/47/DateUtil.java\nindex 601a86e8d20..d7d2962e21d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/47/DateUtil.java\n@@ -112,8 +112,9 @@ public class DateUtil {\n     }\n \n     public static class DateUnitAndFigure {\n-        private String unit; // s(second) m(minute) or d(day)\n-        private int figure;\n+        private String unit;\n+        // s(second) m(minute) or d(day)\n+         private int figure;\n \n         public String getUnit() {\n             return this.unit;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "116",
                    "column": "26",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/47/DateUtil.java\nindex 601a86e8d20..ce237675dcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/47/DateUtil.java\n@@ -1,6 +1,7 @@\n /**\n  *\n  */\n+\n package org.zanata.util;\n \n import java.util.Date;\n@@ -20,232 +21,232 @@ import org.ocpsoft.prettytime.PrettyTime;\n  */\n public class DateUtil {\n \n-    private static final String DATE_TIME_SHORT_PATTERN = \"dd/MM/yy HH:mm\";\n-    private static final String TIME_SHORT_PATTERN = \"hh:mm:ss\";\n-    // Used for advanced editor search queries\n-    private static final String DATE_SHORT_QUERY_PATTERN = \"yyyy-MM-dd\";\n-    // Period Formatters are thread safe and immutable according to joda time\n-    // docs\n-    private static final PeriodFormatter TIME_REMAINING_FORMATTER =\n-            new PeriodFormatterBuilder().appendDays()\n-                    .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n-                    .appendHours().appendSuffix(\" hour\", \" hours\")\n-                    .appendSeparator(\", \").appendMinutes()\n-                    .appendSuffix(\" min\", \" mins\").toFormatter();\n-\n-    /**\n-     * Format date to dd/MM/yy hh:mm a\n-     *\n-     * @param date\n-     * @return\n-     */\n-    public static String formatShortDate(Date date) {\n-        if (date != null) {\n-            DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n-            return fmt.print(new DateTime(date));\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Format date to hh:mm:ss\n-     *\n-     * @param date\n-     * @return\n-     */\n-    public static String formatTime(Date date) {\n-        if (date != null) {\n-            DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n-            return fmt.print(new DateTime(date));\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Return readable string of time different compare between 'then' and\n-     * current time e.g 10 minutes ago, 1 hour ago\n-     *\n-     * @param then\n-     * @return\n-     */\n-    public static String getHowLongAgoDescription(Date then) {\n-        Locale locale = Locale.getDefault();\n-        PrettyTime p = new PrettyTime(locale);\n-        return p.format(then);\n-    }\n-\n-    public static String getTimeRemainingDescription(long durationInMillis) {\n-        Period period = new Period(durationInMillis);\n-        if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return \"less than a minute\";\n-        } else {\n-            return TIME_REMAINING_FORMATTER.print(period.normalizedStandard());\n-        }\n-    }\n-\n-    public static long getDurationInMillisecond(Date from, Date then) {\n-        return from.getTime() - then.getTime();\n-    }\n-\n-    public static DateUnitAndFigure getUnitAndFigure(long durationInMillis) {\n-        Period period = new Period(durationInMillis);\n-        if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return new DateUnitAndFigure(\"seconds\",\n-                    period.toStandardSeconds().getSeconds());\n-        } else if (period.toStandardDays().getDays() <= 0) {\n-            return new DateUnitAndFigure(\"minutes\",\n-                    period.toStandardMinutes().getMinutes());\n-        }\n-        return new DateUnitAndFigure(\"days\", period.toStandardDays().getDays());\n-    }\n-\n-    public static int compareDate(Date date1, Date date2) {\n-        if (date1 == null && date2 == null) {\n-            return 0;\n-        }\n-        if (date1 == null || date2 == null) {\n-            return date1 == null ? -1 : 1;\n-        }\n-        return date1.compareTo(date2);\n-    }\n-\n-    public static class DateUnitAndFigure {\n-        private String unit; // s(second) m(minute) or d(day)\n-        private int figure;\n-\n-        public String getUnit() {\n-            return this.unit;\n-        }\n-\n-        public int getFigure() {\n-            return this.figure;\n-        }\n-\n-        @java.beans.ConstructorProperties({ \"unit\", \"figure\" })\n-        public DateUnitAndFigure(final String unit, final int figure) {\n-            this.unit = unit;\n-            this.figure = figure;\n-        }\n-\n-        public DateUnitAndFigure() {\n-        }\n-    }\n-\n-    /**\n-     * return start of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns\n-     * Tue Mar 25 00:00:00 EST 2014\n-     *\n-     * @param actionTime\n-     * @return\n-     */\n-    public static Date getStartOfDay(Date actionTime) {\n-        DateTime dateTime = new DateTime(actionTime);\n-        return dateTime.withTimeAtStartOfDay().toDate();\n-    }\n-\n-    /**\n-     * return end of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns Tue\n-     * Mar 25 23:59:59 EST 2014\n-     *\n-     * @param actionTime\n-     * @return\n-     */\n-    public static Date getEndOfTheDay(Date actionTime) {\n-        DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n-                .withTimeAtStartOfDay().minusMillis(1);\n-        return endOfTheDay.toDate();\n-    }\n-\n-    /**\n-     * return first day of the week date. (Monday being the first day)\n-     *\n-     * @param actionTime\n-     * @return\n-     */\n-    public static Date getStartOfWeek(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n-        return truncateMonth.toDate();\n-    }\n-\n-    /**\n-     * return last day of the week date. (Sunday being the last day)\n-     *\n-     * @param actionTime\n-     * @return\n-     */\n-    public static Date getEndOfTheWeek(Date actionTime) {\n-        DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n-                .roundCeilingCopy().minusMillis(1);\n-        return truncateMonth.toDate();\n-    }\n-\n-    /**\n-     * return first day of the month date. e.g Tue Mar 25 12:31:00 EST 2014\n-     * returns Tue Mar 1 00:00:00 EST 2014\n-     *\n-     * @param actionTime\n-     * @return\n-     */\n-    public static Date getStartOfMonth(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).monthOfYear().roundFloorCopy();\n-        return truncateMonth.toDate();\n-    }\n-\n-    /**\n-     * return last day of the month date. e.g Tue Mar 25 12:31:00 EST 2014\n-     * returns Tue Mar 31 23:59:59 EST 2014\n-     *\n-     * @param actionTime\n-     * @return\n-     */\n-    public static Date getEndOfTheMonth(Date actionTime) {\n-        DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n-                .roundCeilingCopy().minusMillis(1);\n-        return truncateMonth.toDate();\n-    }\n-\n-    /**\n-     * Convert String to {@link java.util.Date} with given pattern\n-     *\n-     * @param date\n-     * @param pattern\n-     * @throws IllegalArgumentException\n-     */\n-    public static Date getDate(String date, String pattern)\n-            throws IllegalArgumentException {\n-        DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);\n-        return formatter.parseDateTime(date).toDate();\n-    }\n-\n-    /**\n-     * Check if date difference is within given days.\n-     *\n-     * @param from\n-     * @param to\n-     * @param days\n-     */\n-    public static boolean isDatesInRange(Date from, Date to, int days) {\n-        DateTime fromDate = new DateTime(from);\n-        DateTime toDate = new DateTime(to);\n-        Days d = Days.daysBetween(fromDate, toDate);\n-        return d.getDays() <= days;\n-    }\n-\n-    /**\n-     * Parse a yyyy-mm-dd string to a date.\n-     *\n-     * @param dateString in form \"yyyy-mm-dd\" or empty string or null\n-     * @return the parsed date or null.\n-     */\n-    public static DateTime parseQueryDate(String dateString) {\n-        if (Strings.isNullOrEmpty(dateString)) {\n-            return null;\n-        }\n-        return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n-                .parseDateTime(dateString);\n-    }\n+  private static final String DATE_TIME_SHORT_PATTERN = \"dd/MM/yy HH:mm\";\n+  private static final String TIME_SHORT_PATTERN = \"hh:mm:ss\";\n+  // Used for advanced editor search queries\n+  private static final String DATE_SHORT_QUERY_PATTERN = \"yyyy-MM-dd\";\n+  // Period Formatters are thread safe and immutable according to joda time\n+  // docs\n+  private static final PeriodFormatter TIME_REMAINING_FORMATTER =\n+    new PeriodFormatterBuilder().appendDays()\n+      .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n+      .appendHours().appendSuffix(\" hour\", \" hours\")\n+      .appendSeparator(\", \").appendMinutes()\n+      .appendSuffix(\" min\", \" mins\").toFormatter();\n+\n+  /**\n+   * Format date to dd/MM/yy hh:mm a\n+   *\n+   * @param date\n+   * @return\n+   */\n+  public static String formatShortDate(Date date) {\n+    if (date != null) {\n+      DateTimeFormatter fmt =\n+        DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n+      return fmt.print(new DateTime(date));\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Format date to hh:mm:ss\n+   *\n+   * @param date\n+   * @return\n+   */\n+  public static String formatTime(Date date) {\n+    if (date != null) {\n+      DateTimeFormatter fmt =\n+        DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n+      return fmt.print(new DateTime(date));\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Return readable string of time different compare between 'then' and\n+   * current time e.g 10 minutes ago, 1 hour ago\n+   *\n+   * @param then\n+   * @return\n+   */\n+  public static String getHowLongAgoDescription(Date then) {\n+    Locale locale = Locale.getDefault();\n+    PrettyTime p = new PrettyTime(locale);\n+    return p.format(then);\n+  }\n+\n+  public static String getTimeRemainingDescription(long durationInMillis) {\n+    Period period = new Period(durationInMillis);\n+    if (period.toStandardMinutes().getMinutes() <= 0) {\n+      return \"less than a minute\";\n+    } else {\n+      return TIME_REMAINING_FORMATTER.print(period.normalizedStandard());\n+    }\n+  }\n+\n+  public static long getDurationInMillisecond(Date from, Date then) {\n+    return from.getTime() - then.getTime();\n+  }\n+\n+  public static DateUnitAndFigure getUnitAndFigure(long durationInMillis) {\n+    Period period = new Period(durationInMillis);\n+    if (period.toStandardMinutes().getMinutes() <= 0) {\n+      return new DateUnitAndFigure(\"seconds\",\n+        period.toStandardSeconds().getSeconds());\n+    } else if (period.toStandardDays().getDays() <= 0) {\n+      return new DateUnitAndFigure(\"minutes\",\n+        period.toStandardMinutes().getMinutes());\n+    }\n+    return new DateUnitAndFigure(\"days\", period.toStandardDays().getDays());\n+  }\n+\n+  public static int compareDate(Date date1, Date date2) {\n+    if (date1 == null && date2 == null) {\n+      return 0;\n+    }\n+    if (date1 == null || date2 == null) {\n+      return date1 == null ? -1 : 1;\n+    }\n+    return date1.compareTo(date2);\n+  }\n+\n+  public static class DateUnitAndFigure {\n+    private String unit; // s(second) m(minute) or d(day)\n+    private int figure;\n+\n+    public String getUnit() {\n+      return this.unit;\n+    }\n+\n+    public int getFigure() {\n+      return this.figure;\n+    }\n+\n+    @java.beans.ConstructorProperties({\"unit\", \"figure\"})\n+    public DateUnitAndFigure(final String unit, final int figure) {\n+      this.unit = unit;\n+      this.figure = figure;\n+    }\n+\n+    public DateUnitAndFigure() {\n+    }\n+  }\n+\n+  /**\n+   * return start of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns\n+   * Tue Mar 25 00:00:00 EST 2014\n+   *\n+   * @param actionTime\n+   * @return\n+   */\n+  public static Date getStartOfDay(Date actionTime) {\n+    DateTime dateTime = new DateTime(actionTime);\n+    return dateTime.withTimeAtStartOfDay().toDate();\n+  }\n+\n+  /**\n+   * return end of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns Tue\n+   * Mar 25 23:59:59 EST 2014\n+   *\n+   * @param actionTime\n+   * @return\n+   */\n+  public static Date getEndOfTheDay(Date actionTime) {\n+    DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n+      .withTimeAtStartOfDay().minusMillis(1);\n+    return endOfTheDay.toDate();\n+  }\n+\n+  /**\n+   * return first day of the week date. (Monday being the first day)\n+   *\n+   * @param actionTime\n+   * @return\n+   */\n+  public static Date getStartOfWeek(Date actionTime) {\n+    DateTime truncateMonth =\n+      new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n+    return truncateMonth.toDate();\n+  }\n+\n+  /**\n+   * return last day of the week date. (Sunday being the last day)\n+   *\n+   * @param actionTime\n+   * @return\n+   */\n+  public static Date getEndOfTheWeek(Date actionTime) {\n+    DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n+      .roundCeilingCopy().minusMillis(1);\n+    return truncateMonth.toDate();\n+  }\n+\n+  /**\n+   * return first day of the month date. e.g Tue Mar 25 12:31:00 EST 2014\n+   * returns Tue Mar 1 00:00:00 EST 2014\n+   *\n+   * @param actionTime\n+   * @return\n+   */\n+  public static Date getStartOfMonth(Date actionTime) {\n+    DateTime truncateMonth =\n+      new DateTime(actionTime).monthOfYear().roundFloorCopy();\n+    return truncateMonth.toDate();\n+  }\n+\n+  /**\n+   * return last day of the month date. e.g Tue Mar 25 12:31:00 EST 2014\n+   * returns Tue Mar 31 23:59:59 EST 2014\n+   *\n+   * @param actionTime\n+   * @return\n+   */\n+  public static Date getEndOfTheMonth(Date actionTime) {\n+    DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n+      .roundCeilingCopy().minusMillis(1);\n+    return truncateMonth.toDate();\n+  }\n+\n+  /**\n+   * Convert String to {@link java.util.Date} with given pattern\n+   *\n+   * @param date\n+   * @param pattern\n+   * @throws IllegalArgumentException\n+   */\n+  public static Date getDate(String date, String pattern)\n+    throws IllegalArgumentException {\n+    DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);\n+    return formatter.parseDateTime(date).toDate();\n+  }\n+\n+  /**\n+   * Check if date difference is within given days.\n+   *\n+   * @param from\n+   * @param to\n+   * @param days\n+   */\n+  public static boolean isDatesInRange(Date from, Date to, int days) {\n+    DateTime fromDate = new DateTime(from);\n+    DateTime toDate = new DateTime(to);\n+    Days d = Days.daysBetween(fromDate, toDate);\n+    return d.getDays() <= days;\n+  }\n+\n+  /**\n+   * Parse a yyyy-mm-dd string to a date.\n+   *\n+   * @param dateString in form \"yyyy-mm-dd\" or empty string or null\n+   * @return the parsed date or null.\n+   */\n+  public static DateTime parseQueryDate(String dateString) {\n+    if (Strings.isNullOrEmpty(dateString)) {\n+      return null;\n+    }\n+    return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n+      .parseDateTime(dateString);\n+  }\n }\n",
            "diff_size": 229
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/47/DateUtil.java\nindex 601a86e8d20..16f5fa6ff09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/47/DateUtil.java\n@@ -112,7 +112,9 @@ public class DateUtil {\n     }\n \n     public static class DateUnitAndFigure {\n-        private String unit; // s(second) m(minute) or d(day)\n+        private String unit;\n+\n+// s(second) m(minute) or d(day)\n         private int figure;\n \n         public String getUnit() {\n@@ -248,4 +250,4 @@ public class DateUtil {\n         return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n                 .parseDateTime(dateString);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "109",
                    "column": "30",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/47/DateUtil.java\nindex 601a86e8d20..ff2b7b831be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/47/DateUtil.java\n@@ -18,20 +18,16 @@ import org.ocpsoft.prettytime.PrettyTime;\n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n-public class DateUtil {\n \n+\n+public class DateUtil {\n     private static final String DATE_TIME_SHORT_PATTERN = \"dd/MM/yy HH:mm\";\n     private static final String TIME_SHORT_PATTERN = \"hh:mm:ss\";\n     // Used for advanced editor search queries\n     private static final String DATE_SHORT_QUERY_PATTERN = \"yyyy-MM-dd\";\n     // Period Formatters are thread safe and immutable according to joda time\n     // docs\n-    private static final PeriodFormatter TIME_REMAINING_FORMATTER =\n-            new PeriodFormatterBuilder().appendDays()\n-                    .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n-                    .appendHours().appendSuffix(\" hour\", \" hours\")\n-                    .appendSeparator(\", \").appendMinutes()\n-                    .appendSuffix(\" min\", \" mins\").toFormatter();\n+    private static final PeriodFormatter TIME_REMAINING_FORMATTER = new PeriodFormatterBuilder().appendDays().appendSuffix(\" day\", \" days\").appendSeparator(\", \").appendHours().appendSuffix(\" hour\", \" hours\").appendSeparator(\", \").appendMinutes().appendSuffix(\" min\", \" mins\").toFormatter();\n \n     /**\n      * Format date to dd/MM/yy hh:mm a\n@@ -41,8 +37,7 @@ public class DateUtil {\n      */\n     public static String formatShortDate(Date date) {\n         if (date != null) {\n-            DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n+            DateTimeFormatter fmt = DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n             return fmt.print(new DateTime(date));\n         }\n         return null;\n@@ -54,10 +49,10 @@ public class DateUtil {\n      * @param date\n      * @return\n      */\n+\n     public static String formatTime(Date date) {\n         if (date != null) {\n-            DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n+            DateTimeFormatter fmt = DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n             return fmt.print(new DateTime(date));\n         }\n         return null;\n@@ -70,6 +65,7 @@ public class DateUtil {\n      * @param then\n      * @return\n      */\n+\n     public static String getHowLongAgoDescription(Date then) {\n         Locale locale = Locale.getDefault();\n         PrettyTime p = new PrettyTime(locale);\n@@ -92,11 +88,9 @@ public class DateUtil {\n     public static DateUnitAndFigure getUnitAndFigure(long durationInMillis) {\n         Period period = new Period(durationInMillis);\n         if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return new DateUnitAndFigure(\"seconds\",\n-                    period.toStandardSeconds().getSeconds());\n+            return new DateUnitAndFigure(\"seconds\", period.toStandardSeconds().getSeconds());\n         } else if (period.toStandardDays().getDays() <= 0) {\n-            return new DateUnitAndFigure(\"minutes\",\n-                    period.toStandardMinutes().getMinutes());\n+            return new DateUnitAndFigure(\"minutes\", period.toStandardMinutes().getMinutes());\n         }\n         return new DateUnitAndFigure(\"days\", period.toStandardDays().getDays());\n     }\n@@ -114,7 +108,6 @@ public class DateUtil {\n     public static class DateUnitAndFigure {\n         private String unit; // s(second) m(minute) or d(day)\n         private int figure;\n-\n         public String getUnit() {\n             return this.unit;\n         }\n@@ -124,7 +117,8 @@ public class DateUtil {\n         }\n \n         @java.beans.ConstructorProperties({ \"unit\", \"figure\" })\n-        public DateUnitAndFigure(final String unit, final int figure) {\n+        public DateUnitAndFigure(final String unit,\n+        final int figure) {\n             this.unit = unit;\n             this.figure = figure;\n         }\n@@ -140,6 +134,7 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getStartOfDay(Date actionTime) {\n         DateTime dateTime = new DateTime(actionTime);\n         return dateTime.withTimeAtStartOfDay().toDate();\n@@ -152,9 +147,9 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getEndOfTheDay(Date actionTime) {\n-        DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n-                .withTimeAtStartOfDay().minusMillis(1);\n+        DateTime endOfTheDay = new DateTime(actionTime).plusDays(1).withTimeAtStartOfDay().minusMillis(1);\n         return endOfTheDay.toDate();\n     }\n \n@@ -164,9 +159,9 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getStartOfWeek(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n+        DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n         return truncateMonth.toDate();\n     }\n \n@@ -176,9 +171,9 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getEndOfTheWeek(Date actionTime) {\n-        DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n-                .roundCeilingCopy().minusMillis(1);\n+        DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear().roundCeilingCopy().minusMillis(1);\n         return truncateMonth.toDate();\n     }\n \n@@ -189,9 +184,9 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getStartOfMonth(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).monthOfYear().roundFloorCopy();\n+        DateTime truncateMonth = new DateTime(actionTime).monthOfYear().roundFloorCopy();\n         return truncateMonth.toDate();\n     }\n \n@@ -202,9 +197,9 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getEndOfTheMonth(Date actionTime) {\n-        DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n-                .roundCeilingCopy().minusMillis(1);\n+        DateTime truncateMonth = new DateTime(actionTime).monthOfYear().roundCeilingCopy().minusMillis(1);\n         return truncateMonth.toDate();\n     }\n \n@@ -215,8 +210,8 @@ public class DateUtil {\n      * @param pattern\n      * @throws IllegalArgumentException\n      */\n-    public static Date getDate(String date, String pattern)\n-            throws IllegalArgumentException {\n+\n+    public static Date getDate(String date, String pattern) throws IllegalArgumentException {\n         DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);\n         return formatter.parseDateTime(date).toDate();\n     }\n@@ -228,6 +223,7 @@ public class DateUtil {\n      * @param to\n      * @param days\n      */\n+\n     public static boolean isDatesInRange(Date from, Date to, int days) {\n         DateTime fromDate = new DateTime(from);\n         DateTime toDate = new DateTime(to);\n@@ -241,11 +237,11 @@ public class DateUtil {\n      * @param dateString in form \"yyyy-mm-dd\" or empty string or null\n      * @return the parsed date or null.\n      */\n+\n     public static DateTime parseQueryDate(String dateString) {\n         if (Strings.isNullOrEmpty(dateString)) {\n             return null;\n         }\n-        return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n-                .parseDateTime(dateString);\n+        return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN).parseDateTime(dateString);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "115",
                    "column": "30",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/47/DateUtil.java\nindex 601a86e8d20..d7d2962e21d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/47/DateUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/47/DateUtil.java\n@@ -112,8 +112,9 @@ public class DateUtil {\n     }\n \n     public static class DateUnitAndFigure {\n-        private String unit; // s(second) m(minute) or d(day)\n-        private int figure;\n+        private String unit;\n+        // s(second) m(minute) or d(day)\n+         private int figure;\n \n         public String getUnit() {\n             return this.unit;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff",
        "styler_random"
    ]
}