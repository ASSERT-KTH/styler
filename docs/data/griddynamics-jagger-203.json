{
    "project_name": "griddynamics-jagger",
    "error_id": "203",
    "information": {
        "errors": [
            {
                "line": "47",
                "column": "37",
                "severity": "warning",
                "message": "WhitespaceAround: '{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n    public static String getName(String id, String testGroupName) {\n        if (StringUtils.isBlank(id)){\n            return testGroupName;\n        }\n        return String.format(\"%s [%s]\", testGroupName, id);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/203/TestGenerator.java\nindex 255c7ab7a1b..5c7b4d89052 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/203/TestGenerator.java\n@@ -44,7 +44,7 @@ class TestGenerator {\n     }\n \n     public static String getName(String id, String testGroupName) {\n-        if (StringUtils.isBlank(id)){\n+        if (StringUtils.isBlank(id)) {\n             return testGroupName;\n         }\n         return String.format(\"%s [%s]\", testGroupName, id);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/203/TestGenerator.java\nindex 255c7ab7a1b..1041449312b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/203/TestGenerator.java\n@@ -18,8 +18,8 @@ import static com.griddynamics.jagger.util.generators.WorkloadGenerator.generate\n \n /**\n  * @author asokol\n- *         created 11/6/16\n- *         Generates {@link WorkloadTask} entity from user-defined {@link JLoadTest} entity.\n+ * created 11/6/16\n+ * Generates {@link WorkloadTask} entity from user-defined {@link JLoadTest} entity.\n  */\n class TestGenerator {\n     static WorkloadTask generateFromTest(JLoadTest jLoadTest,\n@@ -29,22 +29,22 @@ class TestGenerator {\n         task.setName(getName(jLoadTest.getId(), testGroupName));\n         task.setParentTaskId(testGroupName);\n         task.setVersion(\"0\");\n-    \n+\n         List<Provider<TestListener>> testListeners = Lists.newArrayList(jLoadTest.getListeners());\n         testListeners.add(new CollectThreadsTestListener());\n         task.setTestListeners(testListeners);\n-    \n+\n         task.setTerminateStrategyConfiguration(generateTermination(jLoadTest.getTermination()));\n-    \n+\n         task.setClockConfiguration(generateLoad(jLoadTest.getLoad()));\n-        \n+\n         task.setLimits(LimitGenerator.generate(jLoadTest.getLimits(), baselineSessionProvider, limitSetConfig));\n \n         return task;\n     }\n \n     public static String getName(String id, String testGroupName) {\n-        if (StringUtils.isBlank(id)){\n+        if (StringUtils.isBlank(id)) {\n             return testGroupName;\n         }\n         return String.format(\"%s [%s]\", testGroupName, id);\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/203/TestGenerator.java\nindex 255c7ab7a1b..62c69ae1e95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/203/TestGenerator.java\n@@ -22,31 +22,26 @@ import static com.griddynamics.jagger.util.generators.WorkloadGenerator.generate\n  *         Generates {@link WorkloadTask} entity from user-defined {@link JLoadTest} entity.\n  */\n class TestGenerator {\n-    static WorkloadTask generateFromTest(JLoadTest jLoadTest,\n-                                         BaselineSessionProvider baselineSessionProvider,\n-                                         LimitSetConfig limitSetConfig, String testGroupName) {\n-        WorkloadTask task = generatePrototype(jLoadTest.getTestDescription());\n+    static WorkloadTask generateFromTest(JLoadTest jLoadTest, BaselineSessionProvider baselineSessionProvider, LimitSetConfig limitSetConfig, String testGroupName) {\n+    WorkloadTask task = generatePrototype(jLoadTest.getTestDescription());\n         task.setName(getName(jLoadTest.getId(), testGroupName));\n         task.setParentTaskId(testGroupName);\n         task.setVersion(\"0\");\n-    \n-        List<Provider<TestListener>> testListeners = Lists.newArrayList(jLoadTest.getListeners());\n+List<Provider<TestListener>> testListeners = Lists.newArrayList(jLoadTest.getListeners());\n         testListeners.add(new CollectThreadsTestListener());\n         task.setTestListeners(testListeners);\n-    \n-        task.setTerminateStrategyConfiguration(generateTermination(jLoadTest.getTermination()));\n+task.setTerminateStrategyConfiguration(generateTermination(jLoadTest.getTermination()));\n     \n         task.setClockConfiguration(generateLoad(jLoadTest.getLoad()));\n-        \n-        task.setLimits(LimitGenerator.generate(jLoadTest.getLimits(), baselineSessionProvider, limitSetConfig));\n+task.setLimits(LimitGenerator.generate(jLoadTest.getLimits(), baselineSessionProvider, limitSetConfig));\n \n         return task;\n     }\n \n     public static String getName(String id, String testGroupName) {\n-        if (StringUtils.isBlank(id)){\n+        if (StringUtils.isBlank(id)) {\n             return testGroupName;\n         }\n         return String.format(\"%s [%s]\", testGroupName, id);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/203/TestGenerator.java\nindex 255c7ab7a1b..5c7b4d89052 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/203/TestGenerator.java\n@@ -44,7 +44,7 @@ class TestGenerator {\n     }\n \n     public static String getName(String id, String testGroupName) {\n-        if (StringUtils.isBlank(id)){\n+        if (StringUtils.isBlank(id)) {\n             return testGroupName;\n         }\n         return String.format(\"%s [%s]\", testGroupName, id);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/203/TestGenerator.java\nindex 255c7ab7a1b..5c7b4d89052 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/203/TestGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/203/TestGenerator.java\n@@ -44,7 +44,7 @@ class TestGenerator {\n     }\n \n     public static String getName(String id, String testGroupName) {\n-        if (StringUtils.isBlank(id)){\n+        if (StringUtils.isBlank(id)) {\n             return testGroupName;\n         }\n         return String.format(\"%s [%s]\", testGroupName, id);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}