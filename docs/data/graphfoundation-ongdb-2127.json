{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2127",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "175",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "200",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2127/CharValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2127/CharValue.java\nindex 34b23f77011..591c9359fdb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2127/CharValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2127/CharValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.util.regex.Matcher;\n@@ -31,200 +32,197 @@ import static org.neo4j.values.virtual.VirtualValues.list;\n \n public final class CharValue extends TextValue\n {\n-    final char value;\n-\n-    CharValue( char value )\n-    {\n-        this.value = value;\n-    }\n-\n-    @Override\n-    public boolean eq( Object other )\n-    {\n-        return other != null && other instanceof Value && equals( (Value) other );\n-    }\n-\n-    @Override\n-    public boolean equals( Value other )\n-    {\n-        return other.equals( value );\n-    }\n-\n-    @Override\n-    public boolean equals( char x )\n-    {\n-        return value == x;\n-    }\n-\n-    @Override\n-    public boolean equals( String x )\n-    {\n-        return x.length() == 1 && x.charAt( 0 ) == value;\n-    }\n-\n-    @Override\n-    public int computeHash()\n-    {\n-        //The 31 is there to give it the same hash as the string equivalent\n-        return 31 + value;\n-    }\n-\n-    @Override\n-    public long updateHash( HashFunction hashFunction, long hash )\n-    {\n-        return updateHash( hashFunction, hash, value );\n-    }\n-\n-    public static long updateHash( HashFunction hashFunction, long hash, char value )\n-    {\n-        hash = hashFunction.update( hash, value );\n-        return hashFunction.update( hash, 1 ); // Pretend we're a string of length 1.\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n-    {\n-        writer.writeString( value );\n-    }\n-\n-    @Override\n-    public Object asObjectCopy()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    public String prettyPrint()\n-    {\n-        return format( \"'%s'\", value );\n-    }\n-\n-    @Override\n-    public String stringValue()\n-    {\n-        return Character.toString( value );\n-    }\n-\n-    @Override\n-    public int length()\n-    {\n-        return 1;\n-    }\n-\n-    @Override\n-    public TextValue substring( int start, int length )\n-    {\n-        if ( length != 1 && start != 0 )\n-        {\n-            return StringValue.EMTPY;\n-        }\n-\n-        return this;\n-    }\n-\n-    @Override\n-    public TextValue trim()\n-    {\n-        if ( Character.isWhitespace( value ) )\n-        {\n-            return StringValue.EMTPY;\n-        }\n-        else\n-        {\n-            return this;\n-        }\n-    }\n-\n-    @Override\n-    public TextValue ltrim()\n-    {\n-        return trim();\n-    }\n-\n-    @Override\n-    public TextValue rtrim()\n-    {\n-        return trim();\n-    }\n-\n-    @Override\n-    public TextValue toLower()\n-    {\n-        return new CharValue( Character.toLowerCase( value ) );\n-    }\n-\n-    @Override\n-    public TextValue toUpper()\n-    {\n-        return new CharValue( Character.toUpperCase( value ) );\n-    }\n-\n-    @Override\n-    public ListValue split( String separator )\n-    {\n-        if ( separator.equals( stringValue() ) )\n-        {\n-            return EMPTY_SPLIT;\n-        }\n-        else\n-        {\n-            return list( Values.stringValue( stringValue() ) );\n-        }\n-    }\n-\n-    @Override\n-    public TextValue replace( String find, String replace )\n-    {\n-        assert find != null;\n-        assert replace != null;\n-        if ( stringValue().equals( find ) )\n-        {\n-            return Values.stringValue( replace );\n-        }\n-        else\n-        {\n-            return this;\n-        }\n-    }\n-\n-    @Override\n-    public TextValue reverse()\n-    {\n-        return this;\n-    }\n-\n-    public char value()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    public int compareTo( TextValue other )\n-    {\n-        return TextValues.compareCharToString( value, other.stringValue() );\n-    }\n-\n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n-    {\n-        return mapper.mapChar( this );\n-    }\n-\n-    @Override\n-    Matcher matcher( Pattern pattern )\n-    {\n-        return pattern.matcher( \"\" + value ); // TODO: we should be able to do this without allocation\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return format( \"%s('%s')\", getTypeName(), value );\n-    }\n-\n-    @Override\n-    public String getTypeName()\n-    {\n-        return \"Char\";\n-    }\n+  final char value;\n+\n+  CharValue(char value)\n+  {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  public boolean eq(Object other)\n+  {\n+    return other != null && other instanceof Value && equals((Value) other);\n+  }\n+\n+  @Override\n+  public boolean equals(Value other)\n+  {\n+    return other.equals(value);\n+  }\n+\n+  @Override\n+  public boolean equals(char x)\n+  {\n+    return value == x;\n+  }\n+\n+  @Override\n+  public boolean equals(String x)\n+  {\n+    return x.length() == 1 && x.charAt(0) == value;\n+  }\n+\n+  @Override\n+  public int computeHash()\n+  {\n+    //The 31 is there to give it the same hash as the string equivalent\n+    return 31 + value;\n+  }\n+\n+  @Override\n+  public long updateHash(HashFunction hashFunction, long hash)\n+  {\n+    return updateHash(hashFunction, hash, value);\n+  }\n+\n+  public static long updateHash(HashFunction hashFunction, long hash, char value)\n+  {\n+    hash = hashFunction.update(hash, value);\n+    return hashFunction.update(hash, 1); // Pretend we're a string of length 1.\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeString(value);\n+  }\n+\n+  @Override\n+  public Object asObjectCopy()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    return format(\"'%s'\", value);\n+  }\n+\n+  @Override\n+  public String stringValue()\n+  {\n+    return Character.toString(value);\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return 1;\n+  }\n+\n+  @Override\n+  public TextValue substring(int start, int length)\n+  {\n+    if (length != 1 && start != 0)\n+    {\n+      return StringValue.EMTPY;\n+    }\n+\n+    return this;\n+  }\n+\n+  @Override\n+  public TextValue trim()\n+  {\n+    if (Character.isWhitespace(value))\n+    {\n+      return StringValue.EMTPY;\n+    } else\n+    {\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public TextValue ltrim()\n+  {\n+    return trim();\n+  }\n+\n+  @Override\n+  public TextValue rtrim()\n+  {\n+    return trim();\n+  }\n+\n+  @Override\n+  public TextValue toLower()\n+  {\n+    return new CharValue(Character.toLowerCase(value));\n+  }\n+\n+  @Override\n+  public TextValue toUpper()\n+  {\n+    return new CharValue(Character.toUpperCase(value));\n+  }\n+\n+  @Override\n+  public ListValue split(String separator)\n+  {\n+    if (separator.equals(stringValue()))\n+    {\n+      return EMPTY_SPLIT;\n+    } else\n+    {\n+      return list(Values.stringValue(stringValue()));\n+    }\n+  }\n+\n+  @Override\n+  public TextValue replace(String find, String replace)\n+  {\n+    assert find != null;\n+    assert replace != null;\n+    if (stringValue().equals(find))\n+    {\n+      return Values.stringValue(replace);\n+    } else\n+    {\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public TextValue reverse()\n+  {\n+    return this;\n+  }\n+\n+  public char value()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  public int compareTo(TextValue other)\n+  {\n+    return TextValues.compareCharToString(value, other.stringValue());\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapChar(this);\n+  }\n+\n+  @Override\n+  Matcher matcher(Pattern pattern)\n+  {\n+    return pattern.matcher(\"\" + value); // TODO: we should be able to do this without allocation\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"%s('%s')\", getTypeName(), value);\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"Char\";\n+  }\n }\n",
            "diff_size": 197
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2127/CharValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2127/CharValue.java\nindex 34b23f77011..ba517a7d109 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2127/CharValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2127/CharValue.java\n@@ -227,4 +227,4 @@ public final class CharValue extends TextValue\n     {\n         return \"Char\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}