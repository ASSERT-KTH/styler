{
    "project_name": "IQSS-dataverse",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "206",
                "column": "3",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        String doi = \"10.5072/DVN/274533\";\n        DataCiteRESTfullClient client = new DataCiteRESTfullClient(\"https://mds.test.datacite.org\", \"DATACITE_TEST_USERNAME\", \"DATACITE_TEST_PASSWORD\");\n//\t\tSystem.out.println(client.getUrl(doi));\n//\t\tSystem.out.println(client.getMetadata(doi));\n//        System.out.println(client.postMetadata(readAndClose(\"C:/Users/luopc/Desktop/datacite.xml\", \"utf-8\")));\n//        System.out.println(client.postUrl(\"10.5072/000000001\", \"http://opendata.pku.edu.cn/dvn/dv/DAIM/faces/study/StudyPage.xhtml?globalId=hdl:TEST/10027&studyListingIndex=1_1acc4e9f23fa10b3cc0500d9eb5e\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "206",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/41/DataCiteRESTfullClient.java\nindex 491f19ab36c..ac0e4c89c7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/41/DataCiteRESTfullClient.java\n@@ -203,7 +203,7 @@ public class DataCiteRESTfullClient implements Closeable {\n     public static void main(String[] args) throws Exception {\n         String doi = \"10.5072/DVN/274533\";\n         DataCiteRESTfullClient client = new DataCiteRESTfullClient(\"https://mds.test.datacite.org\", \"DATACITE_TEST_USERNAME\", \"DATACITE_TEST_PASSWORD\");\n-//\t\tSystem.out.println(client.getUrl(doi));\n+        //\t\tSystem.out.println(client.getUrl(doi));//\t\tSystem.out.println(client.getMetadata(doi));\n //\t\tSystem.out.println(client.getMetadata(doi));\n //        System.out.println(client.postMetadata(readAndClose(\"C:/Users/luopc/Desktop/datacite.xml\", \"utf-8\")));\n //        System.out.println(client.postUrl(\"10.5072/000000001\", \"http://opendata.pku.edu.cn/dvn/dv/DAIM/faces/study/StudyPage.xhtml?globalId=hdl:TEST/10027&studyListingIndex=1_1acc4e9f23fa10b3cc0500d9eb5e\"));\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "206",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/41/DataCiteRESTfullClient.java\nindex 491f19ab36c..aeddc6f4e7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/41/DataCiteRESTfullClient.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse;\n \n \n@@ -27,182 +28,181 @@ import org.apache.http.impl.client.CloseableHttpClient;\n import org.apache.http.impl.client.HttpClients;\n \n \n-\n import org.apache.http.util.EntityUtils;\n \n /**\n  * DataCiteRESTfullClient\n  *\n  * @author luopc\n- *\n  */\n public class DataCiteRESTfullClient implements Closeable {\n-    \n-    private static final Logger logger = Logger.getLogger(DataCiteRESTfullClient.class.getCanonicalName());\n-\n-    private String url;\n-    private CloseableHttpClient httpClient;\n-    private HttpClientContext context;\n-    private String encoding = \"utf-8\";\n-    \n-    public DataCiteRESTfullClient(String url, String username, String password) throws IOException {\n-        this.url = url;\n-        try {\n-            context = HttpClientContext.create();\n-            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n-            credsProvider.setCredentials(new AuthScope(null, -1),\n-                    new UsernamePasswordCredentials(username, password));\n-            context.setCredentialsProvider(credsProvider);\n-            \n-            httpClient = HttpClients.createDefault();\n-        } catch (Exception ioe) {\n-            close();\n-            logger.log(Level.SEVERE,\"Fail to init Client\",ioe);\n-            throw new RuntimeException(\"Fail to init Client\", ioe);\n-        }\n-    }\n \n-    public void close() {\n-        if (this.httpClient != null) {\n-            try {\n-           httpClient.close();\n-            } catch (IOException io) {\n-               logger.warning(\"IOException closing hhtpClient: \" + io.getMessage());\n-           }\n-        }\n+  private static final Logger logger = Logger.getLogger(DataCiteRESTfullClient.class.getCanonicalName());\n+\n+  private String url;\n+  private CloseableHttpClient httpClient;\n+  private HttpClientContext context;\n+  private String encoding = \"utf-8\";\n+\n+  public DataCiteRESTfullClient(String url, String username, String password) throws IOException {\n+    this.url = url;\n+    try {\n+      context = HttpClientContext.create();\n+      CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+      credsProvider.setCredentials(new AuthScope(null, -1),\n+        new UsernamePasswordCredentials(username, password));\n+      context.setCredentialsProvider(credsProvider);\n+\n+      httpClient = HttpClients.createDefault();\n+    } catch (Exception ioe) {\n+      close();\n+      logger.log(Level.SEVERE, \"Fail to init Client\", ioe);\n+      throw new RuntimeException(\"Fail to init Client\", ioe);\n     }\n-\n-    /**\n-     * getUrl\n-     *\n-     * @param doi\n-     * @return\n-     */\n-    public String getUrl(String doi) {\n-        HttpGet httpGet = new HttpGet(this.url + \"/doi/\" + doi);\n-        try {\n-            HttpResponse response = httpClient.execute(httpGet,context);\n-            String data = EntityUtils.toString(response.getEntity(), encoding);\n-            if (response.getStatusLine().getStatusCode() != 200) {\n-                throw new RuntimeException(\"Response code: \" + response.getStatusLine().getStatusCode() + \", \" + data);\n-            }\n-            return data;\n-        } catch (IOException ioe) {\n-            logger.log(Level.SEVERE,\"IOException when get url\",ioe);\n-            throw new RuntimeException(\"IOException when get url\", ioe);\n-        }\n+  }\n+\n+  public void close() {\n+    if (this.httpClient != null) {\n+      try {\n+        httpClient.close();\n+      } catch (IOException io) {\n+        logger.warning(\"IOException closing hhtpClient: \" + io.getMessage());\n+      }\n     }\n-\n-    /**\n-     * postUrl\n-     *\n-     * @param doi\n-     * @param url\n-     * @return\n-     */\n-    public String postUrl(String doi, String url) throws IOException {\n-        HttpPost httpPost = new HttpPost(this.url + \"/doi\");\n-        httpPost.setHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n-        httpPost.setEntity(new StringEntity(\"doi=\" + doi + \"\\nurl=\" + url, \"utf-8\"));\n-\n-        HttpResponse response = httpClient.execute(httpPost, context);\n-        String data = EntityUtils.toString(response.getEntity(), encoding);\n-        if (response.getStatusLine().getStatusCode() != 201) {\n-            String errMsg = \"Response from postUrl: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n-            logger.log(Level.SEVERE, errMsg);\n-            throw new IOException(errMsg);\n-        }\n-        return data;\n+  }\n+\n+  /**\n+   * getUrl\n+   *\n+   * @param doi\n+   * @return\n+   */\n+  public String getUrl(String doi) {\n+    HttpGet httpGet = new HttpGet(this.url + \"/doi/\" + doi);\n+    try {\n+      HttpResponse response = httpClient.execute(httpGet, context);\n+      String data = EntityUtils.toString(response.getEntity(), encoding);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        throw new RuntimeException(\"Response code: \" + response.getStatusLine().getStatusCode() + \", \" + data);\n+      }\n+      return data;\n+    } catch (IOException ioe) {\n+      logger.log(Level.SEVERE, \"IOException when get url\", ioe);\n+      throw new RuntimeException(\"IOException when get url\", ioe);\n     }\n-\n-    /**\n-     * getMetadata\n-     *\n-     * @param doi\n-     * @return\n-     */\n-    public String getMetadata(String doi) {\n-        HttpGet httpGet = new HttpGet(this.url + \"/metadata/\" + doi);\n-        httpGet.setHeader(\"Accept\", \"application/xml\");\n-        try {\n-            HttpResponse response = httpClient.execute(httpGet,context);\n-            String data = EntityUtils.toString(response.getEntity(), encoding);\n-            if (response.getStatusLine().getStatusCode() != 200) {\n-                String errMsg = \"Response from getMetadata: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n-                logger.log(Level.SEVERE, errMsg);\n-                throw new RuntimeException(errMsg);\n-            }\n-            return data;\n-        } catch (IOException ioe) {\n-            logger.log(Level.SEVERE, \"IOException when get metadata\");\n-            throw new RuntimeException(\"IOException when get metadata\", ioe);\n-        }\n+  }\n+\n+  /**\n+   * postUrl\n+   *\n+   * @param doi\n+   * @param url\n+   * @return\n+   */\n+  public String postUrl(String doi, String url) throws IOException {\n+    HttpPost httpPost = new HttpPost(this.url + \"/doi\");\n+    httpPost.setHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n+    httpPost.setEntity(new StringEntity(\"doi=\" + doi + \"\\nurl=\" + url, \"utf-8\"));\n+\n+    HttpResponse response = httpClient.execute(httpPost, context);\n+    String data = EntityUtils.toString(response.getEntity(), encoding);\n+    if (response.getStatusLine().getStatusCode() != 201) {\n+      String errMsg = \"Response from postUrl: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n+      logger.log(Level.SEVERE, errMsg);\n+      throw new IOException(errMsg);\n     }\n-    \n-    /**\n-     * testDOIExists\n-     *\n-     * @param doi\n-     * @return boolean true if identifier already exists on DataCite site\n-     */\n-    public boolean testDOIExists(String doi) throws IOException {\n-        HttpGet httpGet = new HttpGet(this.url + \"/metadata/\" + doi);\n-        httpGet.setHeader(\"Accept\", \"application/xml\");\n-        HttpResponse response = httpClient.execute(httpGet, context);\n-        if (response.getStatusLine().getStatusCode() != 200) {\n-            EntityUtils.consumeQuietly(response.getEntity());\n-            return false;\n-        }\n-        EntityUtils.consumeQuietly(response.getEntity());\n-        return true;\n+    return data;\n+  }\n+\n+  /**\n+   * getMetadata\n+   *\n+   * @param doi\n+   * @return\n+   */\n+  public String getMetadata(String doi) {\n+    HttpGet httpGet = new HttpGet(this.url + \"/metadata/\" + doi);\n+    httpGet.setHeader(\"Accept\", \"application/xml\");\n+    try {\n+      HttpResponse response = httpClient.execute(httpGet, context);\n+      String data = EntityUtils.toString(response.getEntity(), encoding);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        String errMsg = \"Response from getMetadata: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n+        logger.log(Level.SEVERE, errMsg);\n+        throw new RuntimeException(errMsg);\n+      }\n+      return data;\n+    } catch (IOException ioe) {\n+      logger.log(Level.SEVERE, \"IOException when get metadata\");\n+      throw new RuntimeException(\"IOException when get metadata\", ioe);\n     }\n-\n-    /**\n-     * postMetadata\n-     *\n-     * @param metadata\n-     * @return\n-     */\n-    public String postMetadata(String metadata) throws IOException {\n-        HttpPost httpPost = new HttpPost(this.url + \"/metadata\");\n-        httpPost.setHeader(\"Content-Type\", \"application/xml;charset=UTF-8\");\n-        httpPost.setEntity(new StringEntity(metadata, \"utf-8\"));\n-        HttpResponse response = httpClient.execute(httpPost, context);\n-        String data = EntityUtils.toString(response.getEntity(), encoding);\n-        if (response.getStatusLine().getStatusCode() != 201) {\n-            String errMsg = \"Response from postMetadata: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n-            logger.log(Level.SEVERE, errMsg);\n-            throw new IOException(errMsg);\n-        }\n-        return data;\n+  }\n+\n+  /**\n+   * testDOIExists\n+   *\n+   * @param doi\n+   * @return boolean true if identifier already exists on DataCite site\n+   */\n+  public boolean testDOIExists(String doi) throws IOException {\n+    HttpGet httpGet = new HttpGet(this.url + \"/metadata/\" + doi);\n+    httpGet.setHeader(\"Accept\", \"application/xml\");\n+    HttpResponse response = httpClient.execute(httpGet, context);\n+    if (response.getStatusLine().getStatusCode() != 200) {\n+      EntityUtils.consumeQuietly(response.getEntity());\n+      return false;\n     }\n-\n-    /**\n-     * inactiveDataset\n-     *\n-     * @param doi\n-     * @return\n-     */\n-    public String inactiveDataset(String doi) {\n-        HttpDelete httpDelete = new HttpDelete(this.url + \"/metadata/\" + doi);\n-        try {\n-            HttpResponse response = httpClient.execute(httpDelete,context);\n-            String data = EntityUtils.toString(response.getEntity(), encoding);\n-            if (response.getStatusLine().getStatusCode() != 200) {\n-                String errMsg = \"Response code: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n-                logger.log(Level.SEVERE, errMsg);\n-                throw new RuntimeException(errMsg);\n-            }\n-            return data;\n-        } catch (IOException ioe) {\n-            logger.log(Level.SEVERE, \"IOException when inactive dataset\");\n-            throw new RuntimeException(\"IOException when inactive dataset\", ioe);\n-        }\n+    EntityUtils.consumeQuietly(response.getEntity());\n+    return true;\n+  }\n+\n+  /**\n+   * postMetadata\n+   *\n+   * @param metadata\n+   * @return\n+   */\n+  public String postMetadata(String metadata) throws IOException {\n+    HttpPost httpPost = new HttpPost(this.url + \"/metadata\");\n+    httpPost.setHeader(\"Content-Type\", \"application/xml;charset=UTF-8\");\n+    httpPost.setEntity(new StringEntity(metadata, \"utf-8\"));\n+    HttpResponse response = httpClient.execute(httpPost, context);\n+    String data = EntityUtils.toString(response.getEntity(), encoding);\n+    if (response.getStatusLine().getStatusCode() != 201) {\n+      String errMsg = \"Response from postMetadata: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n+      logger.log(Level.SEVERE, errMsg);\n+      throw new IOException(errMsg);\n     }\n+    return data;\n+  }\n+\n+  /**\n+   * inactiveDataset\n+   *\n+   * @param doi\n+   * @return\n+   */\n+  public String inactiveDataset(String doi) {\n+    HttpDelete httpDelete = new HttpDelete(this.url + \"/metadata/\" + doi);\n+    try {\n+      HttpResponse response = httpClient.execute(httpDelete, context);\n+      String data = EntityUtils.toString(response.getEntity(), encoding);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        String errMsg = \"Response code: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n+        logger.log(Level.SEVERE, errMsg);\n+        throw new RuntimeException(errMsg);\n+      }\n+      return data;\n+    } catch (IOException ioe) {\n+      logger.log(Level.SEVERE, \"IOException when inactive dataset\");\n+      throw new RuntimeException(\"IOException when inactive dataset\", ioe);\n+    }\n+  }\n \n-    public static void main(String[] args) throws Exception {\n-        String doi = \"10.5072/DVN/274533\";\n-        DataCiteRESTfullClient client = new DataCiteRESTfullClient(\"https://mds.test.datacite.org\", \"DATACITE_TEST_USERNAME\", \"DATACITE_TEST_PASSWORD\");\n+  public static void main(String[] args) throws Exception {\n+    String doi = \"10.5072/DVN/274533\";\n+    DataCiteRESTfullClient client =\n+      new DataCiteRESTfullClient(\"https://mds.test.datacite.org\", \"DATACITE_TEST_USERNAME\", \"DATACITE_TEST_PASSWORD\");\n //\t\tSystem.out.println(client.getUrl(doi));\n //\t\tSystem.out.println(client.getMetadata(doi));\n //        System.out.println(client.postMetadata(readAndClose(\"C:/Users/luopc/Desktop/datacite.xml\", \"utf-8\")));\n@@ -219,9 +219,9 @@ public class DataCiteRESTfullClient implements Closeable {\n //\t\tSystem.out.println(client2.getMetadata(\"10.1/1.0007\"));\n //\t\tSystem.out.println(client2.inactiveDataSet(\"10.1/1.0007\"));\n //\t\tclient2.close();\n-}\n+  }\n+\n \n-    \n //    private static String readAndClose(String file, String encoding) throws IOException{\n //        BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(file),encoding));\n //        StringBuilder str = new StringBuilder();\n",
            "diff_size": 209
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/41/DataCiteRESTfullClient.java\nindex 491f19ab36c..39183c39625 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/41/DataCiteRESTfullClient.java\n@@ -5,18 +5,14 @@\n  */\n package edu.harvard.iq.dataverse;\n \n-\n import java.io.Closeable;\n import java.io.IOException;\n-\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-\n import org.apache.http.HttpResponse;\n import org.apache.http.auth.AuthScope;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.client.CredentialsProvider;\n-\n import org.apache.http.client.methods.HttpDelete;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.client.methods.HttpPost;\n@@ -25,9 +21,6 @@ import org.apache.http.entity.StringEntity;\n import org.apache.http.impl.client.BasicCredentialsProvider;\n import org.apache.http.impl.client.CloseableHttpClient;\n import org.apache.http.impl.client.HttpClients;\n-\n-\n-\n import org.apache.http.util.EntityUtils;\n \n /**\n@@ -36,28 +29,27 @@ import org.apache.http.util.EntityUtils;\n  * @author luopc\n  *\n  */\n+\n+\n public class DataCiteRESTfullClient implements Closeable {\n-    \n-    private static final Logger logger = Logger.getLogger(DataCiteRESTfullClient.class.getCanonicalName());\n \n+    private static final Logger logger = Logger.getLogger(DataCiteRESTfullClient.class.getCanonicalName());\n     private String url;\n     private CloseableHttpClient httpClient;\n     private HttpClientContext context;\n     private String encoding = \"utf-8\";\n-    \n+\n     public DataCiteRESTfullClient(String url, String username, String password) throws IOException {\n         this.url = url;\n         try {\n             context = HttpClientContext.create();\n             CredentialsProvider credsProvider = new BasicCredentialsProvider();\n-            credsProvider.setCredentials(new AuthScope(null, -1),\n-                    new UsernamePasswordCredentials(username, password));\n+            credsProvider.setCredentials(new AuthScope(null, -1), new UsernamePasswordCredentials(username, password));\n             context.setCredentialsProvider(credsProvider);\n-            \n             httpClient = HttpClients.createDefault();\n         } catch (Exception ioe) {\n             close();\n-            logger.log(Level.SEVERE,\"Fail to init Client\",ioe);\n+            logger.log(Level.SEVERE, \"Fail to init Client\", ioe);\n             throw new RuntimeException(\"Fail to init Client\", ioe);\n         }\n     }\n@@ -65,10 +57,10 @@ public class DataCiteRESTfullClient implements Closeable {\n     public void close() {\n         if (this.httpClient != null) {\n             try {\n-           httpClient.close();\n+                httpClient.close();\n             } catch (IOException io) {\n-               logger.warning(\"IOException closing hhtpClient: \" + io.getMessage());\n-           }\n+                logger.warning(\"IOException closing hhtpClient: \" + io.getMessage());\n+            }\n         }\n     }\n \n@@ -78,17 +70,18 @@ public class DataCiteRESTfullClient implements Closeable {\n      * @param doi\n      * @return\n      */\n+\n     public String getUrl(String doi) {\n         HttpGet httpGet = new HttpGet(this.url + \"/doi/\" + doi);\n         try {\n-            HttpResponse response = httpClient.execute(httpGet,context);\n+            HttpResponse response = httpClient.execute(httpGet, context);\n             String data = EntityUtils.toString(response.getEntity(), encoding);\n             if (response.getStatusLine().getStatusCode() != 200) {\n                 throw new RuntimeException(\"Response code: \" + response.getStatusLine().getStatusCode() + \", \" + data);\n             }\n             return data;\n         } catch (IOException ioe) {\n-            logger.log(Level.SEVERE,\"IOException when get url\",ioe);\n+            logger.log(Level.SEVERE, \"IOException when get url\", ioe);\n             throw new RuntimeException(\"IOException when get url\", ioe);\n         }\n     }\n@@ -100,11 +93,11 @@ public class DataCiteRESTfullClient implements Closeable {\n      * @param url\n      * @return\n      */\n+\n     public String postUrl(String doi, String url) throws IOException {\n         HttpPost httpPost = new HttpPost(this.url + \"/doi\");\n         httpPost.setHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n         httpPost.setEntity(new StringEntity(\"doi=\" + doi + \"\\nurl=\" + url, \"utf-8\"));\n-\n         HttpResponse response = httpClient.execute(httpPost, context);\n         String data = EntityUtils.toString(response.getEntity(), encoding);\n         if (response.getStatusLine().getStatusCode() != 201) {\n@@ -121,11 +114,12 @@ public class DataCiteRESTfullClient implements Closeable {\n      * @param doi\n      * @return\n      */\n+\n     public String getMetadata(String doi) {\n         HttpGet httpGet = new HttpGet(this.url + \"/metadata/\" + doi);\n         httpGet.setHeader(\"Accept\", \"application/xml\");\n         try {\n-            HttpResponse response = httpClient.execute(httpGet,context);\n+            HttpResponse response = httpClient.execute(httpGet, context);\n             String data = EntityUtils.toString(response.getEntity(), encoding);\n             if (response.getStatusLine().getStatusCode() != 200) {\n                 String errMsg = \"Response from getMetadata: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n@@ -145,6 +139,7 @@ public class DataCiteRESTfullClient implements Closeable {\n      * @param doi\n      * @return boolean true if identifier already exists on DataCite site\n      */\n+\n     public boolean testDOIExists(String doi) throws IOException {\n         HttpGet httpGet = new HttpGet(this.url + \"/metadata/\" + doi);\n         httpGet.setHeader(\"Accept\", \"application/xml\");\n@@ -163,6 +158,7 @@ public class DataCiteRESTfullClient implements Closeable {\n      * @param metadata\n      * @return\n      */\n+\n     public String postMetadata(String metadata) throws IOException {\n         HttpPost httpPost = new HttpPost(this.url + \"/metadata\");\n         httpPost.setHeader(\"Content-Type\", \"application/xml;charset=UTF-8\");\n@@ -183,10 +179,11 @@ public class DataCiteRESTfullClient implements Closeable {\n      * @param doi\n      * @return\n      */\n+\n     public String inactiveDataset(String doi) {\n         HttpDelete httpDelete = new HttpDelete(this.url + \"/metadata/\" + doi);\n         try {\n-            HttpResponse response = httpClient.execute(httpDelete,context);\n+            HttpResponse response = httpClient.execute(httpDelete, context);\n             String data = EntityUtils.toString(response.getEntity(), encoding);\n             if (response.getStatusLine().getStatusCode() != 200) {\n                 String errMsg = \"Response code: \" + response.getStatusLine().getStatusCode() + \", \" + data;\n@@ -203,23 +200,23 @@ public class DataCiteRESTfullClient implements Closeable {\n     public static void main(String[] args) throws Exception {\n         String doi = \"10.5072/DVN/274533\";\n         DataCiteRESTfullClient client = new DataCiteRESTfullClient(\"https://mds.test.datacite.org\", \"DATACITE_TEST_USERNAME\", \"DATACITE_TEST_PASSWORD\");\n-//\t\tSystem.out.println(client.getUrl(doi));\n-//\t\tSystem.out.println(client.getMetadata(doi));\n+//      System.out.println(client.getUrl(doi));\n+//      System.out.println(client.getMetadata(doi));\n //        System.out.println(client.postMetadata(readAndClose(\"C:/Users/luopc/Desktop/datacite.xml\", \"utf-8\")));\n //        System.out.println(client.postUrl(\"10.5072/000000001\", \"http://opendata.pku.edu.cn/dvn/dv/DAIM/faces/study/StudyPage.xhtml?globalId=hdl:TEST/10027&studyListingIndex=1_1acc4e9f23fa10b3cc0500d9eb5e\"));\n //        client.close();\n-//\t\tString doi2 = \"10.1/1.0003\";\n-//\t\tSimpleRESTfullClient client2 = new SimpleRESTfullClient(\"https://162.105.140.119:8443/mds\", \"PKULIB.IR\", \"luopengcheng\",\"localhost.keystore\");\n-//\t\tSystem.out.println(client2.getUrl(\"10.1/1.0002\"));\n-//\t\tSystem.out.println(client2.getUrl(\"10.1/1.0002\"));\n-//\t\tSystem.out.println(client2.getMetadata(doi2));\n-//\t\tclient2.postUrl(\"10.1/1.0003\", \"http://ir.pku.edu.cn\");\n-//\t\tSystem.out.println(client2.postUrl(\"10.1/1.0008\", \"http://ir.pku.edu.cn\"));\n-//\t\tSystem.out.println(client2.postMetadata(FileUtil.loadAsString(new File(\"C:/Users/luopc/Desktop/test/datacite-example-ResourceTypeGeneral_Collection-v3.0.xml\"), \"utf-8\")));\n-//\t\tSystem.out.println(client2.getMetadata(\"10.1/1.0007\"));\n-//\t\tSystem.out.println(client2.inactiveDataSet(\"10.1/1.0007\"));\n-//\t\tclient2.close();\n-}\n+//      String doi2 = \"10.1/1.0003\";\n+//      SimpleRESTfullClient client2 = new SimpleRESTfullClient(\"https://162.105.140.119:8443/mds\", \"PKULIB.IR\", \"luopengcheng\",\"localhost.keystore\");\n+//      System.out.println(client2.getUrl(\"10.1/1.0002\"));\n+//      System.out.println(client2.getUrl(\"10.1/1.0002\"));\n+//      System.out.println(client2.getMetadata(doi2));\n+//      client2.postUrl(\"10.1/1.0003\", \"http://ir.pku.edu.cn\");\n+//      System.out.println(client2.postUrl(\"10.1/1.0008\", \"http://ir.pku.edu.cn\"));\n+//      System.out.println(client2.postMetadata(FileUtil.loadAsString(new File(\"C:/Users/luopc/Desktop/test/datacite-example-ResourceTypeGeneral_Collection-v3.0.xml\"), \"utf-8\")));\n+//      System.out.println(client2.getMetadata(\"10.1/1.0007\"));\n+//      System.out.println(client2.inactiveDataSet(\"10.1/1.0007\"));\n+//      client2.close();\n+    }\n \n     \n //    private static String readAndClose(String file, String encoding) throws IOException{\n@@ -233,4 +230,4 @@ public class DataCiteRESTfullClient implements Closeable {\n //        return str.toString();\n //    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "206",
                    "column": "11",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/41/DataCiteRESTfullClient.java\nindex 491f19ab36c..ac0e4c89c7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/41/DataCiteRESTfullClient.java\n@@ -203,7 +203,7 @@ public class DataCiteRESTfullClient implements Closeable {\n     public static void main(String[] args) throws Exception {\n         String doi = \"10.5072/DVN/274533\";\n         DataCiteRESTfullClient client = new DataCiteRESTfullClient(\"https://mds.test.datacite.org\", \"DATACITE_TEST_USERNAME\", \"DATACITE_TEST_PASSWORD\");\n-//\t\tSystem.out.println(client.getUrl(doi));\n+        //\t\tSystem.out.println(client.getUrl(doi));//\t\tSystem.out.println(client.getMetadata(doi));\n //\t\tSystem.out.println(client.getMetadata(doi));\n //        System.out.println(client.postMetadata(readAndClose(\"C:/Users/luopc/Desktop/datacite.xml\", \"utf-8\")));\n //        System.out.println(client.postUrl(\"10.5072/000000001\", \"http://opendata.pku.edu.cn/dvn/dv/DAIM/faces/study/StudyPage.xhtml?globalId=hdl:TEST/10027&studyListingIndex=1_1acc4e9f23fa10b3cc0500d9eb5e\"));\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "207",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/41/DataCiteRESTfullClient.java\nindex 491f19ab36c..a94bdb50d74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/41/DataCiteRESTfullClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/41/DataCiteRESTfullClient.java\n@@ -203,6 +203,7 @@ public class DataCiteRESTfullClient implements Closeable {\n     public static void main(String[] args) throws Exception {\n         String doi = \"10.5072/DVN/274533\";\n         DataCiteRESTfullClient client = new DataCiteRESTfullClient(\"https://mds.test.datacite.org\", \"DATACITE_TEST_USERNAME\", \"DATACITE_TEST_PASSWORD\");\n+\n //\t\tSystem.out.println(client.getUrl(doi));\n //\t\tSystem.out.println(client.getMetadata(doi));\n //        System.out.println(client.postMetadata(readAndClose(\"C:/Users/luopc/Desktop/datacite.xml\", \"utf-8\")));\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}