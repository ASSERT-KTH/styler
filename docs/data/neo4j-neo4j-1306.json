{
    "project_name": "neo4j-neo4j",
    "error_id": "1306",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1306/OffHeapMemoryAllocator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1306/OffHeapMemoryAllocator.java\nindex 129520d6b21..4de4ea58a9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1306/OffHeapMemoryAllocator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1306/OffHeapMemoryAllocator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.collection;\n \n import java.nio.ByteBuffer;\n@@ -37,47 +38,47 @@ public class OffHeapMemoryAllocator implements MemoryAllocator\n {\n     private final OffHeapBlockAllocator blockAllocator;\n \n-    public OffHeapMemoryAllocator( OffHeapBlockAllocator blockAllocator )\n+    public OffHeapMemoryAllocator(OffHeapBlockAllocator blockAllocator)\n     {\n-        this.blockAllocator = requireNonNull( blockAllocator );\n+        this.blockAllocator = requireNonNull(blockAllocator);\n     }\n \n     @Override\n-    public Memory allocate( long size, boolean zeroed, MemoryTracker memoryTracker )\n+    public Memory allocate(long size, boolean zeroed, MemoryTracker memoryTracker)\n     {\n-        final MemoryBlock block = blockAllocator.allocate( size, memoryTracker );\n-        if ( zeroed )\n+        final MemoryBlock block = blockAllocator.allocate(size, memoryTracker);\n+        if (zeroed)\n         {\n-            setMemory( block.addr, block.size, (byte) 0 );\n+            setMemory(block.addr, block.size, (byte) 0);\n         }\n-        return new OffHeapMemory( block );\n+        return new OffHeapMemory(block);\n     }\n \n     class OffHeapMemory implements Memory\n     {\n         final MemoryBlock block;\n \n-        OffHeapMemory( MemoryBlock block )\n+        OffHeapMemory(MemoryBlock block)\n         {\n             this.block = block;\n         }\n \n         @Override\n-        public long readLong( long offset )\n+        public long readLong(long offset)\n         {\n-            return getLong( block.addr + offset );\n+            return getLong(block.addr + offset);\n         }\n \n         @Override\n-        public void writeLong( long offset, long value )\n+        public void writeLong(long offset, long value)\n         {\n-            putLong( block.addr + offset, value );\n+            putLong(block.addr + offset, value);\n         }\n \n         @Override\n         public void clear()\n         {\n-            setMemory( block.addr, block.size, (byte) 0 );\n+            setMemory(block.addr, block.size, (byte) 0);\n         }\n \n         @Override\n@@ -87,30 +88,29 @@ public class OffHeapMemoryAllocator implements MemoryAllocator\n         }\n \n         @Override\n-        public void free( MemoryTracker memoryTracker )\n+        public void free(MemoryTracker memoryTracker)\n         {\n-            blockAllocator.free( block, memoryTracker );\n+            blockAllocator.free(block, memoryTracker);\n         }\n \n         @Override\n-        public Memory copy( MemoryTracker memoryTracker )\n+        public Memory copy(MemoryTracker memoryTracker)\n         {\n-            final MemoryBlock copy = blockAllocator.allocate( block.size, memoryTracker );\n-            copyMemory( block.addr, copy.addr, block.size );\n-            return new OffHeapMemory( copy );\n+            final MemoryBlock copy = blockAllocator.allocate(block.size, memoryTracker);\n+            copyMemory(block.addr, copy.addr, block.size);\n+            return new OffHeapMemory(copy);\n         }\n \n         @Override\n         public ByteBuffer asByteBuffer()\n         {\n-            checkState( block.size <= Integer.MAX_VALUE, \"Can't create ByteBuffer: memory size exceeds integer limit\" );\n+            checkState(block.size <= Integer.MAX_VALUE, \"Can't create ByteBuffer: memory size exceeds integer limit\");\n             try\n             {\n-                return newDirectByteBuffer( block.addr, toIntExact( block.size ) );\n-            }\n-            catch ( Exception e )\n+                return newDirectByteBuffer(block.addr, toIntExact(block.size));\n+            } catch (Exception e)\n             {\n-                throw new RuntimeException( e );\n+                throw new RuntimeException(e);\n             }\n         }\n     }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}