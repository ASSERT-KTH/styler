{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "85",
    "information": {
        "errors": [
            {
                "line": "252",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @SuppressWarnings(\"unchecked\")\n    private\n    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n    getInternal(TransactionQueryForm form) {\n\n        SelectQuery selectQuery = ctx.selectQuery();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/85/TransactionRepositoryImpl.java\nindex b26588c8e91..120684c29b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/85/TransactionRepositoryImpl.java\n@@ -249,8 +249,9 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n      */\n     @SuppressWarnings(\"unchecked\")\n     private\n-    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n-    getInternal(TransactionQueryForm form) {\n+    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n+    String, String, Integer, Integer>>\n+     getInternal(TransactionQueryForm form) {\n \n         SelectQuery selectQuery = ctx.selectQuery();\n         selectQuery.addFrom(TRANSACTION);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/85/TransactionRepositoryImpl.java\nindex b26588c8e91..b19e3e3ad4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/85/TransactionRepositoryImpl.java\n@@ -37,324 +37,322 @@ import static jooq.steve.db.tables.Transaction.TRANSACTION;\n @Repository\n public class TransactionRepositoryImpl implements TransactionRepository {\n \n-    private final DSLContext ctx;\n+  private final DSLContext ctx;\n+\n+  @Autowired\n+  public TransactionRepositoryImpl(DSLContext ctx) {\n+    this.ctx = ctx;\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public List<Transaction> getTransactions(TransactionQueryForm form) {\n+    return getInternal(form).fetch()\n+      .map(new TransactionMapper());\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public void writeTransactionsCSV(TransactionQueryForm form, Writer writer) {\n+    getInternalCSV(form).fetch()\n+      .formatCSV(writer);\n+  }\n+\n+  @Override\n+  public List<Integer> getActiveTransactionIds(String chargeBoxId) {\n+    return ctx.select(TRANSACTION.TRANSACTION_PK)\n+      .from(TRANSACTION)\n+      .join(CONNECTOR)\n+      .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n+      .and(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n+      .where(TRANSACTION.STOP_TIMESTAMP.isNull())\n+      .fetch(TRANSACTION.TRANSACTION_PK);\n+  }\n+\n+  @Override\n+  public TransactionDetails getDetails(int transactionPk) {\n \n-    @Autowired\n-    public TransactionRepositoryImpl(DSLContext ctx) {\n-        this.ctx = ctx;\n-    }\n+    // -------------------------------------------------------------------------\n+    // Step 1: Collect general data about transaction\n+    // -------------------------------------------------------------------------\n \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public List<Transaction> getTransactions(TransactionQueryForm form) {\n-        return getInternal(form).fetch()\n-                                .map(new TransactionMapper());\n-    }\n+    TransactionQueryForm form = new TransactionQueryForm();\n+    form.setTransactionPk(transactionPk);\n+    form.setType(TransactionQueryForm.QueryType.ALL);\n+    form.setPeriodType(TransactionQueryForm.QueryPeriodType.ALL);\n \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public void writeTransactionsCSV(TransactionQueryForm form, Writer writer) {\n-        getInternalCSV(form).fetch()\n-                            .formatCSV(writer);\n-    }\n+    Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>\n+      transaction = getInternal(form).fetchOne();\n \n-    @Override\n-    public List<Integer> getActiveTransactionIds(String chargeBoxId) {\n-        return ctx.select(TRANSACTION.TRANSACTION_PK)\n-                  .from(TRANSACTION)\n-                  .join(CONNECTOR)\n-                    .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n-                    .and(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n-                  .where(TRANSACTION.STOP_TIMESTAMP.isNull())\n-                  .fetch(TRANSACTION.TRANSACTION_PK);\n+    if (transaction == null) {\n+      throw new SteveException(\"There is no transaction with id '%s'\", transactionPk);\n     }\n \n-    @Override\n-    public TransactionDetails getDetails(int transactionPk) {\n-\n-        // -------------------------------------------------------------------------\n-        // Step 1: Collect general data about transaction\n-        // -------------------------------------------------------------------------\n-\n-        TransactionQueryForm form = new TransactionQueryForm();\n-        form.setTransactionPk(transactionPk);\n-        form.setType(TransactionQueryForm.QueryType.ALL);\n-        form.setPeriodType(TransactionQueryForm.QueryPeriodType.ALL);\n-\n-        Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>\n-                transaction = getInternal(form).fetchOne();\n-\n-        if (transaction == null) {\n-            throw new SteveException(\"There is no transaction with id '%s'\", transactionPk);\n-        }\n-\n-        DateTime startTimestamp = transaction.value5();\n-        DateTime stopTimestamp = transaction.value7();\n-        String stopValue = transaction.value8();\n-        String chargeBoxId = transaction.value2();\n-        int connectorId = transaction.value3();\n-\n-        // -------------------------------------------------------------------------\n-        // Step 2: Collect intermediate meter values\n-        // -------------------------------------------------------------------------\n-\n-        Condition timestampCondition;\n-        if (stopTimestamp == null && stopValue == null) {\n-\n-            // https://github.com/RWTH-i5-IDSG/steve/issues/97\n-            //\n-            // handle \"zombie\" transaction, for which we did not receive any StopTransaction. if we do not handle it,\n-            // meter values for all subsequent transactions at this chargebox and connector will be falsely attributed\n-            // to this zombie transaction.\n-            //\n-            // \"what is the start time of the first subsequent transaction at the same chargebox and connector?\"\n-            DateTime startOfNext = ctx.select(TRANSACTION.START_TIMESTAMP)\n-                                      .from(TRANSACTION)\n-                                      .join(CONNECTOR)\n-                                        .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n-                                      .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n-                                        .and(CONNECTOR.CONNECTOR_ID.equal(connectorId))\n-                                        .and(TRANSACTION.START_TIMESTAMP.greaterThan(startTimestamp))\n-                                      .orderBy(TRANSACTION.START_TIMESTAMP)\n-                                      .limit(1)\n-                                      .fetchOne(TRANSACTION.START_TIMESTAMP);\n-\n-            if (startOfNext == null) {\n-                // the last active transaction\n-                timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.greaterOrEqual(startTimestamp);\n-            } else {\n-                timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.between(startTimestamp, startOfNext);\n-            }\n-        } else {\n-            // finished transaction\n-            timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.between(startTimestamp, stopTimestamp);\n-        }\n-\n-        // Case 1: Ideal and most accurate case. Station sends meter values with transaction id set.\n-        //\n-        SelectQuery<ConnectorMeterValueRecord> transactionQuery =\n-                ctx.selectFrom(CONNECTOR_METER_VALUE)\n-                   .where(CONNECTOR_METER_VALUE.TRANSACTION_PK.eq(transactionPk))\n-                   .getQuery();\n-\n-        // Case 2: Fall back to filtering according to time windows\n-        //\n-        SelectQuery<ConnectorMeterValueRecord> timestampQuery =\n-                ctx.selectFrom(CONNECTOR_METER_VALUE)\n-                   .where(CONNECTOR_METER_VALUE.CONNECTOR_PK.eq(ctx.select(CONNECTOR.CONNECTOR_PK)\n-                                                                   .from(CONNECTOR)\n-                                                                   .where(CONNECTOR.CHARGE_BOX_ID.eq(chargeBoxId))\n-                                                                   .and(CONNECTOR.CONNECTOR_ID.eq(connectorId))))\n-                   .and(timestampCondition)\n-                   .getQuery();\n-\n-        // Actually, either case 1 applies or 2. If we retrieved values using 1, case 2 is should not be\n-        // executed (best case). In worst case (1 returns empty list and we fall back to case 2) though,\n-        // we make two db calls. Alternatively, we can pass both queries in one go, and make the db work.\n-        //\n-        // UNION removes all duplicate records\n-        //\n-        Table<ConnectorMeterValueRecord> t1 = transactionQuery.union(timestampQuery).asTable(\"t1\");\n-\n-        // -------------------------------------------------------------------------\n-        // Step 3: Charging station might send meter vales at fixed intervals (e.g.\n-        // every 15 min) regardless of the fact that connector's meter value did not\n-        // change (e.g. vehicle is fully charged, but cable is still connected). This\n-        // yields multiple entries in db with the same value but different timestamp.\n-        // We are only interested in the first arriving entry.\n-        // -------------------------------------------------------------------------\n-\n-        Field<DateTime> dateTimeField = DSL.min(t1.field(2, DateTime.class)).as(\"min\");\n-\n-        List<TransactionDetails.MeterValues> values =\n-                ctx.select(\n-                        dateTimeField,\n-                        t1.field(3, String.class),\n-                        t1.field(4, String.class),\n-                        t1.field(5, String.class),\n-                        t1.field(6, String.class),\n-                        t1.field(7, String.class),\n-                        t1.field(8, String.class),\n-                        t1.field(9, String.class))\n-                   .from(t1)\n-                   .groupBy(\n-                           t1.field(3),\n-                           t1.field(4),\n-                           t1.field(5),\n-                           t1.field(6),\n-                           t1.field(7),\n-                           t1.field(8),\n-                           t1.field(9))\n-                   .orderBy(dateTimeField)\n-                   .fetch()\n-                   .map(r -> TransactionDetails.MeterValues.builder()\n-                                                           .valueTimestamp(r.value1())\n-                                                           .value(r.value2())\n-                                                           .readingContext(r.value3())\n-                                                           .format(r.value4())\n-                                                           .measurand(r.value5())\n-                                                           .location(r.value6())\n-                                                           .unit(r.value7())\n-                                                           .phase(r.value8())\n-                                                           .build());\n-\n-        return new TransactionDetails(new TransactionMapper().map(transaction), values);\n-    }\n+    DateTime startTimestamp = transaction.value5();\n+    DateTime stopTimestamp = transaction.value7();\n+    String stopValue = transaction.value8();\n+    String chargeBoxId = transaction.value2();\n+    int connectorId = transaction.value3();\n \n-    /**\n-     * See documentation of {@link TransactionRepository#getChargeBoxIdsOfActiveTransactions(String)}\n-     */\n-    @Override\n-    public List<String> getChargeBoxIdsOfActiveTransactions(String ocppIdTag) {\n-        return ctx.select(CONNECTOR.CHARGE_BOX_ID)\n-                  .from(CONNECTOR)\n-                  .join(TRANSACTION)\n-                    .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n-                  .where(TRANSACTION.ID_TAG.eq(ocppIdTag))\n-                    .and(TRANSACTION.STOP_VALUE.isNull())\n-                    .and(TRANSACTION.STOP_TIMESTAMP.isNull())\n-                  .fetch(CONNECTOR.CHARGE_BOX_ID);\n+    // -------------------------------------------------------------------------\n+    // Step 2: Collect intermediate meter values\n+    // -------------------------------------------------------------------------\n+\n+    Condition timestampCondition;\n+    if (stopTimestamp == null && stopValue == null) {\n+\n+      // https://github.com/RWTH-i5-IDSG/steve/issues/97\n+      //\n+      // handle \"zombie\" transaction, for which we did not receive any StopTransaction. if we do not handle it,\n+      // meter values for all subsequent transactions at this chargebox and connector will be falsely attributed\n+      // to this zombie transaction.\n+      //\n+      // \"what is the start time of the first subsequent transaction at the same chargebox and connector?\"\n+      DateTime startOfNext = ctx.select(TRANSACTION.START_TIMESTAMP)\n+        .from(TRANSACTION)\n+        .join(CONNECTOR)\n+        .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n+        .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n+        .and(CONNECTOR.CONNECTOR_ID.equal(connectorId))\n+        .and(TRANSACTION.START_TIMESTAMP.greaterThan(startTimestamp))\n+        .orderBy(TRANSACTION.START_TIMESTAMP)\n+        .limit(1)\n+        .fetchOne(TRANSACTION.START_TIMESTAMP);\n+\n+      if (startOfNext == null) {\n+        // the last active transaction\n+        timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.greaterOrEqual(startTimestamp);\n+      } else {\n+        timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.between(startTimestamp, startOfNext);\n+      }\n+    } else {\n+      // finished transaction\n+      timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.between(startTimestamp, stopTimestamp);\n     }\n \n+    // Case 1: Ideal and most accurate case. Station sends meter values with transaction id set.\n+    //\n+    SelectQuery<ConnectorMeterValueRecord> transactionQuery =\n+      ctx.selectFrom(CONNECTOR_METER_VALUE)\n+        .where(CONNECTOR_METER_VALUE.TRANSACTION_PK.eq(transactionPk))\n+        .getQuery();\n+\n+    // Case 2: Fall back to filtering according to time windows\n+    //\n+    SelectQuery<ConnectorMeterValueRecord> timestampQuery =\n+      ctx.selectFrom(CONNECTOR_METER_VALUE)\n+        .where(CONNECTOR_METER_VALUE.CONNECTOR_PK.eq(ctx.select(CONNECTOR.CONNECTOR_PK)\n+          .from(CONNECTOR)\n+          .where(CONNECTOR.CHARGE_BOX_ID.eq(chargeBoxId))\n+          .and(CONNECTOR.CONNECTOR_ID.eq(connectorId))))\n+        .and(timestampCondition)\n+        .getQuery();\n+\n+    // Actually, either case 1 applies or 2. If we retrieved values using 1, case 2 is should not be\n+    // executed (best case). In worst case (1 returns empty list and we fall back to case 2) though,\n+    // we make two db calls. Alternatively, we can pass both queries in one go, and make the db work.\n+    //\n+    // UNION removes all duplicate records\n+    //\n+    Table<ConnectorMeterValueRecord> t1 = transactionQuery.union(timestampQuery).asTable(\"t1\");\n+\n     // -------------------------------------------------------------------------\n-    // Private helpers\n+    // Step 3: Charging station might send meter vales at fixed intervals (e.g.\n+    // every 15 min) regardless of the fact that connector's meter value did not\n+    // change (e.g. vehicle is fully charged, but cable is still connected). This\n+    // yields multiple entries in db with the same value but different timestamp.\n+    // We are only interested in the first arriving entry.\n     // -------------------------------------------------------------------------\n \n-    @SuppressWarnings(\"unchecked\")\n-    private\n-    SelectQuery<Record9<Integer, String, Integer, String, DateTime, String, DateTime, String, String>>\n-    getInternalCSV(TransactionQueryForm form) {\n-\n-        SelectQuery selectQuery = ctx.selectQuery();\n-        selectQuery.addFrom(TRANSACTION);\n-        selectQuery.addJoin(CONNECTOR, TRANSACTION.CONNECTOR_PK.eq(CONNECTOR.CONNECTOR_PK));\n-        selectQuery.addSelect(\n-                TRANSACTION.TRANSACTION_PK,\n-                CONNECTOR.CHARGE_BOX_ID,\n-                CONNECTOR.CONNECTOR_ID,\n-                TRANSACTION.ID_TAG,\n-                TRANSACTION.START_TIMESTAMP,\n-                TRANSACTION.START_VALUE,\n-                TRANSACTION.STOP_TIMESTAMP,\n-                TRANSACTION.STOP_VALUE,\n-                TRANSACTION.STOP_REASON\n-        );\n-\n-        return addConditions(selectQuery, form);\n+    Field<DateTime> dateTimeField = DSL.min(t1.field(2, DateTime.class)).as(\"min\");\n+\n+    List<TransactionDetails.MeterValues> values =\n+      ctx.select(\n+        dateTimeField,\n+        t1.field(3, String.class),\n+        t1.field(4, String.class),\n+        t1.field(5, String.class),\n+        t1.field(6, String.class),\n+        t1.field(7, String.class),\n+        t1.field(8, String.class),\n+        t1.field(9, String.class))\n+        .from(t1)\n+        .groupBy(\n+          t1.field(3),\n+          t1.field(4),\n+          t1.field(5),\n+          t1.field(6),\n+          t1.field(7),\n+          t1.field(8),\n+          t1.field(9))\n+        .orderBy(dateTimeField)\n+        .fetch()\n+        .map(r -> TransactionDetails.MeterValues.builder()\n+          .valueTimestamp(r.value1())\n+          .value(r.value2())\n+          .readingContext(r.value3())\n+          .format(r.value4())\n+          .measurand(r.value5())\n+          .location(r.value6())\n+          .unit(r.value7())\n+          .phase(r.value8())\n+          .build());\n+\n+    return new TransactionDetails(new TransactionMapper().map(transaction), values);\n+  }\n+\n+  /**\n+   * See documentation of {@link TransactionRepository#getChargeBoxIdsOfActiveTransactions(String)}\n+   */\n+  @Override\n+  public List<String> getChargeBoxIdsOfActiveTransactions(String ocppIdTag) {\n+    return ctx.select(CONNECTOR.CHARGE_BOX_ID)\n+      .from(CONNECTOR)\n+      .join(TRANSACTION)\n+      .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n+      .where(TRANSACTION.ID_TAG.eq(ocppIdTag))\n+      .and(TRANSACTION.STOP_VALUE.isNull())\n+      .and(TRANSACTION.STOP_TIMESTAMP.isNull())\n+      .fetch(CONNECTOR.CHARGE_BOX_ID);\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // Private helpers\n+  // -------------------------------------------------------------------------\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private SelectQuery<Record9<Integer, String, Integer, String, DateTime, String, DateTime, String, String>>\n+  getInternalCSV(TransactionQueryForm form) {\n+\n+    SelectQuery selectQuery = ctx.selectQuery();\n+    selectQuery.addFrom(TRANSACTION);\n+    selectQuery.addJoin(CONNECTOR, TRANSACTION.CONNECTOR_PK.eq(CONNECTOR.CONNECTOR_PK));\n+    selectQuery.addSelect(\n+      TRANSACTION.TRANSACTION_PK,\n+      CONNECTOR.CHARGE_BOX_ID,\n+      CONNECTOR.CONNECTOR_ID,\n+      TRANSACTION.ID_TAG,\n+      TRANSACTION.START_TIMESTAMP,\n+      TRANSACTION.START_VALUE,\n+      TRANSACTION.STOP_TIMESTAMP,\n+      TRANSACTION.STOP_VALUE,\n+      TRANSACTION.STOP_REASON\n+    );\n+\n+    return addConditions(selectQuery, form);\n+  }\n+\n+  /**\n+   * Difference from getInternalCSV:\n+   * Joins with CHARGE_BOX and OCPP_TAG tables, selects CHARGE_BOX_PK and OCPP_TAG_PK additionally\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  private SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n+  getInternal(TransactionQueryForm form) {\n+\n+    SelectQuery selectQuery = ctx.selectQuery();\n+    selectQuery.addFrom(TRANSACTION);\n+    selectQuery.addJoin(CONNECTOR, TRANSACTION.CONNECTOR_PK.eq(CONNECTOR.CONNECTOR_PK));\n+    selectQuery.addJoin(CHARGE_BOX, CHARGE_BOX.CHARGE_BOX_ID.eq(CONNECTOR.CHARGE_BOX_ID));\n+    selectQuery.addJoin(OCPP_TAG, OCPP_TAG.ID_TAG.eq(TRANSACTION.ID_TAG));\n+    selectQuery.addSelect(\n+      TRANSACTION.TRANSACTION_PK,\n+      CONNECTOR.CHARGE_BOX_ID,\n+      CONNECTOR.CONNECTOR_ID,\n+      TRANSACTION.ID_TAG,\n+      TRANSACTION.START_TIMESTAMP,\n+      TRANSACTION.START_VALUE,\n+      TRANSACTION.STOP_TIMESTAMP,\n+      TRANSACTION.STOP_VALUE,\n+      TRANSACTION.STOP_REASON,\n+      CHARGE_BOX.CHARGE_BOX_PK,\n+      OCPP_TAG.OCPP_TAG_PK\n+    );\n+\n+    return addConditions(selectQuery, form);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private SelectQuery addConditions(SelectQuery selectQuery, TransactionQueryForm form) {\n+    if (form.isTransactionPkSet()) {\n+      selectQuery.addConditions(TRANSACTION.TRANSACTION_PK.eq(form.getTransactionPk()));\n     }\n \n-    /**\n-     * Difference from getInternalCSV:\n-     * Joins with CHARGE_BOX and OCPP_TAG tables, selects CHARGE_BOX_PK and OCPP_TAG_PK additionally\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    private\n-    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n-    getInternal(TransactionQueryForm form) {\n-\n-        SelectQuery selectQuery = ctx.selectQuery();\n-        selectQuery.addFrom(TRANSACTION);\n-        selectQuery.addJoin(CONNECTOR, TRANSACTION.CONNECTOR_PK.eq(CONNECTOR.CONNECTOR_PK));\n-        selectQuery.addJoin(CHARGE_BOX, CHARGE_BOX.CHARGE_BOX_ID.eq(CONNECTOR.CHARGE_BOX_ID));\n-        selectQuery.addJoin(OCPP_TAG, OCPP_TAG.ID_TAG.eq(TRANSACTION.ID_TAG));\n-        selectQuery.addSelect(\n-                TRANSACTION.TRANSACTION_PK,\n-                CONNECTOR.CHARGE_BOX_ID,\n-                CONNECTOR.CONNECTOR_ID,\n-                TRANSACTION.ID_TAG,\n-                TRANSACTION.START_TIMESTAMP,\n-                TRANSACTION.START_VALUE,\n-                TRANSACTION.STOP_TIMESTAMP,\n-                TRANSACTION.STOP_VALUE,\n-                TRANSACTION.STOP_REASON,\n-                CHARGE_BOX.CHARGE_BOX_PK,\n-                OCPP_TAG.OCPP_TAG_PK\n-        );\n+    if (form.isChargeBoxIdSet()) {\n+      selectQuery.addConditions(CONNECTOR.CHARGE_BOX_ID.eq(form.getChargeBoxId()));\n+    }\n \n-        return addConditions(selectQuery, form);\n+    if (form.isOcppIdTagSet()) {\n+      selectQuery.addConditions(TRANSACTION.ID_TAG.eq(form.getOcppIdTag()));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private SelectQuery addConditions(SelectQuery selectQuery, TransactionQueryForm form) {\n-        if (form.isTransactionPkSet()) {\n-            selectQuery.addConditions(TRANSACTION.TRANSACTION_PK.eq(form.getTransactionPk()));\n-        }\n+    if (form.getType() == TransactionQueryForm.QueryType.ACTIVE) {\n+      selectQuery.addConditions(TRANSACTION.STOP_TIMESTAMP.isNull());\n+    }\n \n-        if (form.isChargeBoxIdSet()) {\n-            selectQuery.addConditions(CONNECTOR.CHARGE_BOX_ID.eq(form.getChargeBoxId()));\n-        }\n+    processType(selectQuery, form);\n \n-        if (form.isOcppIdTagSet()) {\n-            selectQuery.addConditions(TRANSACTION.ID_TAG.eq(form.getOcppIdTag()));\n-        }\n+    // Default order\n+    selectQuery.addOrderBy(TRANSACTION.TRANSACTION_PK.desc());\n \n-        if (form.getType() == TransactionQueryForm.QueryType.ACTIVE) {\n-            selectQuery.addConditions(TRANSACTION.STOP_TIMESTAMP.isNull());\n-        }\n+    return selectQuery;\n+  }\n \n-        processType(selectQuery, form);\n+  private void processType(SelectQuery selectQuery, TransactionQueryForm form) {\n+    switch (form.getPeriodType()) {\n+      case TODAY:\n+        selectQuery.addConditions(\n+          date(TRANSACTION.START_TIMESTAMP).eq(date(DateTime.now()))\n+        );\n+        break;\n+\n+      case LAST_10:\n+      case LAST_30:\n+      case LAST_90:\n+        DateTime now = DateTime.now();\n+        selectQuery.addConditions(\n+          date(TRANSACTION.START_TIMESTAMP).between(\n+            date(now.minusDays(form.getPeriodType().getInterval())),\n+            date(now)\n+          )\n+        );\n+        break;\n \n-        // Default order\n-        selectQuery.addOrderBy(TRANSACTION.TRANSACTION_PK.desc());\n+      case ALL:\n+        break;\n \n-        return selectQuery;\n-    }\n+      case FROM_TO:\n+        selectQuery.addConditions(\n+          TRANSACTION.START_TIMESTAMP.between(form.getFrom().toDateTime(), form.getTo().toDateTime())\n+        );\n+        break;\n \n-    private void processType(SelectQuery selectQuery, TransactionQueryForm form) {\n-        switch (form.getPeriodType()) {\n-            case TODAY:\n-                selectQuery.addConditions(\n-                        date(TRANSACTION.START_TIMESTAMP).eq(date(DateTime.now()))\n-                );\n-                break;\n-\n-            case LAST_10:\n-            case LAST_30:\n-            case LAST_90:\n-                DateTime now = DateTime.now();\n-                selectQuery.addConditions(\n-                        date(TRANSACTION.START_TIMESTAMP).between(\n-                                date(now.minusDays(form.getPeriodType().getInterval())),\n-                                date(now)\n-                        )\n-                );\n-                break;\n-\n-            case ALL:\n-                break;\n-\n-            case FROM_TO:\n-                selectQuery.addConditions(\n-                        TRANSACTION.START_TIMESTAMP.between(form.getFrom().toDateTime(), form.getTo().toDateTime())\n-                );\n-                break;\n-\n-            default:\n-                throw new SteveException(\"Unknown enum type\");\n-        }\n+      default:\n+        throw new SteveException(\"Unknown enum type\");\n     }\n+  }\n \n-    private static class TransactionMapper\n-            implements RecordMapper<Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n-                                             String, String, Integer, Integer>, Transaction> {\n-        @Override\n-        public Transaction map(Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n-                                        String, String, Integer, Integer> r) {\n-            return Transaction.builder()\n-                              .id(r.value1())\n-                              .chargeBoxId(r.value2())\n-                              .connectorId(r.value3())\n-                              .ocppIdTag(r.value4())\n-                              .startTimestampDT(r.value5())\n-                              .startTimestamp(DateTimeUtils.humanize(r.value5()))\n-                              .startValue(r.value6())\n-                              .stopTimestampDT(r.value7())\n-                              .stopTimestamp(DateTimeUtils.humanize(r.value7()))\n-                              .stopValue(r.value8())\n-                              .stopReason(r.value9())\n-                              .chargeBoxPk(r.value10())\n-                              .ocppTagPk(r.value11())\n-                              .build();\n-        }\n+  private static class TransactionMapper\n+    implements RecordMapper<Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n+    String, String, Integer, Integer>, Transaction> {\n+    @Override\n+    public Transaction map(Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n+      String, String, Integer, Integer> r) {\n+      return Transaction.builder()\n+        .id(r.value1())\n+        .chargeBoxId(r.value2())\n+        .connectorId(r.value3())\n+        .ocppIdTag(r.value4())\n+        .startTimestampDT(r.value5())\n+        .startTimestamp(DateTimeUtils.humanize(r.value5()))\n+        .startValue(r.value6())\n+        .stopTimestampDT(r.value7())\n+        .stopTimestamp(DateTimeUtils.humanize(r.value7()))\n+        .stopValue(r.value8())\n+        .stopReason(r.value9())\n+        .chargeBoxPk(r.value10())\n+        .ocppTagPk(r.value11())\n+        .build();\n     }\n+  }\n }\n",
            "diff_size": 492
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "330",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/85/TransactionRepositoryImpl.java\nindex b26588c8e91..16cc9350104 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/85/TransactionRepositoryImpl.java\n@@ -47,15 +47,13 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<Transaction> getTransactions(TransactionQueryForm form) {\n-        return getInternal(form).fetch()\n-                                .map(new TransactionMapper());\n+        return getInternal(form).fetch().map(new TransactionMapper());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void writeTransactionsCSV(TransactionQueryForm form, Writer writer) {\n-        getInternalCSV(form).fetch()\n-                            .formatCSV(writer);\n+        getInternalCSV(form).fetch().formatCSV(writer);\n     }\n \n     @Override\n@@ -81,8 +79,7 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n         form.setType(TransactionQueryForm.QueryType.ALL);\n         form.setPeriodType(TransactionQueryForm.QueryPeriodType.ALL);\n \n-        Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>\n-                transaction = getInternal(form).fetchOne();\n+        Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer> transaction = getInternal(form).fetchOne();\n \n         if (transaction == null) {\n             throw new SteveException(\"There is no transaction with id '%s'\", transactionPk);\n@@ -109,7 +106,7 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n             //\n             // \"what is the start time of the first subsequent transaction at the same chargebox and connector?\"\n             DateTime startOfNext = ctx.select(TRANSACTION.START_TIMESTAMP)\n-                                      .from(TRANSACTION)\n+.from(TRANSACTION)\n                                       .join(CONNECTOR)\n                                         .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n                                       .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n@@ -118,8 +115,7 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n                                       .orderBy(TRANSACTION.START_TIMESTAMP)\n                                       .limit(1)\n                                       .fetchOne(TRANSACTION.START_TIMESTAMP);\n-\n-            if (startOfNext == null) {\n+if (startOfNext == null) {\n                 // the last active transaction\n                 timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.greaterOrEqual(startTimestamp);\n             } else {\n@@ -137,18 +133,18 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n                    .where(CONNECTOR_METER_VALUE.TRANSACTION_PK.eq(transactionPk))\n                    .getQuery();\n \n-        // Case 2: Fall back to filtering according to time windows\n+// Case 2: Fall back to filtering according to time windows\n         //\n         SelectQuery<ConnectorMeterValueRecord> timestampQuery =\n                 ctx.selectFrom(CONNECTOR_METER_VALUE)\n                    .where(CONNECTOR_METER_VALUE.CONNECTOR_PK.eq(ctx.select(CONNECTOR.CONNECTOR_PK)\n-                                                                   .from(CONNECTOR)\n+.from(CONNECTOR)\n                                                                    .where(CONNECTOR.CHARGE_BOX_ID.eq(chargeBoxId))\n                                                                    .and(CONNECTOR.CONNECTOR_ID.eq(connectorId))))\n-                   .and(timestampCondition)\n+.and(timestampCondition)\n                    .getQuery();\n \n-        // Actually, either case 1 applies or 2. If we retrieved values using 1, case 2 is should not be\n+// Actually, either case 1 applies or 2. If we retrieved values using 1, case 2 is should not be\n         // executed (best case). In worst case (1 returns empty list and we fall back to case 2) though,\n         // we make two db calls. Alternatively, we can pass both queries in one go, and make the db work.\n         //\n@@ -187,8 +183,7 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n                            t1.field(9))\n                    .orderBy(dateTimeField)\n                    .fetch()\n-                   .map(r -> TransactionDetails.MeterValues.builder()\n-                                                           .valueTimestamp(r.value1())\n+                   .map(r -> TransactionDetails.MeterValues.builder().valueTimestamp(r.value1())\n                                                            .value(r.value2())\n                                                            .readingContext(r.value3())\n                                                            .format(r.value4())\n@@ -197,8 +192,7 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n                                                            .unit(r.value7())\n                                                            .phase(r.value8())\n                                                            .build());\n-\n-        return new TransactionDetails(new TransactionMapper().map(transaction), values);\n+return new TransactionDetails(new TransactionMapper().map(transaction), values);\n     }\n \n     /**\n@@ -221,8 +215,7 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n     // -------------------------------------------------------------------------\n \n     @SuppressWarnings(\"unchecked\")\n-    private\n-    SelectQuery<Record9<Integer, String, Integer, String, DateTime, String, DateTime, String, String>>\n+    private SelectQuery<Record9<Integer, String, Integer, String, DateTime, String, DateTime, String, String>>\n     getInternalCSV(TransactionQueryForm form) {\n \n         SelectQuery selectQuery = ctx.selectQuery();\n@@ -248,8 +241,7 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n      * Joins with CHARGE_BOX and OCPP_TAG tables, selects CHARGE_BOX_PK and OCPP_TAG_PK additionally\n      */\n     @SuppressWarnings(\"unchecked\")\n-    private\n-    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n+    private SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n     getInternal(TransactionQueryForm form) {\n \n         SelectQuery selectQuery = ctx.selectQuery();\n@@ -335,9 +327,8 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n     }\n \n     private static class TransactionMapper\n-            implements RecordMapper<Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n-                                             String, String, Integer, Integer>, Transaction> {\n-        @Override\n+            implements RecordMapper<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>, Transaction> {\n+    @Override\n         public Transaction map(Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n                                         String, String, Integer, Integer> r) {\n             return Transaction.builder()\n@@ -357,4 +348,4 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n                               .build();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 268).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 258).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 306).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "287",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/85/TransactionRepositoryImpl.java\nindex b26588c8e91..7600889585b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/85/TransactionRepositoryImpl.java\n@@ -19,7 +19,6 @@ import org.jooq.Table;\n import org.jooq.impl.DSL;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-\n import java.io.Writer;\n import java.util.List;\n \n@@ -34,11 +33,11 @@ import static jooq.steve.db.tables.Transaction.TRANSACTION;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 14.08.2014\n  */\n+\n+\n @Repository\n public class TransactionRepositoryImpl implements TransactionRepository {\n-\n     private final DSLContext ctx;\n-\n     @Autowired\n     public TransactionRepositoryImpl(DSLContext ctx) {\n         this.ctx = ctx;\n@@ -47,26 +46,27 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<Transaction> getTransactions(TransactionQueryForm form) {\n-        return getInternal(form).fetch()\n-                                .map(new TransactionMapper());\n+        return getInternal(form)\n+            .fetch()\n+            .map(new TransactionMapper());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void writeTransactionsCSV(TransactionQueryForm form, Writer writer) {\n-        getInternalCSV(form).fetch()\n-                            .formatCSV(writer);\n+        getInternalCSV(form)\n+    .fetch().formatCSV(writer);\n     }\n \n     @Override\n     public List<Integer> getActiveTransactionIds(String chargeBoxId) {\n         return ctx.select(TRANSACTION.TRANSACTION_PK)\n-                  .from(TRANSACTION)\n-                  .join(CONNECTOR)\n-                    .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n-                    .and(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n-                  .where(TRANSACTION.STOP_TIMESTAMP.isNull())\n-                  .fetch(TRANSACTION.TRANSACTION_PK);\n+            .from(TRANSACTION)\n+            .join(CONNECTOR)\n+            .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n+            .and(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n+            .where(TRANSACTION.STOP_TIMESTAMP.isNull())\n+            .fetch(TRANSACTION.TRANSACTION_PK);\n     }\n \n     @Override\n@@ -75,15 +75,13 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n         // -------------------------------------------------------------------------\n         // Step 1: Collect general data about transaction\n         // -------------------------------------------------------------------------\n-\n         TransactionQueryForm form = new TransactionQueryForm();\n         form.setTransactionPk(transactionPk);\n         form.setType(TransactionQueryForm.QueryType.ALL);\n         form.setPeriodType(TransactionQueryForm.QueryPeriodType.ALL);\n \n-        Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>\n-                transaction = getInternal(form).fetchOne();\n-\n+        Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer> transaction = getInternal(form)\n+            .fetchOne();\n         if (transaction == null) {\n             throw new SteveException(\"There is no transaction with id '%s'\", transactionPk);\n         }\n@@ -97,7 +95,6 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n         // -------------------------------------------------------------------------\n         // Step 2: Collect intermediate meter values\n         // -------------------------------------------------------------------------\n-\n         Condition timestampCondition;\n         if (stopTimestamp == null && stopValue == null) {\n \n@@ -109,16 +106,15 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n             //\n             // \"what is the start time of the first subsequent transaction at the same chargebox and connector?\"\n             DateTime startOfNext = ctx.select(TRANSACTION.START_TIMESTAMP)\n-                                      .from(TRANSACTION)\n-                                      .join(CONNECTOR)\n-                                        .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n-                                      .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n-                                        .and(CONNECTOR.CONNECTOR_ID.equal(connectorId))\n-                                        .and(TRANSACTION.START_TIMESTAMP.greaterThan(startTimestamp))\n-                                      .orderBy(TRANSACTION.START_TIMESTAMP)\n-                                      .limit(1)\n-                                      .fetchOne(TRANSACTION.START_TIMESTAMP);\n-\n+                .from(TRANSACTION)\n+                .join(CONNECTOR)\n+                .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n+                .where(CONNECTOR.CHARGE_BOX_ID.equal(chargeBoxId))\n+                .and(CONNECTOR.CONNECTOR_ID.equal(connectorId))\n+                .and(TRANSACTION.START_TIMESTAMP.greaterThan(startTimestamp))\n+                .orderBy(TRANSACTION.START_TIMESTAMP)\n+                .limit(1)\n+                .fetchOne(TRANSACTION.START_TIMESTAMP);\n             if (startOfNext == null) {\n                 // the last active transaction\n                 timestampCondition = CONNECTOR_METER_VALUE.VALUE_TIMESTAMP.greaterOrEqual(startTimestamp);\n@@ -132,21 +128,20 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n \n         // Case 1: Ideal and most accurate case. Station sends meter values with transaction id set.\n         //\n-        SelectQuery<ConnectorMeterValueRecord> transactionQuery =\n-                ctx.selectFrom(CONNECTOR_METER_VALUE)\n-                   .where(CONNECTOR_METER_VALUE.TRANSACTION_PK.eq(transactionPk))\n-                   .getQuery();\n+\n+        SelectQuery<ConnectorMeterValueRecord> transactionQuery = ctx.selectFrom(CONNECTOR_METER_VALUE)\n+            .where(CONNECTOR_METER_VALUE.TRANSACTION_PK.eq(transactionPk))\n+            .getQuery();\n \n         // Case 2: Fall back to filtering according to time windows\n         //\n-        SelectQuery<ConnectorMeterValueRecord> timestampQuery =\n-                ctx.selectFrom(CONNECTOR_METER_VALUE)\n-                   .where(CONNECTOR_METER_VALUE.CONNECTOR_PK.eq(ctx.select(CONNECTOR.CONNECTOR_PK)\n-                                                                   .from(CONNECTOR)\n-                                                                   .where(CONNECTOR.CHARGE_BOX_ID.eq(chargeBoxId))\n-                                                                   .and(CONNECTOR.CONNECTOR_ID.eq(connectorId))))\n-                   .and(timestampCondition)\n-                   .getQuery();\n+        SelectQuery<ConnectorMeterValueRecord> timestampQuery = ctx.selectFrom(CONNECTOR_METER_VALUE)\n+            .where(CONNECTOR_METER_VALUE.CONNECTOR_PK.eq(ctx.select(CONNECTOR.CONNECTOR_PK)\n+                .from(CONNECTOR)\n+                .where(CONNECTOR.CHARGE_BOX_ID.eq(chargeBoxId))\n+                .and(CONNECTOR.CONNECTOR_ID.eq(connectorId))))\n+            .and(timestampCondition)\n+            .getQuery();\n \n         // Actually, either case 1 applies or 2. If we retrieved values using 1, case 2 is should not be\n         // executed (best case). In worst case (1 returns empty list and we fall back to case 2) though,\n@@ -154,7 +149,8 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n         //\n         // UNION removes all duplicate records\n         //\n-        Table<ConnectorMeterValueRecord> t1 = transactionQuery.union(timestampQuery).asTable(\"t1\");\n+        Table<ConnectorMeterValueRecord> t1 = transactionQuery.union(timestampQuery)\n+            .asTable(\"t1\");\n \n         // -------------------------------------------------------------------------\n         // Step 3: Charging station might send meter vales at fixed intervals (e.g.\n@@ -163,57 +159,42 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n         // yields multiple entries in db with the same value but different timestamp.\n         // We are only interested in the first arriving entry.\n         // -------------------------------------------------------------------------\n-\n-        Field<DateTime> dateTimeField = DSL.min(t1.field(2, DateTime.class)).as(\"min\");\n-\n-        List<TransactionDetails.MeterValues> values =\n-                ctx.select(\n-                        dateTimeField,\n-                        t1.field(3, String.class),\n-                        t1.field(4, String.class),\n-                        t1.field(5, String.class),\n-                        t1.field(6, String.class),\n-                        t1.field(7, String.class),\n-                        t1.field(8, String.class),\n-                        t1.field(9, String.class))\n-                   .from(t1)\n-                   .groupBy(\n-                           t1.field(3),\n-                           t1.field(4),\n-                           t1.field(5),\n-                           t1.field(6),\n-                           t1.field(7),\n-                           t1.field(8),\n-                           t1.field(9))\n-                   .orderBy(dateTimeField)\n-                   .fetch()\n-                   .map(r -> TransactionDetails.MeterValues.builder()\n-                                                           .valueTimestamp(r.value1())\n-                                                           .value(r.value2())\n-                                                           .readingContext(r.value3())\n-                                                           .format(r.value4())\n-                                                           .measurand(r.value5())\n-                                                           .location(r.value6())\n-                                                           .unit(r.value7())\n-                                                           .phase(r.value8())\n-                                                           .build());\n-\n-        return new TransactionDetails(new TransactionMapper().map(transaction), values);\n+        Field<DateTime> dateTimeField = DSL.min(t1.field(2, DateTime.class))\n+            .as(\"min\");\n+        List<TransactionDetails.MeterValues> values = ctx.select(dateTimeField, t1.field(3, String.class), t1.field(4, String.class), t1.field(5, String.class), t1.field(6, String.class), t1.field(7, String.class), t1.field(8, String.class), t1.field(9, String.class))\n+            .from(t1)\n+            .groupBy(t1.field(3), t1.field(4), t1.field(5), t1.field(6), t1.field(7), t1.field(8), t1.field(9))\n+            .orderBy(dateTimeField)\n+            .fetch()\n+            .map(r -> TransactionDetails.MeterValues.builder()\n+                .valueTimestamp(r.value1())\n+                .value(r.value2())\n+                .readingContext(r.value3())\n+                .format(r.value4())\n+                .measurand(r.value5())\n+                .location(r.value6())\n+                .unit(r.value7())\n+                .phase(r.value8())\n+                .build());\n+\n+        return new TransactionDetails(new TransactionMapper()\n+.map(transaction), values);\n     }\n \n     /**\n      * See documentation of {@link TransactionRepository#getChargeBoxIdsOfActiveTransactions(String)}\n      */\n+\n     @Override\n     public List<String> getChargeBoxIdsOfActiveTransactions(String ocppIdTag) {\n         return ctx.select(CONNECTOR.CHARGE_BOX_ID)\n-                  .from(CONNECTOR)\n-                  .join(TRANSACTION)\n-                    .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n-                  .where(TRANSACTION.ID_TAG.eq(ocppIdTag))\n-                    .and(TRANSACTION.STOP_VALUE.isNull())\n-                    .and(TRANSACTION.STOP_TIMESTAMP.isNull())\n-                  .fetch(CONNECTOR.CHARGE_BOX_ID);\n+            .from(CONNECTOR)\n+            .join(TRANSACTION)\n+            .on(TRANSACTION.CONNECTOR_PK.equal(CONNECTOR.CONNECTOR_PK))\n+            .where(TRANSACTION.ID_TAG.eq(ocppIdTag))\n+            .and(TRANSACTION.STOP_VALUE.isNull())\n+            .and(TRANSACTION.STOP_TIMESTAMP.isNull())\n+            .fetch(CONNECTOR.CHARGE_BOX_ID);\n     }\n \n     // -------------------------------------------------------------------------\n@@ -221,25 +202,11 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n     // -------------------------------------------------------------------------\n \n     @SuppressWarnings(\"unchecked\")\n-    private\n-    SelectQuery<Record9<Integer, String, Integer, String, DateTime, String, DateTime, String, String>>\n-    getInternalCSV(TransactionQueryForm form) {\n-\n+    private SelectQuery<Record9<Integer, String, Integer, String, DateTime, String, DateTime, String, String>> getInternalCSV(TransactionQueryForm form) {\n         SelectQuery selectQuery = ctx.selectQuery();\n         selectQuery.addFrom(TRANSACTION);\n         selectQuery.addJoin(CONNECTOR, TRANSACTION.CONNECTOR_PK.eq(CONNECTOR.CONNECTOR_PK));\n-        selectQuery.addSelect(\n-                TRANSACTION.TRANSACTION_PK,\n-                CONNECTOR.CHARGE_BOX_ID,\n-                CONNECTOR.CONNECTOR_ID,\n-                TRANSACTION.ID_TAG,\n-                TRANSACTION.START_TIMESTAMP,\n-                TRANSACTION.START_VALUE,\n-                TRANSACTION.STOP_TIMESTAMP,\n-                TRANSACTION.STOP_VALUE,\n-                TRANSACTION.STOP_REASON\n-        );\n-\n+        selectQuery.addSelect(TRANSACTION.TRANSACTION_PK, CONNECTOR.CHARGE_BOX_ID, CONNECTOR.CONNECTOR_ID, TRANSACTION.ID_TAG, TRANSACTION.START_TIMESTAMP, TRANSACTION.START_VALUE, TRANSACTION.STOP_TIMESTAMP, TRANSACTION.STOP_VALUE, TRANSACTION.STOP_REASON);\n         return addConditions(selectQuery, form);\n     }\n \n@@ -247,30 +214,15 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n      * Difference from getInternalCSV:\n      * Joins with CHARGE_BOX and OCPP_TAG tables, selects CHARGE_BOX_PK and OCPP_TAG_PK additionally\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    private\n-    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n-    getInternal(TransactionQueryForm form) {\n \n+    @SuppressWarnings(\"unchecked\")\n+    private SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>> getInternal(TransactionQueryForm form) {\n         SelectQuery selectQuery = ctx.selectQuery();\n         selectQuery.addFrom(TRANSACTION);\n         selectQuery.addJoin(CONNECTOR, TRANSACTION.CONNECTOR_PK.eq(CONNECTOR.CONNECTOR_PK));\n         selectQuery.addJoin(CHARGE_BOX, CHARGE_BOX.CHARGE_BOX_ID.eq(CONNECTOR.CHARGE_BOX_ID));\n         selectQuery.addJoin(OCPP_TAG, OCPP_TAG.ID_TAG.eq(TRANSACTION.ID_TAG));\n-        selectQuery.addSelect(\n-                TRANSACTION.TRANSACTION_PK,\n-                CONNECTOR.CHARGE_BOX_ID,\n-                CONNECTOR.CONNECTOR_ID,\n-                TRANSACTION.ID_TAG,\n-                TRANSACTION.START_TIMESTAMP,\n-                TRANSACTION.START_VALUE,\n-                TRANSACTION.STOP_TIMESTAMP,\n-                TRANSACTION.STOP_VALUE,\n-                TRANSACTION.STOP_REASON,\n-                CHARGE_BOX.CHARGE_BOX_PK,\n-                OCPP_TAG.OCPP_TAG_PK\n-        );\n-\n+        selectQuery.addSelect(TRANSACTION.TRANSACTION_PK, CONNECTOR.CHARGE_BOX_ID, CONNECTOR.CONNECTOR_ID, TRANSACTION.ID_TAG, TRANSACTION.START_TIMESTAMP, TRANSACTION.START_VALUE, TRANSACTION.STOP_TIMESTAMP, TRANSACTION.STOP_VALUE, TRANSACTION.STOP_REASON, CHARGE_BOX.CHARGE_BOX_PK, OCPP_TAG.OCPP_TAG_PK);\n         return addConditions(selectQuery, form);\n     }\n \n@@ -296,37 +248,32 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n \n         // Default order\n         selectQuery.addOrderBy(TRANSACTION.TRANSACTION_PK.desc());\n-\n         return selectQuery;\n     }\n \n     private void processType(SelectQuery selectQuery, TransactionQueryForm form) {\n         switch (form.getPeriodType()) {\n             case TODAY:\n-                selectQuery.addConditions(\n-                        date(TRANSACTION.START_TIMESTAMP).eq(date(DateTime.now()))\n-                );\n+                selectQuery.addConditions(date(TRANSACTION.START_TIMESTAMP)\n+                    .eq(date(DateTime.now())));\n                 break;\n \n             case LAST_10:\n             case LAST_30:\n             case LAST_90:\n                 DateTime now = DateTime.now();\n-                selectQuery.addConditions(\n-                        date(TRANSACTION.START_TIMESTAMP).between(\n-                                date(now.minusDays(form.getPeriodType().getInterval())),\n-                                date(now)\n-                        )\n-                );\n+                selectQuery.addConditions(date(TRANSACTION.START_TIMESTAMP)\n+                    .between(date(now.minusDays(form.getPeriodType()\n+                        .getInterval())), date(now)));\n                 break;\n \n             case ALL:\n                 break;\n \n             case FROM_TO:\n-                selectQuery.addConditions(\n-                        TRANSACTION.START_TIMESTAMP.between(form.getFrom().toDateTime(), form.getTo().toDateTime())\n-                );\n+                selectQuery.addConditions(TRANSACTION.START_TIMESTAMP.between(form.getFrom()\n+                    .toDateTime(), form.getTo()\n+                        .toDateTime()));\n                 break;\n \n             default:\n@@ -334,27 +281,25 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n         }\n     }\n \n-    private static class TransactionMapper\n-            implements RecordMapper<Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n-                                             String, String, Integer, Integer>, Transaction> {\n+    private static class TransactionMapper implements RecordMapper<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>, Transaction> {\n+\n         @Override\n-        public Transaction map(Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n-                                        String, String, Integer, Integer> r) {\n+        public Transaction map(Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer> r) {\n             return Transaction.builder()\n-                              .id(r.value1())\n-                              .chargeBoxId(r.value2())\n-                              .connectorId(r.value3())\n-                              .ocppIdTag(r.value4())\n-                              .startTimestampDT(r.value5())\n-                              .startTimestamp(DateTimeUtils.humanize(r.value5()))\n-                              .startValue(r.value6())\n-                              .stopTimestampDT(r.value7())\n-                              .stopTimestamp(DateTimeUtils.humanize(r.value7()))\n-                              .stopValue(r.value8())\n-                              .stopReason(r.value9())\n-                              .chargeBoxPk(r.value10())\n-                              .ocppTagPk(r.value11())\n-                              .build();\n+                .id(r.value1())\n+                .chargeBoxId(r.value2())\n+                .connectorId(r.value3())\n+                .ocppIdTag(r.value4())\n+                .startTimestampDT(r.value5())\n+                .startTimestamp(DateTimeUtils.humanize(r.value5()))\n+                .startValue(r.value6())\n+                .stopTimestampDT(r.value7())\n+                .stopTimestamp(DateTimeUtils.humanize(r.value7()))\n+                .stopValue(r.value8())\n+                .stopReason(r.value9())\n+                .chargeBoxPk(r.value10())\n+                .ocppTagPk(r.value11())\n+                .build();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 158
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/85/TransactionRepositoryImpl.java\nindex b26588c8e91..120684c29b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/85/TransactionRepositoryImpl.java\n@@ -249,8 +249,9 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n      */\n     @SuppressWarnings(\"unchecked\")\n     private\n-    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n-    getInternal(TransactionQueryForm form) {\n+    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime,\n+    String, String, Integer, Integer>>\n+     getInternal(TransactionQueryForm form) {\n \n         SelectQuery selectQuery = ctx.selectQuery();\n         selectQuery.addFrom(TRANSACTION);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "252",
                    "column": "34",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "252",
                    "column": "50",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "252",
                    "column": "58",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "252",
                    "column": "58",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "253",
                    "column": "5",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "253",
                    "column": "5",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/85/TransactionRepositoryImpl.java\nindex b26588c8e91..7c5f53c7133 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/85/TransactionRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/85/TransactionRepositoryImpl.java\n@@ -249,7 +249,8 @@ public class TransactionRepositoryImpl implements TransactionRepository {\n      */\n     @SuppressWarnings(\"unchecked\")\n     private\n-    SelectQuery<Record11<Integer, String, Integer, String, DateTime, String, DateTime, String, String, Integer, Integer>>\n+    SelectQuery<Record11< Integer,String, Integer,String ,DateTime\n+    ,String, DateTime, String, String, Integer, Integer>>\n     getInternal(TransactionQueryForm form) {\n \n         SelectQuery selectQuery = ctx.selectQuery();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}