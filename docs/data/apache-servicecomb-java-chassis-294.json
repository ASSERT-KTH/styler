{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "294",
    "information": {
        "errors": [
            {
                "line": "41",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @RequestMapping(path = \"/testApiOperation\", method = RequestMethod.POST)\n  @ApiOperation(value = \"testApiOperation desc\", consumes = MediaType.APPLICATION_JSON, produces = MediaType.APPLICATION_JSON)\n  public String testApiOperation(@RequestBody String name, HttpServletRequest request) {\n    return String.format(\"testApiOperation: name=[%s], request content-type=[%s]\", name, request.getContentType());\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/294/ContentTypeSpringmvc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/294/ContentTypeSpringmvc.java\nindex 94281caeae0..f14ad3f93b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/294/ContentTypeSpringmvc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/294/ContentTypeSpringmvc.java\n@@ -48,4 +48,4 @@ public class ContentTypeSpringmvc {\n   public String testRequestMapping(@RequestBody String name, HttpServletRequest request) {\n     return String.format(\"testRequestMapping: name=[%s], request content-type=[%s]\", name, request.getContentType());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/294/ContentTypeSpringmvc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/294/ContentTypeSpringmvc.java\nindex 94281caeae0..d767dc0ad1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/294/ContentTypeSpringmvc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/294/ContentTypeSpringmvc.java\n@@ -19,12 +19,10 @@ package org.apache.servicecomb.demo.springmvc.server;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n-\n import org.apache.servicecomb.provider.rest.common.RestSchema;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-\n import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n \n@@ -34,18 +32,23 @@ import io.swagger.annotations.ApiOperation;\n public class ContentTypeSpringmvc {\n   @RequestMapping(path = \"/testGlobalSetting\", method = RequestMethod.POST)\n   public String testGlobalSetting(@RequestBody String name, HttpServletRequest request) {\n-    return String.format(\"testGlobalSetting: name=[%s], request content-type=[%s]\", name, request.getContentType());\n+    return String.format(\"testGlobalSetting: name=[%s], request content-type=[%s]\",\n+name,\n+request.getContentType());\n   }\n \n   @RequestMapping(path = \"/testApiOperation\", method = RequestMethod.POST)\n   @ApiOperation(value = \"testApiOperation desc\", consumes = MediaType.APPLICATION_JSON, produces = MediaType.APPLICATION_JSON)\n   public String testApiOperation(@RequestBody String name, HttpServletRequest request) {\n-    return String.format(\"testApiOperation: name=[%s], request content-type=[%s]\", name, request.getContentType());\n+    return String.format(\"testApiOperation: name=[%s], request content-type=[%s]\",\n+name,\n+request.getContentType());\n   }\n \n-  @RequestMapping(path = \"/testRequestMapping\", method = RequestMethod.POST,\n-      consumes = MediaType.APPLICATION_JSON, produces = MediaType.APPLICATION_JSON)\n+  @RequestMapping(path = \"/testRequestMapping\", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON, produces = MediaType.APPLICATION_JSON)\n   public String testRequestMapping(@RequestBody String name, HttpServletRequest request) {\n-    return String.format(\"testRequestMapping: name=[%s], request content-type=[%s]\", name, request.getContentType());\n+    return String.format(\"testRequestMapping: name=[%s], request content-type=[%s]\",\n+name,\n+request.getContentType());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "41",
                    "column": "48",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "42",
                    "column": "15",
                    "severity": "warning",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "42",
                    "column": "16",
                    "severity": "warning",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "42",
                    "column": "42",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "42",
                    "column": "53",
                    "severity": "warning",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/294/ContentTypeSpringmvc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/294/ContentTypeSpringmvc.java\nindex 94281caeae0..c9481318897 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/294/ContentTypeSpringmvc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/294/ContentTypeSpringmvc.java\n@@ -38,8 +38,9 @@ public class ContentTypeSpringmvc {\n   }\n \n   @RequestMapping(path = \"/testApiOperation\", method = RequestMethod.POST)\n-  @ApiOperation(value = \"testApiOperation desc\", consumes = MediaType.APPLICATION_JSON, produces = MediaType.APPLICATION_JSON)\n-  public String testApiOperation(@RequestBody String name, HttpServletRequest request) {\n+  @ApiOperation(value = \"testApiOperation desc\" ,\n+      consumes=MediaType.APPLICATION_JSON , produces= MediaType.APPLICATION_JSON)\n+   public String testApiOperation(@RequestBody String name, HttpServletRequest request) {\n     return String.format(\"testApiOperation: name=[%s], request content-type=[%s]\", name, request.getContentType());\n   }\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}