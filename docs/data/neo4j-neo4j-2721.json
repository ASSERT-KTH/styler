{
    "project_name": "neo4j-neo4j",
    "error_id": "2721",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2721/LabelViewNodeStoreScan.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2721/LabelViewNodeStoreScan.java\nindex e2dfe015d08..2d9524c4350 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2721/LabelViewNodeStoreScan.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2721/LabelViewNodeStoreScan.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import java.util.function.IntPredicate;\n@@ -34,6 +35,7 @@ import org.neo4j.storageengine.api.StorageReader;\n /**\n  * Store scan view that will try to minimize the amount of scanned nodes by using label scan store {@link LabelScanStore}\n  * as a source of known labeled node ids.\n+ *\n  * @param <FAILURE> type of exception thrown on failure\n  */\n public class LabelViewNodeStoreScan<FAILURE extends Exception> extends NodeStoreScan<FAILURE>\n@@ -41,15 +43,15 @@ public class LabelViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n     private final LabelScanStore labelScanStore;\n     private final PageCursorTracer cursorTracer;\n \n-    public LabelViewNodeStoreScan( StorageReader storageReader, LockService locks,\n-            LabelScanStore labelScanStore,\n-            @Nullable Visitor<EntityTokenUpdate,FAILURE> labelUpdateVisitor,\n-            @Nullable Visitor<EntityUpdates,FAILURE> propertyUpdatesVisitor,\n-            int[] labelIds,\n-            IntPredicate propertyKeyIdFilter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public LabelViewNodeStoreScan(StorageReader storageReader, LockService locks,\n+                                  LabelScanStore labelScanStore,\n+                                  @Nullable Visitor<EntityTokenUpdate, FAILURE> labelUpdateVisitor,\n+                                  @Nullable Visitor<EntityUpdates, FAILURE> propertyUpdatesVisitor,\n+                                  int[] labelIds,\n+                                  IntPredicate propertyKeyIdFilter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        super( storageReader, locks, labelUpdateVisitor, propertyUpdatesVisitor, labelIds,\n-                propertyKeyIdFilter, cursorTracer, memoryTracker );\n+        super(storageReader, locks, labelUpdateVisitor, propertyUpdatesVisitor, labelIds,\n+          propertyKeyIdFilter, cursorTracer, memoryTracker);\n         this.labelScanStore = labelScanStore;\n         this.cursorTracer = cursorTracer;\n     }\n@@ -57,6 +59,6 @@ public class LabelViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n     @Override\n     public EntityIdIterator getEntityIdIterator()\n     {\n-        return new TokenScanViewIdIterator<>( labelScanStore.newReader(), labelIds, entityCursor, cursorTracer );\n+        return new TokenScanViewIdIterator<>(labelScanStore.newReader(), labelIds, entityCursor, cursorTracer);\n     }\n }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2721/LabelViewNodeStoreScan.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2721/LabelViewNodeStoreScan.java\nindex e2dfe015d08..c35d7fff79e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2721/LabelViewNodeStoreScan.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2721/LabelViewNodeStoreScan.java\n@@ -59,4 +59,4 @@ public class LabelViewNodeStoreScan<FAILURE extends Exception> extends NodeStore\n     {\n         return new TokenScanViewIdIterator<>( labelScanStore.newReader(), labelIds, entityCursor, cursorTracer );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}