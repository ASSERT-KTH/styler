{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "858",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n\nimport com.services.nhinc.schema.auditmessage.AuditMessageType;\nimport com.services.nhinc.schema.auditmessage.ParticipantObjectIdentificationType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/858/PatientDiscoveryAuditTransforms.java\nindex 32c3f298bcd..dd187f134b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/858/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/858/PatientDiscoveryAuditTransforms.java\nindex 32c3f298bcd..2a86f069a54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/858/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -47,88 +48,92 @@ import org.hl7.v3.PRPAIN201306UV02;\n public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n     PRPAIN201305UV02, PRPAIN201306UV02> {\n \n-    private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n-\n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n-        AssertionType assertion, AuditMessageType auditMsg) {\n+  private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n \n-        auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n-        try {\n-            auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n-        } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n+                                                                          AssertionType assertion,\n+                                                                          AuditMessageType auditMsg) {\n \n-        return auditMsg;\n+    auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n+    try {\n+      auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n+    } catch (JAXBException ex) {\n+      LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n+          + ex.getLocalizedMessage(), ex);\n     }\n \n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        PRPAIN201306UV02 response, AssertionType assertion, AuditMessageType auditMsg) {\n+    return auditMsg;\n+  }\n \n-        auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n+                                                                           PRPAIN201306UV02 response,\n+                                                                           AssertionType assertion,\n+                                                                           AuditMessageType auditMsg) {\n \n-        try {\n-            auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n-        } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+    auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n \n-        return auditMsg;\n+    try {\n+      auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n+    } catch (JAXBException ex) {\n+      LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n+          + ex.getLocalizedMessage(), ex);\n     }\n \n-    private AuditMessageType getPatientParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n-        AuditMessageType auditMsg) {\n+    return auditMsg;\n+  }\n \n-        // Set the Partipation Object Id (patient id)\n-        II oII = PRPAIN201305UV02Parser.getPatientId(request);\n-        if (oII != null && oII.getRoot() != null && oII.getExtension() != null && !oII.getRoot().isEmpty()\n-            && !oII.getExtension().isEmpty()) {\n+  private AuditMessageType getPatientParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n+                                                                               AuditMessageType auditMsg) {\n \n-            createPatientParticipantObjectIdentification(auditMsg, oII.getRoot(), oII.getExtension());\n-        } else {\n-            createPatientParticipantObjectIdentification(auditMsg, null, null);\n-        }\n+    // Set the Partipation Object Id (patient id)\n+    II oII = PRPAIN201305UV02Parser.getPatientId(request);\n+    if (oII != null && oII.getRoot() != null && oII.getExtension() != null && !oII.getRoot().isEmpty()\n+        && !oII.getExtension().isEmpty()) {\n \n-        return auditMsg;\n+      createPatientParticipantObjectIdentification(auditMsg, oII.getRoot(), oII.getExtension());\n+    } else {\n+      createPatientParticipantObjectIdentification(auditMsg, null, null);\n     }\n \n-    private AuditMessageType getPatientParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n-        AuditMessageType auditMsg) {\n-\n-        List<II> oII = PRPAIN201306UV02Parser.getPatientIds(response);\n-        if (oII != null && oII.size() > 0) {\n-            for (II entry : oII) {\n-                if (entry != null && entry.getRoot() != null && entry.getExtension() != null\n-                    && !entry.getRoot().isEmpty() && !entry.getExtension().isEmpty()) {\n-                    createPatientParticipantObjectIdentification(auditMsg, entry.getRoot(), entry.getExtension());\n-                }\n-            }\n-        } else {\n-            createPatientParticipantObjectIdentification(auditMsg, null, null);\n-        }\n+    return auditMsg;\n+  }\n \n-        return auditMsg;\n+  private AuditMessageType getPatientParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n+                                                                                AuditMessageType auditMsg) {\n+\n+    List<II> oII = PRPAIN201306UV02Parser.getPatientIds(response);\n+    if (oII != null && oII.size() > 0) {\n+      for (II entry : oII) {\n+        if (entry != null && entry.getRoot() != null && entry.getExtension() != null\n+            && !entry.getRoot().isEmpty() && !entry.getExtension().isEmpty()) {\n+          createPatientParticipantObjectIdentification(auditMsg, entry.getRoot(), entry.getExtension());\n+        }\n+      }\n+    } else {\n+      createPatientParticipantObjectIdentification(auditMsg, null, null);\n     }\n \n-    private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n-        AuditMessageType auditMsg) throws JAXBException {\n+    return auditMsg;\n+  }\n \n-        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n-            PRPAIN201306UV02Parser.getQueryId(response));\n-        participantObject.setParticipantObjectQuery(getParticipantObjectQueryForResponse(response));\n-        auditMsg.getParticipantObjectIdentification().add(participantObject);\n-        return auditMsg;\n-    }\n+  private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n+                                                                                    AuditMessageType auditMsg)\n+      throws JAXBException {\n \n-    private byte[] getParticipantObjectQueryForResponse(PRPAIN201306UV02 response) throws JAXBException {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        if (response.getControlActProcess() != null && response.getControlActProcess().getQueryByParameter() != null) {\n-            getMarshaller().marshal(response.getControlActProcess().getQueryByParameter(), baos);\n-        }\n-        return baos.toByteArray();\n+    ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n+        PRPAIN201306UV02Parser.getQueryId(response));\n+    participantObject.setParticipantObjectQuery(getParticipantObjectQueryForResponse(response));\n+    auditMsg.getParticipantObjectIdentification().add(participantObject);\n+    return auditMsg;\n+  }\n+\n+  private byte[] getParticipantObjectQueryForResponse(PRPAIN201306UV02 response) throws JAXBException {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    if (response.getControlActProcess() != null && response.getControlActProcess().getQueryByParameter() != null) {\n+      getMarshaller().marshal(response.getControlActProcess().getQueryByParameter(), baos);\n     }\n+    return baos.toByteArray();\n+  }\n }\n",
            "diff_size": 99
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/858/PatientDiscoveryAuditTransforms.java\nindex 32c3f298bcd..0f66ee1c8c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/858/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -44,22 +45,19 @@ import org.hl7.v3.PRPAIN201306UV02;\n  *\n  * @author achidamb\n  */\n-public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n-    PRPAIN201305UV02, PRPAIN201306UV02> {\n+public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<PRPAIN201305UV02, PRPAIN201306UV02> {\n \n     private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n \n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n         AssertionType assertion, AuditMessageType auditMsg) {\n-\n-        auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n+    auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n+    }\n \n         return auditMsg;\n     }\n@@ -67,28 +65,22 @@ public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAud\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n         PRPAIN201306UV02 response, AssertionType assertion, AuditMessageType auditMsg) {\n-\n-        auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n-\n-        try {\n+    auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n+try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n+    }\n \n         return auditMsg;\n     }\n \n     private AuditMessageType getPatientParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n         AuditMessageType auditMsg) {\n-\n-        // Set the Partipation Object Id (patient id)\n+    // Set the Partipation Object Id (patient id)\n         II oII = PRPAIN201305UV02Parser.getPatientId(request);\n-        if (oII != null && oII.getRoot() != null && oII.getExtension() != null && !oII.getRoot().isEmpty()\n-            && !oII.getExtension().isEmpty()) {\n-\n-            createPatientParticipantObjectIdentification(auditMsg, oII.getRoot(), oII.getExtension());\n+        if (oII != null && oII.getRoot() != null && oII.getExtension() != null && !oII.getRoot().isEmpty() && !oII.getExtension().isEmpty()) {\n+    createPatientParticipantObjectIdentification(auditMsg, oII.getRoot(), oII.getExtension());\n         } else {\n             createPatientParticipantObjectIdentification(auditMsg, null, null);\n         }\n@@ -98,13 +90,11 @@ public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAud\n \n     private AuditMessageType getPatientParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n         AuditMessageType auditMsg) {\n-\n-        List<II> oII = PRPAIN201306UV02Parser.getPatientIds(response);\n+    List<II> oII = PRPAIN201306UV02Parser.getPatientIds(response);\n         if (oII != null && oII.size() > 0) {\n             for (II entry : oII) {\n-                if (entry != null && entry.getRoot() != null && entry.getExtension() != null\n-                    && !entry.getRoot().isEmpty() && !entry.getExtension().isEmpty()) {\n-                    createPatientParticipantObjectIdentification(auditMsg, entry.getRoot(), entry.getExtension());\n+                if (entry != null && entry.getRoot() != null && entry.getExtension() != null && !entry.getRoot().isEmpty() && !entry.getExtension().isEmpty()) {\n+    createPatientParticipantObjectIdentification(auditMsg, entry.getRoot(), entry.getExtension());\n                 }\n             }\n         } else {\n@@ -116,19 +106,19 @@ public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAud\n \n     private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n         AuditMessageType auditMsg) throws JAXBException {\n-\n-        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n-            PRPAIN201306UV02Parser.getQueryId(response));\n-        participantObject.setParticipantObjectQuery(getParticipantObjectQueryForResponse(response));\n+    ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(PRPAIN201306UV02Parser.getQueryId(response));\n+participantObject.setParticipantObjectQuery(getParticipantObjectQueryForResponse(response));\n         auditMsg.getParticipantObjectIdentification().add(participantObject);\n-        return auditMsg;\n+\n+return auditMsg;\n     }\n \n     private byte[] getParticipantObjectQueryForResponse(PRPAIN201306UV02 response) throws JAXBException {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         if (response.getControlActProcess() != null && response.getControlActProcess().getQueryByParameter() != null) {\n             getMarshaller().marshal(response.getControlActProcess().getQueryByParameter(), baos);\n-        }\n+\n+    }\n         return baos.toByteArray();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "48",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "77",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "86",
                    "column": "107",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "100",
                    "column": "37",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "61",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "92",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "column": "124",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/858/PatientDiscoveryAuditTransforms.java\nindex 32c3f298bcd..9c3cab31022 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/858/PatientDiscoveryAuditTransforms.java\n@@ -44,91 +44,90 @@ import org.hl7.v3.PRPAIN201306UV02;\n  *\n  * @author achidamb\n  */\n-public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n-    PRPAIN201305UV02, PRPAIN201306UV02> {\n+\n+\n+public class PatientDiscoveryAuditTransforms extends\n+    AbstractPatientDiscoveryAuditTransforms<PRPAIN201305UV02, PRPAIN201306UV02> {\n \n     private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n \n+\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n         AssertionType assertion, AuditMessageType auditMsg) {\n-\n         auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n         }\n-\n         return auditMsg;\n     }\n \n+\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        PRPAIN201306UV02 response, AssertionType assertion, AuditMessageType auditMsg) {\n-\n+        PRPAIN201306UV02 response,\n+        AssertionType assertion, AuditMessageType auditMsg) {\n         auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n-\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n         }\n-\n         return auditMsg;\n     }\n \n-    private AuditMessageType getPatientParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n-        AuditMessageType auditMsg) {\n+    private AuditMessageType getPatientParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request, AuditMessageType auditMsg) {\n \n         // Set the Partipation Object Id (patient id)\n         II oII = PRPAIN201305UV02Parser.getPatientId(request);\n-        if (oII != null && oII.getRoot() != null && oII.getExtension() != null && !oII.getRoot().isEmpty()\n-            && !oII.getExtension().isEmpty()) {\n-\n+        if(oII != null && oII.getRoot() != null&& oII.getExtension() != null&& !\n+                                                                                   oII.getRoot().isEmpty()&& !\n+                                                                                                                 oII.getExtension().isEmpty()) {\n             createPatientParticipantObjectIdentification(auditMsg, oII.getRoot(), oII.getExtension());\n-        } else {\n-            createPatientParticipantObjectIdentification(auditMsg, null, null);\n         }\n \n+\n+else {\n+            createPatientParticipantObjectIdentification(auditMsg, null, null);\n+        }\n         return auditMsg;\n     }\n \n-    private AuditMessageType getPatientParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n-        AuditMessageType auditMsg) {\n-\n+    private AuditMessageType getPatientParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response, AuditMessageType auditMsg) {\n         List<II> oII = PRPAIN201306UV02Parser.getPatientIds(response);\n-        if (oII != null && oII.size() > 0) {\n+        if(oII != null && oII.size()> 0) {\n             for (II entry : oII) {\n-                if (entry != null && entry.getRoot() != null && entry.getExtension() != null\n-                    && !entry.getRoot().isEmpty() && !entry.getExtension().isEmpty()) {\n+                if (entry != null && entry.getRoot() != null&& entry.getExtension() != null&& !\n+                                                                                                  entry.getRoot().isEmpty()&& !\n+                                                                                                                                  entry.getExtension().isEmpty()) {\n                     createPatientParticipantObjectIdentification(auditMsg, entry.getRoot(), entry.getExtension());\n                 }\n             }\n-        } else {\n-            createPatientParticipantObjectIdentification(auditMsg, null, null);\n         }\n \n+\n+else {\n+            createPatientParticipantObjectIdentification(auditMsg, null, null);\n+        }\n         return auditMsg;\n     }\n \n-    private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response,\n-        AuditMessageType auditMsg) throws JAXBException {\n-\n-        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(\n-            PRPAIN201306UV02Parser.getQueryId(response));\n+    private AuditMessageType getQueryParamsParticipantObjectIdentificationForResponse(PRPAIN201306UV02 response, AuditMessageType auditMsg) throws JAXBException {\n+        ParticipantObjectIdentificationType participantObject = buildBaseParticipantObjectIdentificationType(PRPAIN201306UV02Parser.getQueryId(response));\n         participantObject.setParticipantObjectQuery(getParticipantObjectQueryForResponse(response));\n         auditMsg.getParticipantObjectIdentification().add(participantObject);\n         return auditMsg;\n     }\n \n-    private byte[] getParticipantObjectQueryForResponse(PRPAIN201306UV02 response) throws JAXBException {\n+    private byte\n+                [ ] getParticipantObjectQueryForResponse(PRPAIN201306UV02 response) throws JAXBException {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         if (response.getControlActProcess() != null && response.getControlActProcess().getQueryByParameter() != null) {\n             getMarshaller().marshal(response.getControlActProcess().getQueryByParameter(), baos);\n         }\n         return baos.toByteArray();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/858/PatientDiscoveryAuditTransforms.java\nindex 32c3f298bcd..79512630e43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/858/PatientDiscoveryAuditTransforms.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n-\n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n import com.services.nhinc.schema.auditmessage.ParticipantObjectIdentificationType;\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/858/PatientDiscoveryAuditTransforms.java\nindex 32c3f298bcd..dd187f134b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/858/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/858/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}