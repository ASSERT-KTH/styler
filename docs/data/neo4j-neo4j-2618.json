{
    "project_name": "neo4j-neo4j",
    "error_id": "2618",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2618/ExecutingQueryStatus.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2618/ExecutingQueryStatus.java\nindex 4909a19bdca..1ed8d3f29b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2618/ExecutingQueryStatus.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2618/ExecutingQueryStatus.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.query;\n \n import java.util.Collections;\n@@ -39,17 +40,17 @@ abstract class ExecutingQueryStatus\n     static final String PLANNED_STATE = \"planned\";\n     static final String RUNNING_STATE = \"running\";\n     static final String WAITING_STATE = \"waiting\";\n+\n     /**\n      * Time in nanoseconds that has been spent waiting in the current state.\n      * This is the portion of wait time not included in the {@link ExecutingQuery#waitTimeNanos} field.\n      *\n-     * @param currentTimeNanos\n-     *         the current timestamp on the nano clock.\n+     * @param currentTimeNanos the current timestamp on the nano clock.\n      * @return the time between the time this state started waiting and the provided timestamp.\n      */\n-    abstract long waitTimeNanos( long currentTimeNanos );\n+    abstract long waitTimeNanos(long currentTimeNanos);\n \n-    abstract Map<String,Object> toMap( long currentTimeNanos );\n+    abstract Map<String, Object> toMap(long currentTimeNanos);\n \n     abstract String name();\n \n@@ -60,6 +61,7 @@ abstract class ExecutingQueryStatus\n \n     /**\n      * Is query waiting on a locks\n+     *\n      * @return true if waiting on locks, false otherwise\n      */\n     boolean isWaitingOnLocks()\n@@ -69,6 +71,7 @@ abstract class ExecutingQueryStatus\n \n     /**\n      * List of locks query is waiting on. Will be empty for all of the statuses except for {@link WaitingOnLock}.\n+     *\n      * @return list of locks query is waiting on, empty list if query is not waiting.\n      */\n     List<ActiveLock> waitingOnLocks()\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}