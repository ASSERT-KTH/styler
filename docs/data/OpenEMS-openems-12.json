{
    "project_name": "OpenEMS-openems",
    "error_id": "12",
    "information": {
        "errors": [
            {
                "line": "151",
                "column": "44",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "\t@Override\n\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n\t\treturn new ModbusSlaveTable( //\n\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n\t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n\t\t);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/12/VirtualAdd.java\nindex b4d7c23c24d..d416ad59b66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler/12/VirtualAdd.java\n@@ -148,7 +148,7 @@ public class VirtualAdd extends AbstractOpenemsComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "151",
                    "column": "32",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/12/VirtualAdd.java\nindex b4d7c23c24d..fc9c8d2e259 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/12/VirtualAdd.java\n@@ -37,120 +37,120 @@ import io.openems.edge.meter.api.VirtualMeter;\n \n @Designate(ocd = Config.class, factory = true)\n @Component(name = \"Meter.Virtual.Symmetric.Add\", //\n-\t\timmediate = true, //\n-\t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n-\t\tproperty = EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE//\n+    immediate = true, //\n+    configurationPolicy = ConfigurationPolicy.REQUIRE, //\n+    property = EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE//\n ) //\n public class VirtualAdd extends AbstractOpenemsComponent\n-\t\timplements VirtualMeter, SymmetricMeter, OpenemsComponent, EventHandler, ModbusSlave {\n-\n-\tprivate final Logger log = LoggerFactory.getLogger(VirtualAdd.class);\n-\n-\tprivate MeterType meterType = MeterType.PRODUCTION;\n-\n-\t@Reference\n-\tprotected ComponentManager componentManager;\n-\n-\tprivate Config config;\n-\n-\t@Reference(policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MULTIPLE)\n-\tprivate volatile List<SymmetricMeter> symmetricMeter = new CopyOnWriteArrayList<>();\n-\n-\tpublic VirtualAdd() {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tSymmetricMeter.ChannelId.values() //\n-\t\t);\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) throws OpenemsNamedException {\n-\t\tsuper.activate(context, config.id(), config.alias(), config.enabled());\n-\t\tthis.config = config;\n-\t\tthis.meterType = config.type();\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\t@Override\n-\tpublic void handleEvent(Event event) {\n-\t\tif (!this.isEnabled()) {\n-\t\t\treturn;\n-\t\t}\n-\t\tswitch (event.getTopic()) {\n-\t\tcase EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE:\n-\t\t\tthis.calculateChannelValues();\n-\t\t}\n-\t}\n-\n-\tprivate void calculateChannelValues() {\n-\t\t// Find all configured SymmetricMeters\n-\t\tList<SymmetricMeter> meters = new ArrayList<SymmetricMeter>();\n-\t\ttry {\n-\t\t\tfor (String meterId : this.config.meterIds()) {\n-\t\t\t\tSymmetricMeter mts = this.componentManager.getComponent(meterId);\n-\t\t\t\tmeters.add(mts);\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tthis.logError(this.log, e.getClass().getSimpleName() + \": \" + e.getMessage());\n-\t\t}\n-\n-\t\tfinal CalculateAverage meterFrequency = new CalculateAverage();\n-\t\tfinal CalculateIntegerSum meterMinActivePower = new CalculateIntegerSum();\n-\t\tfinal CalculateIntegerSum meterMaxActivePower = new CalculateIntegerSum();\n-\t\tfinal CalculateIntegerSum meterActivePower = new CalculateIntegerSum();\n-\t\tfinal CalculateIntegerSum meterReactivePower = new CalculateIntegerSum();\n-\t\tfinal CalculateLongSum meterActiveProductionEnergy = new CalculateLongSum();\n-\t\tfinal CalculateLongSum meterActiveConsumptionEnergy = new CalculateLongSum();\n-\t\tfinal CalculateAverage meterVoltage = new CalculateAverage();\n-\t\tfinal CalculateIntegerSum meterCurrent = new CalculateIntegerSum();\n-\n-\t\tfor (SymmetricMeter meter : meters) {\n-\t\t\tmeterFrequency.addValue(meter.getFrequencyChannel());\n-\t\t\tmeterMinActivePower.addValue(meter.getMinActivePowerChannel());\n-\t\t\tmeterMaxActivePower.addValue(meter.getMaxActivePowerChannel());\n-\t\t\tmeterActivePower.addValue(meter.getActivePowerChannel());\n-\t\t\tmeterReactivePower.addValue(meter.getReactivePowerChannel());\n-\t\t\tmeterActiveConsumptionEnergy.addValue(getActiveConsumptionEnergyChannel());\n-\t\t\tmeterActiveProductionEnergy.addValue(meter.getActiveProductionEnergyChannel());\n-\t\t\tmeterVoltage.addValue(meter.getVoltageChannel());\n-\t\t\tmeterCurrent.addValue(meter.getCurrentChannel());\n-\t\t}\n-\n-\t\tthis.getFrequencyChannel().setNextValue(meterFrequency.calculate());\n-\t\tthis._setMinActivePower(meterMinActivePower.calculate());\n-\t\tthis._setMaxActivePower(meterMaxActivePower.calculate());\n-\t\tthis._setActivePower(meterActivePower.calculate());\n-\t\tthis._setReactivePower(meterReactivePower.calculate());\n-\t\tthis._setActiveConsumptionEnergy(meterActiveConsumptionEnergy.calculate());\n-\t\tthis._setActiveProductionEnergy(meterActiveProductionEnergy.calculate());\n-\t\tthis.getVoltageChannel().setNextValue(meterVoltage.calculate());\n-\t\tthis._setCurrent(meterCurrent.calculate());\n-\t}\n-\n-\t@Override\n-\tpublic MeterType getMeterType() {\n-\t\treturn this.meterType;\n-\t}\n-\n-\t@Override\n-\tpublic String debugLog() {\n-\t\treturn \"L:\" + this.getActivePower().asString();\n-\t}\n-\n-\t@Override\n-\tpublic boolean addToSum() {\n-\t\treturn this.config.addToSum();\n-\t}\n-\n-\t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n-\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n-\t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n-\t\t);\n-\t}\n+    implements VirtualMeter, SymmetricMeter, OpenemsComponent, EventHandler, ModbusSlave {\n+\n+  private final Logger log = LoggerFactory.getLogger(VirtualAdd.class);\n+\n+  private MeterType meterType = MeterType.PRODUCTION;\n+\n+  @Reference\n+  protected ComponentManager componentManager;\n+\n+  private Config config;\n+\n+  @Reference(policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MULTIPLE)\n+  private volatile List<SymmetricMeter> symmetricMeter = new CopyOnWriteArrayList<>();\n+\n+  public VirtualAdd() {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        SymmetricMeter.ChannelId.values() //\n+    );\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) throws OpenemsNamedException {\n+    super.activate(context, config.id(), config.alias(), config.enabled());\n+    this.config = config;\n+    this.meterType = config.type();\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  @Override\n+  public void handleEvent(Event event) {\n+    if (!this.isEnabled()) {\n+      return;\n+    }\n+    switch (event.getTopic()) {\n+      case EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE:\n+        this.calculateChannelValues();\n+    }\n+  }\n+\n+  private void calculateChannelValues() {\n+    // Find all configured SymmetricMeters\n+    List<SymmetricMeter> meters = new ArrayList<SymmetricMeter>();\n+    try {\n+      for (String meterId : this.config.meterIds()) {\n+        SymmetricMeter mts = this.componentManager.getComponent(meterId);\n+        meters.add(mts);\n+      }\n+    } catch (Exception e) {\n+      this.logError(this.log, e.getClass().getSimpleName() + \": \" + e.getMessage());\n+    }\n+\n+    final CalculateAverage meterFrequency = new CalculateAverage();\n+    final CalculateIntegerSum meterMinActivePower = new CalculateIntegerSum();\n+    final CalculateIntegerSum meterMaxActivePower = new CalculateIntegerSum();\n+    final CalculateIntegerSum meterActivePower = new CalculateIntegerSum();\n+    final CalculateIntegerSum meterReactivePower = new CalculateIntegerSum();\n+    final CalculateLongSum meterActiveProductionEnergy = new CalculateLongSum();\n+    final CalculateLongSum meterActiveConsumptionEnergy = new CalculateLongSum();\n+    final CalculateAverage meterVoltage = new CalculateAverage();\n+    final CalculateIntegerSum meterCurrent = new CalculateIntegerSum();\n+\n+    for (SymmetricMeter meter : meters) {\n+      meterFrequency.addValue(meter.getFrequencyChannel());\n+      meterMinActivePower.addValue(meter.getMinActivePowerChannel());\n+      meterMaxActivePower.addValue(meter.getMaxActivePowerChannel());\n+      meterActivePower.addValue(meter.getActivePowerChannel());\n+      meterReactivePower.addValue(meter.getReactivePowerChannel());\n+      meterActiveConsumptionEnergy.addValue(getActiveConsumptionEnergyChannel());\n+      meterActiveProductionEnergy.addValue(meter.getActiveProductionEnergyChannel());\n+      meterVoltage.addValue(meter.getVoltageChannel());\n+      meterCurrent.addValue(meter.getCurrentChannel());\n+    }\n+\n+    this.getFrequencyChannel().setNextValue(meterFrequency.calculate());\n+    this._setMinActivePower(meterMinActivePower.calculate());\n+    this._setMaxActivePower(meterMaxActivePower.calculate());\n+    this._setActivePower(meterActivePower.calculate());\n+    this._setReactivePower(meterReactivePower.calculate());\n+    this._setActiveConsumptionEnergy(meterActiveConsumptionEnergy.calculate());\n+    this._setActiveProductionEnergy(meterActiveProductionEnergy.calculate());\n+    this.getVoltageChannel().setNextValue(meterVoltage.calculate());\n+    this._setCurrent(meterCurrent.calculate());\n+  }\n+\n+  @Override\n+  public MeterType getMeterType() {\n+    return this.meterType;\n+  }\n+\n+  @Override\n+  public String debugLog() {\n+    return \"L:\" + this.getActivePower().asString();\n+  }\n+\n+  @Override\n+  public boolean addToSum() {\n+    return this.config.addToSum();\n+  }\n+\n+  @Override\n+  public ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+    return new ModbusSlaveTable( //\n+        OpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n+        SymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n+    );\n+  }\n }\n",
            "diff_size": 114
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/12/VirtualAdd.java\nindex b4d7c23c24d..e3c9e292619 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/12/VirtualAdd.java\n@@ -148,9 +148,9 @@ public class VirtualAdd extends AbstractOpenemsComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/12/VirtualAdd.java\nindex b4d7c23c24d..d416ad59b66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_random/12/VirtualAdd.java\n@@ -148,7 +148,7 @@ public class VirtualAdd extends AbstractOpenemsComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/12/VirtualAdd.java\nindex b4d7c23c24d..d416ad59b66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/12/VirtualAdd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/styler_three_grams/12/VirtualAdd.java\n@@ -148,7 +148,7 @@ public class VirtualAdd extends AbstractOpenemsComponent\n \n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}