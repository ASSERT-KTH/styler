{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4458",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4458/StringCollisionValues.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4458/StringCollisionValues.java\nindex af5c1d02d10..ed30a7da1be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4458/StringCollisionValues.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4458/StringCollisionValues.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache.idmapping.string;\n \n import org.neo4j.string.UTF8;\n@@ -34,94 +35,94 @@ import static org.neo4j.io.pagecache.PageCache.PAGE_SIZE;\n  */\n public class StringCollisionValues implements CollisionValues\n {\n-    private final long chunkSize;\n-    private final ByteArray cache;\n-    private long offset;\n-    private ByteArray current;\n+  private final long chunkSize;\n+  private final ByteArray cache;\n+  private long offset;\n+  private ByteArray current;\n \n-    public StringCollisionValues( NumberArrayFactory factory, long length )\n+  public StringCollisionValues(NumberArrayFactory factory, long length)\n+  {\n+    // Let's have length (also chunk size) be divisible by PAGE_SIZE, such that our calculations below\n+    // works for all NumberArray implementations.\n+    int remainder = (int) (length % PAGE_SIZE);\n+    if (remainder != 0)\n     {\n-        // Let's have length (also chunk size) be divisible by PAGE_SIZE, such that our calculations below\n-        // works for all NumberArray implementations.\n-        int remainder = (int) (length % PAGE_SIZE);\n-        if ( remainder != 0 )\n-        {\n-            length += PAGE_SIZE - remainder;\n-        }\n-\n-        chunkSize = max( length, PAGE_SIZE );\n-        cache = factory.newDynamicByteArray( chunkSize, new byte[1] );\n-        current = cache.at( 0 );\n+      length += PAGE_SIZE - remainder;\n     }\n \n-    @Override\n-    public long add( Object id )\n-    {\n-        String string = (String) id;\n-        byte[] bytes = UTF8.encode( string );\n-        int length = bytes.length;\n-        if ( length > 0xFFFF )\n-        {\n-            throw new IllegalArgumentException( string );\n-        }\n-\n-        long startOffset = offset;\n-        cache.setByte( offset++, 0, (byte) length );\n-        cache.setByte( offset++, 0, (byte) (length >>> Byte.SIZE) );\n-        current = cache.at( offset );\n-        for ( int i = 0; i < length; )\n-        {\n-            int bytesLeftToWrite = length - i;\n-            int bytesLeftInChunk = (int) (chunkSize - offset % chunkSize);\n-            int bytesToWriteInThisChunk = min( bytesLeftToWrite, bytesLeftInChunk );\n-            for ( int j = 0; j < bytesToWriteInThisChunk; j++ )\n-            {\n-                current.setByte( offset++, 0, bytes[i++] );\n-            }\n-\n-            if ( length > i )\n-            {\n-                current = cache.at( offset );\n-            }\n-        }\n+    chunkSize = max(length, PAGE_SIZE);\n+    cache = factory.newDynamicByteArray(chunkSize, new byte[1]);\n+    current = cache.at(0);\n+  }\n \n-        return startOffset;\n+  @Override\n+  public long add(Object id)\n+  {\n+    String string = (String) id;\n+    byte[] bytes = UTF8.encode(string);\n+    int length = bytes.length;\n+    if (length > 0xFFFF)\n+    {\n+      throw new IllegalArgumentException(string);\n     }\n \n-    @Override\n-    public Object get( long offset )\n+    long startOffset = offset;\n+    cache.setByte(offset++, 0, (byte) length);\n+    cache.setByte(offset++, 0, (byte) (length >>> Byte.SIZE));\n+    current = cache.at(offset);\n+    for (int i = 0; i < length; )\n     {\n-        int length = cache.getByte( offset++, 0 ) & 0xFF;\n-        length |= (cache.getByte( offset++, 0 ) & 0xFF) << Byte.SIZE;\n-        ByteArray array = cache.at( offset );\n-        byte[] bytes = new byte[length];\n-        for ( int i = 0; i < length; )\n-        {\n-            int bytesLeftToRead = length - i;\n-            int bytesLeftInChunk = (int) (chunkSize - offset % chunkSize);\n-            int bytesToReadInThisChunk = min( bytesLeftToRead, bytesLeftInChunk );\n-            for ( int j = 0; j < bytesToReadInThisChunk; j++ )\n-            {\n-                bytes[i++] = array.getByte( offset++, 0 );\n-            }\n+      int bytesLeftToWrite = length - i;\n+      int bytesLeftInChunk = (int) (chunkSize - offset % chunkSize);\n+      int bytesToWriteInThisChunk = min(bytesLeftToWrite, bytesLeftInChunk);\n+      for (int j = 0; j < bytesToWriteInThisChunk; j++)\n+      {\n+        current.setByte(offset++, 0, bytes[i++]);\n+      }\n \n-            if ( length > i )\n-            {\n-                array = cache.at( offset );\n-            }\n-        }\n-        return UTF8.decode( bytes );\n+      if (length > i)\n+      {\n+        current = cache.at(offset);\n+      }\n     }\n \n-    @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-    {\n-        cache.acceptMemoryStatsVisitor( visitor );\n-    }\n+    return startOffset;\n+  }\n \n-    @Override\n-    public void close()\n+  @Override\n+  public Object get(long offset)\n+  {\n+    int length = cache.getByte(offset++, 0) & 0xFF;\n+    length |= (cache.getByte(offset++, 0) & 0xFF) << Byte.SIZE;\n+    ByteArray array = cache.at(offset);\n+    byte[] bytes = new byte[length];\n+    for (int i = 0; i < length; )\n     {\n-        cache.close();\n+      int bytesLeftToRead = length - i;\n+      int bytesLeftInChunk = (int) (chunkSize - offset % chunkSize);\n+      int bytesToReadInThisChunk = min(bytesLeftToRead, bytesLeftInChunk);\n+      for (int j = 0; j < bytesToReadInThisChunk; j++)\n+      {\n+        bytes[i++] = array.getByte(offset++, 0);\n+      }\n+\n+      if (length > i)\n+      {\n+        array = cache.at(offset);\n+      }\n     }\n+    return UTF8.decode(bytes);\n+  }\n+\n+  @Override\n+  public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+  {\n+    cache.acceptMemoryStatsVisitor(visitor);\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    cache.close();\n+  }\n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "101",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4458/StringCollisionValues.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4458/StringCollisionValues.java\nindex af5c1d02d10..ce96f866db2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4458/StringCollisionValues.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4458/StringCollisionValues.java\n@@ -43,7 +43,7 @@ public class StringCollisionValues implements CollisionValues\n     {\n         // Let's have length (also chunk size) be divisible by PAGE_SIZE, such that our calculations below\n         // works for all NumberArray implementations.\n-        int remainder = (int) (length % PAGE_SIZE);\n+        int remainder = ( int) ( length % PAGE_SIZE);\n         if ( remainder != 0 )\n         {\n             length += PAGE_SIZE - remainder;\n@@ -67,19 +67,19 @@ public class StringCollisionValues implements CollisionValues\n \n         long startOffset = offset;\n         cache.setByte( offset++, 0, (byte) length );\n-        cache.setByte( offset++, 0, (byte) (length >>> Byte.SIZE) );\n+        cache.setByte( offset++, 0, (byte) ( length >>> Byte.SIZE) );\n         current = cache.at( offset );\n         for ( int i = 0; i < length; )\n         {\n             int bytesLeftToWrite = length - i;\n-            int bytesLeftInChunk = (int) (chunkSize - offset % chunkSize);\n+            int bytesLeftInChunk = ( int) ( chunkSize - offset % chunkSize);\n             int bytesToWriteInThisChunk = min( bytesLeftToWrite, bytesLeftInChunk );\n             for ( int j = 0; j < bytesToWriteInThisChunk; j++ )\n             {\n                 current.setByte( offset++, 0, bytes[i++] );\n             }\n \n-            if ( length > i )\n+            if ( length> i )\n             {\n                 current = cache.at( offset );\n             }\n@@ -98,14 +98,14 @@ public class StringCollisionValues implements CollisionValues\n         for ( int i = 0; i < length; )\n         {\n             int bytesLeftToRead = length - i;\n-            int bytesLeftInChunk = (int) (chunkSize - offset % chunkSize);\n+            int bytesLeftInChunk = ( int) ( chunkSize - offset % chunkSize);\n             int bytesToReadInThisChunk = min( bytesLeftToRead, bytesLeftInChunk );\n             for ( int j = 0; j < bytesToReadInThisChunk; j++ )\n             {\n                 bytes[i++] = array.getByte( offset++, 0 );\n             }\n \n-            if ( length > i )\n+            if ( length> i )\n             {\n                 array = cache.at( offset );\n             }\n@@ -124,4 +124,4 @@ public class StringCollisionValues implements CollisionValues\n     {\n         cache.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}