{
    "project_name": "wso2-attic-commons",
    "error_id": "84",
    "information": {
        "errors": [
            {
                "line": "193",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      \t// we now need to output entry type names that actually pertain to the artifact type\n      \tpw.print(\n                WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n\t  }\n\t  else\n\t  {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/84/EntryImpl.java\nindex b607759b52a..35b4d22e7ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/84/EntryImpl.java\n@@ -190,9 +190,9 @@ public class EntryImpl extends EntryResultImpl implements Entry\n       \t// we use the same actual entry for both message and envelope artifacts\n       \t// we now need to output entry type names that actually pertain to the artifact type\n       \tpw.print(\n-                WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n-\t  }\n-\t  else\n+            WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n+ }\n+   else\n \t  {\n         pw.print(\n           WSIConstants.ATTR_TYPE + \"=\\\"\" + this.entryType.getTypeName() + \"\\\" \");\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/84/EntryImpl.java\nindex b607759b52a..853713c40dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/84/EntryImpl.java\n@@ -8,6 +8,7 @@\n  * Contributors:\n  *   IBM - Initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsi.internal.core.report.impl;\n \n import java.io.PrintWriter;\n@@ -25,12 +26,11 @@ import org.eclipse.wst.wsi.internal.core.xml.XMLUtils;\n \n /**\n  * This class represents an entry in a report.\n- * \n- * @version 1.0.1\n+ *\n  * @author Peter Brittenham  (peterbr@us.ibm.com)\n+ * @version 1.0.1\n  */\n-public class EntryImpl extends EntryResultImpl implements Entry\n-{\n+public class EntryImpl extends EntryResultImpl implements Entry {\n   /**\n    * Entry type.\n    */\n@@ -64,148 +64,130 @@ public class EntryImpl extends EntryResultImpl implements Entry\n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getEntryType()\n    */\n-  public EntryType getEntryType()\n-  {\n+  public EntryType getEntryType() {\n     return this.entryType;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#setEntryType(EntryType)\n    */\n-  public void setEntryType(EntryType entryType)\n-  {\n+  public void setEntryType(EntryType entryType) {\n     this.entryType = entryType;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getArtifactName()\n    */\n-  public String getArtifactName()\n-  {\n+  public String getArtifactName() {\n     return this.artifactName;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#setArtifactName(java.lang.String)\n    */\n-  public void setArtifactName(String artifactName)\n-  {\n+  public void setArtifactName(String artifactName) {\n     this.artifactName = artifactName;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getReferenceID()\n    */\n-  public String getReferenceID()\n-  {\n+  public String getReferenceID() {\n     return this.referenceID;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#setReferenceID(String)\n    */\n-  public void setReferenceID(String referenceID)\n-  {\n+  public void setReferenceID(String referenceID) {\n     this.referenceID = referenceID;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getParentElementName()\n    */\n-  public String getParentElementName()\n-  {\n+  public String getParentElementName() {\n     return this.parentElementName;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#setParentElementName(String)\n    */\n-  public void setParentElementName(String parentElementName)\n-  {\n+  public void setParentElementName(String parentElementName) {\n     this.parentElementName = parentElementName;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getEntryDetail()\n    */\n-  public Object getEntryDetail()\n-  {\n+  public Object getEntryDetail() {\n     return this.entryDetail;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#setEntryDetail(Object)\n    */\n-  public void setEntryDetail(Object entryDetail)\n-  {\n+  public void setEntryDetail(Object entryDetail) {\n     this.entryDetail = entryDetail;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getEntryContainer()\n    */\n-  public EntryContainer getEntryContainer()\n-  {\n+  public EntryContainer getEntryContainer() {\n     return this.entryContainer;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#setEntryContainer(org.wsi.test.report.EntryContainer)\n    */\n-  public void setEntryContainer(EntryContainer entryContainer)\n-  {\n+  public void setEntryContainer(EntryContainer entryContainer) {\n     this.entryContainer = entryContainer;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.EntryResult#addAssertionResult(AssertionResult)\n    */\n-  public void addAssertionResult(AssertionResult assertionResult)\n-  {\n+  public void addAssertionResult(AssertionResult assertionResult) {\n     super.addAssertionResult(assertionResult);\n \n-    if (this.entryContainer != null)\n+    if (this.entryContainer != null) {\n       this.entryContainer.addAssertionResult(assertionResult);\n+    }\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getStartXMLString(String)\n    */\n-  public String getStartXMLString(String namespaceName, boolean showLogEntry, boolean envelopeArtifactType)\n-  {\n+  public String getStartXMLString(String namespaceName, boolean showLogEntry, boolean envelopeArtifactType) {\n     StringWriter sw = new StringWriter();\n     PrintWriter pw = new PrintWriter(sw);\n \n     String nsName = namespaceName;\n-    if ((!nsName.equals(\"\") && (!nsName.endsWith(\":\"))))\n+    if ((!nsName.equals(\"\") && (!nsName.endsWith(\":\")))) {\n       nsName += \":\";\n+    }\n \n     // Create element \n     pw.print(\"    <\" + nsName + ELEM_NAME + \" \");\n \n-    if (this.entryType != null)\n-    {\n-      if (envelopeArtifactType)\n-\t  {\n-      \t// we use the same actual entry for both message and envelope artifacts\n-      \t// we now need to output entry type names that actually pertain to the artifact type\n-      \tpw.print(\n-                WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n-\t  }\n-\t  else\n-\t  {\n+    if (this.entryType != null) {\n+      if (envelopeArtifactType) {\n+        // we use the same actual entry for both message and envelope artifacts\n+        // we now need to output entry type names that actually pertain to the artifact type\n+        pw.print(\n+          WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n+      } else {\n         pw.print(\n           WSIConstants.ATTR_TYPE + \"=\\\"\" + this.entryType.getTypeName() + \"\\\" \");\n-\t  }\n-    }\n-\n-    else if (this.artifactName != null)\n-    {\n+      }\n+    } else if (this.artifactName != null) {\n       pw.print(WSIConstants.ATTR_TYPE + \"=\\\"[\" + this.artifactName + \"]\\\" \");\n     }\n \n-    if (this.referenceID != null)\n+    if (this.referenceID != null) {\n       pw.print(WSIConstants.ATTR_REFERENCE_ID + \"=\\\"\" + XMLUtils.xmlEscapedString(this.referenceID) + \"\\\" \");\n+    }\n \n \n     // If service name was set then add it\n@@ -217,12 +199,11 @@ public class EntryImpl extends EntryResultImpl implements Entry\n     //      that log entries should be added\n \n     // If target is a log entry, then add reference to it\n-    if ((entryType != null) && (entryType.getArtifactType().isLoggable()) && (showLogEntry)) \n-    {\n+    if ((entryType != null) && (entryType.getArtifactType().isLoggable()) && (showLogEntry)) {\n       DocumentElement logEntry = (DocumentElement) entryDetail;\n       pw.println(\"value=\\\"\" + logEntry.toXMLString(WSIConstants.NS_NAME_WSI_LOG) + \"\\\" \");\n     }\n-   \n+\n     // End element\n     pw.println(\">\");\n \n@@ -232,19 +213,18 @@ public class EntryImpl extends EntryResultImpl implements Entry\n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getStartXMLString(String)\n    */\n-  public String getStartXMLString(String namespaceName, boolean showLogEntry)\n-  {\n-  \treturn getStartXMLString(namespaceName, showLogEntry, false);\n+  public String getStartXMLString(String namespaceName, boolean showLogEntry) {\n+    return getStartXMLString(namespaceName, showLogEntry, false);\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.Entry#getEndXMLString(String)\n    */\n-  public String getEndXMLString(String namespaceName)\n-  {\n+  public String getEndXMLString(String namespaceName) {\n     String nsName = namespaceName;\n-    if ((!nsName.equals(\"\") && (!nsName.endsWith(\":\"))))\n+    if ((!nsName.equals(\"\") && (!nsName.endsWith(\":\")))) {\n       nsName += \":\";\n+    }\n \n     return \"    </\" + nsName + ELEM_NAME + \">\";\n   }\n@@ -252,25 +232,23 @@ public class EntryImpl extends EntryResultImpl implements Entry\n   /* (non-Javadoc)\n    * @see org.wsi.test.document.DocumentElement#toXMLString(String)\n    */\n-  public String toXMLString(String namespaceName)\n-  {\n+  public String toXMLString(String namespaceName) {\n     // Return string\n     return getStartXMLString(\"\", false) + getEndXMLString(\"\");\n   }\n \n-  public String getCorrespondingEnvelopeEntryTypeName(String messageEntryTypeName)\n-  {\n-  \tString envelopeEntryTypeName = messageEntryTypeName;\n-  \tif (messageEntryTypeName != null)\n-  \t{\n-  \tif (messageEntryTypeName.equals(MessageValidator.TYPE_MESSAGE_ANY))\n-  \t\tenvelopeEntryTypeName = EnvelopeValidator.TYPE_ENVELOPE_ANY;\n-  \telse if (messageEntryTypeName.equals(MessageValidator.TYPE_MESSAGE_REQUEST))\n-  \t\tenvelopeEntryTypeName = EnvelopeValidator.TYPE_ENVELOPE_REQUEST;\n-  \telse if (messageEntryTypeName.equals(MessageValidator.TYPE_MESSAGE_RESPONSE))\n-  \t\tenvelopeEntryTypeName = EnvelopeValidator.TYPE_ENVELOPE_RESPONSE;\n-  \t}\n-\n-  \treturn envelopeEntryTypeName;\n+  public String getCorrespondingEnvelopeEntryTypeName(String messageEntryTypeName) {\n+    String envelopeEntryTypeName = messageEntryTypeName;\n+    if (messageEntryTypeName != null) {\n+      if (messageEntryTypeName.equals(MessageValidator.TYPE_MESSAGE_ANY)) {\n+        envelopeEntryTypeName = EnvelopeValidator.TYPE_ENVELOPE_ANY;\n+      } else if (messageEntryTypeName.equals(MessageValidator.TYPE_MESSAGE_REQUEST)) {\n+        envelopeEntryTypeName = EnvelopeValidator.TYPE_ENVELOPE_REQUEST;\n+      } else if (messageEntryTypeName.equals(MessageValidator.TYPE_MESSAGE_RESPONSE)) {\n+        envelopeEntryTypeName = EnvelopeValidator.TYPE_ENVELOPE_RESPONSE;\n+      }\n+    }\n+\n+    return envelopeEntryTypeName;\n   }\n }\n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/84/EntryImpl.java\nindex b607759b52a..3acdf8e6001 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/84/EntryImpl.java\n@@ -185,21 +185,18 @@ public class EntryImpl extends EntryResultImpl implements Entry\n \n     if (this.entryType != null)\n     {\n-      if (envelopeArtifactType)\n-\t  {\n+      if (envelopeArtifactType) {\n       \t// we use the same actual entry for both message and envelope artifacts\n       \t// we now need to output entry type names that actually pertain to the artifact type\n-      \tpw.print(\n-                WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n-\t  }\n+      \tpw.print(WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n+  }\n \t  else\n \t  {\n         pw.print(\n           WSIConstants.ATTR_TYPE + \"=\\\"\" + this.entryType.getTypeName() + \"\\\" \");\n-\t  }\n-    }\n-\n-    else if (this.artifactName != null)\n+\t}\n+\t}\n+else if (this.artifactName != null)\n     {\n       pw.print(WSIConstants.ATTR_TYPE + \"=\\\"[\" + this.artifactName + \"]\\\" \");\n     }\n@@ -207,8 +204,7 @@ public class EntryImpl extends EntryResultImpl implements Entry\n     if (this.referenceID != null)\n       pw.print(WSIConstants.ATTR_REFERENCE_ID + \"=\\\"\" + XMLUtils.xmlEscapedString(this.referenceID) + \"\\\" \");\n \n-\n-    // If service name was set then add it\n+// If service name was set then add it\n     //if (parentElementName != null) {\n     //  pw.print(\" \" + WSIConstants.ATTR_PARENT_ELEMENT_NAME + \"=\\\"\" + this.parentElementName + \"\\\"\");\n     //}\n@@ -273,4 +269,4 @@ public class EntryImpl extends EntryResultImpl implements Entry\n \n   \treturn envelopeEntryTypeName;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/84/EntryImpl.java\nindex b607759b52a..35b4d22e7ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/84/EntryImpl.java\n@@ -190,9 +190,9 @@ public class EntryImpl extends EntryResultImpl implements Entry\n       \t// we use the same actual entry for both message and envelope artifacts\n       \t// we now need to output entry type names that actually pertain to the artifact type\n       \tpw.print(\n-                WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n-\t  }\n-\t  else\n+            WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n+ }\n+   else\n \t  {\n         pw.print(\n           WSIConstants.ATTR_TYPE + \"=\\\"\" + this.entryType.getTypeName() + \"\\\" \");\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/84/EntryImpl.java\nindex b607759b52a..a1e1545de58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/84/EntryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/84/EntryImpl.java\n@@ -190,9 +190,11 @@ public class EntryImpl extends EntryResultImpl implements Entry\n       \t// we use the same actual entry for both message and envelope artifacts\n       \t// we now need to output entry type names that actually pertain to the artifact type\n       \tpw.print(\n-                WSIConstants.ATTR_TYPE + \"=\\\"\" + getCorrespondingEnvelopeEntryTypeName(this.entryType.getTypeName()) + \"\\\" \");\n-\t  }\n-\t  else\n+\t\t\t\t\t\t\t\tWSIConstants.ATTR_TYPE+\"=\\\"\"+getCorrespondingEnvelopeEntryTypeName(this. entryType .getTypeName(\n+\t\t\t\t)\n+       ) + \"\\\" \");\n+   }\n+   else\n \t  {\n         pw.print(\n           WSIConstants.ATTR_TYPE + \"=\\\"\" + this.entryType.getTypeName() + \"\\\" \");\n",
            "diff_size": 5
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}