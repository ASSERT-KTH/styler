{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2579",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "60",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "157",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2579/PluginManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2579/PluginManager.java\nindex 9d73ae52f59..4e547a3a57a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2579/PluginManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2579/PluginManager.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.plugins;\n \n import java.util.ArrayList;\n@@ -38,133 +39,130 @@ import org.neo4j.server.rest.repr.Representation;\n \n public final class PluginManager implements ExtensionInjector, PluginInvocator\n {\n-    private final Map<String/*name*/, ServerExtender> extensions = new HashMap<>();\n+  private final Map<String/*name*/, ServerExtender> extensions = new HashMap<>();\n \n-    public PluginManager( Config serverConfig, LogProvider logProvider )\n-    {\n-        this( serverConfig, ServerPlugin.load(), logProvider );\n-    }\n+  public PluginManager(Config serverConfig, LogProvider logProvider)\n+  {\n+    this(serverConfig, ServerPlugin.load(), logProvider);\n+  }\n \n-    PluginManager( Config serverConfig, Iterable<ServerPlugin> plugins, LogProvider logProvider )\n+  PluginManager(Config serverConfig, Iterable<ServerPlugin> plugins, LogProvider logProvider)\n+  {\n+    Map<String, Pair<ServerPlugin, ServerExtender>> extensions = new HashMap<>();\n+    Log log = logProvider.getLog(getClass());\n+    for (ServerPlugin plugin : plugins)\n     {\n-        Map<String, Pair<ServerPlugin, ServerExtender>> extensions = new HashMap<>();\n-        Log log = logProvider.getLog( getClass() );\n-        for ( ServerPlugin plugin : plugins )\n-        {\n-            PluginPointFactory factory = new PluginPointFactoryImpl();\n-            final ServerExtender extender = new ServerExtender( factory );\n-            try\n-            {\n-                plugin.loadServerExtender( extender );\n-            }\n-            catch ( Exception | LinkageError ex )\n-            {\n-                log.warn( \"Failed to load plugin [%s]: %s\", plugin.toString(), ex.getMessage() );\n-                continue;\n-            }\n-            Pair<ServerPlugin, ServerExtender> old = extensions.put( plugin.name, Pair.of( plugin, extender ) );\n-            if ( old != null )\n-            {\n-                log.warn( String.format( \"Extension naming conflict \\\"%s\\\" between \\\"%s\\\" and \\\"%s\\\"\", plugin.name,\n-                        old.first().getClass(), plugin.getClass() ) );\n-            }\n-        }\n-        for ( Pair<ServerPlugin, ServerExtender> extension : extensions.values() )\n-        {\n-            log.info( String.format( \"Loaded server plugin \\\"%s\\\"\", extension.first().name ) );\n-            for ( PluginPoint point : extension.other().all() )\n-            {\n-                log.info( String.format( \"  %s.%s: %s\", point.forType().getSimpleName(), point.name(),\n-                        point.getDescription() ) );\n-            }\n-            this.extensions.put( extension.first().name, extension.other() );\n-        }\n+      PluginPointFactory factory = new PluginPointFactoryImpl();\n+      final ServerExtender extender = new ServerExtender(factory);\n+      try\n+      {\n+        plugin.loadServerExtender(extender);\n+      } catch (Exception | LinkageError ex)\n+      {\n+        log.warn(\"Failed to load plugin [%s]: %s\", plugin.toString(), ex.getMessage());\n+        continue;\n+      }\n+      Pair<ServerPlugin, ServerExtender> old = extensions.put(plugin.name, Pair.of(plugin, extender));\n+      if (old != null)\n+      {\n+        log.warn(String.format(\"Extension naming conflict \\\"%s\\\" between \\\"%s\\\" and \\\"%s\\\"\", plugin.name,\n+            old.first().getClass(), plugin.getClass()));\n+      }\n     }\n-\n-    @Override\n-    public Map<String, List<String>> getExensionsFor( Class<?> type )\n+    for (Pair<ServerPlugin, ServerExtender> extension : extensions.values())\n     {\n-        Map<String, List<String>> result = new HashMap<>();\n-        for ( Map.Entry<String, ServerExtender> extension : extensions.entrySet() )\n-        {\n-            List<String> methods = new ArrayList<>();\n-            for ( PluginPoint method : extension.getValue()\n-                    .getExtensionsFor( type ) )\n-            {\n-                methods.add( method.name() );\n-            }\n-            if ( !methods.isEmpty() )\n-            {\n-                result.put( extension.getKey(), methods );\n-            }\n-        }\n-        return result;\n+      log.info(String.format(\"Loaded server plugin \\\"%s\\\"\", extension.first().name));\n+      for (PluginPoint point : extension.other().all())\n+      {\n+        log.info(String.format(\"  %s.%s: %s\", point.forType().getSimpleName(), point.name(),\n+            point.getDescription()));\n+      }\n+      this.extensions.put(extension.first().name, extension.other());\n     }\n+  }\n \n-    private PluginPoint extension( String name, Class<?> type, String method ) throws PluginLookupException\n+  @Override\n+  public Map<String, List<String>> getExensionsFor(Class<?> type)\n+  {\n+    Map<String, List<String>> result = new HashMap<>();\n+    for (Map.Entry<String, ServerExtender> extension : extensions.entrySet())\n     {\n-        ServerExtender extender = extensions.get( name );\n-        if ( extender == null )\n-        {\n-            throw new PluginLookupException( \"No such ServerPlugin: \\\"\" + name + \"\\\"\" );\n-        }\n-        return extender.getExtensionPoint( type, method );\n+      List<String> methods = new ArrayList<>();\n+      for (PluginPoint method : extension.getValue()\n+          .getExtensionsFor(type))\n+      {\n+        methods.add(method.name());\n+      }\n+      if (!methods.isEmpty())\n+      {\n+        result.put(extension.getKey(), methods);\n+      }\n     }\n+    return result;\n+  }\n \n-    @Override\n-    public ExtensionPointRepresentation describe( String name, Class<?> type, String method )\n-            throws PluginLookupException\n+  private PluginPoint extension(String name, Class<?> type, String method) throws PluginLookupException\n+  {\n+    ServerExtender extender = extensions.get(name);\n+    if (extender == null)\n     {\n-        return describe( extension( name, type, method ) );\n+      throw new PluginLookupException(\"No such ServerPlugin: \\\"\" + name + \"\\\"\");\n     }\n+    return extender.getExtensionPoint(type, method);\n+  }\n \n-    private ExtensionPointRepresentation describe( PluginPoint extension )\n-    {\n-        ExtensionPointRepresentation representation = new ExtensionPointRepresentation( extension.name(),\n-                extension.forType(), extension.getDescription() );\n-        extension.describeParameters( representation );\n-        return representation;\n-    }\n+  @Override\n+  public ExtensionPointRepresentation describe(String name, Class<?> type, String method)\n+      throws PluginLookupException\n+  {\n+    return describe(extension(name, type, method));\n+  }\n \n-    @Override\n-    public List<ExtensionPointRepresentation> describeAll( String name ) throws PluginLookupException\n+  private ExtensionPointRepresentation describe(PluginPoint extension)\n+  {\n+    ExtensionPointRepresentation representation = new ExtensionPointRepresentation(extension.name(),\n+        extension.forType(), extension.getDescription());\n+    extension.describeParameters(representation);\n+    return representation;\n+  }\n+\n+  @Override\n+  public List<ExtensionPointRepresentation> describeAll(String name) throws PluginLookupException\n+  {\n+    ServerExtender extender = extensions.get(name);\n+    if (extender == null)\n     {\n-        ServerExtender extender = extensions.get( name );\n-        if ( extender == null )\n-        {\n-            throw new PluginLookupException( \"No such ServerPlugin: \\\"\" + name + \"\\\"\" );\n-        }\n-        List<ExtensionPointRepresentation> result = new ArrayList<>();\n-        for ( PluginPoint plugin : extender.all() )\n-        {\n-            result.add( describe( plugin ) );\n-        }\n-        return result;\n+      throw new PluginLookupException(\"No such ServerPlugin: \\\"\" + name + \"\\\"\");\n     }\n-\n-    @Override\n-    public <T> Representation invoke( GraphDatabaseAPI graphDb, String name, Class<T> type, String method,\n-            T context, ParameterList params ) throws PluginLookupException, BadInputException,\n-            PluginInvocationFailureException, BadPluginInvocationException\n+    List<ExtensionPointRepresentation> result = new ArrayList<>();\n+    for (PluginPoint plugin : extender.all())\n     {\n-        PluginPoint plugin = extension( name, type, method );\n-        try\n-        {\n-            return plugin.invoke( graphDb, context, params );\n-        }\n-        catch ( BadInputException | PluginInvocationFailureException | BadPluginInvocationException e )\n-        {\n-            throw e;\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new PluginInvocationFailureException( e );\n-        }\n+      result.add(describe(plugin));\n     }\n+    return result;\n+  }\n \n-    @Override\n-    public Set<String> extensionNames()\n+  @Override\n+  public <T> Representation invoke(GraphDatabaseAPI graphDb, String name, Class<T> type, String method,\n+                                   T context, ParameterList params) throws PluginLookupException, BadInputException,\n+      PluginInvocationFailureException, BadPluginInvocationException\n+  {\n+    PluginPoint plugin = extension(name, type, method);\n+    try\n+    {\n+      return plugin.invoke(graphDb, context, params);\n+    } catch (BadInputException | PluginInvocationFailureException | BadPluginInvocationException e)\n     {\n-        return Collections.unmodifiableSet( extensions.keySet() );\n+      throw e;\n+    } catch (Exception e)\n+    {\n+      throw new PluginInvocationFailureException(e);\n     }\n+  }\n+\n+  @Override\n+  public Set<String> extensionNames()\n+  {\n+    return Collections.unmodifiableSet(extensions.keySet());\n+  }\n }\n",
            "diff_size": 158
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2579/PluginManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2579/PluginManager.java\nindex 9d73ae52f59..fde1b010ec7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2579/PluginManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2579/PluginManager.java\n@@ -62,20 +62,19 @@ public final class PluginManager implements ExtensionInjector, PluginInvocator\n                 log.warn( \"Failed to load plugin [%s]: %s\", plugin.toString(), ex.getMessage() );\n                 continue;\n             }\n-            Pair<ServerPlugin, ServerExtender> old = extensions.put( plugin.name, Pair.of( plugin, extender ) );\n+            Pair<ServerPlugin,ServerExtender> old = extensions.put( plugin.name, Pair.of( plugin, extender ) );\n             if ( old != null )\n             {\n                 log.warn( String.format( \"Extension naming conflict \\\"%s\\\" between \\\"%s\\\" and \\\"%s\\\"\", plugin.name,\n                         old.first().getClass(), plugin.getClass() ) );\n-            }\n+    }\n         }\n-        for ( Pair<ServerPlugin, ServerExtender> extension : extensions.values() )\n+        for ( Pair<ServerPlugin,ServerExtender> extension : extensions.values() )\n         {\n             log.info( String.format( \"Loaded server plugin \\\"%s\\\"\", extension.first().name ) );\n             for ( PluginPoint point : extension.other().all() )\n             {\n-                log.info( String.format( \"  %s.%s: %s\", point.forType().getSimpleName(), point.name(),\n-                        point.getDescription() ) );\n+                log.info( String.format( \"  %s.%s: %s\", point.forType().getSimpleName(), point.name(), point.getDescription() ) );\n             }\n             this.extensions.put( extension.first().name, extension.other() );\n         }\n@@ -85,15 +84,15 @@ public final class PluginManager implements ExtensionInjector, PluginInvocator\n     public Map<String, List<String>> getExensionsFor( Class<?> type )\n     {\n         Map<String, List<String>> result = new HashMap<>();\n-        for ( Map.Entry<String, ServerExtender> extension : extensions.entrySet() )\n+        for ( Map.Entry<String,ServerExtender> extension : extensions.entrySet() )\n         {\n             List<String> methods = new ArrayList<>();\n-            for ( PluginPoint method : extension.getValue()\n-                    .getExtensionsFor( type ) )\n+            for ( PluginPoint method : extension.getValue().getExtensionsFor( type ) )\n             {\n                 methods.add( method.name() );\n             }\n-            if ( !methods.isEmpty() )\n+\n+if ( !methods.isEmpty() )\n             {\n                 result.put( extension.getKey(), methods );\n             }\n@@ -108,21 +107,20 @@ public final class PluginManager implements ExtensionInjector, PluginInvocator\n         {\n             throw new PluginLookupException( \"No such ServerPlugin: \\\"\" + name + \"\\\"\" );\n         }\n-        return extender.getExtensionPoint( type, method );\n+\n+return extender.getExtensionPoint( type, method );\n     }\n \n     @Override\n-    public ExtensionPointRepresentation describe( String name, Class<?> type, String method )\n-            throws PluginLookupException\n-    {\n+    public ExtensionPointRepresentation describe( String name, Class<?> type, String method ) throws PluginLookupException\n+{\n         return describe( extension( name, type, method ) );\n     }\n \n     private ExtensionPointRepresentation describe( PluginPoint extension )\n     {\n-        ExtensionPointRepresentation representation = new ExtensionPointRepresentation( extension.name(),\n-                extension.forType(), extension.getDescription() );\n-        extension.describeParameters( representation );\n+        ExtensionPointRepresentation representation = new ExtensionPointRepresentation( extension.name(), extension.forType(), extension.getDescription() );\n+extension.describeParameters( representation );\n         return representation;\n     }\n \n@@ -139,14 +137,14 @@ public final class PluginManager implements ExtensionInjector, PluginInvocator\n         {\n             result.add( describe( plugin ) );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     @Override\n     public <T> Representation invoke( GraphDatabaseAPI graphDb, String name, Class<T> type, String method,\n-            T context, ParameterList params ) throws PluginLookupException, BadInputException,\n-            PluginInvocationFailureException, BadPluginInvocationException\n-    {\n+            T context, ParameterList params ) throws PluginLookupException, BadInputException, PluginInvocationFailureException, BadPluginInvocationException\n+{\n         PluginPoint plugin = extension( name, type, method );\n         try\n         {\n@@ -167,4 +165,4 @@ public final class PluginManager implements ExtensionInjector, PluginInvocator\n     {\n         return Collections.unmodifiableSet( extensions.keySet() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}