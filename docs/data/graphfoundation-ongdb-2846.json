{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2846",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2846/StoreScanAsInputIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2846/StoreScanAsInputIterator.java\nindex 6027d4433a1..53e4783e81c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2846/StoreScanAsInputIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2846/StoreScanAsInputIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.storemigration.participant;\n \n import org.neo4j.kernel.impl.store.RecordCursor;\n@@ -35,38 +36,38 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.CHECK;\n  */\n abstract class StoreScanAsInputIterator<RECORD extends AbstractBaseRecord> implements InputIterator\n {\n-    private final RecordStore<RECORD> store;\n-    private final int batchSize;\n-    private final long highId;\n-    private long id;\n+  private final RecordStore<RECORD> store;\n+  private final int batchSize;\n+  private final long highId;\n+  private long id;\n \n-    StoreScanAsInputIterator( RecordStore<RECORD> store )\n-    {\n-        this.store = store;\n-        this.batchSize = store.getRecordsPerPage() * 10;\n-        this.highId = store.getHighId();\n-    }\n+  StoreScanAsInputIterator(RecordStore<RECORD> store)\n+  {\n+    this.store = store;\n+    this.batchSize = store.getRecordsPerPage() * 10;\n+    this.highId = store.getHighId();\n+  }\n \n-    RecordCursor<RECORD> createCursor()\n-    {\n-        return store.newRecordCursor( store.newRecord() ).acquire( 0, CHECK );\n-    }\n+  RecordCursor<RECORD> createCursor()\n+  {\n+    return store.newRecordCursor(store.newRecord()).acquire(0, CHECK);\n+  }\n \n-    @Override\n-    public void close()\n-    {\n-    }\n+  @Override\n+  public void close()\n+  {\n+  }\n \n-    @Override\n-    public synchronized boolean next( InputChunk chunk )\n+  @Override\n+  public synchronized boolean next(InputChunk chunk)\n+  {\n+    if (id >= highId)\n     {\n-        if ( id >= highId )\n-        {\n-            return false;\n-        }\n-        long startId = id;\n-        id = min( highId, startId + batchSize );\n-        ((StoreScanChunk)chunk).initialize( startId, id );\n-        return true;\n+      return false;\n     }\n+    long startId = id;\n+    id = min(highId, startId + batchSize);\n+    ((StoreScanChunk) chunk).initialize(startId, id);\n+    return true;\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2846/StoreScanAsInputIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2846/StoreScanAsInputIterator.java\nindex 6027d4433a1..7900b85f912 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2846/StoreScanAsInputIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2846/StoreScanAsInputIterator.java\n@@ -66,7 +66,7 @@ abstract class StoreScanAsInputIterator<RECORD extends AbstractBaseRecord> imple\n         }\n         long startId = id;\n         id = min( highId, startId + batchSize );\n-        ((StoreScanChunk)chunk).initialize( startId, id );\n+        ((StoreScanChunk) chunk).initialize( startId, id );\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}