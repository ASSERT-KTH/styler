{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3425",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3425/BatchTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3425/BatchTransactionApplier.java\nindex edf99deaafe..a2e1c73110d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3425/BatchTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3425/BatchTransactionApplier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.io.IOException;\n@@ -26,7 +27,7 @@ import org.neo4j.storageengine.api.CommandsToApply;\n \n /**\n  * Responsible for dealing with batches of transactions. See also {@link TransactionApplier}\n- *\n+ * <p>\n  * Typical usage looks like:\n  * <pre>\n  * try ( BatchTransactionApplier batchApplier = getBatchApplier() )\n@@ -54,75 +55,75 @@ import org.neo4j.storageengine.api.CommandsToApply;\n  */\n public interface BatchTransactionApplier extends AutoCloseable\n {\n-    /**\n-     * Get the suitable {@link TransactionApplier} for a given transaction, and the store which this {@link\n-     * BatchTransactionApplier} is associated with. See also {@link #startTx(CommandsToApply, LockGroup)} if\n-     * your operations need to share a {@link LockGroup}.\n-     *\n-     * Typically you'd want to use this in a try-with-resources block to automatically close the {@link\n-     * TransactionApplier} when finished with the transaction, f.ex. as:\n-     * <pre>\n-     * try ( TransactionApplier txApplier = batchTxApplier.startTx( txToApply )\n-     * {\n-     *     // Apply the transaction\n-     *     txToApply.transactionRepresentation().accept( txApplier );\n-     *     // Or apply other commands\n-     *     // txApplier.visit( command );\n-     * }\n-     * </pre>\n-     *\n-     * @param transaction The transaction which this applier is going to apply. Once we don't have to validate index\n-     * updates anymore, we can change this to simply be the transactionId\n-     * @return a {@link TransactionApplier} which can apply this transaction and other commands to the store.\n-     * @throws IOException on error.\n-     */\n-    TransactionApplier startTx( CommandsToApply transaction ) throws IOException;\n+  /**\n+   * Get the suitable {@link TransactionApplier} for a given transaction, and the store which this {@link\n+   * BatchTransactionApplier} is associated with. See also {@link #startTx(CommandsToApply, LockGroup)} if\n+   * your operations need to share a {@link LockGroup}.\n+   * <p>\n+   * Typically you'd want to use this in a try-with-resources block to automatically close the {@link\n+   * TransactionApplier} when finished with the transaction, f.ex. as:\n+   * <pre>\n+   * try ( TransactionApplier txApplier = batchTxApplier.startTx( txToApply )\n+   * {\n+   *     // Apply the transaction\n+   *     txToApply.transactionRepresentation().accept( txApplier );\n+   *     // Or apply other commands\n+   *     // txApplier.visit( command );\n+   * }\n+   * </pre>\n+   *\n+   * @param transaction The transaction which this applier is going to apply. Once we don't have to validate index\n+   *                    updates anymore, we can change this to simply be the transactionId\n+   * @return a {@link TransactionApplier} which can apply this transaction and other commands to the store.\n+   * @throws IOException on error.\n+   */\n+  TransactionApplier startTx(CommandsToApply transaction) throws IOException;\n \n-    /**\n-     * Get the suitable {@link TransactionApplier} for a given transaction, and the store which this {@link\n-     * BatchTransactionApplier} is associated with. See also {@link #startTx(CommandsToApply)} if your transaction\n-     * does not require any locks.\n-     *\n-     * Typically you'd want to use this in a try-with-resources block to automatically close the {@link\n-     * TransactionApplier} when finished with the transaction, f.ex. as:\n-     * <pre>\n-     * try ( TransactionApplier txApplier = batchTxApplier.startTx( txToApply )\n-     * {\n-     *     // Apply the transaction\n-     *     txToApply.transactionRepresentation().accept( txApplier );\n-     *     // Or apply other commands\n-     *     // txApplier.visit( command );\n-     * }\n-     * </pre>\n-     *\n-     * @param transaction The transaction which this applier is going to apply. Once we don't have to validate index\n-     * updates anymore, we can change this to simply be the transactionId\n-     * @param lockGroup A lockGroup which can hold the locks that the transaction requires.\n-     * @return a {@link TransactionApplier} which can apply this transaction and other commands to the store.\n-     * @throws IOException on error.\n-     */\n-    TransactionApplier startTx( CommandsToApply transaction, LockGroup lockGroup ) throws IOException;\n+  /**\n+   * Get the suitable {@link TransactionApplier} for a given transaction, and the store which this {@link\n+   * BatchTransactionApplier} is associated with. See also {@link #startTx(CommandsToApply)} if your transaction\n+   * does not require any locks.\n+   * <p>\n+   * Typically you'd want to use this in a try-with-resources block to automatically close the {@link\n+   * TransactionApplier} when finished with the transaction, f.ex. as:\n+   * <pre>\n+   * try ( TransactionApplier txApplier = batchTxApplier.startTx( txToApply )\n+   * {\n+   *     // Apply the transaction\n+   *     txToApply.transactionRepresentation().accept( txApplier );\n+   *     // Or apply other commands\n+   *     // txApplier.visit( command );\n+   * }\n+   * </pre>\n+   *\n+   * @param transaction The transaction which this applier is going to apply. Once we don't have to validate index\n+   *                    updates anymore, we can change this to simply be the transactionId\n+   * @param lockGroup   A lockGroup which can hold the locks that the transaction requires.\n+   * @return a {@link TransactionApplier} which can apply this transaction and other commands to the store.\n+   * @throws IOException on error.\n+   */\n+  TransactionApplier startTx(CommandsToApply transaction, LockGroup lockGroup) throws IOException;\n \n-    /**\n-     * This method is suitable for any work that needs to be done after a batch of transactions. Typically called\n-     * implicitly at the end of a try-with-resources block.\n-     *\n-     * @throws Exception on error.\n-     */\n-    @Override\n-    void close() throws Exception;\n+  /**\n+   * This method is suitable for any work that needs to be done after a batch of transactions. Typically called\n+   * implicitly at the end of a try-with-resources block.\n+   *\n+   * @throws Exception on error.\n+   */\n+  @Override\n+  void close() throws Exception;\n \n-    abstract class Adapter implements BatchTransactionApplier\n+  abstract class Adapter implements BatchTransactionApplier\n+  {\n+    @Override\n+    public TransactionApplier startTx(CommandsToApply transaction, LockGroup lockGroup) throws IOException\n     {\n-        @Override\n-        public TransactionApplier startTx( CommandsToApply transaction, LockGroup lockGroup ) throws IOException\n-        {\n-            return startTx( transaction );\n-        }\n+      return startTx(transaction);\n+    }\n \n-        @Override\n-        public void close() throws Exception\n-        {   // Nothing to close\n-        }\n+    @Override\n+    public void close() throws Exception\n+    {   // Nothing to close\n     }\n+  }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3425/BatchTransactionApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3425/BatchTransactionApplier.java\nindex edf99deaafe..309ab147100 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3425/BatchTransactionApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3425/BatchTransactionApplier.java\n@@ -122,7 +122,8 @@ public interface BatchTransactionApplier extends AutoCloseable\n \n         @Override\n         public void close() throws Exception\n-        {   // Nothing to close\n+        {\n+    // Nothing to close\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}