{
    "project_name": "Angel-ML-angel",
    "error_id": "544",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/544/InitNeighborTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/544/InitNeighborTest.java\nindex 5fedc6c5f81..1538311d4d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/544/InitNeighborTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/544/InitNeighborTest.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph;\n \n import com.tencent.angel.client.AngelClient;\n@@ -187,22 +188,22 @@ public class InitNeighborTest {\n     // Init node neighbors\n     Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors = new Int2ObjectOpenHashMap<>();\n \n-    nodeIdToNeighbors.put(1, new int[]{2, 3});\n-    nodeIdToNeighbors.put(2, new int[]{4});\n+    nodeIdToNeighbors.put(1, new int[] {2, 3});\n+    nodeIdToNeighbors.put(2, new int[] {4});\n     InitNeighbor func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n     client.asyncUpdate(func).get();\n     nodeIdToNeighbors.clear();\n \n-    nodeIdToNeighbors.put(1, new int[]{4, 5, 6});\n-    nodeIdToNeighbors.put(2, new int[]{5});\n-    nodeIdToNeighbors.put(4, new int[]{5, 6});\n+    nodeIdToNeighbors.put(1, new int[] {4, 5, 6});\n+    nodeIdToNeighbors.put(2, new int[] {5});\n+    nodeIdToNeighbors.put(4, new int[] {5, 6});\n     func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n     client.asyncUpdate(func).get();\n     nodeIdToNeighbors.clear();\n \n-    nodeIdToNeighbors.put(3, new int[]{4, 5, 6});\n-    nodeIdToNeighbors.put(5, new int[]{6});\n-    nodeIdToNeighbors.put(8, new int[]{3, 4});\n+    nodeIdToNeighbors.put(3, new int[] {4, 5, 6});\n+    nodeIdToNeighbors.put(5, new int[] {6});\n+    nodeIdToNeighbors.put(8, new int[] {3, 4});\n     func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n     client.asyncUpdate(func).get();\n     nodeIdToNeighbors.clear();\n@@ -210,7 +211,7 @@ public class InitNeighborTest {\n     client.asyncUpdate(new InitNeighborOver(new InitNeighborOverParam(matrixId))).get();\n \n     // Sample the neighbors\n-    int[] nodeIds = new int[]{1, 2, 3, 4, 5, 6, 7, 8};\n+    int[] nodeIds = new int[] {1, 2, 3, 4, 5, 6, 7, 8};\n     SampleNeighborParam param = new SampleNeighborParam(matrixId, nodeIds, -1);\n     Int2ObjectOpenHashMap<int[]> result = ((SampleNeighborResult) (client\n         .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "229",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/544/InitNeighborTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/544/InitNeighborTest.java\nindex 5fedc6c5f81..f51136516bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/544/InitNeighborTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/544/InitNeighborTest.java\n@@ -62,41 +62,60 @@ import org.junit.Test;\n public class InitNeighborTest {\n \n   public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n+\n   public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n+\n   public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n+\n   public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n \n   public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n+\n   public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n+\n   public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n+\n   public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n \n   public static String DENSE_INT_MAT = \"dense_int_mat\";\n+\n   public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n+\n   public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n+\n   public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n \n   public static String DENSE_LONG_MAT = \"dense_long_mat\";\n+\n   public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n+\n   public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n+\n   public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n \n   public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n+\n   public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n+\n   public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n \n   public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n+\n   public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n+\n   public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n \n   public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n+\n   public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n+\n   public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n \n   public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n+\n   public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n-  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n \n+  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n   private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n   private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n@@ -106,9 +125,16 @@ public class InitNeighborTest {\n   private WorkerId workerId;\n   private WorkerAttemptId workerAttempt0Id;\n \n+\n   int feaNum = 100000;\n+\n+\n   int start = 100;\n+\n+\n   int end = 1000000;\n+\n+\n   int nnz = 1000;\n \n   static {\n@@ -130,12 +156,10 @@ public class InitNeighborTest {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n     //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n@@ -159,12 +183,9 @@ public class InitNeighborTest {\n \n     // Start to run application\n     angelClient.run();\n-\n     Thread.sleep(5000);\n-\n     psId = new ParameterServerId(0);\n     psAttempt0Id = new PSAttemptId(psId, 0);\n-\n     WorkerGroupId workerGroupId = new WorkerGroupId(0);\n     workerId = new WorkerId(workerGroupId, 0);\n     workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n@@ -172,79 +193,59 @@ public class InitNeighborTest {\n \n   @Test\n   public void testCSR() throws Exception {\n-\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n     int matrixId = client.getMatrixId();\n-\n     ParameterServer ps = LocalClusterContext.get().getPS(psAttempt0Id).getPS();\n-    Location masterLoc =\n-        LocalClusterContext.get().getMaster().getAppMaster().getAppContext().getMasterService()\n-            .getLocation();\n+    Location masterLoc = LocalClusterContext.get().getMaster().getAppMaster().getAppContext().getMasterService().getLocation();\n     TConnection connection = TConnectionManager.getConnection(ps.getConf());\n     MasterProtocol master = connection.getMasterService(masterLoc.getIp(), masterLoc.getPort());\n \n     // Init node neighbors\n     Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors = new Int2ObjectOpenHashMap<>();\n-\n     nodeIdToNeighbors.put(1, new int[]{2, 3});\n     nodeIdToNeighbors.put(2, new int[]{4});\n     InitNeighbor func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n     client.asyncUpdate(func).get();\n     nodeIdToNeighbors.clear();\n-\n     nodeIdToNeighbors.put(1, new int[]{4, 5, 6});\n     nodeIdToNeighbors.put(2, new int[]{5});\n     nodeIdToNeighbors.put(4, new int[]{5, 6});\n     func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n     client.asyncUpdate(func).get();\n     nodeIdToNeighbors.clear();\n-\n     nodeIdToNeighbors.put(3, new int[]{4, 5, 6});\n     nodeIdToNeighbors.put(5, new int[]{6});\n     nodeIdToNeighbors.put(8, new int[]{3, 4});\n     func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n     client.asyncUpdate(func).get();\n     nodeIdToNeighbors.clear();\n-\n     client.asyncUpdate(new InitNeighborOver(new InitNeighborOverParam(matrixId))).get();\n \n     // Sample the neighbors\n+\n     int[] nodeIds = new int[]{1, 2, 3, 4, 5, 6, 7, 8};\n     SampleNeighborParam param = new SampleNeighborParam(matrixId, nodeIds, -1);\n-    Int2ObjectOpenHashMap<int[]> result = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n-    ObjectIterator<Entry<int[]>> iter = result\n-        .int2ObjectEntrySet().fastIterator();\n-\n+    Int2ObjectOpenHashMap<int[]> result = ((SampleNeighborResult) (client.get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n+    ObjectIterator<Entry<int[]>> iter = result.int2ObjectEntrySet().fastIterator();\n     LOG.info(\"==============================sample neighbors result============================\");\n     Entry<int[]> entry;\n     while (iter.hasNext()) {\n       entry = iter.next();\n-      LOG.info(\n-          \"node id = \" + entry.getIntKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n+      LOG.info(\"node id = \" + entry.getIntKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n     }\n-\n     client.checkpoint(0);\n-\n     ps.stop(-1);\n-    PSErrorRequest request = PSErrorRequest.newBuilder()\n-        .setPsAttemptId(ProtobufUtil.convertToIdProto(psAttempt0Id))\n-        .setMsg(\"out of memory\").build();\n+    PSErrorRequest request = PSErrorRequest.newBuilder().setPsAttemptId(ProtobufUtil.convertToIdProto(psAttempt0Id)).setMsg(\"out of memory\").build();\n     master.psError(null, request);\n-\n     Thread.sleep(10000);\n-\n-    result = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n-    iter = result\n-        .int2ObjectEntrySet().fastIterator();\n-\n+    result = ((SampleNeighborResult) (client.get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n+    iter = result.int2ObjectEntrySet().fastIterator();\n     LOG.info(\"==============================sample neighbors result============================\");\n+\n     while (iter.hasNext()) {\n       entry = iter.next();\n-      LOG.info(\n-          \"node id = \" + entry.getIntKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n+      LOG.info(\"node id = \" + entry.getIntKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n     }\n   }\n \n@@ -253,4 +254,5 @@ public class InitNeighborTest {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 67
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}