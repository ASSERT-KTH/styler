{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1407",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1407/ReversedMultiFileTransactionCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1407/ReversedMultiFileTransactionCursor.java\nindex ffc9e299805..07b1db53bb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1407/ReversedMultiFileTransactionCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1407/ReversedMultiFileTransactionCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.reverse;\n \n import java.io.IOException;\n@@ -41,7 +42,7 @@ import static org.neo4j.kernel.impl.transaction.log.reverse.EagerlyReversedTrans\n /**\n  * Similar to {@link PhysicalTransactionCursor} and actually uses it internally. This main difference is that transactions\n  * are returned in reverse order, starting from the end and back towards (and including) a specified {@link LogPosition}.\n- *\n+ * <p>\n  * Since the transaction log format lacks data which would allow for a memory efficient reverse reading implementation,\n  * this implementation tries to minimize peak memory consumption by efficiently reading a single log version at a time\n  * in reverse order before moving over to the previous version. Peak memory consumption compared to normal\n@@ -52,104 +53,104 @@ import static org.neo4j.kernel.impl.transaction.log.reverse.EagerlyReversedTrans\n  */\n public class ReversedMultiFileTransactionCursor implements TransactionCursor\n {\n-    private final LogPosition backToPosition;\n-    private final ThrowingFunction<LogPosition,TransactionCursor,IOException> cursorFactory;\n+  private final LogPosition backToPosition;\n+  private final ThrowingFunction<LogPosition, TransactionCursor, IOException> cursorFactory;\n \n-    private long currentVersion;\n-    private TransactionCursor currentLogTransactionCursor;\n+  private long currentVersion;\n+  private TransactionCursor currentLogTransactionCursor;\n \n-    /**\n-     * Utility method for creating a {@link ReversedMultiFileTransactionCursor} with a {@link LogFile} as the source of\n-     * {@link TransactionCursor} for each log version.\n-     *\n-     * @param logFile {@link LogFile} to supply log entries forming transactions.\n-     * @param backToPosition {@link LogPosition} to read backwards to.\n-     * @param failOnCorruptedLogFiles fail reading from log files as soon as first error is encountered\n-     * @param monitor reverse transaction cursor monitor\n-     * @return a {@link TransactionCursor} which returns transactions from the end of the log stream and backwards to\n-     * and including transaction starting at {@link LogPosition}.\n-     * @throws IOException on I/O error.\n-     */\n-    public static TransactionCursor fromLogFile( LogFiles logFiles, LogFile logFile, LogPosition backToPosition,\n-            boolean failOnCorruptedLogFiles, ReversedTransactionCursorMonitor monitor )\n+  /**\n+   * Utility method for creating a {@link ReversedMultiFileTransactionCursor} with a {@link LogFile} as the source of\n+   * {@link TransactionCursor} for each log version.\n+   *\n+   * @param logFile                 {@link LogFile} to supply log entries forming transactions.\n+   * @param backToPosition          {@link LogPosition} to read backwards to.\n+   * @param failOnCorruptedLogFiles fail reading from log files as soon as first error is encountered\n+   * @param monitor                 reverse transaction cursor monitor\n+   * @return a {@link TransactionCursor} which returns transactions from the end of the log stream and backwards to\n+   * and including transaction starting at {@link LogPosition}.\n+   * @throws IOException on I/O error.\n+   */\n+  public static TransactionCursor fromLogFile(LogFiles logFiles, LogFile logFile, LogPosition backToPosition,\n+                                              boolean failOnCorruptedLogFiles, ReversedTransactionCursorMonitor monitor)\n+  {\n+    long highestVersion = logFiles.getHighestLogVersion();\n+    LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader = new VersionAwareLogEntryReader<>();\n+    ThrowingFunction<LogPosition, TransactionCursor, IOException> factory = position ->\n     {\n-        long highestVersion = logFiles.getHighestLogVersion();\n-        LogEntryReader<ReadableClosablePositionAwareChannel> logEntryReader = new VersionAwareLogEntryReader<>();\n-        ThrowingFunction<LogPosition,TransactionCursor,IOException> factory = position ->\n-        {\n-            ReadableLogChannel channel = logFile.getReader( position, NO_MORE_CHANNELS );\n-            if ( channel instanceof ReadAheadLogChannel )\n-            {\n-                // This is a channel which can be positioned explicitly and is the typical case for such channels\n-                // Let's take advantage of this fact and use a bit smarter reverse implementation\n-                return new ReversedSingleFileTransactionCursor( (ReadAheadLogChannel) channel, logEntryReader,\n-                        failOnCorruptedLogFiles, monitor );\n-            }\n+      ReadableLogChannel channel = logFile.getReader(position, NO_MORE_CHANNELS);\n+      if (channel instanceof ReadAheadLogChannel)\n+      {\n+        // This is a channel which can be positioned explicitly and is the typical case for such channels\n+        // Let's take advantage of this fact and use a bit smarter reverse implementation\n+        return new ReversedSingleFileTransactionCursor((ReadAheadLogChannel) channel, logEntryReader,\n+            failOnCorruptedLogFiles, monitor);\n+      }\n \n-            // Fall back to simply eagerly reading each single log file and reversing in memory\n-            return eagerlyReverse( new PhysicalTransactionCursor<>( channel, logEntryReader ) );\n-        };\n-        return new ReversedMultiFileTransactionCursor( factory, highestVersion, backToPosition );\n-    }\n+      // Fall back to simply eagerly reading each single log file and reversing in memory\n+      return eagerlyReverse(new PhysicalTransactionCursor<>(channel, logEntryReader));\n+    };\n+    return new ReversedMultiFileTransactionCursor(factory, highestVersion, backToPosition);\n+  }\n \n-    /**\n-     * @param cursorFactory creates {@link TransactionCursor} from a given {@link LogPosition}. The returned cursor must\n-     * return transactions from the end of that {@link LogPosition#getLogVersion() log version} and backwards in reverse order\n-     * to, and including, the transaction at the {@link LogPosition} given to it.\n-     * @param highestVersion highest log version right now.\n-     * @param backToPosition the start position of the last transaction to return from this cursor.\n-     */\n-    ReversedMultiFileTransactionCursor( ThrowingFunction<LogPosition,TransactionCursor,IOException> cursorFactory, long highestVersion,\n-            LogPosition backToPosition )\n-    {\n-        this.cursorFactory = cursorFactory;\n-        this.backToPosition = backToPosition;\n-        this.currentVersion = highestVersion + 1;\n-    }\n+  /**\n+   * @param cursorFactory  creates {@link TransactionCursor} from a given {@link LogPosition}. The returned cursor must\n+   *                       return transactions from the end of that {@link LogPosition#getLogVersion() log version} and backwards in reverse order\n+   *                       to, and including, the transaction at the {@link LogPosition} given to it.\n+   * @param highestVersion highest log version right now.\n+   * @param backToPosition the start position of the last transaction to return from this cursor.\n+   */\n+  ReversedMultiFileTransactionCursor(ThrowingFunction<LogPosition, TransactionCursor, IOException> cursorFactory, long highestVersion,\n+                                     LogPosition backToPosition)\n+  {\n+    this.cursorFactory = cursorFactory;\n+    this.backToPosition = backToPosition;\n+    this.currentVersion = highestVersion + 1;\n+  }\n \n-    @Override\n-    public CommittedTransactionRepresentation get()\n-    {\n-        return currentLogTransactionCursor.get();\n-    }\n+  @Override\n+  public CommittedTransactionRepresentation get()\n+  {\n+    return currentLogTransactionCursor.get();\n+  }\n \n-    @Override\n-    public boolean next() throws IOException\n+  @Override\n+  public boolean next() throws IOException\n+  {\n+    while (currentLogTransactionCursor == null || !currentLogTransactionCursor.next())\n     {\n-        while ( currentLogTransactionCursor == null || !currentLogTransactionCursor.next() )\n-        {\n-            // We've run out of transactions in this log version, back up to a previous one\n-            currentVersion--;\n-            if ( currentVersion < backToPosition.getLogVersion() )\n-            {\n-                return false;\n-            }\n+      // We've run out of transactions in this log version, back up to a previous one\n+      currentVersion--;\n+      if (currentVersion < backToPosition.getLogVersion())\n+      {\n+        return false;\n+      }\n \n-            closeCurrent();\n-            LogPosition position = currentVersion > backToPosition.getLogVersion() ? start( currentVersion ) : backToPosition;\n-            currentLogTransactionCursor = cursorFactory.apply( position );\n-        }\n-        return true;\n+      closeCurrent();\n+      LogPosition position = currentVersion > backToPosition.getLogVersion() ? start(currentVersion) : backToPosition;\n+      currentLogTransactionCursor = cursorFactory.apply(position);\n     }\n+    return true;\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        closeCurrent();\n-    }\n+  @Override\n+  public void close() throws IOException\n+  {\n+    closeCurrent();\n+  }\n \n-    private void closeCurrent() throws IOException\n+  private void closeCurrent() throws IOException\n+  {\n+    if (currentLogTransactionCursor != null)\n     {\n-        if ( currentLogTransactionCursor != null )\n-        {\n-            currentLogTransactionCursor.close();\n-            currentLogTransactionCursor = null;\n-        }\n+      currentLogTransactionCursor.close();\n+      currentLogTransactionCursor = null;\n     }\n+  }\n \n-    @Override\n-    public LogPosition position()\n-    {\n-        return currentLogTransactionCursor.position();\n-    }\n+  @Override\n+  public LogPosition position()\n+  {\n+    return currentLogTransactionCursor.position();\n+  }\n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "129",
                    "column": "50",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1407/ReversedMultiFileTransactionCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1407/ReversedMultiFileTransactionCursor.java\nindex ffc9e299805..cf4ade8cab6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1407/ReversedMultiFileTransactionCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1407/ReversedMultiFileTransactionCursor.java\n@@ -126,7 +126,7 @@ public class ReversedMultiFileTransactionCursor implements TransactionCursor\n             }\n \n             closeCurrent();\n-            LogPosition position = currentVersion > backToPosition.getLogVersion() ? start( currentVersion ) : backToPosition;\n+            LogPosition position = currentVersion> backToPosition.getLogVersion() ? start( currentVersion ) : backToPosition;\n             currentLogTransactionCursor = cursorFactory.apply( position );\n         }\n         return true;\n@@ -152,4 +152,4 @@ public class ReversedMultiFileTransactionCursor implements TransactionCursor\n     {\n         return currentLogTransactionCursor.position();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}