{
    "project_name": "wayshall-onetwo",
    "error_id": "55",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "53",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\tpublic boolean isConnected() {\n\t\ttry {\n\t\t\tboolean connected = (boolean)this.wrapper.getPropertyValue(\"connected\");\n\t\t\treturn connected;\n\t\t} catch (Exception e) {\n\t\t\tJFishLoggerFactory.getCommonLogger().error(\"check mqtt borker connect state error: \" + e.getMessage(), e);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "column": "53",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/55/MqttPahoMessageDrivenChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/55/MqttPahoMessageDrivenChannel.java\nindex 28ce2dfac08..a586d7efb07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/55/MqttPahoMessageDrivenChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/55/MqttPahoMessageDrivenChannel.java\n@@ -16,38 +16,38 @@ import org.springframework.integration.mqtt.inbound.MqttPahoMessageDrivenChannel\n  */\n \n public class MqttPahoMessageDrivenChannel extends MqttPahoMessageDrivenChannelAdapter implements InitializingBean {\n-\t\n-\tprivate InBoundClientProps clientConfig;\n-\tprivate ConfigurablePropertyAccessor wrapper;\n-\t\n-\tpublic MqttPahoMessageDrivenChannel(InBoundClientProps clientConfig, MqttPahoClientFactory clientFactory) {\n-\t\tsuper(clientConfig.getClientId(), clientFactory, clientConfig.getTopics());\n-\t\tthis.clientConfig = clientConfig;\n-\t\tthis.wrapper = SpringUtils.newPropertyAccessor(this, true);\n-\t\tif (StringUtils.isBlank(clientConfig.getChannelName())) {\n-\t\t\tthrow new BaseException(\"inbound output channel name can not blank!\");\n-\t\t}\n-\t\tthis.setOutputChannelName(clientConfig.getChannelName());\n-\t\tsetQos(clientConfig.getQos());\n-\t\tsetCompletionTimeout(clientConfig.getCompletionTimeout());\n-\t}\n-\n-\t@Override\n-\tpublic void onInit() {\n-\t\tsetQos(clientConfig.getQos());\n-\t\tsetCompletionTimeout(clientConfig.getCompletionTimeout());\n-\t\t\n-\t\tsuper.onInit();\n-\t}\n-\t\n-\tpublic boolean isConnected() {\n-\t\ttry {\n-\t\t\tboolean connected = (boolean)this.wrapper.getPropertyValue(\"connected\");\n-\t\t\treturn connected;\n-\t\t} catch (Exception e) {\n-\t\t\tJFishLoggerFactory.getCommonLogger().error(\"check mqtt borker connect state error: \" + e.getMessage(), e);\n-\t\t}\n-\t\treturn false;\n-\t}\n+\n+  private InBoundClientProps clientConfig;\n+  private ConfigurablePropertyAccessor wrapper;\n+\n+  public MqttPahoMessageDrivenChannel(InBoundClientProps clientConfig, MqttPahoClientFactory clientFactory) {\n+    super(clientConfig.getClientId(), clientFactory, clientConfig.getTopics());\n+    this.clientConfig = clientConfig;\n+    this.wrapper = SpringUtils.newPropertyAccessor(this, true);\n+    if (StringUtils.isBlank(clientConfig.getChannelName())) {\n+      throw new BaseException(\"inbound output channel name can not blank!\");\n+    }\n+    this.setOutputChannelName(clientConfig.getChannelName());\n+    setQos(clientConfig.getQos());\n+    setCompletionTimeout(clientConfig.getCompletionTimeout());\n+  }\n+\n+  @Override\n+  public void onInit() {\n+    setQos(clientConfig.getQos());\n+    setCompletionTimeout(clientConfig.getCompletionTimeout());\n+\n+    super.onInit();\n+  }\n+\n+  public boolean isConnected() {\n+    try {\n+      boolean connected = (boolean) this.wrapper.getPropertyValue(\"connected\");\n+      return connected;\n+    } catch (Exception e) {\n+      JFishLoggerFactory.getCommonLogger().error(\"check mqtt borker connect state error: \" + e.getMessage(), e);\n+    }\n+    return false;\n+  }\n \n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "column": "53",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "45",
                    "column": "53",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}