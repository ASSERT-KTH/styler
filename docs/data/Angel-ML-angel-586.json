{
    "project_name": "Angel-ML-angel",
    "error_id": "586",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/586/AngelPSClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/586/AngelPSClient.java\nindex 23a917fb1f8..68cb631ac11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/586/AngelPSClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/586/AngelPSClient.java\n@@ -150,7 +150,7 @@ public class AngelPSClient {\n    * Write the checkpoint\r\n    *\r\n    * @param checkpointId checkpoint id\r\n-   * @param saveContext save context\r\n+   * @param saveContext  save context\r\n    */\r\n   public void checkpoint(int checkpointId, ModelSaveContext saveContext) throws AngelException {\r\n     client.checkpoint(checkpointId, saveContext);\r\n@@ -169,7 +169,7 @@ public class AngelPSClient {\n    * Recover the model from the checkpoint\r\n    *\r\n    * @param checkpointId the checkpoint id\r\n-   * @param loadContext load context\r\n+   * @param loadContext  load context\r\n    */\r\n   public void recover(int checkpointId, ModelLoadContext loadContext) {\r\n     client.recover(checkpointId, loadContext);\r\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/586/AngelPSClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/586/AngelPSClient.java\nindex 23a917fb1f8..80e76f1e9d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/586/AngelPSClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/586/AngelPSClient.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.client;\r\n \r\n import com.tencent.angel.RunningMode;\r\n@@ -196,4 +195,4 @@ public class AngelPSClient {\n       LOG.warn(\"kill ps failed.\", e);\r\n     }\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/586/AngelPSClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/586/AngelPSClient.java\nindex 23a917fb1f8..41ee910dcfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/586/AngelPSClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/586/AngelPSClient.java\n@@ -16,134 +16,136 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.client;\r\n-\r\n-import com.tencent.angel.RunningMode;\r\n-import com.tencent.angel.conf.AngelConf;\r\n-import com.tencent.angel.exception.AngelException;\r\n-import com.tencent.angel.exception.InvalidParameterException;\r\n-import com.tencent.angel.ml.matrix.MatrixContext;\r\n-import com.tencent.angel.ml.matrix.RowType;\r\n-import com.tencent.angel.model.ModelLoadContext;\r\n-import com.tencent.angel.model.ModelSaveContext;\r\n-import com.tencent.angel.utils.ConfUtils;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Map.Entry;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-import org.apache.hadoop.conf.Configuration;\r\n+package com.tencent.angel.client;\n+\n+import com.tencent.angel.RunningMode;\n+import com.tencent.angel.conf.AngelConf;\n+import com.tencent.angel.exception.AngelException;\n+import com.tencent.angel.exception.InvalidParameterException;\n+import com.tencent.angel.ml.matrix.MatrixContext;\n+import com.tencent.angel.ml.matrix.RowType;\n+import com.tencent.angel.model.ModelLoadContext;\n+import com.tencent.angel.model.ModelSaveContext;\n+import com.tencent.angel.utils.ConfUtils;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.Path;\r\n \r\n /**\r\n  * A simple angel client used for a third party computing system. Angel support ps service running\r\n  * mode, which can provide ParameterServer service for any third party computing systems.\r\n- */\r\n-public class AngelPSClient {\r\n-\r\n-  private static final Log LOG = LogFactory.getLog(AngelPSClient.class);\r\n-  private static final String angelSysConfFile = \"angel-site.xml\";\r\n-  private final Configuration conf;\r\n-  private final AngelClient client;\r\n-\r\n-  public AngelPSClient() throws InvalidParameterException {\r\n-    conf = new Configuration();\r\n-    loadSysConfig();\r\n-    client = AngelClientFactory.get(conf);\r\n-  }\r\n-\r\n-  public AngelPSClient(Configuration conf) {\r\n-    this.conf = conf;\r\n-    client = AngelClientFactory.get(conf);\r\n-  }\r\n-\r\n-  private void loadSysConfig() throws InvalidParameterException {\r\n-    String angelHomePath = System.getenv(\"ANGEL_HOME\");\r\n-    if (angelHomePath == null) {\r\n-      LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\r\n-      throw new InvalidParameterException(\"ANGEL_HOME is empty, please set it first\");\r\n-    }\r\n-    conf.addResource(new Path(angelHomePath + \"/conf/\" + angelSysConfFile));\r\n-    LOG.info(\"load system config file success\");\r\n-  }\r\n-\r\n-  public AngelPSClient(PSStartUpConfig config) throws InvalidParameterException {\r\n-    conf = new Configuration();\r\n-    loadSysConfig();\r\n-\r\n-    conf.setInt(AngelConf.ANGEL_PS_NUMBER, config.getPsNum());\r\n-    conf.setInt(AngelConf.ANGEL_PS_MEMORY_MB, config.getPsMemoryInMB());\r\n-    conf.setInt(AngelConf.ANGEL_PS_CPU_VCORES, config.getPsVcoreNum());\r\n-\r\n-    conf.setInt(AngelConf.ANGEL_PSAGENT_NUMBER, config.getPsAgentNum());\r\n-    conf.setInt(AngelConf.ANGEL_PSAGENT_MERMORY_MB, config.getPsAgentMemoryInMB());\r\n-    conf.setInt(AngelConf.ANGEL_PSAGENT_CPU_VCORES, config.getPsAgentVcoreNum());\r\n-\r\n-    Map<String, String> paramsMap = config.getConfig();\r\n-    if (paramsMap != null && !paramsMap.isEmpty()) {\r\n-      for (Entry<String, String> entry : paramsMap.entrySet()) {\r\n-        conf.set(entry.getKey(), entry.getValue());\r\n-      }\r\n-    }\r\n-\r\n-    client = AngelClientFactory.get(conf);\r\n+ */\n+\n+public class AngelPSClient {\n+\n+  private static final Log LOG = LogFactory.getLog(AngelPSClient.class);\n+  private static final String angelSysConfFile = \"angel-site.xml\";\n+  private final Configuration conf;\n+  private final AngelClient client;\n+\n+  public AngelPSClient()\n+  throws InvalidParameterException {\n+    conf = new Configuration();\n+    loadSysConfig();\n+    client = AngelClientFactory.get(conf);\n+  }\n+\n+  public AngelPSClient(Configuration conf) {\n+    this.conf = conf;\n+    client = AngelClientFactory.get(conf);\n+  }\n+\n+  private void loadSysConfig() throws InvalidParameterException {\n+    String angelHomePath = System.getenv(\"ANGEL_HOME\");\n+    if (angelHomePath == null) {\n+      LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\n+      throw new InvalidParameterException(\"ANGEL_HOME is empty, please set it first\");\n+    }\n+    conf.addResource(new Path(angelHomePath + \"/conf/\" + angelSysConfFile));\n+    LOG.info(\"load system config file success\");\n+  }\n+\n+  public AngelPSClient(PSStartUpConfig config)\n+  throws InvalidParameterException {\n+    conf = new Configuration();\n+    loadSysConfig();\n+    conf.setInt(AngelConf.ANGEL_PS_NUMBER, config.getPsNum());\n+    conf.setInt(AngelConf.ANGEL_PS_MEMORY_MB, config.getPsMemoryInMB());\n+    conf.setInt(AngelConf.ANGEL_PS_CPU_VCORES, config.getPsVcoreNum());\n+    conf.setInt(AngelConf.ANGEL_PSAGENT_NUMBER, config.getPsAgentNum());\n+    conf.setInt(AngelConf.ANGEL_PSAGENT_MERMORY_MB, config.getPsAgentMemoryInMB());\n+    conf.setInt(AngelConf.ANGEL_PSAGENT_CPU_VCORES, config.getPsAgentVcoreNum());\n+    Map<String, String> paramsMap = config.getConfig();\n+    if (paramsMap != null && !paramsMap.isEmpty()) {\n+      for (Entry<String, String> entry : paramsMap.entrySet()) {\n+        conf.set(entry.getKey(), entry.getValue());\n+      }\n+    }\n+    client = AngelClientFactory.get(conf);\n   }\r\n \r\n   /**\r\n    * Start Angel ps\r\n    *\r\n    * @return Angel ps running context\r\n-   */\r\n+   */\n+\n   public AngelContext startPS() throws AngelException {\r\n-    // load user job resource files\r\n-    String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\r\n-    LOG.info(\"userResourceFiles=\" + userResourceFiles);\r\n-    if (userResourceFiles != null) {\r\n-      try {\r\n-        ConfUtils.addResourceFiles(conf, userResourceFiles);\r\n-      } catch (Throwable x) {\r\n-        throw new AngelException(x);\r\n-      }\r\n-    }\r\n-\r\n-    int psNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\r\n-    if (psNum <= 0) {\r\n-      throw new AngelException(\"Invalid parameter:Wrong ps number!\");\r\n-    }\r\n-    conf.set(AngelConf.ANGEL_RUNNING_MODE, RunningMode.ANGEL_PS.toString());\r\n-    client.addMatrix(new MatrixContext(\"init\", 1, psNum, -1, -1, -1, 1, 1, new ArrayList<>(),\r\n-        RowType.T_DOUBLE_SPARSE));\r\n-    client.startPSServer();\r\n-    client.run();\r\n-    return new AngelContext(client.getMasterLocation(), conf);\r\n+    // load user job resource files\n+    String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n+    LOG.info(\"userResourceFiles=\" + userResourceFiles);\n+    if (userResourceFiles != null) {\n+      try {\n+        ConfUtils.addResourceFiles(conf, userResourceFiles);\n+      } catch (Throwable x) {\n+        throw new AngelException(x);\n+      }\n+    }\n+\n+    int psNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n+    if (psNum <= 0) {\n+      throw new AngelException(\"Invalid parameter:Wrong ps number!\");\n+    }\n+    conf.set(AngelConf.ANGEL_RUNNING_MODE, RunningMode.ANGEL_PS.toString());\n+    client.addMatrix(new MatrixContext(\"init\", 1, psNum, -1, -1, -1, 1, 1, new ArrayList<>(), RowType.T_DOUBLE_SPARSE));\n+    client.startPSServer();\n+    client.run();\n+    return new AngelContext(client.getMasterLocation(), conf);\n   }\r\n \r\n   /**\r\n    * Add a matrix\r\n    *\r\n    * @param mContext matrix context\r\n-   */\r\n-  public void addMatrix(MatrixContext mContext) throws AngelException {\r\n-    client.addMatrix(mContext);\r\n+   */\n+\n+  public void addMatrix(MatrixContext mContext) throws AngelException {\n+    client.addMatrix(mContext);\n   }\r\n \r\n   /**\r\n    * Create matrices\r\n    *\r\n    * @param matrixContexts matrix context\r\n-   */\r\n-  public void createMatrices(List<MatrixContext> matrixContexts) throws AngelException {\r\n-    client.createMatrices(matrixContexts);\r\n+   */\n+\n+  public void createMatrices(List<MatrixContext> matrixContexts) throws AngelException {\n+    client.createMatrices(matrixContexts);\n   }\r\n \r\n   /**\r\n    * Save model to hdfs\r\n    *\r\n    * @param saveContext model save context\r\n-   */\r\n-  public void save(ModelSaveContext saveContext) throws AngelException {\r\n-    client.save(saveContext);\r\n+   */\n+\n+  public void save(ModelSaveContext saveContext) throws AngelException {\n+    client.save(saveContext);\n   }\r\n \r\n   /**\r\n@@ -151,18 +153,20 @@ public class AngelPSClient {\n    *\r\n    * @param checkpointId checkpoint id\r\n    * @param saveContext save context\r\n-   */\r\n-  public void checkpoint(int checkpointId, ModelSaveContext saveContext) throws AngelException {\r\n-    client.checkpoint(checkpointId, saveContext);\r\n+   */\n+\n+  public void checkpoint(int checkpointId, ModelSaveContext saveContext) throws AngelException {\n+    client.checkpoint(checkpointId, saveContext);\n   }\r\n \r\n   /**\r\n    * Load the model from hdfs files\r\n    *\r\n    * @param loadContext load context\r\n-   */\r\n-  public void load(ModelLoadContext loadContext) {\r\n-    client.load(loadContext);\r\n+   */\n+\n+  public void load(ModelLoadContext loadContext) {\n+    client.load(loadContext);\n   }\r\n \r\n   /**\r\n@@ -170,30 +174,34 @@ public class AngelPSClient {\n    *\r\n    * @param checkpointId the checkpoint id\r\n    * @param loadContext load context\r\n-   */\r\n-  public void recover(int checkpointId, ModelLoadContext loadContext) {\r\n-    client.recover(checkpointId, loadContext);\r\n+   */\n+\n+  public void recover(int checkpointId, ModelLoadContext loadContext) {\n+    client.recover(checkpointId, loadContext);\n   }\r\n \r\n   /**\r\n    * Stop Angel ps\r\n-   */\r\n-  public void stopPS() {\r\n-    try {\r\n-      client.stop(0);\r\n-    } catch (AngelException e) {\r\n-      LOG.warn(\"stop ps failed.\", e);\r\n-    }\r\n+   */\n+\n+  public void stopPS() {\n+    try {\n+      client.stop(0);\n+    } catch (AngelException e) {\n+      LOG.warn(\"stop ps failed.\", e);\n+    }\n   }\r\n \r\n   /**\r\n    * Kill Angel ps\r\n-   */\r\n-  public void killPS() {\r\n-    try {\r\n-      client.stop();\r\n-    } catch (AngelException e) {\r\n-      LOG.warn(\"kill ps failed.\", e);\r\n-    }\r\n-  }\r\n-}\r\n+   */\n+\n+  public void killPS() {\n+    try {\n+      client.stop();\n+    } catch (AngelException e) {\n+      LOG.warn(\"kill ps failed.\", e);\n+    }\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 133
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}