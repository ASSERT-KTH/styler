{
    "project_name": "neo4j-neo4j",
    "error_id": "3137",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "154",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3137/GeometryType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3137/GeometryType.java\nindex d92d7c70fdc..3238dad2348 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3137/GeometryType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3137/GeometryType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -42,89 +43,89 @@ class GeometryType extends Type\n     // long1Array (coordinates), use long1Array so that it doesn't clash mentally with long0Array in GeometryArrayType\n \n     // code+table for points (geometry) is 3B in total\n-    private static final int MASK_CODE =            0b00000011_11111111_11111111;\n+    private static final int MASK_CODE = 0b00000011_11111111_11111111;\n     private static final int MASK_DIMENSIONS_READ = 0b00011100_00000000_00000000;\n     //                                                  ^ this bit is reserved for future expansion of number of dimensions\n-    private static final int MASK_TABLE_READ =      0b11000000_00000000_00000000;\n-    private static final int SHIFT_DIMENSIONS = Integer.bitCount( MASK_CODE );\n-    private static final int SHIFT_TABLE = SHIFT_DIMENSIONS + 1/*the reserved dimension bit*/ + Integer.bitCount( MASK_DIMENSIONS_READ );\n+    private static final int MASK_TABLE_READ = 0b11000000_00000000_00000000;\n+    private static final int SHIFT_DIMENSIONS = Integer.bitCount(MASK_CODE);\n+    private static final int SHIFT_TABLE = SHIFT_DIMENSIONS + 1/*the reserved dimension bit*/ + Integer.bitCount(MASK_DIMENSIONS_READ);\n     private static final int MASK_TABLE_PUT = MASK_TABLE_READ >>> SHIFT_TABLE;\n     private static final int MASK_DIMENSIONS_PUT = MASK_DIMENSIONS_READ >>> SHIFT_DIMENSIONS;\n \n-    GeometryType( byte typeId )\n+    GeometryType(byte typeId)\n     {\n-        super( ValueGroup.GEOMETRY, typeId, PointValue.MIN_VALUE, PointValue.MAX_VALUE );\n+        super(ValueGroup.GEOMETRY, typeId, PointValue.MIN_VALUE, PointValue.MAX_VALUE);\n     }\n \n     @Override\n-    int valueSize( GenericKey state )\n+    int valueSize(GenericKey state)\n     {\n-        int coordinatesSize = dimensions( state ) * GenericKey.SIZE_GEOMETRY_COORDINATE;\n+        int coordinatesSize = dimensions(state) * GenericKey.SIZE_GEOMETRY_COORDINATE;\n         return GenericKey.SIZE_GEOMETRY_HEADER + GenericKey.SIZE_GEOMETRY + coordinatesSize;\n     }\n \n-    static int dimensions( GenericKey state )\n+    static int dimensions(GenericKey state)\n     {\n-        return toIntExact( state.long3 );\n+        return toIntExact(state.long3);\n     }\n \n     @Override\n-    void copyValue( GenericKey to, GenericKey from )\n+    void copyValue(GenericKey to, GenericKey from)\n     {\n         to.long0 = from.long0;\n         to.long1 = from.long1;\n         to.long2 = from.long2;\n         to.long3 = from.long3;\n-        int dimensions = dimensions( from );\n-        to.long1Array = ensureBigEnough( to.long1Array, dimensions );\n-        System.arraycopy( from.long1Array, 0, to.long1Array, 0, dimensions );\n+        int dimensions = dimensions(from);\n+        to.long1Array = ensureBigEnough(to.long1Array, dimensions);\n+        System.arraycopy(from.long1Array, 0, to.long1Array, 0, dimensions);\n         to.spaceFillingCurve = from.spaceFillingCurve;\n     }\n \n     @Override\n-    Value asValue( GenericKey state )\n+    Value asValue(GenericKey state)\n     {\n-        assertHasCoordinates( state );\n-        CoordinateReferenceSystem crs = CoordinateReferenceSystem.get( (int) state.long1, (int) state.long2 );\n-        return asValue( state, crs, 0 );\n+        assertHasCoordinates(state);\n+        CoordinateReferenceSystem crs = CoordinateReferenceSystem.get((int) state.long1, (int) state.long2);\n+        return asValue(state, crs, 0);\n     }\n \n-    static PointValue asValue( GenericKey state, CoordinateReferenceSystem crs, int offset )\n+    static PointValue asValue(GenericKey state, CoordinateReferenceSystem crs, int offset)\n     {\n-        double[] coordinates = new double[dimensions( state )];\n-        for ( int i = 0; i < coordinates.length; i++ )\n+        double[] coordinates = new double[dimensions(state)];\n+        for (int i = 0; i < coordinates.length; i++)\n         {\n-            coordinates[i] = Double.longBitsToDouble( state.long1Array[offset + i] );\n+            coordinates[i] = Double.longBitsToDouble(state.long1Array[offset + i]);\n         }\n-        return Values.pointValue( crs, coordinates );\n+        return Values.pointValue(crs, coordinates);\n     }\n \n     @Override\n-    int compareValue( GenericKey left, GenericKey right )\n+    int compareValue(GenericKey left, GenericKey right)\n     {\n         return compare(\n-                left.long0, left.long1, left.long2, left.long3, left.long1Array, 0,\n-                right.long0, right.long1, right.long2, right.long3, right.long1Array, 0 );\n+          left.long0, left.long1, left.long2, left.long3, left.long1Array, 0,\n+          right.long0, right.long1, right.long2, right.long3, right.long1Array, 0);\n     }\n \n     @Override\n-    void putValue( PageCursor cursor, GenericKey state )\n+    void putValue(PageCursor cursor, GenericKey state)\n     {\n-        putCrs( cursor, state.long1, state.long2, state.long3 );\n-        putPoint( cursor, state.long0, state.long3, state.long1Array, 0 );\n+        putCrs(cursor, state.long1, state.long2, state.long3);\n+        putPoint(cursor, state.long0, state.long3, state.long1Array, 0);\n     }\n \n     @Override\n-    boolean readValue( PageCursor cursor, int size, GenericKey into )\n+    boolean readValue(PageCursor cursor, int size, GenericKey into)\n     {\n-        return readCrs( cursor, into ) && readPoint( cursor, into );\n+        return readCrs(cursor, into) && readPoint(cursor, into);\n     }\n \n     @Override\n-    String toString( GenericKey state )\n+    String toString(GenericKey state)\n     {\n-        String asValueString = hasCoordinates( state ) ? asValue( state ).toString() : \"NO_COORDINATES\";\n-        return format( \"Geometry[tableId:%d, code:%d, rawValue:%d, value:%s\", state.long1, state.long2, state.long0, asValueString );\n+        String asValueString = hasCoordinates(state) ? asValue(state).toString() : \"NO_COORDINATES\";\n+        return format(\"Geometry[tableId:%d, code:%d, rawValue:%d, value:%s\", state.long1, state.long2, state.long0, asValueString);\n     }\n \n     /**\n@@ -136,36 +137,36 @@ class GeometryType extends Type\n      * they only happen to occupy same value on space filling curve.\n      */\n     static int compare(\n-            long this_long0, long this_long1, long this_long2, long this_long3, long[] this_long1Array, int this_coordinates_offset,\n-            long that_long0, long that_long1, long that_long2, long that_long3, long[] that_long1Array, int that_coordinates_offset )\n+      long this_long0, long this_long1, long this_long2, long this_long3, long[] this_long1Array, int this_coordinates_offset,\n+      long that_long0, long that_long1, long that_long2, long that_long3, long[] that_long1Array, int that_coordinates_offset)\n     {\n-        int tableIdComparison = Integer.compare( (int) this_long1, (int) that_long1 );\n-        if ( tableIdComparison != 0 )\n+        int tableIdComparison = Integer.compare((int) this_long1, (int) that_long1);\n+        if (tableIdComparison != 0)\n         {\n             return tableIdComparison;\n         }\n \n-        int codeComparison = Integer.compare( (int) this_long2, (int) that_long2 );\n-        if ( codeComparison != 0 )\n+        int codeComparison = Integer.compare((int) this_long2, (int) that_long2);\n+        if (codeComparison != 0)\n         {\n             return codeComparison;\n         }\n \n-        int derivedValueComparison = Long.compare( this_long0, that_long0 );\n-        if ( derivedValueComparison != 0 )\n+        int derivedValueComparison = Long.compare(this_long0, that_long0);\n+        if (derivedValueComparison != 0)\n         {\n             return derivedValueComparison;\n         }\n \n-        long dimensions = Math.min( this_long3, that_long3 );\n-        for ( int i = 0; i < dimensions; i++ )\n+        long dimensions = Math.min(this_long3, that_long3);\n+        for (int i = 0; i < dimensions; i++)\n         {\n             // It's ok to compare the coordinate value here without deserializing them\n             // because we are only defining SOME deterministic order so that we can\n             // correctly separate unique points from each other, even if they collide\n             // on the space filling curve.\n-            int coordinateComparison = Long.compare( this_long1Array[this_coordinates_offset + i], that_long1Array[that_coordinates_offset + i] );\n-            if ( coordinateComparison != 0 )\n+            int coordinateComparison = Long.compare(this_long1Array[this_coordinates_offset + i], that_long1Array[that_coordinates_offset + i]);\n+            if (coordinateComparison != 0)\n             {\n                 return coordinateComparison;\n             }\n@@ -173,29 +174,29 @@ class GeometryType extends Type\n         return 0;\n     }\n \n-    static void putCrs( PageCursor cursor, long long1, long long2, long long3 )\n+    static void putCrs(PageCursor cursor, long long1, long long2, long long3)\n     {\n-        assertValueWithin( long1, MASK_TABLE_PUT, \"tableId\" );\n-        assertValueWithin( long2, MASK_CODE, \"code\" );\n-        assertValueWithin( long3, MASK_DIMENSIONS_PUT, \"dimensions\" );\n+        assertValueWithin(long1, MASK_TABLE_PUT, \"tableId\");\n+        assertValueWithin(long2, MASK_CODE, \"code\");\n+        assertValueWithin(long3, MASK_DIMENSIONS_PUT, \"dimensions\");\n         int header = (int) ((long1 << SHIFT_TABLE) | (long3 << SHIFT_DIMENSIONS) | long2);\n-        put3BInt( cursor, header );\n+        put3BInt(cursor, header);\n     }\n \n-    private static void assertValueWithin( long value, int maskAllowed, String name )\n+    private static void assertValueWithin(long value, int maskAllowed, String name)\n     {\n-        if ( (value & ~maskAllowed) != 0 )\n+        if ((value & ~maskAllowed) != 0)\n         {\n-            throw new IllegalArgumentException( \"Expected 0 < \" + name + \" <= \" + maskAllowed + \", but was \" + value );\n+            throw new IllegalArgumentException(\"Expected 0 < \" + name + \" <= \" + maskAllowed + \", but was \" + value);\n         }\n     }\n \n-    static void putPoint( PageCursor cursor, long long0, long long3, long[] long1Array, int long1ArrayOffset )\n+    static void putPoint(PageCursor cursor, long long0, long long3, long[] long1Array, int long1ArrayOffset)\n     {\n-        cursor.putLong( long0 );\n-        for ( int i = 0; i < long3; i++ )\n+        cursor.putLong(long0);\n+        for (int i = 0; i < long3; i++)\n         {\n-            cursor.putLong( long1Array[long1ArrayOffset + i] );\n+            cursor.putLong(long1Array[long1ArrayOffset + i]);\n         }\n     }\n \n@@ -208,77 +209,77 @@ class GeometryType extends Type\n      *\n      * @param state holds the key state.\n      */\n-    static void assertHasCoordinates( GenericKey state )\n+    static void assertHasCoordinates(GenericKey state)\n     {\n-        if ( !hasCoordinates( state ) )\n+        if (!hasCoordinates(state))\n         {\n-            throw new IllegalStateException( \"This geometry key doesn't have coordinates and can therefore neither be persisted nor generate point value.\" );\n+            throw new IllegalStateException(\"This geometry key doesn't have coordinates and can therefore neither be persisted nor generate point value.\");\n         }\n     }\n \n-    static boolean hasCoordinates( GenericKey state )\n+    static boolean hasCoordinates(GenericKey state)\n     {\n         return state.long3 != 0 && state.long1Array != null;\n     }\n \n-    static void setNoCoordinates( GenericKey state )\n+    static void setNoCoordinates(GenericKey state)\n     {\n         state.long3 = 0;\n     }\n \n-    private static void put3BInt( PageCursor cursor, int value )\n+    private static void put3BInt(PageCursor cursor, int value)\n     {\n-        cursor.putShort( (short) value );\n-        cursor.putByte( (byte) (value >>> Short.SIZE) );\n+        cursor.putShort((short) value);\n+        cursor.putByte((byte) (value >>> Short.SIZE));\n     }\n \n-    static boolean readCrs( PageCursor cursor, GenericKey into )\n+    static boolean readCrs(PageCursor cursor, GenericKey into)\n     {\n-        int header = read3BInt( cursor );\n+        int header = read3BInt(cursor);\n         into.long1 = (header & MASK_TABLE_READ) >>> SHIFT_TABLE;\n         into.long2 = header & MASK_CODE;\n         into.long3 = (header & MASK_DIMENSIONS_READ) >>> SHIFT_DIMENSIONS;\n         return true;\n     }\n \n-    private static boolean readPoint( PageCursor cursor, GenericKey into )\n+    private static boolean readPoint(PageCursor cursor, GenericKey into)\n     {\n         into.long0 = cursor.getLong();\n         // into.long3 have just been read by readCrs, before this method is called\n-        int dimensions = dimensions( into );\n-        into.long1Array = ensureBigEnough( into.long1Array, dimensions );\n-        for ( int i = 0; i < dimensions; i++ )\n+        int dimensions = dimensions(into);\n+        into.long1Array = ensureBigEnough(into.long1Array, dimensions);\n+        for (int i = 0; i < dimensions; i++)\n         {\n             into.long1Array[i] = cursor.getLong();\n         }\n         return true;\n     }\n \n-    private static int read3BInt( PageCursor cursor )\n+    private static int read3BInt(PageCursor cursor)\n     {\n         int low = cursor.getShort() & 0xFFFF;\n         int high = cursor.getByte() & 0xFF;\n         return high << Short.SIZE | low;\n     }\n \n-    void write( GenericKey state, long derivedSpaceFillingCurveValue, double[] coordinate )\n+    void write(GenericKey state, long derivedSpaceFillingCurveValue, double[] coordinate)\n     {\n         state.long0 = derivedSpaceFillingCurveValue;\n-        state.long1Array = ensureBigEnough( state.long1Array, coordinate.length );\n-        for ( int i = 0; i < coordinate.length; i++ )\n+        state.long1Array = ensureBigEnough(state.long1Array, coordinate.length);\n+        for (int i = 0; i < coordinate.length; i++)\n         {\n-            state.long1Array[i] = Double.doubleToLongBits( coordinate[i] );\n+            state.long1Array[i] = Double.doubleToLongBits(coordinate[i]);\n         }\n         state.long3 = coordinate.length;\n     }\n \n     @Override\n-    protected void addTypeSpecificDetails( StringJoiner joiner, GenericKey state )\n+    protected void addTypeSpecificDetails(StringJoiner joiner, GenericKey state)\n     {\n-        joiner.add( \"long0=\" + state.long0 );\n-        joiner.add( \"long1=\" + state.long1 );\n-        joiner.add( \"long2=\" + state.long2 );\n-        joiner.add( \"long3=\" + state.long3 );\n-        joiner.add( \"long1Array=\" + Arrays.toString( state.long1Array ) );\n+        joiner.add(\"long0=\" + state.long0);\n+        joiner.add(\"long1=\" + state.long1);\n+        joiner.add(\"long2=\" + state.long2);\n+        joiner.add(\"long3=\" + state.long3);\n+        joiner.add(\"long1Array=\" + Arrays.toString(state.long1Array));\n     }\n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}