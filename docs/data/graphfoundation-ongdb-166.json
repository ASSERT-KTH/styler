{
    "project_name": "graphfoundation-ongdb",
    "error_id": "166",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/166/ClusterOverviewProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/166/ClusterOverviewProcedure.java\nindex 740796d0074..cc982fad2d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/166/ClusterOverviewProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/166/ClusterOverviewProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.discovery.procedures;\n \n import java.net.URI;\n@@ -57,111 +58,110 @@ import static org.neo4j.internal.kernel.api.procs.ProcedureSignature.procedureSi\n  */\n public class ClusterOverviewProcedure extends CallableProcedure.BasicProcedure\n {\n-    private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n-    public static final String PROCEDURE_NAME = \"overview\";\n-    private final TopologyService topologyService;\n-    private final Log log;\n-\n-    public ClusterOverviewProcedure( TopologyService topologyService, LogProvider logProvider )\n+  private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n+  public static final String PROCEDURE_NAME = \"overview\";\n+  private final TopologyService topologyService;\n+  private final Log log;\n+\n+  public ClusterOverviewProcedure(TopologyService topologyService, LogProvider logProvider)\n+  {\n+    super(procedureSignature(new QualifiedName(PROCEDURE_NAMESPACE, PROCEDURE_NAME))\n+        .out(\"id\", Neo4jTypes.NTString)\n+        .out(\"addresses\", Neo4jTypes.NTList(Neo4jTypes.NTString))\n+        .out(\"role\", Neo4jTypes.NTString)\n+        .out(\"groups\", Neo4jTypes.NTList(Neo4jTypes.NTString))\n+        .out(\"database\", Neo4jTypes.NTString)\n+        .description(\"Overview of all currently accessible cluster members and their roles.\")\n+        .build());\n+    this.topologyService = topologyService;\n+    this.log = logProvider.getLog(getClass());\n+  }\n+\n+  @Override\n+  public RawIterator<Object[], ProcedureException> apply(\n+      Context ctx, Object[] input, ResourceTracker resourceTracker)\n+  {\n+    Map<MemberId, RoleInfo> roleMap = topologyService.allCoreRoles();\n+    List<ReadWriteEndPoint> endpoints = new ArrayList<>();\n+\n+    CoreTopology coreTopology = topologyService.allCoreServers();\n+    Set<MemberId> coreMembers = coreTopology.members().keySet();\n+\n+    for (MemberId memberId : coreMembers)\n     {\n-        super( procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) )\n-                .out( \"id\", Neo4jTypes.NTString )\n-                .out( \"addresses\", Neo4jTypes.NTList( Neo4jTypes.NTString ) )\n-                .out( \"role\", Neo4jTypes.NTString )\n-                .out( \"groups\", Neo4jTypes.NTList( Neo4jTypes.NTString ) )\n-                .out( \"database\", Neo4jTypes.NTString )\n-                .description( \"Overview of all currently accessible cluster members and their roles.\" )\n-                .build() );\n-        this.topologyService = topologyService;\n-        this.log = logProvider.getLog( getClass() );\n+      Optional<CoreServerInfo> coreServerInfo = coreTopology.find(memberId);\n+      if (coreServerInfo.isPresent())\n+      {\n+        CoreServerInfo info = coreServerInfo.get();\n+        RoleInfo role = roleMap.getOrDefault(memberId, RoleInfo.UNKNOWN);\n+        endpoints.add(new ReadWriteEndPoint(info.connectors(), role, memberId.getUuid(),\n+            asList(info.groups()), info.getDatabaseName()));\n+      } else\n+      {\n+        log.debug(\"No Address found for \" + memberId);\n+      }\n     }\n \n-    @Override\n-    public RawIterator<Object[],ProcedureException> apply(\n-            Context ctx, Object[] input, ResourceTracker resourceTracker )\n+    for (Map.Entry<MemberId, ReadReplicaInfo> readReplica : topologyService.allReadReplicas().members().entrySet())\n     {\n-        Map<MemberId,RoleInfo> roleMap = topologyService.allCoreRoles();\n-        List<ReadWriteEndPoint> endpoints = new ArrayList<>();\n+      ReadReplicaInfo readReplicaInfo = readReplica.getValue();\n+      endpoints.add(new ReadWriteEndPoint(readReplicaInfo.connectors(), RoleInfo.READ_REPLICA,\n+          readReplica.getKey().getUuid(), asList(readReplicaInfo.groups()), readReplicaInfo.getDatabaseName()));\n+    }\n \n-        CoreTopology coreTopology = topologyService.allCoreServers();\n-        Set<MemberId> coreMembers = coreTopology.members().keySet();\n+    endpoints.sort(comparing(o -> o.addresses().toString()));\n \n-        for ( MemberId memberId : coreMembers )\n-        {\n-            Optional<CoreServerInfo> coreServerInfo = coreTopology.find( memberId );\n-            if ( coreServerInfo.isPresent() )\n+    return map(endpoint -> new Object[]\n             {\n-                CoreServerInfo info = coreServerInfo.get();\n-                RoleInfo role = roleMap.getOrDefault( memberId, RoleInfo.UNKNOWN );\n-                endpoints.add( new ReadWriteEndPoint( info.connectors(), role, memberId.getUuid(),\n-                        asList( info.groups() ), info.getDatabaseName() ) );\n-            }\n-            else\n-            {\n-                log.debug( \"No Address found for \" + memberId );\n-            }\n-        }\n-\n-        for ( Map.Entry<MemberId,ReadReplicaInfo> readReplica : topologyService.allReadReplicas().members().entrySet() )\n-        {\n-            ReadReplicaInfo readReplicaInfo = readReplica.getValue();\n-            endpoints.add( new ReadWriteEndPoint( readReplicaInfo.connectors(), RoleInfo.READ_REPLICA,\n-                    readReplica.getKey().getUuid(), asList( readReplicaInfo.groups() ), readReplicaInfo.getDatabaseName() ) );\n-        }\n-\n-        endpoints.sort( comparing( o -> o.addresses().toString() ) );\n-\n-        return map( endpoint -> new Object[]\n-                        {\n-                                endpoint.memberId().toString(),\n-                                endpoint.addresses().uriList().stream().map( URI::toString ).collect( Collectors.toList() ),\n-                                endpoint.role().name(),\n-                                endpoint.groups(),\n-                                endpoint.dbName()\n-                        },\n-                asRawIterator( endpoints.iterator() ) );\n+                endpoint.memberId().toString(),\n+                endpoint.addresses().uriList().stream().map(URI::toString).collect(Collectors.toList()),\n+                endpoint.role().name(),\n+                endpoint.groups(),\n+                endpoint.dbName()\n+            },\n+        asRawIterator(endpoints.iterator()));\n+  }\n+\n+  static class ReadWriteEndPoint\n+  {\n+    private final ClientConnectorAddresses clientConnectorAddresses;\n+    private final RoleInfo role;\n+    private final UUID memberId;\n+    private final List<String> groups;\n+    private final String dbName;\n+\n+    public ClientConnectorAddresses addresses()\n+    {\n+      return clientConnectorAddresses;\n+    }\n+\n+    public RoleInfo role()\n+    {\n+      return role;\n+    }\n+\n+    UUID memberId()\n+    {\n+      return memberId;\n+    }\n+\n+    List<String> groups()\n+    {\n+      return groups;\n+    }\n+\n+    String dbName()\n+    {\n+      return dbName;\n     }\n \n-    static class ReadWriteEndPoint\n+    ReadWriteEndPoint(ClientConnectorAddresses clientConnectorAddresses, RoleInfo role, UUID memberId, List<String> groups, String dbName)\n     {\n-        private final ClientConnectorAddresses clientConnectorAddresses;\n-        private final RoleInfo role;\n-        private final UUID memberId;\n-        private final List<String> groups;\n-        private final String dbName;\n-\n-        public ClientConnectorAddresses addresses()\n-        {\n-            return clientConnectorAddresses;\n-        }\n-\n-        public RoleInfo role()\n-        {\n-            return role;\n-        }\n-\n-        UUID memberId()\n-        {\n-            return memberId;\n-        }\n-\n-        List<String> groups()\n-        {\n-            return groups;\n-        }\n-\n-        String dbName()\n-        {\n-            return dbName;\n-        }\n-\n-        ReadWriteEndPoint( ClientConnectorAddresses clientConnectorAddresses, RoleInfo role, UUID memberId, List<String> groups, String dbName )\n-        {\n-            this.clientConnectorAddresses = clientConnectorAddresses;\n-            this.role = role;\n-            this.memberId = memberId;\n-            this.groups = groups;\n-            this.dbName = dbName;\n-        }\n+      this.clientConnectorAddresses = clientConnectorAddresses;\n+      this.role = role;\n+      this.memberId = memberId;\n+      this.groups = groups;\n+      this.dbName = dbName;\n     }\n+  }\n }\n",
            "diff_size": 136
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 417).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/166/ClusterOverviewProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/166/ClusterOverviewProcedure.java\nindex 740796d0074..ff0ab456eab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/166/ClusterOverviewProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/166/ClusterOverviewProcedure.java\n@@ -58,35 +58,26 @@ import static org.neo4j.internal.kernel.api.procs.ProcedureSignature.procedureSi\n public class ClusterOverviewProcedure extends CallableProcedure.BasicProcedure\n {\n     private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n-    public static final String PROCEDURE_NAME = \"overview\";\n+\n+public static final String PROCEDURE_NAME = \"overview\";\n     private final TopologyService topologyService;\n     private final Log log;\n \n     public ClusterOverviewProcedure( TopologyService topologyService, LogProvider logProvider )\n     {\n-        super( procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) )\n-                .out( \"id\", Neo4jTypes.NTString )\n-                .out( \"addresses\", Neo4jTypes.NTList( Neo4jTypes.NTString ) )\n-                .out( \"role\", Neo4jTypes.NTString )\n-                .out( \"groups\", Neo4jTypes.NTList( Neo4jTypes.NTString ) )\n-                .out( \"database\", Neo4jTypes.NTString )\n-                .description( \"Overview of all currently accessible cluster members and their roles.\" )\n-                .build() );\n-        this.topologyService = topologyService;\n+        super( procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) ).out( \"id\", Neo4jTypes.NTString ).out( \"addresses\", Neo4jTypes.NTList( Neo4jTypes.NTString ) ).out( \"role\", Neo4jTypes.NTString ).out( \"groups\", Neo4jTypes.NTList( Neo4jTypes.NTString ) ).out( \"database\", Neo4jTypes.NTString ).description( \"Overview of all currently accessible cluster members and their roles.\" ).build() );\n+this.topologyService = topologyService;\n         this.log = logProvider.getLog( getClass() );\n     }\n \n     @Override\n-    public RawIterator<Object[],ProcedureException> apply(\n-            Context ctx, Object[] input, ResourceTracker resourceTracker )\n+    public RawIterator<Object[],ProcedureException> apply( Context ctx, Object[] input, ResourceTracker resourceTracker )\n     {\n         Map<MemberId,RoleInfo> roleMap = topologyService.allCoreRoles();\n         List<ReadWriteEndPoint> endpoints = new ArrayList<>();\n-\n-        CoreTopology coreTopology = topologyService.allCoreServers();\n+CoreTopology coreTopology = topologyService.allCoreServers();\n         Set<MemberId> coreMembers = coreTopology.members().keySet();\n-\n-        for ( MemberId memberId : coreMembers )\n+for ( MemberId memberId : coreMembers )\n         {\n             Optional<CoreServerInfo> coreServerInfo = coreTopology.find( memberId );\n             if ( coreServerInfo.isPresent() )\n@@ -110,16 +101,8 @@ public class ClusterOverviewProcedure extends CallableProcedure.BasicProcedure\n         }\n \n         endpoints.sort( comparing( o -> o.addresses().toString() ) );\n-\n-        return map( endpoint -> new Object[]\n-                        {\n-                                endpoint.memberId().toString(),\n-                                endpoint.addresses().uriList().stream().map( URI::toString ).collect( Collectors.toList() ),\n-                                endpoint.role().name(),\n-                                endpoint.groups(),\n-                                endpoint.dbName()\n-                        },\n-                asRawIterator( endpoints.iterator() ) );\n+return map( endpoint -> new Object[]{\n+    endpoint.memberId().toString(), endpoint.addresses().uriList().stream().map( URI::toString ).collect( Collectors.toList() ), endpoint.role().name(), endpoint.groups(), endpoint.dbName()}, asRawIterator( endpoints.iterator() ) );\n     }\n \n     static class ReadWriteEndPoint\n@@ -164,4 +147,4 @@ public class ClusterOverviewProcedure extends CallableProcedure.BasicProcedure\n             this.dbName = dbName;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}