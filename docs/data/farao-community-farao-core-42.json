{
    "project_name": "farao-community-farao-core",
    "error_id": "42",
    "information": {
        "errors": [
            {
                "line": "58",
                "column": "5",
                "severity": "error",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n    /**\n     * Reads result from a JSON file (will NOT rely on platform config).\n     */\n    public static RaoComputationResult read(Path jsonFile) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/42/JsonRaoComputationResult.java\nindex 453aad9b239..2b5950a3d1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/42/JsonRaoComputationResult.java\n@@ -54,7 +54,6 @@ public final class JsonRaoComputationResult {\n         throw new IllegalStateException(\"Utility class\");\n     }\n \n-\n     /**\n      * Reads result from a JSON file (will NOT rely on platform config).\n      */\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "59",
                    "column": "5",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/42/JsonRaoComputationResult.java\nindex 453aad9b239..8d61694169e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/42/JsonRaoComputationResult.java\n@@ -4,6 +4,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package com.farao_community.farao.ra_optimisation.json;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -41,7 +42,7 @@ public final class JsonRaoComputationResult {\n      * Lazily initialized list of extension serializers.\n      */\n     private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER =\n-            Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"rao-computation-result\"));\n+        Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"rao-computation-result\"));\n \n     /**\n      * Gets the known extension serializers.\n@@ -108,6 +109,6 @@ public final class JsonRaoComputationResult {\n \n     private static ObjectMapper createObjectMapper() {\n         return JsonUtil.createObjectMapper()\n-                .registerModule(new RaoComputationResultJsonModule());\n+            .registerModule(new RaoComputationResultJsonModule());\n     }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/42/JsonRaoComputationResult.java\nindex 453aad9b239..50208d25302 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/42/JsonRaoComputationResult.java\n@@ -54,8 +54,7 @@ public final class JsonRaoComputationResult {\n         throw new IllegalStateException(\"Utility class\");\n     }\n \n-\n-    /**\n+/**\n      * Reads result from a JSON file (will NOT rely on platform config).\n      */\n     public static RaoComputationResult read(Path jsonFile) {\n@@ -110,4 +109,4 @@ public final class JsonRaoComputationResult {\n         return JsonUtil.createObjectMapper()\n                 .registerModule(new RaoComputationResultJsonModule());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "61",
                    "column": "5",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/42/JsonRaoComputationResult.java\nindex 453aad9b239..d491f29b537 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/42/JsonRaoComputationResult.java\n@@ -15,7 +15,6 @@ import com.powsybl.commons.extensions.ExtensionJsonSerializer;\n import com.powsybl.commons.extensions.ExtensionProviders;\n import com.powsybl.commons.json.JsonUtil;\n import com.farao_community.farao.ra_optimisation.RaoComputationResult;\n-\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -27,6 +26,8 @@ import java.util.Objects;\n /**\n  * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}\n  */\n+\n+\n public final class JsonRaoComputationResult {\n \n     /**\n@@ -34,18 +35,20 @@ public final class JsonRaoComputationResult {\n      *\n      * @param <E> The extension class\n      */\n+\n     public interface ExtensionSerializer<E extends Extension<RaoComputationResult>> extends ExtensionJsonSerializer<RaoComputationResult, E> {\n     }\n \n     /**\n      * Lazily initialized list of extension serializers.\n      */\n-    private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER =\n-            Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"rao-computation-result\"));\n+\n+    private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER = Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"rao-computation-result\"));\n \n     /**\n      * Gets the known extension serializers.\n      */\n+\n     public static ExtensionProviders<ExtensionSerializer> getExtensionSerializers() {\n         return SUPPLIER.get();\n     }\n@@ -58,9 +61,9 @@ public final class JsonRaoComputationResult {\n     /**\n      * Reads result from a JSON file (will NOT rely on platform config).\n      */\n+\n     public static RaoComputationResult read(Path jsonFile) {\n         Objects.requireNonNull(jsonFile);\n-\n         try (InputStream is = Files.newInputStream(jsonFile)) {\n             return read(is);\n         } catch (IOException e) {\n@@ -71,6 +74,7 @@ public final class JsonRaoComputationResult {\n     /**\n      * Reads result from a JSON file (will NOT rely on platform config).\n      */\n+\n     public static RaoComputationResult read(InputStream jsonStream) {\n         try {\n             ObjectMapper objectMapper = createObjectMapper();\n@@ -83,9 +87,9 @@ public final class JsonRaoComputationResult {\n     /**\n      * Writes result as JSON to a file.\n      */\n+\n     public static void write(RaoComputationResult result, Path jsonFile) {\n         Objects.requireNonNull(jsonFile);\n-\n         try (OutputStream outputStream = Files.newOutputStream(jsonFile)) {\n             write(result, outputStream);\n         } catch (IOException e) {\n@@ -96,9 +100,11 @@ public final class JsonRaoComputationResult {\n     /**\n      * Writes result as JSON to an output stream.\n      */\n+\n     public static void write(RaoComputationResult result, OutputStream outputStream) {\n         try {\n             ObjectMapper objectMapper = createObjectMapper();\n+\n             ObjectWriter writer = objectMapper.writerWithDefaultPrettyPrinter();\n             writer.writeValue(outputStream, result);\n         } catch (IOException e) {\n@@ -107,7 +113,6 @@ public final class JsonRaoComputationResult {\n     }\n \n     private static ObjectMapper createObjectMapper() {\n-        return JsonUtil.createObjectMapper()\n-                .registerModule(new RaoComputationResultJsonModule());\n+        return JsonUtil.createObjectMapper().registerModule(new RaoComputationResultJsonModule());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/42/JsonRaoComputationResult.java\nindex 453aad9b239..2b5950a3d1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/42/JsonRaoComputationResult.java\n@@ -54,7 +54,6 @@ public final class JsonRaoComputationResult {\n         throw new IllegalStateException(\"Utility class\");\n     }\n \n-\n     /**\n      * Reads result from a JSON file (will NOT rely on platform config).\n      */\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/42/JsonRaoComputationResult.java\nindex 453aad9b239..2b5950a3d1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/42/JsonRaoComputationResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/42/JsonRaoComputationResult.java\n@@ -54,7 +54,6 @@ public final class JsonRaoComputationResult {\n         throw new IllegalStateException(\"Utility class\");\n     }\n \n-\n     /**\n      * Reads result from a JSON file (will NOT rely on platform config).\n      */\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}