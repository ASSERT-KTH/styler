{
    "project_name": "vostok-hercules",
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "32",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 173).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        this.pattern = CollectionUtil.isNullOrEmpty(exclusions)\n                ? PatternMatcher.matcherListToRegexp(patternMatchers)\n                : Pattern.compile(\"(?!(\" + PatternMatcher.matchersListToRegexpString(exclusions) + \"))(\" + PatternMatcher.matchersListToRegexpString(patternMatchers) + \")\");\n    }\n\n    public Pattern toPattern() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/65/Subscription.java\nindex 41e85c0e0c0..9b0a103ad4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/65/Subscription.java\n@@ -15,68 +15,69 @@ import java.util.regex.Pattern;\n  * @see PatternMatcher\n  */\n public class Subscription {\n-    private final List<PatternMatcher> patternMatchers;\n-    private final List<PatternMatcher> exclusions;\n-    private final Pattern pattern;\n+  private final List<PatternMatcher> patternMatchers;\n+  private final List<PatternMatcher> exclusions;\n+  private final Pattern pattern;\n \n-    public Subscription(List<PatternMatcher> patternMatchers) {\n-        this(patternMatchers, Collections.emptyList());\n-    }\n+  public Subscription(List<PatternMatcher> patternMatchers) {\n+    this(patternMatchers, Collections.emptyList());\n+  }\n \n-    public Subscription(List<PatternMatcher> patternMatchers, List<PatternMatcher> exclusions) {\n-        this.patternMatchers = patternMatchers;\n-        this.exclusions = exclusions;\n+  public Subscription(List<PatternMatcher> patternMatchers, List<PatternMatcher> exclusions) {\n+    this.patternMatchers = patternMatchers;\n+    this.exclusions = exclusions;\n \n-        this.pattern = CollectionUtil.isNullOrEmpty(exclusions)\n-                ? PatternMatcher.matcherListToRegexp(patternMatchers)\n-                : Pattern.compile(\"(?!(\" + PatternMatcher.matchersListToRegexpString(exclusions) + \"))(\" + PatternMatcher.matchersListToRegexpString(patternMatchers) + \")\");\n-    }\n+    this.pattern = CollectionUtil.isNullOrEmpty(exclusions)\n+      ? PatternMatcher.matcherListToRegexp(patternMatchers)\n+      : Pattern\n+      .compile(\"(?!(\" + PatternMatcher.matchersListToRegexpString(exclusions) + \"))(\" + PatternMatcher.matchersListToRegexpString(patternMatchers) + \")\");\n+  }\n \n-    public Pattern toPattern() {\n-        return pattern;\n-    }\n+  public Pattern toPattern() {\n+    return pattern;\n+  }\n \n-    public String toGroupId(String application) {\n-        return ConsumerUtil.toGroupId(application, patternMatchers).replaceAll(\"\\\\s+\", \"-\");\n-    }\n+  public String toGroupId(String application) {\n+    return ConsumerUtil.toGroupId(application, patternMatchers).replaceAll(\"\\\\s+\", \"-\");\n+  }\n \n-    @Override\n-    public String toString() {\n-        return pattern.pattern();\n-    }\n+  @Override\n+  public String toString() {\n+    return pattern.pattern();\n+  }\n \n-    /**\n-     * Builder for {@link Subscription}.\n-     *\n-     * @return builder\n-     */\n-    public static SubscriptionBuilder builder() {\n-        return new SubscriptionBuilder();\n-    }\n+  /**\n+   * Builder for {@link Subscription}.\n+   *\n+   * @return builder\n+   */\n+  public static SubscriptionBuilder builder() {\n+    return new SubscriptionBuilder();\n+  }\n \n-    public static final class SubscriptionBuilder {\n-        private final List<PatternMatcher> patternMatchers = new ArrayList<>();\n-        private final List<PatternMatcher> exclusions = new ArrayList<>();\n+  public static final class SubscriptionBuilder {\n+    private final List<PatternMatcher> patternMatchers = new ArrayList<>();\n+    private final List<PatternMatcher> exclusions = new ArrayList<>();\n \n-        public SubscriptionBuilder include(String[] patterns) {\n-            for (String pattern : patterns) {\n-                patternMatchers.add(new PatternMatcher(pattern));\n-            }\n-            return this;\n-        }\n+    public SubscriptionBuilder include(String[] patterns) {\n+      for (String pattern : patterns) {\n+        patternMatchers.add(new PatternMatcher(pattern));\n+      }\n+      return this;\n+    }\n \n-        public SubscriptionBuilder exclude(String[] patterns) {\n-            for (String pattern : patterns) {\n-                exclusions.add(new PatternMatcher(pattern));\n-            }\n-            return this;\n-        }\n+    public SubscriptionBuilder exclude(String[] patterns) {\n+      for (String pattern : patterns) {\n+        exclusions.add(new PatternMatcher(pattern));\n+      }\n+      return this;\n+    }\n \n-        public Subscription build() {\n-            if (exclusions.isEmpty()) {\n-                return new Subscription(new ArrayList<>(patternMatchers));\n-            }\n-            return new Subscription(new ArrayList<>(patternMatchers), new ArrayList<>(exclusions));\n-        }\n+    public Subscription build() {\n+      if (exclusions.isEmpty()) {\n+        return new Subscription(new ArrayList<>(patternMatchers));\n+      }\n+      return new Subscription(new ArrayList<>(patternMatchers), new ArrayList<>(exclusions));\n     }\n+  }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/65/Subscription.java\nindex 41e85c0e0c0..e7a98111ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/65/Subscription.java\n@@ -79,4 +79,4 @@ public class Subscription {\n             return new Subscription(new ArrayList<>(patternMatchers), new ArrayList<>(exclusions));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/65/Subscription.java\nindex 41e85c0e0c0..a740257d0c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/65/Subscription.java\n@@ -2,7 +2,6 @@ package ru.kontur.vostok.hercules.sink;\n \n import ru.kontur.vostok.hercules.util.PatternMatcher;\n import ru.kontur.vostok.hercules.util.collection.CollectionUtil;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -14,7 +13,10 @@ import java.util.regex.Pattern;\n  * @author Gregory Koshelev\n  * @see PatternMatcher\n  */\n+\n+\n public class Subscription {\n+\n     private final List<PatternMatcher> patternMatchers;\n     private final List<PatternMatcher> exclusions;\n     private final Pattern pattern;\n@@ -26,10 +28,8 @@ public class Subscription {\n     public Subscription(List<PatternMatcher> patternMatchers, List<PatternMatcher> exclusions) {\n         this.patternMatchers = patternMatchers;\n         this.exclusions = exclusions;\n-\n-        this.pattern = CollectionUtil.isNullOrEmpty(exclusions)\n-                ? PatternMatcher.matcherListToRegexp(patternMatchers)\n-                : Pattern.compile(\"(?!(\" + PatternMatcher.matchersListToRegexpString(exclusions) + \"))(\" + PatternMatcher.matchersListToRegexpString(patternMatchers) + \")\");\n+        this.pattern = CollectionUtil.isNullOrEmpty(exclusions) ? PatternMatcher.matcherListToRegexp(patternMatchers) : Pattern.compile(\"(?!(\" + PatternMatcher.matchersListToRegexpString(exclusions) + \"))(\"\n+        + PatternMatcher.matchersListToRegexpString(patternMatchers) + \")\");\n     }\n \n     public Pattern toPattern() {\n@@ -37,7 +37,8 @@ public class Subscription {\n     }\n \n     public String toGroupId(String application) {\n-        return ConsumerUtil.toGroupId(application, patternMatchers).replaceAll(\"\\\\s+\", \"-\");\n+        return ConsumerUtil.toGroupId(application, patternMatchers)\n+        .replaceAll(\"\\\\s+\", \"-\");\n     }\n \n     @Override\n@@ -50,11 +51,13 @@ public class Subscription {\n      *\n      * @return builder\n      */\n+\n     public static SubscriptionBuilder builder() {\n         return new SubscriptionBuilder();\n     }\n \n     public static final class SubscriptionBuilder {\n+\n         private final List<PatternMatcher> patternMatchers = new ArrayList<>();\n         private final List<PatternMatcher> exclusions = new ArrayList<>();\n \n@@ -79,4 +82,4 @@ public class Subscription {\n             return new Subscription(new ArrayList<>(patternMatchers), new ArrayList<>(exclusions));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "column": "41",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "97",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "97",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "166",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "166",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "175",
                    "severity": "warning",
                    "message": "'}' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/65/Subscription.java\nindex 41e85c0e0c0..52f88b376d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/65/Subscription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/65/Subscription.java\n@@ -29,10 +29,7 @@ public class Subscription {\n \n         this.pattern = CollectionUtil.isNullOrEmpty(exclusions)\n                 ? PatternMatcher.matcherListToRegexp(patternMatchers)\n-                : Pattern.compile(\"(?!(\" + PatternMatcher.matchersListToRegexpString(exclusions) + \"))(\" + PatternMatcher.matchersListToRegexpString(patternMatchers) + \")\");\n-    }\n-\n-    public Pattern toPattern() {\n+                : Pattern.compile(\"(?!(\"+ PatternMatcher .matchersListToRegexpString(exclusions)+\"))(\" + PatternMatcher . matchersListToRegexpString(patternMatchers)+\")\" ) ; }public Pattern toPattern() {\n         return pattern;\n     }\n \n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}