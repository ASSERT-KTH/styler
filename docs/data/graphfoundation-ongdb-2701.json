{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2701",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2701/OwnerCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2701/OwnerCheck.java\nindex 44e4c0cddf8..a3d1bfb647a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2701/OwnerCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2701/OwnerCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.ArrayList;\n@@ -69,372 +70,372 @@ import static org.neo4j.consistency.RecordType.STRING_PROPERTY;\n \n class OwnerCheck implements CheckDecorator\n {\n-    private final ConcurrentMap<Long, PropertyOwner> owners;\n-    private final Map<RecordType, ConcurrentMap<Long, DynamicOwner>> dynamics;\n-\n-    OwnerCheck( boolean active, DynamicStore... stores )\n+  private final ConcurrentMap<Long, PropertyOwner> owners;\n+  private final Map<RecordType, ConcurrentMap<Long, DynamicOwner>> dynamics;\n+\n+  OwnerCheck(boolean active, DynamicStore... stores)\n+  {\n+    this.owners = active ? new ConcurrentHashMap<>(16, 0.75f, 4) : null;\n+    this.dynamics = active ? initialize(stores) : null;\n+  }\n+\n+  private static Map<RecordType, ConcurrentMap<Long, DynamicOwner>> initialize(DynamicStore[] stores)\n+  {\n+    EnumMap<RecordType, ConcurrentMap<Long, DynamicOwner>> map =\n+        new EnumMap<>(RecordType.class);\n+    for (DynamicStore store : stores)\n     {\n-        this.owners = active ? new ConcurrentHashMap<>( 16, 0.75f, 4 ) : null;\n-        this.dynamics = active ? initialize( stores ) : null;\n+      map.put(store.type, new ConcurrentHashMap<>(16, 0.75f, 4));\n     }\n-\n-    private static Map<RecordType, ConcurrentMap<Long, DynamicOwner>> initialize( DynamicStore[] stores )\n+    return unmodifiableMap(map);\n+  }\n+\n+  void scanForOrphanChains(ProgressMonitorFactory progressFactory)\n+  {\n+    List<Runnable> tasks = new ArrayList<>();\n+    ProgressMonitorFactory.MultiPartBuilder progress = progressFactory\n+        .multipleParts(\"Checking for orphan chains\");\n+    if (owners != null)\n     {\n-        EnumMap<RecordType, ConcurrentMap<Long, DynamicOwner>> map =\n-                new EnumMap<>( RecordType.class );\n-        for ( DynamicStore store : stores )\n-        {\n-            map.put( store.type, new ConcurrentHashMap<>( 16, 0.75f, 4 ) );\n-        }\n-        return unmodifiableMap( map );\n+      tasks.add(new OrphanCheck(RecordType.PROPERTY, owners, progress));\n     }\n-\n-    void scanForOrphanChains( ProgressMonitorFactory progressFactory )\n+    if (dynamics != null)\n     {\n-        List<Runnable> tasks = new ArrayList<>();\n-        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory\n-                .multipleParts( \"Checking for orphan chains\" );\n-        if ( owners != null )\n-        {\n-            tasks.add( new OrphanCheck( RecordType.PROPERTY, owners, progress ) );\n-        }\n-        if ( dynamics != null )\n-        {\n-            for ( Map.Entry<RecordType, ConcurrentMap<Long, DynamicOwner>> entry : dynamics.entrySet() )\n-            {\n-                tasks.add( new OrphanCheck( entry.getKey(), entry.getValue(), progress ) );\n-            }\n-        }\n-        for ( Runnable task : tasks )\n-        {\n-            task.run();\n-        }\n+      for (Map.Entry<RecordType, ConcurrentMap<Long, DynamicOwner>> entry : dynamics.entrySet())\n+      {\n+        tasks.add(new OrphanCheck(entry.getKey(), entry.getValue(), progress));\n+      }\n     }\n-\n-    private static class OrphanCheck implements Runnable\n+    for (Runnable task : tasks)\n     {\n-        private final ConcurrentMap<Long, ? extends Owner> owners;\n-        private final ProgressListener progress;\n+      task.run();\n+    }\n+  }\n \n-        OrphanCheck( RecordType property, ConcurrentMap<Long, ? extends Owner> owners,\n-                     ProgressMonitorFactory.MultiPartBuilder progress )\n-        {\n-            this.owners = owners;\n-            this.progress = progress.progressForPart( \"Checking for orphan \" + property.name() + \" chains\",\n-                                                      owners.size() );\n-        }\n+  private static class OrphanCheck implements Runnable\n+  {\n+    private final ConcurrentMap<Long, ? extends Owner> owners;\n+    private final ProgressListener progress;\n \n-        @Override\n-        public void run()\n-        {\n-            for ( Owner owner : owners.values() )\n-            {\n-                owner.checkOrphanage();\n-                progress.add( 1 );\n-            }\n-            progress.done();\n-        }\n+    OrphanCheck(RecordType property, ConcurrentMap<Long, ? extends Owner> owners,\n+                ProgressMonitorFactory.MultiPartBuilder progress)\n+    {\n+      this.owners = owners;\n+      this.progress = progress.progressForPart(\"Checking for orphan \" + property.name() + \" chains\",\n+          owners.size());\n     }\n \n     @Override\n-    public void prepare()\n+    public void run()\n     {\n+      for (Owner owner : owners.values())\n+      {\n+        owner.checkOrphanage();\n+        progress.add(1);\n+      }\n+      progress.done();\n     }\n-\n-    @Override\n-    public OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> decorateNeoStoreChecker(\n-            OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> checker )\n+  }\n+\n+  @Override\n+  public void prepare()\n+  {\n+  }\n+\n+  @Override\n+  public OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> decorateNeoStoreChecker(\n+      OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> checker)\n+  {\n+    if (owners == null)\n     {\n-        if ( owners == null )\n-        {\n-            return checker;\n-        }\n-        return new PrimitiveCheckerDecorator<NeoStoreRecord, NeoStoreConsistencyReport>( checker )\n-        {\n-            @Override\n-            PropertyOwner owner( NeoStoreRecord record )\n-            {\n-                return PropertyOwner.OWNING_GRAPH;\n-            }\n-        };\n+      return checker;\n     }\n-\n-    @Override\n-    public OwningRecordCheck<NodeRecord, NodeConsistencyReport> decorateNodeChecker(\n-            OwningRecordCheck<NodeRecord, NodeConsistencyReport> checker )\n+    return new PrimitiveCheckerDecorator<NeoStoreRecord, NeoStoreConsistencyReport>(checker)\n     {\n-        if ( owners == null )\n-        {\n-            return checker;\n-        }\n-        return new PrimitiveCheckerDecorator<NodeRecord, NodeConsistencyReport>( checker )\n-        {\n-            @Override\n-            PropertyOwner owner( NodeRecord record )\n-            {\n-                return new PropertyOwner.OwningNode( record );\n-            }\n-        };\n+      @Override\n+      PropertyOwner owner(NeoStoreRecord record)\n+      {\n+        return PropertyOwner.OWNING_GRAPH;\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public OwningRecordCheck<NodeRecord, NodeConsistencyReport> decorateNodeChecker(\n+      OwningRecordCheck<NodeRecord, NodeConsistencyReport> checker)\n+  {\n+    if (owners == null)\n+    {\n+      return checker;\n     }\n-\n-    @Override\n-    public OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> decorateRelationshipChecker(\n-            OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker )\n+    return new PrimitiveCheckerDecorator<NodeRecord, NodeConsistencyReport>(checker)\n     {\n-        if ( owners == null )\n-        {\n-            return checker;\n-        }\n-        return new PrimitiveCheckerDecorator<RelationshipRecord, RelationshipConsistencyReport>(\n-                checker )\n-        {\n-            @Override\n-            PropertyOwner owner( RelationshipRecord record )\n-            {\n-                return new PropertyOwner.OwningRelationship( record );\n-            }\n-        };\n+      @Override\n+      PropertyOwner owner(NodeRecord record)\n+      {\n+        return new PropertyOwner.OwningNode(record);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> decorateRelationshipChecker(\n+      OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker)\n+  {\n+    if (owners == null)\n+    {\n+      return checker;\n     }\n-\n-    @Override\n-    public RecordCheck<PropertyRecord, PropertyConsistencyReport> decoratePropertyChecker(\n-            final RecordCheck<PropertyRecord, PropertyConsistencyReport> checker )\n+    return new PrimitiveCheckerDecorator<RelationshipRecord, RelationshipConsistencyReport>(\n+        checker)\n     {\n-        if ( owners == null && dynamics == null )\n-        {\n-            return checker;\n+      @Override\n+      PropertyOwner owner(RelationshipRecord record)\n+      {\n+        return new PropertyOwner.OwningRelationship(record);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public RecordCheck<PropertyRecord, PropertyConsistencyReport> decoratePropertyChecker(\n+      final RecordCheck<PropertyRecord, PropertyConsistencyReport> checker)\n+  {\n+    if (owners == null && dynamics == null)\n+    {\n+      return checker;\n+    }\n+    return (record, engine, records) ->\n+    {\n+      if (record.inUse())\n+      {\n+        if (owners != null && Record.NO_PREVIOUS_PROPERTY.is(record.getPrevProp()))\n+        { // this record is first in a chain\n+          PropertyOwner.UnknownOwner owner = new PropertyOwner.UnknownOwner();\n+          engine.comparativeCheck(owner, ORPHAN_CHECKER);\n+          if (null == owners.putIfAbsent(record.getId(), owner))\n+          {\n+            owner.markInCustody();\n+          }\n         }\n-        return ( record, engine, records ) ->\n+        if (dynamics != null)\n         {\n-            if ( record.inUse() )\n+          for (PropertyBlock block : record)\n+          {\n+            RecordType type = recordType(block.forceGetType());\n+            if (type != null)\n             {\n-                if ( owners != null && Record.NO_PREVIOUS_PROPERTY.is( record.getPrevProp() ) )\n-                { // this record is first in a chain\n-                    PropertyOwner.UnknownOwner owner = new PropertyOwner.UnknownOwner();\n-                    engine.comparativeCheck( owner, ORPHAN_CHECKER );\n-                    if ( null == owners.putIfAbsent( record.getId(), owner ) )\n-                    {\n-                        owner.markInCustody();\n-                    }\n-                }\n-                if ( dynamics != null )\n+              ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamics.get(type);\n+              if (dynamicOwners != null)\n+              {\n+                long id = block.getSingleValueLong();\n+                DynamicOwner.Property owner = new DynamicOwner.Property(type, record);\n+                DynamicOwner prev = dynamicOwners.put(id, owner);\n+                if (prev != null)\n                 {\n-                    for ( PropertyBlock block : record )\n-                    {\n-                        RecordType type = recordType( block.forceGetType() );\n-                        if ( type != null )\n-                        {\n-                            ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamics.get( type );\n-                            if ( dynamicOwners != null )\n-                            {\n-                                long id = block.getSingleValueLong();\n-                                DynamicOwner.Property owner = new DynamicOwner.Property( type, record );\n-                                DynamicOwner prev = dynamicOwners.put( id, owner );\n-                                if ( prev != null )\n-                                {\n-                                    engine.comparativeCheck( prev.record( records ), owner );\n-                                }\n-                            }\n-                        }\n-                    }\n+                  engine.comparativeCheck(prev.record(records), owner);\n                 }\n+              }\n             }\n-            checker.check( record, engine, records );\n-        };\n+          }\n+        }\n+      }\n+      checker.check(record, engine, records);\n+    };\n+  }\n+\n+  private RecordType recordType(PropertyType type)\n+  {\n+    if (type == null)\n+    {\n+      return null;\n     }\n \n-    private RecordType recordType( PropertyType type )\n+    switch (type)\n     {\n-        if ( type == null )\n-        {\n-            return null;\n-        }\n-\n-        switch ( type )\n-        {\n-        case STRING:\n-            return STRING_PROPERTY;\n-        case ARRAY:\n-            return ARRAY_PROPERTY;\n-        default:\n-            return null;\n-        }\n+      case STRING:\n+        return STRING_PROPERTY;\n+      case ARRAY:\n+        return ARRAY_PROPERTY;\n+      default:\n+        return null;\n     }\n-\n-    @Override\n-    public RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> decoratePropertyKeyTokenChecker(\n-            RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> checker )\n+  }\n+\n+  @Override\n+  public RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> decoratePropertyKeyTokenChecker(\n+      RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> checker)\n+  {\n+    ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners(PROPERTY_KEY_NAME);\n+    if (dynamicOwners == null)\n     {\n-        ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( PROPERTY_KEY_NAME );\n-        if ( dynamicOwners == null )\n-        {\n-            return checker;\n-        }\n-        return new NameCheckerDecorator\n-                <PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport>( checker, dynamicOwners )\n-        {\n-            @Override\n-            DynamicOwner.NameOwner owner( PropertyKeyTokenRecord record )\n-            {\n-                return new DynamicOwner.PropertyKey( record );\n-            }\n-        };\n+      return checker;\n     }\n-\n-    @Override\n-    public RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> decorateRelationshipTypeTokenChecker(\n-            RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> checker )\n+    return new NameCheckerDecorator\n+        <PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport>(checker, dynamicOwners)\n     {\n-        ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n-        if ( dynamicOwners == null )\n-        {\n-            return checker;\n-        }\n-        return new NameCheckerDecorator<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport>(\n-                checker, dynamicOwners )\n-        {\n-            @Override\n-            DynamicOwner.NameOwner owner( RelationshipTypeTokenRecord record )\n-            {\n-                return new DynamicOwner.RelationshipTypeToken( record );\n-            }\n-        };\n+      @Override\n+      DynamicOwner.NameOwner owner(PropertyKeyTokenRecord record)\n+      {\n+        return new DynamicOwner.PropertyKey(record);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public RecordCheck<RelationshipTypeTokenRecord, RelationshipTypeConsistencyReport> decorateRelationshipTypeTokenChecker(\n+      RecordCheck<RelationshipTypeTokenRecord, RelationshipTypeConsistencyReport> checker)\n+  {\n+    ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners(RELATIONSHIP_TYPE_NAME);\n+    if (dynamicOwners == null)\n+    {\n+      return checker;\n     }\n-\n-    @Override\n-    public RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> decorateLabelTokenChecker(\n-            RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> checker )\n+    return new NameCheckerDecorator<RelationshipTypeTokenRecord, RelationshipTypeConsistencyReport>(\n+        checker, dynamicOwners)\n     {\n-        ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n-        if ( dynamicOwners == null )\n-        {\n-            return checker;\n-        }\n-        return new NameCheckerDecorator<LabelTokenRecord, LabelTokenConsistencyReport>( checker, dynamicOwners )\n-        {\n-            @Override\n-            DynamicOwner.NameOwner owner( LabelTokenRecord record )\n-            {\n-                return new DynamicOwner.LabelToken( record );\n-            }\n-        };\n+      @Override\n+      DynamicOwner.NameOwner owner(RelationshipTypeTokenRecord record)\n+      {\n+        return new DynamicOwner.RelationshipTypeToken(record);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> decorateLabelTokenChecker(\n+      RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> checker)\n+  {\n+    ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners(RELATIONSHIP_TYPE_NAME);\n+    if (dynamicOwners == null)\n+    {\n+      return checker;\n     }\n-\n-    RecordCheck<DynamicRecord, DynamicConsistencyReport> decorateDynamicChecker(\n-            final RecordType type, final RecordCheck<DynamicRecord, DynamicConsistencyReport> checker )\n+    return new NameCheckerDecorator<LabelTokenRecord, LabelTokenConsistencyReport>(checker, dynamicOwners)\n     {\n-        final ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( type );\n-        if ( dynamicOwners == null )\n+      @Override\n+      DynamicOwner.NameOwner owner(LabelTokenRecord record)\n+      {\n+        return new DynamicOwner.LabelToken(record);\n+      }\n+    };\n+  }\n+\n+  RecordCheck<DynamicRecord, DynamicConsistencyReport> decorateDynamicChecker(\n+      final RecordType type, final RecordCheck<DynamicRecord, DynamicConsistencyReport> checker)\n+  {\n+    final ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners(type);\n+    if (dynamicOwners == null)\n+    {\n+      return checker;\n+    }\n+    return (record, engine, records) ->\n+    {\n+      if (record.inUse())\n+      {\n+        DynamicOwner.Unknown owner = new DynamicOwner.Unknown();\n+        engine.comparativeCheck(owner, DynamicOwner.ORPHAN_CHECK);\n+        if (null == dynamicOwners.putIfAbsent(record.getId(), owner))\n         {\n-            return checker;\n+          owner.markInCustody();\n         }\n-        return ( record, engine, records ) ->\n+        if (!Record.NO_NEXT_BLOCK.is(record.getNextBlock()))\n         {\n-            if ( record.inUse() )\n-            {\n-                DynamicOwner.Unknown owner = new DynamicOwner.Unknown();\n-                engine.comparativeCheck( owner, DynamicOwner.ORPHAN_CHECK );\n-                if ( null == dynamicOwners.putIfAbsent( record.getId(), owner ) )\n-                {\n-                    owner.markInCustody();\n-                }\n-                if ( !Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n-                {\n-                    DynamicOwner.Dynamic nextOwner = new DynamicOwner.Dynamic( type, record );\n-                    DynamicOwner prevOwner = dynamicOwners.put( record.getNextBlock(), nextOwner );\n-                    if ( prevOwner != null )\n-                    {\n-                        engine.comparativeCheck( prevOwner.record( records ), nextOwner );\n-                    }\n-                }\n-            }\n-            checker.check( record, engine, records );\n-        };\n+          DynamicOwner.Dynamic nextOwner = new DynamicOwner.Dynamic(type, record);\n+          DynamicOwner prevOwner = dynamicOwners.put(record.getNextBlock(), nextOwner);\n+          if (prevOwner != null)\n+          {\n+            engine.comparativeCheck(prevOwner.record(records), nextOwner);\n+          }\n+        }\n+      }\n+      checker.check(record, engine, records);\n+    };\n+  }\n+\n+  @Override\n+  public RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> decorateRelationshipGroupChecker(\n+      RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker)\n+  {\n+    return checker;\n+  }\n+\n+  private ConcurrentMap<Long, DynamicOwner> dynamicOwners(RecordType type)\n+  {\n+    return dynamics == null ? null : dynamics.get(type);\n+  }\n+\n+  private abstract class PrimitiveCheckerDecorator<RECORD extends PrimitiveRecord,\n+      REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n+      implements OwningRecordCheck<RECORD, REPORT>\n+  {\n+    private final OwningRecordCheck<RECORD, REPORT> checker;\n+\n+    PrimitiveCheckerDecorator(OwningRecordCheck<RECORD, REPORT> checker)\n+    {\n+      this.checker = checker;\n     }\n \n     @Override\n-    public RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> decorateRelationshipGroupChecker(\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker )\n+    @SuppressWarnings(\"unchecked\")\n+    public void check(RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records)\n     {\n-        return checker;\n+      if (record.inUse())\n+      {\n+        long prop = record.getNextProp();\n+        if (!Record.NO_NEXT_PROPERTY.is(prop))\n+        {\n+          PropertyOwner previous = owners.put(prop, owner(record));\n+          if (previous != null)\n+          {\n+            engine.comparativeCheck(previous.record(records), checker.ownerCheck());\n+          }\n+        }\n+      }\n+      checker.check(record, engine, records);\n     }\n \n-    private ConcurrentMap<Long, DynamicOwner> dynamicOwners( RecordType type )\n+    @Override\n+    public ComparativeRecordChecker<RECORD, PrimitiveRecord, REPORT> ownerCheck()\n     {\n-        return dynamics == null ? null : dynamics.get( type );\n+      return checker.ownerCheck();\n     }\n \n-    private abstract class PrimitiveCheckerDecorator<RECORD extends PrimitiveRecord,\n-            REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            implements OwningRecordCheck<RECORD, REPORT>\n-    {\n-        private final OwningRecordCheck<RECORD, REPORT> checker;\n-\n-        PrimitiveCheckerDecorator( OwningRecordCheck<RECORD, REPORT> checker )\n-        {\n-            this.checker = checker;\n-        }\n-\n-        @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n-        {\n-            if ( record.inUse() )\n-            {\n-                long prop = record.getNextProp();\n-                if ( !Record.NO_NEXT_PROPERTY.is( prop ) )\n-                {\n-                    PropertyOwner previous = owners.put( prop, owner( record ) );\n-                    if ( previous != null )\n-                    {\n-                        engine.comparativeCheck( previous.record( records ), checker.ownerCheck() );\n-                    }\n-                }\n-            }\n-            checker.check( record, engine, records );\n-        }\n+    abstract PropertyOwner owner(RECORD record);\n+  }\n \n-        @Override\n-        public ComparativeRecordChecker<RECORD,PrimitiveRecord,REPORT> ownerCheck()\n-        {\n-            return checker.ownerCheck();\n-        }\n+  private abstract static class NameCheckerDecorator\n+      <RECORD extends TokenRecord, REPORT extends ConsistencyReport.NameConsistencyReport>\n+      implements RecordCheck<RECORD, REPORT>\n+  {\n+    private final RecordCheck<RECORD, REPORT> checker;\n+    private final ConcurrentMap<Long, DynamicOwner> owners;\n \n-        abstract PropertyOwner owner( RECORD record );\n+    NameCheckerDecorator(RecordCheck<RECORD, REPORT> checker, ConcurrentMap<Long, DynamicOwner> owners)\n+    {\n+      this.checker = checker;\n+      this.owners = owners;\n     }\n \n-    private abstract static class NameCheckerDecorator\n-            <RECORD extends TokenRecord, REPORT extends ConsistencyReport.NameConsistencyReport>\n-            implements RecordCheck<RECORD, REPORT>\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void check(RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records)\n     {\n-        private final RecordCheck<RECORD, REPORT> checker;\n-        private final ConcurrentMap<Long, DynamicOwner> owners;\n-\n-        NameCheckerDecorator( RecordCheck<RECORD,REPORT> checker, ConcurrentMap<Long,DynamicOwner> owners )\n+      if (record.inUse())\n+      {\n+        DynamicOwner.NameOwner owner = owner(record);\n+        DynamicOwner prev = owners.put((long) record.getNameId(), owner);\n+        if (prev != null)\n         {\n-            this.checker = checker;\n-            this.owners = owners;\n+          engine.comparativeCheck(prev.record(records), owner);\n         }\n-\n-        @SuppressWarnings( \"unchecked\" )\n-        @Override\n-        public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n-        {\n-            if ( record.inUse() )\n-            {\n-                DynamicOwner.NameOwner owner = owner( record );\n-                DynamicOwner prev = owners.put( (long)record.getNameId(), owner );\n-                if ( prev != null )\n-                {\n-                    engine.comparativeCheck( prev.record( records ), owner );\n-                }\n-            }\n-            checker.check( record, engine, records );\n-        }\n-\n-        abstract DynamicOwner.NameOwner owner( RECORD record );\n+      }\n+      checker.check(record, engine, records);\n     }\n \n-    private static final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, PropertyConsistencyReport> ORPHAN_CHECKER =\n-            ( record, primitiveRecord, engine, records ) -> engine.report().orphanPropertyChain();\n+    abstract DynamicOwner.NameOwner owner(RECORD record);\n+  }\n+\n+  private static final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, PropertyConsistencyReport> ORPHAN_CHECKER =\n+      (record, primitiveRecord, engine, records) -> engine.report().orphanPropertyChain();\n }\n",
            "diff_size": 450
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "276",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "344",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "392",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "422",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2701/OwnerCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2701/OwnerCheck.java\nindex 44e4c0cddf8..2084776a993 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2701/OwnerCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2701/OwnerCheck.java\n@@ -69,7 +69,7 @@ import static org.neo4j.consistency.RecordType.STRING_PROPERTY;\n \n class OwnerCheck implements CheckDecorator\n {\n-    private final ConcurrentMap<Long, PropertyOwner> owners;\n+    private final ConcurrentMap<Long,PropertyOwner> owners;\n     private final Map<RecordType, ConcurrentMap<Long, DynamicOwner>> dynamics;\n \n     OwnerCheck( boolean active, DynamicStore... stores )\n@@ -80,25 +80,25 @@ class OwnerCheck implements CheckDecorator\n \n     private static Map<RecordType, ConcurrentMap<Long, DynamicOwner>> initialize( DynamicStore[] stores )\n     {\n-        EnumMap<RecordType, ConcurrentMap<Long, DynamicOwner>> map =\n-                new EnumMap<>( RecordType.class );\n-        for ( DynamicStore store : stores )\n+        EnumMap<RecordType, ConcurrentMap<Long, DynamicOwner>> map = new EnumMap<>( RecordType.class );\n+for ( DynamicStore store : stores )\n         {\n             map.put( store.type, new ConcurrentHashMap<>( 16, 0.75f, 4 ) );\n         }\n-        return unmodifiableMap( map );\n+\n+return unmodifiableMap( map );\n     }\n \n     void scanForOrphanChains( ProgressMonitorFactory progressFactory )\n     {\n         List<Runnable> tasks = new ArrayList<>();\n-        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory\n-                .multipleParts( \"Checking for orphan chains\" );\n-        if ( owners != null )\n+        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory.multipleParts( \"Checking for orphan chains\" );\n+if ( owners != null )\n         {\n             tasks.add( new OrphanCheck( RecordType.PROPERTY, owners, progress ) );\n         }\n-        if ( dynamics != null )\n+\n+if ( dynamics != null )\n         {\n             for ( Map.Entry<RecordType, ConcurrentMap<Long, DynamicOwner>> entry : dynamics.entrySet() )\n             {\n@@ -116,13 +116,11 @@ class OwnerCheck implements CheckDecorator\n         private final ConcurrentMap<Long, ? extends Owner> owners;\n         private final ProgressListener progress;\n \n-        OrphanCheck( RecordType property, ConcurrentMap<Long, ? extends Owner> owners,\n-                     ProgressMonitorFactory.MultiPartBuilder progress )\n-        {\n+        OrphanCheck( RecordType property, ConcurrentMap<Long, ? extends Owner> owners, ProgressMonitorFactory.MultiPartBuilder progress )\n+{\n             this.owners = owners;\n-            this.progress = progress.progressForPart( \"Checking for orphan \" + property.name() + \" chains\",\n-                                                      owners.size() );\n-        }\n+            this.progress = progress.progressForPart( \"Checking for orphan \" + property.name() + \" chains\", owners.size() );\n+    }\n \n         @Override\n         public void run()\n@@ -142,8 +140,7 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> decorateNeoStoreChecker(\n-            OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> checker )\n+    public OwningRecordCheck<NeoStoreRecord,NeoStoreConsistencyReport> decorateNeoStoreChecker( OwningRecordCheck<NeoStoreRecord,NeoStoreConsistencyReport> checker )\n     {\n         if ( owners == null )\n         {\n@@ -160,8 +157,7 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public OwningRecordCheck<NodeRecord, NodeConsistencyReport> decorateNodeChecker(\n-            OwningRecordCheck<NodeRecord, NodeConsistencyReport> checker )\n+    public OwningRecordCheck<NodeRecord,NodeConsistencyReport> decorateNodeChecker( OwningRecordCheck<NodeRecord,NodeConsistencyReport> checker )\n     {\n         if ( owners == null )\n         {\n@@ -178,15 +174,13 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> decorateRelationshipChecker(\n-            OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker )\n+    public OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> decorateRelationshipChecker( OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> checker )\n     {\n         if ( owners == null )\n         {\n             return checker;\n         }\n-        return new PrimitiveCheckerDecorator<RelationshipRecord, RelationshipConsistencyReport>(\n-                checker )\n+        return new PrimitiveCheckerDecorator<RelationshipRecord, RelationshipConsistencyReport>( checker )\n         {\n             @Override\n             PropertyOwner owner( RelationshipRecord record )\n@@ -197,8 +191,7 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public RecordCheck<PropertyRecord, PropertyConsistencyReport> decoratePropertyChecker(\n-            final RecordCheck<PropertyRecord, PropertyConsistencyReport> checker )\n+    public RecordCheck<PropertyRecord,PropertyConsistencyReport> decoratePropertyChecker( final RecordCheck<PropertyRecord,PropertyConsistencyReport> checker )\n     {\n         if ( owners == null && dynamics == null )\n         {\n@@ -224,7 +217,7 @@ class OwnerCheck implements CheckDecorator\n                         RecordType type = recordType( block.forceGetType() );\n                         if ( type != null )\n                         {\n-                            ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamics.get( type );\n+                            ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamics.get( type );\n                             if ( dynamicOwners != null )\n                             {\n                                 long id = block.getSingleValueLong();\n@@ -262,16 +255,14 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> decoratePropertyKeyTokenChecker(\n-            RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> checker )\n+    public RecordCheck<PropertyKeyTokenRecord,PropertyKeyTokenConsistencyReport> decoratePropertyKeyTokenChecker( RecordCheck<PropertyKeyTokenRecord,PropertyKeyTokenConsistencyReport> checker )\n     {\n-        ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( PROPERTY_KEY_NAME );\n+        ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( PROPERTY_KEY_NAME );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n         }\n-        return new NameCheckerDecorator\n-                <PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport>( checker, dynamicOwners )\n+        return new NameCheckerDecorator<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport>( checker, dynamicOwners )\n         {\n             @Override\n             DynamicOwner.NameOwner owner( PropertyKeyTokenRecord record )\n@@ -282,16 +273,14 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> decorateRelationshipTypeTokenChecker(\n-            RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> checker )\n+    public RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> decorateRelationshipTypeTokenChecker( RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> checker )\n     {\n         ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n         }\n-        return new NameCheckerDecorator<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport>(\n-                checker, dynamicOwners )\n+        return new NameCheckerDecorator<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport>( checker, dynamicOwners )\n         {\n             @Override\n             DynamicOwner.NameOwner owner( RelationshipTypeTokenRecord record )\n@@ -302,10 +291,9 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> decorateLabelTokenChecker(\n-            RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> checker )\n+    public RecordCheck<LabelTokenRecord,LabelTokenConsistencyReport> decorateLabelTokenChecker( RecordCheck<LabelTokenRecord,LabelTokenConsistencyReport> checker )\n     {\n-        ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n+        ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n@@ -320,10 +308,9 @@ class OwnerCheck implements CheckDecorator\n         };\n     }\n \n-    RecordCheck<DynamicRecord, DynamicConsistencyReport> decorateDynamicChecker(\n-            final RecordType type, final RecordCheck<DynamicRecord, DynamicConsistencyReport> checker )\n+    RecordCheck<DynamicRecord,DynamicConsistencyReport> decorateDynamicChecker( final RecordType type, final RecordCheck<DynamicRecord,DynamicConsistencyReport> checker )\n     {\n-        final ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( type );\n+        final ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( type );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n@@ -338,7 +325,8 @@ class OwnerCheck implements CheckDecorator\n                 {\n                     owner.markInCustody();\n                 }\n-                if ( !Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n+\n+if ( !Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n                 {\n                     DynamicOwner.Dynamic nextOwner = new DynamicOwner.Dynamic( type, record );\n                     DynamicOwner prevOwner = dynamicOwners.put( record.getNextBlock(), nextOwner );\n@@ -353,31 +341,29 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> decorateRelationshipGroupChecker(\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker )\n+    public RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> decorateRelationshipGroupChecker( RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker )\n     {\n         return checker;\n     }\n \n-    private ConcurrentMap<Long, DynamicOwner> dynamicOwners( RecordType type )\n+    private ConcurrentMap<Long,DynamicOwner> dynamicOwners( RecordType type )\n     {\n         return dynamics == null ? null : dynamics.get( type );\n     }\n \n     private abstract class PrimitiveCheckerDecorator<RECORD extends PrimitiveRecord,\n-            REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            implements OwningRecordCheck<RECORD, REPORT>\n+            REPORT extends ConsistencyReport.PrimitiveConsistencyReport> implements OwningRecordCheck<RECORD, REPORT>\n     {\n-        private final OwningRecordCheck<RECORD, REPORT> checker;\n+        private final OwningRecordCheck<RECORD,REPORT> checker;\n \n-        PrimitiveCheckerDecorator( OwningRecordCheck<RECORD, REPORT> checker )\n+        PrimitiveCheckerDecorator( OwningRecordCheck<RECORD,REPORT> checker )\n         {\n             this.checker = checker;\n         }\n \n         @Override\n         @SuppressWarnings( \"unchecked\" )\n-        public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+        public void check( RECORD record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n         {\n             if ( record.inUse() )\n             {\n@@ -403,12 +389,10 @@ class OwnerCheck implements CheckDecorator\n         abstract PropertyOwner owner( RECORD record );\n     }\n \n-    private abstract static class NameCheckerDecorator\n-            <RECORD extends TokenRecord, REPORT extends ConsistencyReport.NameConsistencyReport>\n-            implements RecordCheck<RECORD, REPORT>\n+    private abstract static class NameCheckerDecorator<RECORD extends TokenRecord, REPORT extends ConsistencyReport.NameConsistencyReport> implements RecordCheck<RECORD, REPORT>\n     {\n-        private final RecordCheck<RECORD, REPORT> checker;\n-        private final ConcurrentMap<Long, DynamicOwner> owners;\n+        private final RecordCheck<RECORD,REPORT> checker;\n+        private final ConcurrentMap<Long,DynamicOwner> owners;\n \n         NameCheckerDecorator( RecordCheck<RECORD,REPORT> checker, ConcurrentMap<Long,DynamicOwner> owners )\n         {\n@@ -418,7 +402,7 @@ class OwnerCheck implements CheckDecorator\n \n         @SuppressWarnings( \"unchecked\" )\n         @Override\n-        public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+        public void check( RECORD record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n         {\n             if ( record.inUse() )\n             {\n@@ -435,6 +419,5 @@ class OwnerCheck implements CheckDecorator\n         abstract DynamicOwner.NameOwner owner( RECORD record );\n     }\n \n-    private static final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, PropertyConsistencyReport> ORPHAN_CHECKER =\n-            ( record, primitiveRecord, engine, records ) -> engine.report().orphanPropertyChain();\n-}\n+    private static final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, PropertyConsistencyReport> ORPHAN_CHECKER = ( record, primitiveRecord, engine, records ) -> engine.report().orphanPropertyChain();\n+    }\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "86",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "112",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "112",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "column": "46",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "173",
                    "column": "46",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "column": "46",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "202",
                    "column": "28",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "211",
                    "column": "43",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "223",
                    "column": "28",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "223",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "275",
                    "column": "41",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "277",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "285",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "293",
                    "column": "41",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "295",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "303",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "column": "41",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "313",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "320",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "365",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "365",
                    "column": "54",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "365",
                    "column": "54",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "375",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "404",
                    "column": "56",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "404",
                    "column": "56",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "415",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2701/OwnerCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2701/OwnerCheck.java\nindex 44e4c0cddf8..59d1f7409a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2701/OwnerCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2701/OwnerCheck.java\n@@ -25,7 +25,6 @@ import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-\n import org.neo4j.consistency.RecordType;\n import org.neo4j.consistency.checking.CheckDecorator;\n import org.neo4j.consistency.checking.CheckerEngine;\n@@ -60,17 +59,20 @@ import org.neo4j.kernel.impl.store.record.RelationshipGroupRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord;\n import org.neo4j.kernel.impl.store.record.TokenRecord;\n-\n import static java.util.Collections.unmodifiableMap;\n+\n import static org.neo4j.consistency.RecordType.ARRAY_PROPERTY;\n+\n import static org.neo4j.consistency.RecordType.PROPERTY_KEY_NAME;\n+\n import static org.neo4j.consistency.RecordType.RELATIONSHIP_TYPE_NAME;\n+\n import static org.neo4j.consistency.RecordType.STRING_PROPERTY;\n \n class OwnerCheck implements CheckDecorator\n {\n-    private final ConcurrentMap<Long, PropertyOwner> owners;\n-    private final Map<RecordType, ConcurrentMap<Long, DynamicOwner>> dynamics;\n+    private final ConcurrentMap<Long,PropertyOwner> owners;\n+    private final Map<RecordType,ConcurrentMap<Long,DynamicOwner>> dynamics;\n \n     OwnerCheck( boolean active, DynamicStore... stores )\n     {\n@@ -78,34 +80,36 @@ class OwnerCheck implements CheckDecorator\n         this.dynamics = active ? initialize( stores ) : null;\n     }\n \n-    private static Map<RecordType, ConcurrentMap<Long, DynamicOwner>> initialize( DynamicStore[] stores )\n+    private static Map<RecordType,ConcurrentMap<Long,DynamicOwner>> initialize( DynamicStore[] stores )\n     {\n-        EnumMap<RecordType, ConcurrentMap<Long, DynamicOwner>> map =\n-                new EnumMap<>( RecordType.class );\n-        for ( DynamicStore store : stores )\n+        EnumMap<RecordType,ConcurrentMap<Long,DynamicOwner>> map = new EnumMap<>( RecordType.class );\n+        for( DynamicStore store : stores)\n         {\n             map.put( store.type, new ConcurrentHashMap<>( 16, 0.75f, 4 ) );\n         }\n+\n         return unmodifiableMap( map );\n     }\n \n     void scanForOrphanChains( ProgressMonitorFactory progressFactory )\n     {\n         List<Runnable> tasks = new ArrayList<>();\n-        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory\n-                .multipleParts( \"Checking for orphan chains\" );\n+        ProgressMonitorFactory.MultiPartBuilder progress = progressFactory.multipleParts( \"Checking for orphan chains\" );\n         if ( owners != null )\n         {\n             tasks.add( new OrphanCheck( RecordType.PROPERTY, owners, progress ) );\n         }\n+\n         if ( dynamics != null )\n         {\n-            for ( Map.Entry<RecordType, ConcurrentMap<Long, DynamicOwner>> entry : dynamics.entrySet() )\n+            for( Map.Entry<RecordType,ConcurrentMap<Long,DynamicOwner>> entry : dynamics.entrySet()\n+            )\n             {\n                 tasks.add( new OrphanCheck( entry.getKey(), entry.getValue(), progress ) );\n             }\n         }\n-        for ( Runnable task : tasks )\n+\n+        for( Runnable task : tasks)\n         {\n             task.run();\n         }\n@@ -116,22 +120,22 @@ class OwnerCheck implements CheckDecorator\n         private final ConcurrentMap<Long, ? extends Owner> owners;\n         private final ProgressListener progress;\n \n-        OrphanCheck( RecordType property, ConcurrentMap<Long, ? extends Owner> owners,\n-                     ProgressMonitorFactory.MultiPartBuilder progress )\n+        OrphanCheck( RecordType property, ConcurrentMap<Long, ? extends Owner> owners, ProgressMonitorFactory.MultiPartBuilder progress )\n         {\n             this.owners = owners;\n-            this.progress = progress.progressForPart( \"Checking for orphan \" + property.name() + \" chains\",\n-                                                      owners.size() );\n+            this.progress = progress.progressForPart( \"Checking for orphan \" + property.name() + \" chains\", owners.size() );\n         }\n \n         @Override\n         public void run()\n         {\n-            for ( Owner owner : owners.values() )\n+            for( Owner owner : owners.values()\n+            )\n             {\n                 owner.checkOrphanage();\n                 progress.add( 1 );\n             }\n+\n             progress.done();\n         }\n     }\n@@ -142,105 +146,103 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> decorateNeoStoreChecker(\n-            OwningRecordCheck<NeoStoreRecord, NeoStoreConsistencyReport> checker )\n+    public OwningRecordCheck<NeoStoreRecord,NeoStoreConsistencyReport> decorateNeoStoreChecker( OwningRecordCheck<NeoStoreRecord,NeoStoreConsistencyReport> checker )\n     {\n         if ( owners == null )\n         {\n             return checker;\n         }\n-        return new PrimitiveCheckerDecorator<NeoStoreRecord, NeoStoreConsistencyReport>( checker )\n-        {\n-            @Override\n-            PropertyOwner owner( NeoStoreRecord record )\n-            {\n-                return PropertyOwner.OWNING_GRAPH;\n-            }\n-        };\n+\n+        return new PrimitiveCheckerDecorator <NeoStoreRecord,NeoStoreConsistencyReport>( checker )\n+{\n+    @Override PropertyOwner owner( NeoStoreRecord record )\n+    {\n+        return PropertyOwner.OWNING_GRAPH;\n+    }\n+};\n     }\n \n     @Override\n-    public OwningRecordCheck<NodeRecord, NodeConsistencyReport> decorateNodeChecker(\n-            OwningRecordCheck<NodeRecord, NodeConsistencyReport> checker )\n+    public OwningRecordCheck<NodeRecord,NodeConsistencyReport> decorateNodeChecker( OwningRecordCheck<NodeRecord,NodeConsistencyReport> checker )\n     {\n         if ( owners == null )\n         {\n             return checker;\n         }\n-        return new PrimitiveCheckerDecorator<NodeRecord, NodeConsistencyReport>( checker )\n-        {\n-            @Override\n-            PropertyOwner owner( NodeRecord record )\n-            {\n-                return new PropertyOwner.OwningNode( record );\n-            }\n-        };\n+\n+        return new PrimitiveCheckerDecorator <NodeRecord,NodeConsistencyReport>( checker )\n+{\n+    @Override PropertyOwner owner( NodeRecord record )\n+    {\n+        return new PropertyOwner. OwningNode( record );\n+    }\n+};\n     }\n \n     @Override\n-    public OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> decorateRelationshipChecker(\n-            OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker )\n+    public OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> decorateRelationshipChecker( OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> checker )\n     {\n         if ( owners == null )\n         {\n             return checker;\n         }\n-        return new PrimitiveCheckerDecorator<RelationshipRecord, RelationshipConsistencyReport>(\n-                checker )\n-        {\n-            @Override\n-            PropertyOwner owner( RelationshipRecord record )\n-            {\n-                return new PropertyOwner.OwningRelationship( record );\n-            }\n-        };\n+\n+        return new PrimitiveCheckerDecorator <RelationshipRecord,RelationshipConsistencyReport>( checker )\n+{\n+    @Override PropertyOwner owner( RelationshipRecord record )\n+    {\n+        return new PropertyOwner. OwningRelationship( record );\n+    }\n+};\n     }\n \n     @Override\n-    public RecordCheck<PropertyRecord, PropertyConsistencyReport> decoratePropertyChecker(\n-            final RecordCheck<PropertyRecord, PropertyConsistencyReport> checker )\n+    public RecordCheck<PropertyRecord,PropertyConsistencyReport> decoratePropertyChecker( final RecordCheck<PropertyRecord,PropertyConsistencyReport> checker )\n     {\n-        if ( owners == null && dynamics == null )\n+        if ( owners == null&& dynamics == null )\n         {\n             return checker;\n         }\n+\n         return ( record, engine, records ) ->\n-        {\n-            if ( record.inUse() )\n-            {\n-                if ( owners != null && Record.NO_PREVIOUS_PROPERTY.is( record.getPrevProp() ) )\n-                { // this record is first in a chain\n-                    PropertyOwner.UnknownOwner owner = new PropertyOwner.UnknownOwner();\n-                    engine.comparativeCheck( owner, ORPHAN_CHECKER );\n-                    if ( null == owners.putIfAbsent( record.getId(), owner ) )\n-                    {\n-                        owner.markInCustody();\n-                    }\n-                }\n-                if ( dynamics != null )\n-                {\n-                    for ( PropertyBlock block : record )\n-                    {\n-                        RecordType type = recordType( block.forceGetType() );\n-                        if ( type != null )\n-                        {\n-                            ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamics.get( type );\n-                            if ( dynamicOwners != null )\n-                            {\n-                                long id = block.getSingleValueLong();\n-                                DynamicOwner.Property owner = new DynamicOwner.Property( type, record );\n-                                DynamicOwner prev = dynamicOwners.put( id, owner );\n-                                if ( prev != null )\n-                                {\n-                                    engine.comparativeCheck( prev.record( records ), owner );\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            checker.check( record, engine, records );\n-        };\n+               {\n+                   if ( record.inUse() )\n+                   {\n+                       if ( owners != null&& Record.NO_PREVIOUS_PROPERTY.is( record.getPrevProp() ) )\n+                       { // this record is first in a chain\n+                           PropertyOwner.UnknownOwner owner = new PropertyOwner. UnknownOwner();\n+                           engine.comparativeCheck( owner, ORPHAN_CHECKER );\n+                           if ( null == owners.putIfAbsent( record.getId(), owner ) )\n+                           {\n+                               owner.markInCustody();\n+                           }\n+                       }\n+\n+                       if ( dynamics != null )\n+                       {\n+                           for( PropertyBlock block : record)\n+                           {\n+                               RecordType type = recordType( block.forceGetType() );\n+                               if ( type != null )\n+                               {\n+                                   ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamics.get( type );\n+                                   if ( dynamicOwners != null )\n+                                   {\n+                                       long id = block.getSingleValueLong();\n+                                       DynamicOwner.Property owner = new DynamicOwner. Property( type, record );\n+                                       DynamicOwner prev = dynamicOwners.put( id, owner );\n+                                       if ( prev != null )\n+                                       {\n+                                           engine.comparativeCheck( prev.record( records ), owner );\n+                                       }\n+                                   }\n+                               }\n+                           }\n+                       }\n+                   }\n+\n+                   checker.check( record, engine, records );\n+               };\n     }\n \n     private RecordType recordType( PropertyType type )\n@@ -262,127 +264,121 @@ class OwnerCheck implements CheckDecorator\n     }\n \n     @Override\n-    public RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> decoratePropertyKeyTokenChecker(\n-            RecordCheck<PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport> checker )\n+    public RecordCheck<PropertyKeyTokenRecord,PropertyKeyTokenConsistencyReport> decoratePropertyKeyTokenChecker( RecordCheck<PropertyKeyTokenRecord,PropertyKeyTokenConsistencyReport> checker )\n     {\n-        ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( PROPERTY_KEY_NAME );\n+        ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( PROPERTY_KEY_NAME );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n         }\n-        return new NameCheckerDecorator\n-                <PropertyKeyTokenRecord, PropertyKeyTokenConsistencyReport>( checker, dynamicOwners )\n-        {\n-            @Override\n-            DynamicOwner.NameOwner owner( PropertyKeyTokenRecord record )\n-            {\n-                return new DynamicOwner.PropertyKey( record );\n-            }\n-        };\n+\n+        return new NameCheckerDecorator <PropertyKeyTokenRecord,PropertyKeyTokenConsistencyReport>( checker, dynamicOwners )\n+{\n+    @Override DynamicOwner.NameOwner owner( PropertyKeyTokenRecord record )\n+    {\n+        return new DynamicOwner. PropertyKey( record );\n+    }\n+};\n     }\n \n     @Override\n-    public RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> decorateRelationshipTypeTokenChecker(\n-            RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> checker )\n+    public RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> decorateRelationshipTypeTokenChecker( RecordCheck<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport> checker )\n     {\n         ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n         }\n-        return new NameCheckerDecorator<RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport>(\n-                checker, dynamicOwners )\n-        {\n-            @Override\n-            DynamicOwner.NameOwner owner( RelationshipTypeTokenRecord record )\n-            {\n-                return new DynamicOwner.RelationshipTypeToken( record );\n-            }\n-        };\n+\n+        return new NameCheckerDecorator <RelationshipTypeTokenRecord,RelationshipTypeConsistencyReport>( checker, dynamicOwners )\n+{\n+    @Override DynamicOwner.NameOwner owner( RelationshipTypeTokenRecord record )\n+    {\n+        return new DynamicOwner. RelationshipTypeToken( record );\n+    }\n+};\n     }\n \n     @Override\n-    public RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> decorateLabelTokenChecker(\n-            RecordCheck<LabelTokenRecord, LabelTokenConsistencyReport> checker )\n+    public RecordCheck<LabelTokenRecord,LabelTokenConsistencyReport> decorateLabelTokenChecker( RecordCheck<LabelTokenRecord,LabelTokenConsistencyReport> checker )\n     {\n-        ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n+        ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( RELATIONSHIP_TYPE_NAME );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n         }\n-        return new NameCheckerDecorator<LabelTokenRecord, LabelTokenConsistencyReport>( checker, dynamicOwners )\n-        {\n-            @Override\n-            DynamicOwner.NameOwner owner( LabelTokenRecord record )\n-            {\n-                return new DynamicOwner.LabelToken( record );\n-            }\n-        };\n+\n+        return new NameCheckerDecorator <LabelTokenRecord,LabelTokenConsistencyReport>( checker, dynamicOwners )\n+{\n+    @Override DynamicOwner.NameOwner owner( LabelTokenRecord record )\n+    {\n+        return new DynamicOwner. LabelToken( record );\n+    }\n+};\n     }\n \n-    RecordCheck<DynamicRecord, DynamicConsistencyReport> decorateDynamicChecker(\n-            final RecordType type, final RecordCheck<DynamicRecord, DynamicConsistencyReport> checker )\n+    RecordCheck<DynamicRecord,DynamicConsistencyReport> decorateDynamicChecker( final RecordType type, final RecordCheck<DynamicRecord,DynamicConsistencyReport> checker )\n     {\n-        final ConcurrentMap<Long, DynamicOwner> dynamicOwners = dynamicOwners( type );\n+        final ConcurrentMap<Long,DynamicOwner> dynamicOwners = dynamicOwners( type );\n         if ( dynamicOwners == null )\n         {\n             return checker;\n         }\n+\n         return ( record, engine, records ) ->\n-        {\n-            if ( record.inUse() )\n-            {\n-                DynamicOwner.Unknown owner = new DynamicOwner.Unknown();\n-                engine.comparativeCheck( owner, DynamicOwner.ORPHAN_CHECK );\n-                if ( null == dynamicOwners.putIfAbsent( record.getId(), owner ) )\n-                {\n-                    owner.markInCustody();\n-                }\n-                if ( !Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n-                {\n-                    DynamicOwner.Dynamic nextOwner = new DynamicOwner.Dynamic( type, record );\n-                    DynamicOwner prevOwner = dynamicOwners.put( record.getNextBlock(), nextOwner );\n-                    if ( prevOwner != null )\n-                    {\n-                        engine.comparativeCheck( prevOwner.record( records ), nextOwner );\n-                    }\n-                }\n-            }\n-            checker.check( record, engine, records );\n-        };\n+               {\n+                   if ( record.inUse() )\n+                   {\n+                       DynamicOwner.Unknown owner = new DynamicOwner. Unknown();\n+                       engine.comparativeCheck( owner, DynamicOwner.ORPHAN_CHECK );\n+                       if ( null == dynamicOwners.putIfAbsent( record.getId(), owner ) )\n+                       {\n+                           owner.markInCustody();\n+                       }\n+\n+                       if ( ! Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n+                       {\n+                           DynamicOwner.Dynamic nextOwner = new DynamicOwner. Dynamic( type, record );\n+                           DynamicOwner prevOwner = dynamicOwners.put( record.getNextBlock(), nextOwner );\n+                           if ( prevOwner != null )\n+                           {\n+                               engine.comparativeCheck( prevOwner.record( records ), nextOwner );\n+                           }\n+                       }\n+                   }\n+\n+                   checker.check( record, engine, records );\n+               };\n     }\n \n     @Override\n-    public RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> decorateRelationshipGroupChecker(\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker )\n+    public RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> decorateRelationshipGroupChecker( RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker )\n     {\n         return checker;\n     }\n \n-    private ConcurrentMap<Long, DynamicOwner> dynamicOwners( RecordType type )\n+    private ConcurrentMap<Long,DynamicOwner> dynamicOwners( RecordType type )\n     {\n         return dynamics == null ? null : dynamics.get( type );\n     }\n \n-    private abstract class PrimitiveCheckerDecorator<RECORD extends PrimitiveRecord,\n-            REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            implements OwningRecordCheck<RECORD, REPORT>\n+    private abstract class PrimitiveCheckerDecorator < RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> implements OwningRecordCheck<RECORD,REPORT>\n     {\n-        private final OwningRecordCheck<RECORD, REPORT> checker;\n+        private final OwningRecordCheck<RECORD,REPORT> checker;\n \n-        PrimitiveCheckerDecorator( OwningRecordCheck<RECORD, REPORT> checker )\n+        PrimitiveCheckerDecorator( OwningRecordCheck<RECORD,REPORT> checker )\n         {\n             this.checker = checker;\n         }\n \n         @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+        @ SuppressWarnings( \"unchecked\")\n+        public void check( RECORD record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n         {\n             if ( record.inUse() )\n             {\n                 long prop = record.getNextProp();\n-                if ( !Record.NO_NEXT_PROPERTY.is( prop ) )\n+                if ( ! Record.NO_NEXT_PROPERTY.is( prop ) )\n                 {\n                     PropertyOwner previous = owners.put( prop, owner( record ) );\n                     if ( previous != null )\n@@ -391,6 +387,7 @@ class OwnerCheck implements CheckDecorator\n                     }\n                 }\n             }\n+\n             checker.check( record, engine, records );\n         }\n \n@@ -400,15 +397,14 @@ class OwnerCheck implements CheckDecorator\n             return checker.ownerCheck();\n         }\n \n-        abstract PropertyOwner owner( RECORD record );\n+        abstract PropertyOwner owner( RECORD record )\n+        ;\n     }\n \n-    private abstract static class NameCheckerDecorator\n-            <RECORD extends TokenRecord, REPORT extends ConsistencyReport.NameConsistencyReport>\n-            implements RecordCheck<RECORD, REPORT>\n+    private abstract static class NameCheckerDecorator < RECORD extends TokenRecord, REPORT extends ConsistencyReport.NameConsistencyReport> implements RecordCheck<RECORD,REPORT>\n     {\n-        private final RecordCheck<RECORD, REPORT> checker;\n-        private final ConcurrentMap<Long, DynamicOwner> owners;\n+        private final RecordCheck<RECORD,REPORT> checker;\n+        private final ConcurrentMap<Long,DynamicOwner> owners;\n \n         NameCheckerDecorator( RecordCheck<RECORD,REPORT> checker, ConcurrentMap<Long,DynamicOwner> owners )\n         {\n@@ -416,25 +412,26 @@ class OwnerCheck implements CheckDecorator\n             this.owners = owners;\n         }\n \n-        @SuppressWarnings( \"unchecked\" )\n+        @ SuppressWarnings( \"unchecked\")\n         @Override\n-        public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+        public void check( RECORD record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n         {\n             if ( record.inUse() )\n             {\n                 DynamicOwner.NameOwner owner = owner( record );\n-                DynamicOwner prev = owners.put( (long)record.getNameId(), owner );\n+                DynamicOwner prev = owners.put( (long) record.getNameId(), owner );\n                 if ( prev != null )\n                 {\n                     engine.comparativeCheck( prev.record( records ), owner );\n                 }\n             }\n+\n             checker.check( record, engine, records );\n         }\n \n-        abstract DynamicOwner.NameOwner owner( RECORD record );\n+        abstract DynamicOwner.NameOwner owner( RECORD record )\n+        ;\n     }\n \n-    private static final ComparativeRecordChecker<PropertyRecord, PrimitiveRecord, PropertyConsistencyReport> ORPHAN_CHECKER =\n-            ( record, primitiveRecord, engine, records ) -> engine.report().orphanPropertyChain();\n-}\n+    private static final ComparativeRecordChecker<PropertyRecord,PrimitiveRecord,PropertyConsistencyReport> ORPHAN_CHECKER = ( record, primitiveRecord, engine, records ) -> engine.report().orphanPropertyChain();\n+}\n\\ No newline at end of file\n",
            "diff_size": 189
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}