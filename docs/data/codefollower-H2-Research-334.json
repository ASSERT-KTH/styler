{
    "project_name": "codefollower-H2-Research",
    "error_id": "334",
    "information": {
        "errors": [
            {
                "line": "93",
                "column": "3",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "//     */\n//    //\u4f8b\u5982System.setProperty(\"user.home\", \"E:/H2/tmp\");\n//\t//fileName = \"file:~/FileStoreTest/my.txt\";\n//    //\u5219\u8fd4\u56de\u7684\u662fE:/H2/tmp/FileStoreTest/my.txt\n//    public static String expandUserHomeDirectory(String fileName) {\n//    \t//\u8981\u4e48\u662f\u5355\u4e2a~\uff0c\u8981\u4e48\u662f\u4ee5~/\u5f00\u5934",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "93",
                    "column": "3",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "93",
                    "column": "3",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/334/FilePathDisk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/334/FilePathDisk.java\nindex ed5dfa15c78..9f1cf621149 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/334/FilePathDisk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/334/FilePathDisk.java\n@@ -32,482 +32,4 @@\n // * This file system stores files on disk.\n // * This is the most common file system.\n // */\n-//public class FilePathDisk extends FilePath {\n-//\n-//    private static final String CLASSPATH_PREFIX = \"classpath:\";\n-//\n-//    @Override\n-//    public FilePathDisk getPath(String path) {\n-//        FilePathDisk p = new FilePathDisk();\n-//        //name\u662f\u7236\u7c7bFilePath\u7684\u5b57\u6bb5\n-//        p.name = translateFileName(path);\n-//        return p;\n-//    }\n-//\n-//    @Override\n-//    public long size() {\n-//        if (name.startsWith(CLASSPATH_PREFIX)) {\n-//            try {\n-//                String fileName = name.substring(CLASSPATH_PREFIX.length());\n-//                // Force absolute resolution in Class.getResource\n-//                if (!fileName.startsWith(\"/\")) {\n-//                    fileName = \"/\" + fileName;\n-//                }\n-//                URL resource = this.getClass().getResource(fileName);\n-//                if (resource != null) {\n-//                    return Files.size(Paths.get(resource.toURI()));\n-//                } else {\n-//                    return 0;\n-//                }\n-//            } catch (Exception e) {\n-//                return 0;\n-//            }\n-//        }\n-//        return new File(name).length();\n-//    }\n-//\n-//    /**\n-//     * Translate the file name to the native format. This will replace '\\' with\n-//     * '/' and expand the home directory ('~').\n-//     *\n-//     * @param fileName the file name\n-//     * @return the native file name\n-//     */\n-//    //\u53bb\u6389file\u8fd9\u4e2a\u6a21\u5f0f\u524d\u7f00\uff0c\u5e76\u4e14\u66ff\u6362\\\u5230/\uff0c\u66ff\u6362~\u5230USER_HOME\n-//    protected static String translateFileName(String fileName) {\n-//        fileName = fileName.replace('\\\\', '/');\n-//        if (fileName.startsWith(\"file:\")) {\n-//            fileName = fileName.substring(\"file:\".length());\n-//        }\n-//        return expandUserHomeDirectory(fileName);\n-//    }\n-//\n-//    /**\n-//     * Expand '~' to the user home directory. It is only be expanded if the '~'\n-//     * stands alone, or is followed by '/' or '\\'.\n-//     *\n-//     * @param fileName the file name\n-//     * @return the native file name\n-//     */\n-//    //\u4f8b\u5982System.setProperty(\"user.home\", \"E:/H2/tmp\");\n-//\t//fileName = \"file:~/FileStoreTest/my.txt\";\n-//    //\u5219\u8fd4\u56de\u7684\u662fE:/H2/tmp/FileStoreTest/my.txt\n-//    public static String expandUserHomeDirectory(String fileName) {\n-//    \t//\u8981\u4e48\u662f\u5355\u4e2a~\uff0c\u8981\u4e48\u662f\u4ee5~/\u5f00\u5934\n-//        if (fileName.startsWith(\"~\") && (fileName.length() == 1 || fileName.startsWith(\"~/\"))) {\n-//            String userDir = SysProperties.USER_HOME; //\u9ed8\u8ba4\u662fC:\\Users\\Administrator\n-//            fileName = userDir + fileName.substring(1);\n-//        }\n-//        return fileName;\n-//    }\n-//\n-//    @Override\n-//    public void moveTo(FilePath newName, boolean atomicReplace) {\n-//        File oldFile = new File(name);\n-//        File newFile = new File(newName.name);\n-//        if (oldFile.getAbsolutePath().equals(newFile.getAbsolutePath())) {\n-//            return;\n-//        }\n-//        if (!oldFile.exists()) {\n-//            throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2,\n-//                    name + \" (not found)\",\n-//                    newName.name);\n-//        }\n-//        // Java 7: use java.nio.file.Files.move(Path source, Path target,\n-//        //     CopyOption... options)\n-//        // with CopyOptions \"REPLACE_EXISTING\" and \"ATOMIC_MOVE\".\n-//        if (atomicReplace) {\n-//            boolean ok = oldFile.renameTo(newFile);\n-//            if (ok) {\n-//                return;\n-//            }\n-//            throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2, name, newName.name);\n-//        }\n-//        if (newFile.exists()) {\n-//            throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2, name, newName + \" (exists)\");\n-//        }\n-//        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {\n-//            IOUtils.trace(\"rename\", name + \" >\" + newName, null);\n-//            boolean ok = oldFile.renameTo(newFile);\n-//            if (ok) {\n-//                return;\n-//            }\n-//            wait(i);\n-//        }\n-//        throw DbException.get(ErrorCode.FILE_RENAME_FAILED_2, name, newName.name);\n-//    }\n-//\n-//    private static void wait(int i) {\n-//        if (i == 8) {\n-//            System.gc();\n-//        }\n-//        try {\n-//            // sleep at most 256 ms\n-//            long sleep = Math.min(256, i * i);\n-//            Thread.sleep(sleep);\n-//        } catch (InterruptedException e) {\n-//            // ignore\n-//        }\n-//    }\n-//\n-//    @Override\n-//    public boolean createFile() {\n-//        File file = new File(name);\n-//        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {\n-//            try {\n-//                return file.createNewFile();\n-//            } catch (IOException e) {\n-//                // 'access denied' is really a concurrent access problem\n-//                wait(i);\n-//            }\n-//        }\n-//        return false;\n-//    }\n-//\n-//    @Override\n-//    public boolean exists() {\n-//        return new File(name).exists();\n-//    }\n-//\n-//    @Override\n-//    public void delete() {\n-//        File file = new File(name);\n-//        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {\n-//            IOUtils.trace(\"delete\", name, null);\n-//            boolean ok = file.delete();\n-//            if (ok || !file.exists()) {\n-//                return;\n-//            }\n-//            wait(i);\n-//        }\n-//        throw DbException.get(ErrorCode.FILE_DELETE_FAILED_1, name);\n-//    }\n-//    \n-//    //\u6587\u4ef6\u548c\u76ee\u5f55\u540d\u90fd\u4f1a\u5217\u51fa\u6765\n-//    @Override\n-//    public List<FilePath> newDirectoryStream() {\n-//        ArrayList<FilePath> list = new ArrayList<>();\n-//        File f = new File(name);\n-//        try {\n-//            String[] files = f.list();\n-//            if (files != null) {\n-//                String base = f.getCanonicalPath();\n-//                if (!base.endsWith(SysProperties.FILE_SEPARATOR)) {\n-//                    base += SysProperties.FILE_SEPARATOR;\n-//                }\n-//                list.ensureCapacity(files.length);\n-//                for (String file : files) {\n-//                    list.add(getPath(base + file));\n-//                }\n-//            }\n-//            return list;\n-//        } catch (IOException e) {\n-//            throw DbException.convertIOException(e, name);\n-//        }\n-//    }\n-//\n-//    @Override\n-//    public boolean canWrite() {\n-//        return canWriteInternal(new File(name));\n-//    }\n-//\n-//    @Override\n-//    public boolean setReadOnly() {\n-//        File f = new File(name);\n-//        return f.setReadOnly();\n-//    }\n-//\n-//    @Override\n-//    public FilePathDisk toRealPath() {\n-//        try {\n-//            String fileName = new File(name).getCanonicalPath();\n-//            return getPath(fileName);\n-//        } catch (IOException e) {\n-//            throw DbException.convertIOException(e, name);\n-//        }\n-//    }\n-//\n-//    @Override\n-//    public FilePath getParent() {\n-//        String p = new File(name).getParent();\n-//        return p == null ? null : getPath(p);\n-//    }\n-//\n-//    @Override\n-//    public boolean isDirectory() {\n-//        return new File(name).isDirectory();\n-//    }\n-//\n-//    @Override\n-//    public boolean isAbsolute() {\n-//        return new File(name).isAbsolute();\n-//    }\n-//\n-//    @Override\n-//    public long lastModified() {\n-//        return new File(name).lastModified();\n-//    }\n-//\n-//    private static boolean canWriteInternal(File file) {\n-//        try {\n-//            if (!file.canWrite()) {\n-//                return false;\n-//            }\n-//        } catch (Exception e) {\n-//            // workaround for GAE which throws a\n-//            // java.security.AccessControlException\n-//            return false;\n-//        }\n-//        // File.canWrite() does not respect windows user permissions,\n-//        // so we must try to open it using the mode \"rw\".\n-//        // See also http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4420020\n-//        RandomAccessFile r = null;\n-//        try {\n-//            r = new RandomAccessFile(file, \"rw\");\n-//            return true;\n-//        } catch (FileNotFoundException e) {\n-//            return false;\n-//        } finally {\n-//            if (r != null) {\n-//                try {\n-//                    r.close();\n-//                } catch (IOException e) {\n-//                    // ignore\n-//                }\n-//            }\n-//        }\n-//    }\n-//\n-//    @Override\n-//    public void createDirectory() {\n-//        File dir = new File(name);\n-//        for (int i = 0; i < SysProperties.MAX_FILE_RETRY; i++) {\n-//            if (dir.exists()) {\n-//                if (dir.isDirectory()) {\n-//                    return;\n-//                }\n-//                throw DbException.get(ErrorCode.FILE_CREATION_FAILED_1,\n-//                        name + \" (a file with this name already exists)\");\n-//            } else if (dir.mkdir()) {\n-//                return;\n-//            }\n-//            wait(i);\n-//        }\n-//        throw DbException.get(ErrorCode.FILE_CREATION_FAILED_1, name);\n-//    }\n-//\n-//    @Override\n-//    public OutputStream newOutputStream(boolean append) throws IOException {\n-//        try {\n-//            File file = new File(name);\n-//            File parent = file.getParentFile();\n-//            if (parent != null) {\n-//                FileUtils.createDirectories(parent.getAbsolutePath());\n-//            }\n-//            FileOutputStream out = new FileOutputStream(name, append);\n-//            IOUtils.trace(\"openFileOutputStream\", name, out);\n-//            return out;\n-//        } catch (IOException e) {\n-//            freeMemoryAndFinalize();\n-//            return new FileOutputStream(name);\n-//        }\n-//    }\n-//\n-//    @Override\n-//    public InputStream newInputStream() throws IOException {\n-////<<<<<<< HEAD\n-////        int index = name.indexOf(':');\n-////        if (index > 1 && index < 20) {\n-////        \t//\u5982\"classpath:my/test/store/fs/FileUtilsTest.class\"\n-////=======\n-//        if (name.matches(\"[a-zA-Z]{2,19}:.*\")) {\n-//            // if the ':' is in position 1, a windows file access is assumed:\n-//            // C:.. or D:, and if the ':' is not at the beginning, assume its a\n-//            // file name with a colon\n-//            if (name.startsWith(CLASSPATH_PREFIX)) {\n-//                String fileName = name.substring(CLASSPATH_PREFIX.length());\n-//                // Force absolute resolution in Class.getResourceAsStream\n-//                if (!fileName.startsWith(\"/\")) {\n-//                    fileName = \"/\" + fileName;\n-//                }\n-//                InputStream in = getClass().getResourceAsStream(fileName);\n-//                if (in == null) {\n-//                    // ClassLoader.getResourceAsStream doesn't need leading \"/\"\n-//                    in = Thread.currentThread().getContextClassLoader().\n-//                            getResourceAsStream(fileName.substring(1));\n-//                }\n-//                if (in == null) {\n-//                    throw new FileNotFoundException(\"resource \" + fileName);\n-//                }\n-//                return in;\n-//            }\n-//            // otherwise an URL is assumed\n-//            URL url = new URL(name);\n-//            return url.openStream();\n-//        }\n-//        FileInputStream in = new FileInputStream(name);\n-//        IOUtils.trace(\"openFileInputStream\", name, in);\n-//        return in;\n-//    }\n-//\n-//    /**\n-//     * Call the garbage collection and run finalization. This close all files\n-//     * that were not closed, and are no longer referenced.\n-//     */\n-//    static void freeMemoryAndFinalize() {\n-//        IOUtils.trace(\"freeMemoryAndFinalize\", null, null);\n-//        Runtime rt = Runtime.getRuntime();\n-//        long mem = rt.freeMemory();\n-//        for (int i = 0; i < 16; i++) {\n-//            rt.gc();\n-//            long now = rt.freeMemory();\n-//            rt.runFinalization();\n-//            if (now == mem) {\n-//                break;\n-//            }\n-//            mem = now;\n-//        }\n-//    }\n-//\n-//    @Override\n-//    public FileChannel open(String mode) throws IOException {\n-//        FileDisk f;\n-//        try {\n-//            f = new FileDisk(name, mode);\n-//            IOUtils.trace(\"open\", name, f);\n-//        } catch (IOException e) {\n-//            freeMemoryAndFinalize();\n-//            try {\n-//                f = new FileDisk(name, mode);\n-//            } catch (IOException e2) {\n-//                throw e;\n-//            }\n-//        }\n-//        return f;\n-//    }\n-//\n-//    @Override\n-//    public String getScheme() {\n-//        return \"file\";\n-//    }\n-//\n-//    @Override\n-//    public FilePath createTempFile(String suffix, boolean inTempDir) throws IOException {\n-//        String fileName = name + \".\";\n-//        String prefix = new File(fileName).getName();\n-//        File dir;\n-//        if (inTempDir) {\n-//            dir = new File(System.getProperty(\"java.io.tmpdir\", \".\"));\n-//        } else {\n-//            dir = new File(fileName).getAbsoluteFile().getParentFile();\n-//        }\n-//        FileUtils.createDirectories(dir.getAbsolutePath());\n-//        while (true) {\n-//            File f = new File(dir, prefix + getNextTempFileNamePart(false) + suffix);\n-//            if (f.exists() || !f.createNewFile()) {\n-//                // in theory, the random number could collide\n-//                getNextTempFileNamePart(true);\n-//                continue;\n-//            }\n-//            return get(f.getCanonicalPath());\n-//        }\n-//    }\n-//\n-//}\n-//\n-///**\n-// * Uses java.io.RandomAccessFile to access a file.\n-// */\n-//class FileDisk extends FileBase {\n-//\n-//    private final RandomAccessFile file;\n-//    private final String name;\n-//    private final boolean readOnly;\n-//\n-//    FileDisk(String fileName, String mode) throws FileNotFoundException {\n-//        this.file = new RandomAccessFile(fileName, mode);\n-//        this.name = fileName;\n-//        this.readOnly = mode.equals(\"r\");\n-//    }\n-//\n-//    @Override\n-//    public void force(boolean metaData) throws IOException {\n-//        String m = SysProperties.SYNC_METHOD;\n-//        if (\"\".equals(m)) {\n-//            // do nothing\n-//        } else if (\"sync\".equals(m)) {\n-//            file.getFD().sync();\n-//        } else if (\"force\".equals(m)) {\n-//            file.getChannel().force(true);\n-//        } else if (\"forceFalse\".equals(m)) {\n-//            file.getChannel().force(false);\n-//        } else {\n-//            file.getFD().sync();\n-//        }\n-//    }\n-//\n-//    @Override\n-//    public FileChannel truncate(long newLength) throws IOException {\n-//        // compatibility with JDK FileChannel#truncate\n-//        if (readOnly) {\n-//            throw new NonWritableChannelException();\n-//        }\n-//        /*\n-//         * RandomAccessFile.setLength() does not always work here since Java 9 for\n-//         * unknown reason so use FileChannel.truncate().\n-//         */\n-//        file.getChannel().truncate(newLength);\n-//        return this;\n-//    }\n-//\n-//    @Override\n-//    public synchronized FileLock tryLock(long position, long size,\n-//            boolean shared) throws IOException {\n-//        return file.getChannel().tryLock(position, size, shared);\n-//    }\n-//\n-//    @Override\n-//    public void implCloseChannel() throws IOException {\n-//        file.close();\n-//    }\n-//\n-//    @Override\n-//    public long position() throws IOException {\n-//        return file.getFilePointer();\n-//    }\n-//\n-//    @Override\n-//    public long size() throws IOException {\n-//        return file.length();\n-//    }\n-//\n-//    @Override\n-//    public int read(ByteBuffer dst) throws IOException {\n-//        int len = file.read(dst.array(), dst.arrayOffset() + dst.position(),\n-//                dst.remaining());\n-//        if (len > 0) {\n-//            dst.position(dst.position() + len);\n-//        }\n-//        return len;\n-//    }\n-//\n-//    @Override\n-//    public FileChannel position(long pos) throws IOException {\n-//        file.seek(pos);\n-//        return this;\n-//    }\n-//\n-//    @Override\n-//    public int write(ByteBuffer src) throws IOException {\n-//        int len = src.remaining();\n-//        file.write(src.array(), src.arrayOffset() + src.position(), len);\n-//        src.position(src.position() + len);\n-//        return len;\n-//    }\n-//\n-//    @Override\n-//    public String toString() {\n-//        return name;\n-//    }\n-//\n-//}\n+//public class \n\\ No newline at end of file\n",
            "diff_size": 479
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/334/FilePathDisk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/334/FilePathDisk.java\nindex ed5dfa15c78..7123eec9d7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/334/FilePathDisk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/334/FilePathDisk.java\n@@ -90,10 +90,10 @@\n //     * @return the native file name\n //     */\n //    //\u4f8b\u5982System.setProperty(\"user.home\", \"E:/H2/tmp\");\n-//\t//fileName = \"file:~/FileStoreTest/my.txt\";\n+//  //fileName = \"file:~/FileStoreTest/my.txt\";\n //    //\u5219\u8fd4\u56de\u7684\u662fE:/H2/tmp/FileStoreTest/my.txt\n //    public static String expandUserHomeDirectory(String fileName) {\n-//    \t//\u8981\u4e48\u662f\u5355\u4e2a~\uff0c\u8981\u4e48\u662f\u4ee5~/\u5f00\u5934\n+//      //\u8981\u4e48\u662f\u5355\u4e2a~\uff0c\u8981\u4e48\u662f\u4ee5~/\u5f00\u5934\n //        if (fileName.startsWith(\"~\") && (fileName.length() == 1 || fileName.startsWith(\"~/\"))) {\n //            String userDir = SysProperties.USER_HOME; //\u9ed8\u8ba4\u662fC:\\Users\\Administrator\n //            fileName = userDir + fileName.substring(1);\n@@ -318,7 +318,7 @@\n ////<<<<<<< HEAD\n ////        int index = name.indexOf(':');\n ////        if (index > 1 && index < 20) {\n-////        \t//\u5982\"classpath:my/test/store/fs/FileUtilsTest.class\"\n+////            //\u5982\"classpath:my/test/store/fs/FileUtilsTest.class\"\n ////=======\n //        if (name.matches(\"[a-zA-Z]{2,19}:.*\")) {\n //            // if the ':' is in position 1, a windows file access is assumed:\n",
            "diff_size": 3
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "93",
                    "column": "3",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "96",
                    "column": "7",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/334/FilePathDisk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/334/FilePathDisk.java\nindex ed5dfa15c78..a23548e40a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/334/FilePathDisk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/334/FilePathDisk.java\n@@ -90,7 +90,7 @@\n //     * @return the native file name\n //     */\n //    //\u4f8b\u5982System.setProperty(\"user.home\", \"E:/H2/tmp\");\n-//\t//fileName = \"file:~/FileStoreTest/my.txt\";\n+//    //\u5219\u8fd4\u56de\u7684\u662fE:/H2/tmp/FileStoreTest/my.txt\n //    //\u5219\u8fd4\u56de\u7684\u662fE:/H2/tmp/FileStoreTest/my.txt\n //    public static String expandUserHomeDirectory(String fileName) {\n //    \t//\u8981\u4e48\u662f\u5355\u4e2a~\uff0c\u8981\u4e48\u662f\u4ee5~/\u5f00\u5934\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ]
}