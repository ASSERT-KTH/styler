{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "20",
    "information": {
        "errors": [
            {
                "line": "188",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  /**\n   *\n   * @param responseBuf response body buffer, when download, responseBuf is null, because download data by ReadStreamPart\n   */\n  protected void processResponseBody(Buffer responseBuf) {\n    invocation.getInvocationStageTrace().finishReceiveResponse();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/20/RestClientInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/20/RestClientInvocation.java\nindex 7ebc7053815..f02a08ab894 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/20/RestClientInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/20/RestClientInvocation.java\n@@ -184,7 +184,6 @@ public class RestClientInvocation {\n   }\n \n   /**\n-   *\n    * @param responseBuf response body buffer, when download, responseBuf is null, because download data by ReadStreamPart\n    */\n   protected void processResponseBody(Buffer responseBuf) {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/20/RestClientInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/20/RestClientInvocation.java\nindex 7ebc7053815..30f2ab0363e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/20/RestClientInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/20/RestClientInvocation.java\n@@ -261,4 +261,4 @@ public class RestClientInvocation {\n \n     return urlPrefix + path;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/20/RestClientInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/20/RestClientInvocation.java\nindex 7ebc7053815..c3000c64132 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/20/RestClientInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/20/RestClientInvocation.java\n@@ -18,9 +18,7 @@\n package org.apache.servicecomb.transport.rest.client.http;\n \n import java.util.List;\n-\n import javax.servlet.http.Part;\n-\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.codec.param.RestClientRequestImpl;\n import org.apache.servicecomb.common.rest.definition.RestOperationMeta;\n@@ -46,7 +44,6 @@ import org.apache.servicecomb.swagger.invocation.Response;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.HttpClientRequest;\n import io.vertx.core.http.HttpClientResponse;\n@@ -80,14 +77,13 @@ public class RestClientInvocation {\n \n     OperationMeta operationMeta = invocation.getOperationMeta();\n     RestOperationMeta swaggerRestOperation = operationMeta.getExtData(RestConst.SWAGGER_REST_OPERATION);\n-\n     String path = this.createRequestPath(swaggerRestOperation);\n     IpPort ipPort = (IpPort) invocation.getEndpoint().getAddress();\n-\n     createRequest(ipPort, path);\n-    clientRequest.putHeader(org.apache.servicecomb.core.Const.TARGET_MICROSERVICE, invocation.getMicroserviceName());\n-    RestClientRequestImpl restClientRequest =\n-        new RestClientRequestImpl(clientRequest, httpClientWithContext.context(), asyncResp);\n+    clientRequest.putHeader(org.apache.servicecomb.core.Const.TARGET_MICROSERVICE,\n+invocation.getMicroserviceName());\n+\n+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(clientRequest, httpClientWithContext.context(), asyncResp);\n     invocation.getHandlerContext().put(RestConst.INVOCATION_HANDLER_REQUESTCLIENT, restClientRequest);\n \n     Buffer requestBodyBuffer = restClientRequest.getBodyBuffer();\n@@ -105,18 +101,18 @@ public class RestClientInvocation {\n     });\n     clientRequest.connectionHandler(connection -> {\n       LOGGER.debug(\"http connection connected, local:{}, remote:{}.\",\n-          connection.localAddress(),\n-          connection.remoteAddress());\n+connection.localAddress(),\n+connection.remoteAddress());\n       connection.closeHandler(v -> {\n         LOGGER.debug(\"http connection closed, local:{}, remote:{}.\",\n-            connection.localAddress(),\n-            connection.remoteAddress());\n+connection.localAddress(),\n+connection.remoteAddress());\n       });\n       connection.exceptionHandler(e -> {\n         LOGGER.info(\"http connection exception, local:{}, remote:{}.\",\n-            connection.localAddress(),\n-            connection.remoteAddress(),\n-            e);\n+connection.localAddress(),\n+connection.remoteAddress(),\n+e);\n       });\n     });\n \n@@ -127,8 +123,8 @@ public class RestClientInvocation {\n       //set the timeout based on priority. the priority is follows.\n       //high priotiry: 1) operational level 2)schema level 3) service level 4) global level : low priotiry.\n       clientRequest.setTimeout(AbstractTransport.getReqTimeout(invocation.getOperationName(),\n-          invocation.getSchemaId(),\n-          invocation.getMicroserviceName()));\n+invocation.getSchemaId(),\n+invocation.getMicroserviceName()));\n       try {\n         restClientRequest.end();\n       } catch (Throwable e) {\n@@ -148,25 +144,18 @@ public class RestClientInvocation {\n   void createRequest(IpPort ipPort, String path) {\n     URIEndpointObject endpoint = (URIEndpointObject) invocation.getEndpoint().getAddress();\n     RequestOptions requestOptions = new RequestOptions();\n-    requestOptions.setHost(ipPort.getHostOrIp())\n-        .setPort(ipPort.getPort())\n-        .setSsl(endpoint.isSslEnabled())\n-        .setURI(path);\n+    requestOptions.setHost(ipPort.getHostOrIp()).setPort(ipPort.getPort())\n+                                                .setSsl(endpoint.isSslEnabled()).setURI(path);\n \n     HttpMethod method = getMethod();\n-    LOGGER.debug(\"Sending request by rest, method={}, qualifiedName={}, path={}, endpoint={}.\",\n-        method,\n-        invocation.getMicroserviceQualifiedName(),\n-        path,\n-        invocation.getEndpoint().getEndpoint());\n+    LOGGER.debug(\"Sending request by rest, method={}, qualifiedName={}, path={}, endpoint={}.\", method, invocation.getMicroserviceQualifiedName(), path, invocation.getEndpoint().getEndpoint());\n     clientRequest = httpClientWithContext.getHttpClient().request(method, requestOptions, this::handleResponse);\n   }\n \n   protected void handleResponse(HttpClientResponse httpClientResponse) {\n     this.clientResponse = httpClientResponse;\n-\n-    if (HttpStatus.isSuccess(clientResponse.statusCode())\n-        && Part.class.equals(invocation.getOperationMeta().getMethod().getReturnType())) {\n+    if (HttpStatus.isSuccess(clientResponse.statusCode()) && Part.class.equals(invocation.getOperationMeta().getMethod()\n+                                                                                                            .getReturnType())) {\n       ReadStreamPart part = new ReadStreamPart(httpClientWithContext.context(), httpClientResponse);\n       invocation.getHandlerContext().put(RestConst.READ_STREAM_PART, part);\n       processResponseBody(null);\n@@ -174,10 +163,11 @@ public class RestClientInvocation {\n     }\n \n     httpClientResponse.exceptionHandler(e -> {\n-      LOGGER.error(\"Failed to receive response from {}.\", httpClientResponse.netSocket().remoteAddress(), e);\n+      LOGGER.error(\"Failed to receive response from {}.\",\n+httpClientResponse.netSocket().remoteAddress(),\n+e);\n       fail(e);\n     });\n-\n     clientResponse.bodyHandler(responseBuf -> {\n       processResponseBody(responseBuf);\n     });\n@@ -187,13 +177,14 @@ public class RestClientInvocation {\n    *\n    * @param responseBuf response body buffer, when download, responseBuf is null, because download data by ReadStreamPart\n    */\n+\n   protected void processResponseBody(Buffer responseBuf) {\n     invocation.getInvocationStageTrace().finishReceiveResponse();\n     invocation.getResponseExecutor().execute(() -> {\n       try {\n         invocation.getInvocationStageTrace().startClientFiltersResponse();\n-        HttpServletResponseEx responseEx =\n-            new VertxClientResponseToHttpServletResponse(clientResponse, responseBuf);\n+\n+        HttpServletResponseEx responseEx = new VertxClientResponseToHttpServletResponse(clientResponse, responseBuf);\n         for (HttpClientFilter filter : httpClientFilters) {\n           if (filter.enabled()) {\n             Response response = filter.afterReceiveResponse(invocation, responseEx);\n@@ -210,11 +201,9 @@ public class RestClientInvocation {\n   }\n \n   protected void complete(Response response) {\n-    DefaultHttpSocketMetric httpSocketMetric = (DefaultHttpSocketMetric) ((ConnectionBase) clientRequest.connection())\n-        .metric();\n+    DefaultHttpSocketMetric httpSocketMetric = (DefaultHttpSocketMetric) ((ConnectionBase) clientRequest.connection()).metric();\n     invocation.getInvocationStageTrace().finishGetConnection(httpSocketMetric.getRequestBeginTime());\n     invocation.getInvocationStageTrace().finishWriteToBuffer(httpSocketMetric.getRequestEndTime());\n-\n     invocation.getInvocationStageTrace().finishClientFiltersResponse();\n     asyncResp.complete(response);\n   }\n@@ -249,7 +238,6 @@ public class RestClientInvocation {\n   protected String createRequestPath(RestOperationMeta swaggerRestOperation) throws Exception {\n     URIEndpointObject address = (URIEndpointObject) invocation.getEndpoint().getAddress();\n     String urlPrefix = address.getFirst(Const.URL_PREFIX);\n-\n     String path = (String) invocation.getHandlerContext().get(RestConst.REST_CLIENT_REQUEST_PATH);\n     if (path == null) {\n       path = swaggerRestOperation.getPathBuilder().createRequestPath(invocation.getArgs());\n@@ -258,7 +246,6 @@ public class RestClientInvocation {\n     if (StringUtils.isEmpty(urlPrefix) || path.startsWith(urlPrefix)) {\n       return path;\n     }\n-\n     return urlPrefix + path;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}