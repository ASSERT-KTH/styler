{
    "project_name": "wso2-attic-commons",
    "error_id": "341",
    "information": {
        "errors": [
            {
                "line": "51",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n                   SiddhiException, InvalidAttributeCastException {\n        ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n        havingExecutor = havingConditionParser.getExecutor();\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/341/HavingHandler.java\nindex 813496a5b88..ea8fb9454d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/341/HavingHandler.java\n@@ -48,7 +48,7 @@ public class HavingHandler {\n     private HavingHandler(Query query)\n             throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n                    SiddhiException, InvalidAttributeCastException {\n-        ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n+ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n         havingExecutor = havingConditionParser.getExecutor();\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/341/HavingHandler.java\nindex 813496a5b88..3782541cd5c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/341/HavingHandler.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.node.processor.utils;\n \n import org.wso2.siddhi.api.eventstream.EventStream;\n@@ -33,26 +34,26 @@ import org.wso2.siddhi.core.parser.ConditionParser;\n  */\n public class HavingHandler {\n \n-    public static HavingHandler assignHandler(Query query)\n-            throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n-                   InvalidAttributeCastException, SiddhiException {\n-        if (query.hasHaving()) {\n-            return new HavingHandler(query);\n-        } else {\n-            return null;\n-        }\n+  public static HavingHandler assignHandler(Query query)\n+    throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n+    InvalidAttributeCastException, SiddhiException {\n+    if (query.hasHaving()) {\n+      return new HavingHandler(query);\n+    } else {\n+      return null;\n     }\n+  }\n \n-    private Executor havingExecutor = null;\n+  private Executor havingExecutor = null;\n \n-    private HavingHandler(Query query)\n-            throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n-                   SiddhiException, InvalidAttributeCastException {\n-        ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n-        havingExecutor = havingConditionParser.getExecutor();\n-    }\n+  private HavingHandler(Query query)\n+    throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n+    SiddhiException, InvalidAttributeCastException {\n+    ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[] {query});\n+    havingExecutor = havingConditionParser.getExecutor();\n+  }\n \n-    public boolean successHavingCondition(Event generatedEvent) {\n-        return havingExecutor == null || havingExecutor.execute(generatedEvent);\n-    }\n+  public boolean successHavingCondition(Event generatedEvent) {\n+    return havingExecutor == null || havingExecutor.execute(generatedEvent);\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/341/HavingHandler.java\nindex 813496a5b88..c62d1db1715 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/341/HavingHandler.java\n@@ -34,9 +34,8 @@ import org.wso2.siddhi.core.parser.ConditionParser;\n public class HavingHandler {\n \n     public static HavingHandler assignHandler(Query query)\n-            throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n-                   InvalidAttributeCastException, SiddhiException {\n-        if (query.hasHaving()) {\n+            throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException, InvalidAttributeCastException, SiddhiException {\n+if (query.hasHaving()) {\n             return new HavingHandler(query);\n         } else {\n             return null;\n@@ -46,13 +45,12 @@ public class HavingHandler {\n     private Executor havingExecutor = null;\n \n     private HavingHandler(Query query)\n-            throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n-                   SiddhiException, InvalidAttributeCastException {\n-        ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n+            throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException, SiddhiException, InvalidAttributeCastException {\n+ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n         havingExecutor = havingConditionParser.getExecutor();\n     }\n \n     public boolean successHavingCondition(Event generatedEvent) {\n         return havingExecutor == null || havingExecutor.execute(generatedEvent);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/341/HavingHandler.java\nindex 813496a5b88..ea8fb9454d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/341/HavingHandler.java\n@@ -48,7 +48,7 @@ public class HavingHandler {\n     private HavingHandler(Query query)\n             throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n                    SiddhiException, InvalidAttributeCastException {\n-        ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n+ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n         havingExecutor = havingConditionParser.getExecutor();\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/341/HavingHandler.java\nindex 813496a5b88..ea8fb9454d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/341/HavingHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/341/HavingHandler.java\n@@ -48,7 +48,7 @@ public class HavingHandler {\n     private HavingHandler(Query query)\n             throws InvalidQueryException, PropertyFormatException, UndefinedPropertyException,\n                    SiddhiException, InvalidAttributeCastException {\n-        ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n+ConditionParser havingConditionParser = new ConditionParser(query.getHavingCondition(), new EventStream[]{query});\n         havingExecutor = havingConditionParser.getExecutor();\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}