{
    "project_name": "neo4j-neo4j",
    "error_id": "2916",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2916/BaseOneByteHeaderRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2916/BaseOneByteHeaderRecordFormat.java\nindex 5abc4ad4f46..1f96b265660 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2916/BaseOneByteHeaderRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2916/BaseOneByteHeaderRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import java.util.function.Function;\n@@ -37,24 +38,24 @@ public abstract class BaseOneByteHeaderRecordFormat<RECORD extends AbstractBaseR\n     protected static final int HEADER_SIZE = 1;\n     private final int inUseBitMaskForFirstByte;\n \n-    protected BaseOneByteHeaderRecordFormat( Function<StoreHeader,Integer> recordSize, int recordHeaderSize,\n-            int inUseBitMaskForFirstByte, int idBits, boolean pageAligned )\n+    protected BaseOneByteHeaderRecordFormat(Function<StoreHeader, Integer> recordSize, int recordHeaderSize,\n+                                            int inUseBitMaskForFirstByte, int idBits, boolean pageAligned)\n     {\n-        super( recordSize, recordHeaderSize, idBits, pageAligned );\n+        super(recordSize, recordHeaderSize, idBits, pageAligned);\n         this.inUseBitMaskForFirstByte = inUseBitMaskForFirstByte;\n     }\n \n-    protected void markAsUnused( PageCursor cursor )\n+    protected void markAsUnused(PageCursor cursor)\n     {\n-        byte inUseByte = cursor.getByte( cursor.getOffset() );\n+        byte inUseByte = cursor.getByte(cursor.getOffset());\n         inUseByte &= ~inUseBitMaskForFirstByte;\n-        cursor.putByte( inUseByte );\n+        cursor.putByte(inUseByte);\n     }\n \n     @Override\n-    public boolean isInUse( PageCursor cursor )\n+    public boolean isInUse(PageCursor cursor)\n     {\n-        return isInUse( cursor.getByte( cursor.getOffset() ) );\n+        return isInUse(cursor.getByte(cursor.getOffset()));\n     }\n \n     /**\n@@ -64,21 +65,21 @@ public abstract class BaseOneByteHeaderRecordFormat<RECORD extends AbstractBaseR\n      * @param headerByte header byte of a record (the first byte) which contains the inUse bit we're interested in.\n      * @return whether or not this header byte has the specific bit saying that it's in use.\n      */\n-    protected boolean isInUse( byte headerByte )\n+    protected boolean isInUse(byte headerByte)\n     {\n-        return has( headerByte, inUseBitMaskForFirstByte );\n+        return has(headerByte, inUseBitMaskForFirstByte);\n     }\n \n     /**\n      * Checks whether or not a specific bit in a byte is set.\n      *\n      * @param headerByte the header byte to check, here represented as a {@code long} for convenience\n-     * due to many callers keeping this header as long as to remove common problems of forgetting to\n-     * cast to long before shifting.\n-     * @param bitMask mask for the bit to check, such as 0x1, 0x2 and 0x4.\n+     *                   due to many callers keeping this header as long as to remove common problems of forgetting to\n+     *                   cast to long before shifting.\n+     * @param bitMask    mask for the bit to check, such as 0x1, 0x2 and 0x4.\n      * @return whether or not that bit is set.\n      */\n-    protected static boolean has( long headerByte, int bitMask )\n+    protected static boolean has(long headerByte, int bitMask)\n     {\n         return (headerByte & bitMask) != 0;\n     }\n@@ -87,11 +88,11 @@ public abstract class BaseOneByteHeaderRecordFormat<RECORD extends AbstractBaseR\n      * Sets or clears bits specified by the {@code bitMask} in the header byte.\n      *\n      * @param headerByte byte to set bits in.\n-     * @param bitMask mask specifying which bits to change.\n-     * @param value {@code true} means setting the bits specified by the bit mask, {@code false} means clearing.\n+     * @param bitMask    mask specifying which bits to change.\n+     * @param value      {@code true} means setting the bits specified by the bit mask, {@code false} means clearing.\n      * @return the {@code headerByte} with the changes incorporated.\n      */\n-    protected static byte set( byte headerByte, int bitMask, boolean value )\n+    protected static byte set(byte headerByte, int bitMask, boolean value)\n     {\n         return (byte) (value ? headerByte | bitMask : headerByte);\n     }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2916/BaseOneByteHeaderRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2916/BaseOneByteHeaderRecordFormat.java\nindex 5abc4ad4f46..d6e9befdcea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2916/BaseOneByteHeaderRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2916/BaseOneByteHeaderRecordFormat.java\n@@ -95,4 +95,4 @@ public abstract class BaseOneByteHeaderRecordFormat<RECORD extends AbstractBaseR\n     {\n         return (byte) (value ? headerByte | bitMask : headerByte);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}