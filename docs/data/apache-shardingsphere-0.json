{
    "project_name": "apache-shardingsphere",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "159",
                "column": "5",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    \n    \n    /**\n     * Get primary nodes governance schema.\n     *\n     * @param dataSourceNodeFullPath data source node full path",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/0/RegistryCenterNode.java\nindex b43e70818da..ae9b7a7c535 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/0/RegistryCenterNode.java\n@@ -154,8 +154,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "159",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/0/RegistryCenterNode.java\nindex b43e70818da..645960d275e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/0/RegistryCenterNode.java\n@@ -36,33 +36,33 @@ import java.util.stream.Collectors;\n  */\n @RequiredArgsConstructor\n public final class RegistryCenterNode {\n-    \n+\n     private static final String ROOT = \"states\";\n-    \n+\n     private static final String PROXY_NODES_NAME = \"proxynodes\";\n-    \n+\n     private static final String DATA_NODES_NAME = \"datanodes\";\n-    \n+\n     private static final String PRIMARY_NODES_NAME = \"primarynodes\";\n-    \n+\n     private static final String METADATA_NODE = \"metadata\";\n-    \n+\n     private static final String DATA_SOURCE_NODE = \"datasource\";\n-    \n+\n     private static final String RULE_NODE = \"rule\";\n-    \n+\n     private static final String SCHEMA_NODE = \"schema\";\n-    \n+\n     private static final String AUTHENTICATION_NODE = \"authentication\";\n-    \n+\n     private static final String PROPS_NODE = \"props\";\n-    \n+\n     private static final String COMMA_SEPARATOR = \",\";\n-    \n+\n     private static final String PATH_SEPARATOR = \"/\";\n-    \n+\n     private static final String CACHE_NODE = \"cache\";\n-    \n+\n     /**\n      * Get proxy node path.\n      *\n@@ -72,7 +72,7 @@ public final class RegistryCenterNode {\n     public String getProxyNodePath(final String instanceId) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME, instanceId);\n     }\n-    \n+\n     /**\n      * Get data nodes path.\n      *\n@@ -81,7 +81,7 @@ public final class RegistryCenterNode {\n     public String getDataNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME);\n     }\n-    \n+\n     /**\n      * Get primary nodes path.\n      *\n@@ -90,17 +90,17 @@ public final class RegistryCenterNode {\n     public String getPrimaryNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME);\n     }\n-    \n+\n     /**\n      * Get schema path.\n-     * \n+     *\n      * @param schemaName schema name\n      * @return schema path\n      */\n     public String getSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName);\n     }\n-    \n+\n     /**\n      * Get primary nodes schema path.\n      *\n@@ -110,18 +110,18 @@ public final class RegistryCenterNode {\n     public String getPrimaryNodesSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName);\n     }\n-    \n+\n     /**\n      * Get data source path.\n-     * \n-     * @param schemaName schema name\n+     *\n+     * @param schemaName     schema name\n      * @param dataSourceName data source name\n      * @return data source path\n      */\n     public String getDataSourcePath(final String schemaName, final String dataSourceName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName, dataSourceName);\n     }\n-    \n+\n     /**\n      * Get metadata data source path.\n      *\n@@ -131,18 +131,18 @@ public final class RegistryCenterNode {\n     public String getMetadataDataSourcePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, DATA_SOURCE_NODE);\n     }\n-    \n+\n     /**\n      * Get primary data source path.\n      *\n      * @param schemaName schema name\n-     * @param groupName group name\n+     * @param groupName  group name\n      * @return data source path\n      */\n     public String getPrimaryDataSourcePath(final String schemaName, final String groupName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName, groupName);\n     }\n-    \n+\n     /**\n      * Get governance schema.\n      *\n@@ -154,8 +154,8 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n+\n     /**\n      * Get primary nodes governance schema.\n      *\n@@ -167,7 +167,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n+\n     /**\n      * Is primary data source path.\n      *\n@@ -179,10 +179,10 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find();\n     }\n-    \n+\n     /**\n      * Get all schema path.\n-     * \n+     *\n      * @param schemaNames collection of schema name\n      * @return collection of schema path\n      */\n@@ -194,7 +194,7 @@ public final class RegistryCenterNode {\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * Get proxy nodes path.\n      *\n@@ -203,7 +203,7 @@ public final class RegistryCenterNode {\n     public String getProxyNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME);\n     }\n-    \n+\n     /**\n      * Get metadata node path.\n      *\n@@ -212,7 +212,7 @@ public final class RegistryCenterNode {\n     public String getMetadataNodePath() {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE);\n     }\n-    \n+\n     /**\n      * Get schema name path.\n      *\n@@ -222,7 +222,7 @@ public final class RegistryCenterNode {\n     public String getSchemaNamePath(final String schemaName) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName);\n     }\n-    \n+\n     /**\n      * Get rule path.\n      *\n@@ -232,7 +232,7 @@ public final class RegistryCenterNode {\n     public String getRulePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, RULE_NODE);\n     }\n-    \n+\n     /**\n      * Get metadata schema path.\n      *\n@@ -242,7 +242,7 @@ public final class RegistryCenterNode {\n     public String getMetadataSchemaPath(final String schemaName) {\n         return getFullMetadataPath(schemaName, SCHEMA_NODE);\n     }\n-    \n+\n     /**\n      * Get authentication path.\n      *\n@@ -251,7 +251,7 @@ public final class RegistryCenterNode {\n     public String getAuthenticationPath() {\n         return getFullPath(AUTHENTICATION_NODE);\n     }\n-    \n+\n     /**\n      * Get properties path.\n      *\n@@ -260,15 +260,15 @@ public final class RegistryCenterNode {\n     public String getPropsPath() {\n         return getFullPath(PROPS_NODE);\n     }\n-    \n+\n     private String getFullMetadataPath(final String schemaName, final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName, node);\n     }\n-    \n+\n     private String getFullPath(final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", node);\n     }\n-    \n+\n     /**\n      * Get schema name.\n      *\n@@ -280,7 +280,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(configurationNodeFullPath);\n         return matcher.find() ? matcher.group(1) : \"\";\n     }\n-    \n+\n     /**\n      * Split schema name.\n      *\n@@ -290,7 +290,7 @@ public final class RegistryCenterNode {\n     public Collection<String> splitSchemaName(final String schemaNames) {\n         return Strings.isNullOrEmpty(schemaNames) ? Collections.emptyList() : Splitter.on(COMMA_SEPARATOR).splitToList(schemaNames);\n     }\n-    \n+\n     /**\n      * Get all schema config paths.\n      *\n@@ -306,7 +306,7 @@ public final class RegistryCenterNode {\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * Get cache path.\n      *\n@@ -316,7 +316,7 @@ public final class RegistryCenterNode {\n     public String getCachePath(final String path) {\n         return Joiner.on(PATH_SEPARATOR).join(path, CACHE_NODE);\n     }\n-    \n+\n     /**\n      * Get all metadata schema paths.\n      *\n@@ -326,7 +326,7 @@ public final class RegistryCenterNode {\n     public Collection<String> getAllMetadataSchemaPaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataSchemaPath).collect(Collectors.toList());\n     }\n-    \n+\n     /**\n      * Get all rule paths.\n      *\n@@ -336,7 +336,7 @@ public final class RegistryCenterNode {\n     public Collection<String> getAllRulePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getRulePath).collect(Collectors.toList());\n     }\n-    \n+\n     /**\n      * Get all data source paths.\n      *\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/0/RegistryCenterNode.java\nindex b43e70818da..9aa26e2f364 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/0/RegistryCenterNode.java\n@@ -154,8 +154,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n@@ -346,4 +345,4 @@ public final class RegistryCenterNode {\n     public Collection<String> getAllDataSourcePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataDataSourcePath).collect(Collectors.toList());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "177",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "199",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "213",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "229",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "240",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "252",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "264",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "276",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "287",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "318",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "332",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "344",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "362",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "374",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "386",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "398",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/0/RegistryCenterNode.java\nindex b43e70818da..f1f136fe351 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/0/RegistryCenterNode.java\n@@ -22,7 +22,6 @@ import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n import lombok.RequiredArgsConstructor;\n import org.apache.shardingsphere.governance.core.registry.schema.GovernanceSchema;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -34,33 +33,35 @@ import java.util.stream.Collectors;\n /**\n  * Registry center node.\n  */\n+\n+\n @RequiredArgsConstructor\n public final class RegistryCenterNode {\n-    \n+\n     private static final String ROOT = \"states\";\n-    \n+\n     private static final String PROXY_NODES_NAME = \"proxynodes\";\n-    \n+\n     private static final String DATA_NODES_NAME = \"datanodes\";\n-    \n+\n     private static final String PRIMARY_NODES_NAME = \"primarynodes\";\n-    \n+\n     private static final String METADATA_NODE = \"metadata\";\n-    \n+\n     private static final String DATA_SOURCE_NODE = \"datasource\";\n-    \n+\n     private static final String RULE_NODE = \"rule\";\n-    \n+\n     private static final String SCHEMA_NODE = \"schema\";\n-    \n+\n     private static final String AUTHENTICATION_NODE = \"authentication\";\n-    \n+\n     private static final String PROPS_NODE = \"props\";\n-    \n+\n     private static final String COMMA_SEPARATOR = \",\";\n-    \n+\n     private static final String PATH_SEPARATOR = \"/\";\n-    \n+\n     private static final String CACHE_NODE = \"cache\";\n     \n     /**\n@@ -69,6 +70,7 @@ public final class RegistryCenterNode {\n      * @param instanceId instance id\n      * @return proxy node path\n      */\n+\n     public String getProxyNodePath(final String instanceId) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME, instanceId);\n     }\n@@ -78,6 +80,8 @@ public final class RegistryCenterNode {\n      *\n      * @return data nodes path\n      */\n+\n+\n     public String getDataNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME);\n     }\n@@ -87,6 +91,8 @@ public final class RegistryCenterNode {\n      *\n      * @return primary nodes path\n      */\n+\n+\n     public String getPrimaryNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME);\n     }\n@@ -97,6 +103,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema path\n      */\n+\n+\n     public String getSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName);\n     }\n@@ -107,6 +115,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema path\n      */\n+\n+\n     public String getPrimaryNodesSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName);\n     }\n@@ -118,6 +128,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceName data source name\n      * @return data source path\n      */\n+\n+\n     public String getDataSourcePath(final String schemaName, final String dataSourceName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName, dataSourceName);\n     }\n@@ -128,6 +140,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return data source path\n      */\n+\n+\n     public String getMetadataDataSourcePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, DATA_SOURCE_NODE);\n     }\n@@ -139,6 +153,8 @@ public final class RegistryCenterNode {\n      * @param groupName group name\n      * @return data source path\n      */\n+\n+\n     public String getPrimaryDataSourcePath(final String schemaName, final String groupName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName, groupName);\n     }\n@@ -149,6 +165,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceNodeFullPath data source node full path\n      * @return governance schema\n      */\n+\n+\n     public Optional<GovernanceSchema> getGovernanceSchema(final String dataSourceNodeFullPath) {\n         Pattern pattern = Pattern.compile(getDataNodesPath() + \"/\" + \"(\\\\w+)/(\\\\w+)$\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n@@ -162,6 +180,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceNodeFullPath data source node full path\n      * @return primary nodes governance schema\n      */\n+\n+\n     public Optional<GovernanceSchema> getPrimaryNodesGovernanceSchema(final String dataSourceNodeFullPath) {\n         Pattern pattern = Pattern.compile(getPrimaryNodesPath() + \"/\" + \"(\\\\w+)/(\\\\w+)$\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n@@ -174,6 +194,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceNodeFullPath data source node full path\n      * @return is primary data source path\n      */\n+\n+\n     public boolean isPrimaryDataSourcePath(final String dataSourceNodeFullPath) {\n         Pattern pattern = Pattern.compile(getPrimaryNodesPath() + \"/\" + \"(\\\\w+)/(\\\\w+)$\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n@@ -186,6 +208,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames collection of schema name\n      * @return collection of schema path\n      */\n+\n+\n     public Collection<String> getAllSchemaPaths(final Collection<String> schemaNames) {\n         Collection<String> result = new ArrayList<>(schemaNames.size());\n         for (String schemaName : schemaNames) {\n@@ -200,6 +224,8 @@ public final class RegistryCenterNode {\n      *\n      * @return proxy nodes path\n      */\n+\n+\n     public String getProxyNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME);\n     }\n@@ -209,6 +235,8 @@ public final class RegistryCenterNode {\n      *\n      * @return metadata node path\n      */\n+\n+\n     public String getMetadataNodePath() {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE);\n     }\n@@ -219,6 +247,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema name path\n      */\n+\n+\n     public String getSchemaNamePath(final String schemaName) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName);\n     }\n@@ -229,6 +259,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return rule path\n      */\n+\n+\n     public String getRulePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, RULE_NODE);\n     }\n@@ -239,6 +271,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema path\n      */\n+\n+\n     public String getMetadataSchemaPath(final String schemaName) {\n         return getFullMetadataPath(schemaName, SCHEMA_NODE);\n     }\n@@ -248,6 +282,8 @@ public final class RegistryCenterNode {\n      *\n      * @return authentication path\n      */\n+\n+\n     public String getAuthenticationPath() {\n         return getFullPath(AUTHENTICATION_NODE);\n     }\n@@ -257,14 +293,16 @@ public final class RegistryCenterNode {\n      *\n      * @return properties path\n      */\n+\n+\n     public String getPropsPath() {\n         return getFullPath(PROPS_NODE);\n     }\n-    \n+\n     private String getFullMetadataPath(final String schemaName, final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName, node);\n     }\n-    \n+\n     private String getFullPath(final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", node);\n     }\n@@ -275,6 +313,8 @@ public final class RegistryCenterNode {\n      * @param configurationNodeFullPath configuration node full path\n      * @return schema name\n      */\n+\n+\n     public String getSchemaName(final String configurationNodeFullPath) {\n         Pattern pattern = Pattern.compile(getMetadataNodePath() + \"/(\\\\w+)\" + \"(/datasource|/rule)?\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(configurationNodeFullPath);\n@@ -287,6 +327,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names\n      * @return schema names\n      */\n+\n+\n     public Collection<String> splitSchemaName(final String schemaNames) {\n         return Strings.isNullOrEmpty(schemaNames) ? Collections.emptyList() : Splitter.on(COMMA_SEPARATOR).splitToList(schemaNames);\n     }\n@@ -297,6 +339,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names.\n      * @return config paths list.\n      */\n+\n+\n     public Collection<String> getAllSchemaConfigPaths(final Collection<String> schemaNames) {\n         Collection<String> result = new ArrayList<>(Collections.singleton(getMetadataNodePath()));\n         for (String schemaName : schemaNames) {\n@@ -313,6 +357,8 @@ public final class RegistryCenterNode {\n      * @param path path\n      * @return cache path\n      */\n+\n+\n     public String getCachePath(final String path) {\n         return Joiner.on(PATH_SEPARATOR).join(path, CACHE_NODE);\n     }\n@@ -323,6 +369,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names.\n      * @return list of schema path.\n      */\n+\n+\n     public Collection<String> getAllMetadataSchemaPaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataSchemaPath).collect(Collectors.toList());\n     }\n@@ -333,6 +381,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names.\n      * @return list of rule path.\n      */\n+\n+\n     public Collection<String> getAllRulePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getRulePath).collect(Collectors.toList());\n     }\n@@ -343,7 +393,9 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names.\n      * @return list of data source path.\n      */\n+\n+\n     public Collection<String> getAllDataSourcePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataDataSourcePath).collect(Collectors.toList());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/0/RegistryCenterNode.java\nindex b43e70818da..ae9b7a7c535 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/0/RegistryCenterNode.java\n@@ -154,8 +154,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/0/RegistryCenterNode.java\nindex b43e70818da..ae9b7a7c535 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/0/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/0/RegistryCenterNode.java\n@@ -154,8 +154,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}