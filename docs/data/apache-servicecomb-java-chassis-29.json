{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "162",
                "column": "32",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n      config.setClassName(\n          \"gen.wrap.protobuf.\" +\n              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n      if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n        config.addField(\"field0\", javaType);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/29/ProtobufSchemaUtils.java\nindex f1c985fed82..0e815bb4a1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/29/ProtobufSchemaUtils.java\n@@ -159,8 +159,7 @@ public final class ProtobufSchemaUtils {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n       if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "162",
                    "column": "32",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/29/ProtobufSchemaUtils.java\nindex f1c985fed82..eb7a553d4d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/29/ProtobufSchemaUtils.java\n@@ -159,9 +159,8 @@ public final class ProtobufSchemaUtils {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n-      if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n \n@@ -191,8 +190,7 @@ public final class ProtobufSchemaUtils {\n       Parameter[] params = method.getParameters();\n       for (int idx = 0; idx < params.length; idx++) {\n         Parameter param = params[idx];\n-        String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils\n-            .correctMethodParameterName(operationMeta.getParamName(idx));\n+        String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctMethodParameterName(operationMeta.getParamName(idx));\n         config.addField(paramName, param.getParameterizedType());\n       }\n \n@@ -201,4 +199,4 @@ public final class ProtobufSchemaUtils {\n       return createWrapSchema(config);\n     });\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/29/ProtobufSchemaUtils.java\nindex f1c985fed82..36c75a9197e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/29/ProtobufSchemaUtils.java\n@@ -25,16 +25,13 @@ import java.util.Collection;\n import java.util.Date;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n-\n import org.apache.servicecomb.codec.protobuf.utils.schema.WrapSchemaFactory;\n import org.apache.servicecomb.common.javassist.JavassistUtils;\n import org.apache.servicecomb.core.definition.OperationMeta;\n import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n import org.springframework.util.ClassUtils;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-\n import io.protostuff.Input;\n import io.protostuff.Output;\n import io.protostuff.Pipe;\n@@ -56,30 +53,30 @@ public final class ProtobufSchemaUtils {\n \n   protected static void initProtobufObjectCodec() {\n     ((DefaultIdStrategy) RuntimeEnv.ID_STRATEGY).registerDelegate(new Delegate<Object>() {\n-      @Override\n-      public FieldType getFieldType() {\n-        return FieldType.BYTES;\n-      }\n+@Override\n+public FieldType getFieldType() {\n+  return FieldType.BYTES;\n+}\n \n-      @Override\n-      public Object readFrom(Input input) throws IOException {\n-        return JsonUtils.readValue(input.readByteArray(), Object.class);\n-      }\n+@Override\n+public Object readFrom(Input input) throws IOException {\n+  return JsonUtils.readValue(input.readByteArray(), Object.class);\n+}\n \n-      @Override\n-      public void writeTo(Output output, int number, Object value, boolean repeated) throws IOException {\n-        output.writeByteArray(number, JsonUtils.writeValueAsBytes(value), false);\n-      }\n+@Override\n+public void writeTo(Output output, int number, Object value, boolean repeated) throws IOException {\n+  output.writeByteArray(number, JsonUtils.writeValueAsBytes(value), false);\n+}\n \n-      @Override\n-      public void transfer(Pipe pipe, Input input, Output output, int number, boolean repeated) throws IOException {\n-        throw new IllegalStateException(\"not support.\");\n-      }\n+@Override\n+public void transfer(Pipe pipe, Input input, Output output, int number, boolean repeated) throws IOException {\n+  throw new IllegalStateException(\"not support.\");\n+}\n \n-      @Override\n-      public Class<?> typeClass() {\n-        return Object.class;\n-      }\n+@Override\n+public Class<?> typeClass() {\n+  return Object.class;\n+}\n     });\n   }\n \n@@ -107,6 +104,7 @@ public final class ProtobufSchemaUtils {\n       } catch (Exception e) {\n         throw new Error(e);\n       }\n+\n       schemaCache.put(className, schema);\n       return schema;\n     }\n@@ -125,15 +123,17 @@ public final class ProtobufSchemaUtils {\n     // protobuf\u4e0d\u652f\u6301\u539f\u5b50\u7c7b\u578b\u3001enum\u3001string\u3001\u6570\u7ec4\u3001collection\u7b49\u7b49\u4f5c\u4e3amsg\n     // \u53ea\u6709pojo\u7c7b\u578b\u624d\u53ef\u4ee5\n     // java.lang.Object\u4e5f\u4e0d\u53ef\u4ee5\uff0c\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\uff0c\u7ed3\u679c\u4e0d\u786e\u5b9a\n-    return ClassUtils.isPrimitiveOrWrapper(cls) || cls.isArray() || cls.isEnum()\n+    return ClassUtils.isPrimitiveOrWrapper(cls) || cls.isArray()\n+      || cls.isEnum()\n         || String.class.isAssignableFrom(cls)\n-        || Collection.class.isAssignableFrom(cls)\n-        || Map.class.isAssignableFrom(cls)\n-        || Date.class.isAssignableFrom(cls)\n-        || Object.class.equals(cls);\n+          || Collection.class.isAssignableFrom(cls)\n+          || Map.class.isAssignableFrom(cls)\n+          || Date.class.isAssignableFrom(cls)\n+          || Object.class.equals(cls);\n   }\n \n   // \u4e3a\u4e86\u652f\u6301method args\u7684\u573a\u666f\uff0c\u5168\u90e8\u5b9e\u73b0ProtobufMessageWrapper\u63a5\u53e3\uff0c\u6709\u7684\u573a\u666f\u6709\u70b9\u6d6a\u8d39\uff0c\u4e0d\u8fc7\u65e0\u5173\u7d27\u8981\n+\n   private static WrapSchema createWrapSchema(WrapClassConfig config) throws Exception {\n     Class<?> cls = JavassistUtils.createClass(config);\n     Schema<?> schema = RuntimeSchema.createFrom(cls);\n@@ -142,63 +142,59 @@ public final class ProtobufSchemaUtils {\n \n   // \u9002\u7528\u4e8e\u5c06\u5355\u4e2a\u7c7b\u578b\u5305\u88c5\u7684\u573a\u666f\n   // \u6bd4\u5982return\n+\n   public static WrapSchema getOrCreateSchema(Type type) {\n     JavaType javaType = TypeFactory.defaultInstance().constructType(type);\n     // List<String> -> java.util.List<java.lang.String>\n     // List<List<String>> -> java.util.List<java.util.List<java.lang.String>>\n     String key = javaType.toCanonical();\n     return getOrCreateSchema(key, () -> {\n-      if (!isNeedWrap(javaType.getRawClass())) {\n+             if (!isNeedWrap(javaType.getRawClass())) {\n         // \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\n-        Schema<?> schema = RuntimeSchema.createFrom(javaType.getRawClass());\n-        return WrapSchemaFactory.createSchema(schema, WrapType.NOT_WRAP);\n-      }\n+               Schema<?> schema = RuntimeSchema.createFrom(javaType.getRawClass());\n+               return WrapSchemaFactory.createSchema(schema, WrapType.NOT_WRAP);\n+             }\n \n       // \u9700\u8981\u5305\u88c5\n-      WrapClassConfig config = new WrapClassConfig();\n-      config.setType(WrapType.NORMAL_WRAP);\n-\n-      config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n-      if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n-        config.addField(\"field0\", javaType);\n-      }\n \n-      JavassistUtils.genSingleWrapperInterface(config);\n+             WrapClassConfig config = new WrapClassConfig();\n+             config.setType(WrapType.NORMAL_WRAP);\n+             config.setClassName(\"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+             if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n+               config.addField(\"field0\", javaType);\n+             }\n \n-      return createWrapSchema(config);\n+             JavassistUtils.genSingleWrapperInterface(config);\n+             return createWrapSchema(config);\n     });\n   }\n \n   public static WrapSchema getOrCreateArgsSchema(OperationMeta operationMeta) {\n     Method method = operationMeta.getMethod();\n     String type = \"gen.\" + method.getDeclaringClass().getName() + \".\" + method.getName() + \".Args\";\n-\n     return getOrCreateSchema(type, () -> {\n-      if (!isArgsNeedWrap(method)) {\n+             if (!isArgsNeedWrap(method)) {\n         // \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\n-        Class<?> cls = (Class<?>) method.getParameterTypes()[0];\n-        Schema<?> schema = RuntimeSchema.createFrom(cls);\n-        return WrapSchemaFactory.createSchema(schema, WrapType.ARGS_NOT_WRAP);\n-      }\n+               Class<?> cls = (Class<?>) method.getParameterTypes()[0];\n+               Schema<?> schema = RuntimeSchema.createFrom(cls);\n+               return WrapSchemaFactory.createSchema(schema, WrapType.ARGS_NOT_WRAP);\n+             }\n \n       // \u9700\u8981\u5305\u88c5\n-      WrapClassConfig config = new WrapClassConfig();\n-      config.setType(WrapType.ARGS_WRAP);\n-      config.setClassName(type);\n-\n-      Parameter[] params = method.getParameters();\n-      for (int idx = 0; idx < params.length; idx++) {\n-        Parameter param = params[idx];\n-        String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils\n-            .correctMethodParameterName(operationMeta.getParamName(idx));\n-        config.addField(paramName, param.getParameterizedType());\n-      }\n \n-      JavassistUtils.genMultiWrapperInterface(config);\n+             WrapClassConfig config = new WrapClassConfig();\n+             config.setType(WrapType.ARGS_WRAP);\n+             config.setClassName(type);\n \n-      return createWrapSchema(config);\n+             Parameter[] params = method.getParameters();\n+             for (int idx = 0; idx < params.length; idx++) {\n+               Parameter param = params[idx];\n+               String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctMethodParameterName(operationMeta.getParamName(idx));\n+               config.addField(paramName, param.getParameterizedType());\n+             }\n+\n+             JavassistUtils.genMultiWrapperInterface(config);\n+             return createWrapSchema(config);\n     });\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 83
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/29/ProtobufSchemaUtils.java\nindex f1c985fed82..0e815bb4a1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/29/ProtobufSchemaUtils.java\n@@ -159,8 +159,7 @@ public final class ProtobufSchemaUtils {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n       if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/29/ProtobufSchemaUtils.java\nindex f1c985fed82..0e815bb4a1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/29/ProtobufSchemaUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/29/ProtobufSchemaUtils.java\n@@ -159,8 +159,7 @@ public final class ProtobufSchemaUtils {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n       if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}