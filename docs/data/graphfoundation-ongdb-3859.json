{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3859",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "69",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "88",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3859/LabelChainWalker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3859/LabelChainWalker.java\nindex d20571cf8a4..de6bf5999b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3859/LabelChainWalker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3859/LabelChainWalker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import java.util.ArrayList;\n@@ -35,69 +36,68 @@ import static org.neo4j.kernel.impl.store.AbstractDynamicStore.readFullByteArray\n import static org.neo4j.kernel.impl.store.DynamicArrayStore.getRightArray;\n \n public class LabelChainWalker<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> implements\n-        ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n+    ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n {\n-    private final Validator<RECORD, REPORT> validator;\n+  private final Validator<RECORD, REPORT> validator;\n+\n+  private final HashMap<Long, DynamicRecord> recordIds = new HashMap<>();\n+  private final List<DynamicRecord> recordList = new ArrayList<>();\n+  private boolean allInUse = true;\n+\n+  public LabelChainWalker(Validator<RECORD, REPORT> validator)\n+  {\n+    this.validator = validator;\n+  }\n \n-    private final HashMap<Long, DynamicRecord> recordIds = new HashMap<>();\n-    private final List<DynamicRecord> recordList = new ArrayList<>();\n-    private boolean allInUse = true;\n+  @Override\n+  public void checkReference(RECORD record, DynamicRecord dynamicRecord,\n+                             CheckerEngine<RECORD, REPORT> engine,\n+                             RecordAccess records)\n+  {\n+    recordIds.put(dynamicRecord.getId(), dynamicRecord);\n \n-    public LabelChainWalker( Validator<RECORD, REPORT> validator )\n+    if (dynamicRecord.inUse())\n     {\n-        this.validator = validator;\n+      recordList.add(dynamicRecord);\n+    } else\n+    {\n+      allInUse = false;\n+      validator.onRecordNotInUse(dynamicRecord, engine);\n     }\n \n-    @Override\n-    public void checkReference( RECORD record, DynamicRecord dynamicRecord,\n-                                CheckerEngine<RECORD, REPORT> engine,\n-                                RecordAccess records )\n+    long nextBlock = dynamicRecord.getNextBlock();\n+    if (Record.NO_NEXT_BLOCK.is(nextBlock))\n+    {\n+      if (allInUse)\n+      {\n+        // only validate label ids if all dynamic records seen were in use\n+        validator.onWellFormedChain(labelIds(recordList), engine, records);\n+      }\n+    } else\n     {\n-        recordIds.put( dynamicRecord.getId(), dynamicRecord );\n+      if (recordIds.containsKey(nextBlock))\n+      {\n+        validator.onRecordChainCycle(recordIds.get(nextBlock), engine);\n+      } else\n+      {\n+        engine.comparativeCheck(records.nodeLabels(nextBlock), this);\n+      }\n+    }\n+  }\n \n-        if ( dynamicRecord.inUse() )\n-        {\n-            recordList.add( dynamicRecord );\n-        }\n-        else\n-        {\n-            allInUse = false;\n-            validator.onRecordNotInUse( dynamicRecord, engine );\n-        }\n+  public static long[] labelIds(List<DynamicRecord> recordList)\n+  {\n+    long[] idArray =\n+        (long[]) getRightArray(readFullByteArrayFromHeavyRecords(recordList, PropertyType.ARRAY)).asObject();\n+    return LabelIdArray.stripNodeId(idArray);\n+  }\n \n-        long nextBlock = dynamicRecord.getNextBlock();\n-        if ( Record.NO_NEXT_BLOCK.is( nextBlock ) )\n-        {\n-            if ( allInUse )\n-            {\n-                // only validate label ids if all dynamic records seen were in use\n-                validator.onWellFormedChain( labelIds( recordList ), engine, records );\n-            }\n-        }\n-        else\n-        {\n-            if ( recordIds.containsKey( nextBlock ) )\n-            {\n-                validator.onRecordChainCycle( recordIds.get( nextBlock ), engine );\n-            }\n-            else\n-            {\n-                engine.comparativeCheck( records.nodeLabels( nextBlock ), this );\n-            }\n-        }\n-    }\n+  public interface Validator<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n+  {\n+    void onRecordNotInUse(DynamicRecord dynamicRecord, CheckerEngine<RECORD, REPORT> engine);\n \n-    public static long[] labelIds( List<DynamicRecord> recordList )\n-    {\n-        long[] idArray =\n-                (long[]) getRightArray( readFullByteArrayFromHeavyRecords( recordList, PropertyType.ARRAY ) ).asObject();\n-        return LabelIdArray.stripNodeId( idArray );\n-    }\n+    void onRecordChainCycle(DynamicRecord record, CheckerEngine<RECORD, REPORT> engine);\n \n-    public interface Validator<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-    {\n-        void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<RECORD, REPORT> engine );\n-        void onRecordChainCycle( DynamicRecord record, CheckerEngine<RECORD, REPORT> engine );\n-        void onWellFormedChain( long[] labelIds, CheckerEngine<RECORD, REPORT> engine, RecordAccess records );\n-    }\n+    void onWellFormedChain(long[] labelIds, CheckerEngine<RECORD, REPORT> engine, RecordAccess records);\n+  }\n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3859/LabelChainWalker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3859/LabelChainWalker.java\nindex d20571cf8a4..66c240aa900 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3859/LabelChainWalker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3859/LabelChainWalker.java\n@@ -34,28 +34,25 @@ import org.neo4j.kernel.impl.store.record.Record;\n import static org.neo4j.kernel.impl.store.AbstractDynamicStore.readFullByteArrayFromHeavyRecords;\n import static org.neo4j.kernel.impl.store.DynamicArrayStore.getRightArray;\n \n-public class LabelChainWalker<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> implements\n-        ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n+public class LabelChainWalker<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> implements ComparativeRecordChecker<RECORD, DynamicRecord, REPORT>\n {\n-    private final Validator<RECORD, REPORT> validator;\n+    private final Validator<RECORD,REPORT> validator;\n \n-    private final HashMap<Long, DynamicRecord> recordIds = new HashMap<>();\n+    private final HashMap<Long,DynamicRecord> recordIds = new HashMap<>();\n     private final List<DynamicRecord> recordList = new ArrayList<>();\n     private boolean allInUse = true;\n \n-    public LabelChainWalker( Validator<RECORD, REPORT> validator )\n+    public LabelChainWalker( Validator<RECORD,REPORT> validator )\n     {\n         this.validator = validator;\n     }\n \n     @Override\n-    public void checkReference( RECORD record, DynamicRecord dynamicRecord,\n-                                CheckerEngine<RECORD, REPORT> engine,\n+    public void checkReference( RECORD record, DynamicRecord dynamicRecord, CheckerEngine<RECORD,REPORT> engine,\n                                 RecordAccess records )\n-    {\n+{\n         recordIds.put( dynamicRecord.getId(), dynamicRecord );\n-\n-        if ( dynamicRecord.inUse() )\n+if ( dynamicRecord.inUse() )\n         {\n             recordList.add( dynamicRecord );\n         }\n@@ -89,15 +86,14 @@ public class LabelChainWalker<RECORD extends AbstractBaseRecord, REPORT extends\n \n     public static long[] labelIds( List<DynamicRecord> recordList )\n     {\n-        long[] idArray =\n-                (long[]) getRightArray( readFullByteArrayFromHeavyRecords( recordList, PropertyType.ARRAY ) ).asObject();\n-        return LabelIdArray.stripNodeId( idArray );\n+        long[] idArray = (long[]) getRightArray( readFullByteArrayFromHeavyRecords( recordList, PropertyType.ARRAY ) ).asObject();\n+return LabelIdArray.stripNodeId( idArray );\n     }\n \n     public interface Validator<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n     {\n-        void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<RECORD, REPORT> engine );\n-        void onRecordChainCycle( DynamicRecord record, CheckerEngine<RECORD, REPORT> engine );\n-        void onWellFormedChain( long[] labelIds, CheckerEngine<RECORD, REPORT> engine, RecordAccess records );\n+        void onRecordNotInUse( DynamicRecord dynamicRecord, CheckerEngine<RECORD,REPORT> engine );\n+        void onRecordChainCycle( DynamicRecord record, CheckerEngine<RECORD,REPORT> engine );\n+        void onWellFormedChain( long[] labelIds, CheckerEngine<RECORD,REPORT> engine, RecordAccess records );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}