{
    "project_name": "Angel-ML-angel",
    "error_id": "1157",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1157/AFMLocalExample.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1157/AFMLocalExample.java\nindex e0e03ee70cd..71c340d4734 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1157/AFMLocalExample.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1157/AFMLocalExample.java\n@@ -29,16 +29,13 @@ import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.LocalFileSystem;\n import org.apache.hadoop.mapreduce.lib.input.CombineTextInputFormat;\n import org.apache.log4j.PropertyConfigurator;\n-\n import java.io.File;\n import java.util.Scanner;\n \n public class AFMLocalExample {\n \n   private static final Log LOG = LogFactory.getLog(AFMLocalExample.class);\n-\n   private Configuration conf = new Configuration();\n-\n   private static boolean inPackage = false;\n   private static String CLASSBASE = \"com.tencent.angel.ml.core.graphsubmit.\";\n \n@@ -53,7 +50,6 @@ public class AFMLocalExample {\n   }\n \n   public void setConf(int mode) {\n-\n     String trainInput = \"\";\n     String predictInput = \"\";\n \n@@ -67,6 +63,7 @@ public class AFMLocalExample {\n     }\n \n     // Set file system\n+\n     String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n     String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n \n@@ -85,23 +82,22 @@ public class AFMLocalExample {\n       conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n       conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/AFM\");\n     } else if (mode == 2) { // incTrain mode\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, \"inctrain\");\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/AFM\");\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/ApFM-inc\");\n+             conf.set(AngelConf.ANGEL_ACTION_TYPE, \"inctrain\");\n+             conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n+             conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/AFM\");\n+             conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/ApFM-inc\");\n     } else if (mode == 3) {  // predict mode\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, \"predict\");\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, predictInput);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/AFM\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict/AFM\");\n-    }\n+             conf.set(AngelConf.ANGEL_ACTION_TYPE, \"predict\");\n+             conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, predictInput);\n+             conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/AFM\");\n+             conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict/AFM\");\n+           }\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n \n     // Set angel resource parameters #worker, #task, #PS\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n-\n     conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());\n \n     // Set AFM algorithm parameters\n@@ -119,40 +115,30 @@ public class AFMLocalExample {\n   }\n \n   public void train() {\n-\n     try {\n       setConf(1);\n-\n       GraphRunner runner = new GraphRunner();\n       runner.train(conf);\n     } catch (Exception e) {\n       LOG.error(\"run AFMLocalExample:train failed.\", e);\n       throw e;\n     }\n-\n   }\n \n-\n   public void incTrain() {\n-\n     try {\n       setConf(2);\n-\n       GraphRunner runner = new GraphRunner();\n       runner.train(conf);\n     } catch (Exception e) {\n       LOG.error(\"run AFMLocalExample:incTrain failed.\", e);\n       throw e;\n     }\n-\n   }\n \n-\n   public void predict() {\n-\n     try {\n       setConf(3);\n-\n       GraphRunner runner = new GraphRunner();\n       runner.predict(conf);\n     } catch (Exception e) {\n@@ -166,6 +152,7 @@ public class AFMLocalExample {\n     Scanner scanner = new Scanner(System.in);\n     System.out.println(\"1-train 2-incTrain 3-predict\");\n     System.out.println(\"Please input the mode:\");\n+\n     int mode = scanner.nextInt();\n     switch (mode) {\n       case 1:\n@@ -178,7 +165,6 @@ public class AFMLocalExample {\n         example.predict();\n         break;\n     }\n-\n     System.exit(0);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}