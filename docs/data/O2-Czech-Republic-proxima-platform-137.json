{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "137",
    "information": {
        "errors": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 99).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assertEquals(json, serializer.fromJsonValue(json));\n    assertArrayEquals(json.getBytes(StandardCharsets.UTF_8), serializer.serialize(json));\n    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n    assertEquals(\"{}\", serializer.getDefault());\n    assertTrue(serializer.isUsable());\n    assertTrue(serializer.isValid(new byte[] {}));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/137/JsonSerializerTest.java\nindex 75aeadab91c..955b7521665 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/137/JsonSerializerTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.scheme;\n \n import static org.junit.Assert.*;\n@@ -35,7 +36,8 @@ public class JsonSerializerTest {\n     assertEquals(json, serializer.asJsonValue(json));\n     assertEquals(json, serializer.fromJsonValue(json));\n     assertArrayEquals(json.getBytes(StandardCharsets.UTF_8), serializer.serialize(json));\n-    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n+    assertEquals(json,\n+        serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n     assertEquals(\"{}\", serializer.getDefault());\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/137/JsonSerializerTest.java\nindex 75aeadab91c..790c23e1292 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/137/JsonSerializerTest.java\n@@ -40,4 +40,4 @@ public class JsonSerializerTest {\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/137/JsonSerializerTest.java\nindex 75aeadab91c..8dacffb8612 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/137/JsonSerializerTest.java\n@@ -16,12 +16,13 @@\n package cz.o2.proxima.scheme;\n \n import static org.junit.Assert.*;\n-\n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n import org.junit.Test;\n \n /** Test {@link JsonSerializer}. */\n+\n+\n public class JsonSerializerTest {\n \n   private final JsonSerializer serializer = new JsonSerializer();\n@@ -40,4 +41,4 @@ public class JsonSerializerTest {\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/137/JsonSerializerTest.java\nindex 75aeadab91c..fc30830710d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/137/JsonSerializerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/137/JsonSerializerTest.java\n@@ -35,7 +35,8 @@ public class JsonSerializerTest {\n     assertEquals(json, serializer.asJsonValue(json));\n     assertEquals(json, serializer.fromJsonValue(json));\n     assertArrayEquals(json.getBytes(StandardCharsets.UTF_8), serializer.serialize(json));\n-    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n+    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8))\n+    .orElse(null));\n     assertEquals(\"{}\", serializer.getDefault());\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}