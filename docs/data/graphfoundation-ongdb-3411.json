{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3411",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "220",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3411/CheckTxLogs.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3411/CheckTxLogs.java\nindex 5608f8aa5d0..05b9538af7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3411/CheckTxLogs.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3411/CheckTxLogs.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tools.txlog;\n \n import java.io.File;\n@@ -53,272 +54,272 @@ import static org.neo4j.tools.util.TransactionLogUtils.openLogs;\n \n /**\n  * Tool that verifies consistency of transaction logs.\n- *\n+ * <p>\n  * Transaction log is considered consistent when every command's before state is the same as after state for\n  * corresponding record in previously committed transaction.\n- *\n+ * <p>\n  * Tool expects a single argument - directory with transaction logs.\n  * It then simply iterates over all commands in those logs, compares before state for current record with previously\n  * seen after state and stores after state for current record, if before state is consistent.\n  */\n public class CheckTxLogs\n {\n-    private static final String HELP_FLAG = \"help\";\n-    private static final String VALIDATE_CHECKPOINTS_FLAG = \"validate-checkpoints\";\n-    private static final String CHECKS = \"checks\";\n-    private static final String SEPARATOR = \",\";\n-\n-    private final PrintStream out;\n-    private final FileSystemAbstraction fs;\n-\n-    public CheckTxLogs( PrintStream out, FileSystemAbstraction fs )\n+  private static final String HELP_FLAG = \"help\";\n+  private static final String VALIDATE_CHECKPOINTS_FLAG = \"validate-checkpoints\";\n+  private static final String CHECKS = \"checks\";\n+  private static final String SEPARATOR = \",\";\n+\n+  private final PrintStream out;\n+  private final FileSystemAbstraction fs;\n+\n+  public CheckTxLogs(PrintStream out, FileSystemAbstraction fs)\n+  {\n+    this.out = out;\n+    this.fs = fs;\n+  }\n+\n+  public static void main(String[] args) throws Exception\n+  {\n+    PrintStream out = System.out;\n+    Args arguments = Args.withFlags(HELP_FLAG, VALIDATE_CHECKPOINTS_FLAG).parse(args);\n+    if (arguments.getBoolean(HELP_FLAG))\n     {\n-        this.out = out;\n-        this.fs = fs;\n+      printUsageAndExit(out);\n     }\n \n-    public static void main( String[] args ) throws Exception\n-    {\n-        PrintStream out = System.out;\n-        Args arguments = Args.withFlags( HELP_FLAG, VALIDATE_CHECKPOINTS_FLAG ).parse( args );\n-        if ( arguments.getBoolean( HELP_FLAG ) )\n-        {\n-            printUsageAndExit( out );\n-        }\n+    boolean validateCheckPoints = arguments.getBoolean(VALIDATE_CHECKPOINTS_FLAG);\n+    CheckType<?, ?>[] checkTypes = parseChecks(arguments);\n+    File dir = parseDir(out, arguments);\n \n-        boolean validateCheckPoints = arguments.getBoolean( VALIDATE_CHECKPOINTS_FLAG );\n-        CheckType<?,?>[] checkTypes = parseChecks( arguments );\n-        File dir = parseDir( out, arguments );\n-\n-        boolean success = false;\n-        try ( FileSystemAbstraction fs = new DefaultFileSystemAbstraction() )\n-        {\n-            LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder( dir, fs ).build();\n-            int numberOfLogFilesFound = (int) (logFiles.getHighestLogVersion() - logFiles.getLowestLogVersion() + 1);\n-            out.println( \"Found \" + numberOfLogFilesFound + \" log files to verify in \" + dir.getCanonicalPath() );\n-\n-            CheckTxLogs tool = new CheckTxLogs( out, fs );\n-            PrintingInconsistenciesHandler handler = new PrintingInconsistenciesHandler( out );\n-            success = tool.scan( logFiles, handler, checkTypes );\n-\n-            if ( validateCheckPoints )\n-            {\n-                success &= tool.validateCheckPoints( logFiles, handler );\n-            }\n-        }\n-\n-        if ( !success )\n-        {\n-            System.exit( 1 );\n-        }\n+    boolean success = false;\n+    try (FileSystemAbstraction fs = new DefaultFileSystemAbstraction())\n+    {\n+      LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder(dir, fs).build();\n+      int numberOfLogFilesFound = (int) (logFiles.getHighestLogVersion() - logFiles.getLowestLogVersion() + 1);\n+      out.println(\"Found \" + numberOfLogFilesFound + \" log files to verify in \" + dir.getCanonicalPath());\n+\n+      CheckTxLogs tool = new CheckTxLogs(out, fs);\n+      PrintingInconsistenciesHandler handler = new PrintingInconsistenciesHandler(out);\n+      success = tool.scan(logFiles, handler, checkTypes);\n+\n+      if (validateCheckPoints)\n+      {\n+        success &= tool.validateCheckPoints(logFiles, handler);\n+      }\n     }\n \n-    // used in other projects do not remove!\n-    public boolean checkAll( File storeDirectory ) throws IOException\n+    if (!success)\n     {\n-        LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder( storeDirectory, fs ).build();\n-        InconsistenciesHandler handler = new PrintingInconsistenciesHandler( out );\n-        boolean success = scan( logFiles, handler, CheckTypes.CHECK_TYPES );\n-        success &= validateCheckPoints( logFiles, handler );\n-        return success;\n+      System.exit(1);\n     }\n-\n-    boolean validateCheckPoints( LogFiles logFiles, InconsistenciesHandler handler ) throws IOException\n+  }\n+\n+  // used in other projects do not remove!\n+  public boolean checkAll(File storeDirectory) throws IOException\n+  {\n+    LogFiles logFiles = LogFilesBuilder.logFilesBasedOnlyBuilder(storeDirectory, fs).build();\n+    InconsistenciesHandler handler = new PrintingInconsistenciesHandler(out);\n+    boolean success = scan(logFiles, handler, CheckTypes.CHECK_TYPES);\n+    success &= validateCheckPoints(logFiles, handler);\n+    return success;\n+  }\n+\n+  boolean validateCheckPoints(LogFiles logFiles, InconsistenciesHandler handler) throws IOException\n+  {\n+    final long lowestLogVersion = logFiles.getLowestLogVersion();\n+    final long highestLogVersion = logFiles.getHighestLogVersion();\n+    boolean success = true;\n+    try (PrimitiveLongLongMap logFileSizes = Primitive.offHeapLongLongMap(GlobalMemoryTracker.INSTANCE))\n     {\n-        final long lowestLogVersion = logFiles.getLowestLogVersion();\n-        final long highestLogVersion = logFiles.getHighestLogVersion();\n-        boolean success = true;\n-        try ( PrimitiveLongLongMap logFileSizes = Primitive.offHeapLongLongMap( GlobalMemoryTracker.INSTANCE ) )\n+      for (long i = lowestLogVersion; i <= highestLogVersion; i++)\n+      {\n+        logFileSizes.put(i, fs.getFileSize(logFiles.getLogFileForVersion(i)));\n+      }\n+\n+      try (LogEntryCursor logEntryCursor = openLogEntryCursor(logFiles))\n+      {\n+        while (logEntryCursor.next())\n         {\n-            for ( long i = lowestLogVersion; i <= highestLogVersion; i++ )\n+          LogEntry logEntry = logEntryCursor.get();\n+          if (logEntry instanceof CheckPoint)\n+          {\n+            LogPosition logPosition = logEntry.<CheckPoint>as().getLogPosition();\n+            // if the file has been pruned we cannot validate the check point\n+            if (logPosition.getLogVersion() >= lowestLogVersion)\n             {\n-                logFileSizes.put( i, fs.getFileSize( logFiles.getLogFileForVersion( i ) ) );\n-            }\n+              long size = logFileSizes.get(logPosition.getLogVersion());\n+              if (logPosition.getByteOffset() < 0 || size < 0 || logPosition.getByteOffset() > size)\n+              {\n+                long currentLogVersion = logEntryCursor.getCurrentLogVersion();\n+                handler.reportInconsistentCheckPoint(currentLogVersion, logPosition, size);\n+                success = false;\n+              }\n \n-            try ( LogEntryCursor logEntryCursor = openLogEntryCursor( logFiles ) )\n-            {\n-                while ( logEntryCursor.next() )\n-                {\n-                    LogEntry logEntry = logEntryCursor.get();\n-                    if ( logEntry instanceof CheckPoint )\n-                    {\n-                        LogPosition logPosition = logEntry.<CheckPoint>as().getLogPosition();\n-                        // if the file has been pruned we cannot validate the check point\n-                        if ( logPosition.getLogVersion() >= lowestLogVersion )\n-                        {\n-                            long size = logFileSizes.get( logPosition.getLogVersion() );\n-                            if ( logPosition.getByteOffset() < 0 || size < 0 || logPosition.getByteOffset() > size )\n-                            {\n-                                long currentLogVersion = logEntryCursor.getCurrentLogVersion();\n-                                handler.reportInconsistentCheckPoint( currentLogVersion, logPosition, size );\n-                                success = false;\n-                            }\n-\n-                        }\n-                    }\n-                }\n             }\n+          }\n         }\n-        return success;\n+      }\n     }\n-\n-    LogEntryCursor openLogEntryCursor( LogFiles logFiles ) throws IOException\n+    return success;\n+  }\n+\n+  LogEntryCursor openLogEntryCursor(LogFiles logFiles) throws IOException\n+  {\n+    return openLogs(fs, logFiles);\n+  }\n+\n+  boolean scan(LogFiles logFiles, InconsistenciesHandler handler, CheckType<?, ?>... checkTypes)\n+      throws IOException\n+  {\n+    boolean success = true;\n+    boolean checkTxIds = true;\n+    for (CheckType<?, ?> checkType : checkTypes)\n     {\n-        return openLogs( fs, logFiles );\n+      success &= scan(logFiles, handler, checkType, checkTxIds);\n+      checkTxIds = false;\n     }\n+    return success;\n+  }\n \n-    boolean scan( LogFiles logFiles, InconsistenciesHandler handler, CheckType<?,?>... checkTypes )\n-            throws IOException\n-    {\n-        boolean success = true;\n-        boolean checkTxIds = true;\n-        for ( CheckType<?,?> checkType : checkTypes )\n-        {\n-            success &= scan( logFiles, handler, checkType, checkTxIds );\n-            checkTxIds = false;\n-        }\n-        return success;\n-    }\n+  private class CommandAndLogVersion\n+  {\n+    StorageCommand command;\n+    long logVersion;\n \n-    private class CommandAndLogVersion\n+    CommandAndLogVersion(StorageCommand command, long logVersion)\n     {\n-        StorageCommand command;\n-        long logVersion;\n-\n-        CommandAndLogVersion( StorageCommand command, long logVersion )\n-        {\n-            this.command = command;\n-            this.logVersion = logVersion;\n-        }\n+      this.command = command;\n+      this.logVersion = logVersion;\n     }\n-\n-    private <C extends Command, R extends AbstractBaseRecord> boolean scan( LogFiles logFiles,\n-            InconsistenciesHandler handler, CheckType<C,R> check, boolean checkTxIds ) throws IOException\n+  }\n+\n+  private <C extends Command, R extends AbstractBaseRecord> boolean scan(LogFiles logFiles,\n+                                                                         InconsistenciesHandler handler, CheckType<C, R> check, boolean checkTxIds)\n+      throws IOException\n+  {\n+    out.println(\"Checking logs for \" + check.name() + \" inconsistencies\");\n+    CommittedRecords<R> state = new CommittedRecords<>(check);\n+\n+    List<CommandAndLogVersion> txCommands = new ArrayList<>();\n+    boolean validLogs = true;\n+    long commandsRead = 0;\n+    long lastSeenTxId = BASE_TX_ID;\n+    try (LogEntryCursor logEntryCursor = openLogEntryCursor(logFiles))\n     {\n-        out.println( \"Checking logs for \" + check.name() + \" inconsistencies\" );\n-        CommittedRecords<R> state = new CommittedRecords<>( check );\n-\n-        List<CommandAndLogVersion> txCommands = new ArrayList<>();\n-        boolean validLogs = true;\n-        long commandsRead = 0;\n-        long lastSeenTxId = BASE_TX_ID;\n-        try ( LogEntryCursor logEntryCursor = openLogEntryCursor( logFiles ) )\n+      while (logEntryCursor.next())\n+      {\n+        LogEntry entry = logEntryCursor.get();\n+        if (entry instanceof LogEntryCommand)\n         {\n-            while ( logEntryCursor.next() )\n-            {\n-                LogEntry entry = logEntryCursor.get();\n-                if ( entry instanceof LogEntryCommand )\n-                {\n-                    StorageCommand command = ((LogEntryCommand) entry).getCommand();\n-                    if ( check.commandClass().isInstance( command ) )\n-                    {\n-                        long logVersion = logEntryCursor.getCurrentLogVersion();\n-                        txCommands.add( new CommandAndLogVersion( command, logVersion ) );\n-                    }\n-                }\n-                else if ( entry instanceof LogEntryCommit )\n-                {\n-                    long txId = ((LogEntryCommit) entry).getTxId();\n-                    if ( checkTxIds )\n-                    {\n-                        validLogs &= checkNoDuplicatedTxsInTheLog( lastSeenTxId, txId, handler );\n-                        lastSeenTxId = txId;\n-                    }\n-                    for ( CommandAndLogVersion txCommand : txCommands )\n-                    {\n-                        validLogs &= checkAndHandleInconsistencies( txCommand, check, state, txId, handler );\n-                    }\n-                    txCommands.clear();\n-                }\n-                commandsRead++;\n-            }\n-        }\n-        out.println( \"Processed \" + commandsRead + \" commands\" );\n-        out.println( state );\n-\n-        if ( !txCommands.isEmpty() )\n+          StorageCommand command = ((LogEntryCommand) entry).getCommand();\n+          if (check.commandClass().isInstance(command))\n+          {\n+            long logVersion = logEntryCursor.getCurrentLogVersion();\n+            txCommands.add(new CommandAndLogVersion(command, logVersion));\n+          }\n+        } else if (entry instanceof LogEntryCommit)\n         {\n-            out.println( \"Found \" + txCommands.size() + \" uncommitted commands at the end.\" );\n-            for ( CommandAndLogVersion txCommand : txCommands )\n-            {\n-                validLogs &= checkAndHandleInconsistencies( txCommand, check, state, -1, handler );\n-            }\n-            txCommands.clear();\n+          long txId = ((LogEntryCommit) entry).getTxId();\n+          if (checkTxIds)\n+          {\n+            validLogs &= checkNoDuplicatedTxsInTheLog(lastSeenTxId, txId, handler);\n+            lastSeenTxId = txId;\n+          }\n+          for (CommandAndLogVersion txCommand : txCommands)\n+          {\n+            validLogs &= checkAndHandleInconsistencies(txCommand, check, state, txId, handler);\n+          }\n+          txCommands.clear();\n         }\n-\n-        return validLogs;\n+        commandsRead++;\n+      }\n     }\n+    out.println(\"Processed \" + commandsRead + \" commands\");\n+    out.println(state);\n \n-    private boolean checkNoDuplicatedTxsInTheLog( long lastTxId, long currentTxId, InconsistenciesHandler handler )\n+    if (!txCommands.isEmpty())\n     {\n-        boolean isValid = lastTxId <= BASE_TX_ID || lastTxId + 1 == currentTxId;\n-        if ( !isValid )\n-        {\n-            handler.reportInconsistentTxIdSequence( lastTxId, currentTxId );\n-        }\n-        return isValid;\n+      out.println(\"Found \" + txCommands.size() + \" uncommitted commands at the end.\");\n+      for (CommandAndLogVersion txCommand : txCommands)\n+      {\n+        validLogs &= checkAndHandleInconsistencies(txCommand, check, state, -1, handler);\n+      }\n+      txCommands.clear();\n     }\n \n-    private <C extends Command, R extends AbstractBaseRecord> boolean checkAndHandleInconsistencies(\n-            CommandAndLogVersion txCommand, CheckType<C,R> check, CommittedRecords<R> state, long txId,\n-            InconsistenciesHandler handler )\n-    {\n-        C command = check.commandClass().cast( txCommand.command );\n+    return validLogs;\n+  }\n \n-        R before = check.before( command );\n-        R after = check.after( command );\n+  private boolean checkNoDuplicatedTxsInTheLog(long lastTxId, long currentTxId, InconsistenciesHandler handler)\n+  {\n+    boolean isValid = lastTxId <= BASE_TX_ID || lastTxId + 1 == currentTxId;\n+    if (!isValid)\n+    {\n+      handler.reportInconsistentTxIdSequence(lastTxId, currentTxId);\n+    }\n+    return isValid;\n+  }\n \n-        assert before.getId() == after.getId();\n+  private <C extends Command, R extends AbstractBaseRecord> boolean checkAndHandleInconsistencies(\n+      CommandAndLogVersion txCommand, CheckType<C, R> check, CommittedRecords<R> state, long txId,\n+      InconsistenciesHandler handler)\n+  {\n+    C command = check.commandClass().cast(txCommand.command);\n \n-        RecordInfo<R> lastSeen = state.get( after.getId() );\n+    R before = check.before(command);\n+    R after = check.after(command);\n \n-        boolean isValidRecord = (lastSeen == null) || check.equal( before, lastSeen.record() );\n-        if ( !isValidRecord )\n-        {\n-            handler.reportInconsistentCommand( lastSeen, new RecordInfo<>( before, txCommand.logVersion, txId ) );\n-        }\n+    assert before.getId() == after.getId();\n \n-        state.put( after, txCommand.logVersion, txId );\n+    RecordInfo<R> lastSeen = state.get(after.getId());\n \n-        return isValidRecord;\n+    boolean isValidRecord = (lastSeen == null) || check.equal(before, lastSeen.record());\n+    if (!isValidRecord)\n+    {\n+      handler.reportInconsistentCommand(lastSeen, new RecordInfo<>(before, txCommand.logVersion, txId));\n     }\n \n-    private static CheckType<?,?>[] parseChecks( Args arguments )\n-    {\n-        String checks = arguments.get( CHECKS );\n-        if ( checks == null )\n-        {\n-            return CheckTypes.CHECK_TYPES;\n-        }\n+    state.put(after, txCommand.logVersion, txId);\n \n-        return Stream.of( checks.split( SEPARATOR ) ).map( CheckTypes::fromName ).toArray( CheckType[]::new );\n-    }\n+    return isValidRecord;\n+  }\n \n-    private static File parseDir( PrintStream printStream, Args args )\n+  private static CheckType<?, ?>[] parseChecks(Args arguments)\n+  {\n+    String checks = arguments.get(CHECKS);\n+    if (checks == null)\n     {\n-        if ( args.orphans().size() != 1 )\n-        {\n-            printUsageAndExit( printStream );\n-        }\n-        File dir = new File( args.orphans().get( 0 ) );\n-        if ( !dir.isDirectory() )\n-        {\n-            printStream.println( \"Invalid directory: '\" + dir + \"'\" );\n-            printUsageAndExit( printStream );\n-        }\n-        return dir;\n+      return CheckTypes.CHECK_TYPES;\n     }\n \n-    private static void printUsageAndExit( PrintStream out )\n+    return Stream.of(checks.split(SEPARATOR)).map(CheckTypes::fromName).toArray(CheckType[]::new);\n+  }\n+\n+  private static File parseDir(PrintStream printStream, Args args)\n+  {\n+    if (args.orphans().size() != 1)\n+    {\n+      printUsageAndExit(printStream);\n+    }\n+    File dir = new File(args.orphans().get(0));\n+    if (!dir.isDirectory())\n     {\n-        out.println( \"Tool expects single argument - directory with tx logs\" );\n-        out.println( \"Usage:\" );\n-        out.println( \"\\t./checkTxLogs [options] <directory>\" );\n-        out.println( \"Options:\" );\n-        out.println( \"\\t--help\\t\\tprints this description\" );\n-        out.println( \"\\t--checks='checkname[,...]'\\t\\tthe list of checks to perform. Checks available: \" +\n-                Arrays.stream( CheckTypes.CHECK_TYPES ).map( CheckType::name )\n-                        .collect( Collectors.joining( SEPARATOR ) ) );\n-        System.exit( 1 );\n+      printStream.println(\"Invalid directory: '\" + dir + \"'\");\n+      printUsageAndExit(printStream);\n     }\n+    return dir;\n+  }\n+\n+  private static void printUsageAndExit(PrintStream out)\n+  {\n+    out.println(\"Tool expects single argument - directory with tx logs\");\n+    out.println(\"Usage:\");\n+    out.println(\"\\t./checkTxLogs [options] <directory>\");\n+    out.println(\"Options:\");\n+    out.println(\"\\t--help\\t\\tprints this description\");\n+    out.println(\"\\t--checks='checkname[,...]'\\t\\tthe list of checks to perform. Checks available: \" +\n+        Arrays.stream(CheckTypes.CHECK_TYPES).map(CheckType::name)\n+            .collect(Collectors.joining(SEPARATOR)));\n+    System.exit(1);\n+  }\n }\n",
            "diff_size": 333
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}