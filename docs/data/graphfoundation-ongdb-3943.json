{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3943",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "237",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "245",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "288",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "330",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "339",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "352",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "419",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "427",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "455",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "455",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "503",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "583",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "663",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "663",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "678",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "678",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "683",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "683",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "713",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3943/RWLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3943/RWLock.java\nindex 4c7af38c96f..c6430124cec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3943/RWLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3943/RWLock.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.locking.community;\n \n import java.time.Clock;\n@@ -67,666 +68,656 @@ import static org.neo4j.kernel.impl.locking.LockType.WRITE;\n  */\n class RWLock\n {\n-    private final LockResource resource; // the resource this RWLock locks\n-    private final LinkedList<LockRequest> waitingThreadList = new LinkedList<>();\n-    private final Map<Object, TxLockElement> txLockElementMap = new HashMap<>();\n-    private final RagManager ragManager;\n-    private final Clock clock;\n-    private final long lockAcquisitionTimeoutMillis;\n+  private final LockResource resource; // the resource this RWLock locks\n+  private final LinkedList<LockRequest> waitingThreadList = new LinkedList<>();\n+  private final Map<Object, TxLockElement> txLockElementMap = new HashMap<>();\n+  private final RagManager ragManager;\n+  private final Clock clock;\n+  private final long lockAcquisitionTimeoutMillis;\n+\n+  // access to these is guarded by synchronized blocks\n+  private int totalReadCount;\n+  private int totalWriteCount;\n+  private int marked; // synch helper in LockManager\n+\n+  RWLock(LockResource resource, RagManager ragManager, Clock clock, long lockAcquisitionTimeoutMillis)\n+  {\n+    this.resource = resource;\n+    this.ragManager = ragManager;\n+    this.clock = clock;\n+    this.lockAcquisitionTimeoutMillis = lockAcquisitionTimeoutMillis;\n+  }\n+\n+  // keeps track of a transactions read and write lock count on this RWLock\n+  private static class TxLockElement\n+  {\n+    private final Object tx;\n \n     // access to these is guarded by synchronized blocks\n-    private int totalReadCount;\n-    private int totalWriteCount;\n-    private int marked; // synch helper in LockManager\n-\n-    RWLock( LockResource resource, RagManager ragManager, Clock clock, long lockAcquisitionTimeoutMillis )\n+    private int readCount;\n+    private int writeCount;\n+    // represent number of active request that where current TxLockElement participate in\n+    // as soon as hasNoRequests return true - txLockElement can be cleaned up\n+    private int requests;\n+    // flag indicate that current TxLockElement is terminated because owning client closed\n+    private boolean terminated;\n+\n+    TxLockElement(Object tx)\n     {\n-        this.resource = resource;\n-        this.ragManager = ragManager;\n-        this.clock = clock;\n-        this.lockAcquisitionTimeoutMillis = lockAcquisitionTimeoutMillis;\n+      this.tx = tx;\n     }\n \n-    // keeps track of a transactions read and write lock count on this RWLock\n-    private static class TxLockElement\n+    void incrementRequests()\n     {\n-        private final Object tx;\n-\n-        // access to these is guarded by synchronized blocks\n-        private int readCount;\n-        private int writeCount;\n-        // represent number of active request that where current TxLockElement participate in\n-        // as soon as hasNoRequests return true - txLockElement can be cleaned up\n-        private int requests;\n-        // flag indicate that current TxLockElement is terminated because owning client closed\n-        private boolean terminated;\n-\n-        TxLockElement( Object tx )\n-        {\n-            this.tx = tx;\n-        }\n-\n-        void incrementRequests()\n-        {\n-            requests = Math.incrementExact( requests );\n-        }\n-\n-        void decrementRequests()\n-        {\n-            requests = MathUtil.decrementExactNotPastZero( requests );\n-        }\n-\n-        boolean hasNoRequests()\n-        {\n-            return requests == 0;\n-        }\n-\n-        boolean isFree()\n-        {\n-            return readCount == 0 && writeCount == 0;\n-        }\n-\n-        public boolean isTerminated()\n-        {\n-            return terminated;\n-        }\n-\n-        public void setTerminated( boolean terminated )\n-        {\n-            this.terminated = terminated;\n-        }\n+      requests = Math.incrementExact(requests);\n     }\n \n-    // keeps track of what type of lock a thread is waiting for\n-    private static class LockRequest\n+    void decrementRequests()\n     {\n-        private final TxLockElement element;\n-        private final LockType lockType;\n-        private final Thread waitingThread;\n-        private final long since = System.currentTimeMillis();\n-\n-        LockRequest( TxLockElement element, LockType lockType, Thread thread )\n-        {\n-            this.element = element;\n-            this.lockType = lockType;\n-            this.waitingThread = thread;\n-        }\n+      requests = MathUtil.decrementExactNotPastZero(requests);\n     }\n \n-    public Object resource()\n+    boolean hasNoRequests()\n     {\n-        return resource;\n+      return requests == 0;\n     }\n \n-    synchronized void mark()\n+    boolean isFree()\n     {\n-        marked = Math.incrementExact( marked );\n+      return readCount == 0 && writeCount == 0;\n     }\n \n-    /** synchronized by all caller methods */\n-    private void unmark()\n+    public boolean isTerminated()\n     {\n-        marked = MathUtil.decrementExactNotPastZero( marked );\n+      return terminated;\n     }\n \n-    synchronized boolean isMarked()\n+    public void setTerminated(boolean terminated)\n     {\n-        return marked > 0;\n+      this.terminated = terminated;\n     }\n+  }\n \n-    /**\n-     * Tries to acquire read lock for a given transaction. If\n-     * <CODE>this.writeCount</CODE> is greater than the currents tx's write\n-     * count the transaction has to wait and the {@link RagManager#checkWaitOn}\n-     * method is invoked for deadlock detection.\n-     * <p/>\n-     * If the lock can be acquired the lock count is updated on <CODE>this</CODE>\n-     * and the transaction lock element (tle).\n-     * Waiting for a lock can also be terminated. In that case waiting thread will be interrupted and corresponding\n-     * {@link org.neo4j.kernel.impl.locking.community.RWLock.TxLockElement} will be marked as terminated.\n-     * In that case lock will not be acquired and false will be return as result of acquisition\n-     *\n-     * @return true is lock was acquired, false otherwise\n-     * @throws DeadlockDetectedException if a deadlock is detected\n-     */\n-    synchronized boolean acquireReadLock( LockTracer tracer, Object tx ) throws DeadlockDetectedException\n-    {\n-        TxLockElement tle = getOrCreateLockElement( tx );\n-\n-        LockRequest lockRequest = null;\n-        LockWaitEvent waitEvent = null;\n-        // used to track do we need to add lock request to a waiting queue or we still have it there\n-        boolean addLockRequest = true;\n-        try\n-        {\n-            tle.incrementRequests();\n-            Thread currentThread = currentThread();\n+  // keeps track of what type of lock a thread is waiting for\n+  private static class LockRequest\n+  {\n+    private final TxLockElement element;\n+    private final LockType lockType;\n+    private final Thread waitingThread;\n+    private final long since = System.currentTimeMillis();\n \n-            long lockAcquisitionTimeBoundary = clock.millis() + lockAcquisitionTimeoutMillis;\n-            while ( !tle.isTerminated() && (totalWriteCount > tle.writeCount) )\n-            {\n-                assertNotExpired( lockAcquisitionTimeBoundary );\n-                ragManager.checkWaitOn( this, tx );\n-\n-                if ( addLockRequest )\n-                {\n-                    lockRequest = new LockRequest( tle, READ, currentThread );\n-                    waitingThreadList.addFirst( lockRequest );\n-                }\n-\n-                if ( waitEvent == null )\n-                {\n-                    waitEvent = tracer.waitForLock( false, resource.type(), resource.resourceId() );\n-                }\n-                addLockRequest = waitUninterruptedly( lockAcquisitionTimeBoundary );\n-                ragManager.stopWaitOn( this, tx );\n-            }\n-\n-            if ( !tle.isTerminated() )\n-            {\n-                registerReadLockAcquired( tx, tle );\n-                return true;\n-            }\n-            else\n-            {\n-                // in case if lock element was interrupted and it was never register before\n-                // we need to clean it from lock element map\n-                // if it was register before it will be cleaned up during standard lock release call\n-                if ( tle.requests == 1 && tle.isFree() )\n-                {\n-                    txLockElementMap.remove( tx );\n-                }\n-                return false;\n-            }\n-        }\n-        finally\n-        {\n-            if ( waitEvent != null )\n-            {\n-                waitEvent.close();\n-            }\n-            cleanupWaitingListRequests( lockRequest, tle, addLockRequest );\n-            // for cases when spurious wake up was the reason why we waked up, but also there\n-            // was an interruption as described at 17.2 just clearing interruption flag\n-            interrupted();\n-            // if deadlocked, remove marking so lock is removed when empty\n-            tle.decrementRequests();\n-            unmark();\n-        }\n-    }\n-\n-    synchronized boolean tryAcquireReadLock( Object tx )\n+    LockRequest(TxLockElement element, LockType lockType, Thread thread)\n     {\n-        TxLockElement tle = getOrCreateLockElement( tx );\n-\n-        try\n-        {\n-            if ( tle.isTerminated() || (totalWriteCount > tle.writeCount) )\n-            {\n-                return false;\n-            }\n-\n-            registerReadLockAcquired( tx, tle );\n-            return true;\n-        }\n-        finally\n-        {\n-            // if deadlocked, remove marking so lock is removed when empty\n-            unmark();\n-        }\n+      this.element = element;\n+      this.lockType = lockType;\n+      this.waitingThread = thread;\n     }\n-\n-    /**\n-     * Releases the read lock held by the provided transaction. If it is null then\n-     * an attempt to acquire the current transaction will be made. This is to\n-     * make safe calling the method from the context of an\n-     * <code>afterCompletion()</code> hook where the tx is locally stored and\n-     * not necessarily available through the tm. If there are waiting\n-     * transactions in the queue they will be interrupted if they can acquire\n-     * the lock.\n-     */\n-    synchronized void releaseReadLock( Object tx ) throws LockNotFoundException\n+  }\n+\n+  public Object resource()\n+  {\n+    return resource;\n+  }\n+\n+  synchronized void mark()\n+  {\n+    marked = Math.incrementExact(marked);\n+  }\n+\n+  /**\n+   * synchronized by all caller methods\n+   */\n+  private void unmark()\n+  {\n+    marked = MathUtil.decrementExactNotPastZero(marked);\n+  }\n+\n+  synchronized boolean isMarked()\n+  {\n+    return marked > 0;\n+  }\n+\n+  /**\n+   * Tries to acquire read lock for a given transaction. If\n+   * <CODE>this.writeCount</CODE> is greater than the currents tx's write\n+   * count the transaction has to wait and the {@link RagManager#checkWaitOn}\n+   * method is invoked for deadlock detection.\n+   * <p/>\n+   * If the lock can be acquired the lock count is updated on <CODE>this</CODE>\n+   * and the transaction lock element (tle).\n+   * Waiting for a lock can also be terminated. In that case waiting thread will be interrupted and corresponding\n+   * {@link org.neo4j.kernel.impl.locking.community.RWLock.TxLockElement} will be marked as terminated.\n+   * In that case lock will not be acquired and false will be return as result of acquisition\n+   *\n+   * @return true is lock was acquired, false otherwise\n+   * @throws DeadlockDetectedException if a deadlock is detected\n+   */\n+  synchronized boolean acquireReadLock(LockTracer tracer, Object tx) throws DeadlockDetectedException\n+  {\n+    TxLockElement tle = getOrCreateLockElement(tx);\n+\n+    LockRequest lockRequest = null;\n+    LockWaitEvent waitEvent = null;\n+    // used to track do we need to add lock request to a waiting queue or we still have it there\n+    boolean addLockRequest = true;\n+    try\n     {\n-        TxLockElement tle = getLockElement( tx );\n+      tle.incrementRequests();\n+      Thread currentThread = currentThread();\n \n-        if ( tle.readCount == 0 )\n+      long lockAcquisitionTimeBoundary = clock.millis() + lockAcquisitionTimeoutMillis;\n+      while (!tle.isTerminated() && (totalWriteCount > tle.writeCount))\n+      {\n+        assertNotExpired(lockAcquisitionTimeBoundary);\n+        ragManager.checkWaitOn(this, tx);\n+\n+        if (addLockRequest)\n         {\n-            throw new LockNotFoundException( \"\" + tx + \" don't have readLock\" );\n+          lockRequest = new LockRequest(tle, READ, currentThread);\n+          waitingThreadList.addFirst(lockRequest);\n         }\n \n-        totalReadCount = MathUtil.decrementExactNotPastZero( totalReadCount );\n-        tle.readCount = MathUtil.decrementExactNotPastZero( tle.readCount );\n-        if ( tle.isFree() )\n+        if (waitEvent == null)\n         {\n-            ragManager.lockReleased( this, tx );\n-            if ( tle.hasNoRequests() )\n-            {\n-                txLockElementMap.remove( tx );\n-            }\n+          waitEvent = tracer.waitForLock(false, resource.type(), resource.resourceId());\n         }\n-        if ( !waitingThreadList.isEmpty() )\n-        {\n-            LockRequest lockRequest = waitingThreadList.getLast();\n+        addLockRequest = waitUninterruptedly(lockAcquisitionTimeBoundary);\n+        ragManager.stopWaitOn(this, tx);\n+      }\n \n-            if ( lockRequest.lockType == LockType.WRITE )\n-            {\n-                // this one is tricky...\n-                // if readCount > 0 lockRequest either have to find a waiting read lock\n-                // in the queue or a waiting write lock that has all read\n-                // locks, if none of these are found it means that there\n-                // is a (are) thread(s) that will release read lock(s) in the\n-                // near future...\n-                if ( totalReadCount == lockRequest.element.readCount )\n-                {\n-                    // found a write lock with all read locks\n-                    waitingThreadList.removeLast();\n-                    lockRequest.waitingThread.interrupt();\n-                }\n-                else\n-                {\n-                    ListIterator<LockRequest> listItr = waitingThreadList.listIterator(\n-                            waitingThreadList.lastIndexOf( lockRequest ) );\n-                    // hm am I doing the first all over again?\n-                    // think I am if cursor is at lastIndex + 0.5 oh well...\n-                    while ( listItr.hasPrevious() )\n-                    {\n-                        lockRequest = listItr.previous();\n-                        if ( lockRequest.lockType == LockType.WRITE && totalReadCount == lockRequest.element.readCount )\n-                        {\n-                            // found a write lock with all read locks\n-                            listItr.remove();\n-                            lockRequest.waitingThread.interrupt();\n-                            break;\n-                        }\n-                        else if ( lockRequest.lockType == LockType.READ )\n-                        {\n-                            // found a read lock, let it do the job...\n-                            listItr.remove();\n-                            lockRequest.waitingThread.interrupt();\n-                        }\n-                    }\n-                }\n-            }\n-            else\n-            {\n-                // some thread may have the write lock and released a read lock\n-                // if writeCount is down to zero lockRequest can interrupt the waiting\n-                // read lock\n-                if ( totalWriteCount == 0 )\n-                {\n-                    waitingThreadList.removeLast();\n-                    lockRequest.waitingThread.interrupt();\n-                }\n-            }\n-        }\n+      if (!tle.isTerminated())\n+      {\n+        registerReadLockAcquired(tx, tle);\n+        return true;\n+      } else\n+      {\n+        // in case if lock element was interrupted and it was never register before\n+        // we need to clean it from lock element map\n+        // if it was register before it will be cleaned up during standard lock release call\n+        if (tle.requests == 1 && tle.isFree())\n+        {\n+          txLockElementMap.remove(tx);\n+        }\n+        return false;\n+      }\n+    } finally\n+    {\n+      if (waitEvent != null)\n+      {\n+        waitEvent.close();\n+      }\n+      cleanupWaitingListRequests(lockRequest, tle, addLockRequest);\n+      // for cases when spurious wake up was the reason why we waked up, but also there\n+      // was an interruption as described at 17.2 just clearing interruption flag\n+      interrupted();\n+      // if deadlocked, remove marking so lock is removed when empty\n+      tle.decrementRequests();\n+      unmark();\n     }\n+  }\n \n-    /**\n-     * Tries to acquire write lock for a given transaction. If\n-     * <CODE>this.writeCount</CODE> is greater than the currents tx's write\n-     * count or the read count is greater than the currents tx's read count the\n-     * transaction has to wait and the {@link RagManager#checkWaitOn} method is\n-     * invoked for deadlock detection.\n-     * <p/>\n-     * If the lock can be acquires the lock count is updated on <CODE>this</CODE>\n-     * and the transaction lock element (tle).\n-     * Waiting for a lock can also be terminated. In that case waiting thread will be interrupted and corresponding\n-     * {@link org.neo4j.kernel.impl.locking.community.RWLock.TxLockElement} will be marked as terminated.\n-     * In that case lock will not be acquired and false will be return as result of acquisition\n-     *\n-     * @return true is lock was acquired, false otherwise\n-     * @throws DeadlockDetectedException if a deadlock is detected\n-     */\n-    synchronized boolean acquireWriteLock( LockTracer tracer, Object tx ) throws DeadlockDetectedException\n-    {\n-        TxLockElement tle = getOrCreateLockElement( tx );\n-\n-        LockRequest lockRequest = null;\n-        LockWaitEvent waitEvent = null;\n-        // used to track do we need to add lock request to a waiting queue or we still have it there\n-        boolean addLockRequest = true;\n-        try\n-        {\n-            tle.incrementRequests();\n-            Thread currentThread = currentThread();\n-\n-            long lockAcquisitionTimeBoundary = clock.millis() + lockAcquisitionTimeoutMillis;\n-            while ( !tle.isTerminated() && (totalWriteCount > tle.writeCount || totalReadCount > tle.readCount) )\n-            {\n-                assertNotExpired( lockAcquisitionTimeBoundary );\n-                ragManager.checkWaitOn( this, tx );\n-\n-                if ( addLockRequest )\n-                {\n-                    lockRequest = new LockRequest( tle, WRITE, currentThread );\n-                    waitingThreadList.addFirst( lockRequest );\n-                }\n-\n-                if ( waitEvent == null )\n-                {\n-                    waitEvent = tracer.waitForLock( true, resource.type(), resource.resourceId() );\n-                }\n-                addLockRequest = waitUninterruptedly( lockAcquisitionTimeBoundary );\n-                ragManager.stopWaitOn( this, tx );\n-            }\n+  synchronized boolean tryAcquireReadLock(Object tx)\n+  {\n+    TxLockElement tle = getOrCreateLockElement(tx);\n \n-            if ( !tle.isTerminated() )\n-            {\n-                registerWriteLockAcquired( tx, tle );\n-                return true;\n-            }\n-            else\n-            {\n-                // in case if lock element was interrupted and it was never register before\n-                // we need to clean it from lock element map\n-                // if it was register before it will be cleaned up during standard lock release call\n-                if ( tle.requests == 1 && tle.isFree() )\n-                {\n-                    txLockElementMap.remove( tx );\n-                }\n-                return false;\n-            }\n-        }\n-        finally\n-        {\n-            if ( waitEvent != null )\n-            {\n-                waitEvent.close();\n-            }\n-            cleanupWaitingListRequests( lockRequest, tle, addLockRequest );\n-            // for cases when spurious wake up was the reason why we waked up, but also there\n-            // was an interruption as described at 17.2 just clearing interruption flag\n-            interrupted();\n-            // if deadlocked, remove marking so lock is removed when empty\n-            tle.decrementRequests();\n-            unmark();\n-        }\n+    try\n+    {\n+      if (tle.isTerminated() || (totalWriteCount > tle.writeCount))\n+      {\n+        return false;\n+      }\n+\n+      registerReadLockAcquired(tx, tle);\n+      return true;\n+    } finally\n+    {\n+      // if deadlocked, remove marking so lock is removed when empty\n+      unmark();\n     }\n-\n-    private boolean waitUninterruptedly( long lockAcquisitionTimeBoundary )\n+  }\n+\n+  /**\n+   * Releases the read lock held by the provided transaction. If it is null then\n+   * an attempt to acquire the current transaction will be made. This is to\n+   * make safe calling the method from the context of an\n+   * <code>afterCompletion()</code> hook where the tx is locally stored and\n+   * not necessarily available through the tm. If there are waiting\n+   * transactions in the queue they will be interrupted if they can acquire\n+   * the lock.\n+   */\n+  synchronized void releaseReadLock(Object tx) throws LockNotFoundException\n+  {\n+    TxLockElement tle = getLockElement(tx);\n+\n+    if (tle.readCount == 0)\n     {\n-        boolean addLockRequest;\n-        try\n-        {\n-            if ( lockAcquisitionTimeoutMillis > 0 )\n-            {\n-                assertNotExpired( lockAcquisitionTimeBoundary );\n-                wait( Math.abs( lockAcquisitionTimeBoundary - clock.millis() ) );\n-            }\n-            else\n-            {\n-                wait();\n-            }\n-            addLockRequest = false;\n-        }\n-        catch ( InterruptedException e )\n-        {\n-            interrupted();\n-            addLockRequest = true;\n-        }\n-        return addLockRequest;\n+      throw new LockNotFoundException(\"\" + tx + \" don't have readLock\");\n     }\n \n-    // in case of spurious wake up, deadlock during spurious wake up, termination\n-    // when we already have request in a queue we need to clean it up\n-    private void cleanupWaitingListRequests( LockRequest lockRequest, TxLockElement lockElement,\n-                                             boolean addLockRequest )\n+    totalReadCount = MathUtil.decrementExactNotPastZero(totalReadCount);\n+    tle.readCount = MathUtil.decrementExactNotPastZero(tle.readCount);\n+    if (tle.isFree())\n     {\n-        if ( lockRequest != null && (lockElement.isTerminated() || !addLockRequest) )\n-        {\n-            waitingThreadList.remove( lockRequest );\n-        }\n+      ragManager.lockReleased(this, tx);\n+      if (tle.hasNoRequests())\n+      {\n+        txLockElementMap.remove(tx);\n+      }\n     }\n-\n-    synchronized boolean tryAcquireWriteLock( Object tx )\n+    if (!waitingThreadList.isEmpty())\n     {\n-        TxLockElement tle = getOrCreateLockElement( tx );\n-\n-        try\n-        {\n-            if ( tle.isTerminated() || (totalWriteCount > tle.writeCount) || (totalReadCount > tle.readCount) )\n+      LockRequest lockRequest = waitingThreadList.getLast();\n+\n+      if (lockRequest.lockType == LockType.WRITE)\n+      {\n+        // this one is tricky...\n+        // if readCount > 0 lockRequest either have to find a waiting read lock\n+        // in the queue or a waiting write lock that has all read\n+        // locks, if none of these are found it means that there\n+        // is a (are) thread(s) that will release read lock(s) in the\n+        // near future...\n+        if (totalReadCount == lockRequest.element.readCount)\n+        {\n+          // found a write lock with all read locks\n+          waitingThreadList.removeLast();\n+          lockRequest.waitingThread.interrupt();\n+        } else\n+        {\n+          ListIterator<LockRequest> listItr = waitingThreadList.listIterator(\n+              waitingThreadList.lastIndexOf(lockRequest));\n+          // hm am I doing the first all over again?\n+          // think I am if cursor is at lastIndex + 0.5 oh well...\n+          while (listItr.hasPrevious())\n+          {\n+            lockRequest = listItr.previous();\n+            if (lockRequest.lockType == LockType.WRITE && totalReadCount == lockRequest.element.readCount)\n+            {\n+              // found a write lock with all read locks\n+              listItr.remove();\n+              lockRequest.waitingThread.interrupt();\n+              break;\n+            } else if (lockRequest.lockType == LockType.READ)\n             {\n-                return false;\n+              // found a read lock, let it do the job...\n+              listItr.remove();\n+              lockRequest.waitingThread.interrupt();\n             }\n-\n-            registerWriteLockAcquired( tx, tle );\n-            return true;\n+          }\n         }\n-        finally\n+      } else\n+      {\n+        // some thread may have the write lock and released a read lock\n+        // if writeCount is down to zero lockRequest can interrupt the waiting\n+        // read lock\n+        if (totalWriteCount == 0)\n         {\n-            // if deadlocked, remove marking so lock is removed when empty\n-            unmark();\n+          waitingThreadList.removeLast();\n+          lockRequest.waitingThread.interrupt();\n         }\n+      }\n     }\n-\n-    /**\n-     * Releases the write lock held by the provided tx. If it is null then an\n-     * attempt to acquire the current transaction from the transaction manager\n-     * will be made. This is to make safe calling this method as an\n-     * <code>afterCompletion()</code> hook where the transaction context is not\n-     * necessarily available. If write count is zero and there are waiting\n-     * transactions in the queue they will be interrupted if they can acquire\n-     * the lock.\n-     */\n-    synchronized void releaseWriteLock( Object tx ) throws LockNotFoundException\n+  }\n+\n+  /**\n+   * Tries to acquire write lock for a given transaction. If\n+   * <CODE>this.writeCount</CODE> is greater than the currents tx's write\n+   * count or the read count is greater than the currents tx's read count the\n+   * transaction has to wait and the {@link RagManager#checkWaitOn} method is\n+   * invoked for deadlock detection.\n+   * <p/>\n+   * If the lock can be acquires the lock count is updated on <CODE>this</CODE>\n+   * and the transaction lock element (tle).\n+   * Waiting for a lock can also be terminated. In that case waiting thread will be interrupted and corresponding\n+   * {@link org.neo4j.kernel.impl.locking.community.RWLock.TxLockElement} will be marked as terminated.\n+   * In that case lock will not be acquired and false will be return as result of acquisition\n+   *\n+   * @return true is lock was acquired, false otherwise\n+   * @throws DeadlockDetectedException if a deadlock is detected\n+   */\n+  synchronized boolean acquireWriteLock(LockTracer tracer, Object tx) throws DeadlockDetectedException\n+  {\n+    TxLockElement tle = getOrCreateLockElement(tx);\n+\n+    LockRequest lockRequest = null;\n+    LockWaitEvent waitEvent = null;\n+    // used to track do we need to add lock request to a waiting queue or we still have it there\n+    boolean addLockRequest = true;\n+    try\n     {\n-        TxLockElement tle = getLockElement( tx );\n+      tle.incrementRequests();\n+      Thread currentThread = currentThread();\n \n-        if ( tle.writeCount == 0 )\n-        {\n-            throw new LockNotFoundException( \"\" + tx + \" don't have writeLock\" );\n-        }\n+      long lockAcquisitionTimeBoundary = clock.millis() + lockAcquisitionTimeoutMillis;\n+      while (!tle.isTerminated() && (totalWriteCount > tle.writeCount || totalReadCount > tle.readCount))\n+      {\n+        assertNotExpired(lockAcquisitionTimeBoundary);\n+        ragManager.checkWaitOn(this, tx);\n \n-        totalWriteCount = MathUtil.decrementExactNotPastZero( totalWriteCount );\n-        tle.writeCount = MathUtil.decrementExactNotPastZero( tle.writeCount );\n-        if ( tle.isFree() )\n+        if (addLockRequest)\n         {\n-            ragManager.lockReleased( this, tx );\n-            if ( tle.hasNoRequests() )\n-            {\n-                txLockElementMap.remove( tx );\n-            }\n+          lockRequest = new LockRequest(tle, WRITE, currentThread);\n+          waitingThreadList.addFirst(lockRequest);\n         }\n \n-        // the threads in the waitingList cannot be currentThread\n-        // so we only have to wake other elements if writeCount is down to zero\n-        // (that is: If writeCount > 0 a waiting thread in the queue cannot be\n-        // the thread that holds the write locks because then it would never\n-        // have been put into wait mode)\n-        if ( totalWriteCount == 0 && waitingThreadList.size() > 0 )\n+        if (waitEvent == null)\n         {\n-            // wake elements in queue until a write lock is found or queue is\n-            // empty\n-            do\n-            {\n-                LockRequest lockRequest = waitingThreadList.removeLast();\n-                lockRequest.waitingThread.interrupt();\n-                if ( lockRequest.lockType == LockType.WRITE )\n-                {\n-                    break;\n-                }\n-            }\n-            while ( !waitingThreadList.isEmpty() );\n+          waitEvent = tracer.waitForLock(true, resource.type(), resource.resourceId());\n         }\n-    }\n+        addLockRequest = waitUninterruptedly(lockAcquisitionTimeBoundary);\n+        ragManager.stopWaitOn(this, tx);\n+      }\n \n-    synchronized int getWriteCount()\n+      if (!tle.isTerminated())\n+      {\n+        registerWriteLockAcquired(tx, tle);\n+        return true;\n+      } else\n+      {\n+        // in case if lock element was interrupted and it was never register before\n+        // we need to clean it from lock element map\n+        // if it was register before it will be cleaned up during standard lock release call\n+        if (tle.requests == 1 && tle.isFree())\n+        {\n+          txLockElementMap.remove(tx);\n+        }\n+        return false;\n+      }\n+    } finally\n     {\n-        return totalWriteCount;\n+      if (waitEvent != null)\n+      {\n+        waitEvent.close();\n+      }\n+      cleanupWaitingListRequests(lockRequest, tle, addLockRequest);\n+      // for cases when spurious wake up was the reason why we waked up, but also there\n+      // was an interruption as described at 17.2 just clearing interruption flag\n+      interrupted();\n+      // if deadlocked, remove marking so lock is removed when empty\n+      tle.decrementRequests();\n+      unmark();\n     }\n+  }\n \n-    synchronized int getReadCount()\n+  private boolean waitUninterruptedly(long lockAcquisitionTimeBoundary)\n+  {\n+    boolean addLockRequest;\n+    try\n     {\n-        return totalReadCount;\n-    }\n-\n-    synchronized int getWaitingThreadsCount()\n+      if (lockAcquisitionTimeoutMillis > 0)\n+      {\n+        assertNotExpired(lockAcquisitionTimeBoundary);\n+        wait(Math.abs(lockAcquisitionTimeBoundary - clock.millis()));\n+      } else\n+      {\n+        wait();\n+      }\n+      addLockRequest = false;\n+    } catch (InterruptedException e)\n     {\n-        return waitingThreadList.size();\n+      interrupted();\n+      addLockRequest = true;\n     }\n-\n-    public synchronized boolean logTo( Logger logger )\n+    return addLockRequest;\n+  }\n+\n+  // in case of spurious wake up, deadlock during spurious wake up, termination\n+  // when we already have request in a queue we need to clean it up\n+  private void cleanupWaitingListRequests(LockRequest lockRequest, TxLockElement lockElement,\n+                                          boolean addLockRequest)\n+  {\n+    if (lockRequest != null && (lockElement.isTerminated() || !addLockRequest))\n     {\n-        logger.log( \"Total lock count: readCount=\" + totalReadCount\n-                    + \" writeCount=\" + totalWriteCount + \" for \" + resource );\n+      waitingThreadList.remove(lockRequest);\n+    }\n+  }\n \n-        logger.log( \"Waiting list:\" );\n-        Iterator<LockRequest> wElements = waitingThreadList.iterator();\n-        while ( wElements.hasNext() )\n-        {\n-            LockRequest lockRequest = wElements.next();\n-            logger.log( \"[\" + lockRequest.waitingThread + \"(\"\n-                        + lockRequest.element.readCount + \"r,\" + lockRequest.element.writeCount + \"w),\"\n-                        + lockRequest.lockType + \"]\" );\n-            if ( wElements.hasNext() )\n-            {\n-                logger.log( \",\" );\n-            }\n-            else\n-            {\n-                logger.log( \"\" );\n-            }\n-        }\n+  synchronized boolean tryAcquireWriteLock(Object tx)\n+  {\n+    TxLockElement tle = getOrCreateLockElement(tx);\n \n-        logger.log( \"Locking transactions:\" );\n-        for ( TxLockElement tle : txLockElementMap.values() )\n-        {\n-            logger.log( \"\" + tle.tx + \"(\" + tle.readCount + \"r,\"\n-                        + tle.writeCount + \"w)\" );\n-        }\n-        return true;\n+    try\n+    {\n+      if (tle.isTerminated() || (totalWriteCount > tle.writeCount) || (totalReadCount > tle.readCount))\n+      {\n+        return false;\n+      }\n+\n+      registerWriteLockAcquired(tx, tle);\n+      return true;\n+    } finally\n+    {\n+      // if deadlocked, remove marking so lock is removed when empty\n+      unmark();\n     }\n-\n-    public synchronized String describe()\n+  }\n+\n+  /**\n+   * Releases the write lock held by the provided tx. If it is null then an\n+   * attempt to acquire the current transaction from the transaction manager\n+   * will be made. This is to make safe calling this method as an\n+   * <code>afterCompletion()</code> hook where the transaction context is not\n+   * necessarily available. If write count is zero and there are waiting\n+   * transactions in the queue they will be interrupted if they can acquire\n+   * the lock.\n+   */\n+  synchronized void releaseWriteLock(Object tx) throws LockNotFoundException\n+  {\n+    TxLockElement tle = getLockElement(tx);\n+\n+    if (tle.writeCount == 0)\n     {\n-        StringBuilder sb = new StringBuilder( this.toString() );\n-        sb.append( \" Total lock count: readCount=\" ).append( totalReadCount ).append( \" writeCount=\" )\n-          .append( totalWriteCount ).append( \" for \" ).append( resource ).append( \"\\n\" )\n-          .append( \"Waiting list:\" + \"\\n\" );\n-        Iterator<LockRequest> wElements = waitingThreadList.iterator();\n-        while ( wElements.hasNext() )\n-        {\n-            LockRequest lockRequest = wElements.next();\n-            sb.append( \"[\" ).append( lockRequest.waitingThread ).append( \"(\" ).append( lockRequest.element.readCount )\n-              .append( \"r,\" ).append( lockRequest.element.writeCount ).append( \"w),\" ).append( lockRequest.lockType )\n-              .append( \"]\\n\" );\n-            if ( wElements.hasNext() )\n-            {\n-                sb.append( \",\" );\n-            }\n-        }\n-\n-        sb.append( \"Locking transactions:\\n\" );\n-        for ( TxLockElement tle : txLockElementMap.values() )\n-        {\n-            sb.append( \"\" ).append( tle.tx ).append( \"(\" ).append( tle.readCount ).append( \"r,\" )\n-              .append( tle.writeCount ).append( \"w)\\n\" );\n-        }\n-        return sb.toString();\n+      throw new LockNotFoundException(\"\" + tx + \" don't have writeLock\");\n     }\n \n-    public synchronized long maxWaitTime()\n+    totalWriteCount = MathUtil.decrementExactNotPastZero(totalWriteCount);\n+    tle.writeCount = MathUtil.decrementExactNotPastZero(tle.writeCount);\n+    if (tle.isFree())\n     {\n-        long max = 0L;\n-        for ( LockRequest thread : waitingThreadList )\n-        {\n-            if ( thread.since < max )\n-            {\n-                max = thread.since;\n-            }\n-        }\n-        return System.currentTimeMillis() - max;\n+      ragManager.lockReleased(this, tx);\n+      if (tle.hasNoRequests())\n+      {\n+        txLockElementMap.remove(tx);\n+      }\n     }\n \n-    // for specified transaction object mark all lock elements as terminated\n-    // and interrupt all waiters\n-    synchronized void terminateLockRequestsForLockTransaction( Object lockTransaction )\n+    // the threads in the waitingList cannot be currentThread\n+    // so we only have to wake other elements if writeCount is down to zero\n+    // (that is: If writeCount > 0 a waiting thread in the queue cannot be\n+    // the thread that holds the write locks because then it would never\n+    // have been put into wait mode)\n+    if (totalWriteCount == 0 && waitingThreadList.size() > 0)\n     {\n-        TxLockElement lockElement = txLockElementMap.get( lockTransaction );\n-        if ( lockElement != null && !lockElement.isTerminated() )\n-        {\n-            lockElement.setTerminated( true );\n-            for ( LockRequest lockRequest : waitingThreadList )\n-            {\n-                if ( lockRequest.element.tx.equals( lockTransaction ) )\n-                {\n-                    lockRequest.waitingThread.interrupt();\n-                }\n-            }\n-        }\n+      // wake elements in queue until a write lock is found or queue is\n+      // empty\n+      do\n+      {\n+        LockRequest lockRequest = waitingThreadList.removeLast();\n+        lockRequest.waitingThread.interrupt();\n+        if (lockRequest.lockType == LockType.WRITE)\n+        {\n+          break;\n+        }\n+      }\n+      while (!waitingThreadList.isEmpty());\n     }\n-\n-    @Override\n-    public String toString()\n+  }\n+\n+  synchronized int getWriteCount()\n+  {\n+    return totalWriteCount;\n+  }\n+\n+  synchronized int getReadCount()\n+  {\n+    return totalReadCount;\n+  }\n+\n+  synchronized int getWaitingThreadsCount()\n+  {\n+    return waitingThreadList.size();\n+  }\n+\n+  public synchronized boolean logTo(Logger logger)\n+  {\n+    logger.log(\"Total lock count: readCount=\" + totalReadCount\n+        + \" writeCount=\" + totalWriteCount + \" for \" + resource);\n+\n+    logger.log(\"Waiting list:\");\n+    Iterator<LockRequest> wElements = waitingThreadList.iterator();\n+    while (wElements.hasNext())\n     {\n-        return \"RWLock[\" + resource + \", hash=\" + hashCode() + \"]\";\n+      LockRequest lockRequest = wElements.next();\n+      logger.log(\"[\" + lockRequest.waitingThread + \"(\"\n+          + lockRequest.element.readCount + \"r,\" + lockRequest.element.writeCount + \"w),\"\n+          + lockRequest.lockType + \"]\");\n+      if (wElements.hasNext())\n+      {\n+        logger.log(\",\");\n+      } else\n+      {\n+        logger.log(\"\");\n+      }\n     }\n \n-    private void registerReadLockAcquired( Object tx, TxLockElement tle )\n+    logger.log(\"Locking transactions:\");\n+    for (TxLockElement tle : txLockElementMap.values())\n     {\n-        registerLockAcquired( tx, tle );\n-        totalReadCount = Math.incrementExact( totalReadCount );\n-        tle.readCount = Math.incrementExact( tle.readCount );\n+      logger.log(\"\" + tle.tx + \"(\" + tle.readCount + \"r,\"\n+          + tle.writeCount + \"w)\");\n     }\n-\n-    private void registerWriteLockAcquired( Object tx, TxLockElement tle )\n+    return true;\n+  }\n+\n+  public synchronized String describe()\n+  {\n+    StringBuilder sb = new StringBuilder(this.toString());\n+    sb.append(\" Total lock count: readCount=\").append(totalReadCount).append(\" writeCount=\")\n+        .append(totalWriteCount).append(\" for \").append(resource).append(\"\\n\")\n+        .append(\"Waiting list:\" + \"\\n\");\n+    Iterator<LockRequest> wElements = waitingThreadList.iterator();\n+    while (wElements.hasNext())\n     {\n-        registerLockAcquired( tx, tle );\n-        totalWriteCount = Math.incrementExact( totalWriteCount );\n-        tle.writeCount = Math.incrementExact( tle.writeCount );\n+      LockRequest lockRequest = wElements.next();\n+      sb.append(\"[\").append(lockRequest.waitingThread).append(\"(\").append(lockRequest.element.readCount)\n+          .append(\"r,\").append(lockRequest.element.writeCount).append(\"w),\").append(lockRequest.lockType)\n+          .append(\"]\\n\");\n+      if (wElements.hasNext())\n+      {\n+        sb.append(\",\");\n+      }\n     }\n \n-    private void registerLockAcquired( Object tx, TxLockElement tle )\n+    sb.append(\"Locking transactions:\\n\");\n+    for (TxLockElement tle : txLockElementMap.values())\n     {\n-        if ( tle.isFree() )\n-        {\n-            ragManager.lockAcquired( this, tx );\n-        }\n+      sb.append(\"\").append(tle.tx).append(\"(\").append(tle.readCount).append(\"r,\")\n+          .append(tle.writeCount).append(\"w)\\n\");\n     }\n+    return sb.toString();\n+  }\n \n-    private TxLockElement getLockElement( Object tx )\n+  public synchronized long maxWaitTime()\n+  {\n+    long max = 0L;\n+    for (LockRequest thread : waitingThreadList)\n     {\n-        TxLockElement tle = txLockElementMap.get( tx );\n-        if ( tle == null )\n+      if (thread.since < max)\n+      {\n+        max = thread.since;\n+      }\n+    }\n+    return System.currentTimeMillis() - max;\n+  }\n+\n+  // for specified transaction object mark all lock elements as terminated\n+  // and interrupt all waiters\n+  synchronized void terminateLockRequestsForLockTransaction(Object lockTransaction)\n+  {\n+    TxLockElement lockElement = txLockElementMap.get(lockTransaction);\n+    if (lockElement != null && !lockElement.isTerminated())\n+    {\n+      lockElement.setTerminated(true);\n+      for (LockRequest lockRequest : waitingThreadList)\n+      {\n+        if (lockRequest.element.tx.equals(lockTransaction))\n         {\n-            throw new LockNotFoundException( \"No transaction lock element found for \" + tx );\n+          lockRequest.waitingThread.interrupt();\n         }\n-        return tle;\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"RWLock[\" + resource + \", hash=\" + hashCode() + \"]\";\n+  }\n+\n+  private void registerReadLockAcquired(Object tx, TxLockElement tle)\n+  {\n+    registerLockAcquired(tx, tle);\n+    totalReadCount = Math.incrementExact(totalReadCount);\n+    tle.readCount = Math.incrementExact(tle.readCount);\n+  }\n+\n+  private void registerWriteLockAcquired(Object tx, TxLockElement tle)\n+  {\n+    registerLockAcquired(tx, tle);\n+    totalWriteCount = Math.incrementExact(totalWriteCount);\n+    tle.writeCount = Math.incrementExact(tle.writeCount);\n+  }\n+\n+  private void registerLockAcquired(Object tx, TxLockElement tle)\n+  {\n+    if (tle.isFree())\n+    {\n+      ragManager.lockAcquired(this, tx);\n     }\n+  }\n \n-    private void assertTransaction( Object tx )\n+  private TxLockElement getLockElement(Object tx)\n+  {\n+    TxLockElement tle = txLockElementMap.get(tx);\n+    if (tle == null)\n     {\n-        if ( tx == null )\n-        {\n-            throw new IllegalArgumentException();\n-        }\n+      throw new LockNotFoundException(\"No transaction lock element found for \" + tx);\n     }\n+    return tle;\n+  }\n \n-    private TxLockElement getOrCreateLockElement( Object tx )\n+  private void assertTransaction(Object tx)\n+  {\n+    if (tx == null)\n     {\n-        assertTransaction( tx );\n-        TxLockElement tle = txLockElementMap.get( tx );\n-        if ( tle == null )\n-        {\n-            txLockElementMap.put( tx, tle = new TxLockElement( tx ) );\n-        }\n-        return tle;\n+      throw new IllegalArgumentException();\n     }\n+  }\n \n-    private void assertNotExpired( long timeBoundary )\n+  private TxLockElement getOrCreateLockElement(Object tx)\n+  {\n+    assertTransaction(tx);\n+    TxLockElement tle = txLockElementMap.get(tx);\n+    if (tle == null)\n     {\n-        if ( lockAcquisitionTimeoutMillis > 0 )\n-        {\n-            if ( timeBoundary < clock.millis() )\n-            {\n-                throw new LockAcquisitionTimeoutException( resource.type(), resource.resourceId(),\n-                        lockAcquisitionTimeoutMillis );\n-            }\n-        }\n+      txLockElementMap.put(tx, tle = new TxLockElement(tx));\n     }\n+    return tle;\n+  }\n \n-    synchronized Object getTxLockElementCount()\n+  private void assertNotExpired(long timeBoundary)\n+  {\n+    if (lockAcquisitionTimeoutMillis > 0)\n     {\n-        return txLockElementMap.size();\n+      if (timeBoundary < clock.millis())\n+      {\n+        throw new LockAcquisitionTimeoutException(resource.type(), resource.resourceId(),\n+            lockAcquisitionTimeoutMillis);\n+      }\n     }\n+  }\n+\n+  synchronized Object getTxLockElementCount()\n+  {\n+    return txLockElementMap.size();\n+  }\n }\n",
            "diff_size": 892
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "174",
                    "column": "22",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "205",
                    "column": "61",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "264",
                    "column": "57",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "390",
                    "column": "61",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "390",
                    "column": "95",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "485",
                    "column": "57",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "485",
                    "column": "94",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "573",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "595",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "600",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 238).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3943/RWLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3943/RWLock.java\nindex 4c7af38c96f..8b995edaea2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3943/RWLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3943/RWLock.java\n@@ -69,7 +69,7 @@ class RWLock\n {\n     private final LockResource resource; // the resource this RWLock locks\n     private final LinkedList<LockRequest> waitingThreadList = new LinkedList<>();\n-    private final Map<Object, TxLockElement> txLockElementMap = new HashMap<>();\n+    private final Map<Object,TxLockElement> txLockElementMap = new HashMap<>();\n     private final RagManager ragManager;\n     private final Clock clock;\n     private final long lockAcquisitionTimeoutMillis;\n@@ -171,7 +171,7 @@ class RWLock\n \n     synchronized boolean isMarked()\n     {\n-        return marked > 0;\n+        return marked> 0;\n     }\n \n     /**\n@@ -192,8 +192,7 @@ class RWLock\n     synchronized boolean acquireReadLock( LockTracer tracer, Object tx ) throws DeadlockDetectedException\n     {\n         TxLockElement tle = getOrCreateLockElement( tx );\n-\n-        LockRequest lockRequest = null;\n+LockRequest lockRequest = null;\n         LockWaitEvent waitEvent = null;\n         // used to track do we need to add lock request to a waiting queue or we still have it there\n         boolean addLockRequest = true;\n@@ -203,12 +202,11 @@ class RWLock\n             Thread currentThread = currentThread();\n \n             long lockAcquisitionTimeBoundary = clock.millis() + lockAcquisitionTimeoutMillis;\n-            while ( !tle.isTerminated() && (totalWriteCount > tle.writeCount) )\n+            while ( !tle.isTerminated() && ( totalWriteCount> tle.writeCount) )\n             {\n                 assertNotExpired( lockAcquisitionTimeBoundary );\n                 ragManager.checkWaitOn( this, tx );\n-\n-                if ( addLockRequest )\n+if ( addLockRequest )\n                 {\n                     lockRequest = new LockRequest( tle, READ, currentThread );\n                     waitingThreadList.addFirst( lockRequest );\n@@ -218,7 +216,8 @@ class RWLock\n                 {\n                     waitEvent = tracer.waitForLock( false, resource.type(), resource.resourceId() );\n                 }\n-                addLockRequest = waitUninterruptedly( lockAcquisitionTimeBoundary );\n+\n+addLockRequest = waitUninterruptedly( lockAcquisitionTimeBoundary );\n                 ragManager.stopWaitOn( this, tx );\n             }\n \n@@ -245,7 +244,8 @@ class RWLock\n             {\n                 waitEvent.close();\n             }\n-            cleanupWaitingListRequests( lockRequest, tle, addLockRequest );\n+\n+cleanupWaitingListRequests( lockRequest, tle, addLockRequest );\n             // for cases when spurious wake up was the reason why we waked up, but also there\n             // was an interruption as described at 17.2 just clearing interruption flag\n             interrupted();\n@@ -261,7 +261,7 @@ class RWLock\n \n         try\n         {\n-            if ( tle.isTerminated() || (totalWriteCount > tle.writeCount) )\n+            if ( tle.isTerminated() || ( totalWriteCount> tle.writeCount) )\n             {\n                 return false;\n             }\n@@ -288,8 +288,7 @@ class RWLock\n     synchronized void releaseReadLock( Object tx ) throws LockNotFoundException\n     {\n         TxLockElement tle = getLockElement( tx );\n-\n-        if ( tle.readCount == 0 )\n+if ( tle.readCount == 0 )\n         {\n             throw new LockNotFoundException( \"\" + tx + \" don't have readLock\" );\n         }\n@@ -307,8 +306,7 @@ class RWLock\n         if ( !waitingThreadList.isEmpty() )\n         {\n             LockRequest lockRequest = waitingThreadList.getLast();\n-\n-            if ( lockRequest.lockType == LockType.WRITE )\n+if ( lockRequest.lockType == LockType.WRITE )\n             {\n                 // this one is tricky...\n                 // if readCount > 0 lockRequest either have to find a waiting read lock\n@@ -324,9 +322,8 @@ class RWLock\n                 }\n                 else\n                 {\n-                    ListIterator<LockRequest> listItr = waitingThreadList.listIterator(\n-                            waitingThreadList.lastIndexOf( lockRequest ) );\n-                    // hm am I doing the first all over again?\n+                    ListIterator<LockRequest> listItr = waitingThreadList.listIterator( waitingThreadList.lastIndexOf( lockRequest ) );\n+    // hm am I doing the first all over again?\n                     // think I am if cursor is at lastIndex + 0.5 oh well...\n                     while ( listItr.hasPrevious() )\n                     {\n@@ -380,8 +377,7 @@ class RWLock\n     synchronized boolean acquireWriteLock( LockTracer tracer, Object tx ) throws DeadlockDetectedException\n     {\n         TxLockElement tle = getOrCreateLockElement( tx );\n-\n-        LockRequest lockRequest = null;\n+LockRequest lockRequest = null;\n         LockWaitEvent waitEvent = null;\n         // used to track do we need to add lock request to a waiting queue or we still have it there\n         boolean addLockRequest = true;\n@@ -391,12 +387,11 @@ class RWLock\n             Thread currentThread = currentThread();\n \n             long lockAcquisitionTimeBoundary = clock.millis() + lockAcquisitionTimeoutMillis;\n-            while ( !tle.isTerminated() && (totalWriteCount > tle.writeCount || totalReadCount > tle.readCount) )\n+            while ( !tle.isTerminated() && ( totalWriteCount> tle.writeCount || totalReadCount> tle.readCount) )\n             {\n                 assertNotExpired( lockAcquisitionTimeBoundary );\n                 ragManager.checkWaitOn( this, tx );\n-\n-                if ( addLockRequest )\n+if ( addLockRequest )\n                 {\n                     lockRequest = new LockRequest( tle, WRITE, currentThread );\n                     waitingThreadList.addFirst( lockRequest );\n@@ -406,7 +401,8 @@ class RWLock\n                 {\n                     waitEvent = tracer.waitForLock( true, resource.type(), resource.resourceId() );\n                 }\n-                addLockRequest = waitUninterruptedly( lockAcquisitionTimeBoundary );\n+\n+addLockRequest = waitUninterruptedly( lockAcquisitionTimeBoundary );\n                 ragManager.stopWaitOn( this, tx );\n             }\n \n@@ -433,7 +429,8 @@ class RWLock\n             {\n                 waitEvent.close();\n             }\n-            cleanupWaitingListRequests( lockRequest, tle, addLockRequest );\n+\n+cleanupWaitingListRequests( lockRequest, tle, addLockRequest );\n             // for cases when spurious wake up was the reason why we waked up, but also there\n             // was an interruption as described at 17.2 just clearing interruption flag\n             interrupted();\n@@ -457,21 +454,22 @@ class RWLock\n             {\n                 wait();\n             }\n-            addLockRequest = false;\n+\n+addLockRequest = false;\n         }\n         catch ( InterruptedException e )\n         {\n             interrupted();\n             addLockRequest = true;\n         }\n-        return addLockRequest;\n+\n+return addLockRequest;\n     }\n \n     // in case of spurious wake up, deadlock during spurious wake up, termination\n     // when we already have request in a queue we need to clean it up\n-    private void cleanupWaitingListRequests( LockRequest lockRequest, TxLockElement lockElement,\n-                                             boolean addLockRequest )\n-    {\n+    private void cleanupWaitingListRequests( LockRequest lockRequest, TxLockElement lockElement, boolean addLockRequest )\n+{\n         if ( lockRequest != null && (lockElement.isTerminated() || !addLockRequest) )\n         {\n             waitingThreadList.remove( lockRequest );\n@@ -484,7 +482,7 @@ class RWLock\n \n         try\n         {\n-            if ( tle.isTerminated() || (totalWriteCount > tle.writeCount) || (totalReadCount > tle.readCount) )\n+            if ( tle.isTerminated() || ( totalWriteCount> tle.writeCount) || ( totalReadCount> tle.readCount) )\n             {\n                 return false;\n             }\n@@ -511,8 +509,7 @@ class RWLock\n     synchronized void releaseWriteLock( Object tx ) throws LockNotFoundException\n     {\n         TxLockElement tle = getLockElement( tx );\n-\n-        if ( tle.writeCount == 0 )\n+if ( tle.writeCount == 0 )\n         {\n             throw new LockNotFoundException( \"\" + tx + \" don't have writeLock\" );\n         }\n@@ -567,18 +564,14 @@ class RWLock\n \n     public synchronized boolean logTo( Logger logger )\n     {\n-        logger.log( \"Total lock count: readCount=\" + totalReadCount\n-                    + \" writeCount=\" + totalWriteCount + \" for \" + resource );\n-\n-        logger.log( \"Waiting list:\" );\n+        logger.log( \"Total lock count: readCount=\" + totalReadCount + \" writeCount=\" + totalWriteCount + \" for \" + resource );\n+logger.log( \"Waiting list:\" );\n         Iterator<LockRequest> wElements = waitingThreadList.iterator();\n         while ( wElements.hasNext() )\n         {\n             LockRequest lockRequest = wElements.next();\n-            logger.log( \"[\" + lockRequest.waitingThread + \"(\"\n-                        + lockRequest.element.readCount + \"r,\" + lockRequest.element.writeCount + \"w),\"\n-                        + lockRequest.lockType + \"]\" );\n-            if ( wElements.hasNext() )\n+            logger.log( \"[\" + lockRequest.waitingThread + \"(\" + lockRequest.element.readCount + \"r,\" + lockRequest.element.writeCount + \"w),\" + lockRequest.lockType + \"]\" );\n+if ( wElements.hasNext() )\n             {\n                 logger.log( \",\" );\n             }\n@@ -591,26 +584,21 @@ class RWLock\n         logger.log( \"Locking transactions:\" );\n         for ( TxLockElement tle : txLockElementMap.values() )\n         {\n-            logger.log( \"\" + tle.tx + \"(\" + tle.readCount + \"r,\"\n-                        + tle.writeCount + \"w)\" );\n-        }\n+            logger.log( \"\" + tle.tx + \"(\" + tle.readCount + \"r,\" + tle.writeCount + \"w)\" );\n+    }\n         return true;\n     }\n \n     public synchronized String describe()\n     {\n         StringBuilder sb = new StringBuilder( this.toString() );\n-        sb.append( \" Total lock count: readCount=\" ).append( totalReadCount ).append( \" writeCount=\" )\n-          .append( totalWriteCount ).append( \" for \" ).append( resource ).append( \"\\n\" )\n-          .append( \"Waiting list:\" + \"\\n\" );\n-        Iterator<LockRequest> wElements = waitingThreadList.iterator();\n+        sb.append( \" Total lock count: readCount=\" ).append( totalReadCount ).append( \" writeCount=\" ).append( totalWriteCount ).append( \" for \" ).append( resource ).append( \"\\n\" ).append( \"Waiting list:\" + \"\\n\" );\n+Iterator<LockRequest> wElements = waitingThreadList.iterator();\n         while ( wElements.hasNext() )\n         {\n             LockRequest lockRequest = wElements.next();\n-            sb.append( \"[\" ).append( lockRequest.waitingThread ).append( \"(\" ).append( lockRequest.element.readCount )\n-              .append( \"r,\" ).append( lockRequest.element.writeCount ).append( \"w),\" ).append( lockRequest.lockType )\n-              .append( \"]\\n\" );\n-            if ( wElements.hasNext() )\n+            sb.append( \"[\" ).append( lockRequest.waitingThread ).append( \"(\" ).append( lockRequest.element.readCount ).append( \"r,\" ).append( lockRequest.element.writeCount ).append( \"w),\" ).append( lockRequest.lockType ).append( \"]\\n\" );\n+if ( wElements.hasNext() )\n             {\n                 sb.append( \",\" );\n             }\n@@ -619,9 +607,8 @@ class RWLock\n         sb.append( \"Locking transactions:\\n\" );\n         for ( TxLockElement tle : txLockElementMap.values() )\n         {\n-            sb.append( \"\" ).append( tle.tx ).append( \"(\" ).append( tle.readCount ).append( \"r,\" )\n-              .append( tle.writeCount ).append( \"w)\\n\" );\n-        }\n+            sb.append( \"\" ).append( tle.tx ).append( \"(\" ).append( tle.readCount ).append( \"r,\" ).append( tle.writeCount ).append( \"w)\\n\" );\n+    }\n         return sb.toString();\n     }\n \n@@ -691,7 +678,8 @@ class RWLock\n         {\n             throw new LockNotFoundException( \"No transaction lock element found for \" + tx );\n         }\n-        return tle;\n+\n+return tle;\n     }\n \n     private void assertTransaction( Object tx )\n@@ -710,7 +698,8 @@ class RWLock\n         {\n             txLockElementMap.put( tx, tle = new TxLockElement( tx ) );\n         }\n-        return tle;\n+\n+return tle;\n     }\n \n     private void assertNotExpired( long timeBoundary )\n@@ -721,7 +710,7 @@ class RWLock\n             {\n                 throw new LockAcquisitionTimeoutException( resource.type(), resource.resourceId(),\n                         lockAcquisitionTimeoutMillis );\n-            }\n+    }\n         }\n     }\n \n@@ -729,4 +718,4 @@ class RWLock\n     {\n         return txLockElementMap.size();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}