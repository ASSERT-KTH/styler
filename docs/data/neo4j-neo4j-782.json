{
    "project_name": "neo4j-neo4j",
    "error_id": "782",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/782/CompilationFailureException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/782/CompilationFailureException.java\nindex 8295b60ef68..7bbc1e9e1b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/782/CompilationFailureException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/782/CompilationFailureException.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.io.IOException;\n@@ -34,99 +35,96 @@ public class CompilationFailureException extends Exception\n {\n     private final List<? extends Diagnostic<?>> diagnostics;\n \n-    public CompilationFailureException( List<? extends Diagnostic<?>> diagnostics )\n+    public CompilationFailureException(List<? extends Diagnostic<?>> diagnostics)\n     {\n-        super( String.format( \"Compilation failed with %d reported issues.%s\",\n-                diagnostics.size(), source( diagnostics ) ) );\n+        super(String.format(\"Compilation failed with %d reported issues.%s\",\n+          diagnostics.size(), source(diagnostics)));\n         this.diagnostics = diagnostics;\n     }\n \n     @Override\n     public String toString()\n     {\n-        StringWriter result = new StringWriter().append( super.toString() );\n-        for ( Diagnostic<?> diagnostic : diagnostics )\n+        StringWriter result = new StringWriter().append(super.toString());\n+        for (Diagnostic<?> diagnostic : diagnostics)\n         {\n-            format( result.append( \"\\n\\t\\t\" ), diagnostic );\n+            format(result.append(\"\\n\\t\\t\"), diagnostic);\n         }\n         return result.toString();\n     }\n \n-    private static String source( List<? extends Diagnostic<?>> diagnostics )\n+    private static String source(List<? extends Diagnostic<?>> diagnostics)\n     {\n         Set<JavaFileObject> sources = null;\n-        for ( Diagnostic<?> diagnostic : diagnostics )\n+        for (Diagnostic<?> diagnostic : diagnostics)\n         {\n             Object source = diagnostic.getSource();\n-            if ( source instanceof JavaFileObject )\n+            if (source instanceof JavaFileObject)\n             {\n                 JavaFileObject file = (JavaFileObject) source;\n-                if ( file.getKind() == JavaFileObject.Kind.SOURCE )\n+                if (file.getKind() == JavaFileObject.Kind.SOURCE)\n                 {\n-                    if ( sources == null )\n+                    if (sources == null)\n                     {\n-                        sources = Collections.newSetFromMap( new IdentityHashMap<>() );\n+                        sources = Collections.newSetFromMap(new IdentityHashMap<>());\n                     }\n-                    sources.add( file );\n+                    sources.add(file);\n                 }\n             }\n         }\n-        if ( sources == null )\n+        if (sources == null)\n         {\n             return \"\";\n         }\n         StringBuilder result = new StringBuilder();\n-        for ( JavaFileObject source : sources )\n+        for (JavaFileObject source : sources)\n         {\n             int pos = result.length();\n-            result.append( \"\\nSource file \" ).append( source.getName() ).append( \":\\n\" );\n+            result.append(\"\\nSource file \").append(source.getName()).append(\":\\n\");\n             try\n             {\n-                CharSequence content = source.getCharContent( true );\n-                result.append( String.format( \"%4d: \", 1 ) );\n-                for ( int line = 1, i = 0; i < content.length(); i++ )\n+                CharSequence content = source.getCharContent(true);\n+                result.append(String.format(\"%4d: \", 1));\n+                for (int line = 1, i = 0; i < content.length(); i++)\n                 {\n-                    char c = content.charAt( i );\n-                    result.append( c );\n-                    if ( c == '\\n' )\n+                    char c = content.charAt(i);\n+                    result.append(c);\n+                    if (c == '\\n')\n                     {\n-                        result.append( String.format( \"%4d: \", ++line ) );\n+                        result.append(String.format(\"%4d: \", ++line));\n                     }\n                 }\n-            }\n-            catch ( IOException e )\n+            } catch (IOException e)\n             {\n-                result.setLength( pos );\n+                result.setLength(pos);\n             }\n         }\n         return result.toString();\n     }\n \n-    public static void format( Appendable result, Diagnostic<?> diagnostic )\n+    public static void format(Appendable result, Diagnostic<?> diagnostic)\n     {\n         try\n         {\n             Object source = diagnostic.getSource();\n-            if ( source != null )\n+            if (source != null)\n             {\n-                result.append( diagnostic.getKind().name() )\n-                        .append( \" on line \" ).append( Long.toString( diagnostic.getLineNumber() ) )\n-                        .append( \" in \" ).append( source.toString() )\n-                        .append( \": \" ).append( diagnostic.getMessage( null ) );\n-            }\n-            else\n+                result.append(diagnostic.getKind().name())\n+                  .append(\" on line \").append(Long.toString(diagnostic.getLineNumber()))\n+                  .append(\" in \").append(source.toString())\n+                  .append(\": \").append(diagnostic.getMessage(null));\n+            } else\n             {\n-                result.append( diagnostic.getMessage( null ) );\n+                result.append(diagnostic.getMessage(null));\n             }\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new RuntimeException( \"Failed to append.\", e );\n+            throw new RuntimeException(\"Failed to append.\", e);\n         }\n     }\n \n     public List<Diagnostic<?>> getDiagnostics()\n     {\n-        return unmodifiableList( diagnostics );\n+        return unmodifiableList(diagnostics);\n     }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}