{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "864",
    "information": {
        "errors": [
            {
                "line": "51",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * <p>Implementation of the pageStreaming callable.\n */\nclass PageStreamingCallable<RequestT, ResponseT, ResourceT> extends ApiCallable<RequestT, ResourceT> {\n\n  private final ApiCallable<RequestT, ResponseT> callable;\n  private final PageDescriptor<RequestT, ResponseT, ResourceT> pageDescriptor;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/864/PageStreamingCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/864/PageStreamingCallable.java\nindex d864ec4fc56..8926e21f2e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/864/PageStreamingCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/864/PageStreamingCallable.java\n@@ -48,19 +48,21 @@ import javax.annotation.Nullable;\n  *\n  * <p>Implementation of the pageStreaming callable.\n  */\n-class PageStreamingCallable<RequestT, ResponseT, ResourceT> extends ApiCallable<RequestT, ResourceT> {\n+class PageStreamingCallable<RequestT, ResponseT, ResourceT>\n+    extends ApiCallable<RequestT, ResourceT> {\n \n   private final ApiCallable<RequestT, ResponseT> callable;\n   private final PageDescriptor<RequestT, ResponseT, ResourceT> pageDescriptor;\n \n \n   PageStreamingCallable(ApiCallable<RequestT, ResponseT> callable,\n-      PageDescriptor<RequestT, ResponseT, ResourceT> pageDescriptor) {\n+                        PageDescriptor<RequestT, ResponseT, ResourceT> pageDescriptor) {\n     this.callable = Preconditions.checkNotNull(callable);\n     this.pageDescriptor = Preconditions.checkNotNull(pageDescriptor);\n   }\n \n-  @Override public String toString() {\n+  @Override\n+  public String toString() {\n     return String.format(\"pageStreaming(%s)\", callable.toString());\n   }\n \n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/864/PageStreamingCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/864/PageStreamingCallable.java\nindex d864ec4fc56..b9f0de4be4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/864/PageStreamingCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/864/PageStreamingCallable.java\n@@ -181,5 +181,4 @@ class PageStreamingCallable<RequestT, ResponseT, ResourceT> extends ApiCallable<\n       }\n     }\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/864/PageStreamingCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/864/PageStreamingCallable.java\nindex d864ec4fc56..8cc24551151 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/864/PageStreamingCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/864/PageStreamingCallable.java\n@@ -32,14 +32,11 @@\n package io.gapi.gax.grpc;\n \n import com.google.common.base.Preconditions;\n-\n import io.grpc.Channel;\n import io.grpc.ClientCall;\n import io.grpc.Metadata;\n import io.grpc.Status;\n-\n import java.util.concurrent.Semaphore;\n-\n import javax.annotation.Nullable;\n \n /**\n@@ -48,19 +45,20 @@ import javax.annotation.Nullable;\n  *\n  * <p>Implementation of the pageStreaming callable.\n  */\n+\n+\n class PageStreamingCallable<RequestT, ResponseT, ResourceT> extends ApiCallable<RequestT, ResourceT> {\n \n   private final ApiCallable<RequestT, ResponseT> callable;\n   private final PageDescriptor<RequestT, ResponseT, ResourceT> pageDescriptor;\n \n-\n-  PageStreamingCallable(ApiCallable<RequestT, ResponseT> callable,\n-      PageDescriptor<RequestT, ResponseT, ResourceT> pageDescriptor) {\n+  PageStreamingCallable(ApiCallable<RequestT, ResponseT> callable, PageDescriptor<RequestT, ResponseT, ResourceT> pageDescriptor) {\n     this.callable = Preconditions.checkNotNull(callable);\n     this.pageDescriptor = Preconditions.checkNotNull(pageDescriptor);\n   }\n \n-  @Override public String toString() {\n+  @Override\n+  public String toString() {\n     return String.format(\"pageStreaming(%s)\", callable.toString());\n   }\n \n@@ -85,6 +83,7 @@ class PageStreamingCallable<RequestT, ResponseT, ResourceT> extends ApiCallable<\n    * the time the caller half-closes, all future page calls will be triggered from onMessage() as\n    * well. This avoids thread safety issues, assuming the ClientCall concurrency contract.\n    */\n+\n   private class PageStreamingCall extends CompoundClientCall<RequestT, ResourceT, ResponseT> {\n \n     private final Channel channel;\n@@ -181,5 +180,4 @@ class PageStreamingCallable<RequestT, ResponseT, ResourceT> extends ApiCallable<\n       }\n     }\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}