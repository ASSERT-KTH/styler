{
    "project_name": "neo4j-neo4j",
    "error_id": "1900",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "277",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "5",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "317",
                    "column": "44",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1900/OutputFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1900/OutputFormatter.java\nindex 55be84408ec..71f1367491c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1900/OutputFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1900/OutputFormatter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.prettyprint;\n \n import java.util.ArrayList;\n@@ -52,263 +53,260 @@ public interface OutputFormatter\n     String COLON_SEPARATOR = \": \";\n     String COLON = \":\";\n     String SPACE = \" \";\n-    String NEWLINE = System.getProperty( \"line.separator\" );\n-    List<String> INFO_SUMMARY = asList( \"Version\", \"Planner\", \"Runtime\" );\n+    String NEWLINE = System.getProperty(\"line.separator\");\n+    List<String> INFO_SUMMARY = asList(\"Version\", \"Planner\", \"Runtime\");\n \n     @Nonnull\n-    static String collectNodeLabels( @Nonnull Node node )\n+    static String collectNodeLabels(@Nonnull Node node)\n     {\n         StringBuilder sb = new StringBuilder();\n-        node.labels().forEach( label -> sb.append( COLON ).append( escape( label ) ) );\n+        node.labels().forEach(label -> sb.append(COLON).append(escape(label)));\n         return sb.toString();\n     }\n \n     @Nonnull\n-    static String listAsString( @Nonnull List<String> list )\n+    static String listAsString(@Nonnull List<String> list)\n     {\n-        return list.stream().collect( Collectors.joining( COMMA_SEPARATOR, \"[\", \"]\" ) );\n+        return list.stream().collect(Collectors.joining(COMMA_SEPARATOR, \"[\", \"]\"));\n     }\n \n     @Nonnull\n-    static String mapAsStringWithEmpty( @Nonnull Map<String, Object> map )\n+    static String mapAsStringWithEmpty(@Nonnull Map<String, Object> map)\n     {\n-        return map.isEmpty() ? \"\" : mapAsString( map );\n+        return map.isEmpty() ? \"\" : mapAsString(map);\n     }\n \n     @Nonnull\n-    static String mapAsString( @Nonnull Map<String, Object> map )\n+    static String mapAsString(@Nonnull Map<String, Object> map)\n     {\n         return map.entrySet().stream()\n-                  .map( e -> escape( e.getKey() ) + COLON_SEPARATOR + e.getValue() )\n-                  .collect( Collectors.joining( COMMA_SEPARATOR, \"{\", \"}\" ) );\n+          .map(e -> escape(e.getKey()) + COLON_SEPARATOR + e.getValue())\n+          .collect(Collectors.joining(COMMA_SEPARATOR, \"{\", \"}\"));\n     }\n \n     @Nonnull\n-    static String joinWithSpace( @Nonnull List<String> strings )\n+    static String joinWithSpace(@Nonnull List<String> strings)\n     {\n-        return strings.stream().filter( OutputFormatter::isNotBlank ).collect( Collectors.joining( SPACE ) );\n+        return strings.stream().filter(OutputFormatter::isNotBlank).collect(Collectors.joining(SPACE));\n     }\n \n     @Nonnull\n-    static String joinNonBlanks( @Nonnull String delim, @Nonnull List<String> strings )\n+    static String joinNonBlanks(@Nonnull String delim, @Nonnull List<String> strings)\n     {\n-        return strings.stream().filter( OutputFormatter::isNotBlank ).collect( Collectors.joining( delim ) );\n+        return strings.stream().filter(OutputFormatter::isNotBlank).collect(Collectors.joining(delim));\n     }\n \n-    static boolean isNotBlank( String string )\n+    static boolean isNotBlank(String string)\n     {\n         return string != null && !string.trim().isEmpty();\n     }\n \n     @Nonnull\n-    static String repeat( char c, int times )\n+    static String repeat(char c, int times)\n     {\n         char[] chars = new char[times];\n-        Arrays.fill( chars, c );\n-        return String.valueOf( chars );\n+        Arrays.fill(chars, c);\n+        return String.valueOf(chars);\n     }\n \n     @Nonnull\n-    static String repeat( @Nonnull String c, int times )\n+    static String repeat(@Nonnull String c, int times)\n     {\n-        StringBuilder sb = new StringBuilder( times * c.length() );\n-        for ( int i = 0; i < times; i++ )\n+        StringBuilder sb = new StringBuilder(times * c.length());\n+        for (int i = 0; i < times; i++)\n         {\n-            sb.append( c );\n+            sb.append(c);\n         }\n         return sb.toString();\n     }\n \n     @Nonnull\n-    static String rightPad( @Nonnull String str, int width )\n+    static String rightPad(@Nonnull String str, int width)\n     {\n-        return rightPad( str, width, ' ' );\n+        return rightPad(str, width, ' ');\n     }\n \n     @Nonnull\n-    static String rightPad( @Nonnull String str, int width, char c )\n+    static String rightPad(@Nonnull String str, int width, char c)\n     {\n         int actualSize = str.length();\n-        if ( actualSize > width )\n+        if (actualSize > width)\n         {\n-            return str.substring( 0, width );\n-        }\n-        else if ( actualSize < width )\n+            return str.substring(0, width);\n+        } else if (actualSize < width)\n         {\n-            return str + repeat( c, width - actualSize );\n-        }\n-        else\n+            return str + repeat(c, width - actualSize);\n+        } else\n         {\n             return str;\n         }\n     }\n \n     @Nonnull\n-    static Map<String, Value> info( @Nonnull ResultSummary summary )\n+    static Map<String, Value> info(@Nonnull ResultSummary summary)\n     {\n         Map<String, Value> result = new LinkedHashMap<>();\n-        if ( !summary.hasPlan() )\n+        if (!summary.hasPlan())\n         {\n             return result;\n         }\n \n         Plan plan = summary.plan();\n-        result.put( \"Plan\", Values.value( summary.hasProfile() ? \"PROFILE\" : \"EXPLAIN\" ) );\n-        result.put( \"Statement\", Values.value( summary.queryType().name() ) );\n+        result.put(\"Plan\", Values.value(summary.hasProfile() ? \"PROFILE\" : \"EXPLAIN\"));\n+        result.put(\"Statement\", Values.value(summary.queryType().name()));\n         Map<String, Value> arguments = plan.arguments();\n-        Value emptyString = Values.value( \"\" );\n-        Value questionMark = Values.value( \"?\" );\n+        Value emptyString = Values.value(\"\");\n+        Value questionMark = Values.value(\"?\");\n \n-        for ( String key : INFO_SUMMARY )\n+        for (String key : INFO_SUMMARY)\n         {\n-            Value value = arguments.getOrDefault( key, arguments.getOrDefault( key.toLowerCase(), emptyString ) );\n-            result.put( key, value );\n+            Value value = arguments.getOrDefault(key, arguments.getOrDefault(key.toLowerCase(), emptyString));\n+            result.put(key, value);\n         }\n-        result.put( \"Time\", Values.value( summary.resultAvailableAfter( MILLISECONDS ) + summary.resultConsumedAfter( MILLISECONDS ) ) );\n-        if ( summary.hasProfile() )\n+        result.put(\"Time\", Values.value(summary.resultAvailableAfter(MILLISECONDS) + summary.resultConsumedAfter(MILLISECONDS)));\n+        if (summary.hasProfile())\n         {\n-            result.put( \"DbHits\", Values.value( collectHits( summary.profile() ) ) );\n+            result.put(\"DbHits\", Values.value(collectHits(summary.profile())));\n         }\n-        if ( summary.hasProfile() )\n+        if (summary.hasProfile())\n         {\n-            result.put( \"Rows\", Values.value( summary.profile().records() ) );\n+            result.put(\"Rows\", Values.value(summary.profile().records()));\n         }\n-        if ( summary.hasProfile() )\n+        if (summary.hasProfile())\n         {\n-            result.put( \"Memory (Bytes)\", arguments.getOrDefault( \"GlobalMemory\", questionMark ) );\n+            result.put(\"Memory (Bytes)\", arguments.getOrDefault(\"GlobalMemory\", questionMark));\n         }\n         return result;\n     }\n \n-    static long collectHits( @Nonnull ProfiledPlan operator )\n+    static long collectHits(@Nonnull ProfiledPlan operator)\n     {\n         long hits = operator.dbHits();\n-        hits = operator.children().stream().map( OutputFormatter::collectHits ).reduce( hits, Long::sum );\n+        hits = operator.children().stream().map(OutputFormatter::collectHits).reduce(hits, Long::sum);\n         return hits;\n     }\n \n-    int formatAndCount( @Nonnull BoltResult result, @Nonnull LinePrinter linePrinter );\n+    int formatAndCount(@Nonnull BoltResult result, @Nonnull LinePrinter linePrinter);\n \n     @Nonnull\n-    default String formatValue( final Value value )\n+    default String formatValue(final Value value)\n     {\n-        if ( value == null )\n+        if (value == null)\n         {\n             return \"\";\n         }\n         TypeRepresentation type = (TypeRepresentation) value.type();\n-        switch ( type.constructor() )\n+        switch (type.constructor())\n         {\n-        case LIST:\n-            return listAsString( value.asList( this::formatValue ) );\n-        case MAP:\n-            return mapAsString( value.asMap( this::formatValue ) );\n-        case NODE:\n-            return nodeAsString( value.asNode() );\n-        case RELATIONSHIP:\n-            return relationshipAsString( value.asRelationship() );\n-        case PATH:\n-            return pathAsString( value.asPath() );\n-        case POINT:\n-            return pointAsString( value.asPoint() );\n-        case DURATION:\n-            return DurationValue.parse( value.toString() ).prettyPrint();\n-        case ANY:\n-        case BOOLEAN:\n-        case BYTES:\n-        case STRING:\n-        case NUMBER:\n-        case INTEGER:\n-        case FLOAT:\n-        case DATE:\n-        case TIME:\n-        case DATE_TIME:\n-        case LOCAL_TIME:\n-        case LOCAL_DATE_TIME:\n-        case NULL:\n-        default:\n-            return value.toString();\n+            case LIST:\n+                return listAsString(value.asList(this::formatValue));\n+            case MAP:\n+                return mapAsString(value.asMap(this::formatValue));\n+            case NODE:\n+                return nodeAsString(value.asNode());\n+            case RELATIONSHIP:\n+                return relationshipAsString(value.asRelationship());\n+            case PATH:\n+                return pathAsString(value.asPath());\n+            case POINT:\n+                return pointAsString(value.asPoint());\n+            case DURATION:\n+                return DurationValue.parse(value.toString()).prettyPrint();\n+            case ANY:\n+            case BOOLEAN:\n+            case BYTES:\n+            case STRING:\n+            case NUMBER:\n+            case INTEGER:\n+            case FLOAT:\n+            case DATE:\n+            case TIME:\n+            case DATE_TIME:\n+            case LOCAL_TIME:\n+            case LOCAL_DATE_TIME:\n+            case NULL:\n+            default:\n+                return value.toString();\n         }\n     }\n \n     @Nonnull\n-    default String pointAsString( Point point )\n+    default String pointAsString(Point point)\n     {\n-        StringBuilder stringBuilder = new StringBuilder( \"point({\" );\n-        stringBuilder.append( \"srid:\" ).append( point.srid() ).append( \",\" );\n-        stringBuilder.append( \" x:\" ).append( point.x() ).append( \",\" );\n-        stringBuilder.append( \" y:\" ).append( point.y() );\n+        StringBuilder stringBuilder = new StringBuilder(\"point({\");\n+        stringBuilder.append(\"srid:\").append(point.srid()).append(\",\");\n+        stringBuilder.append(\" x:\").append(point.x()).append(\",\");\n+        stringBuilder.append(\" y:\").append(point.y());\n         double z = point.z();\n-        if ( !Double.isNaN( z ) )\n+        if (!Double.isNaN(z))\n         {\n-            stringBuilder.append( \", z:\" ).append( z );\n+            stringBuilder.append(\", z:\").append(z);\n         }\n-        stringBuilder.append( \"})\" );\n+        stringBuilder.append(\"})\");\n         return stringBuilder.toString();\n     }\n \n     @Nonnull\n-    default String pathAsString( @Nonnull Path path )\n+    default String pathAsString(@Nonnull Path path)\n     {\n-        List<String> list = new ArrayList<>( path.length() );\n+        List<String> list = new ArrayList<>(path.length());\n         Node lastTraversed = path.start();\n-        if ( lastTraversed != null )\n+        if (lastTraversed != null)\n         {\n-            list.add( nodeAsString( lastTraversed ) );\n+            list.add(nodeAsString(lastTraversed));\n \n-            for ( Path.Segment segment : path )\n+            for (Path.Segment segment : path)\n             {\n                 Relationship relationship = segment.relationship();\n-                if ( relationship.startNodeId() == lastTraversed.id() )\n+                if (relationship.startNodeId() == lastTraversed.id())\n                 {\n-                    list.add( \"-\" + relationshipAsString( relationship ) + \"->\" );\n-                }\n-                else\n+                    list.add(\"-\" + relationshipAsString(relationship) + \"->\");\n+                } else\n                 {\n-                    list.add( \"<-\" + relationshipAsString( relationship ) + \"-\" );\n+                    list.add(\"<-\" + relationshipAsString(relationship) + \"-\");\n                 }\n-                list.add( nodeAsString( segment.end() ) );\n+                list.add(nodeAsString(segment.end()));\n                 lastTraversed = segment.end();\n             }\n         }\n \n-        return String.join( \"\", list );\n+        return String.join(\"\", list);\n     }\n \n     @Nonnull\n-    default String relationshipAsString( @Nonnull Relationship relationship )\n+    default String relationshipAsString(@Nonnull Relationship relationship)\n     {\n         List<String> relationshipAsString = new ArrayList<>();\n-        relationshipAsString.add( COLON + escape( relationship.type() ) );\n-        relationshipAsString.add( mapAsStringWithEmpty( relationship.asMap( this::formatValue ) ) );\n+        relationshipAsString.add(COLON + escape(relationship.type()));\n+        relationshipAsString.add(mapAsStringWithEmpty(relationship.asMap(this::formatValue)));\n \n-        return \"[\" + joinWithSpace( relationshipAsString ) + \"]\";\n+        return \"[\" + joinWithSpace(relationshipAsString) + \"]\";\n     }\n \n     @Nonnull\n-    default String nodeAsString( @Nonnull final Node node )\n+    default String nodeAsString(@Nonnull final Node node)\n     {\n         List<String> nodeAsString = new ArrayList<>();\n-        nodeAsString.add( collectNodeLabels( node ) );\n-        nodeAsString.add( mapAsStringWithEmpty( node.asMap( this::formatValue ) ) );\n+        nodeAsString.add(collectNodeLabels(node));\n+        nodeAsString.add(mapAsStringWithEmpty(node.asMap(this::formatValue)));\n \n-        return \"(\" + joinWithSpace( nodeAsString ) + \")\";\n+        return \"(\" + joinWithSpace(nodeAsString) + \")\";\n     }\n \n     @Nonnull\n-    default String formatPlan( @Nonnull ResultSummary summary )\n+    default String formatPlan(@Nonnull ResultSummary summary)\n     {\n         return \"\";\n     }\n \n     @Nonnull\n-    default String formatInfo( @Nonnull ResultSummary summary )\n+    default String formatInfo(@Nonnull ResultSummary summary)\n     {\n         return \"\";\n     }\n \n     @Nonnull\n-    default String formatFooter( @Nonnull BoltResult result, int numberOfRows )\n+    default String formatFooter(@Nonnull BoltResult result, int numberOfRows)\n     {\n         return \"\";\n     }\n@@ -316,5 +314,5 @@ public interface OutputFormatter\n     Set<Capabilities> capabilities();\n \n     enum Capabilities\n-    { INFO, PLAN, RESULT, FOOTER, STATISTICS }\n+    {INFO, PLAN, RESULT, FOOTER, STATISTICS}\n }\n",
            "diff_size": 117
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}