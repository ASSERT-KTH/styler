{
    "project_name": "graphfoundation-ongdb",
    "error_id": "859",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "187",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/859/PartitionedIndexStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/859/PartitionedIndexStorage.java\nindex fa9cb94cece..33a1813217d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/859/PartitionedIndexStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/859/PartitionedIndexStorage.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index.storage;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -47,194 +48,192 @@ import static java.util.stream.Collectors.toList;\n  */\n public class PartitionedIndexStorage\n {\n-    private static final Comparator<File> FILE_COMPARATOR =\n-            ( o1, o2 ) -> NumberAwareStringComparator.INSTANCE.compare( o1.getName(), o2.getName() );\n-\n-    private final DirectoryFactory directoryFactory;\n-    private final FileSystemAbstraction fileSystem;\n-    private final FolderLayout folderLayout;\n-    private final FailureStorage failureStorage;\n-\n-    public PartitionedIndexStorage( DirectoryFactory directoryFactory, FileSystemAbstraction fileSystem, File rootFolder )\n-    {\n-        this.fileSystem = fileSystem;\n-        this.folderLayout = new IndexFolderLayout( rootFolder );\n-        this.directoryFactory = directoryFactory;\n-        this.failureStorage = new FailureStorage( fileSystem, folderLayout );\n-    }\n-\n-    /**\n-     * Opens a {@link Directory lucene directory} for the given folder.\n-     *\n-     * @param folder the folder that denotes a lucene directory.\n-     * @return the lucene directory denoted by the given folder.\n-     * @throws IOException if directory can't be opened.\n-     */\n-    public Directory openDirectory( File folder ) throws IOException\n-    {\n-        return directoryFactory.open( folder );\n-    }\n-\n-    /**\n-     * Resolves a folder for the partition with the given index.\n-     *\n-     * @param partition the partition index.\n-     * @return the folder where partition's lucene directory should be located.\n-     */\n-    public File getPartitionFolder( int partition )\n+  private static final Comparator<File> FILE_COMPARATOR =\n+      (o1, o2) -> NumberAwareStringComparator.INSTANCE.compare(o1.getName(), o2.getName());\n+\n+  private final DirectoryFactory directoryFactory;\n+  private final FileSystemAbstraction fileSystem;\n+  private final FolderLayout folderLayout;\n+  private final FailureStorage failureStorage;\n+\n+  public PartitionedIndexStorage(DirectoryFactory directoryFactory, FileSystemAbstraction fileSystem, File rootFolder)\n+  {\n+    this.fileSystem = fileSystem;\n+    this.folderLayout = new IndexFolderLayout(rootFolder);\n+    this.directoryFactory = directoryFactory;\n+    this.failureStorage = new FailureStorage(fileSystem, folderLayout);\n+  }\n+\n+  /**\n+   * Opens a {@link Directory lucene directory} for the given folder.\n+   *\n+   * @param folder the folder that denotes a lucene directory.\n+   * @return the lucene directory denoted by the given folder.\n+   * @throws IOException if directory can't be opened.\n+   */\n+  public Directory openDirectory(File folder) throws IOException\n+  {\n+    return directoryFactory.open(folder);\n+  }\n+\n+  /**\n+   * Resolves a folder for the partition with the given index.\n+   *\n+   * @param partition the partition index.\n+   * @return the folder where partition's lucene directory should be located.\n+   */\n+  public File getPartitionFolder(int partition)\n+  {\n+    return folderLayout.getPartitionFolder(partition);\n+  }\n+\n+  /**\n+   * Resolves root folder for the given index.\n+   *\n+   * @return the folder containing index partition folders.\n+   */\n+  public File getIndexFolder()\n+  {\n+    return folderLayout.getIndexFolder();\n+  }\n+\n+  /**\n+   * Create a failure storage in the {@link #getIndexFolder() index folder}.\n+   *\n+   * @throws IOException if failure storage creation fails.\n+   * @see FailureStorage#reserveForIndex()\n+   */\n+  public void reserveIndexFailureStorage() throws IOException\n+  {\n+    failureStorage.reserveForIndex();\n+  }\n+\n+  /**\n+   * Writes index failure into the failure storage.\n+   *\n+   * @param failure the cause of the index failure.\n+   * @throws IOException if writing to the failure storage file failed.\n+   * @see FailureStorage#storeIndexFailure(String)\n+   */\n+  public void storeIndexFailure(String failure) throws IOException\n+  {\n+    failureStorage.storeIndexFailure(failure);\n+  }\n+\n+  /**\n+   * Retrieves stored index failure.\n+   *\n+   * @return index failure as string or {@code null} if there is no failure.\n+   * @see FailureStorage#loadIndexFailure()\n+   */\n+  public String getStoredIndexFailure()\n+  {\n+    return failureStorage.loadIndexFailure();\n+  }\n+\n+  /**\n+   * For the given {@link File folder} removes all nested folders from both {@link FileSystemAbstraction file system}\n+   * and {@link Directory lucene directories}.\n+   *\n+   * @param folder the folder to clean up.\n+   * @throws IOException if some removal operation fails.\n+   */\n+  public void prepareFolder(File folder) throws IOException\n+  {\n+    cleanupFolder(folder);\n+    fileSystem.mkdirs(folder);\n+  }\n+\n+  /**\n+   * For the given {@link File folder} removes the folder itself and all nested folders from both\n+   * {@link FileSystemAbstraction file system} and {@link Directory lucene directories}.\n+   *\n+   * @param folder the folder to remove.\n+   * @throws IOException if some removal operation fails.\n+   */\n+  public void cleanupFolder(File folder) throws IOException\n+  {\n+    List<File> partitionFolders = listFolders(folder);\n+    if (!partitionFolders.isEmpty())\n     {\n-        return folderLayout.getPartitionFolder( partition );\n+      for (File partitionFolder : partitionFolders)\n+      {\n+        cleanupLuceneDirectory(partitionFolder);\n+      }\n     }\n-\n-    /**\n-     * Resolves root folder for the given index.\n-     *\n-     * @return the folder containing index partition folders.\n-     */\n-    public File getIndexFolder()\n+    fileSystem.deleteRecursively(folder);\n+  }\n+\n+  /**\n+   * Opens all {@link Directory lucene directories} contained in the {@link #getIndexFolder() index folder}.\n+   *\n+   * @return the map from file system  {@link File directory} to the corresponding {@link Directory lucene directory}.\n+   * @throws IOException if opening of some lucene directory (via {@link DirectoryFactory#open(File)}) fails.\n+   */\n+  public Map<File, Directory> openIndexDirectories() throws IOException\n+  {\n+    Map<File, Directory> directories = new LinkedHashMap<>();\n+    try\n     {\n-        return folderLayout.getIndexFolder();\n-    }\n-\n-    /**\n-     * Create a failure storage in the {@link #getIndexFolder() index folder}.\n-     *\n-     * @throws IOException if failure storage creation fails.\n-     * @see FailureStorage#reserveForIndex()\n-     */\n-    public void reserveIndexFailureStorage() throws IOException\n-    {\n-        failureStorage.reserveForIndex();\n-    }\n-\n-    /**\n-     * Writes index failure into the failure storage.\n-     *\n-     * @param failure the cause of the index failure.\n-     * @throws IOException if writing to the failure storage file failed.\n-     * @see FailureStorage#storeIndexFailure(String)\n-     */\n-    public void storeIndexFailure( String failure ) throws IOException\n-    {\n-        failureStorage.storeIndexFailure( failure );\n-    }\n-\n-    /**\n-     * Retrieves stored index failure.\n-     *\n-     * @return index failure as string or {@code null} if there is no failure.\n-     * @see FailureStorage#loadIndexFailure()\n-     */\n-    public String getStoredIndexFailure()\n+      for (File dir : listFolders())\n+      {\n+        directories.put(dir, directoryFactory.open(dir));\n+      }\n+    } catch (IOException oe)\n     {\n-        return failureStorage.loadIndexFailure();\n+      try\n+      {\n+        IOUtils.closeAll(directories.values());\n+      } catch (Exception ce)\n+      {\n+        oe.addSuppressed(ce);\n+      }\n+      throw oe;\n     }\n-\n-    /**\n-     * For the given {@link File folder} removes all nested folders from both {@link FileSystemAbstraction file system}\n-     * and {@link Directory lucene directories}.\n-     *\n-     * @param folder the folder to clean up.\n-     * @throws IOException if some removal operation fails.\n-     */\n-    public void prepareFolder( File folder ) throws IOException\n-    {\n-        cleanupFolder( folder );\n-        fileSystem.mkdirs( folder );\n-    }\n-\n-    /**\n-     * For the given {@link File folder} removes the folder itself and all nested folders from both\n-     * {@link FileSystemAbstraction file system} and {@link Directory lucene directories}.\n-     *\n-     * @param folder the folder to remove.\n-     * @throws IOException if some removal operation fails.\n-     */\n-    public void cleanupFolder( File folder ) throws IOException\n-    {\n-        List<File> partitionFolders = listFolders( folder );\n-        if ( !partitionFolders.isEmpty() )\n-        {\n-            for ( File partitionFolder : partitionFolders )\n-            {\n-                cleanupLuceneDirectory( partitionFolder );\n-            }\n-        }\n-        fileSystem.deleteRecursively( folder );\n-    }\n-\n-    /**\n-     * Opens all {@link Directory lucene directories} contained in the {@link #getIndexFolder() index folder}.\n-     *\n-     * @return the map from file system  {@link File directory} to the corresponding {@link Directory lucene directory}.\n-     * @throws IOException if opening of some lucene directory (via {@link DirectoryFactory#open(File)}) fails.\n-     */\n-    public Map<File,Directory> openIndexDirectories() throws IOException\n-    {\n-        Map<File,Directory> directories = new LinkedHashMap<>();\n-        try\n-        {\n-            for ( File dir : listFolders() )\n-            {\n-                directories.put( dir, directoryFactory.open( dir ) );\n-            }\n-        }\n-        catch ( IOException oe )\n-        {\n-            try\n-            {\n-                IOUtils.closeAll( directories.values() );\n-            }\n-            catch ( Exception ce )\n-            {\n-                oe.addSuppressed( ce );\n-            }\n-            throw oe;\n-        }\n-        return directories;\n-    }\n-\n-    /**\n-     * List all folders in the {@link #getIndexFolder() index folder}.\n-     *\n-     * @return the list of index partition folders or {@link Collections#emptyList() empty list} if index folder is\n-     * empty.\n-     */\n-    public List<File> listFolders()\n-    {\n-        return listFolders( getIndexFolder() );\n-    }\n-\n-    private List<File> listFolders( File rootFolder )\n-    {\n-        File[] files = fileSystem.listFiles( rootFolder );\n-        return files == null ? Collections.emptyList()\n-                             : Stream.of( files )\n-                               .filter( f -> fileSystem.isDirectory( f ) && StringUtils.isNumeric( f.getName() ) )\n-                               .sorted( FILE_COMPARATOR )\n-                               .collect( toList() );\n-\n-    }\n-\n-    /**\n-     * Removes content of the lucene directory denoted by the given {@link File file}. This might seem unnecessary\n-     * since we cleanup the folder using {@link FileSystemAbstraction file system} but in fact for testing we often use\n-     * in-memory directories whose content can't be removed via the file system.\n-     * <p>\n-     * Uses {@link FileUtils#windowsSafeIOOperation(FileUtils.FileOperation)} underneath.\n-     *\n-     * @param folder the path to the directory to cleanup.\n-     * @throws IOException if removal operation fails.\n-     */\n-    private void cleanupLuceneDirectory( File folder ) throws IOException\n+    return directories;\n+  }\n+\n+  /**\n+   * List all folders in the {@link #getIndexFolder() index folder}.\n+   *\n+   * @return the list of index partition folders or {@link Collections#emptyList() empty list} if index folder is\n+   * empty.\n+   */\n+  public List<File> listFolders()\n+  {\n+    return listFolders(getIndexFolder());\n+  }\n+\n+  private List<File> listFolders(File rootFolder)\n+  {\n+    File[] files = fileSystem.listFiles(rootFolder);\n+    return files == null ? Collections.emptyList()\n+        : Stream.of(files)\n+        .filter(f -> fileSystem.isDirectory(f) && StringUtils.isNumeric(f.getName()))\n+        .sorted(FILE_COMPARATOR)\n+        .collect(toList());\n+\n+  }\n+\n+  /**\n+   * Removes content of the lucene directory denoted by the given {@link File file}. This might seem unnecessary\n+   * since we cleanup the folder using {@link FileSystemAbstraction file system} but in fact for testing we often use\n+   * in-memory directories whose content can't be removed via the file system.\n+   * <p>\n+   * Uses {@link FileUtils#windowsSafeIOOperation(FileUtils.FileOperation)} underneath.\n+   *\n+   * @param folder the path to the directory to cleanup.\n+   * @throws IOException if removal operation fails.\n+   */\n+  private void cleanupLuceneDirectory(File folder) throws IOException\n+  {\n+    try (Directory dir = directoryFactory.open(folder))\n     {\n-        try ( Directory dir = directoryFactory.open( folder ) )\n-        {\n-            String[] indexFiles = dir.listAll();\n-            for ( String indexFile : indexFiles )\n-            {\n-                FileUtils.windowsSafeIOOperation( () -> dir.deleteFile( indexFile ) );\n-            }\n-        }\n+      String[] indexFiles = dir.listAll();\n+      for (String indexFile : indexFiles)\n+      {\n+        FileUtils.windowsSafeIOOperation(() -> dir.deleteFile(indexFile));\n+      }\n     }\n+  }\n }\n",
            "diff_size": 273
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/859/PartitionedIndexStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/859/PartitionedIndexStorage.java\nindex fa9cb94cece..f515b1ee56c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/859/PartitionedIndexStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/859/PartitionedIndexStorage.java\n@@ -47,10 +47,8 @@ import static java.util.stream.Collectors.toList;\n  */\n public class PartitionedIndexStorage\n {\n-    private static final Comparator<File> FILE_COMPARATOR =\n-            ( o1, o2 ) -> NumberAwareStringComparator.INSTANCE.compare( o1.getName(), o2.getName() );\n-\n-    private final DirectoryFactory directoryFactory;\n+    private static final Comparator<File> FILE_COMPARATOR = ( o1, o2 ) -> NumberAwareStringComparator.INSTANCE.compare( o1.getName(), o2.getName() );\n+private final DirectoryFactory directoryFactory;\n     private final FileSystemAbstraction fileSystem;\n     private final FolderLayout folderLayout;\n     private final FailureStorage failureStorage;\n@@ -191,7 +189,8 @@ public class PartitionedIndexStorage\n             }\n             throw oe;\n         }\n-        return directories;\n+\n+return directories;\n     }\n \n     /**\n@@ -208,13 +207,9 @@ public class PartitionedIndexStorage\n     private List<File> listFolders( File rootFolder )\n     {\n         File[] files = fileSystem.listFiles( rootFolder );\n-        return files == null ? Collections.emptyList()\n-                             : Stream.of( files )\n-                               .filter( f -> fileSystem.isDirectory( f ) && StringUtils.isNumeric( f.getName() ) )\n-                               .sorted( FILE_COMPARATOR )\n+        return files == null ? Collections.emptyList() : Stream.of( files ).filter( f -> fileSystem.isDirectory( f ) && StringUtils.isNumeric( f.getName() ) ).sorted( FILE_COMPARATOR )\n                                .collect( toList() );\n-\n-    }\n+            }\n \n     /**\n      * Removes content of the lucene directory denoted by the given {@link File file}. This might seem unnecessary\n@@ -237,4 +232,4 @@ public class PartitionedIndexStorage\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}