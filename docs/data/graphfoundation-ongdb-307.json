{
    "project_name": "graphfoundation-ongdb",
    "error_id": "307",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "132",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "178",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "217",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "259",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "289",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "326",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "341",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "368",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/307/FulltextProviderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/307/FulltextProviderImpl.java\nindex d4ee3a1f9d3..3dd05d30758 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/307/FulltextProviderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/307/FulltextProviderImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.fulltext;\n \n import java.io.File;\n@@ -59,327 +60,318 @@ import static org.neo4j.kernel.impl.transaction.state.NeoStoreFileListing.getSna\n public class FulltextProviderImpl implements FulltextProvider\n {\n \n-    private final GraphDatabaseService db;\n-    private final Log log;\n-    private final TransactionIdStore transactionIdStore;\n-    private final FulltextTransactionEventUpdater fulltextTransactionEventUpdater;\n-    private final Set<String> nodeProperties;\n-    private final Set<String> relationshipProperties;\n-    private final Map<String,WritableFulltext> writableNodeIndices;\n-    private final Map<String,WritableFulltext> writableRelationshipIndices;\n-    private final FulltextUpdateApplier applier;\n-    private final FulltextFactory factory;\n-    private final ReadWriteLock configurationLock;\n+  private final GraphDatabaseService db;\n+  private final Log log;\n+  private final TransactionIdStore transactionIdStore;\n+  private final FulltextTransactionEventUpdater fulltextTransactionEventUpdater;\n+  private final Set<String> nodeProperties;\n+  private final Set<String> relationshipProperties;\n+  private final Map<String, WritableFulltext> writableNodeIndices;\n+  private final Map<String, WritableFulltext> writableRelationshipIndices;\n+  private final FulltextUpdateApplier applier;\n+  private final FulltextFactory factory;\n+  private final ReadWriteLock configurationLock;\n+\n+  /**\n+   * Creates a provider of fulltext indices for the given database. This is the entry point for all fulltext index\n+   * operations.\n+   *\n+   * @param db                 Database that this provider should work with.\n+   * @param log                For logging errors.\n+   * @param availabilityGuard  Used for waiting with populating the index until the database is available.\n+   * @param scheduler          For background work.\n+   * @param transactionIdStore Used for checking if the store has had transactions applied to it, while the fulltext\n+   * @param fileSystem         The filesystem to use.\n+   * @param storeDir           Store directory of the database.\n+   * @param analyzerClassName  The Lucene analyzer to use for the {@link LuceneFulltext} created by this factory.\n+   */\n+  public FulltextProviderImpl(GraphDatabaseService db, Log log, AvailabilityGuard availabilityGuard, JobScheduler scheduler,\n+                              TransactionIdStore transactionIdStore, FileSystemAbstraction fileSystem, File storeDir, String analyzerClassName)\n+  {\n+    this.db = db;\n+    this.log = log;\n+    this.transactionIdStore = transactionIdStore;\n+    applier = new FulltextUpdateApplier(log, availabilityGuard, scheduler);\n+    applier.start();\n+    factory = new FulltextFactory(fileSystem, storeDir, analyzerClassName);\n+    fulltextTransactionEventUpdater = new FulltextTransactionEventUpdater(this, applier);\n+    nodeProperties = ConcurrentHashMap.newKeySet();\n+    relationshipProperties = ConcurrentHashMap.newKeySet();\n+    writableNodeIndices = new ConcurrentHashMap<>();\n+    writableRelationshipIndices = new ConcurrentHashMap<>();\n+    configurationLock = new ReentrantReadWriteLock(true);\n+  }\n+\n+  @Override\n+  public void registerTransactionEventHandler()\n+  {\n+    db.registerTransactionEventHandler(fulltextTransactionEventUpdater);\n+  }\n+\n+  private boolean matchesConfiguration(WritableFulltext index) throws IOException\n+  {\n+    long txId = transactionIdStore.getLastCommittedTransactionId();\n+    FulltextIndexConfiguration currentConfig =\n+        new FulltextIndexConfiguration(index.getAnalyzerName(), index.getProperties(), txId);\n \n-    /**\n-     * Creates a provider of fulltext indices for the given database. This is the entry point for all fulltext index\n-     * operations.\n-     * @param db Database that this provider should work with.\n-     * @param log For logging errors.\n-     * @param availabilityGuard Used for waiting with populating the index until the database is available.\n-     * @param scheduler For background work.\n-     * @param transactionIdStore Used for checking if the store has had transactions applied to it, while the fulltext\n-     * @param fileSystem The filesystem to use.\n-     * @param storeDir Store directory of the database.\n-     * @param analyzerClassName The Lucene analyzer to use for the {@link LuceneFulltext} created by this factory.\n-     */\n-    public FulltextProviderImpl( GraphDatabaseService db, Log log, AvailabilityGuard availabilityGuard, JobScheduler scheduler,\n-            TransactionIdStore transactionIdStore, FileSystemAbstraction fileSystem, File storeDir, String analyzerClassName )\n+    FulltextIndexConfiguration storedConfig;\n+    try (ReadOnlyFulltext indexReader = index.getIndexReader())\n     {\n-        this.db = db;\n-        this.log = log;\n-        this.transactionIdStore = transactionIdStore;\n-        applier = new FulltextUpdateApplier( log, availabilityGuard, scheduler );\n-        applier.start();\n-        factory = new FulltextFactory( fileSystem, storeDir, analyzerClassName );\n-        fulltextTransactionEventUpdater = new FulltextTransactionEventUpdater( this, applier );\n-        nodeProperties = ConcurrentHashMap.newKeySet();\n-        relationshipProperties = ConcurrentHashMap.newKeySet();\n-        writableNodeIndices = new ConcurrentHashMap<>();\n-        writableRelationshipIndices = new ConcurrentHashMap<>();\n-        configurationLock = new ReentrantReadWriteLock( true );\n+      storedConfig = indexReader.getConfigurationDocument();\n     }\n+    return storedConfig == null && index.getProperties().isEmpty() ||\n+        storedConfig != null && storedConfig.equals(currentConfig);\n+  }\n \n-    @Override\n-    public void registerTransactionEventHandler()\n+  @Override\n+  public void awaitPopulation()\n+  {\n+    try\n     {\n-        db.registerTransactionEventHandler( fulltextTransactionEventUpdater );\n+      applier.writeBarrier().awaitCompletion();\n+    } catch (ExecutionException e)\n+    {\n+      throw new AssertionError(\"The writeBarrier operation should never throw an exception\", e);\n+    } catch (IOException e)\n+    {\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    private boolean matchesConfiguration( WritableFulltext index ) throws IOException\n-    {\n-        long txId = transactionIdStore.getLastCommittedTransactionId();\n-        FulltextIndexConfiguration currentConfig =\n-                new FulltextIndexConfiguration( index.getAnalyzerName(), index.getProperties(), txId );\n+  @Override\n+  public void openIndex(String identifier, FulltextIndexType type) throws IOException\n+  {\n+    LuceneFulltext index = factory.openFulltextIndex(identifier, type);\n+    register(index);\n+  }\n \n-        FulltextIndexConfiguration storedConfig;\n-        try ( ReadOnlyFulltext indexReader = index.getIndexReader() )\n-        {\n-            storedConfig = indexReader.getConfigurationDocument();\n-        }\n-        return storedConfig == null && index.getProperties().isEmpty() ||\n-               storedConfig != null && storedConfig.equals( currentConfig );\n-    }\n+  @Override\n+  public void createIndex(String identifier, FulltextIndexType type, List<String> properties)\n+      throws IOException\n+  {\n+    LuceneFulltext index = factory.createFulltextIndex(identifier, type, properties);\n+    register(index);\n+  }\n \n-    @Override\n-    public void awaitPopulation()\n+  private void register(LuceneFulltext fulltextIndex) throws IOException\n+  {\n+    configurationLock.writeLock().lock();\n+    try\n     {\n-        try\n-        {\n-            applier.writeBarrier().awaitCompletion();\n-        }\n-        catch ( ExecutionException e )\n+      WritableFulltext writableFulltext = new WritableFulltext(fulltextIndex);\n+      writableFulltext.open();\n+      if (fulltextIndex.getType() == FulltextIndexType.NODES)\n+      {\n+        if (!matchesConfiguration(writableFulltext))\n         {\n-            throw new AssertionError( \"The writeBarrier operation should never throw an exception\", e );\n+          writableFulltext.drop();\n+          writableFulltext.open();\n+          if (!writableFulltext.getProperties().isEmpty())\n+          {\n+            applier.populateNodes(writableFulltext, db);\n+          }\n         }\n-        catch ( IOException e )\n+        writableNodeIndices.put(fulltextIndex.getIdentifier(), writableFulltext);\n+        nodeProperties.addAll(fulltextIndex.getProperties());\n+      } else\n+      {\n+        if (!matchesConfiguration(writableFulltext))\n         {\n-            throw new UncheckedIOException( e );\n+          writableFulltext.drop();\n+          writableFulltext.open();\n+          if (!writableFulltext.getProperties().isEmpty())\n+          {\n+            applier.populateRelationships(writableFulltext, db);\n+          }\n         }\n-    }\n-\n-    @Override\n-    public void openIndex( String identifier, FulltextIndexType type ) throws IOException\n+        writableRelationshipIndices.put(fulltextIndex.getIdentifier(), writableFulltext);\n+        relationshipProperties.addAll(fulltextIndex.getProperties());\n+      }\n+    } finally\n     {\n-        LuceneFulltext index = factory.openFulltextIndex( identifier, type );\n-        register( index );\n+      configurationLock.writeLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void createIndex( String identifier, FulltextIndexType type, List<String> properties )\n-            throws IOException\n-    {\n-        LuceneFulltext index = factory.createFulltextIndex( identifier, type, properties );\n-        register( index );\n-    }\n+  String[] getNodeProperties()\n+  {\n+    return nodeProperties.toArray(new String[0]);\n+  }\n \n-    private void register( LuceneFulltext fulltextIndex ) throws IOException\n-    {\n-        configurationLock.writeLock().lock();\n-        try\n-        {\n-            WritableFulltext writableFulltext = new WritableFulltext( fulltextIndex );\n-            writableFulltext.open();\n-            if ( fulltextIndex.getType() == FulltextIndexType.NODES )\n-            {\n-                if ( !matchesConfiguration( writableFulltext ) )\n-                {\n-                    writableFulltext.drop();\n-                    writableFulltext.open();\n-                    if ( !writableFulltext.getProperties().isEmpty() )\n-                    {\n-                        applier.populateNodes( writableFulltext, db );\n-                    }\n-                }\n-                writableNodeIndices.put( fulltextIndex.getIdentifier(), writableFulltext );\n-                nodeProperties.addAll( fulltextIndex.getProperties() );\n-            }\n-            else\n-            {\n-                if ( !matchesConfiguration( writableFulltext ) )\n-                {\n-                    writableFulltext.drop();\n-                    writableFulltext.open();\n-                    if ( !writableFulltext.getProperties().isEmpty() )\n-                    {\n-                        applier.populateRelationships( writableFulltext, db );\n-                    }\n-                }\n-                writableRelationshipIndices.put( fulltextIndex.getIdentifier(), writableFulltext );\n-                relationshipProperties.addAll( fulltextIndex.getProperties() );\n-            }\n-        }\n-        finally\n-        {\n-            configurationLock.writeLock().unlock();\n-        }\n-    }\n+  String[] getRelationshipProperties()\n+  {\n+    return relationshipProperties.toArray(new String[0]);\n+  }\n \n-    String[] getNodeProperties()\n-    {\n-        return nodeProperties.toArray( new String[0] );\n-    }\n+  Collection<WritableFulltext> writableNodeIndices()\n+  {\n+    return Collections.unmodifiableCollection(writableNodeIndices.values());\n+  }\n \n-    String[] getRelationshipProperties()\n-    {\n-        return relationshipProperties.toArray( new String[0] );\n-    }\n+  Collection<WritableFulltext> writableRelationshipIndices()\n+  {\n+    return Collections.unmodifiableCollection(writableRelationshipIndices.values());\n+  }\n \n-    Collection<WritableFulltext> writableNodeIndices()\n+  @Override\n+  public ReadOnlyFulltext getReader(String identifier, FulltextIndexType type) throws IOException\n+  {\n+    WritableFulltext writableFulltext = getIndexMap(type).get(identifier);\n+    if (writableFulltext == null)\n     {\n-        return Collections.unmodifiableCollection( writableNodeIndices.values() );\n+      throw new IllegalArgumentException(\"No such \" + type + \" index '\" + identifier + \"'.\");\n     }\n+    return writableFulltext.getIndexReader();\n+  }\n \n-    Collection<WritableFulltext> writableRelationshipIndices()\n+  private Map<String, WritableFulltext> getIndexMap(FulltextIndexType type)\n+  {\n+    switch (type)\n     {\n-        return Collections.unmodifiableCollection( writableRelationshipIndices.values() );\n+      case NODES:\n+        return writableNodeIndices;\n+      case RELATIONSHIPS:\n+        return writableRelationshipIndices;\n+      default:\n+        throw new IllegalArgumentException(\"No such fulltext index type: \" + type);\n     }\n+  }\n \n-    @Override\n-    public ReadOnlyFulltext getReader( String identifier, FulltextIndexType type ) throws IOException\n-    {\n-        WritableFulltext writableFulltext = getIndexMap( type ).get( identifier );\n-        if ( writableFulltext == null )\n-        {\n-            throw new IllegalArgumentException( \"No such \" + type + \" index '\" + identifier + \"'.\" );\n-        }\n-        return writableFulltext.getIndexReader();\n-    }\n+  @Override\n+  public Set<String> getProperties(String identifier, FulltextIndexType type)\n+  {\n+    return applyToMatchingIndex(identifier, type, WritableFulltext::getProperties);\n+  }\n \n-    private Map<String,WritableFulltext> getIndexMap( FulltextIndexType type )\n+  private <E> E applyToMatchingIndex(\n+      String identifier, FulltextIndexType type, Function<WritableFulltext, E> function)\n+  {\n+    if (type == FulltextIndexType.NODES)\n     {\n-        switch ( type )\n-        {\n-        case NODES:\n-            return writableNodeIndices;\n-        case RELATIONSHIPS:\n-            return writableRelationshipIndices;\n-        default:\n-            throw new IllegalArgumentException( \"No such fulltext index type: \" + type );\n-        }\n-    }\n-\n-    @Override\n-    public Set<String> getProperties( String identifier, FulltextIndexType type )\n+      return function.apply(writableNodeIndices.get(identifier));\n+    } else\n     {\n-        return applyToMatchingIndex( identifier, type, WritableFulltext::getProperties );\n+      return function.apply(writableRelationshipIndices.get(identifier));\n     }\n+  }\n \n-    private <E> E applyToMatchingIndex(\n-            String identifier, FulltextIndexType type, Function<WritableFulltext,E> function )\n-    {\n-        if ( type == FulltextIndexType.NODES )\n-        {\n-            return function.apply( writableNodeIndices.get( identifier ) );\n-        }\n-        else\n-        {\n-            return function.apply( writableRelationshipIndices.get( identifier ) );\n-        }\n-    }\n+  @Override\n+  public InternalIndexState getState(String identifier, FulltextIndexType type)\n+  {\n+    return applyToMatchingIndex(identifier, type, WritableFulltext::getState);\n+  }\n \n-    @Override\n-    public InternalIndexState getState( String identifier, FulltextIndexType type )\n+  void drop(String identifier, FulltextIndexType type) throws IOException\n+  {\n+    configurationLock.writeLock().lock();\n+    try\n     {\n-        return applyToMatchingIndex( identifier, type, WritableFulltext::getState );\n-    }\n-\n-    void drop( String identifier, FulltextIndexType type ) throws IOException\n+      // Wait for the queue of updates to drain, before deleting an index.\n+      awaitPopulation();\n+      if (type == FulltextIndexType.NODES)\n+      {\n+        writableNodeIndices.remove(identifier).drop();\n+      } else\n+      {\n+        writableRelationshipIndices.remove(identifier).drop();\n+      }\n+      rebuildProperties();\n+    } finally\n     {\n-        configurationLock.writeLock().lock();\n-        try\n-        {\n-            // Wait for the queue of updates to drain, before deleting an index.\n-            awaitPopulation();\n-            if ( type == FulltextIndexType.NODES )\n-            {\n-                writableNodeIndices.remove( identifier ).drop();\n-            }\n-            else\n-            {\n-                writableRelationshipIndices.remove( identifier ).drop();\n-            }\n-            rebuildProperties();\n-        }\n-        finally\n-        {\n-            configurationLock.writeLock().unlock();\n-        }\n+      configurationLock.writeLock().unlock();\n     }\n+  }\n \n-    private void rebuildProperties()\n-    {\n-        nodeProperties.clear();\n-        relationshipProperties.clear();\n-        writableNodeIndices.forEach( ( s, index ) -> nodeProperties.addAll( index.getProperties() ) );\n-        writableRelationshipIndices.forEach( ( s, index ) -> relationshipProperties.addAll( index.getProperties() ) );\n-    }\n+  private void rebuildProperties()\n+  {\n+    nodeProperties.clear();\n+    relationshipProperties.clear();\n+    writableNodeIndices.forEach((s, index) -> nodeProperties.addAll(index.getProperties()));\n+    writableRelationshipIndices.forEach((s, index) -> relationshipProperties.addAll(index.getProperties()));\n+  }\n \n-    Lock readLockIndexConfiguration()\n-    {\n-        Lock lock = configurationLock.readLock();\n-        lock.lock();\n-        return lock;\n-    }\n+  Lock readLockIndexConfiguration()\n+  {\n+    Lock lock = configurationLock.readLock();\n+    lock.lock();\n+    return lock;\n+  }\n \n-    @Override\n-    public void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys )\n-            throws IOException, InvalidArgumentsException\n+  @Override\n+  public void changeIndexedProperties(String identifier, FulltextIndexType type, List<String> propertyKeys)\n+      throws IOException, InvalidArgumentsException\n+  {\n+    configurationLock.writeLock().lock();\n+    try\n     {\n-        configurationLock.writeLock().lock();\n-        try\n-        {\n-            if ( propertyKeys.stream().anyMatch( s -> s.startsWith( FulltextProvider.LUCENE_FULLTEXT_ADDON_PREFIX ) ) )\n-            {\n-                throw new InvalidArgumentsException(\n-                        \"It is not possible to index property keys starting with \" +\n-                        FulltextProvider.LUCENE_FULLTEXT_ADDON_PREFIX );\n-            }\n-            Set<String> currentProperties = getProperties( identifier, type );\n-            if ( !currentProperties.containsAll( propertyKeys ) || !propertyKeys.containsAll( currentProperties ) )\n-            {\n-                drop( identifier, type );\n-                createIndex( identifier, type, propertyKeys );\n-            }\n-        }\n-        finally\n-        {\n-            configurationLock.writeLock().unlock();\n-        }\n-    }\n-\n-    @Override\n-    public void registerFileListing( NeoStoreFileListing fileListing )\n+      if (propertyKeys.stream().anyMatch(s -> s.startsWith(FulltextProvider.LUCENE_FULLTEXT_ADDON_PREFIX)))\n+      {\n+        throw new InvalidArgumentsException(\n+            \"It is not possible to index property keys starting with \" +\n+                FulltextProvider.LUCENE_FULLTEXT_ADDON_PREFIX);\n+      }\n+      Set<String> currentProperties = getProperties(identifier, type);\n+      if (!currentProperties.containsAll(propertyKeys) || !propertyKeys.containsAll(currentProperties))\n+      {\n+        drop(identifier, type);\n+        createIndex(identifier, type, propertyKeys);\n+      }\n+    } finally\n     {\n-        fileListing.registerStoreFileProvider( this::snapshotStoreFiles );\n+      configurationLock.writeLock().unlock();\n     }\n+  }\n \n-    private Resource snapshotStoreFiles( Collection<StoreFileMetadata> files ) throws IOException\n+  @Override\n+  public void registerFileListing(NeoStoreFileListing fileListing)\n+  {\n+    fileListing.registerStoreFileProvider(this::snapshotStoreFiles);\n+  }\n+\n+  private Resource snapshotStoreFiles(Collection<StoreFileMetadata> files) throws IOException\n+  {\n+    final Collection<ResourceIterator<File>> snapshots = new ArrayList<>();\n+    for (WritableFulltext index : Iterables.concat(writableNodeIndices.values(), writableRelationshipIndices.values()))\n     {\n-        final Collection<ResourceIterator<File>> snapshots = new ArrayList<>();\n-        for ( WritableFulltext index : Iterables.concat( writableNodeIndices.values(), writableRelationshipIndices.values() ) )\n-        {\n-            // Save the last committed transaction, then drain the update queue to make sure that we have applied _at least_ the commits the config claims.\n-            index.saveConfiguration( transactionIdStore.getLastCommittedTransactionId() );\n-            try\n-            {\n-                applier.writeBarrier().awaitCompletion();\n-            }\n-            catch ( ExecutionException e )\n-            {\n-                throw new IOException( \"Unable to prepare index for snapshot.\" );\n-            }\n-            index.flush();\n-            ResourceIterator<File> snapshot = index.snapshot();\n-            snapshots.add( snapshot );\n-            files.addAll( getSnapshotFilesMetadata( snapshot ) );\n-        }\n-        // Intentionally don't close the snapshots here, return them for closing by the consumer of the targetFiles list.\n-        return new MultiResource( snapshots );\n+      // Save the last committed transaction, then drain the update queue to make sure that we have applied _at least_ the commits the config claims.\n+      index.saveConfiguration(transactionIdStore.getLastCommittedTransactionId());\n+      try\n+      {\n+        applier.writeBarrier().awaitCompletion();\n+      } catch (ExecutionException e)\n+      {\n+        throw new IOException(\"Unable to prepare index for snapshot.\");\n+      }\n+      index.flush();\n+      ResourceIterator<File> snapshot = index.snapshot();\n+      snapshots.add(snapshot);\n+      files.addAll(getSnapshotFilesMetadata(snapshot));\n     }\n+    // Intentionally don't close the snapshots here, return them for closing by the consumer of the targetFiles list.\n+    return new MultiResource(snapshots);\n+  }\n \n-    /**\n-     * Closes the provider and all associated resources.\n-     */\n-    @Override\n-    public void close()\n+  /**\n+   * Closes the provider and all associated resources.\n+   */\n+  @Override\n+  public void close()\n+  {\n+    db.unregisterTransactionEventHandler(fulltextTransactionEventUpdater);\n+    applier.stop();\n+    Consumer<WritableFulltext> fulltextCloser = luceneFulltextIndex ->\n     {\n-        db.unregisterTransactionEventHandler( fulltextTransactionEventUpdater );\n-        applier.stop();\n-        Consumer<WritableFulltext> fulltextCloser = luceneFulltextIndex ->\n-        {\n-            try\n-            {\n-                luceneFulltextIndex.saveConfiguration( transactionIdStore.getLastCommittedTransactionId() );\n-                luceneFulltextIndex.close();\n-            }\n-            catch ( IOException e )\n-            {\n-                log.error( \"Unable to close fulltext index.\", e );\n-            }\n-        };\n-        writableNodeIndices.values().forEach( fulltextCloser );\n-        writableRelationshipIndices.values().forEach( fulltextCloser );\n-    }\n+      try\n+      {\n+        luceneFulltextIndex.saveConfiguration(transactionIdStore.getLastCommittedTransactionId());\n+        luceneFulltextIndex.close();\n+      } catch (IOException e)\n+      {\n+        log.error(\"Unable to close fulltext index.\", e);\n+      }\n+    };\n+    writableNodeIndices.values().forEach(fulltextCloser);\n+    writableRelationshipIndices.values().forEach(fulltextCloser);\n+  }\n \n }\n",
            "diff_size": 396
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/307/FulltextProviderImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/307/FulltextProviderImpl.java\nindex d4ee3a1f9d3..bad52872e85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/307/FulltextProviderImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/307/FulltextProviderImpl.java\n@@ -58,7 +58,6 @@ import static org.neo4j.kernel.impl.transaction.state.NeoStoreFileListing.getSna\n  */\n public class FulltextProviderImpl implements FulltextProvider\n {\n-\n     private final GraphDatabaseService db;\n     private final Log log;\n     private final TransactionIdStore transactionIdStore;\n@@ -109,16 +108,14 @@ public class FulltextProviderImpl implements FulltextProvider\n     private boolean matchesConfiguration( WritableFulltext index ) throws IOException\n     {\n         long txId = transactionIdStore.getLastCommittedTransactionId();\n-        FulltextIndexConfiguration currentConfig =\n-                new FulltextIndexConfiguration( index.getAnalyzerName(), index.getProperties(), txId );\n-\n-        FulltextIndexConfiguration storedConfig;\n+        FulltextIndexConfiguration currentConfig = new FulltextIndexConfiguration( index.getAnalyzerName(), index.getProperties(), txId );\n+FulltextIndexConfiguration storedConfig;\n         try ( ReadOnlyFulltext indexReader = index.getIndexReader() )\n         {\n             storedConfig = indexReader.getConfigurationDocument();\n         }\n-        return storedConfig == null && index.getProperties().isEmpty() ||\n-               storedConfig != null && storedConfig.equals( currentConfig );\n+\n+return storedConfig == null && index.getProperties().isEmpty() || storedConfig != null && storedConfig.equals( currentConfig );\n     }\n \n     @Override\n@@ -146,9 +143,8 @@ public class FulltextProviderImpl implements FulltextProvider\n     }\n \n     @Override\n-    public void createIndex( String identifier, FulltextIndexType type, List<String> properties )\n-            throws IOException\n-    {\n+    public void createIndex( String identifier, FulltextIndexType type, List<String> properties ) throws IOException\n+{\n         LuceneFulltext index = factory.createFulltextIndex( identifier, type, properties );\n         register( index );\n     }\n@@ -223,7 +219,8 @@ public class FulltextProviderImpl implements FulltextProvider\n         {\n             throw new IllegalArgumentException( \"No such \" + type + \" index '\" + identifier + \"'.\" );\n         }\n-        return writableFulltext.getIndexReader();\n+\n+return writableFulltext.getIndexReader();\n     }\n \n     private Map<String,WritableFulltext> getIndexMap( FulltextIndexType type )\n@@ -245,8 +242,7 @@ public class FulltextProviderImpl implements FulltextProvider\n         return applyToMatchingIndex( identifier, type, WritableFulltext::getProperties );\n     }\n \n-    private <E> E applyToMatchingIndex(\n-            String identifier, FulltextIndexType type, Function<WritableFulltext,E> function )\n+    private <E> E applyToMatchingIndex( String identifier, FulltextIndexType type, Function<WritableFulltext,E> function )\n     {\n         if ( type == FulltextIndexType.NODES )\n         {\n@@ -279,7 +275,8 @@ public class FulltextProviderImpl implements FulltextProvider\n             {\n                 writableRelationshipIndices.remove( identifier ).drop();\n             }\n-            rebuildProperties();\n+\n+rebuildProperties();\n         }\n         finally\n         {\n@@ -303,17 +300,14 @@ public class FulltextProviderImpl implements FulltextProvider\n     }\n \n     @Override\n-    public void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys )\n-            throws IOException, InvalidArgumentsException\n-    {\n+    public void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys ) throws IOException, InvalidArgumentsException\n+{\n         configurationLock.writeLock().lock();\n         try\n         {\n             if ( propertyKeys.stream().anyMatch( s -> s.startsWith( FulltextProvider.LUCENE_FULLTEXT_ADDON_PREFIX ) ) )\n             {\n-                throw new InvalidArgumentsException(\n-                        \"It is not possible to index property keys starting with \" +\n-                        FulltextProvider.LUCENE_FULLTEXT_ADDON_PREFIX );\n+                throw new InvalidArgumentsException( \"It is not possible to index property keys starting with \" + FulltextProvider.LUCENE_FULLTEXT_ADDON_PREFIX );\n             }\n             Set<String> currentProperties = getProperties( identifier, type );\n             if ( !currentProperties.containsAll( propertyKeys ) || !propertyKeys.containsAll( currentProperties ) )\n@@ -381,5 +375,4 @@ public class FulltextProviderImpl implements FulltextProvider\n         writableNodeIndices.values().forEach( fulltextCloser );\n         writableRelationshipIndices.values().forEach( fulltextCloser );\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}