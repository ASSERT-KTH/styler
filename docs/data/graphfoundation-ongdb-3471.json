{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3471",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3471/TimedRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3471/TimedRepository.java\nindex 361496d60a4..31c9eee36b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3471/TimedRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3471/TimedRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.collection;\n \n import java.time.Clock;\n@@ -37,184 +38,185 @@ import static org.neo4j.helpers.Format.duration;\n  * A concurrent repository that allows users to manage objects with a specified timeout on idleness.\n  * The repository owns the lifecycle of it's objects, granting clients exclusive access to them via its\n  * acquire/release methods.\n- *\n+ * <p>\n  * The {@link #run()} method here performs one \"sweep\", checking for idle entries to reap. You will want to trigger\n  * that run on a recurring basis, for instance using {@link JobScheduler}.\n  */\n public class TimedRepository<KEY, VALUE> implements Runnable\n {\n-    private final ConcurrentMap<KEY, Entry> repo = new ConcurrentHashMap<>();\n-    private final Factory<VALUE> factory;\n-    private final Consumer<VALUE> reaper;\n-    private final long timeout;\n-    private final Clock clock;\n-\n-    private class Entry\n+  private final ConcurrentMap<KEY, Entry> repo = new ConcurrentHashMap<>();\n+  private final Factory<VALUE> factory;\n+  private final Consumer<VALUE> reaper;\n+  private final long timeout;\n+  private final Clock clock;\n+\n+  private class Entry\n+  {\n+    static final int IDLE = 0;\n+    static final int IN_USE = 1;\n+    static final int MARKED_FOR_END = 2;\n+\n+    private final AtomicInteger state = new AtomicInteger(IDLE);\n+    private final VALUE value;\n+    private volatile long latestActivityTimestamp;\n+\n+    Entry(VALUE value)\n     {\n-        static final int IDLE = 0;\n-        static final int IN_USE = 1;\n-        static final int MARKED_FOR_END = 2;\n-\n-        private final AtomicInteger state = new AtomicInteger( IDLE );\n-        private final VALUE value;\n-        private volatile long latestActivityTimestamp;\n-\n-        Entry( VALUE value )\n-        {\n-            this.value = value;\n-            this.latestActivityTimestamp = clock.millis();\n-        }\n-\n-        public boolean acquire()\n-        {\n-            return state.compareAndSet( IDLE, IN_USE );\n-        }\n-\n-        /**\n-         * Calling this is only allowed if you have previously acquired this entry.\n-         * @return true if the release was successful, false if this entry has been marked for removal, and thus is not\n-         * allowed to be released back into the public.\n-         */\n-        public boolean release()\n-        {\n-            latestActivityTimestamp = clock.millis();\n-            return state.compareAndSet( IN_USE, IDLE );\n-        }\n-\n-        public boolean markForEndingIfInUse()\n-        {\n-            return state.compareAndSet( IN_USE, MARKED_FOR_END );\n-        }\n-\n-        public boolean isMarkedForEnding()\n-        {\n-            return state.get() == MARKED_FOR_END;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return format( \"%s[%s last accessed at %d (%s ago)\", getClass().getSimpleName(),\n-                    value, latestActivityTimestamp, duration( currentTimeMillis() - latestActivityTimestamp ) );\n-        }\n+      this.value = value;\n+      this.latestActivityTimestamp = clock.millis();\n     }\n \n-    public TimedRepository( Factory<VALUE> provider, Consumer<VALUE> reaper, long timeout, Clock clock )\n+    public boolean acquire()\n     {\n-        this.factory = provider;\n-        this.reaper = reaper;\n-        this.timeout = timeout;\n-        this.clock = clock;\n+      return state.compareAndSet(IDLE, IN_USE);\n     }\n \n-    public void begin( KEY key ) throws ConcurrentAccessException\n+    /**\n+     * Calling this is only allowed if you have previously acquired this entry.\n+     *\n+     * @return true if the release was successful, false if this entry has been marked for removal, and thus is not\n+     * allowed to be released back into the public.\n+     */\n+    public boolean release()\n     {\n-        VALUE instance = factory.newInstance();\n-        Entry existing;\n-        if ( (existing = repo.putIfAbsent( key, new Entry( instance ) )) != null )\n-        {\n-            reaper.accept( instance ); // Need to clear up our optimistically allocated value\n-            throw new ConcurrentAccessException( String.format(\n-                    \"Cannot begin '%s', because %s with that key already exists.\", key, existing ) );\n-        }\n+      latestActivityTimestamp = clock.millis();\n+      return state.compareAndSet(IN_USE, IDLE);\n     }\n \n-    /**\n-     * End the life of a stored entry. If the entry is currently in use, it will be thrown out as soon as the other client\n-     * is done with it.\n-     */\n-    public VALUE end( KEY key )\n+    public boolean markForEndingIfInUse()\n     {\n-        while ( true )\n-        {\n-            Entry entry = repo.get( key );\n-            if ( entry == null )\n-            {\n-                return null;\n-            }\n-\n-            // Ending the life of an entry is somewhat complicated, because we promise the callee here that if someone\n-            // else is concurrently using the entry, we will ensure that either we or the other user will end the entry\n-            // life when the other user is done with it.\n-\n-            // First, assume the entry is in use and try and mark it to be ended by the other user\n-            if ( entry.markForEndingIfInUse() )\n-            {\n-                // The entry was indeed in use, and we successfully marked it to be ended. That's all we need to do here,\n-                // the other user will see the ending flag when releasing the entry.\n-                return entry.value;\n-            }\n-\n-            // Marking it for ending failed, likely because the entry is currently idle - lets try and just acquire it\n-            // and throw it out ourselves\n-            if ( entry.acquire() )\n-            {\n-                // Got it, just throw it away\n-                end0( key, entry.value );\n-                return entry.value;\n-            }\n-\n-            // We didn't manage to mark this for ending, and we didn't manage to acquire it to end it ourselves, which\n-            // means either we're racing with another thread using it (and we just need to retry), or it's already\n-            // marked for ending. In the latter case, we can bail here.\n-            if ( entry.isMarkedForEnding() )\n-            {\n-                // Someone did indeed manage to mark it for ending, which means it will be thrown out (or has already).\n-                return entry.value;\n-            }\n-        }\n+      return state.compareAndSet(IN_USE, MARKED_FOR_END);\n     }\n \n-    public VALUE acquire( KEY key ) throws NoSuchEntryException, ConcurrentAccessException\n+    public boolean isMarkedForEnding()\n     {\n-        Entry entry = repo.get( key );\n-        if ( entry == null )\n-        {\n-            throw new NoSuchEntryException( String.format(\"Cannot access '%s', no such entry exists.\", key) );\n-        }\n-        if ( entry.acquire() )\n-        {\n-            return entry.value;\n-        }\n-        throw new ConcurrentAccessException( String.format(\"Cannot access '%s', because another client is currently using it.\", key) );\n+      return state.get() == MARKED_FOR_END;\n     }\n \n-    public void release( KEY key )\n+    @Override\n+    public String toString()\n     {\n-        Entry entry = repo.get( key );\n-        if ( entry != null && !entry.release() )\n-        {\n-            // This happens when another client has asked that this entry be ended while we were using it, leaving us\n-            // a note to not release the object back to the public, and to end its life when we are done with it.\n-            end0( key, entry.value );\n-        }\n+      return format(\"%s[%s last accessed at %d (%s ago)\", getClass().getSimpleName(),\n+          value, latestActivityTimestamp, duration(currentTimeMillis() - latestActivityTimestamp));\n+    }\n+  }\n+\n+  public TimedRepository(Factory<VALUE> provider, Consumer<VALUE> reaper, long timeout, Clock clock)\n+  {\n+    this.factory = provider;\n+    this.reaper = reaper;\n+    this.timeout = timeout;\n+    this.clock = clock;\n+  }\n+\n+  public void begin(KEY key) throws ConcurrentAccessException\n+  {\n+    VALUE instance = factory.newInstance();\n+    Entry existing;\n+    if ((existing = repo.putIfAbsent(key, new Entry(instance))) != null)\n+    {\n+      reaper.accept(instance); // Need to clear up our optimistically allocated value\n+      throw new ConcurrentAccessException(String.format(\n+          \"Cannot begin '%s', because %s with that key already exists.\", key, existing));\n     }\n+  }\n+\n+  /**\n+   * End the life of a stored entry. If the entry is currently in use, it will be thrown out as soon as the other client\n+   * is done with it.\n+   */\n+  public VALUE end(KEY key)\n+  {\n+    while (true)\n+    {\n+      Entry entry = repo.get(key);\n+      if (entry == null)\n+      {\n+        return null;\n+      }\n+\n+      // Ending the life of an entry is somewhat complicated, because we promise the callee here that if someone\n+      // else is concurrently using the entry, we will ensure that either we or the other user will end the entry\n+      // life when the other user is done with it.\n+\n+      // First, assume the entry is in use and try and mark it to be ended by the other user\n+      if (entry.markForEndingIfInUse())\n+      {\n+        // The entry was indeed in use, and we successfully marked it to be ended. That's all we need to do here,\n+        // the other user will see the ending flag when releasing the entry.\n+        return entry.value;\n+      }\n+\n+      // Marking it for ending failed, likely because the entry is currently idle - lets try and just acquire it\n+      // and throw it out ourselves\n+      if (entry.acquire())\n+      {\n+        // Got it, just throw it away\n+        end0(key, entry.value);\n+        return entry.value;\n+      }\n+\n+      // We didn't manage to mark this for ending, and we didn't manage to acquire it to end it ourselves, which\n+      // means either we're racing with another thread using it (and we just need to retry), or it's already\n+      // marked for ending. In the latter case, we can bail here.\n+      if (entry.isMarkedForEnding())\n+      {\n+        // Someone did indeed manage to mark it for ending, which means it will be thrown out (or has already).\n+        return entry.value;\n+      }\n+    }\n+  }\n \n-    public Set<KEY> keys()\n+  public VALUE acquire(KEY key) throws NoSuchEntryException, ConcurrentAccessException\n+  {\n+    Entry entry = repo.get(key);\n+    if (entry == null)\n+    {\n+      throw new NoSuchEntryException(String.format(\"Cannot access '%s', no such entry exists.\", key));\n+    }\n+    if (entry.acquire())\n     {\n-        return repo.keySet();\n+      return entry.value;\n     }\n+    throw new ConcurrentAccessException(String.format(\"Cannot access '%s', because another client is currently using it.\", key));\n+  }\n \n-    @Override\n-    public void run()\n+  public void release(KEY key)\n+  {\n+    Entry entry = repo.get(key);\n+    if (entry != null && !entry.release())\n+    {\n+      // This happens when another client has asked that this entry be ended while we were using it, leaving us\n+      // a note to not release the object back to the public, and to end its life when we are done with it.\n+      end0(key, entry.value);\n+    }\n+  }\n+\n+  public Set<KEY> keys()\n+  {\n+    return repo.keySet();\n+  }\n+\n+  @Override\n+  public void run()\n+  {\n+    long maxAllowedAge = clock.millis() - timeout;\n+    for (KEY key : keys())\n     {\n-        long maxAllowedAge = clock.millis() - timeout;\n-        for ( KEY key : keys() )\n+      Entry entry = repo.get(key);\n+      if ((entry != null) && (entry.latestActivityTimestamp < maxAllowedAge))\n+      {\n+        if ((entry.latestActivityTimestamp < maxAllowedAge) && entry.acquire())\n         {\n-            Entry entry = repo.get( key );\n-            if ( (entry != null) && (entry.latestActivityTimestamp < maxAllowedAge) )\n-            {\n-                if ( (entry.latestActivityTimestamp < maxAllowedAge) && entry.acquire() )\n-                {\n-                    end0( key, entry.value );\n-                }\n-            }\n+          end0(key, entry.value);\n         }\n+      }\n     }\n+  }\n \n-    private void end0( KEY key, VALUE value )\n-    {\n-        repo.remove( key );\n-        reaper.accept( value );\n-    }\n+  private void end0(KEY key, VALUE value)\n+  {\n+    repo.remove(key);\n+    reaper.accept(value);\n+  }\n }\n",
            "diff_size": 261
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}