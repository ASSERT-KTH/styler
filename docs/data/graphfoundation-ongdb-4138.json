{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4138",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "151",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "364",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "383",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4138/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4138/Schema.java\nindex 2116431e5c7..6133916b774 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4138/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4138/Schema.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.rmi.RemoteException;\n@@ -52,431 +53,425 @@ import static org.neo4j.shell.Continuation.INPUT_COMPLETE;\n \n public class Schema extends TransactionProvidingApp\n {\n-    private static final String INDENT = \"  \";\n-\n-    private static final Function<IndexDefinition,String> LABEL_COMPARE_FUNCTION =\n-            index -> index.getLabel().name();\n-\n+  private static final String INDENT = \"  \";\n+\n+  private static final Function<IndexDefinition, String> LABEL_COMPARE_FUNCTION =\n+      index -> index.getLabel().name();\n+\n+  {\n+    addOptionDefinition(\"l\", new OptionDefinition(OptionValueType.MUST,\n+        \"Specifies which label selected operation is about\"));\n+    addOptionDefinition(\"r\", new OptionDefinition(OptionValueType.MUST,\n+        \"Specifies which relationship type selected operation is about\"));\n+    addOptionDefinition(\"p\", new OptionDefinition(OptionValueType.MUST,\n+        \"Specifies which property selected operation is about\"));\n+    addOptionDefinition(\"a\", new OptionDefinition(OptionValueType.NONE,\n+        \"Used together with schema sample to indicate that all indexes should be sampled\"));\n+    addOptionDefinition(\"f\", new OptionDefinition(OptionValueType.NONE,\n+        \"Used together with schema sample to force indexes to be sampled\"));\n+    addOptionDefinition(\"v\", new OptionDefinition(OptionValueType.NONE,\n+        \"Verbose output of failure descriptions etc.\"));\n+  }\n+\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Accesses db schema. Usage: schema <action> <options...>\\n\" +\n+        \"Listing indexes\\n\" +\n+        \"  schema ls\\n\" +\n+        \"  schema ls -l :Person\\n\" +\n+        \"  schema ls -r :KNOWS\\n\" +\n+        \"Sample all indexes\\n\" +\n+        \"  schema sample -a\\n\" +\n+        \"Sample a specific index\\n\" +\n+        \"  schema sample -l :Person -p name\\n\" +\n+        \"  schema sample -r :KNOWS -p since\\n\" +\n+        \"Force a sampling of a specific index\\n\" +\n+        \"  schema sample -f -l :Person -p name\\n\" +\n+        \"Awaiting indexes to come online\\n\" +\n+        \"  schema await -l :Person -p name\\n\" +\n+        \"Print indexing progress\\n\" +\n+        \"  schema progress\\n\" +\n+        \"  schema progress -l :Person\\n\" +\n+        \"  schema progress -l :Person -p name\";\n+  }\n+\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session, Output out) throws Exception\n+  {\n+    String action = parser.argumentWithDefault(0, \"ls\");\n+    org.neo4j.graphdb.schema.Schema schema = getServer().getDb().schema();\n+    Label[] labels = parseLabels(parser);\n+    RelationshipType[] relTypes = parseRelTypes(parser);\n+    String property = parser.option(\"p\", null);\n+    boolean sampleAll = parser.options().containsKey(\"a\");\n+    boolean forceSample = parser.options().containsKey(\"f\");\n+    boolean verbose = parser.options().containsKey(\"v\");\n+\n+    switch (action)\n     {\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which label selected operation is about\" ) );\n-        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which relationship type selected operation is about\" ) );\n-        addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which property selected operation is about\" ) );\n-        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-                \"Used together with schema sample to indicate that all indexes should be sampled\" ) );\n-        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.NONE,\n-                \"Used together with schema sample to force indexes to be sampled\" ) );\n-        addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE,\n-                \"Verbose output of failure descriptions etc.\" ) );\n-    }\n-\n-    @Override\n-    public String getDescription()\n-    {\n-        return \"Accesses db schema. Usage: schema <action> <options...>\\n\" +\n-               \"Listing indexes\\n\" +\n-               \"  schema ls\\n\" +\n-               \"  schema ls -l :Person\\n\" +\n-               \"  schema ls -r :KNOWS\\n\" +\n-               \"Sample all indexes\\n\" +\n-               \"  schema sample -a\\n\" +\n-               \"Sample a specific index\\n\" +\n-               \"  schema sample -l :Person -p name\\n\" +\n-               \"  schema sample -r :KNOWS -p since\\n\" +\n-               \"Force a sampling of a specific index\\n\" +\n-               \"  schema sample -f -l :Person -p name\\n\" +\n-               \"Awaiting indexes to come online\\n\" +\n-               \"  schema await -l :Person -p name\\n\" +\n-               \"Print indexing progress\\n\" +\n-               \"  schema progress\\n\" +\n-               \"  schema progress -l :Person\\n\" +\n-               \"  schema progress -l :Person -p name\";\n-    }\n-\n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws Exception\n-    {\n-        String action = parser.argumentWithDefault( 0, \"ls\" );\n-        org.neo4j.graphdb.schema.Schema schema = getServer().getDb().schema();\n-        Label[] labels = parseLabels( parser );\n-        RelationshipType[] relTypes = parseRelTypes( parser );\n-        String property = parser.option( \"p\", null );\n-        boolean sampleAll = parser.options().containsKey( \"a\" );\n-        boolean forceSample = parser.options().containsKey( \"f\" );\n-        boolean verbose = parser.options().containsKey( \"v\" );\n-\n-        switch ( action )\n+      case \"await\":\n+        if (relTypes.length > 0)\n         {\n-        case \"await\":\n-            if ( relTypes.length > 0 )\n-            {\n-                throw new ShellException( \"It is only possible to await nodes related index\" );\n-            }\n-            awaitIndexes( out, schema, labels, property );\n-            break;\n-        case \"progress\":\n-            if ( relTypes.length > 0 )\n-            {\n-                throw new ShellException( \"It is only possible to show progress on nodes related index\" );\n-            }\n-            printIndexProgress( out, schema, labels, property );\n-            break;\n-        case \"ls\":\n-            listIndexesAndConstraints( out, schema, labels, relTypes, property, verbose );\n-            break;\n-        case \"sample\":\n-            if ( relTypes.length > 0 )\n-            {\n-                throw new ShellException( \"It is only possible to sample nodes related index\" );\n-            }\n-            sampleIndexes( labels, property, sampleAll, forceSample );\n-            break;\n-        default:\n-            out.println( \"Unknown action: \" + action + \"\\nUSAGE:\\n\" + getDescription() );\n-            break;\n+          throw new ShellException(\"It is only possible to await nodes related index\");\n         }\n-\n-        return INPUT_COMPLETE;\n-    }\n-\n-    private void listIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            RelationshipType[] relTypes, String property, boolean verbose ) throws RemoteException\n-    {\n-        if ( labels.length > 0 && relTypes.length == 0 )\n+        awaitIndexes(out, schema, labels, property);\n+        break;\n+      case \"progress\":\n+        if (relTypes.length > 0)\n         {\n-            listNodeIndexesAndConstraints( out, schema, labels, property, verbose );\n+          throw new ShellException(\"It is only possible to show progress on nodes related index\");\n         }\n-        else if ( relTypes.length > 0 && labels.length == 0 )\n+        printIndexProgress(out, schema, labels, property);\n+        break;\n+      case \"ls\":\n+        listIndexesAndConstraints(out, schema, labels, relTypes, property, verbose);\n+        break;\n+      case \"sample\":\n+        if (relTypes.length > 0)\n         {\n-            listRelationshipIndexesAndConstraints( out, schema, relTypes, property, verbose );\n-        }\n-        else\n-        {\n-            listAllIndexesAndConstraints( out, schema, labels, relTypes, property, verbose );\n+          throw new ShellException(\"It is only possible to sample nodes related index\");\n         }\n+        sampleIndexes(labels, property, sampleAll, forceSample);\n+        break;\n+      default:\n+        out.println(\"Unknown action: \" + action + \"\\nUSAGE:\\n\" + getDescription());\n+        break;\n     }\n \n-    private void sampleIndexes( Label[] labels, String property, boolean sampleAll, boolean forceSample )\n-            throws ShellException\n-    {\n+    return INPUT_COMPLETE;\n+  }\n \n-        IndexingService indexingService = getServer().getDb().getDependencyResolver().resolveDependency(\n-                IndexingService.class );\n-        if ( indexingService == null )\n-        {\n-            throw new ShellException( \"Internal error: failed to resolve IndexingService\" );\n-        }\n+  private void listIndexesAndConstraints(Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n+                                         RelationshipType[] relTypes, String property, boolean verbose) throws RemoteException\n+  {\n+    if (labels.length > 0 && relTypes.length == 0)\n+    {\n+      listNodeIndexesAndConstraints(out, schema, labels, property, verbose);\n+    } else if (relTypes.length > 0 && labels.length == 0)\n+    {\n+      listRelationshipIndexesAndConstraints(out, schema, relTypes, property, verbose);\n+    } else\n+    {\n+      listAllIndexesAndConstraints(out, schema, labels, relTypes, property, verbose);\n+    }\n+  }\n \n-        IndexSamplingMode samplingMode = getSamplingMode( forceSample );\n+  private void sampleIndexes(Label[] labels, String property, boolean sampleAll, boolean forceSample)\n+      throws ShellException\n+  {\n \n-        // Trigger sampling for all indices\n-        if ( sampleAll )\n-        {\n-            indexingService.triggerIndexSampling( samplingMode );\n-            return;\n-        }\n+    IndexingService indexingService = getServer().getDb().getDependencyResolver().resolveDependency(\n+        IndexingService.class);\n+    if (indexingService == null)\n+    {\n+      throw new ShellException(\"Internal error: failed to resolve IndexingService\");\n+    }\n \n-        validateLabelsAndProperty( labels, property );\n+    IndexSamplingMode samplingMode = getSamplingMode(forceSample);\n \n-        int labelKey;\n-        int propertyKey;\n+    // Trigger sampling for all indices\n+    if (sampleAll)\n+    {\n+      indexingService.triggerIndexSampling(samplingMode);\n+      return;\n+    }\n \n-        TokenRead tokenRead = getServer().getTokenRead();\n-        labelKey = tokenRead.nodeLabel( labels[0].name() );\n-        propertyKey = tokenRead.propertyKey( property );\n+    validateLabelsAndProperty(labels, property);\n \n-        if ( labelKey == -1 )\n-        {\n-            throw new ShellException( \"No label associated with '\" + labels[0].name() + \"' was found\" );\n-        }\n-        if ( propertyKey == -1 )\n-        {\n-            throw new ShellException( \"No property associated with '\" + property + \"' was found\" );\n-        }\n+    int labelKey;\n+    int propertyKey;\n \n-        try\n-        {\n-            indexingService.triggerIndexSampling( SchemaDescriptorFactory.forLabel( labelKey, propertyKey ),\n-                    samplingMode );\n-        }\n-        catch ( IndexNotFoundKernelException e )\n-        {\n-            throw new ShellException( e.getMessage() );\n-        }\n-    }\n+    TokenRead tokenRead = getServer().getTokenRead();\n+    labelKey = tokenRead.nodeLabel(labels[0].name());\n+    propertyKey = tokenRead.propertyKey(property);\n \n-    private IndexSamplingMode getSamplingMode( boolean forceSample )\n+    if (labelKey == -1)\n     {\n-        if ( forceSample )\n-        {\n-            return IndexSamplingMode.TRIGGER_REBUILD_ALL;\n-        }\n-        else\n-        {\n-            return IndexSamplingMode.TRIGGER_REBUILD_UPDATED;\n-        }\n+      throw new ShellException(\"No label associated with '\" + labels[0].name() + \"' was found\");\n     }\n-\n-    private void validateLabelsAndProperty( Label[] labels, String property ) throws ShellException\n+    if (propertyKey == -1)\n     {\n-        if ( labels.length == 0 && property == null )\n-        {\n-            throw new ShellException( \"Invalid usage of sample. \\nUSAGE:\\n\" + getDescription() );\n-        }\n-\n-        if ( labels.length > 1 )\n-        {\n-            throw new ShellException( \"Only one label must be provided\" );\n-        }\n-\n-        // If we provide one we must also provide the other\n-        if ( property == null || labels.length == 0 )\n-        {\n-            throw new ShellException( \"Provide both the property and the label, or run with -a to sample all indexes\" );\n-        }\n+      throw new ShellException(\"No property associated with '\" + property + \"' was found\");\n     }\n \n-    private void printIndexProgress( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            String property ) throws RemoteException\n+    try\n     {\n-        for ( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property ) )\n-        {\n-            out.println( String.format( \"%s: %1.1f%%\", index.getLabel().name(),\n-                    schema.getIndexPopulationProgress( index ).getCompletedPercentage() ) );\n-        }\n-    }\n-\n-    private void awaitIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property )\n-            throws RemoteException\n+      indexingService.triggerIndexSampling(SchemaDescriptorFactory.forLabel(labelKey, propertyKey),\n+          samplingMode);\n+    } catch (IndexNotFoundKernelException e)\n     {\n-        for ( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property ) )\n-        {\n-            if ( schema.getIndexState( index ) != IndexState.ONLINE )\n-            {\n-                out.println( String.format( \"Awaiting :%s ON %s %s\", index.getLabel().name(),\n-                        asList( index.getPropertyKeys() ), IndexState.ONLINE ) );\n-                schema.awaitIndexOnline( index, 10000, TimeUnit.DAYS );\n-            }\n-        }\n+      throw new ShellException(e.getMessage());\n     }\n+  }\n \n-    private void listNodeIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            String property, boolean verbose ) throws RemoteException\n+  private IndexSamplingMode getSamplingMode(boolean forceSample)\n+  {\n+    if (forceSample)\n     {\n-        reportNodeIndexes( out, schema, labels, property, verbose );\n-        reportNodeConstraints( out, schema, labels, property );\n+      return IndexSamplingMode.TRIGGER_REBUILD_ALL;\n+    } else\n+    {\n+      return IndexSamplingMode.TRIGGER_REBUILD_UPDATED;\n     }\n+  }\n \n-    private void listRelationshipIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n+  private void validateLabelsAndProperty(Label[] labels, String property) throws ShellException\n+  {\n+    if (labels.length == 0 && property == null)\n     {\n-        // no relationship indexes atm\n-        reportRelationshipConstraints( out, schema, types, property );\n+      throw new ShellException(\"Invalid usage of sample. \\nUSAGE:\\n\" + getDescription());\n     }\n \n-    private void listAllIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n+    if (labels.length > 1)\n     {\n-        reportNodeIndexes( out, schema, labels, property, verbose );\n-        reportAllConstraints( out, schema, labels, types, property );\n+      throw new ShellException(\"Only one label must be provided\");\n     }\n \n-    private void reportNodeConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            Label[] labels, String property ) throws RemoteException\n+    // If we provide one we must also provide the other\n+    if (property == null || labels.length == 0)\n     {\n-        Iterable<ConstraintDefinition> nodeConstraints = constraintsByLabelAndProperty( schema, labels, property );\n-        reportConstraints( out, nodeConstraints );\n+      throw new ShellException(\"Provide both the property and the label, or run with -a to sample all indexes\");\n     }\n+  }\n \n-    private void reportRelationshipConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            RelationshipType[] types, String property ) throws RemoteException\n+  private void printIndexProgress(Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n+                                  String property) throws RemoteException\n+  {\n+    for (IndexDefinition index : indexesByLabelAndProperty(schema, labels, property))\n     {\n-        Iterable<ConstraintDefinition> relConstraints = constraintsByTypeAndProperty( schema, types, property );\n-        reportConstraints( out, relConstraints );\n+      out.println(String.format(\"%s: %1.1f%%\", index.getLabel().name(),\n+          schema.getIndexPopulationProgress(index).getCompletedPercentage()));\n     }\n+  }\n \n-    private void reportAllConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            Label[] labels, RelationshipType[] types, String property ) throws RemoteException\n+  private void awaitIndexes(Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property)\n+      throws RemoteException\n+  {\n+    for (IndexDefinition index : indexesByLabelAndProperty(schema, labels, property))\n     {\n-        Iterable<ConstraintDefinition> allConstraints = concat(\n-                constraintsByLabelAndProperty( schema, labels, property ),\n-                constraintsByTypeAndProperty( schema, types, property ) );\n-\n-        reportConstraints( out, allConstraints );\n+      if (schema.getIndexState(index) != IndexState.ONLINE)\n+      {\n+        out.println(String.format(\"Awaiting :%s ON %s %s\", index.getLabel().name(),\n+            asList(index.getPropertyKeys()), IndexState.ONLINE));\n+        schema.awaitIndexOnline(index, 10000, TimeUnit.DAYS);\n+      }\n     }\n-\n-    private void reportConstraints( Output out, Iterable<ConstraintDefinition> constraints ) throws RemoteException\n+  }\n+\n+  private void listNodeIndexesAndConstraints(Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n+                                             String property, boolean verbose) throws RemoteException\n+  {\n+    reportNodeIndexes(out, schema, labels, property, verbose);\n+    reportNodeConstraints(out, schema, labels, property);\n+  }\n+\n+  private void listRelationshipIndexesAndConstraints(Output out, org.neo4j.graphdb.schema.Schema schema,\n+                                                     RelationshipType[] types, String property, boolean verbose) throws RemoteException\n+  {\n+    // no relationship indexes atm\n+    reportRelationshipConstraints(out, schema, types, property);\n+  }\n+\n+  private void listAllIndexesAndConstraints(Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n+                                            RelationshipType[] types, String property, boolean verbose) throws RemoteException\n+  {\n+    reportNodeIndexes(out, schema, labels, property, verbose);\n+    reportAllConstraints(out, schema, labels, types, property);\n+  }\n+\n+  private void reportNodeConstraints(Output out, org.neo4j.graphdb.schema.Schema schema,\n+                                     Label[] labels, String property) throws RemoteException\n+  {\n+    Iterable<ConstraintDefinition> nodeConstraints = constraintsByLabelAndProperty(schema, labels, property);\n+    reportConstraints(out, nodeConstraints);\n+  }\n+\n+  private void reportRelationshipConstraints(Output out, org.neo4j.graphdb.schema.Schema schema,\n+                                             RelationshipType[] types, String property) throws RemoteException\n+  {\n+    Iterable<ConstraintDefinition> relConstraints = constraintsByTypeAndProperty(schema, types, property);\n+    reportConstraints(out, relConstraints);\n+  }\n+\n+  private void reportAllConstraints(Output out, org.neo4j.graphdb.schema.Schema schema,\n+                                    Label[] labels, RelationshipType[] types, String property) throws RemoteException\n+  {\n+    Iterable<ConstraintDefinition> allConstraints = concat(\n+        constraintsByLabelAndProperty(schema, labels, property),\n+        constraintsByTypeAndProperty(schema, types, property));\n+\n+    reportConstraints(out, allConstraints);\n+  }\n+\n+  private void reportConstraints(Output out, Iterable<ConstraintDefinition> constraints) throws RemoteException\n+  {\n+    int j = 0;\n+    for (ConstraintDefinition constraint : constraints)\n     {\n-        int j = 0;\n-        for ( ConstraintDefinition constraint : constraints )\n-        {\n-            if ( j == 0 )\n-            {\n-                out.println();\n-                out.println( \"Constraints\" );\n-            }\n+      if (j == 0)\n+      {\n+        out.println();\n+        out.println(\"Constraints\");\n+      }\n \n-            out.println( indent( constraint.toString() ) );\n-            j++;\n+      out.println(indent(constraint.toString()));\n+      j++;\n \n-        }\n-        if ( j == 0 )\n-        {\n-            out.println();\n-            out.println( \"No constraints\" );\n-        }\n     }\n-\n-    private void reportNodeIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property,\n-            boolean verbose ) throws RemoteException\n+    if (j == 0)\n     {\n-        ColumnPrinter printer = new ColumnPrinter( indent( \"ON \" ), \"\", \"\" );\n-        Iterable<IndexDefinition> indexes = indexesByLabelAndProperty( schema, labels, property );\n-\n-        int i = 0;\n-        for ( IndexDefinition index : sort( indexes, LABEL_COMPARE_FUNCTION ) )\n-        {\n-            if ( i == 0 )\n-            {\n-                out.println( \"Indexes\" );\n-            }\n-            String labelAndProperties = String.format( \":%s(%s)\", index.getLabel().name(), commaSeparate( index\n-                    .getPropertyKeys() ) );\n-\n-            IndexState state = schema.getIndexState( index );\n-            String uniqueOrNot = index.isConstraintIndex() ? \"(for uniqueness constraint)\" : \"\";\n-\n-            printer.add( labelAndProperties, state, uniqueOrNot );\n-            if ( verbose && state == IndexState.FAILED )\n-            {\n-                printer.addRaw( schema.getIndexFailure( index ) );\n-            }\n-            i++;\n-        }\n-        if ( i == 0 )\n-        {\n-            out.println( \"No indexes\" );\n-        }\n-        else\n-        {\n-            printer.print( out );\n-        }\n+      out.println();\n+      out.println(\"No constraints\");\n     }\n+  }\n \n-    private String commaSeparate( Iterable<String> keys )\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        boolean first = true;\n-        for ( String key : keys )\n-        {\n-            if ( !first )\n-            {\n-                builder.append( \", \" );\n-\n-            }\n-            else\n-            {\n-                first = false;\n-            }\n-            builder.append( key );\n-        }\n-        return builder.toString();\n-    }\n+  private void reportNodeIndexes(Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property,\n+                                 boolean verbose) throws RemoteException\n+  {\n+    ColumnPrinter printer = new ColumnPrinter(indent(\"ON \"), \"\", \"\");\n+    Iterable<IndexDefinition> indexes = indexesByLabelAndProperty(schema, labels, property);\n \n-    private Iterable<IndexDefinition> indexesByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            Label[] labels, final String property )\n+    int i = 0;\n+    for (IndexDefinition index : sort(indexes, LABEL_COMPARE_FUNCTION))\n     {\n-        Iterable<IndexDefinition> indexes = indexesByLabel( schema, labels );\n-        if ( property != null )\n-        {\n-            indexes = filter( index -> indexOf( property, index.getPropertyKeys() ) != -1, indexes );\n-        }\n-        return indexes;\n+      if (i == 0)\n+      {\n+        out.println(\"Indexes\");\n+      }\n+      String labelAndProperties = String.format(\":%s(%s)\", index.getLabel().name(), commaSeparate(index\n+          .getPropertyKeys()));\n+\n+      IndexState state = schema.getIndexState(index);\n+      String uniqueOrNot = index.isConstraintIndex() ? \"(for uniqueness constraint)\" : \"\";\n+\n+      printer.add(labelAndProperties, state, uniqueOrNot);\n+      if (verbose && state == IndexState.FAILED)\n+      {\n+        printer.addRaw(schema.getIndexFailure(index));\n+      }\n+      i++;\n     }\n-\n-    private Iterable<ConstraintDefinition> constraintsByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            final Label[] labels, final String property )\n+    if (i == 0)\n     {\n-        return filter( constraint -> isNodeConstraint( constraint ) &&\n-                             hasLabel( constraint, labels ) &&\n-                             isMatchingConstraint( constraint, property ), schema.getConstraints() );\n-    }\n-\n-    private Iterable<ConstraintDefinition> constraintsByTypeAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            final RelationshipType[] types, final String property )\n+      out.println(\"No indexes\");\n+    } else\n     {\n-        return filter( constraint -> isRelationshipConstraint( constraint ) &&\n-                             hasType( constraint, types ) &&\n-                             isMatchingConstraint( constraint, property ), schema.getConstraints() );\n+      printer.print(out);\n     }\n+  }\n \n-    private boolean hasLabel( ConstraintDefinition constraint, Label[] labels )\n+  private String commaSeparate(Iterable<String> keys)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    boolean first = true;\n+    for (String key : keys)\n     {\n-        if ( labels.length == 0 )\n-        {\n-            return true;\n-        }\n-\n-        for ( Label label : labels )\n-        {\n-            if ( constraint.getLabel().name().equals( label.name() ) )\n-            {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+      if (!first)\n+      {\n+        builder.append(\", \");\n+\n+      } else\n+      {\n+        first = false;\n+      }\n+      builder.append(key);\n     }\n-\n-    private static boolean hasType( ConstraintDefinition constraint, RelationshipType[] types )\n+    return builder.toString();\n+  }\n+\n+  private Iterable<IndexDefinition> indexesByLabelAndProperty(org.neo4j.graphdb.schema.Schema schema,\n+                                                              Label[] labels, final String property)\n+  {\n+    Iterable<IndexDefinition> indexes = indexesByLabel(schema, labels);\n+    if (property != null)\n     {\n-        if ( types.length == 0 )\n-        {\n-            return true;\n-        }\n-\n-        for ( RelationshipType type : types )\n-        {\n-            if ( constraint.getRelationshipType().name().equals( type.name() ) )\n-            {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+      indexes = filter(index -> indexOf(property, index.getPropertyKeys()) != -1, indexes);\n     }\n-\n-    private static boolean isNodeConstraint( ConstraintDefinition constraint )\n+    return indexes;\n+  }\n+\n+  private Iterable<ConstraintDefinition> constraintsByLabelAndProperty(org.neo4j.graphdb.schema.Schema schema,\n+                                                                       final Label[] labels, final String property)\n+  {\n+    return filter(constraint -> isNodeConstraint(constraint) &&\n+        hasLabel(constraint, labels) &&\n+        isMatchingConstraint(constraint, property), schema.getConstraints());\n+  }\n+\n+  private Iterable<ConstraintDefinition> constraintsByTypeAndProperty(org.neo4j.graphdb.schema.Schema schema,\n+                                                                      final RelationshipType[] types, final String property)\n+  {\n+    return filter(constraint -> isRelationshipConstraint(constraint) &&\n+        hasType(constraint, types) &&\n+        isMatchingConstraint(constraint, property), schema.getConstraints());\n+  }\n+\n+  private boolean hasLabel(ConstraintDefinition constraint, Label[] labels)\n+  {\n+    if (labels.length == 0)\n     {\n-        return constraint.isConstraintType( ConstraintType.UNIQUENESS ) ||\n-               constraint.isConstraintType( ConstraintType.NODE_KEY ) ||\n-               constraint.isConstraintType( ConstraintType.NODE_PROPERTY_EXISTENCE );\n+      return true;\n     }\n \n-    private static boolean isRelationshipConstraint( ConstraintDefinition constraint )\n+    for (Label label : labels)\n     {\n-        return constraint.isConstraintType( ConstraintType.RELATIONSHIP_PROPERTY_EXISTENCE );\n+      if (constraint.getLabel().name().equals(label.name()))\n+      {\n+        return true;\n+      }\n     }\n \n-    private boolean isMatchingConstraint( ConstraintDefinition constraint, final String property )\n+    return false;\n+  }\n+\n+  private static boolean hasType(ConstraintDefinition constraint, RelationshipType[] types)\n+  {\n+    if (types.length == 0)\n     {\n-        return property == null || indexOf( property, constraint.getPropertyKeys() ) != -1;\n+      return true;\n     }\n \n-    private Iterable<IndexDefinition> indexesByLabel( org.neo4j.graphdb.schema.Schema schema, Label[] labels )\n+    for (RelationshipType type : types)\n     {\n-        Iterable<IndexDefinition> indexes = schema.getIndexes();\n-        for ( final Label label : labels )\n-        {\n-            indexes = filter( item -> item.getLabel().name().equals( label.name() ), indexes );\n-        }\n-        return indexes;\n+      if (constraint.getRelationshipType().name().equals(type.name()))\n+      {\n+        return true;\n+      }\n     }\n \n-    private static String indent( String str )\n+    return false;\n+  }\n+\n+  private static boolean isNodeConstraint(ConstraintDefinition constraint)\n+  {\n+    return constraint.isConstraintType(ConstraintType.UNIQUENESS) ||\n+        constraint.isConstraintType(ConstraintType.NODE_KEY) ||\n+        constraint.isConstraintType(ConstraintType.NODE_PROPERTY_EXISTENCE);\n+  }\n+\n+  private static boolean isRelationshipConstraint(ConstraintDefinition constraint)\n+  {\n+    return constraint.isConstraintType(ConstraintType.RELATIONSHIP_PROPERTY_EXISTENCE);\n+  }\n+\n+  private boolean isMatchingConstraint(ConstraintDefinition constraint, final String property)\n+  {\n+    return property == null || indexOf(property, constraint.getPropertyKeys()) != -1;\n+  }\n+\n+  private Iterable<IndexDefinition> indexesByLabel(org.neo4j.graphdb.schema.Schema schema, Label[] labels)\n+  {\n+    Iterable<IndexDefinition> indexes = schema.getIndexes();\n+    for (final Label label : labels)\n     {\n-        return INDENT + str;\n+      indexes = filter(item -> item.getLabel().name().equals(label.name()), indexes);\n     }\n+    return indexes;\n+  }\n+\n+  private static String indent(String str)\n+  {\n+    return INDENT + str;\n+  }\n }\n",
            "diff_size": 570
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 629).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "96",
                    "column": "33",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "107",
                    "column": "33",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "125",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "34",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "204",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "276",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "375",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "419",
                    "column": "73",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4138/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4138/Schema.java\nindex 2116431e5c7..258ed16d641 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4138/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4138/Schema.java\n@@ -56,43 +56,19 @@ public class Schema extends TransactionProvidingApp\n \n     private static final Function<IndexDefinition,String> LABEL_COMPARE_FUNCTION =\n             index -> index.getLabel().name();\n-\n-    {\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which label selected operation is about\" ) );\n-        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which relationship type selected operation is about\" ) );\n-        addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which property selected operation is about\" ) );\n-        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-                \"Used together with schema sample to indicate that all indexes should be sampled\" ) );\n-        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.NONE,\n-                \"Used together with schema sample to force indexes to be sampled\" ) );\n-        addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE,\n-                \"Verbose output of failure descriptions etc.\" ) );\n+{\n+        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST, \"Specifies which label selected operation is about\" ) );\n+addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST, \"Specifies which relationship type selected operation is about\" ) );\n+addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.MUST, \"Specifies which property selected operation is about\" ) );\n+addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE, \"Used together with schema sample to indicate that all indexes should be sampled\" ) );\n+addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.NONE, \"Used together with schema sample to force indexes to be sampled\" ) );\n+addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE, \"Verbose output of failure descriptions etc.\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Accesses db schema. Usage: schema <action> <options...>\\n\" +\n-               \"Listing indexes\\n\" +\n-               \"  schema ls\\n\" +\n-               \"  schema ls -l :Person\\n\" +\n-               \"  schema ls -r :KNOWS\\n\" +\n-               \"Sample all indexes\\n\" +\n-               \"  schema sample -a\\n\" +\n-               \"Sample a specific index\\n\" +\n-               \"  schema sample -l :Person -p name\\n\" +\n-               \"  schema sample -r :KNOWS -p since\\n\" +\n-               \"Force a sampling of a specific index\\n\" +\n-               \"  schema sample -f -l :Person -p name\\n\" +\n-               \"Awaiting indexes to come online\\n\" +\n-               \"  schema await -l :Person -p name\\n\" +\n-               \"Print indexing progress\\n\" +\n-               \"  schema progress\\n\" +\n-               \"  schema progress -l :Person\\n\" +\n-               \"  schema progress -l :Person -p name\";\n+        return \"Accesses db schema. Usage: schema <action> <options...>\\n\" + \"Listing indexes\\n\" + \"  schema ls\\n\" + \"  schema ls -l :Person\\n\" + \"  schema ls -r :KNOWS\\n\" + \"Sample all indexes\\n\" + \"  schema sample -a\\n\" + \"Sample a specific index\\n\" + \"  schema sample -l :Person -p name\\n\" + \"  schema sample -r :KNOWS -p since\\n\" + \"Force a sampling of a specific index\\n\" + \"  schema sample -f -l :Person -p name\\n\" + \"Awaiting indexes to come online\\n\" + \"  schema await -l :Person -p name\\n\" + \"Print indexing progress\\n\" + \"  schema progress\\n\" + \"  schema progress -l :Person\\n\" + \"  schema progress -l :Person -p name\";\n     }\n \n     @Override\n@@ -106,32 +82,34 @@ public class Schema extends TransactionProvidingApp\n         boolean sampleAll = parser.options().containsKey( \"a\" );\n         boolean forceSample = parser.options().containsKey( \"f\" );\n         boolean verbose = parser.options().containsKey( \"v\" );\n-\n-        switch ( action )\n+switch ( action )\n         {\n         case \"await\":\n-            if ( relTypes.length > 0 )\n+            if ( relTypes.length> 0 )\n             {\n                 throw new ShellException( \"It is only possible to await nodes related index\" );\n             }\n-            awaitIndexes( out, schema, labels, property );\n+\n+awaitIndexes( out, schema, labels, property );\n             break;\n         case \"progress\":\n-            if ( relTypes.length > 0 )\n+            if ( relTypes.length> 0 )\n             {\n                 throw new ShellException( \"It is only possible to show progress on nodes related index\" );\n             }\n-            printIndexProgress( out, schema, labels, property );\n+\n+printIndexProgress( out, schema, labels, property );\n             break;\n         case \"ls\":\n             listIndexesAndConstraints( out, schema, labels, relTypes, property, verbose );\n             break;\n         case \"sample\":\n-            if ( relTypes.length > 0 )\n+            if ( relTypes.length> 0 )\n             {\n                 throw new ShellException( \"It is only possible to sample nodes related index\" );\n             }\n-            sampleIndexes( labels, property, sampleAll, forceSample );\n+\n+sampleIndexes( labels, property, sampleAll, forceSample );\n             break;\n         default:\n             out.println( \"Unknown action: \" + action + \"\\nUSAGE:\\n\" + getDescription() );\n@@ -143,12 +121,12 @@ public class Schema extends TransactionProvidingApp\n \n     private void listIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n             RelationshipType[] relTypes, String property, boolean verbose ) throws RemoteException\n-    {\n-        if ( labels.length > 0 && relTypes.length == 0 )\n+{\n+        if ( labels.length> 0 && relTypes.length == 0 )\n         {\n             listNodeIndexesAndConstraints( out, schema, labels, property, verbose );\n         }\n-        else if ( relTypes.length > 0 && labels.length == 0 )\n+        else if ( relTypes.length> 0 && labels.length == 0 )\n         {\n             listRelationshipIndexesAndConstraints( out, schema, relTypes, property, verbose );\n         }\n@@ -158,13 +136,10 @@ public class Schema extends TransactionProvidingApp\n         }\n     }\n \n-    private void sampleIndexes( Label[] labels, String property, boolean sampleAll, boolean forceSample )\n-            throws ShellException\n-    {\n-\n-        IndexingService indexingService = getServer().getDb().getDependencyResolver().resolveDependency(\n-                IndexingService.class );\n-        if ( indexingService == null )\n+    private void sampleIndexes( Label[] labels, String property, boolean sampleAll, boolean forceSample ) throws ShellException\n+{\n+    IndexingService indexingService = getServer().getDb().getDependencyResolver().resolveDependency( IndexingService.class );\n+if ( indexingService == null )\n         {\n             throw new ShellException( \"Internal error: failed to resolve IndexingService\" );\n         }\n@@ -186,12 +161,12 @@ public class Schema extends TransactionProvidingApp\n         TokenRead tokenRead = getServer().getTokenRead();\n         labelKey = tokenRead.nodeLabel( labels[0].name() );\n         propertyKey = tokenRead.propertyKey( property );\n-\n-        if ( labelKey == -1 )\n+if ( labelKey == -1 )\n         {\n             throw new ShellException( \"No label associated with '\" + labels[0].name() + \"' was found\" );\n         }\n-        if ( propertyKey == -1 )\n+\n+if ( propertyKey == -1 )\n         {\n             throw new ShellException( \"No property associated with '\" + property + \"' was found\" );\n         }\n@@ -200,7 +175,7 @@ public class Schema extends TransactionProvidingApp\n         {\n             indexingService.triggerIndexSampling( SchemaDescriptorFactory.forLabel( labelKey, propertyKey ),\n                     samplingMode );\n-        }\n+    }\n         catch ( IndexNotFoundKernelException e )\n         {\n             throw new ShellException( e.getMessage() );\n@@ -226,7 +201,7 @@ public class Schema extends TransactionProvidingApp\n             throw new ShellException( \"Invalid usage of sample. \\nUSAGE:\\n\" + getDescription() );\n         }\n \n-        if ( labels.length > 1 )\n+        if ( labels.length> 1 )\n         {\n             throw new ShellException( \"Only one label must be provided\" );\n         }\n@@ -240,71 +215,66 @@ public class Schema extends TransactionProvidingApp\n \n     private void printIndexProgress( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n             String property ) throws RemoteException\n-    {\n+{\n         for ( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property ) )\n         {\n-            out.println( String.format( \"%s: %1.1f%%\", index.getLabel().name(),\n-                    schema.getIndexPopulationProgress( index ).getCompletedPercentage() ) );\n-        }\n+            out.println( String.format( \"%s: %1.1f%%\", index.getLabel().name(), schema.getIndexPopulationProgress( index ).getCompletedPercentage() ) );\n+    }\n     }\n \n-    private void awaitIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property )\n-            throws RemoteException\n-    {\n+    private void awaitIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property ) throws RemoteException\n+{\n         for ( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property ) )\n         {\n             if ( schema.getIndexState( index ) != IndexState.ONLINE )\n             {\n                 out.println( String.format( \"Awaiting :%s ON %s %s\", index.getLabel().name(),\n                         asList( index.getPropertyKeys() ), IndexState.ONLINE ) );\n-                schema.awaitIndexOnline( index, 10000, TimeUnit.DAYS );\n+schema.awaitIndexOnline( index, 10000, TimeUnit.DAYS );\n             }\n         }\n     }\n \n     private void listNodeIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n             String property, boolean verbose ) throws RemoteException\n-    {\n+{\n         reportNodeIndexes( out, schema, labels, property, verbose );\n         reportNodeConstraints( out, schema, labels, property );\n     }\n \n     private void listRelationshipIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n             RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n-    {\n+{\n         // no relationship indexes atm\n         reportRelationshipConstraints( out, schema, types, property );\n     }\n \n     private void listAllIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n             RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n-    {\n+{\n         reportNodeIndexes( out, schema, labels, property, verbose );\n         reportAllConstraints( out, schema, labels, types, property );\n     }\n \n     private void reportNodeConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n             Label[] labels, String property ) throws RemoteException\n-    {\n+{\n         Iterable<ConstraintDefinition> nodeConstraints = constraintsByLabelAndProperty( schema, labels, property );\n         reportConstraints( out, nodeConstraints );\n     }\n \n     private void reportRelationshipConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n             RelationshipType[] types, String property ) throws RemoteException\n-    {\n+{\n         Iterable<ConstraintDefinition> relConstraints = constraintsByTypeAndProperty( schema, types, property );\n         reportConstraints( out, relConstraints );\n     }\n \n     private void reportAllConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n             Label[] labels, RelationshipType[] types, String property ) throws RemoteException\n-    {\n-        Iterable<ConstraintDefinition> allConstraints = concat(\n-                constraintsByLabelAndProperty( schema, labels, property ),\n-                constraintsByTypeAndProperty( schema, types, property ) );\n-\n-        reportConstraints( out, allConstraints );\n+{\n+        Iterable<ConstraintDefinition> allConstraints = concat( constraintsByLabelAndProperty( schema, labels, property ), constraintsByTypeAndProperty( schema, types, property ) );\n+reportConstraints( out, allConstraints );\n     }\n \n     private void reportConstraints( Output out, Iterable<ConstraintDefinition> constraints ) throws RemoteException\n@@ -320,8 +290,7 @@ public class Schema extends TransactionProvidingApp\n \n             out.println( indent( constraint.toString() ) );\n             j++;\n-\n-        }\n+    }\n         if ( j == 0 )\n         {\n             out.println();\n@@ -331,7 +300,7 @@ public class Schema extends TransactionProvidingApp\n \n     private void reportNodeIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property,\n             boolean verbose ) throws RemoteException\n-    {\n+{\n         ColumnPrinter printer = new ColumnPrinter( indent( \"ON \" ), \"\", \"\" );\n         Iterable<IndexDefinition> indexes = indexesByLabelAndProperty( schema, labels, property );\n \n@@ -342,10 +311,9 @@ public class Schema extends TransactionProvidingApp\n             {\n                 out.println( \"Indexes\" );\n             }\n-            String labelAndProperties = String.format( \":%s(%s)\", index.getLabel().name(), commaSeparate( index\n-                    .getPropertyKeys() ) );\n \n-            IndexState state = schema.getIndexState( index );\n+String labelAndProperties = String.format( \":%s(%s)\", index.getLabel().name(), commaSeparate( index.getPropertyKeys() ) );\n+IndexState state = schema.getIndexState( index );\n             String uniqueOrNot = index.isConstraintIndex() ? \"(for uniqueness constraint)\" : \"\";\n \n             printer.add( labelAndProperties, state, uniqueOrNot );\n@@ -355,7 +323,8 @@ public class Schema extends TransactionProvidingApp\n             }\n             i++;\n         }\n-        if ( i == 0 )\n+\n+if ( i == 0 )\n         {\n             out.println( \"No indexes\" );\n         }\n@@ -374,15 +343,15 @@ public class Schema extends TransactionProvidingApp\n             if ( !first )\n             {\n                 builder.append( \", \" );\n-\n-            }\n+    }\n             else\n             {\n                 first = false;\n             }\n             builder.append( key );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     private Iterable<IndexDefinition> indexesByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema,\n@@ -393,22 +362,19 @@ public class Schema extends TransactionProvidingApp\n         {\n             indexes = filter( index -> indexOf( property, index.getPropertyKeys() ) != -1, indexes );\n         }\n-        return indexes;\n+\n+return indexes;\n     }\n \n-    private Iterable<ConstraintDefinition> constraintsByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            final Label[] labels, final String property )\n+    private Iterable<ConstraintDefinition> constraintsByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema, final Label[] labels, final String property )\n     {\n-        return filter( constraint -> isNodeConstraint( constraint ) &&\n-                             hasLabel( constraint, labels ) &&\n+        return filter( constraint -> isNodeConstraint( constraint ) && hasLabel( constraint, labels ) &&\n                              isMatchingConstraint( constraint, property ), schema.getConstraints() );\n     }\n \n-    private Iterable<ConstraintDefinition> constraintsByTypeAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            final RelationshipType[] types, final String property )\n+    private Iterable<ConstraintDefinition> constraintsByTypeAndProperty( org.neo4j.graphdb.schema.Schema schema, final RelationshipType[] types, final String property )\n     {\n-        return filter( constraint -> isRelationshipConstraint( constraint ) &&\n-                             hasType( constraint, types ) &&\n+        return filter( constraint -> isRelationshipConstraint( constraint ) && hasType( constraint, types ) &&\n                              isMatchingConstraint( constraint, property ), schema.getConstraints() );\n     }\n \n@@ -450,8 +416,7 @@ public class Schema extends TransactionProvidingApp\n \n     private static boolean isNodeConstraint( ConstraintDefinition constraint )\n     {\n-        return constraint.isConstraintType( ConstraintType.UNIQUENESS ) ||\n-               constraint.isConstraintType( ConstraintType.NODE_KEY ) ||\n+        return constraint.isConstraintType( ConstraintType.UNIQUENESS ) ||constraint.isConstraintType( ConstraintType.NODE_KEY ) ||\n                constraint.isConstraintType( ConstraintType.NODE_PROPERTY_EXISTENCE );\n     }\n \n@@ -472,11 +437,12 @@ public class Schema extends TransactionProvidingApp\n         {\n             indexes = filter( item -> item.getLabel().name().equals( label.name() ), indexes );\n         }\n-        return indexes;\n+\n+return indexes;\n     }\n \n     private static String indent( String str )\n     {\n         return INDENT + str;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 106
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 629).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "column": "53",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "column": "31",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "33",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "198",
                    "column": "32",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "210",
                    "column": "30",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "218",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "227",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "238",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "277",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "313",
                    "column": "25",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "335",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "335",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "365",
                    "column": "68",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "365",
                    "column": "101",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "368",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "370",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "370",
                    "column": "76",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "370",
                    "column": "107",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "380",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "380",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "398",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "411",
                    "column": "72",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "411",
                    "column": "129",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "421",
                    "column": "32",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "427",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "427",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4138/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4138/Schema.java\nindex 2116431e5c7..02b851f4916 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4138/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4138/Schema.java\n@@ -22,7 +22,6 @@ package org.neo4j.shell.kernel.apps;\n import java.rmi.RemoteException;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n-\n import org.neo4j.graphdb.Label;\n import org.neo4j.graphdb.RelationshipType;\n import org.neo4j.graphdb.schema.ConstraintDefinition;\n@@ -42,57 +41,36 @@ import org.neo4j.shell.OptionValueType;\n import org.neo4j.shell.Output;\n import org.neo4j.shell.Session;\n import org.neo4j.shell.ShellException;\n-\n import static org.neo4j.helpers.collection.Iterables.asList;\n+\n import static org.neo4j.helpers.collection.Iterables.concat;\n+\n import static org.neo4j.helpers.collection.Iterables.filter;\n+\n import static org.neo4j.helpers.collection.Iterables.indexOf;\n+\n import static org.neo4j.helpers.collection.Iterables.sort;\n+\n import static org.neo4j.shell.Continuation.INPUT_COMPLETE;\n \n public class Schema extends TransactionProvidingApp\n {\n     private static final String INDENT = \"  \";\n-\n-    private static final Function<IndexDefinition,String> LABEL_COMPARE_FUNCTION =\n-            index -> index.getLabel().name();\n+    private static final Function<IndexDefinition,String> LABEL_COMPARE_FUNCTION = index -> index.getLabel().name();\n \n     {\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which label selected operation is about\" ) );\n-        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which relationship type selected operation is about\" ) );\n-        addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.MUST,\n-                \"Specifies which property selected operation is about\" ) );\n-        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-                \"Used together with schema sample to indicate that all indexes should be sampled\" ) );\n-        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.NONE,\n-                \"Used together with schema sample to force indexes to be sampled\" ) );\n-        addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE,\n-                \"Verbose output of failure descriptions etc.\" ) );\n+        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST, \"Specifies which label selected operation is about\" ) );\n+        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.MUST, \"Specifies which relationship type selected operation is about\" ) );\n+        addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.MUST, \"Specifies which property selected operation is about\" ) );\n+        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE, \"Used together with schema sample to indicate that all indexes should be sampled\" ) );\n+        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.NONE, \"Used together with schema sample to force indexes to be sampled\" ) );\n+        addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE, \"Verbose output of failure descriptions etc.\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Accesses db schema. Usage: schema <action> <options...>\\n\" +\n-               \"Listing indexes\\n\" +\n-               \"  schema ls\\n\" +\n-               \"  schema ls -l :Person\\n\" +\n-               \"  schema ls -r :KNOWS\\n\" +\n-               \"Sample all indexes\\n\" +\n-               \"  schema sample -a\\n\" +\n-               \"Sample a specific index\\n\" +\n-               \"  schema sample -l :Person -p name\\n\" +\n-               \"  schema sample -r :KNOWS -p since\\n\" +\n-               \"Force a sampling of a specific index\\n\" +\n-               \"  schema sample -f -l :Person -p name\\n\" +\n-               \"Awaiting indexes to come online\\n\" +\n-               \"  schema await -l :Person -p name\\n\" +\n-               \"Print indexing progress\\n\" +\n-               \"  schema progress\\n\" +\n-               \"  schema progress -l :Person\\n\" +\n-               \"  schema progress -l :Person -p name\";\n+        return \"Accesses db schema. Usage: schema <action> <options...>\\n\" + \"Listing indexes\\n\" + \"  schema ls\\n\" + \"  schema ls -l :Person\\n\" + \"  schema ls -r :KNOWS\\n\" + \"Sample all indexes\\n\" + \"  schema sample -a\\n\" + \"Sample a specific index\\n\" + \"  schema sample -l :Person -p name\\n\" + \"  schema sample -r :KNOWS -p since\\n\" + \"Force a sampling of a specific index\\n\" + \"  schema sample -f -l :Person -p name\\n\" + \"Awaiting indexes to come online\\n\" + \"  schema await -l :Person -p name\\n\" + \"Print indexing progress\\n\" + \"  schema progress\\n\" + \"  schema progress -l :Person\\n\" + \"  schema progress -l :Person -p name\";\n     }\n \n     @Override\n@@ -106,7 +84,6 @@ public class Schema extends TransactionProvidingApp\n         boolean sampleAll = parser.options().containsKey( \"a\" );\n         boolean forceSample = parser.options().containsKey( \"f\" );\n         boolean verbose = parser.options().containsKey( \"v\" );\n-\n         switch ( action )\n         {\n         case \"await\":\n@@ -114,6 +91,7 @@ public class Schema extends TransactionProvidingApp\n             {\n                 throw new ShellException( \"It is only possible to await nodes related index\" );\n             }\n+\n             awaitIndexes( out, schema, labels, property );\n             break;\n         case \"progress\":\n@@ -121,6 +99,7 @@ public class Schema extends TransactionProvidingApp\n             {\n                 throw new ShellException( \"It is only possible to show progress on nodes related index\" );\n             }\n+\n             printIndexProgress( out, schema, labels, property );\n             break;\n         case \"ls\":\n@@ -131,24 +110,25 @@ public class Schema extends TransactionProvidingApp\n             {\n                 throw new ShellException( \"It is only possible to sample nodes related index\" );\n             }\n+\n             sampleIndexes( labels, property, sampleAll, forceSample );\n             break;\n         default:\n-            out.println( \"Unknown action: \" + action + \"\\nUSAGE:\\n\" + getDescription() );\n+            out.println( \"Unknown action: \" + action+ \"\\nUSAGE:\\n\" + getDescription() );\n             break;\n         }\n \n         return INPUT_COMPLETE;\n     }\n \n-    private void listIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            RelationshipType[] relTypes, String property, boolean verbose ) throws RemoteException\n+    private void listIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, RelationshipType[] relTypes, String property, boolean verbose ) throws RemoteException\n     {\n-        if ( labels.length > 0 && relTypes.length == 0 )\n+        if ( labels.length > 0&& relTypes.length == 0 )\n         {\n             listNodeIndexesAndConstraints( out, schema, labels, property, verbose );\n         }\n-        else if ( relTypes.length > 0 && labels.length == 0 )\n+        else\n+        if ( relTypes.length > 0&& labels.length == 0 )\n         {\n             listRelationshipIndexesAndConstraints( out, schema, relTypes, property, verbose );\n         }\n@@ -158,12 +138,9 @@ public class Schema extends TransactionProvidingApp\n         }\n     }\n \n-    private void sampleIndexes( Label[] labels, String property, boolean sampleAll, boolean forceSample )\n-            throws ShellException\n+    private void sampleIndexes( Label[] labels, String property, boolean sampleAll, boolean forceSample ) throws ShellException\n     {\n-\n-        IndexingService indexingService = getServer().getDb().getDependencyResolver().resolveDependency(\n-                IndexingService.class );\n+        IndexingService indexingService = getServer().getDb().getDependencyResolver().resolveDependency( IndexingService.class );\n         if ( indexingService == null )\n         {\n             throw new ShellException( \"Internal error: failed to resolve IndexingService\" );\n@@ -179,27 +156,24 @@ public class Schema extends TransactionProvidingApp\n         }\n \n         validateLabelsAndProperty( labels, property );\n-\n         int labelKey;\n         int propertyKey;\n-\n         TokenRead tokenRead = getServer().getTokenRead();\n-        labelKey = tokenRead.nodeLabel( labels[0].name() );\n+        labelKey = tokenRead.nodeLabel( labels[ 0].name() );\n         propertyKey = tokenRead.propertyKey( property );\n-\n-        if ( labelKey == -1 )\n+        if ( labelKey == - 1 )\n         {\n-            throw new ShellException( \"No label associated with '\" + labels[0].name() + \"' was found\" );\n+            throw new ShellException( \"No label associated with '\" + labels[ 0].name() + \"' was found\" );\n         }\n-        if ( propertyKey == -1 )\n+\n+        if ( propertyKey == - 1 )\n         {\n             throw new ShellException( \"No property associated with '\" + property + \"' was found\" );\n         }\n \n         try\n         {\n-            indexingService.triggerIndexSampling( SchemaDescriptorFactory.forLabel( labelKey, propertyKey ),\n-                    samplingMode );\n+            indexingService.triggerIndexSampling( SchemaDescriptorFactory.forLabel( labelKey, propertyKey ), samplingMode );\n         }\n         catch ( IndexNotFoundKernelException e )\n         {\n@@ -221,7 +195,7 @@ public class Schema extends TransactionProvidingApp\n \n     private void validateLabelsAndProperty( Label[] labels, String property ) throws ShellException\n     {\n-        if ( labels.length == 0 && property == null )\n+        if ( labels.length == 0&& property == null )\n         {\n             throw new ShellException( \"Invalid usage of sample. \\nUSAGE:\\n\" + getDescription() );\n         }\n@@ -232,85 +206,75 @@ public class Schema extends TransactionProvidingApp\n         }\n \n         // If we provide one we must also provide the other\n-        if ( property == null || labels.length == 0 )\n+\n+        if ( property == null|| labels.length == 0 )\n         {\n             throw new ShellException( \"Provide both the property and the label, or run with -a to sample all indexes\" );\n         }\n     }\n \n-    private void printIndexProgress( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            String property ) throws RemoteException\n+    private void printIndexProgress( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property ) throws RemoteException\n     {\n-        for ( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property ) )\n+        for( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property )\n+        )\n         {\n-            out.println( String.format( \"%s: %1.1f%%\", index.getLabel().name(),\n-                    schema.getIndexPopulationProgress( index ).getCompletedPercentage() ) );\n+            out.println( String.format( \"%s: %1.1f%%\", index.getLabel().name(), schema.getIndexPopulationProgress( index ).getCompletedPercentage() ) );\n         }\n     }\n \n-    private void awaitIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property )\n-            throws RemoteException\n+    private void awaitIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property ) throws RemoteException\n     {\n-        for ( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property ) )\n+        for( IndexDefinition index : indexesByLabelAndProperty( schema, labels, property )\n+        )\n         {\n             if ( schema.getIndexState( index ) != IndexState.ONLINE )\n             {\n-                out.println( String.format( \"Awaiting :%s ON %s %s\", index.getLabel().name(),\n-                        asList( index.getPropertyKeys() ), IndexState.ONLINE ) );\n+                out.println( String.format( \"Awaiting :%s ON %s %s\", index.getLabel().name(), asList( index.getPropertyKeys() ), IndexState.ONLINE ) );\n                 schema.awaitIndexOnline( index, 10000, TimeUnit.DAYS );\n             }\n         }\n     }\n \n-    private void listNodeIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            String property, boolean verbose ) throws RemoteException\n+    private void listNodeIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property, boolean verbose ) throws RemoteException\n     {\n         reportNodeIndexes( out, schema, labels, property, verbose );\n         reportNodeConstraints( out, schema, labels, property );\n     }\n \n-    private void listRelationshipIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n+    private void listRelationshipIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n     {\n         // no relationship indexes atm\n         reportRelationshipConstraints( out, schema, types, property );\n     }\n \n-    private void listAllIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels,\n-            RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n+    private void listAllIndexesAndConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, RelationshipType[] types, String property, boolean verbose ) throws RemoteException\n     {\n         reportNodeIndexes( out, schema, labels, property, verbose );\n         reportAllConstraints( out, schema, labels, types, property );\n     }\n \n-    private void reportNodeConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            Label[] labels, String property ) throws RemoteException\n+    private void reportNodeConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property ) throws RemoteException\n     {\n         Iterable<ConstraintDefinition> nodeConstraints = constraintsByLabelAndProperty( schema, labels, property );\n         reportConstraints( out, nodeConstraints );\n     }\n \n-    private void reportRelationshipConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            RelationshipType[] types, String property ) throws RemoteException\n+    private void reportRelationshipConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, RelationshipType[] types, String property ) throws RemoteException\n     {\n         Iterable<ConstraintDefinition> relConstraints = constraintsByTypeAndProperty( schema, types, property );\n         reportConstraints( out, relConstraints );\n     }\n \n-    private void reportAllConstraints( Output out, org.neo4j.graphdb.schema.Schema schema,\n-            Label[] labels, RelationshipType[] types, String property ) throws RemoteException\n+    private void reportAllConstraints( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, RelationshipType[] types, String property ) throws RemoteException\n     {\n-        Iterable<ConstraintDefinition> allConstraints = concat(\n-                constraintsByLabelAndProperty( schema, labels, property ),\n-                constraintsByTypeAndProperty( schema, types, property ) );\n-\n+        Iterable<ConstraintDefinition> allConstraints = concat( constraintsByLabelAndProperty( schema, labels, property ), constraintsByTypeAndProperty( schema, types, property ) );\n         reportConstraints( out, allConstraints );\n     }\n \n     private void reportConstraints( Output out, Iterable<ConstraintDefinition> constraints ) throws RemoteException\n     {\n         int j = 0;\n-        for ( ConstraintDefinition constraint : constraints )\n+        for( ConstraintDefinition constraint : constraints)\n         {\n             if ( j == 0 )\n             {\n@@ -320,8 +284,8 @@ public class Schema extends TransactionProvidingApp\n \n             out.println( indent( constraint.toString() ) );\n             j++;\n-\n         }\n+\n         if ( j == 0 )\n         {\n             out.println();\n@@ -329,32 +293,31 @@ public class Schema extends TransactionProvidingApp\n         }\n     }\n \n-    private void reportNodeIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property,\n-            boolean verbose ) throws RemoteException\n+    private void reportNodeIndexes( Output out, org.neo4j.graphdb.schema.Schema schema, Label[] labels, String property, boolean verbose ) throws RemoteException\n     {\n         ColumnPrinter printer = new ColumnPrinter( indent( \"ON \" ), \"\", \"\" );\n         Iterable<IndexDefinition> indexes = indexesByLabelAndProperty( schema, labels, property );\n-\n         int i = 0;\n-        for ( IndexDefinition index : sort( indexes, LABEL_COMPARE_FUNCTION ) )\n+        for( IndexDefinition index : sort( indexes, LABEL_COMPARE_FUNCTION )\n+        )\n         {\n             if ( i == 0 )\n             {\n                 out.println( \"Indexes\" );\n             }\n-            String labelAndProperties = String.format( \":%s(%s)\", index.getLabel().name(), commaSeparate( index\n-                    .getPropertyKeys() ) );\n \n+            String labelAndProperties = String.format( \":%s(%s)\", index.getLabel().name(), commaSeparate( index.getPropertyKeys() ) );\n             IndexState state = schema.getIndexState( index );\n             String uniqueOrNot = index.isConstraintIndex() ? \"(for uniqueness constraint)\" : \"\";\n-\n             printer.add( labelAndProperties, state, uniqueOrNot );\n-            if ( verbose && state == IndexState.FAILED )\n+            if ( verbose&& state == IndexState.FAILED )\n             {\n                 printer.addRaw( schema.getIndexFailure( index ) );\n             }\n+\n             i++;\n         }\n+\n         if ( i == 0 )\n         {\n             out.println( \"No indexes\" );\n@@ -369,47 +332,42 @@ public class Schema extends TransactionProvidingApp\n     {\n         StringBuilder builder = new StringBuilder();\n         boolean first = true;\n-        for ( String key : keys )\n+        for( String key : keys)\n         {\n-            if ( !first )\n+            if ( ! first )\n             {\n                 builder.append( \", \" );\n-\n             }\n             else\n             {\n                 first = false;\n             }\n+\n             builder.append( key );\n         }\n+\n         return builder.toString();\n     }\n \n-    private Iterable<IndexDefinition> indexesByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            Label[] labels, final String property )\n+    private Iterable<IndexDefinition> indexesByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema, Label[] labels, final String property )\n     {\n         Iterable<IndexDefinition> indexes = indexesByLabel( schema, labels );\n         if ( property != null )\n         {\n-            indexes = filter( index -> indexOf( property, index.getPropertyKeys() ) != -1, indexes );\n+            indexes = filter( index -> indexOf( property, index.getPropertyKeys() ) != - 1, indexes );\n         }\n+\n         return indexes;\n     }\n \n-    private Iterable<ConstraintDefinition> constraintsByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            final Label[] labels, final String property )\n+    private Iterable<ConstraintDefinition> constraintsByLabelAndProperty( org.neo4j.graphdb.schema.Schema schema, final Label[] labels, final String property )\n     {\n-        return filter( constraint -> isNodeConstraint( constraint ) &&\n-                             hasLabel( constraint, labels ) &&\n-                             isMatchingConstraint( constraint, property ), schema.getConstraints() );\n+        return filter( constraint -> isNodeConstraint( constraint )&& hasLabel( constraint, labels )&& isMatchingConstraint( constraint, property ), schema.getConstraints() );\n     }\n \n-    private Iterable<ConstraintDefinition> constraintsByTypeAndProperty( org.neo4j.graphdb.schema.Schema schema,\n-            final RelationshipType[] types, final String property )\n+    private Iterable<ConstraintDefinition> constraintsByTypeAndProperty( org.neo4j.graphdb.schema.Schema schema, final RelationshipType[] types, final String property )\n     {\n-        return filter( constraint -> isRelationshipConstraint( constraint ) &&\n-                             hasType( constraint, types ) &&\n-                             isMatchingConstraint( constraint, property ), schema.getConstraints() );\n+        return filter( constraint -> isRelationshipConstraint( constraint )&& hasType( constraint, types )&& isMatchingConstraint( constraint, property ), schema.getConstraints() );\n     }\n \n     private boolean hasLabel( ConstraintDefinition constraint, Label[] labels )\n@@ -419,7 +377,7 @@ public class Schema extends TransactionProvidingApp\n             return true;\n         }\n \n-        for ( Label label : labels )\n+        for( Label label : labels)\n         {\n             if ( constraint.getLabel().name().equals( label.name() ) )\n             {\n@@ -437,7 +395,7 @@ public class Schema extends TransactionProvidingApp\n             return true;\n         }\n \n-        for ( RelationshipType type : types )\n+        for( RelationshipType type : types)\n         {\n             if ( constraint.getRelationshipType().name().equals( type.name() ) )\n             {\n@@ -450,9 +408,7 @@ public class Schema extends TransactionProvidingApp\n \n     private static boolean isNodeConstraint( ConstraintDefinition constraint )\n     {\n-        return constraint.isConstraintType( ConstraintType.UNIQUENESS ) ||\n-               constraint.isConstraintType( ConstraintType.NODE_KEY ) ||\n-               constraint.isConstraintType( ConstraintType.NODE_PROPERTY_EXISTENCE );\n+        return constraint.isConstraintType( ConstraintType.UNIQUENESS )|| constraint.isConstraintType( ConstraintType.NODE_KEY )|| constraint.isConstraintType( ConstraintType.NODE_PROPERTY_EXISTENCE );\n     }\n \n     private static boolean isRelationshipConstraint( ConstraintDefinition constraint )\n@@ -462,16 +418,17 @@ public class Schema extends TransactionProvidingApp\n \n     private boolean isMatchingConstraint( ConstraintDefinition constraint, final String property )\n     {\n-        return property == null || indexOf( property, constraint.getPropertyKeys() ) != -1;\n+        return property == null|| indexOf( property, constraint.getPropertyKeys() ) != - 1;\n     }\n \n     private Iterable<IndexDefinition> indexesByLabel( org.neo4j.graphdb.schema.Schema schema, Label[] labels )\n     {\n         Iterable<IndexDefinition> indexes = schema.getIndexes();\n-        for ( final Label label : labels )\n+        for( final Label label : labels)\n         {\n             indexes = filter( item -> item.getLabel().name().equals( label.name() ), indexes );\n         }\n+\n         return indexes;\n     }\n \n@@ -479,4 +436,4 @@ public class Schema extends TransactionProvidingApp\n     {\n         return INDENT + str;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 139
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}