{
    "project_name": "vostok-hercules",
    "error_id": "122",
    "information": {
        "errors": [
            {
                "line": "59",
                "column": "17",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n                Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n                if(streamError.isPresent()) {\n                    ResponseUtil.badRequest(exch);\n                    return;\n                }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/122/CreateStreamHandler.java\nindex 3b79b61a54f..5d051ad35b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/122/CreateStreamHandler.java\n@@ -56,7 +56,7 @@ public class CreateStreamHandler implements HttpHandler {\n                 Stream stream = deserializer.readValue(bytes);\n \n                 Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n-                if(streamError.isPresent()) {\n+                if (streamError.isPresent()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/122/CreateStreamHandler.java\nindex 3b79b61a54f..89c32d9a995 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/122/CreateStreamHandler.java\n@@ -26,77 +26,77 @@ import java.util.Optional;\n  */\n public class CreateStreamHandler implements HttpHandler {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n-    private static final Validator<Stream> STREAM_VALIDATOR = StreamValidators.streamValidatorForHandler();\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n+  private static final Validator<Stream> STREAM_VALIDATOR = StreamValidators.streamValidatorForHandler();\n \n-    private final AuthManager authManager;\n-    private final StreamTaskRepository repository;\n+  private final AuthManager authManager;\n+  private final StreamTaskRepository repository;\n \n-    private final ObjectReader deserializer;\n+  private final ObjectReader deserializer;\n \n-    public CreateStreamHandler(AuthManager authManager, StreamTaskRepository repository) {\n-        this.authManager = authManager;\n-        this.repository = repository;\n+  public CreateStreamHandler(AuthManager authManager, StreamTaskRepository repository) {\n+    this.authManager = authManager;\n+    this.repository = repository;\n \n-        ObjectMapper objectMapper = new ObjectMapper();\n-        this.deserializer = objectMapper.readerFor(Stream.class);\n-    }\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    this.deserializer = objectMapper.readerFor(Stream.class);\n+  }\n \n-    @Override\n-    public void handleRequest(HttpServerExchange exchange) throws Exception {\n-        Optional<String> optionalApiKey = ExchangeUtil.extractHeaderValue(exchange, \"apiKey\");\n-        if (!optionalApiKey.isPresent()) {\n-            ResponseUtil.unauthorized(exchange);\n-            return;\n-        }\n+  @Override\n+  public void handleRequest(HttpServerExchange exchange) throws Exception {\n+    Optional<String> optionalApiKey = ExchangeUtil.extractHeaderValue(exchange, \"apiKey\");\n+    if (!optionalApiKey.isPresent()) {\n+      ResponseUtil.unauthorized(exchange);\n+      return;\n+    }\n \n-        final String apiKey = optionalApiKey.get();\n-        exchange.getRequestReceiver().receiveFullBytes((exch, bytes) -> {\n-            try {\n-                Stream stream = deserializer.readValue(bytes);\n+    final String apiKey = optionalApiKey.get();\n+    exchange.getRequestReceiver().receiveFullBytes((exch, bytes) -> {\n+      try {\n+        Stream stream = deserializer.readValue(bytes);\n \n-                Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n-                if(streamError.isPresent()) {\n-                    ResponseUtil.badRequest(exch);\n-                    return;\n-                }\n+        Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n+        if (streamError.isPresent()) {\n+          ResponseUtil.badRequest(exch);\n+          return;\n+        }\n \n-                AuthResult authResult = authManager.authManage(apiKey, stream.getName());\n-                if (!authResult.isSuccess()) {\n-                    if (authResult.isUnknown()) {\n-                        ResponseUtil.unauthorized(exch);\n-                        return;\n-                    }\n-                    ResponseUtil.forbidden(exch);\n-                    return;\n-                }\n-                //TODO: Auth sources if needed\n+        AuthResult authResult = authManager.authManage(apiKey, stream.getName());\n+        if (!authResult.isSuccess()) {\n+          if (authResult.isUnknown()) {\n+            ResponseUtil.unauthorized(exch);\n+            return;\n+          }\n+          ResponseUtil.forbidden(exch);\n+          return;\n+        }\n+        //TODO: Auth sources if needed\n \n-                CreationResult creationResult =\n-                        repository.create(new StreamTask(stream, StreamTaskType.CREATE), stream.getName());\n-                if (!creationResult.isSuccess()) {\n-                    if (creationResult.getStatus() == CreationResult.Status.ALREADY_EXIST) {\n-                        ResponseUtil.conflict(exch);\n-                    } else {\n-                        ResponseUtil.internalServerError(exch);\n-                    }\n-                    return;\n-                }\n+        CreationResult creationResult =\n+          repository.create(new StreamTask(stream, StreamTaskType.CREATE), stream.getName());\n+        if (!creationResult.isSuccess()) {\n+          if (creationResult.getStatus() == CreationResult.Status.ALREADY_EXIST) {\n+            ResponseUtil.conflict(exch);\n+          } else {\n+            ResponseUtil.internalServerError(exch);\n+          }\n+          return;\n+        }\n \n-                //TODO: Wait for result if needed\n-                ResponseUtil.ok(exch);\n-            } catch (IOException e) {\n-                LOGGER.error(\"Error on processing request\", e);\n-                ResponseUtil.badRequest(exch);\n-                return;\n-            } catch (Exception e) {\n-                LOGGER.error(\"Error on processing request\", e);\n-                ResponseUtil.internalServerError(exch);\n-                return;\n-            }\n-        }, (exch, exception) -> {\n-            ResponseUtil.badRequest(exch);\n-            return;\n-        });\n-    }\n+        //TODO: Wait for result if needed\n+        ResponseUtil.ok(exch);\n+      } catch (IOException e) {\n+        LOGGER.error(\"Error on processing request\", e);\n+        ResponseUtil.badRequest(exch);\n+        return;\n+      } catch (Exception e) {\n+        LOGGER.error(\"Error on processing request\", e);\n+        ResponseUtil.internalServerError(exch);\n+        return;\n+      }\n+    }, (exch, exception) -> {\n+      ResponseUtil.badRequest(exch);\n+      return;\n+    });\n+  }\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/122/CreateStreamHandler.java\nindex 3b79b61a54f..403b9c0ac5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/122/CreateStreamHandler.java\n@@ -56,7 +56,7 @@ public class CreateStreamHandler implements HttpHandler {\n                 Stream stream = deserializer.readValue(bytes);\n \n                 Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n-                if(streamError.isPresent()) {\n+                if (streamError.isPresent()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n@@ -99,4 +99,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/122/CreateStreamHandler.java\nindex 3b79b61a54f..89b504ceef2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/122/CreateStreamHandler.java\n@@ -17,21 +17,20 @@ import ru.kontur.vostok.hercules.meta.task.stream.StreamTaskType;\n import ru.kontur.vostok.hercules.undertow.util.ExchangeUtil;\n import ru.kontur.vostok.hercules.undertow.util.ResponseUtil;\n import ru.kontur.vostok.hercules.util.validation.Validator;\n-\n import java.io.IOException;\n import java.util.Optional;\n \n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class CreateStreamHandler implements HttpHandler {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n     private static final Validator<Stream> STREAM_VALIDATOR = StreamValidators.streamValidatorForHandler();\n-\n     private final AuthManager authManager;\n     private final StreamTaskRepository repository;\n-\n     private final ObjectReader deserializer;\n \n     public CreateStreamHandler(AuthManager authManager, StreamTaskRepository repository) {\n@@ -54,9 +53,8 @@ public class CreateStreamHandler implements HttpHandler {\n         exchange.getRequestReceiver().receiveFullBytes((exch, bytes) -> {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n-\n                 Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n-                if(streamError.isPresent()) {\n+                if (streamError.isPresent()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n@@ -67,13 +65,13 @@ public class CreateStreamHandler implements HttpHandler {\n                         ResponseUtil.unauthorized(exch);\n                         return;\n                     }\n+\n                     ResponseUtil.forbidden(exch);\n                     return;\n                 }\n                 //TODO: Auth sources if needed\n \n-                CreationResult creationResult =\n-                        repository.create(new StreamTask(stream, StreamTaskType.CREATE), stream.getName());\n+                CreationResult creationResult = repository.create(new StreamTask(stream, StreamTaskType.CREATE), stream.getName());\n                 if (!creationResult.isSuccess()) {\n                     if (creationResult.getStatus() == CreationResult.Status.ALREADY_EXIST) {\n                         ResponseUtil.conflict(exch);\n@@ -84,6 +82,7 @@ public class CreateStreamHandler implements HttpHandler {\n                 }\n \n                 //TODO: Wait for result if needed\n+\n                 ResponseUtil.ok(exch);\n             } catch (IOException e) {\n                 LOGGER.error(\"Error on processing request\", e);\n@@ -99,4 +98,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/122/CreateStreamHandler.java\nindex 3b79b61a54f..5d051ad35b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/122/CreateStreamHandler.java\n@@ -56,7 +56,7 @@ public class CreateStreamHandler implements HttpHandler {\n                 Stream stream = deserializer.readValue(bytes);\n \n                 Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n-                if(streamError.isPresent()) {\n+                if (streamError.isPresent()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/122/CreateStreamHandler.java\nindex 3b79b61a54f..5d051ad35b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/122/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/122/CreateStreamHandler.java\n@@ -56,7 +56,7 @@ public class CreateStreamHandler implements HttpHandler {\n                 Stream stream = deserializer.readValue(bytes);\n \n                 Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n-                if(streamError.isPresent()) {\n+                if (streamError.isPresent()) {\n                     ResponseUtil.badRequest(exch);\n                     return;\n                 }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}