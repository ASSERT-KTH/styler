{
    "project_name": "neo4j-neo4j",
    "error_id": "656",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "104",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/656/RateLimitedAuthenticationStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/656/RateLimitedAuthenticationStrategy.java\nindex a6bdfc071ce..01848ba4482 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/656/RateLimitedAuthenticationStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/656/RateLimitedAuthenticationStrategy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.auth;\n \n import java.time.Clock;\n@@ -46,13 +47,13 @@ public class RateLimitedAuthenticationStrategy implements AuthenticationStrategy\n         boolean authenticationPermitted()\n         {\n             return maxFailedAttempts <= 0 || // amount of attempts is not limited\n-                   failedAuthAttempts.get() < maxFailedAttempts || // less failed attempts than configured\n-                   clock.millis() >= lastFailedAttemptTime + lockDurationMs; // auth lock duration expired\n+              failedAuthAttempts.get() < maxFailedAttempts || // less failed attempts than configured\n+              clock.millis() >= lastFailedAttemptTime + lockDurationMs; // auth lock duration expired\n         }\n \n         void authSuccess()\n         {\n-            failedAuthAttempts.set( 0 );\n+            failedAuthAttempts.set(0);\n         }\n \n         void authFailed()\n@@ -67,12 +68,12 @@ public class RateLimitedAuthenticationStrategy implements AuthenticationStrategy\n      */\n     private final ConcurrentMap<String, AuthenticationMetadata> authenticationData = new ConcurrentHashMap<>();\n \n-    public RateLimitedAuthenticationStrategy( Clock clock, Config config )\n+    public RateLimitedAuthenticationStrategy(Clock clock, Config config)\n     {\n-        this( clock, config.get( auth_lock_time ), config.get( auth_max_failed_attempts ) );\n+        this(clock, config.get(auth_lock_time), config.get(auth_max_failed_attempts));\n     }\n \n-    RateLimitedAuthenticationStrategy( Clock clock, Duration lockDuration, int maxFailedAttempts )\n+    RateLimitedAuthenticationStrategy(Clock clock, Duration lockDuration, int maxFailedAttempts)\n     {\n         this.clock = clock;\n         this.lockDurationMs = lockDuration.toMillis();\n@@ -80,36 +81,35 @@ public class RateLimitedAuthenticationStrategy implements AuthenticationStrategy\n     }\n \n     @Override\n-    public AuthenticationResult authenticate( User user, byte[] password )\n+    public AuthenticationResult authenticate(User user, byte[] password)\n     {\n-        AuthenticationMetadata authMetadata = authMetadataFor( user.name() );\n+        AuthenticationMetadata authMetadata = authMetadataFor(user.name());\n \n-        if ( !authMetadata.authenticationPermitted() )\n+        if (!authMetadata.authenticationPermitted())\n         {\n             return AuthenticationResult.TOO_MANY_ATTEMPTS;\n         }\n \n-        if ( user.credentials().matchesPassword( password ) )\n+        if (user.credentials().matchesPassword(password))\n         {\n             authMetadata.authSuccess();\n             return AuthenticationResult.SUCCESS;\n-        }\n-        else\n+        } else\n         {\n             authMetadata.authFailed();\n             return AuthenticationResult.FAILURE;\n         }\n     }\n \n-    private AuthenticationMetadata authMetadataFor( String username )\n+    private AuthenticationMetadata authMetadataFor(String username)\n     {\n-        AuthenticationMetadata authMeta = authenticationData.get( username );\n+        AuthenticationMetadata authMeta = authenticationData.get(username);\n \n-        if ( authMeta == null )\n+        if (authMeta == null)\n         {\n             authMeta = new AuthenticationMetadata();\n-            AuthenticationMetadata preExisting = authenticationData.putIfAbsent( username, authMeta );\n-            if ( preExisting != null )\n+            AuthenticationMetadata preExisting = authenticationData.putIfAbsent(username, authMeta);\n+            if (preExisting != null)\n             {\n                 authMeta = preExisting;\n             }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}