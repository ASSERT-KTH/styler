{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3195",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3195/GroupingRecoveryCleanupWorkCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3195/GroupingRecoveryCleanupWorkCollector.java\nindex 9085ff53361..5fc45daac14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3195/GroupingRecoveryCleanupWorkCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3195/GroupingRecoveryCleanupWorkCollector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.util.StringJoiner;\n@@ -35,108 +36,107 @@ import static org.neo4j.scheduler.JobScheduler.Groups.recoveryCleanup;\n  */\n public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCollector\n {\n-    private final BlockingQueue<CleanupJob> jobs = new LinkedBlockingQueue<>();\n-    private final JobScheduler jobScheduler;\n-    private volatile boolean started;\n-    private JobScheduler.JobHandle handle;\n+  private final BlockingQueue<CleanupJob> jobs = new LinkedBlockingQueue<>();\n+  private final JobScheduler jobScheduler;\n+  private volatile boolean started;\n+  private JobScheduler.JobHandle handle;\n \n-    /**\n-     * @param jobScheduler {@link JobScheduler} to queue {@link CleanupJob} into.\n-     */\n-    public GroupingRecoveryCleanupWorkCollector( JobScheduler jobScheduler )\n-    {\n-        this.jobScheduler = jobScheduler;\n-    }\n+  /**\n+   * @param jobScheduler {@link JobScheduler} to queue {@link CleanupJob} into.\n+   */\n+  public GroupingRecoveryCleanupWorkCollector(JobScheduler jobScheduler)\n+  {\n+    this.jobScheduler = jobScheduler;\n+  }\n \n-    @Override\n-    public void init()\n+  @Override\n+  public void init()\n+  {\n+    started = false;\n+    if (!jobs.isEmpty())\n     {\n-        started = false;\n-        if ( !jobs.isEmpty() )\n-        {\n-            StringJoiner joiner = new StringJoiner( String.format( \"%n  \" ), \"Did not expect there to be any cleanup jobs still here. Jobs[\", \"]\" );\n-            consumeAndCloseJobs( cj -> joiner.add( cj.toString() ) );\n-            throw new IllegalStateException( joiner.toString() );\n-        }\n-        scheduleJobs();\n+      StringJoiner joiner = new StringJoiner(String.format(\"%n  \"), \"Did not expect there to be any cleanup jobs still here. Jobs[\", \"]\");\n+      consumeAndCloseJobs(cj -> joiner.add(cj.toString()));\n+      throw new IllegalStateException(joiner.toString());\n     }\n+    scheduleJobs();\n+  }\n \n-    @Override\n-    public void add( CleanupJob job )\n+  @Override\n+  public void add(CleanupJob job)\n+  {\n+    if (started)\n     {\n-        if ( started )\n-        {\n-            throw new IllegalStateException( \"Index clean jobs can't be added after collector start.\" );\n-        }\n-        jobs.add( job );\n+      throw new IllegalStateException(\"Index clean jobs can't be added after collector start.\");\n     }\n+    jobs.add(job);\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        started = true;\n-    }\n+  @Override\n+  public void start()\n+  {\n+    started = true;\n+  }\n \n-    @Override\n-    public void shutdown() throws ExecutionException, InterruptedException\n+  @Override\n+  public void shutdown() throws ExecutionException, InterruptedException\n+  {\n+    started = true;\n+    if (handle != null)\n     {\n-        started = true;\n-        if ( handle != null )\n-        {\n-            // Also set the started flag which acts as a signal to exit the scheduled job on empty queue,\n-            // this is of course a special case where perhaps not start() gets called, i.e. if something fails\n-            // before reaching that phase in the lifecycle.\n-            handle.waitTermination();\n-        }\n-        consumeAndCloseJobs( cj -> {} );\n+      // Also set the started flag which acts as a signal to exit the scheduled job on empty queue,\n+      // this is of course a special case where perhaps not start() gets called, i.e. if something fails\n+      // before reaching that phase in the lifecycle.\n+      handle.waitTermination();\n     }\n+    consumeAndCloseJobs(cj -> {\n+    });\n+  }\n \n-    private void scheduleJobs()\n-    {\n-        handle = jobScheduler.schedule( recoveryCleanup, allJobs() );\n-    }\n+  private void scheduleJobs()\n+  {\n+    handle = jobScheduler.schedule(recoveryCleanup, allJobs());\n+  }\n \n-    private Runnable allJobs()\n-    {\n-        return () ->\n-                executeWithExecutor( executor ->\n-                {\n-                    CleanupJob job = null;\n-                    do\n-                    {\n-                        try\n-                        {\n-                            job = jobs.poll( 100, TimeUnit.MILLISECONDS );\n-                            if ( job != null )\n-                            {\n-                                job.run( executor );\n-                            }\n-                        }\n-                        catch ( Exception e )\n-                        {\n-                            // There's no audience for these exceptions. The jobs themselves know if they've failed and communicates\n-                            // that to its tree. The scheduled job is just a vessel for running these cleanup jobs.\n-                        }\n-                        finally\n-                        {\n-                            if ( job != null )\n-                            {\n-                                job.close();\n-                            }\n-                        }\n-                    }\n-                    // Even if there are no jobs in the queue then continue looping until we go to started state\n-                    while ( !jobs.isEmpty() || !started );\n-                } );\n-    }\n+  private Runnable allJobs()\n+  {\n+    return () ->\n+        executeWithExecutor(executor ->\n+        {\n+          CleanupJob job = null;\n+          do\n+          {\n+            try\n+            {\n+              job = jobs.poll(100, TimeUnit.MILLISECONDS);\n+              if (job != null)\n+              {\n+                job.run(executor);\n+              }\n+            } catch (Exception e)\n+            {\n+              // There's no audience for these exceptions. The jobs themselves know if they've failed and communicates\n+              // that to its tree. The scheduled job is just a vessel for running these cleanup jobs.\n+            } finally\n+            {\n+              if (job != null)\n+              {\n+                job.close();\n+              }\n+            }\n+          }\n+          // Even if there are no jobs in the queue then continue looping until we go to started state\n+          while (!jobs.isEmpty() || !started);\n+        });\n+  }\n \n-    private void consumeAndCloseJobs( Consumer<CleanupJob> consumer )\n+  private void consumeAndCloseJobs(Consumer<CleanupJob> consumer)\n+  {\n+    CleanupJob job;\n+    while ((job = jobs.poll()) != null)\n     {\n-        CleanupJob job;\n-        while ( (job = jobs.poll()) != null )\n-        {\n-            consumer.accept( job );\n-            job.close();\n-        }\n+      consumer.accept(job);\n+      job.close();\n     }\n+  }\n }\n",
            "diff_size": 108
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3195/GroupingRecoveryCleanupWorkCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3195/GroupingRecoveryCleanupWorkCollector.java\nindex 9085ff53361..1c9db261091 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3195/GroupingRecoveryCleanupWorkCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3195/GroupingRecoveryCleanupWorkCollector.java\n@@ -58,7 +58,8 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n             consumeAndCloseJobs( cj -> joiner.add( cj.toString() ) );\n             throw new IllegalStateException( joiner.toString() );\n         }\n-        scheduleJobs();\n+\n+scheduleJobs();\n     }\n \n     @Override\n@@ -88,7 +89,8 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n             // before reaching that phase in the lifecycle.\n             handle.waitTermination();\n         }\n-        consumeAndCloseJobs( cj -> {} );\n+\n+consumeAndCloseJobs( cj -> {} );\n     }\n \n     private void scheduleJobs()\n@@ -98,8 +100,7 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n \n     private Runnable allJobs()\n     {\n-        return () ->\n-                executeWithExecutor( executor ->\n+        return () -> executeWithExecutor( executor ->\n                 {\n                     CleanupJob job = null;\n                     do\n@@ -139,4 +140,4 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n             job.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "134",
                    "column": "47",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "134",
                    "column": "70",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "134",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3195/GroupingRecoveryCleanupWorkCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3195/GroupingRecoveryCleanupWorkCollector.java\nindex 9085ff53361..603dcb58d0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3195/GroupingRecoveryCleanupWorkCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3195/GroupingRecoveryCleanupWorkCollector.java\n@@ -25,14 +25,13 @@ import java.util.concurrent.ExecutionException;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Consumer;\n-\n import org.neo4j.scheduler.JobScheduler;\n-\n import static org.neo4j.scheduler.JobScheduler.Groups.recoveryCleanup;\n \n /**\n  * Runs cleanup work as they're added in {@link #add(CleanupJob)}, but the thread that calls {@link #add(CleanupJob)} will not execute them itself.\n  */\n+\n public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCollector\n {\n     private final BlockingQueue<CleanupJob> jobs = new LinkedBlockingQueue<>();\n@@ -43,6 +42,7 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n     /**\n      * @param jobScheduler {@link JobScheduler} to queue {@link CleanupJob} into.\n      */\n+\n     public GroupingRecoveryCleanupWorkCollector( JobScheduler jobScheduler )\n     {\n         this.jobScheduler = jobScheduler;\n@@ -52,12 +52,13 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n     public void init()\n     {\n         started = false;\n-        if ( !jobs.isEmpty() )\n+        if ( ! jobs.isEmpty() )\n         {\n             StringJoiner joiner = new StringJoiner( String.format( \"%n  \" ), \"Did not expect there to be any cleanup jobs still here. Jobs[\", \"]\" );\n             consumeAndCloseJobs( cj -> joiner.add( cj.toString() ) );\n             throw new IllegalStateException( joiner.toString() );\n         }\n+\n         scheduleJobs();\n     }\n \n@@ -68,6 +69,7 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n         {\n             throw new IllegalStateException( \"Index clean jobs can't be added after collector start.\" );\n         }\n+\n         jobs.add( job );\n     }\n \n@@ -88,7 +90,10 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n             // before reaching that phase in the lifecycle.\n             handle.waitTermination();\n         }\n-        consumeAndCloseJobs( cj -> {} );\n+\n+        consumeAndCloseJobs( cj ->\n+                             {\n+                             } );\n     }\n \n     private void scheduleJobs()\n@@ -98,45 +103,45 @@ public class GroupingRecoveryCleanupWorkCollector extends RecoveryCleanupWorkCol\n \n     private Runnable allJobs()\n     {\n-        return () ->\n-                executeWithExecutor( executor ->\n-                {\n-                    CleanupJob job = null;\n-                    do\n-                    {\n-                        try\n-                        {\n-                            job = jobs.poll( 100, TimeUnit.MILLISECONDS );\n-                            if ( job != null )\n-                            {\n-                                job.run( executor );\n-                            }\n-                        }\n-                        catch ( Exception e )\n-                        {\n+        return () -> executeWithExecutor( executor ->\n+                                          {\n+                                              CleanupJob job = null;\n+                                              do\n+                                              {\n+                                                  try\n+                                                  {\n+                                                      job = jobs.poll( 100, TimeUnit.MILLISECONDS );\n+                                                      if ( job != null )\n+                                                      {\n+                                                          job.run( executor );\n+                                                      }\n+                                                  }\n+                                                  catch ( Exception e )\n+                                                  {\n                             // There's no audience for these exceptions. The jobs themselves know if they've failed and communicates\n                             // that to its tree. The scheduled job is just a vessel for running these cleanup jobs.\n-                        }\n-                        finally\n-                        {\n-                            if ( job != null )\n-                            {\n-                                job.close();\n-                            }\n-                        }\n-                    }\n+                                                  }\n+                                                  finally\n+                                                  {\n+                                                      if ( job != null )\n+                                                      {\n+                                                          job.close();\n+                                                      }\n+                                                  }\n+                                              }\n                     // Even if there are no jobs in the queue then continue looping until we go to started state\n-                    while ( !jobs.isEmpty() || !started );\n-                } );\n+\n+                                              while( ! jobs.isEmpty()|| ! started);\n+                                          } );\n     }\n \n     private void consumeAndCloseJobs( Consumer<CleanupJob> consumer )\n     {\n         CleanupJob job;\n-        while ( (job = jobs.poll()) != null )\n+        while( ( job = jobs.poll()) != null )\n         {\n             consumer.accept( job );\n             job.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}