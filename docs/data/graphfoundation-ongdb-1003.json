{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1003",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1003/RelationshipGroupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1003/RelationshipGroupCache.java\nindex 87aa1bc70d0..8194984aeb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1003/RelationshipGroupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1003/RelationshipGroupCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import java.util.Iterator;\n@@ -33,10 +34,10 @@ import static org.neo4j.helpers.Format.bytes;\n \n /**\n  * Holds information vital for making {@link RelationshipGroupDefragmenter} work the way it does.\n- *\n+ * <p>\n  * The defragmenter goes potentially multiple rounds through the relationship group store and each round\n  * selects groups from a range of node ids. This cache can cache the groups for the nodes in this range.\n- *\n+ * <p>\n  * First all group counts per node are updated ({@link #incrementGroupCount(long)}).\n  * Then {@link #prepare(long)} is called from lowest node id (0) and given the maximum configured memory\n  * given to this cache in its constructor the highest node id to cache is returned. Then groups are\n@@ -48,273 +49,274 @@ import static org.neo4j.helpers.Format.bytes;\n  */\n public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>, AutoCloseable, MemoryStatsVisitor.Visitable\n {\n-    public static final int GROUP_ENTRY_SIZE = 1/*header*/ + 3/*type*/ + 6/*relationship id*/ * 3/*all directions*/;\n+  public static final int GROUP_ENTRY_SIZE = 1/*header*/ + 3/*type*/ + 6/*relationship id*/ * 3/*all directions*/;\n \n-    private final ByteArray groupCountCache;\n-    private final ByteArray cache;\n-    private final long highNodeId;\n-    private final LongArray offsets;\n-    private final byte[] scratch = new byte[GROUP_ENTRY_SIZE];\n-    private long fromNodeId;\n-    private long toNodeId;\n-    private long highCacheId;\n-    private final long maxCacheLength;\n+  private final ByteArray groupCountCache;\n+  private final ByteArray cache;\n+  private final long highNodeId;\n+  private final LongArray offsets;\n+  private final byte[] scratch = new byte[GROUP_ENTRY_SIZE];\n+  private long fromNodeId;\n+  private long toNodeId;\n+  private long highCacheId;\n+  private final long maxCacheLength;\n \n-    public RelationshipGroupCache( NumberArrayFactory arrayFactory, long maxMemory, long highNodeId )\n-    {\n-        this.offsets = arrayFactory.newDynamicLongArray( 100_000, 0 );\n-        this.groupCountCache = arrayFactory.newByteArray( highNodeId, new byte[2] );\n-        this.highNodeId = highNodeId;\n+  public RelationshipGroupCache(NumberArrayFactory arrayFactory, long maxMemory, long highNodeId)\n+  {\n+    this.offsets = arrayFactory.newDynamicLongArray(100_000, 0);\n+    this.groupCountCache = arrayFactory.newByteArray(highNodeId, new byte[2]);\n+    this.highNodeId = highNodeId;\n \n-        long memoryDedicatedToCounting = 2 * highNodeId;\n-        long memoryLeftForGroupCache = maxMemory - memoryDedicatedToCounting;\n-        if ( memoryLeftForGroupCache < 0 )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Too little memory to cache any groups, provided \" + bytes( maxMemory ) + \" where \" +\n-                            bytes( memoryDedicatedToCounting ) + \" was dedicated to group counting\" );\n-        }\n-        maxCacheLength = memoryLeftForGroupCache / GROUP_ENTRY_SIZE;\n-        this.cache = arrayFactory.newDynamicByteArray( max( 1_000, maxCacheLength / 100 ), new byte[GROUP_ENTRY_SIZE] );\n-    }\n-\n-    /**\n-     * Before caching any relationship groups all group counts for all nodes are incremented by calling\n-     * this method once for every encountered group (its node id).\n-     *\n-     * @param nodeId node to increment group count for.\n-     */\n-    public void incrementGroupCount( long nodeId )\n+    long memoryDedicatedToCounting = 2 * highNodeId;\n+    long memoryLeftForGroupCache = maxMemory - memoryDedicatedToCounting;\n+    if (memoryLeftForGroupCache < 0)\n     {\n-        int count = groupCount( nodeId );\n-        count++;\n-        if ( (count & ~0xFFFF) != 0 )\n-        {\n-            throw new IllegalStateException(\n-                    \"Invalid number of relationship groups for node \" + nodeId + \" \" + count );\n-        }\n-        groupCountCache.setShort( nodeId, 0, (short) count );\n+      throw new IllegalArgumentException(\n+          \"Too little memory to cache any groups, provided \" + bytes(maxMemory) + \" where \" +\n+              bytes(memoryDedicatedToCounting) + \" was dedicated to group counting\");\n     }\n+    maxCacheLength = memoryLeftForGroupCache / GROUP_ENTRY_SIZE;\n+    this.cache = arrayFactory.newDynamicByteArray(max(1_000, maxCacheLength / 100), new byte[GROUP_ENTRY_SIZE]);\n+  }\n \n-    int groupCount( long nodeId )\n+  /**\n+   * Before caching any relationship groups all group counts for all nodes are incremented by calling\n+   * this method once for every encountered group (its node id).\n+   *\n+   * @param nodeId node to increment group count for.\n+   */\n+  public void incrementGroupCount(long nodeId)\n+  {\n+    int count = groupCount(nodeId);\n+    count++;\n+    if ((count & ~0xFFFF) != 0)\n     {\n-        return groupCountCache.getShort( nodeId, 0 ) & 0xFFFF;\n+      throw new IllegalStateException(\n+          \"Invalid number of relationship groups for node \" + nodeId + \" \" + count);\n     }\n+    groupCountCache.setShort(nodeId, 0, (short) count);\n+  }\n \n-    /**\n-     * Getter here because we can use this already allocated data structure for other things in and\n-     * around places where this group cache is used.\n-     */\n-    ByteArray getGroupCountCache()\n-    {\n-        return groupCountCache;\n-    }\n+  int groupCount(long nodeId)\n+  {\n+    return groupCountCache.getShort(nodeId, 0) & 0xFFFF;\n+  }\n \n-    /**\n-     * Looks at max amount of configured memory (in constructor) and figures out for how many nodes their groups\n-     * can be cached. Before the first call to this method all {@link #incrementGroupCount(long)} calls\n-     * must have been made. After a call to this there should be a sequence of {@link #put(RelationshipGroupRecord)}\n-     * calls to cache the groups. If this call returns a node id which is lower than the highest node id in the\n-     * store then more rounds of caching should be performed after completing this round.\n-     *\n-     * @param fromNodeId inclusive\n-     * @return toNodeId exclusive\n-     */\n-    public long prepare( long fromNodeId )\n-    {\n-        cache.clear(); // this will have all the \"first\" bytes set to 0, which means !inUse\n-        this.fromNodeId = fromNodeId; // keep for use in put later on\n+  /**\n+   * Getter here because we can use this already allocated data structure for other things in and\n+   * around places where this group cache is used.\n+   */\n+  ByteArray getGroupCountCache()\n+  {\n+    return groupCountCache;\n+  }\n \n-        highCacheId = 0;\n-        for ( long nodeId = fromNodeId; nodeId < highNodeId; nodeId++ )\n-        {\n-            int count = groupCount( nodeId );\n-            if ( highCacheId + count > maxCacheLength )\n-            {\n-                // Cannot include this one, so up until the previous is good\n-                return this.toNodeId = nodeId;\n-            }\n-            offsets.set( rebase( nodeId ), highCacheId );\n-            highCacheId += count;\n-        }\n-        return this.toNodeId = highNodeId;\n-    }\n+  /**\n+   * Looks at max amount of configured memory (in constructor) and figures out for how many nodes their groups\n+   * can be cached. Before the first call to this method all {@link #incrementGroupCount(long)} calls\n+   * must have been made. After a call to this there should be a sequence of {@link #put(RelationshipGroupRecord)}\n+   * calls to cache the groups. If this call returns a node id which is lower than the highest node id in the\n+   * store then more rounds of caching should be performed after completing this round.\n+   *\n+   * @param fromNodeId inclusive\n+   * @return toNodeId exclusive\n+   */\n+  public long prepare(long fromNodeId)\n+  {\n+    cache.clear(); // this will have all the \"first\" bytes set to 0, which means !inUse\n+    this.fromNodeId = fromNodeId; // keep for use in put later on\n \n-    private long rebase( long toNodeId )\n+    highCacheId = 0;\n+    for (long nodeId = fromNodeId; nodeId < highNodeId; nodeId++)\n     {\n-        return toNodeId - fromNodeId;\n+      int count = groupCount(nodeId);\n+      if (highCacheId + count > maxCacheLength)\n+      {\n+        // Cannot include this one, so up until the previous is good\n+        return this.toNodeId = nodeId;\n+      }\n+      offsets.set(rebase(nodeId), highCacheId);\n+      highCacheId += count;\n     }\n+    return this.toNodeId = highNodeId;\n+  }\n \n-    /**\n-     * Caches a relationship group into this cache, it will be cached if the\n-     * {@link RelationshipGroupRecord#getOwningNode() owner} is within the {@link #prepare(long) prepared} range,\n-     * where {@code true} will be returned, otherwise {@code false}.\n-     *\n-     * @param groupRecord {@link RelationshipGroupRecord} to cache.\n-     * @return whether or not the group was cached, i.e. whether or not it was within the prepared range.\n-     */\n-    public boolean put( RelationshipGroupRecord groupRecord )\n-    {\n-        long nodeId = groupRecord.getOwningNode();\n-        assert nodeId < highNodeId;\n-        if ( nodeId < fromNodeId || nodeId >= toNodeId )\n-        {\n-            return false;\n-        }\n-\n-        long baseIndex = offsets.get( rebase( nodeId ) );\n-        // grouCount is extra validation, really\n-        int groupCount = groupCount( nodeId );\n-        long index = scanForFreeFrom( baseIndex, groupCount, groupRecord.getType(), nodeId );\n+  private long rebase(long toNodeId)\n+  {\n+    return toNodeId - fromNodeId;\n+  }\n \n-        // Put the group at this index\n-        cache.setByte( index, 0, (byte) 1 );\n-        cache.set3ByteInt( index, 1, groupRecord.getType() );\n-        cache.set6ByteLong( index, 1 + 3, groupRecord.getFirstOut() );\n-        cache.set6ByteLong( index, 1 + 3 + 6, groupRecord.getFirstIn() );\n-        cache.set6ByteLong( index, 1 + 3 + 6 + 6, groupRecord.getFirstLoop() );\n-        return true;\n+  /**\n+   * Caches a relationship group into this cache, it will be cached if the\n+   * {@link RelationshipGroupRecord#getOwningNode() owner} is within the {@link #prepare(long) prepared} range,\n+   * where {@code true} will be returned, otherwise {@code false}.\n+   *\n+   * @param groupRecord {@link RelationshipGroupRecord} to cache.\n+   * @return whether or not the group was cached, i.e. whether or not it was within the prepared range.\n+   */\n+  public boolean put(RelationshipGroupRecord groupRecord)\n+  {\n+    long nodeId = groupRecord.getOwningNode();\n+    assert nodeId < highNodeId;\n+    if (nodeId < fromNodeId || nodeId >= toNodeId)\n+    {\n+      return false;\n     }\n \n-    private long scanForFreeFrom( long startIndex, int groupCount, int type, long owningNodeId )\n-    {\n-        long desiredIndex = -1;\n-        long freeIndex = -1;\n-        for ( int i = 0; i < groupCount; i++ )\n-        {\n-            long candidateIndex = startIndex + i;\n-            boolean free = cache.getByte( candidateIndex, 0 ) == 0;\n-            if ( free )\n-            {\n-                freeIndex = candidateIndex;\n-                break;\n-            }\n+    long baseIndex = offsets.get(rebase(nodeId));\n+    // grouCount is extra validation, really\n+    int groupCount = groupCount(nodeId);\n+    long index = scanForFreeFrom(baseIndex, groupCount, groupRecord.getType(), nodeId);\n \n-            if ( desiredIndex == -1 )\n-            {\n-                int existingType = cache.get3ByteInt( candidateIndex, 1 );\n-                if ( existingType == type )\n-                {\n-                    throw new IllegalStateException(\n-                            \"Tried to put multiple groups with same type \" + type + \" for node \" + owningNodeId );\n-                }\n+    // Put the group at this index\n+    cache.setByte(index, 0, (byte) 1);\n+    cache.set3ByteInt(index, 1, groupRecord.getType());\n+    cache.set6ByteLong(index, 1 + 3, groupRecord.getFirstOut());\n+    cache.set6ByteLong(index, 1 + 3 + 6, groupRecord.getFirstIn());\n+    cache.set6ByteLong(index, 1 + 3 + 6 + 6, groupRecord.getFirstLoop());\n+    return true;\n+  }\n \n-                if ( type < existingType )\n-                {\n-                    // This means that the groups have arrived here out of order, please put this group\n-                    // in the correct place, not at the end\n-                    desiredIndex = candidateIndex;\n-                }\n-            }\n-        }\n+  private long scanForFreeFrom(long startIndex, int groupCount, int type, long owningNodeId)\n+  {\n+    long desiredIndex = -1;\n+    long freeIndex = -1;\n+    for (int i = 0; i < groupCount; i++)\n+    {\n+      long candidateIndex = startIndex + i;\n+      boolean free = cache.getByte(candidateIndex, 0) == 0;\n+      if (free)\n+      {\n+        freeIndex = candidateIndex;\n+        break;\n+      }\n \n-        if ( freeIndex == -1 )\n+      if (desiredIndex == -1)\n+      {\n+        int existingType = cache.get3ByteInt(candidateIndex, 1);\n+        if (existingType == type)\n         {\n-            throw new IllegalStateException( \"There's no room for me for startIndex:\" + startIndex +\n-                    \" with a group count of \" + groupCount + \". This means that there's an asymmetry between calls \" +\n-                    \"to incrementGroupCount and actual contents sent into put\" );\n+          throw new IllegalStateException(\n+              \"Tried to put multiple groups with same type \" + type + \" for node \" + owningNodeId);\n         }\n \n-        // For the future: Instead of doing the sorting here right away be doing the relatively expensive move\n-        // of potentially multiple items one step to the right in the array, then an idea is to simply mark\n-        // this group as in need of sorting and then there may be a step later which can use all CPUs\n-        // on the machine, jumping from group to group and see if the \"needs sorting\" flag has been raised\n-        // and if so sort that group. This is fine as it is right now because the groups put into this cache\n-        // will be almost entirely sorted, since we come here straight after import. Although if this thing\n-        // is to be used as a generic relationship group defragmenter this sorting will have to be fixed\n-        // to something like what is described above in this comment.\n-        if ( desiredIndex != -1 )\n+        if (type < existingType)\n         {\n-            moveRight( desiredIndex, freeIndex );\n-            return desiredIndex;\n+          // This means that the groups have arrived here out of order, please put this group\n+          // in the correct place, not at the end\n+          desiredIndex = candidateIndex;\n         }\n-        return freeIndex;\n+      }\n     }\n \n-    private void moveRight( long fromIndex, long toIndex )\n+    if (freeIndex == -1)\n     {\n-        for ( long index = toIndex; index > fromIndex; index-- )\n-        {\n-            cache.get( index - 1, scratch );\n-            cache.set( index, scratch );\n-        }\n+      throw new IllegalStateException(\"There's no room for me for startIndex:\" + startIndex +\n+          \" with a group count of \" + groupCount + \". This means that there's an asymmetry between calls \" +\n+          \"to incrementGroupCount and actual contents sent into put\");\n     }\n \n-    /**\n-     * @return cached {@link RelationshipGroupRecord} sorted by node id and then type id.\n-     */\n-    @Override\n-    public Iterator<RelationshipGroupRecord> iterator()\n+    // For the future: Instead of doing the sorting here right away be doing the relatively expensive move\n+    // of potentially multiple items one step to the right in the array, then an idea is to simply mark\n+    // this group as in need of sorting and then there may be a step later which can use all CPUs\n+    // on the machine, jumping from group to group and see if the \"needs sorting\" flag has been raised\n+    // and if so sort that group. This is fine as it is right now because the groups put into this cache\n+    // will be almost entirely sorted, since we come here straight after import. Although if this thing\n+    // is to be used as a generic relationship group defragmenter this sorting will have to be fixed\n+    // to something like what is described above in this comment.\n+    if (desiredIndex != -1)\n     {\n-        return new PrefetchingIterator<RelationshipGroupRecord>()\n-        {\n-            private long cursor;\n-            private long nodeId = fromNodeId;\n-            private int countLeftForThisNode = groupCount( nodeId );\n-            {\n-                findNextNodeWithGroupsIfNeeded();\n-            }\n-\n-            @Override\n-            protected RelationshipGroupRecord fetchNextOrNull()\n-            {\n-                while ( cursor < highCacheId )\n-                {\n-                    RelationshipGroupRecord group = null;\n-                    if ( cache.getByte( cursor, 0 ) == 1 )\n-                    {\n-                        // Here we have an alive group\n-                        group = new RelationshipGroupRecord( -1 ).initialize( true,\n-                                cache.get3ByteInt( cursor, 1 ),\n-                                cache.get6ByteLong( cursor, 1 + 3 ),\n-                                cache.get6ByteLong( cursor, 1 + 3 + 6 ),\n-                                cache.get6ByteLong( cursor, 1 + 3 + 6 + 6 ),\n-                                nodeId,\n-                                // Special: we want to convey information about how many groups are coming\n-                                // after this one so that chains can be ordered accordingly in the store\n-                                // so this isn't at all \"next\" in the true sense of chain next.\n-                                countLeftForThisNode - 1 );\n-                    }\n-\n-                    cursor++;\n-                    countLeftForThisNode--;\n-                    findNextNodeWithGroupsIfNeeded();\n-\n-                    if ( group != null )\n-                    {\n-                        return group;\n-                    }\n-                }\n-                return null;\n-            }\n-\n-            private void findNextNodeWithGroupsIfNeeded()\n-            {\n-                if ( countLeftForThisNode == 0 )\n-                {\n-                    do\n-                    {\n-                        nodeId++;\n-                        countLeftForThisNode = nodeId >= groupCountCache.length() ? 0 : groupCount( nodeId );\n-                    }\n-                    while ( countLeftForThisNode == 0 && nodeId < groupCountCache.length() );\n-                }\n-            }\n-        };\n+      moveRight(desiredIndex, freeIndex);\n+      return desiredIndex;\n     }\n+    return freeIndex;\n+  }\n \n-    @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n+  private void moveRight(long fromIndex, long toIndex)\n+  {\n+    for (long index = toIndex; index > fromIndex; index--)\n     {\n-        groupCountCache.acceptMemoryStatsVisitor( visitor );\n-        cache.acceptMemoryStatsVisitor( visitor );\n-        offsets.acceptMemoryStatsVisitor( visitor );\n+      cache.get(index - 1, scratch);\n+      cache.set(index, scratch);\n     }\n+  }\n \n-    @Override\n-    public void close()\n+  /**\n+   * @return cached {@link RelationshipGroupRecord} sorted by node id and then type id.\n+   */\n+  @Override\n+  public Iterator<RelationshipGroupRecord> iterator()\n+  {\n+    return new PrefetchingIterator<RelationshipGroupRecord>()\n     {\n-        cache.close();\n-        offsets.close();\n-    }\n+      private long cursor;\n+      private long nodeId = fromNodeId;\n+      private int countLeftForThisNode = groupCount(nodeId);\n+\n+      {\n+        findNextNodeWithGroupsIfNeeded();\n+      }\n+\n+      @Override\n+      protected RelationshipGroupRecord fetchNextOrNull()\n+      {\n+        while (cursor < highCacheId)\n+        {\n+          RelationshipGroupRecord group = null;\n+          if (cache.getByte(cursor, 0) == 1)\n+          {\n+            // Here we have an alive group\n+            group = new RelationshipGroupRecord(-1).initialize(true,\n+                cache.get3ByteInt(cursor, 1),\n+                cache.get6ByteLong(cursor, 1 + 3),\n+                cache.get6ByteLong(cursor, 1 + 3 + 6),\n+                cache.get6ByteLong(cursor, 1 + 3 + 6 + 6),\n+                nodeId,\n+                // Special: we want to convey information about how many groups are coming\n+                // after this one so that chains can be ordered accordingly in the store\n+                // so this isn't at all \"next\" in the true sense of chain next.\n+                countLeftForThisNode - 1);\n+          }\n+\n+          cursor++;\n+          countLeftForThisNode--;\n+          findNextNodeWithGroupsIfNeeded();\n+\n+          if (group != null)\n+          {\n+            return group;\n+          }\n+        }\n+        return null;\n+      }\n+\n+      private void findNextNodeWithGroupsIfNeeded()\n+      {\n+        if (countLeftForThisNode == 0)\n+        {\n+          do\n+          {\n+            nodeId++;\n+            countLeftForThisNode = nodeId >= groupCountCache.length() ? 0 : groupCount(nodeId);\n+          }\n+          while (countLeftForThisNode == 0 && nodeId < groupCountCache.length());\n+        }\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+  {\n+    groupCountCache.acceptMemoryStatsVisitor(visitor);\n+    cache.acceptMemoryStatsVisitor(visitor);\n+    offsets.acceptMemoryStatsVisitor(visitor);\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    cache.close();\n+    offsets.close();\n+  }\n }\n",
            "diff_size": 357
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "column": "37",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 261).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "column": "42",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "263",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1003/RelationshipGroupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1003/RelationshipGroupCache.java\nindex 87aa1bc70d0..0f4ff7176bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1003/RelationshipGroupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1003/RelationshipGroupCache.java\n@@ -70,10 +70,8 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n         long memoryLeftForGroupCache = maxMemory - memoryDedicatedToCounting;\n         if ( memoryLeftForGroupCache < 0 )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Too little memory to cache any groups, provided \" + bytes( maxMemory ) + \" where \" +\n-                            bytes( memoryDedicatedToCounting ) + \" was dedicated to group counting\" );\n-        }\n+            throw new IllegalArgumentException( \"Too little memory to cache any groups, provided \" + bytes( maxMemory ) + \" where \" + bytes( memoryDedicatedToCounting ) + \" was dedicated to group counting\" );\n+    }\n         maxCacheLength = memoryLeftForGroupCache / GROUP_ENTRY_SIZE;\n         this.cache = arrayFactory.newDynamicByteArray( max( 1_000, maxCacheLength / 100 ), new byte[GROUP_ENTRY_SIZE] );\n     }\n@@ -88,10 +86,9 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n     {\n         int count = groupCount( nodeId );\n         count++;\n-        if ( (count & ~0xFFFF) != 0 )\n+        if ( ( count & ~0xFFFF) != 0 )\n         {\n-            throw new IllegalStateException(\n-                    \"Invalid number of relationship groups for node \" + nodeId + \" \" + count );\n+            throw new IllegalStateException( \"Invalid number of relationship groups for node \" + nodeId + \" \" + count );\n         }\n         groupCountCache.setShort( nodeId, 0, (short) count );\n     }\n@@ -129,7 +126,7 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n         for ( long nodeId = fromNodeId; nodeId < highNodeId; nodeId++ )\n         {\n             int count = groupCount( nodeId );\n-            if ( highCacheId + count > maxCacheLength )\n+            if ( highCacheId + count> maxCacheLength )\n             {\n                 // Cannot include this one, so up until the previous is good\n                 return this.toNodeId = nodeId;\n@@ -195,8 +192,7 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n                 int existingType = cache.get3ByteInt( candidateIndex, 1 );\n                 if ( existingType == type )\n                 {\n-                    throw new IllegalStateException(\n-                            \"Tried to put multiple groups with same type \" + type + \" for node \" + owningNodeId );\n+                    throw new IllegalStateException( \"Tried to put multiple groups with same type \" + type + \" for node \" + owningNodeId );\n                 }\n \n                 if ( type < existingType )\n@@ -210,9 +206,7 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n \n         if ( freeIndex == -1 )\n         {\n-            throw new IllegalStateException( \"There's no room for me for startIndex:\" + startIndex +\n-                    \" with a group count of \" + groupCount + \". This means that there's an asymmetry between calls \" +\n-                    \"to incrementGroupCount and actual contents sent into put\" );\n+            throw new IllegalStateException( \"There's no room for me for startIndex:\" + startIndex + \" with a group count of \" + groupCount + \". This means that there's an asymmetry between calls \" + \"to incrementGroupCount and actual contents sent into put\" );\n         }\n \n         // For the future: Instead of doing the sorting here right away be doing the relatively expensive move\n@@ -228,12 +222,13 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n             moveRight( desiredIndex, freeIndex );\n             return desiredIndex;\n         }\n-        return freeIndex;\n+\n+return freeIndex;\n     }\n \n     private void moveRight( long fromIndex, long toIndex )\n     {\n-        for ( long index = toIndex; index > fromIndex; index-- )\n+        for ( long index = toIndex; index> fromIndex; index-- )\n         {\n             cache.get( index - 1, scratch );\n             cache.set( index, scratch );\n@@ -265,11 +260,7 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n                     {\n                         // Here we have an alive group\n                         group = new RelationshipGroupRecord( -1 ).initialize( true,\n-                                cache.get3ByteInt( cursor, 1 ),\n-                                cache.get6ByteLong( cursor, 1 + 3 ),\n-                                cache.get6ByteLong( cursor, 1 + 3 + 6 ),\n-                                cache.get6ByteLong( cursor, 1 + 3 + 6 + 6 ),\n-                                nodeId,\n+                                cache.get3ByteInt( cursor, 1 ), cache.get6ByteLong( cursor, 1 + 3 ), cache.get6ByteLong( cursor, 1 + 3 + 6 ), cache.get6ByteLong( cursor, 1 + 3 + 6 + 6 ), nodeId,\n                                 // Special: we want to convey information about how many groups are coming\n                                 // after this one so that chains can be ordered accordingly in the store\n                                 // so this isn't at all \"next\" in the true sense of chain next.\n@@ -279,8 +270,7 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n                     cursor++;\n                     countLeftForThisNode--;\n                     findNextNodeWithGroupsIfNeeded();\n-\n-                    if ( group != null )\n+if ( group != null )\n                     {\n                         return group;\n                     }\n@@ -317,4 +307,4 @@ public class RelationshipGroupCache implements Iterable<RelationshipGroupRecord>\n         cache.close();\n         offsets.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}