{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2849",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "90",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "198",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "208",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2849/BaseHighLimitRecordFormatV3_0_0.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2849/BaseHighLimitRecordFormatV3_0_0.java\nindex 4088091b966..f5e876b4fcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2849/BaseHighLimitRecordFormatV3_0_0.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2849/BaseHighLimitRecordFormatV3_0_0.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.highlimit.v300;\n \n import java.io.IOException;\n@@ -44,7 +45,7 @@ import static org.neo4j.kernel.impl.store.RecordPageLocationCalculator.pageIdFor\n  * 58-bit IDs, which is roughly 280 quadrillion. With that size the ID limits can be considered highlimit,\n  * hence the format name. The IDs take up between 3-8B depending on the size of the ID where relative ID\n  * references are used as often as possible. See {@link Reference}.\n- *\n+ * <p>\n  * For consistency, all formats have a one-byte header specifying:\n  *\n  * <ol>\n@@ -53,21 +54,21 @@ import static org.neo4j.kernel.impl.store.RecordPageLocationCalculator.pageIdFor\n  * <li>0x4: record unit type [1=first, 0=consecutive]\n  * <li>0x8 - 0x80 other flags for this record specific to each type</li>\n  * </ol>\n- *\n+ * <p>\n  * NOTE to the rest of the flags is that a good use of them is to denote whether or not an ID reference is\n  * null (-1) as to save 3B (smallest compressed size) by not writing a reference at all.\n- *\n+ * <p>\n  * For records that are the first out of multiple record units, then immediately following the header byte is\n  * the reference (3-8B) to the secondary ID. After that the \"statically sized\" data and in the end the\n  * dynamically sized data. The general thinking is that the break-off into the secondary record will happen in\n  * the sequence of dynamically sized references and this will allow for crossing the record boundary\n  * in between, but even in the middle of, references quite easily since the {@link CompositePageCursor}\n  * handles the transition seamlessly.\n- *\n+ * <p>\n  * Assigning secondary record unit IDs is done outside of this format implementation, it is just assumed\n  * that records that gets {@link RecordFormat#write(AbstractBaseRecord, PageCursor, int) written} have already\n  * been assigned all required such data.\n- *\n+ * <p>\n  * Usually each records are written and read atomically, so this format requires additional logic to be able to\n  * write and read multiple records together atomically. For writing then currently this is guarded by\n  * higher level entity write locks and so the {@link PageCursor} can simply move from the first on to the second\n@@ -78,217 +79,214 @@ import static org.neo4j.kernel.impl.store.RecordPageLocationCalculator.pageIdFor\n  * @param <RECORD> type of {@link AbstractBaseRecord}\n  */\n abstract class BaseHighLimitRecordFormatV3_0_0<RECORD extends AbstractBaseRecord>\n-        extends BaseOneByteHeaderRecordFormat<RECORD>\n+    extends BaseOneByteHeaderRecordFormat<RECORD>\n {\n-    private static final int HEADER_BYTE = Byte.BYTES;\n+  private static final int HEADER_BYTE = Byte.BYTES;\n \n-    static final long NULL = Record.NULL_REFERENCE.intValue();\n-    static final int HEADER_BIT_RECORD_UNIT = 0b0000_0010;\n-    static final int HEADER_BIT_FIRST_RECORD_UNIT = 0b0000_0100;\n+  static final long NULL = Record.NULL_REFERENCE.intValue();\n+  static final int HEADER_BIT_RECORD_UNIT = 0b0000_0010;\n+  static final int HEADER_BIT_FIRST_RECORD_UNIT = 0b0000_0100;\n \n-    protected BaseHighLimitRecordFormatV3_0_0( Function<StoreHeader,Integer> recordSize, int recordHeaderSize )\n-    {\n-        super( recordSize, recordHeaderSize, IN_USE_BIT, HighLimitV3_0_0.DEFAULT_MAXIMUM_BITS_PER_ID );\n-    }\n+  protected BaseHighLimitRecordFormatV3_0_0(Function<StoreHeader, Integer> recordSize, int recordHeaderSize)\n+  {\n+    super(recordSize, recordHeaderSize, IN_USE_BIT, HighLimitV3_0_0.DEFAULT_MAXIMUM_BITS_PER_ID);\n+  }\n \n-    @Override\n-    public void read( RECORD record, PageCursor primaryCursor, RecordLoad mode, int recordSize )\n-            throws IOException\n+  @Override\n+  public void read(RECORD record, PageCursor primaryCursor, RecordLoad mode, int recordSize)\n+      throws IOException\n+  {\n+    int primaryStartOffset = primaryCursor.getOffset();\n+    byte headerByte = primaryCursor.getByte();\n+    boolean inUse = isInUse(headerByte);\n+    boolean doubleRecordUnit = has(headerByte, HEADER_BIT_RECORD_UNIT);\n+    if (doubleRecordUnit)\n     {\n-        int primaryStartOffset = primaryCursor.getOffset();\n-        byte headerByte = primaryCursor.getByte();\n-        boolean inUse = isInUse( headerByte );\n-        boolean doubleRecordUnit = has( headerByte, HEADER_BIT_RECORD_UNIT );\n-        if ( doubleRecordUnit )\n-        {\n-            boolean firstRecordUnit = has( headerByte, HEADER_BIT_FIRST_RECORD_UNIT );\n-            if ( !firstRecordUnit )\n-            {\n-                // This is a record unit and not even the first one, so you cannot go here directly and read it,\n-                // it may only be read as part of reading the primary unit.\n-                record.clear();\n-                // Return and try again\n-                primaryCursor.setCursorException(\n-                        \"Expected record to be the first unit in the chain, but record header says it's not\" );\n-                return;\n-            }\n+      boolean firstRecordUnit = has(headerByte, HEADER_BIT_FIRST_RECORD_UNIT);\n+      if (!firstRecordUnit)\n+      {\n+        // This is a record unit and not even the first one, so you cannot go here directly and read it,\n+        // it may only be read as part of reading the primary unit.\n+        record.clear();\n+        // Return and try again\n+        primaryCursor.setCursorException(\n+            \"Expected record to be the first unit in the chain, but record header says it's not\");\n+        return;\n+      }\n \n-            // This is a record that is split into multiple record units. We need a bit more clever\n-            // data structures here. For the time being this means instantiating one object,\n-            // but the trade-off is a great reduction in complexity.\n-            long secondaryId = Reference.decode( primaryCursor );\n-            long pageId = pageIdForRecord( secondaryId, primaryCursor.getCurrentPageSize(), recordSize );\n-            int offset = offsetForId( secondaryId, primaryCursor.getCurrentPageSize(), recordSize );\n-            PageCursor secondaryCursor = primaryCursor.openLinkedCursor( pageId );\n-            if ( (!secondaryCursor.next()) | offset < 0 )\n-            {\n-                // We must have made an inconsistent read of the secondary record unit reference.\n-                // No point in trying to read this.\n-                record.clear();\n-                primaryCursor.setCursorException( illegalSecondaryReferenceMessage( pageId ) );\n-                return;\n-            }\n-            secondaryCursor.setOffset( offset + HEADER_BYTE);\n-            int primarySize = recordSize - (primaryCursor.getOffset() - primaryStartOffset);\n-            // We *could* sanity check the secondary record header byte here, but we won't. If it is wrong, then we most\n-            // likely did an inconsistent read, in which case we'll just retry. Otherwise, if the header byte is wrong,\n-            // then there is little we can do about it here, since we are not allowed to throw exceptions.\n+      // This is a record that is split into multiple record units. We need a bit more clever\n+      // data structures here. For the time being this means instantiating one object,\n+      // but the trade-off is a great reduction in complexity.\n+      long secondaryId = Reference.decode(primaryCursor);\n+      long pageId = pageIdForRecord(secondaryId, primaryCursor.getCurrentPageSize(), recordSize);\n+      int offset = offsetForId(secondaryId, primaryCursor.getCurrentPageSize(), recordSize);\n+      PageCursor secondaryCursor = primaryCursor.openLinkedCursor(pageId);\n+      if ((!secondaryCursor.next()) | offset < 0)\n+      {\n+        // We must have made an inconsistent read of the secondary record unit reference.\n+        // No point in trying to read this.\n+        record.clear();\n+        primaryCursor.setCursorException(illegalSecondaryReferenceMessage(pageId));\n+        return;\n+      }\n+      secondaryCursor.setOffset(offset + HEADER_BYTE);\n+      int primarySize = recordSize - (primaryCursor.getOffset() - primaryStartOffset);\n+      // We *could* sanity check the secondary record header byte here, but we won't. If it is wrong, then we most\n+      // likely did an inconsistent read, in which case we'll just retry. Otherwise, if the header byte is wrong,\n+      // then there is little we can do about it here, since we are not allowed to throw exceptions.\n \n-            int secondarySize = recordSize - HEADER_BYTE;\n-            PageCursor composite = CompositePageCursor.compose(\n-                    primaryCursor, primarySize, secondaryCursor, secondarySize );\n-            doReadInternal( record, composite, recordSize, headerByte, inUse );\n-            record.setSecondaryUnitId( secondaryId );\n-        }\n-        else\n-        {\n-            doReadInternal( record, primaryCursor, recordSize, headerByte, inUse );\n-        }\n-    }\n-\n-    private String illegalSecondaryReferenceMessage( long secondaryId )\n+      int secondarySize = recordSize - HEADER_BYTE;\n+      PageCursor composite = CompositePageCursor.compose(\n+          primaryCursor, primarySize, secondaryCursor, secondarySize);\n+      doReadInternal(record, composite, recordSize, headerByte, inUse);\n+      record.setSecondaryUnitId(secondaryId);\n+    } else\n     {\n-        return \"Illegal secondary record reference: \" + secondaryId;\n+      doReadInternal(record, primaryCursor, recordSize, headerByte, inUse);\n     }\n+  }\n \n-    protected abstract void doReadInternal(\n-            RECORD record, PageCursor cursor, int recordSize, long inUseByte, boolean inUse );\n+  private String illegalSecondaryReferenceMessage(long secondaryId)\n+  {\n+    return \"Illegal secondary record reference: \" + secondaryId;\n+  }\n \n-    @Override\n-    public void write( RECORD record, PageCursor primaryCursor, int recordSize )\n-            throws IOException\n-    {\n-        if ( record.inUse() )\n-        {\n-            // Let the specific implementation provide the additional header bits and we'll provide the core format bits.\n-            byte headerByte = headerBits( record );\n-            assert (headerByte & 0x7) == 0 : \"Format-specific header bits (\" + headerByte +\n-                                             \") collides with format-generic header bits\";\n-            headerByte = set( headerByte, IN_USE_BIT, record.inUse() );\n-            headerByte = set( headerByte, HEADER_BIT_RECORD_UNIT, record.requiresSecondaryUnit() );\n-            headerByte = set( headerByte, HEADER_BIT_FIRST_RECORD_UNIT, true );\n-            primaryCursor.putByte( headerByte );\n+  protected abstract void doReadInternal(\n+      RECORD record, PageCursor cursor, int recordSize, long inUseByte, boolean inUse);\n \n-            if ( record.requiresSecondaryUnit() )\n-            {\n-                // Write using the normal adapter since the first reference we write cannot really overflow\n-                // into the secondary record\n-                long secondaryUnitId = record.getSecondaryUnitId();\n-                long pageId = pageIdForRecord( secondaryUnitId, primaryCursor.getCurrentPageSize(), recordSize );\n-                int offset = offsetForId( secondaryUnitId, primaryCursor.getCurrentPageSize(), recordSize );\n-                PageCursor secondaryCursor = primaryCursor.openLinkedCursor( pageId );\n-                if ( !secondaryCursor.next() )\n-                {\n-                    // We are not allowed to write this much data to the file, apparently.\n-                    record.clear();\n-                    return;\n-                }\n-                secondaryCursor.setOffset( offset );\n-                secondaryCursor.putByte( (byte) (IN_USE_BIT | HEADER_BIT_RECORD_UNIT) );\n-                int recordSizeWithoutHeader = recordSize - HEADER_BYTE;\n-                PageCursor composite = CompositePageCursor.compose(\n-                        primaryCursor, recordSizeWithoutHeader, secondaryCursor, recordSizeWithoutHeader );\n+  @Override\n+  public void write(RECORD record, PageCursor primaryCursor, int recordSize)\n+      throws IOException\n+  {\n+    if (record.inUse())\n+    {\n+      // Let the specific implementation provide the additional header bits and we'll provide the core format bits.\n+      byte headerByte = headerBits(record);\n+      assert (headerByte & 0x7) == 0 : \"Format-specific header bits (\" + headerByte +\n+          \") collides with format-generic header bits\";\n+      headerByte = set(headerByte, IN_USE_BIT, record.inUse());\n+      headerByte = set(headerByte, HEADER_BIT_RECORD_UNIT, record.requiresSecondaryUnit());\n+      headerByte = set(headerByte, HEADER_BIT_FIRST_RECORD_UNIT, true);\n+      primaryCursor.putByte(headerByte);\n \n-                Reference.encode( secondaryUnitId, composite );\n-                doWriteInternal( record, composite );\n-            }\n-            else\n-            {\n-                doWriteInternal( record, primaryCursor );\n-            }\n-        }\n-        else\n+      if (record.requiresSecondaryUnit())\n+      {\n+        // Write using the normal adapter since the first reference we write cannot really overflow\n+        // into the secondary record\n+        long secondaryUnitId = record.getSecondaryUnitId();\n+        long pageId = pageIdForRecord(secondaryUnitId, primaryCursor.getCurrentPageSize(), recordSize);\n+        int offset = offsetForId(secondaryUnitId, primaryCursor.getCurrentPageSize(), recordSize);\n+        PageCursor secondaryCursor = primaryCursor.openLinkedCursor(pageId);\n+        if (!secondaryCursor.next())\n         {\n-            markAsUnused( primaryCursor, record, recordSize );\n+          // We are not allowed to write this much data to the file, apparently.\n+          record.clear();\n+          return;\n         }\n+        secondaryCursor.setOffset(offset);\n+        secondaryCursor.putByte((byte) (IN_USE_BIT | HEADER_BIT_RECORD_UNIT));\n+        int recordSizeWithoutHeader = recordSize - HEADER_BYTE;\n+        PageCursor composite = CompositePageCursor.compose(\n+            primaryCursor, recordSizeWithoutHeader, secondaryCursor, recordSizeWithoutHeader);\n+\n+        Reference.encode(secondaryUnitId, composite);\n+        doWriteInternal(record, composite);\n+      } else\n+      {\n+        doWriteInternal(record, primaryCursor);\n+      }\n+    } else\n+    {\n+      markAsUnused(primaryCursor, record, recordSize);\n     }\n+  }\n \n-    /*\n-     * Use this instead of {@link #markFirstByteAsUnused(PageCursor)} to mark both record units,\n-     * if record has a reference to a secondary unit.\n-     */\n-    protected void markAsUnused( PageCursor cursor, RECORD record, int recordSize )\n-            throws IOException\n+  /*\n+   * Use this instead of {@link #markFirstByteAsUnused(PageCursor)} to mark both record units,\n+   * if record has a reference to a secondary unit.\n+   */\n+  protected void markAsUnused(PageCursor cursor, RECORD record, int recordSize)\n+      throws IOException\n+  {\n+    markAsUnused(cursor);\n+    if (record.hasSecondaryUnitId())\n     {\n-        markAsUnused( cursor );\n-        if ( record.hasSecondaryUnitId() )\n-        {\n-            long secondaryUnitId = record.getSecondaryUnitId();\n-            long pageIdForSecondaryRecord = pageIdForRecord( secondaryUnitId, cursor.getCurrentPageSize(), recordSize );\n-            int offsetForSecondaryId = offsetForId( secondaryUnitId, cursor.getCurrentPageSize(), recordSize );\n-            if ( !cursor.next( pageIdForSecondaryRecord ) )\n-            {\n-                throw new UnderlyingStorageException( \"Couldn't move to secondary page \" + pageIdForSecondaryRecord );\n-            }\n-            cursor.setOffset( offsetForSecondaryId );\n-            markAsUnused( cursor );\n-        }\n+      long secondaryUnitId = record.getSecondaryUnitId();\n+      long pageIdForSecondaryRecord = pageIdForRecord(secondaryUnitId, cursor.getCurrentPageSize(), recordSize);\n+      int offsetForSecondaryId = offsetForId(secondaryUnitId, cursor.getCurrentPageSize(), recordSize);\n+      if (!cursor.next(pageIdForSecondaryRecord))\n+      {\n+        throw new UnderlyingStorageException(\"Couldn't move to secondary page \" + pageIdForSecondaryRecord);\n+      }\n+      cursor.setOffset(offsetForSecondaryId);\n+      markAsUnused(cursor);\n     }\n+  }\n \n-    protected abstract void doWriteInternal( RECORD record, PageCursor cursor );\n+  protected abstract void doWriteInternal(RECORD record, PageCursor cursor);\n \n-    protected abstract byte headerBits( RECORD record );\n+  protected abstract byte headerBits(RECORD record);\n \n-    @Override\n-    public final void prepare( RECORD record, int recordSize, IdSequence idSequence )\n+  @Override\n+  public final void prepare(RECORD record, int recordSize, IdSequence idSequence)\n+  {\n+    if (record.inUse())\n     {\n-        if ( record.inUse() )\n-        {\n-            int requiredLength = HEADER_BYTE + requiredDataLength( record );\n-            boolean requiresSecondaryUnit = requiredLength > recordSize;\n-            record.setRequiresSecondaryUnit( requiresSecondaryUnit );\n-            if ( record.requiresSecondaryUnit() && !record.hasSecondaryUnitId() )\n-            {\n-                // Allocate a new id at this point, but this is not the time to free this ID the the case where\n-                // this record doesn't need this secondary unit anymore... that needs to be done when applying to store.\n-                record.setSecondaryUnitId( idSequence.nextId() );\n-            }\n-        }\n+      int requiredLength = HEADER_BYTE + requiredDataLength(record);\n+      boolean requiresSecondaryUnit = requiredLength > recordSize;\n+      record.setRequiresSecondaryUnit(requiresSecondaryUnit);\n+      if (record.requiresSecondaryUnit() && !record.hasSecondaryUnitId())\n+      {\n+        // Allocate a new id at this point, but this is not the time to free this ID the the case where\n+        // this record doesn't need this secondary unit anymore... that needs to be done when applying to store.\n+        record.setSecondaryUnitId(idSequence.nextId());\n+      }\n     }\n+  }\n \n-    /**\n-     * Required length of the data in the given record (without the header byte).\n-     *\n-     * @param record data to check how much space it would require.\n-     * @return length required to store the data in the given record.\n-     */\n-    protected abstract int requiredDataLength( RECORD record );\n+  /**\n+   * Required length of the data in the given record (without the header byte).\n+   *\n+   * @param record data to check how much space it would require.\n+   * @return length required to store the data in the given record.\n+   */\n+  protected abstract int requiredDataLength(RECORD record);\n \n-    protected static int length( long reference )\n-    {\n-        return Reference.length( reference );\n-    }\n+  protected static int length(long reference)\n+  {\n+    return Reference.length(reference);\n+  }\n \n-    protected static int length( long reference, long nullValue )\n-    {\n-        return reference == nullValue ? 0 : length( reference );\n-    }\n+  protected static int length(long reference, long nullValue)\n+  {\n+    return reference == nullValue ? 0 : length(reference);\n+  }\n \n-    protected static long decodeCompressedReference( PageCursor cursor )\n-    {\n-        return Reference.decode( cursor );\n-    }\n+  protected static long decodeCompressedReference(PageCursor cursor)\n+  {\n+    return Reference.decode(cursor);\n+  }\n \n-    protected static long decodeCompressedReference( PageCursor cursor, long headerByte, int headerBitMask, long nullValue )\n-    {\n-        return has( headerByte, headerBitMask ) ? decodeCompressedReference( cursor ) : nullValue;\n-    }\n+  protected static long decodeCompressedReference(PageCursor cursor, long headerByte, int headerBitMask, long nullValue)\n+  {\n+    return has(headerByte, headerBitMask) ? decodeCompressedReference(cursor) : nullValue;\n+  }\n \n-    protected static void encode( PageCursor cursor, long reference )\n-    {\n-        Reference.encode( reference, cursor );\n-    }\n+  protected static void encode(PageCursor cursor, long reference)\n+  {\n+    Reference.encode(reference, cursor);\n+  }\n \n-    protected static void encode( PageCursor cursor, long reference, long nullValue )\n+  protected static void encode(PageCursor cursor, long reference, long nullValue)\n+  {\n+    if (reference != nullValue)\n     {\n-        if ( reference != nullValue )\n-        {\n-            Reference.encode( reference, cursor );\n-        }\n+      Reference.encode(reference, cursor);\n     }\n+  }\n \n-    protected static byte set( byte header, int bitMask, long reference, long nullValue )\n-    {\n-        return set( header, bitMask, reference != nullValue );\n-    }\n+  protected static byte set(byte header, int bitMask, long reference, long nullValue)\n+  {\n+    return set(header, bitMask, reference != nullValue);\n+  }\n }\n",
            "diff_size": 222
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}