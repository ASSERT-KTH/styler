{
    "project_name": "Angel-ML-angel",
    "error_id": "808",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/808/UserRequestAdapter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/808/UserRequestAdapter.java\nindex 023b65e75b8..31ddcd01d0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/808/UserRequestAdapter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/808/UserRequestAdapter.java\n@@ -158,8 +158,8 @@ public class UserRequestAdapter {\n    * Get elements of the row use int indices, the row type should has \"int\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowId row id\n-   * @param indices elements indices\n+   * @param rowId    row id\n+   * @param indices  elements indices\n    * @return the Vector use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector> get(int matrixId, int rowId, int[] indices) throws AngelException {\n@@ -171,9 +171,9 @@ public class UserRequestAdapter {\n    * Get elements of the row use int indices, the row type should has \"int\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowId row id\n-   * @param indices elements indices\n-   * @param func element init function\n+   * @param rowId    row id\n+   * @param indices  elements indices\n+   * @param func     element init function\n    * @return the Vector use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector> get(int matrixId, int rowId, int[] indices, InitFunc func)\n@@ -186,8 +186,8 @@ public class UserRequestAdapter {\n    * Get elements of the row use long indices, the row type should has \"int\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowId row id\n-   * @param indices elements indices\n+   * @param rowId    row id\n+   * @param indices  elements indices\n    * @return the Vector use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector> get(int matrixId, int rowId, long[] indices) throws AngelException {\n@@ -199,9 +199,9 @@ public class UserRequestAdapter {\n    * Get elements of the row use long indices, the row type should has \"int\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowId row id\n-   * @param indices elements indices\n-   * @param func element init function\n+   * @param rowId    row id\n+   * @param indices  elements indices\n+   * @param func     element init function\n    * @return the Vector use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector> get(int matrixId, int rowId, long[] indices, InitFunc func)\n@@ -255,7 +255,7 @@ public class UserRequestAdapter {\n   }\n \n   private RequestHeader createRequestHeader(int requestId, TransportMethod method, int matrixId,\n-      int partId) {\n+                                            int partId) {\n     RequestHeader header = new RequestHeader();\n     header.setUserRequestId(requestId);\n     header.setMethodId(method.getMethodId());\n@@ -265,8 +265,8 @@ public class UserRequestAdapter {\n   }\n \n   private void sendIndexGetRowRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int rowId, int partId, KeyPart keyPart, InitFunc func) {\n+                                      int matrixId,\n+                                      int rowId, int partId, KeyPart keyPart, InitFunc func) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROW,\n         matrixId, partId);\n@@ -285,8 +285,8 @@ public class UserRequestAdapter {\n    * Get elements of the rows use int indices, the row type should has \"int\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowIds rows ids\n-   * @param indices elements indices\n+   * @param rowIds   rows ids\n+   * @param indices  elements indices\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices)\n@@ -299,9 +299,9 @@ public class UserRequestAdapter {\n    * Get elements of the rows use int indices, the row type should has \"int\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowIds rows ids\n-   * @param indices elements indices\n-   * @param func element init function\n+   * @param rowIds   rows ids\n+   * @param indices  elements indices\n+   * @param func     element init function\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices, InitFunc func)\n@@ -314,8 +314,8 @@ public class UserRequestAdapter {\n    * Get elements of the rows use long indices, the row type should has \"long\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowIds rows ids\n-   * @param indices elements indices\n+   * @param rowIds   rows ids\n+   * @param indices  elements indices\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices)\n@@ -328,9 +328,9 @@ public class UserRequestAdapter {\n    * Get elements of the rows use long indices, the row type should has \"long\" type indices\n    *\n    * @param matrixId matrix id\n-   * @param rowIds rows ids\n-   * @param indices elements indices\n-   * @param func element init function\n+   * @param rowIds   rows ids\n+   * @param indices  elements indices\n+   * @param func     element init function\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices, InitFunc func)\n@@ -390,8 +390,8 @@ public class UserRequestAdapter {\n   }\n \n   private void sendIndexGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int[] rowIds, int partId, KeyPart keyPart, InitFunc func) {\n+                                       int matrixId,\n+                                       int[] rowIds, int partId, KeyPart keyPart, InitFunc func) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROWS,\n         matrixId, partId);\n@@ -412,8 +412,8 @@ public class UserRequestAdapter {\n    *\n    * @param func get row udf\n    * @return GetResult the result of the udf\n-   * @throws ExecutionException exception thrown when attempting to retrieve the result of a task\n-   * that aborted by throwing an exception\n+   * @throws ExecutionException   exception thrown when attempting to retrieve the result of a task\n+   *                              that aborted by throwing an exception\n    * @throws InterruptedException interrupted while wait the result\n    */\n   public FutureResult<GetResult> get(GetFunc func) throws InterruptedException, ExecutionException {\n@@ -441,8 +441,8 @@ public class UserRequestAdapter {\n   }\n \n   private void sendGetUDFRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int partId, GetFunc func, PartitionGetParam partGetParam) {\n+                                 int matrixId,\n+                                 int partId, GetFunc func, PartitionGetParam partGetParam) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_PSF,\n         matrixId, partId);\n@@ -482,8 +482,8 @@ public class UserRequestAdapter {\n   }\n \n   private void sendGetRowRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int rowId, int partId) {\n+                                 int matrixId,\n+                                 int rowId, int partId) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSPLIT,\n         matrixId, partId);\n@@ -524,8 +524,8 @@ public class UserRequestAdapter {\n   }\n \n   private void sendGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int[] rowIds, int partId) {\n+                                  int matrixId,\n+                                  int[] rowIds, int partId) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSSPLIT,\n         matrixId, partId);\n@@ -573,7 +573,8 @@ public class UserRequestAdapter {\n   }\n \n   private void sendUpdateUDFRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId, int partId, UpdateFunc updateFunc, PartitionUpdateParam partParam) {\n+                                    int matrixId, int partId, UpdateFunc updateFunc,\n+                                    PartitionUpdateParam partParam) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE_PSF,\n         matrixId, partId);\n@@ -620,8 +621,8 @@ public class UserRequestAdapter {\n   }\n \n   private void sendUpdateRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int partId, CompStreamKeyValuePart split, UpdateOp op) {\n+                                 int matrixId,\n+                                 int partId, CompStreamKeyValuePart split, UpdateOp op) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE,\n         matrixId, partId);\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 217.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "264",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "269",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 270.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "358",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "386",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "391",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 392.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "435",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "440",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 441.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "474",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "479",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 480.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "514",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "519",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 520.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "561",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "565",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 566.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "606",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "611",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 612.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/808/UserRequestAdapter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/808/UserRequestAdapter.java\nindex 023b65e75b8..24ad4fff6a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/808/UserRequestAdapter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/808/UserRequestAdapter.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.psagent.matrix.transport.adapter;\n \n import com.tencent.angel.PartitionKey;\n@@ -178,7 +177,7 @@ public class UserRequestAdapter {\n    */\n   public FutureResult<Vector> get(int matrixId, int rowId, int[] indices, InitFunc func)\n       throws AngelException {\n-    checkParams(matrixId, rowId, indices);\n+  checkParams(matrixId, rowId, indices);\n     return get(new IntIndexGetRowRequest(matrixId, rowId, indices, func));\n   }\n \n@@ -206,7 +205,7 @@ public class UserRequestAdapter {\n    */\n   public FutureResult<Vector> get(int matrixId, int rowId, long[] indices, InitFunc func)\n       throws AngelException {\n-    checkParams(matrixId, rowId, indices);\n+  checkParams(matrixId, rowId, indices);\n     return get(new LongIndexGetRowRequest(matrixId, rowId, indices, func));\n   }\n \n@@ -214,7 +213,7 @@ public class UserRequestAdapter {\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager()\n         .getMatrixMeta(request.getMatrixId());\n \n-    // Split the user request to partition requests\n+// Split the user request to partition requests\n     FutureResult<Vector> result = new FutureResult<>();\n     KeyPart[] splits;\n     long startTs = System.currentTimeMillis();\n@@ -223,9 +222,8 @@ public class UserRequestAdapter {\n     } else if (request instanceof LongIndexGetRowRequest) {\n       splits = RouterUtils.split(matrixMeta, -1, ((LongIndexGetRowRequest) request).getKeys());\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport index request type \" + request.getClass().toString());\n-    }\n+      throw new UnsupportedOperationException(\"Unsupport index request type \" + request.getClass().toString());\n+  }\n     LOG.info(\"Get by indices split use time: \" + (System.currentTimeMillis() - startTs));\n \n     // filter empty partition requests\n@@ -254,8 +252,7 @@ public class UserRequestAdapter {\n     return result;\n   }\n \n-  private RequestHeader createRequestHeader(int requestId, TransportMethod method, int matrixId,\n-      int partId) {\n+  private RequestHeader createRequestHeader(int requestId, TransportMethod method, int matrixId, int partId) {\n     RequestHeader header = new RequestHeader();\n     header.setUserRequestId(requestId);\n     header.setMethodId(method.getMethodId());\n@@ -264,14 +261,12 @@ public class UserRequestAdapter {\n     return header;\n   }\n \n-  private void sendIndexGetRowRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n+  private void sendIndexGetRowRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId,\n       int rowId, int partId, KeyPart keyPart, InitFunc func) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROW,\n         matrixId, partId);\n-\n-    // Request body\n+// Request body\n     IndexPartGetRowRequest requestData = new IndexPartGetRowRequest(rowId, keyPart, func);\n \n     // Request\n@@ -291,7 +286,7 @@ public class UserRequestAdapter {\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices)\n       throws AngelException {\n-    checkParams(matrixId, rowIds, indices);\n+  checkParams(matrixId, rowIds, indices);\n     return get(new IntIndexGetRowsRequest(matrixId, rowIds, indices, null));\n   }\n \n@@ -306,7 +301,7 @@ public class UserRequestAdapter {\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices, InitFunc func)\n       throws AngelException {\n-    checkParams(matrixId, rowIds, indices);\n+  checkParams(matrixId, rowIds, indices);\n     return get(new IntIndexGetRowsRequest(matrixId, rowIds, indices, func));\n   }\n \n@@ -320,7 +315,7 @@ public class UserRequestAdapter {\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices)\n       throws AngelException {\n-    checkParams(matrixId, rowIds, indices);\n+  checkParams(matrixId, rowIds, indices);\n     return get(new LongIndexGetRowsRequest(matrixId, rowIds, indices, null));\n   }\n \n@@ -335,7 +330,7 @@ public class UserRequestAdapter {\n    */\n   public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices, InitFunc func)\n       throws AngelException {\n-    checkParams(matrixId, rowIds, indices);\n+  checkParams(matrixId, rowIds, indices);\n     return get(new LongIndexGetRowsRequest(matrixId, rowIds, indices, func));\n   }\n \n@@ -343,7 +338,7 @@ public class UserRequestAdapter {\n     // Only support column-partitioned matrix now!!\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager()\n         .getMatrixMeta(request.getMatrixId());\n-    PartitionKey[] matrixParts = matrixMeta.getPartitionKeys();\n+PartitionKey[] matrixParts = matrixMeta.getPartitionKeys();\n     for (PartitionKey part : matrixParts) {\n       if (part.getStartRow() != 0 || part.getEndRow() != matrixMeta.getRowNum()) {\n         throw new UnsupportedOperationException(\n@@ -360,9 +355,8 @@ public class UserRequestAdapter {\n     } else if (request instanceof LongIndexGetRowsRequest) {\n       splits = RouterUtils.split(matrixMeta, -1, ((LongIndexGetRowsRequest) request).getIndices());\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport index request type \" + request.getClass().toString());\n-    }\n+      throw new UnsupportedOperationException(\"Unsupport index request type \" + request.getClass().toString());\n+  }\n     LOG.info(\"Get by indices split use time: \" + (System.currentTimeMillis() - startTs));\n \n     // filter empty partition requests\n@@ -389,14 +383,12 @@ public class UserRequestAdapter {\n     return result;\n   }\n \n-  private void sendIndexGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n+  private void sendIndexGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId,\n       int[] rowIds, int partId, KeyPart keyPart, InitFunc func) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROWS,\n         matrixId, partId);\n-\n-    // Request body\n+// Request body\n     IndexPartGetRowsRequest requestData = new IndexPartGetRowsRequest(rowIds, keyPart, func);\n \n     // Request\n@@ -436,18 +428,16 @@ public class UserRequestAdapter {\n     for (int i = 0; i < size; i++) {\n       sendGetUDFRequest(matrixClient, requestId, partParams.get(i).getMatrixId(),\n           partParams.get(i).getPartKey().getPartitionId(), func, partParams.get(i));\n-    }\n+  }\n     return result;\n   }\n \n-  private void sendGetUDFRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n+  private void sendGetUDFRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId,\n       int partId, GetFunc func, PartitionGetParam partGetParam) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_PSF,\n         matrixId, partId);\n-\n-    // Request body\n+// Request body\n     GetUDFRequest requestData = new GetUDFRequest(func.getClass().getName(), partGetParam);\n \n     // Request\n@@ -481,14 +471,12 @@ public class UserRequestAdapter {\n     return result;\n   }\n \n-  private void sendGetRowRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n+  private void sendGetRowRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId,\n       int rowId, int partId) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSPLIT,\n         matrixId, partId);\n-\n-    // Request body\n+// Request body\n     GetRowSplitRequest requestData = new GetRowSplitRequest(rowId);\n \n     // Request\n@@ -523,14 +511,12 @@ public class UserRequestAdapter {\n     return result;\n   }\n \n-  private void sendGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n+  private void sendGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId,\n       int[] rowIds, int partId) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSSPLIT,\n         matrixId, partId);\n-\n-    // Request body\n+// Request body\n     GetRowsSplitRequest requestData = new GetRowsSplitRequest(rowIds);\n \n     // Request\n@@ -572,13 +558,11 @@ public class UserRequestAdapter {\n     return result;\n   }\n \n-  private void sendUpdateUDFRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId, int partId, UpdateFunc updateFunc, PartitionUpdateParam partParam) {\n+  private void sendUpdateUDFRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId, int partId, UpdateFunc updateFunc, PartitionUpdateParam partParam) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE_PSF,\n         matrixId, partId);\n-\n-    // Request body\n+// Request body\n     UpdateUDFRequest requestData = new UpdateUDFRequest(updateFunc.getClass().getName(), partParam);\n \n     // Request\n@@ -619,14 +603,12 @@ public class UserRequestAdapter {\n     return result;\n   }\n \n-  private void sendUpdateRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n+  private void sendUpdateRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId,\n       int partId, CompStreamKeyValuePart split, UpdateOp op) {\n     // Request header\n     RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE,\n         matrixId, partId);\n-\n-    // Request body\n+// Request body\n     UpdateRequest requestData = new UpdateRequest(split, op);\n \n     // Request\n@@ -802,4 +784,4 @@ public class UserRequestAdapter {\n     }\n     return count;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "265",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "304",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "318",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "333",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "340",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "344",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "356",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "358",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "380",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "386",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "389",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "432",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "435",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "451",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "470",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "486",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "497",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "505",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "541",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "546",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "549",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "589",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "592",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/808/UserRequestAdapter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/808/UserRequestAdapter.java\nindex 023b65e75b8..2d1cdad6b4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/808/UserRequestAdapter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/808/UserRequestAdapter.java\n@@ -69,6 +69,7 @@ import org.apache.commons.logging.LogFactory;\n  * multiple rpc requests. The adapter can split the application request to sub-requests(rpc\n  * requests) and merge the results of them, then return the final result.\n  */\n+\n public class UserRequestAdapter {\n \n   private static final Log LOG = LogFactory.getLog(UserRequestAdapter.class);\n@@ -106,19 +107,19 @@ public class UserRequestAdapter {\n   /**\n    * Create a new UserRequestAdapter.\n    */\n+\n   public UserRequestAdapter() {\n     locks = new ConcurrentHashMap<>();\n-\n     requests = new ConcurrentHashMap<>();\n     requestIdToResultMap = new ConcurrentHashMap<>();\n     requestIdToResponseCache = new ConcurrentHashMap<>();\n-\n     stopped = new AtomicBoolean(false);\n   }\n \n   /**\n    * Start the sub-request results merge dispatcher.\n    */\n+\n   public void start() {\n     workerPool = new ForkJoinPool(16);\n   }\n@@ -126,6 +127,7 @@ public class UserRequestAdapter {\n   /**\n    * Stop the merge dispatcher and all workers.\n    */\n+\n   public void stop() {\n     if (stopped.getAndSet(true)) {\n       return;\n@@ -135,7 +137,6 @@ public class UserRequestAdapter {\n       workerPool.shutdownNow();\n       workerPool = null;\n     }\n-\n     clear();\n   }\n \n@@ -145,10 +146,8 @@ public class UserRequestAdapter {\n \n   public void clear(String errorLog) {\n     for (Entry<Integer, FutureResult> resultEntry : requestIdToResultMap.entrySet()) {\n-      resultEntry.getValue()\n-          .setExecuteException(new ExecutionException(new AngelException(errorLog)));\n+      resultEntry.getValue().setExecuteException(new ExecutionException(new AngelException(errorLog)));\n     }\n-\n     requestIdToResultMap.clear();\n     requestIdToResponseCache.clear();\n     requests.clear();\n@@ -162,6 +161,7 @@ public class UserRequestAdapter {\n    * @param indices elements indices\n    * @return the Vector use sparse storage, contains indices and values\n    */\n+\n   public FutureResult<Vector> get(int matrixId, int rowId, int[] indices) throws AngelException {\n     checkParams(matrixId, rowId, indices);\n     return get(new IntIndexGetRowRequest(matrixId, rowId, indices, null));\n@@ -176,8 +176,8 @@ public class UserRequestAdapter {\n    * @param func element init function\n    * @return the Vector use sparse storage, contains indices and values\n    */\n-  public FutureResult<Vector> get(int matrixId, int rowId, int[] indices, InitFunc func)\n-      throws AngelException {\n+\n+  public FutureResult<Vector> get(int matrixId, int rowId, int[] indices, InitFunc func) throws AngelException {\n     checkParams(matrixId, rowId, indices);\n     return get(new IntIndexGetRowRequest(matrixId, rowId, indices, func));\n   }\n@@ -190,6 +190,7 @@ public class UserRequestAdapter {\n    * @param indices elements indices\n    * @return the Vector use sparse storage, contains indices and values\n    */\n+\n   public FutureResult<Vector> get(int matrixId, int rowId, long[] indices) throws AngelException {\n     checkParams(matrixId, rowId, indices);\n     return get(new LongIndexGetRowRequest(matrixId, rowId, indices, null));\n@@ -204,15 +205,14 @@ public class UserRequestAdapter {\n    * @param func element init function\n    * @return the Vector use sparse storage, contains indices and values\n    */\n-  public FutureResult<Vector> get(int matrixId, int rowId, long[] indices, InitFunc func)\n-      throws AngelException {\n+\n+  public FutureResult<Vector> get(int matrixId, int rowId, long[] indices, InitFunc func) throws AngelException {\n     checkParams(matrixId, rowId, indices);\n     return get(new LongIndexGetRowRequest(matrixId, rowId, indices, func));\n   }\n \n   private FutureResult<Vector> get(IndexGetRowRequest request) {\n-    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager()\n-        .getMatrixMeta(request.getMatrixId());\n+    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(request.getMatrixId());\n \n     // Split the user request to partition requests\n     FutureResult<Vector> result = new FutureResult<>();\n@@ -221,14 +221,14 @@ public class UserRequestAdapter {\n     if (request instanceof IntIndexGetRowRequest) {\n       splits = RouterUtils.split(matrixMeta, -1, ((IntIndexGetRowRequest) request).getKeys());\n     } else if (request instanceof LongIndexGetRowRequest) {\n-      splits = RouterUtils.split(matrixMeta, -1, ((LongIndexGetRowRequest) request).getKeys());\n+             splits = RouterUtils.split(matrixMeta, -1, ((LongIndexGetRowRequest) request).getKeys());\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport index request type \" + request.getClass().toString());\n+      throw new UnsupportedOperationException(\"Unsupport index request type \" + request.getClass().toString());\n     }\n     LOG.info(\"Get by indices split use time: \" + (System.currentTimeMillis() - startTs));\n \n     // filter empty partition requests\n+\n     int needRequestPartNum = noEmptyPartNum(splits);\n     if (needRequestPartNum == 0) {\n       result.set(null);\n@@ -236,6 +236,7 @@ public class UserRequestAdapter {\n     }\n \n     // Create partition results cache\n+\n     ResponseCache cache = new MapResponseCache(needRequestPartNum);\n     int requestId = request.getRequestId();\n     requestIdToResponseCache.put(requestId, cache);\n@@ -246,16 +247,13 @@ public class UserRequestAdapter {\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     for (int i = 0; i < splits.length; i++) {\n       if (splits[i] != null && splits[i].size() > 0) {\n-        sendIndexGetRowRequest(matrixClient, requestId, request.getMatrixId(),\n-            request.getRowId(), i, splits[i], request.getFunc());\n+        sendIndexGetRowRequest(matrixClient, requestId, request.getMatrixId(), request.getRowId(), i, splits[i], request.getFunc());\n       }\n     }\n-\n     return result;\n   }\n \n-  private RequestHeader createRequestHeader(int requestId, TransportMethod method, int matrixId,\n-      int partId) {\n+  private RequestHeader createRequestHeader(int requestId, TransportMethod method, int matrixId, int partId) {\n     RequestHeader header = new RequestHeader();\n     header.setUserRequestId(requestId);\n     header.setMethodId(method.getMethodId());\n@@ -264,12 +262,10 @@ public class UserRequestAdapter {\n     return header;\n   }\n \n-  private void sendIndexGetRowRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int rowId, int partId, KeyPart keyPart, InitFunc func) {\n+  private void sendIndexGetRowRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId, int rowId, int partId,\n+                                      KeyPart keyPart, InitFunc func) {\n     // Request header\n-    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROW,\n-        matrixId, partId);\n+    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROW, matrixId, partId);\n \n     // Request body\n     IndexPartGetRowRequest requestData = new IndexPartGetRowRequest(rowId, keyPart, func);\n@@ -289,8 +285,8 @@ public class UserRequestAdapter {\n    * @param indices elements indices\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n-  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices)\n-      throws AngelException {\n+\n+  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices) throws AngelException {\n     checkParams(matrixId, rowIds, indices);\n     return get(new IntIndexGetRowsRequest(matrixId, rowIds, indices, null));\n   }\n@@ -304,8 +300,8 @@ public class UserRequestAdapter {\n    * @param func element init function\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n-  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices, InitFunc func)\n-      throws AngelException {\n+\n+  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, int[] indices, InitFunc func) throws AngelException {\n     checkParams(matrixId, rowIds, indices);\n     return get(new IntIndexGetRowsRequest(matrixId, rowIds, indices, func));\n   }\n@@ -318,8 +314,8 @@ public class UserRequestAdapter {\n    * @param indices elements indices\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n-  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices)\n-      throws AngelException {\n+\n+  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices) throws AngelException {\n     checkParams(matrixId, rowIds, indices);\n     return get(new LongIndexGetRowsRequest(matrixId, rowIds, indices, null));\n   }\n@@ -333,39 +329,38 @@ public class UserRequestAdapter {\n    * @param func element init function\n    * @return the Vectors use sparse storage, contains indices and values\n    */\n-  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices, InitFunc func)\n-      throws AngelException {\n+\n+  public FutureResult<Vector[]> get(int matrixId, int[] rowIds, long[] indices, InitFunc func) throws AngelException {\n     checkParams(matrixId, rowIds, indices);\n     return get(new LongIndexGetRowsRequest(matrixId, rowIds, indices, func));\n   }\n \n   private FutureResult<Vector[]> get(IndexGetRowsRequest request) {\n     // Only support column-partitioned matrix now!!\n-    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager()\n-        .getMatrixMeta(request.getMatrixId());\n+    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(request.getMatrixId());\n     PartitionKey[] matrixParts = matrixMeta.getPartitionKeys();\n     for (PartitionKey part : matrixParts) {\n       if (part.getStartRow() != 0 || part.getEndRow() != matrixMeta.getRowNum()) {\n-        throw new UnsupportedOperationException(\n-            \"Get rows by indices only support column-partitioned matrix now\");\n+        throw new UnsupportedOperationException(\"Get rows by indices only support column-partitioned matrix now\");\n       }\n     }\n \n     // Split the user request to partition requests\n+\n     FutureResult<Vector[]> result = new FutureResult<>();\n     long startTs = System.currentTimeMillis();\n     KeyPart[] splits;\n     if (request instanceof IntIndexGetRowsRequest) {\n       splits = RouterUtils.split(matrixMeta, -1, ((IntIndexGetRowsRequest) request).getIndices());\n     } else if (request instanceof LongIndexGetRowsRequest) {\n-      splits = RouterUtils.split(matrixMeta, -1, ((LongIndexGetRowsRequest) request).getIndices());\n+             splits = RouterUtils.split(matrixMeta, -1, ((LongIndexGetRowsRequest) request).getIndices());\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport index request type \" + request.getClass().toString());\n+      throw new UnsupportedOperationException(\"Unsupport index request type \" + request.getClass().toString());\n     }\n     LOG.info(\"Get by indices split use time: \" + (System.currentTimeMillis() - startTs));\n \n     // filter empty partition requests\n+\n     int needRequestPartNum = noEmptyPartNum(splits);\n     if (needRequestPartNum == 0) {\n       result.set(null);\n@@ -373,28 +368,25 @@ public class UserRequestAdapter {\n     }\n \n     // Create partition results cache\n+\n     ResponseCache cache = new MapResponseCache(needRequestPartNum);\n     int requestId = request.getRequestId();\n     requestIdToResponseCache.put(requestId, cache);\n     requestIdToResultMap.put(requestId, result);\n     requests.put(requestId, request);\n-\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     for (int i = 0; i < splits.length; i++) {\n       if (splits[i] != null && splits[i].size() > 0) {\n-        sendIndexGetRowsRequest(matrixClient, requestId, request.getMatrixId(), request.getRowIds(),\n-            i, splits[i], request.getFunc());\n+        sendIndexGetRowsRequest(matrixClient, requestId, request.getMatrixId(), request.getRowIds(), i, splits[i], request.getFunc());\n       }\n     }\n     return result;\n   }\n \n-  private void sendIndexGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int[] rowIds, int partId, KeyPart keyPart, InitFunc func) {\n+  private void sendIndexGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId, int[] rowIds, int partId,\n+                                       KeyPart keyPart, InitFunc func) {\n     // Request header\n-    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROWS,\n-        matrixId, partId);\n+    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.INDEX_GET_ROWS, matrixId, partId);\n \n     // Request body\n     IndexPartGetRowsRequest requestData = new IndexPartGetRowsRequest(rowIds, keyPart, func);\n@@ -416,6 +408,7 @@ public class UserRequestAdapter {\n    * that aborted by throwing an exception\n    * @throws InterruptedException interrupted while wait the result\n    */\n+\n   public FutureResult<GetResult> get(GetFunc func) throws InterruptedException, ExecutionException {\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     GetParam param = func.getParam();\n@@ -423,29 +416,23 @@ public class UserRequestAdapter {\n     // Split param use matrix partitons\n     List<PartitionGetParam> partParams = param.split();\n     int size = partParams.size();\n-\n     GetPSFRequest request = new GetPSFRequest(func);\n-\n     int requestId = request.getRequestId();\n     FutureResult<GetResult> result = new FutureResult<>();\n     ResponseCache cache = new MapResponseCache(size);\n     requests.put(requestId, request);\n     requestIdToResponseCache.put(requestId, cache);\n     requestIdToResultMap.put(requestId, result);\n-\n     for (int i = 0; i < size; i++) {\n-      sendGetUDFRequest(matrixClient, requestId, partParams.get(i).getMatrixId(),\n-          partParams.get(i).getPartKey().getPartitionId(), func, partParams.get(i));\n+      sendGetUDFRequest(matrixClient, requestId, partParams.get(i).getMatrixId(), partParams.get(i).getPartKey().getPartitionId(), func, partParams.get(i));\n     }\n     return result;\n   }\n \n-  private void sendGetUDFRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int partId, GetFunc func, PartitionGetParam partGetParam) {\n+  private void sendGetUDFRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId, int partId,\n+                                 GetFunc func, PartitionGetParam partGetParam) {\n     // Request header\n-    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_PSF,\n-        matrixId, partId);\n+    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_PSF, matrixId, partId);\n \n     // Request body\n     GetUDFRequest requestData = new GetUDFRequest(func.getClass().getName(), partGetParam);\n@@ -461,32 +448,26 @@ public class UserRequestAdapter {\n     checkParams(matrixId, rowId);\n \n     // Get partitions for this row\n-    List<PartitionKey> parts =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowId);\n+    List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowId);\n     GetRowRequest request = new GetRowRequest(matrixId, rowId);\n-\n     int requestId = request.getRequestId();\n     FutureResult<Vector> result = new FutureResult<>();\n     ResponseCache responseCache = new MapResponseCache(parts.size());\n     requests.put(requestId, request);\n     requestIdToResultMap.put(requestId, result);\n     requestIdToResponseCache.put(requestId, responseCache);\n-\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     for (PartitionKey part : parts) {\n       LOG.info(\"Get row \" + part);\n       sendGetRowRequest(matrixClient, requestId, part.getMatrixId(), rowId, part.getPartitionId());\n     }\n-\n     return result;\n   }\n \n-  private void sendGetRowRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int rowId, int partId) {\n+  private void sendGetRowRequest(\n+    MatrixTransportClient matrixClient, int userRequestId, int matrixId, int rowId, int partId) {\n     // Request header\n-    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSPLIT,\n-        matrixId, partId);\n+    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSPLIT, matrixId, partId);\n \n     // Request body\n     GetRowSplitRequest requestData = new GetRowSplitRequest(rowId);\n@@ -502,33 +483,26 @@ public class UserRequestAdapter {\n     checkParams(matrixId, rowIds);\n \n     // Get partitions for this row\n-    List<PartitionKey> parts =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowIds[0]);\n+    List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowIds[0]);\n     GetRowsRequest request = new GetRowsRequest(matrixId, rowIds);\n-\n     int requestId = request.getRequestId();\n     FutureResult<Vector[]> result = new FutureResult<>();\n     ResponseCache responseCache = new MapResponseCache(parts.size());\n     requests.put(requestId, request);\n     requestIdToResultMap.put(requestId, result);\n     requestIdToResponseCache.put(requestId, responseCache);\n-\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     for (PartitionKey part : parts) {\n       LOG.info(\"Get row \" + part);\n-      sendGetRowsRequest(matrixClient, requestId, part.getMatrixId(), rowIds,\n-          part.getPartitionId());\n+      sendGetRowsRequest(matrixClient, requestId, part.getMatrixId(), rowIds, part.getPartitionId());\n     }\n-\n     return result;\n   }\n \n-  private void sendGetRowsRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int[] rowIds, int partId) {\n+  private void sendGetRowsRequest(\n+    MatrixTransportClient matrixClient, int userRequestId, int matrixId, int[] rowIds, int partId) {\n     // Request header\n-    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSSPLIT,\n-        matrixId, partId);\n+    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.GET_ROWSSPLIT, matrixId, partId);\n \n     // Request body\n     GetRowsSplitRequest requestData = new GetRowsSplitRequest(rowIds);\n@@ -546,37 +520,33 @@ public class UserRequestAdapter {\n    * @param updateFunc update udf function\n    * @return Future<VoidResult> update future result\n    */\n+\n   public Future<VoidResult> update(UpdateFunc updateFunc) {\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     UpdateParam param = updateFunc.getParam();\n \n     // Split the param use matrix partitions\n     List<PartitionUpdateParam> partParams = param.split();\n-\n     int size = partParams.size();\n     UpdatePSFRequest request = new UpdatePSFRequest(updateFunc);\n     ResponseCache cache = new MapResponseCache(size);\n     FutureResult<VoidResult> result = new FutureResult<>();\n     int requestId = request.getRequestId();\n-\n     requests.put(requestId, request);\n     requestIdToResponseCache.put(requestId, cache);\n     requestIdToResultMap.put(requestId, result);\n \n     // Send request to PSS\n     for (int i = 0; i < size; i++) {\n-      sendUpdateUDFRequest(matrixClient, requestId, partParams.get(i).getMatrixId(),\n-          partParams.get(i).getPartKey().getPartitionId(), updateFunc, partParams.get(i));\n+      sendUpdateUDFRequest(matrixClient, requestId, partParams.get(i).getMatrixId(), partParams.get(i).getPartKey().getPartitionId(), updateFunc, partParams.get(i));\n     }\n-\n     return result;\n   }\n \n-  private void sendUpdateUDFRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId, int partId, UpdateFunc updateFunc, PartitionUpdateParam partParam) {\n+  private void sendUpdateUDFRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId, int partId,\n+                                    UpdateFunc updateFunc, PartitionUpdateParam partParam) {\n     // Request header\n-    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE_PSF,\n-        matrixId, partId);\n+    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE_PSF, matrixId, partId);\n \n     // Request body\n     UpdateUDFRequest requestData = new UpdateUDFRequest(updateFunc.getClass().getName(), partParam);\n@@ -592,10 +562,8 @@ public class UserRequestAdapter {\n     checkParams(matrixId, rowId);\n     delta.setMatrixId(matrixId);\n     delta.setRowId(rowId);\n-\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     CompStreamKeyValuePart[] splits = RouterUtils.splitStream(matrixMeta, delta);\n-\n     FutureResult<VoidResult> result = new FutureResult<>();\n     int needRequestPartNum = noEmptyPartNum(splits);\n     if (needRequestPartNum == 0) {\n@@ -609,7 +577,6 @@ public class UserRequestAdapter {\n     requestIdToResponseCache.put(requestId, cache);\n     requestIdToResultMap.put(requestId, result);\n     requests.put(requestId, request);\n-\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     for (int i = 0; i < splits.length; i++) {\n       if (splits[i] != null && splits[i].size() > 0) {\n@@ -619,12 +586,10 @@ public class UserRequestAdapter {\n     return result;\n   }\n \n-  private void sendUpdateRequest(MatrixTransportClient matrixClient, int userRequestId,\n-      int matrixId,\n-      int partId, CompStreamKeyValuePart split, UpdateOp op) {\n+  private void sendUpdateRequest(MatrixTransportClient matrixClient, int userRequestId, int matrixId, int partId,\n+                                 CompStreamKeyValuePart split, UpdateOp op) {\n     // Request header\n-    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE,\n-        matrixId, partId);\n+    RequestHeader header = createRequestHeader(userRequestId, TransportMethod.UPDATE, matrixId, partId);\n \n     // Request body\n     UpdateRequest requestData = new UpdateRequest(split, op);\n@@ -638,11 +603,9 @@ public class UserRequestAdapter {\n \n   public Future<VoidResult> update(int matrixId, Matrix delta, UpdateOp op) {\n     checkParams(matrixId);\n-\n     delta.setMatrixId(matrixId);\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     CompStreamKeyValuePart[] splits = RouterUtils.splitStream(matrixMeta, delta);\n-\n     int needRequestPartNum = noEmptyPartNum(splits);\n     FutureResult<VoidResult> result = new FutureResult<>();\n     if (needRequestPartNum == 0) {\n@@ -656,7 +619,6 @@ public class UserRequestAdapter {\n     requestIdToResponseCache.put(requestId, cache);\n     requestIdToResultMap.put(requestId, result);\n     requests.put(requestId, request);\n-\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     for (int i = 0; i < splits.length; i++) {\n       if (splits[i] != null && splits[i].size() > 0) {\n@@ -669,14 +631,12 @@ public class UserRequestAdapter {\n   public Future<VoidResult> update(int matrixId, int[] rowIds, Vector[] rows, UpdateOp op) {\n     assert rowIds.length == rows.length;\n     checkParams(matrixId, rowIds);\n-\n     for (int i = 0; i < rowIds.length; i++) {\n       rows[i].setRowId(rowIds[i]);\n     }\n \n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n     CompStreamKeyValuePart[] splits = RouterUtils.splitStream(matrixMeta, rows);\n-\n     int needRequestPartNum = noEmptyPartNum(splits);\n     FutureResult<VoidResult> result = new FutureResult<>();\n     if (needRequestPartNum == 0) {\n@@ -690,7 +650,6 @@ public class UserRequestAdapter {\n     requestIdToResponseCache.put(requestId, cache);\n     requestIdToResultMap.put(requestId, result);\n     requests.put(requestId, request);\n-\n     MatrixTransportClient matrixClient = PSAgentContext.get().getMatrixTransportClient();\n     for (int i = 0; i < splits.length; i++) {\n       if (splits[i] != null && splits[i].size() > 0) {\n@@ -712,6 +671,7 @@ public class UserRequestAdapter {\n     if (matrixMeta == null) {\n       throw new AngelException(\"can not find matrix \" + matrixId);\n     }\n+\n     int rowNum = matrixMeta.getRowNum();\n     if (rowId < 0 || rowId >= rowNum) {\n       throw new AngelException(\"not valid row id, row id is in range[0,\" + rowNum + \")\");\n@@ -802,4 +762,5 @@ public class UserRequestAdapter {\n     }\n     return count;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 119
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}