{
    "project_name": "Activiti-Activiti",
    "error_id": "210",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.asyncexecutor.multitenant;\n\nimport org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/210/TenantAwareAsyncExecutorFactory.java\nindex 10b278dd2f9..ff2ab54fc79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/210/TenantAwareAsyncExecutorFactory.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/210/TenantAwareAsyncExecutorFactory.java\nindex 10b278dd2f9..52226bd708f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/210/TenantAwareAsyncExecutorFactory.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n@@ -21,9 +22,9 @@ import org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n  */\n public interface TenantAwareAsyncExecutorFactory {\n \n-  /**\n-   * Allows to create an {@link AsyncExecutor} specifically for a tenant. \n-   */\n-  AsyncExecutor createAsyncExecutor(String tenantId);\n+    /**\n+     * Allows to create an {@link AsyncExecutor} specifically for a tenant.\n+     */\n+    AsyncExecutor createAsyncExecutor(String tenantId);\n \n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "'INTERFACE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/210/TenantAwareAsyncExecutorFactory.java\nindex 10b278dd2f9..1b17484bf7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/210/TenantAwareAsyncExecutorFactory.java\n@@ -19,11 +19,14 @@ import org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n  * This factory will be called when a new {@link AsyncExecutor} for a tenant needs to be created\n  * and can be used to create special implementations for specific tenants.\n  */\n+\n+\n public interface TenantAwareAsyncExecutorFactory {\n \n   /**\n    * Allows to create an {@link AsyncExecutor} specifically for a tenant. \n    */\n-  AsyncExecutor createAsyncExecutor(String tenantId);\n \n-}\n+\n+  AsyncExecutor createAsyncExecutor(String tenantId);\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/210/TenantAwareAsyncExecutorFactory.java\nindex 10b278dd2f9..ff2ab54fc79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/210/TenantAwareAsyncExecutorFactory.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/210/TenantAwareAsyncExecutorFactory.java\nindex 10b278dd2f9..ff2ab54fc79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/210/TenantAwareAsyncExecutorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/210/TenantAwareAsyncExecutorFactory.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AsyncExecutor;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}