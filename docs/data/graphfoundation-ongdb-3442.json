{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3442",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "6",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "178",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3442/MonoDirectionalTraversalDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3442/MonoDirectionalTraversalDescription.java\nindex 468406350e6..5705e8d8477 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3442/MonoDirectionalTraversalDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3442/MonoDirectionalTraversalDescription.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import java.util.Arrays;\n@@ -46,229 +47,228 @@ import org.neo4j.graphdb.traversal.UniquenessFactory;\n \n public final class MonoDirectionalTraversalDescription implements TraversalDescription\n {\n-    static final Supplier<Resource> NO_STATEMENT = () -> Resource.EMPTY;\n+  static final Supplier<Resource> NO_STATEMENT = () -> Resource.EMPTY;\n \n-    final PathExpander expander;\n-    final InitialBranchState initialState;\n-    final Supplier<? extends Resource> statementSupplier;\n-    final UniquenessFactory uniqueness;\n-    final Object uniquenessParameter;\n-    final PathEvaluator evaluator;\n-    final BranchOrderingPolicy branchOrdering;\n-    final Comparator<? super Path> sorting;\n-    final Collection<Node> endNodes;\n+  final PathExpander expander;\n+  final InitialBranchState initialState;\n+  final Supplier<? extends Resource> statementSupplier;\n+  final UniquenessFactory uniqueness;\n+  final Object uniquenessParameter;\n+  final PathEvaluator evaluator;\n+  final BranchOrderingPolicy branchOrdering;\n+  final Comparator<? super Path> sorting;\n+  final Collection<Node> endNodes;\n \n-    public MonoDirectionalTraversalDescription()\n-    {\n-        /*\n-         * Use one statement per operation performed, rather than a global statement for the whole traversal. This is\n-         * significantly less performant, and only used when accessing the traversal framework via the legacy access\n-         * methods (eg. Traversal.description()).\n-         */\n-        this( NO_STATEMENT );\n-    }\n+  public MonoDirectionalTraversalDescription()\n+  {\n+    /*\n+     * Use one statement per operation performed, rather than a global statement for the whole traversal. This is\n+     * significantly less performant, and only used when accessing the traversal framework via the legacy access\n+     * methods (eg. Traversal.description()).\n+     */\n+    this(NO_STATEMENT);\n+  }\n \n-    public MonoDirectionalTraversalDescription( Supplier<? extends Resource> statementProvider )\n-    {\n-        this( PathExpanders.allTypesAndDirections(), Uniqueness.NODE_GLOBAL, null,\n-                Evaluators.all(), InitialBranchState.NO_STATE, BranchOrderingPolicies.PREORDER_DEPTH_FIRST, null, null,\n-                statementProvider );\n-    }\n+  public MonoDirectionalTraversalDescription(Supplier<? extends Resource> statementProvider)\n+  {\n+    this(PathExpanders.allTypesAndDirections(), Uniqueness.NODE_GLOBAL, null,\n+        Evaluators.all(), InitialBranchState.NO_STATE, BranchOrderingPolicies.PREORDER_DEPTH_FIRST, null, null,\n+        statementProvider);\n+  }\n \n-    private MonoDirectionalTraversalDescription( PathExpander expander,\n-                                                 UniquenessFactory uniqueness, Object uniquenessParameter,\n-                                                 PathEvaluator evaluator, InitialBranchState initialState,\n-                                                 BranchOrderingPolicy branchOrdering,\n-                                                 Comparator<? super Path> sorting, Collection<Node> endNodes,\n-                                                 Supplier<? extends Resource> statementSupplier )\n-    {\n-        this.expander = expander;\n-        this.uniqueness = uniqueness;\n-        this.uniquenessParameter = uniquenessParameter;\n-        this.evaluator = evaluator;\n-        this.branchOrdering = branchOrdering;\n-        this.sorting = sorting;\n-        this.endNodes = endNodes;\n-        this.initialState = initialState;\n-        this.statementSupplier = statementSupplier;\n-    }\n+  private MonoDirectionalTraversalDescription(PathExpander expander,\n+                                              UniquenessFactory uniqueness, Object uniquenessParameter,\n+                                              PathEvaluator evaluator, InitialBranchState initialState,\n+                                              BranchOrderingPolicy branchOrdering,\n+                                              Comparator<? super Path> sorting, Collection<Node> endNodes,\n+                                              Supplier<? extends Resource> statementSupplier)\n+  {\n+    this.expander = expander;\n+    this.uniqueness = uniqueness;\n+    this.uniquenessParameter = uniquenessParameter;\n+    this.evaluator = evaluator;\n+    this.branchOrdering = branchOrdering;\n+    this.sorting = sorting;\n+    this.endNodes = endNodes;\n+    this.initialState = initialState;\n+    this.statementSupplier = statementSupplier;\n+  }\n \n-    @Override\n-    public Traverser traverse( Node startNode )\n-    {\n-        return traverse( Collections.singletonList( startNode ) );\n-    }\n+  @Override\n+  public Traverser traverse(Node startNode)\n+  {\n+    return traverse(Collections.singletonList(startNode));\n+  }\n \n-    @Override\n-    public Traverser traverse( Node... startNodes )\n-    {\n-        return traverse( Arrays.asList( startNodes ) );\n-    }\n+  @Override\n+  public Traverser traverse(Node... startNodes)\n+  {\n+    return traverse(Arrays.asList(startNodes));\n+  }\n \n-    @Override\n-    public Traverser traverse( final Iterable<Node> iterableStartNodes )\n+  @Override\n+  public Traverser traverse(final Iterable<Node> iterableStartNodes)\n+  {\n+    return new DefaultTraverser(() ->\n     {\n-        return new DefaultTraverser( () ->\n-        {\n-            Resource statement = statementSupplier.get();\n-            MonoDirectionalTraverserIterator iterator = new MonoDirectionalTraverserIterator(\n-                    statement,\n-                    uniqueness.create( uniquenessParameter ),\n-                    expander, branchOrdering, evaluator,\n-                    iterableStartNodes, initialState, uniqueness );\n-            return sorting != null ? new SortingTraverserIterator( statement, sorting, iterator ) : iterator;\n-        } );\n-    }\n+      Resource statement = statementSupplier.get();\n+      MonoDirectionalTraverserIterator iterator = new MonoDirectionalTraverserIterator(\n+          statement,\n+          uniqueness.create(uniquenessParameter),\n+          expander, branchOrdering, evaluator,\n+          iterableStartNodes, initialState, uniqueness);\n+      return sorting != null ? new SortingTraverserIterator(statement, sorting, iterator) : iterator;\n+    });\n+  }\n \n-    /* (non-Javadoc)\n-     * @see org.neo4j.graphdb.traversal.TraversalDescription#uniqueness(org.neo4j.graphdb.traversal.Uniqueness)\n-     */\n-    @Override\n-    public TraversalDescription uniqueness( UniquenessFactory uniqueness )\n+  /* (non-Javadoc)\n+   * @see org.neo4j.graphdb.traversal.TraversalDescription#uniqueness(org.neo4j.graphdb.traversal.Uniqueness)\n+   */\n+  @Override\n+  public TraversalDescription uniqueness(UniquenessFactory uniqueness)\n+  {\n+    return new MonoDirectionalTraversalDescription(expander, uniqueness, null,\n+        evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier);\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.neo4j.graphdb.traversal.TraversalDescription#uniqueness(org.neo4j.graphdb.traversal.Uniqueness, java.lang.Object)\n+   */\n+  @Override\n+  public TraversalDescription uniqueness(UniquenessFactory uniqueness,\n+                                         Object parameter)\n+  {\n+    if (this.uniqueness == uniqueness &&\n+        (uniquenessParameter == null ? parameter == null : uniquenessParameter.equals(parameter)))\n     {\n-        return new MonoDirectionalTraversalDescription( expander, uniqueness, null,\n-                evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier );\n+      return this;\n     }\n \n-    /* (non-Javadoc)\n-     * @see org.neo4j.graphdb.traversal.TraversalDescription#uniqueness(org.neo4j.graphdb.traversal.Uniqueness, java.lang.Object)\n-     */\n-    @Override\n-    public TraversalDescription uniqueness( UniquenessFactory uniqueness,\n-            Object parameter )\n-    {\n-        if ( this.uniqueness == uniqueness &&\n-             (uniquenessParameter == null ? parameter == null : uniquenessParameter.equals( parameter )) )\n-        {\n-            return this;\n-        }\n+    return new MonoDirectionalTraversalDescription(expander, uniqueness, parameter,\n+        evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier);\n+  }\n \n-        return new MonoDirectionalTraversalDescription( expander, uniqueness, parameter,\n-                evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier );\n-    }\n+  @Override\n+  public TraversalDescription evaluator(Evaluator evaluator)\n+  {\n+    return evaluator(new Evaluator.AsPathEvaluator(evaluator));\n+  }\n \n-    @Override\n-    public TraversalDescription evaluator( Evaluator evaluator )\n+  @Override\n+  public TraversalDescription evaluator(PathEvaluator evaluator)\n+  {\n+    if (this.evaluator == evaluator)\n     {\n-        return evaluator( new Evaluator.AsPathEvaluator( evaluator ) );\n+      return this;\n     }\n+    nullCheck(evaluator, Evaluator.class, \"RETURN_ALL\");\n+    return new MonoDirectionalTraversalDescription(expander, uniqueness, uniquenessParameter,\n+        addEvaluator(this.evaluator, evaluator), initialState, branchOrdering, sorting, endNodes,\n+        statementSupplier);\n+  }\n \n-    @Override\n-    public TraversalDescription evaluator( PathEvaluator evaluator )\n+  protected static PathEvaluator addEvaluator(PathEvaluator existing, PathEvaluator toAdd)\n+  {\n+    if (existing instanceof MultiEvaluator)\n     {\n-        if ( this.evaluator == evaluator )\n-        {\n-            return this;\n-        }\n-        nullCheck( evaluator, Evaluator.class, \"RETURN_ALL\" );\n-        return new MonoDirectionalTraversalDescription( expander, uniqueness, uniquenessParameter,\n-                addEvaluator( this.evaluator, evaluator ), initialState, branchOrdering, sorting, endNodes,\n-                statementSupplier );\n-    }\n-\n-    protected static PathEvaluator addEvaluator( PathEvaluator existing, PathEvaluator toAdd )\n+      return ((MultiEvaluator) existing).add(toAdd);\n+    } else\n     {\n-        if ( existing instanceof MultiEvaluator )\n-        {\n-            return ((MultiEvaluator) existing).add( toAdd );\n-        }\n-        else\n-        {\n-            return existing == Evaluators.all() ? toAdd :\n-                new MultiEvaluator( existing, toAdd );\n-        }\n+      return existing == Evaluators.all() ? toAdd :\n+          new MultiEvaluator(existing, toAdd);\n     }\n+  }\n \n-    protected static <T> void nullCheck( T parameter, Class<T> parameterType, String defaultName )\n+  protected static <T> void nullCheck(T parameter, Class<T> parameterType, String defaultName)\n+  {\n+    if (parameter == null)\n     {\n-        if ( parameter == null )\n-        {\n-            String typeName = parameterType.getSimpleName();\n-            throw new IllegalArgumentException( typeName\n-                                                + \" may not be null, use \"\n-                                                + typeName + \".\" + defaultName\n-                                                + \" instead.\" );\n-        }\n+      String typeName = parameterType.getSimpleName();\n+      throw new IllegalArgumentException(typeName\n+          + \" may not be null, use \"\n+          + typeName + \".\" + defaultName\n+          + \" instead.\");\n     }\n+  }\n \n-    /* (non-Javadoc)\n-     * @see org.neo4j.graphdb.traversal.TraversalDescription#order(org.neo4j.graphdb.traversal.Order)\n-     */\n-    @Override\n-    public TraversalDescription order( BranchOrderingPolicy order )\n+  /* (non-Javadoc)\n+   * @see org.neo4j.graphdb.traversal.TraversalDescription#order(org.neo4j.graphdb.traversal.Order)\n+   */\n+  @Override\n+  public TraversalDescription order(BranchOrderingPolicy order)\n+  {\n+    if (this.branchOrdering == order)\n     {\n-        if ( this.branchOrdering == order )\n-        {\n-            return this;\n-        }\n-        return new MonoDirectionalTraversalDescription( expander, uniqueness, uniquenessParameter,\n-                evaluator, initialState, order, sorting, endNodes, statementSupplier );\n+      return this;\n     }\n+    return new MonoDirectionalTraversalDescription(expander, uniqueness, uniquenessParameter,\n+        evaluator, initialState, order, sorting, endNodes, statementSupplier);\n+  }\n \n-    @Override\n-    public TraversalDescription depthFirst()\n-    {\n-        return order( BranchOrderingPolicies.PREORDER_DEPTH_FIRST);\n-    }\n+  @Override\n+  public TraversalDescription depthFirst()\n+  {\n+    return order(BranchOrderingPolicies.PREORDER_DEPTH_FIRST);\n+  }\n \n-    @Override\n-    public TraversalDescription breadthFirst()\n-    {\n-        return order( BranchOrderingPolicies.PREORDER_BREADTH_FIRST );\n-    }\n+  @Override\n+  public TraversalDescription breadthFirst()\n+  {\n+    return order(BranchOrderingPolicies.PREORDER_BREADTH_FIRST);\n+  }\n \n-    /* (non-Javadoc)\n-     * @see org.neo4j.graphdb.traversal.TraversalDescription#relationships(org.neo4j.graphdb.RelationshipType)\n-     */\n-    @Override\n-    public TraversalDescription relationships( RelationshipType type )\n-    {\n-        return relationships( type, Direction.BOTH );\n-    }\n+  /* (non-Javadoc)\n+   * @see org.neo4j.graphdb.traversal.TraversalDescription#relationships(org.neo4j.graphdb.RelationshipType)\n+   */\n+  @Override\n+  public TraversalDescription relationships(RelationshipType type)\n+  {\n+    return relationships(type, Direction.BOTH);\n+  }\n \n-    /* (non-Javadoc)\n-     * @see org.neo4j.graphdb.traversal.TraversalDescription#relationships(org.neo4j.graphdb.RelationshipType, org.neo4j.graphdb.Direction)\n-     */\n-    @Override\n-    public TraversalDescription relationships( RelationshipType type,\n-            Direction direction )\n+  /* (non-Javadoc)\n+   * @see org.neo4j.graphdb.traversal.TraversalDescription#relationships(org.neo4j.graphdb.RelationshipType, org.neo4j.graphdb.Direction)\n+   */\n+  @Override\n+  public TraversalDescription relationships(RelationshipType type,\n+                                            Direction direction)\n+  {\n+    if (expander instanceof StandardExpander)\n     {\n-        if ( expander instanceof StandardExpander )\n-        {\n-            return expand( ((StandardExpander) expander).add( type, direction ) );\n-        }\n-        throw new IllegalStateException( \"The current expander cannot be added to\" );\n+      return expand(((StandardExpander) expander).add(type, direction));\n     }\n+    throw new IllegalStateException(\"The current expander cannot be added to\");\n+  }\n \n-    @Override\n-    public TraversalDescription expand( PathExpander<?> expander )\n+  @Override\n+  public TraversalDescription expand(PathExpander<?> expander)\n+  {\n+    if (expander.equals(this.expander))\n     {\n-        if ( expander.equals( this.expander ) )\n-        {\n-            return this;\n-        }\n-        return new MonoDirectionalTraversalDescription( expander, uniqueness,\n-                uniquenessParameter, evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier );\n+      return this;\n     }\n+    return new MonoDirectionalTraversalDescription(expander, uniqueness,\n+        uniquenessParameter, evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier);\n+  }\n \n-    @Override\n-    public <STATE> TraversalDescription expand( PathExpander<STATE> expander, InitialBranchState<STATE> initialState )\n-    {\n-        return new MonoDirectionalTraversalDescription( expander, uniqueness,\n-                uniquenessParameter, evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier );\n-    }\n+  @Override\n+  public <STATE> TraversalDescription expand(PathExpander<STATE> expander, InitialBranchState<STATE> initialState)\n+  {\n+    return new MonoDirectionalTraversalDescription(expander, uniqueness,\n+        uniquenessParameter, evaluator, initialState, branchOrdering, sorting, endNodes, statementSupplier);\n+  }\n \n-    @Override\n-    public TraversalDescription sort( Comparator<? super Path> sorting )\n-    {\n-        return new MonoDirectionalTraversalDescription( expander, uniqueness, uniquenessParameter, evaluator,\n-                initialState, branchOrdering, sorting, endNodes, statementSupplier );\n-    }\n+  @Override\n+  public TraversalDescription sort(Comparator<? super Path> sorting)\n+  {\n+    return new MonoDirectionalTraversalDescription(expander, uniqueness, uniquenessParameter, evaluator,\n+        initialState, branchOrdering, sorting, endNodes, statementSupplier);\n+  }\n \n-    @Override\n-    public TraversalDescription reverse()\n-    {\n-        return new MonoDirectionalTraversalDescription( expander.reverse(), uniqueness, uniquenessParameter,\n-                evaluator, initialState.reverse(), branchOrdering, sorting, endNodes, statementSupplier );\n-    }\n+  @Override\n+  public TraversalDescription reverse()\n+  {\n+    return new MonoDirectionalTraversalDescription(expander.reverse(), uniqueness, uniquenessParameter,\n+        evaluator, initialState.reverse(), branchOrdering, sorting, endNodes, statementSupplier);\n+  }\n }\n",
            "diff_size": 232
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "169",
                    "column": "56",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3442/MonoDirectionalTraversalDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3442/MonoDirectionalTraversalDescription.java\nindex 468406350e6..52ea8c57dd3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3442/MonoDirectionalTraversalDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3442/MonoDirectionalTraversalDescription.java\n@@ -71,17 +71,13 @@ public final class MonoDirectionalTraversalDescription implements TraversalDescr\n     public MonoDirectionalTraversalDescription( Supplier<? extends Resource> statementProvider )\n     {\n         this( PathExpanders.allTypesAndDirections(), Uniqueness.NODE_GLOBAL, null,\n-                Evaluators.all(), InitialBranchState.NO_STATE, BranchOrderingPolicies.PREORDER_DEPTH_FIRST, null, null,\n-                statementProvider );\n+                Evaluators.all(), InitialBranchState.NO_STATE, BranchOrderingPolicies.PREORDER_DEPTH_FIRST, null, null, statementProvider );\n     }\n \n-    private MonoDirectionalTraversalDescription( PathExpander expander,\n-                                                 UniquenessFactory uniqueness, Object uniquenessParameter,\n+    private MonoDirectionalTraversalDescription( PathExpander expander, UniquenessFactory uniqueness, Object uniquenessParameter,\n                                                  PathEvaluator evaluator, InitialBranchState initialState,\n-                                                 BranchOrderingPolicy branchOrdering,\n-                                                 Comparator<? super Path> sorting, Collection<Node> endNodes,\n-                                                 Supplier<? extends Resource> statementSupplier )\n-    {\n+                                                 BranchOrderingPolicy branchOrdering, Comparator<? super Path> sorting, Collection<Node> endNodes, Supplier<? extends Resource> statementSupplier )\n+{\n         this.expander = expander;\n         this.uniqueness = uniqueness;\n         this.uniquenessParameter = uniquenessParameter;\n@@ -111,12 +107,9 @@ public final class MonoDirectionalTraversalDescription implements TraversalDescr\n         return new DefaultTraverser( () ->\n         {\n             Resource statement = statementSupplier.get();\n-            MonoDirectionalTraverserIterator iterator = new MonoDirectionalTraverserIterator(\n-                    statement,\n-                    uniqueness.create( uniquenessParameter ),\n-                    expander, branchOrdering, evaluator,\n-                    iterableStartNodes, initialState, uniqueness );\n-            return sorting != null ? new SortingTraverserIterator( statement, sorting, iterator ) : iterator;\n+            MonoDirectionalTraverserIterator iterator = new MonoDirectionalTraverserIterator( statement,\n+                    uniqueness.create( uniquenessParameter ), expander, branchOrdering, evaluator, iterableStartNodes, initialState, uniqueness );\n+return sorting != null ? new SortingTraverserIterator( statement, sorting, iterator ) : iterator;\n         } );\n     }\n \n@@ -137,9 +130,8 @@ public final class MonoDirectionalTraversalDescription implements TraversalDescr\n     public TraversalDescription uniqueness( UniquenessFactory uniqueness,\n             Object parameter )\n     {\n-        if ( this.uniqueness == uniqueness &&\n-             (uniquenessParameter == null ? parameter == null : uniquenessParameter.equals( parameter )) )\n-        {\n+        if ( this.uniqueness == uniqueness && ( uniquenessParameter == null ? parameter == null : uniquenessParameter.equals( parameter )) )\n+{\n             return this;\n         }\n \n@@ -160,10 +152,10 @@ public final class MonoDirectionalTraversalDescription implements TraversalDescr\n         {\n             return this;\n         }\n-        nullCheck( evaluator, Evaluator.class, \"RETURN_ALL\" );\n+\n+nullCheck( evaluator, Evaluator.class, \"RETURN_ALL\" );\n         return new MonoDirectionalTraversalDescription( expander, uniqueness, uniquenessParameter,\n-                addEvaluator( this.evaluator, evaluator ), initialState, branchOrdering, sorting, endNodes,\n-                statementSupplier );\n+                addEvaluator( this.evaluator, evaluator ), initialState, branchOrdering, sorting, endNodes, statementSupplier );\n     }\n \n     protected static PathEvaluator addEvaluator( PathEvaluator existing, PathEvaluator toAdd )\n@@ -174,9 +166,9 @@ public final class MonoDirectionalTraversalDescription implements TraversalDescr\n         }\n         else\n         {\n-            return existing == Evaluators.all() ? toAdd :\n+            return existing == Evaluators.all() ? toAdd:\n                 new MultiEvaluator( existing, toAdd );\n-        }\n+    }\n     }\n \n     protected static <T> void nullCheck( T parameter, Class<T> parameterType, String defaultName )\n@@ -184,11 +176,8 @@ public final class MonoDirectionalTraversalDescription implements TraversalDescr\n         if ( parameter == null )\n         {\n             String typeName = parameterType.getSimpleName();\n-            throw new IllegalArgumentException( typeName\n-                                                + \" may not be null, use \"\n-                                                + typeName + \".\" + defaultName\n-                                                + \" instead.\" );\n-        }\n+            throw new IllegalArgumentException( typeName + \" may not be null, use \" + typeName + \".\" + defaultName + \" instead.\" );\n+    }\n     }\n \n     /* (non-Javadoc)\n@@ -271,4 +260,4 @@ public final class MonoDirectionalTraversalDescription implements TraversalDescr\n         return new MonoDirectionalTraversalDescription( expander.reverse(), uniqueness, uniquenessParameter,\n                 evaluator, initialState.reverse(), branchOrdering, sorting, endNodes, statementSupplier );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}