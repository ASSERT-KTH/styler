{
    "project_name": "graphfoundation-ongdb",
    "error_id": "130",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/130/IndexRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/130/IndexRule.java\nindex 227deeffbd7..35061e16b6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/130/IndexRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/130/IndexRule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import org.neo4j.graphdb.Label;\n@@ -32,147 +33,147 @@ import static org.neo4j.internal.kernel.api.schema.SchemaUtil.idTokenNameLookup;\n  */\n public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Supplier\n {\n-    private final IndexProvider.Descriptor providerDescriptor;\n-    private final SchemaIndexDescriptor descriptor;\n-    private final Long owningConstraint;\n-\n-    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor,\n-                                       IndexProvider.Descriptor providerDescriptor )\n-    {\n-        return new IndexRule( id, providerDescriptor, descriptor, null );\n-    }\n-\n-    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor,\n-                                                 IndexProvider.Descriptor providerDescriptor,\n-                                                 Long owningConstraint )\n-    {\n-        return new IndexRule( id, providerDescriptor, descriptor, owningConstraint );\n-    }\n-\n-    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor,\n-                                       IndexProvider.Descriptor providerDescriptor, String name )\n-    {\n-        return new IndexRule( id, providerDescriptor, descriptor, null, name );\n-    }\n-\n-    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor,\n-                                                 IndexProvider.Descriptor providerDescriptor,\n-                                                 Long owningConstraint, String name )\n-    {\n-        return new IndexRule( id, providerDescriptor, descriptor, owningConstraint, name );\n-    }\n-\n-    IndexRule( long id, IndexProvider.Descriptor providerDescriptor,\n-               SchemaIndexDescriptor descriptor, Long owningConstraint )\n-    {\n-        this( id, providerDescriptor, descriptor, owningConstraint, null );\n-    }\n-\n-    IndexRule( long id, IndexProvider.Descriptor providerDescriptor,\n-               SchemaIndexDescriptor descriptor, Long owningConstraint, String name )\n-    {\n-        super( id, name );\n-        if ( providerDescriptor == null )\n-        {\n-            throw new IllegalArgumentException( \"null provider descriptor prohibited\" );\n-        }\n-\n-        this.descriptor = descriptor;\n-        this.owningConstraint = owningConstraint;\n-        this.providerDescriptor = providerDescriptor;\n-    }\n-\n-    public IndexProvider.Descriptor getProviderDescriptor()\n-    {\n-        return providerDescriptor;\n-    }\n-\n-    public boolean canSupportUniqueConstraint()\n-    {\n-        return descriptor.type() == SchemaIndexDescriptor.Type.UNIQUE;\n-    }\n-\n-    /**\n-     * Return the owning constraints of this index.\n-     *\n-     * The owning constraint can be null during the construction of a uniqueness constraint. This construction first\n-     * creates the unique index, and then waits for the index to become fully populated and online before creating\n-     * the actual constraint. During unique index population the owning constraint will be null.\n-     *\n-     * See ConstraintIndexCreator.createUniquenessConstraintIndex().\n-     *\n-     * @return the id of the owning constraint, or null if this has not been set yet.\n-     * @throws IllegalStateException if this IndexRule cannot support uniqueness constraints (ei. the index is not\n-     *                               unique)\n-     */\n-    public Long getOwningConstraint()\n-    {\n-        if ( !canSupportUniqueConstraint() )\n-        {\n-            throw new IllegalStateException( \"Can only get owner from constraint indexes.\" );\n-        }\n-        return owningConstraint;\n-    }\n-\n-    public boolean isIndexWithoutOwningConstraint()\n-    {\n-        return canSupportUniqueConstraint() && getOwningConstraint() == null;\n-    }\n-\n-    public IndexRule withOwningConstraint( long constraintId )\n-    {\n-        if ( !canSupportUniqueConstraint() )\n-        {\n-            throw new IllegalStateException( this + \" is not a constraint index\" );\n-        }\n-        return constraintIndexRule( id, descriptor, providerDescriptor, constraintId );\n-    }\n-\n-    @Override\n-    public byte[] serialize()\n-    {\n-        return SchemaRuleSerialization.serialize( this );\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        String ownerString = \"\";\n-        if ( canSupportUniqueConstraint() )\n-        {\n-            ownerString = \", owner=\" + owningConstraint;\n-        }\n-\n-        return \"IndexRule[id=\" + id + \", descriptor=\" + descriptor.userDescription( idTokenNameLookup ) +\n-               \", provider=\" + providerDescriptor + ownerString + \"]\";\n-    }\n-\n-    @Override\n-    public SchemaDescriptor schema()\n-    {\n-        return descriptor.schema();\n-    }\n-\n-    @Override\n-    public SchemaIndexDescriptor getIndexDescriptor()\n-    {\n-        return descriptor;\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( o instanceof IndexRule )\n-        {\n-            IndexRule that = (IndexRule) o;\n-            return this.descriptor.equals( that.descriptor );\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return this.descriptor.hashCode();\n-    }\n+  private final IndexProvider.Descriptor providerDescriptor;\n+  private final SchemaIndexDescriptor descriptor;\n+  private final Long owningConstraint;\n+\n+  public static IndexRule indexRule(long id, SchemaIndexDescriptor descriptor,\n+                                    IndexProvider.Descriptor providerDescriptor)\n+  {\n+    return new IndexRule(id, providerDescriptor, descriptor, null);\n+  }\n+\n+  public static IndexRule constraintIndexRule(long id, SchemaIndexDescriptor descriptor,\n+                                              IndexProvider.Descriptor providerDescriptor,\n+                                              Long owningConstraint)\n+  {\n+    return new IndexRule(id, providerDescriptor, descriptor, owningConstraint);\n+  }\n+\n+  public static IndexRule indexRule(long id, SchemaIndexDescriptor descriptor,\n+                                    IndexProvider.Descriptor providerDescriptor, String name)\n+  {\n+    return new IndexRule(id, providerDescriptor, descriptor, null, name);\n+  }\n+\n+  public static IndexRule constraintIndexRule(long id, SchemaIndexDescriptor descriptor,\n+                                              IndexProvider.Descriptor providerDescriptor,\n+                                              Long owningConstraint, String name)\n+  {\n+    return new IndexRule(id, providerDescriptor, descriptor, owningConstraint, name);\n+  }\n+\n+  IndexRule(long id, IndexProvider.Descriptor providerDescriptor,\n+            SchemaIndexDescriptor descriptor, Long owningConstraint)\n+  {\n+    this(id, providerDescriptor, descriptor, owningConstraint, null);\n+  }\n+\n+  IndexRule(long id, IndexProvider.Descriptor providerDescriptor,\n+            SchemaIndexDescriptor descriptor, Long owningConstraint, String name)\n+  {\n+    super(id, name);\n+    if (providerDescriptor == null)\n+    {\n+      throw new IllegalArgumentException(\"null provider descriptor prohibited\");\n+    }\n+\n+    this.descriptor = descriptor;\n+    this.owningConstraint = owningConstraint;\n+    this.providerDescriptor = providerDescriptor;\n+  }\n+\n+  public IndexProvider.Descriptor getProviderDescriptor()\n+  {\n+    return providerDescriptor;\n+  }\n+\n+  public boolean canSupportUniqueConstraint()\n+  {\n+    return descriptor.type() == SchemaIndexDescriptor.Type.UNIQUE;\n+  }\n+\n+  /**\n+   * Return the owning constraints of this index.\n+   * <p>\n+   * The owning constraint can be null during the construction of a uniqueness constraint. This construction first\n+   * creates the unique index, and then waits for the index to become fully populated and online before creating\n+   * the actual constraint. During unique index population the owning constraint will be null.\n+   * <p>\n+   * See ConstraintIndexCreator.createUniquenessConstraintIndex().\n+   *\n+   * @return the id of the owning constraint, or null if this has not been set yet.\n+   * @throws IllegalStateException if this IndexRule cannot support uniqueness constraints (ei. the index is not\n+   *                               unique)\n+   */\n+  public Long getOwningConstraint()\n+  {\n+    if (!canSupportUniqueConstraint())\n+    {\n+      throw new IllegalStateException(\"Can only get owner from constraint indexes.\");\n+    }\n+    return owningConstraint;\n+  }\n+\n+  public boolean isIndexWithoutOwningConstraint()\n+  {\n+    return canSupportUniqueConstraint() && getOwningConstraint() == null;\n+  }\n+\n+  public IndexRule withOwningConstraint(long constraintId)\n+  {\n+    if (!canSupportUniqueConstraint())\n+    {\n+      throw new IllegalStateException(this + \" is not a constraint index\");\n+    }\n+    return constraintIndexRule(id, descriptor, providerDescriptor, constraintId);\n+  }\n+\n+  @Override\n+  public byte[] serialize()\n+  {\n+    return SchemaRuleSerialization.serialize(this);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    String ownerString = \"\";\n+    if (canSupportUniqueConstraint())\n+    {\n+      ownerString = \", owner=\" + owningConstraint;\n+    }\n+\n+    return \"IndexRule[id=\" + id + \", descriptor=\" + descriptor.userDescription(idTokenNameLookup) +\n+        \", provider=\" + providerDescriptor + ownerString + \"]\";\n+  }\n+\n+  @Override\n+  public SchemaDescriptor schema()\n+  {\n+    return descriptor.schema();\n+  }\n+\n+  @Override\n+  public SchemaIndexDescriptor getIndexDescriptor()\n+  {\n+    return descriptor;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (o instanceof IndexRule)\n+    {\n+      IndexRule that = (IndexRule) o;\n+      return this.descriptor.equals(that.descriptor);\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return this.descriptor.hashCode();\n+  }\n }\n",
            "diff_size": 144
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/130/IndexRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/130/IndexRule.java\nindex 227deeffbd7..00979247c35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/130/IndexRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/130/IndexRule.java\n@@ -36,41 +36,35 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n     private final SchemaIndexDescriptor descriptor;\n     private final Long owningConstraint;\n \n-    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor,\n-                                       IndexProvider.Descriptor providerDescriptor )\n-    {\n+    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor )\n+{\n         return new IndexRule( id, providerDescriptor, descriptor, null );\n     }\n \n-    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor,\n-                                                 IndexProvider.Descriptor providerDescriptor,\n+    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor,\n                                                  Long owningConstraint )\n-    {\n+{\n         return new IndexRule( id, providerDescriptor, descriptor, owningConstraint );\n     }\n \n-    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor,\n-                                       IndexProvider.Descriptor providerDescriptor, String name )\n-    {\n+    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor, String name )\n+{\n         return new IndexRule( id, providerDescriptor, descriptor, null, name );\n     }\n \n-    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor,\n-                                                 IndexProvider.Descriptor providerDescriptor,\n+    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor,\n                                                  Long owningConstraint, String name )\n-    {\n+{\n         return new IndexRule( id, providerDescriptor, descriptor, owningConstraint, name );\n     }\n \n-    IndexRule( long id, IndexProvider.Descriptor providerDescriptor,\n-               SchemaIndexDescriptor descriptor, Long owningConstraint )\n-    {\n+    IndexRule( long id, IndexProvider.Descriptor providerDescriptor, SchemaIndexDescriptor descriptor, Long owningConstraint )\n+{\n         this( id, providerDescriptor, descriptor, owningConstraint, null );\n     }\n \n-    IndexRule( long id, IndexProvider.Descriptor providerDescriptor,\n-               SchemaIndexDescriptor descriptor, Long owningConstraint, String name )\n-    {\n+    IndexRule( long id, IndexProvider.Descriptor providerDescriptor, SchemaIndexDescriptor descriptor, Long owningConstraint, String name )\n+{\n         super( id, name );\n         if ( providerDescriptor == null )\n         {\n@@ -111,7 +105,8 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n         {\n             throw new IllegalStateException( \"Can only get owner from constraint indexes.\" );\n         }\n-        return owningConstraint;\n+\n+return owningConstraint;\n     }\n \n     public boolean isIndexWithoutOwningConstraint()\n@@ -125,7 +120,8 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n         {\n             throw new IllegalStateException( this + \" is not a constraint index\" );\n         }\n-        return constraintIndexRule( id, descriptor, providerDescriptor, constraintId );\n+\n+return constraintIndexRule( id, descriptor, providerDescriptor, constraintId );\n     }\n \n     @Override\n@@ -143,8 +139,7 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n             ownerString = \", owner=\" + owningConstraint;\n         }\n \n-        return \"IndexRule[id=\" + id + \", descriptor=\" + descriptor.userDescription( idTokenNameLookup ) +\n-               \", provider=\" + providerDescriptor + ownerString + \"]\";\n+        return \"IndexRule[id=\" + id + \", descriptor=\" + descriptor.userDescription( idTokenNameLookup ) + \", provider=\" + providerDescriptor + ownerString + \"]\";\n     }\n \n     @Override\n@@ -175,4 +170,4 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n     {\n         return this.descriptor.hashCode();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "column": "44",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "141",
                    "column": "36",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "141",
                    "column": "140",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/130/IndexRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/130/IndexRule.java\nindex 227deeffbd7..e6a4825b163 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/130/IndexRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/130/IndexRule.java\n@@ -24,52 +24,44 @@ import org.neo4j.internal.kernel.api.schema.SchemaDescriptor;\n import org.neo4j.kernel.api.index.IndexProvider;\n import org.neo4j.kernel.api.schema.index.SchemaIndexDescriptor;\n import org.neo4j.storageengine.api.schema.SchemaRule;\n-\n import static org.neo4j.internal.kernel.api.schema.SchemaUtil.idTokenNameLookup;\n \n /**\n  * A {@link Label} can have zero or more index rules which will have data specified in the rules indexed.\n  */\n+\n public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Supplier\n {\n     private final IndexProvider.Descriptor providerDescriptor;\n     private final SchemaIndexDescriptor descriptor;\n     private final Long owningConstraint;\n \n-    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor,\n-                                       IndexProvider.Descriptor providerDescriptor )\n+    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor )\n     {\n         return new IndexRule( id, providerDescriptor, descriptor, null );\n     }\n \n-    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor,\n-                                                 IndexProvider.Descriptor providerDescriptor,\n-                                                 Long owningConstraint )\n+    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor, Long owningConstraint )\n     {\n         return new IndexRule( id, providerDescriptor, descriptor, owningConstraint );\n     }\n \n-    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor,\n-                                       IndexProvider.Descriptor providerDescriptor, String name )\n+    public static IndexRule indexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor, String name )\n     {\n         return new IndexRule( id, providerDescriptor, descriptor, null, name );\n     }\n \n-    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor,\n-                                                 IndexProvider.Descriptor providerDescriptor,\n-                                                 Long owningConstraint, String name )\n+    public static IndexRule constraintIndexRule( long id, SchemaIndexDescriptor descriptor, IndexProvider.Descriptor providerDescriptor, Long owningConstraint, String name )\n     {\n         return new IndexRule( id, providerDescriptor, descriptor, owningConstraint, name );\n     }\n \n-    IndexRule( long id, IndexProvider.Descriptor providerDescriptor,\n-               SchemaIndexDescriptor descriptor, Long owningConstraint )\n+    IndexRule( long id, IndexProvider.Descriptor providerDescriptor, SchemaIndexDescriptor descriptor, Long owningConstraint )\n     {\n         this( id, providerDescriptor, descriptor, owningConstraint, null );\n     }\n \n-    IndexRule( long id, IndexProvider.Descriptor providerDescriptor,\n-               SchemaIndexDescriptor descriptor, Long owningConstraint, String name )\n+    IndexRule( long id, IndexProvider.Descriptor providerDescriptor, SchemaIndexDescriptor descriptor, Long owningConstraint, String name )\n     {\n         super( id, name );\n         if ( providerDescriptor == null )\n@@ -105,26 +97,29 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n      * @throws IllegalStateException if this IndexRule cannot support uniqueness constraints (ei. the index is not\n      *                               unique)\n      */\n+\n     public Long getOwningConstraint()\n     {\n-        if ( !canSupportUniqueConstraint() )\n+        if ( ! canSupportUniqueConstraint() )\n         {\n             throw new IllegalStateException( \"Can only get owner from constraint indexes.\" );\n         }\n+\n         return owningConstraint;\n     }\n \n     public boolean isIndexWithoutOwningConstraint()\n     {\n-        return canSupportUniqueConstraint() && getOwningConstraint() == null;\n+        return canSupportUniqueConstraint()&& getOwningConstraint() == null;\n     }\n \n     public IndexRule withOwningConstraint( long constraintId )\n     {\n-        if ( !canSupportUniqueConstraint() )\n+        if ( ! canSupportUniqueConstraint() )\n         {\n             throw new IllegalStateException( this + \" is not a constraint index\" );\n         }\n+\n         return constraintIndexRule( id, descriptor, providerDescriptor, constraintId );\n     }\n \n@@ -143,8 +138,7 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n             ownerString = \", owner=\" + owningConstraint;\n         }\n \n-        return \"IndexRule[id=\" + id + \", descriptor=\" + descriptor.userDescription( idTokenNameLookup ) +\n-               \", provider=\" + providerDescriptor + ownerString + \"]\";\n+        return \"IndexRule[id=\" + id+ \", descriptor=\" + descriptor.userDescription( idTokenNameLookup ) + \", provider=\" + providerDescriptor+ ownerString + \"]\";\n     }\n \n     @Override\n@@ -167,6 +161,7 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n             IndexRule that = (IndexRule) o;\n             return this.descriptor.equals( that.descriptor );\n         }\n+\n         return false;\n     }\n \n@@ -175,4 +170,4 @@ public class IndexRule extends SchemaRule implements SchemaIndexDescriptor.Suppl\n     {\n         return this.descriptor.hashCode();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}