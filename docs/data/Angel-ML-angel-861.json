{
    "project_name": "Angel-ML-angel",
    "error_id": "861",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/861/InitPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/861/InitPartitionParam.java\nindex 7245bd06b3d..3a670bcf8be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/861/InitPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/861/InitPartitionParam.java\n@@ -52,7 +52,8 @@ public class InitPartitionParam extends PartitionUpdateParam {\n     this.window = window;\n   }\n \n-  public InitPartitionParam() {}\n+  public InitPartitionParam() {\n+  }\n \n   @Override\n   public void serialize(ByteBuf buf) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/861/InitPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/861/InitPartitionParam.java\nindex 7245bd06b3d..cb0b40e9ae8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/861/InitPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/861/InitPartitionParam.java\n@@ -32,8 +32,7 @@ public class InitPartitionParam extends PartitionUpdateParam {\n   int window;\n \n \n-  public InitPartitionParam(int matrixId,\n-                            PartitionKey partKey,\n+  public InitPartitionParam(int matrixId, PartitionKey partKey,\n                             int numPartitions,\n                             int maxIndex,\n                             int maxLength,\n@@ -41,9 +40,8 @@ public class InitPartitionParam extends PartitionUpdateParam {\n                             int order,\n                             int partDim,\n                             int window) {\n-    super(matrixId, partKey);\n-\n-    this.numPartitions = numPartitions;\n+  super(matrixId, partKey);\n+this.numPartitions = numPartitions;\n     this.maxIndex = maxIndex;\n     this.maxLength = maxLength;\n     this.negative = negative;\n@@ -84,4 +82,4 @@ public class InitPartitionParam extends PartitionUpdateParam {\n   public int bufferLen() {\n     return super.bufferLen() + 28;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/861/InitPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/861/InitPartitionParam.java\nindex 7245bd06b3d..def3147878f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/861/InitPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/861/InitPartitionParam.java\n@@ -24,25 +24,28 @@ import io.netty.buffer.ByteBuf;\n public class InitPartitionParam extends PartitionUpdateParam {\n \n   int numPartitions;\n+\n+\n   int maxIndex;\n+\n+\n   int maxLength;\n+\n+\n   int negative;\n+\n+\n   int order;\n+\n+\n   int partDim;\n-  int window;\n \n \n+  int window;\n+\n   public InitPartitionParam(int matrixId,\n-                            PartitionKey partKey,\n-                            int numPartitions,\n-                            int maxIndex,\n-                            int maxLength,\n-                            int negative,\n-                            int order,\n-                            int partDim,\n-                            int window) {\n+                            PartitionKey partKey, int numPartitions, int maxIndex, int maxLength, int negative, int order, int partDim, int window) {\n     super(matrixId, partKey);\n-\n     this.numPartitions = numPartitions;\n     this.maxIndex = maxIndex;\n     this.maxLength = maxLength;\n@@ -57,7 +60,6 @@ public class InitPartitionParam extends PartitionUpdateParam {\n   @Override\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n-\n     buf.writeInt(numPartitions);\n     buf.writeInt(maxIndex);\n     buf.writeInt(maxLength);\n@@ -70,7 +72,6 @@ public class InitPartitionParam extends PartitionUpdateParam {\n   @Override\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n-\n     numPartitions = buf.readInt();\n     maxIndex = buf.readInt();\n     maxLength = buf.readInt();\n@@ -84,4 +85,4 @@ public class InitPartitionParam extends PartitionUpdateParam {\n   public int bufferLen() {\n     return super.bufferLen() + 28;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}