{
    "project_name": "intuit-Tank",
    "error_id": "40",
    "information": {
        "errors": [
            {
                "line": "207",
                "column": "16",
                "severity": "warning",
                "message": "'?' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public Set<? extends Recipient> getRecipients() {\n        Set<JobRecipient> ret = new HashSet<JobRecipient>();\n        if (recipientList != null) {\n            String[] addresses = recipientList.split(\",\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/40/JobNotification.java\nindex 079adcb1a56..4cf6200ad35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/40/JobNotification.java\n@@ -204,7 +204,7 @@ public class JobNotification extends BaseEntity implements Notification {\n      * @{inheritDoc\n      */\n     @Override\n-    public Set<? extends Recipient> getRecipients() {\n+    public Set< ? extends Recipient> getRecipients() {\n         Set<JobRecipient> ret = new HashSet<JobRecipient>();\n         if (recipientList != null) {\n             String[] addresses = recipientList.split(\",\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "204",
                    "column": "14",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/40/JobNotification.java\nindex 079adcb1a56..771ffca0b88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/40/JobNotification.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.project;\n \n /*\n@@ -45,177 +46,173 @@ import com.intuit.tank.vm.vmManager.Recipient;\n \n /**\n  * JobNotification\n- * \n+ *\n  * @author dangleton\n- * \n  */\n @Entity\n @Audited\n @Table(name = \"job_notification\")\n public class JobNotification extends BaseEntity implements Notification {\n \n-    private static final long serialVersionUID = 1L;\n-    private static final Logger LOG = Logger.getLogger(JobNotification.class);\n-\n-    @Column(name = \"subject\")\n-    private String subject;\n-\n-    @Column(name = \"body\", length = 4096)\n-    private String body;\n-\n-    @Column(name = \"recipient_list\", length = 1024)\n-    private String recipientList;\n-\n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @CollectionTable(name = \"job_notification_to_event\", joinColumns = @JoinColumn(name = \"job_notification_id\"))\n-    @Enumerated(EnumType.STRING)\n-    @Column(name = \"lifecycle_events\")\n-    private List<JobLifecycleEvent> lifecycleEvents = new ArrayList<JobLifecycleEvent>();\n-\n-    @Transient\n-    private List<JobLifecycleEvent> transientLifecycleEvents;\n-\n-    public void copyTransient() {\n-        getTransientLifecycleEvents();\n-        if (!transientLifecycleEvents.isEmpty()) {\n-            lifecycleEvents.clear();\n-            lifecycleEvents.addAll(transientLifecycleEvents);\n-        }\n-    }\n-\n-    public void initTransient() {\n-        transientLifecycleEvents = new ArrayList<JobLifecycleEvent>();\n-        try {\n-            transientLifecycleEvents = new ArrayList<JobLifecycleEvent>(lifecycleEvents);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error initializing lifecycle events: \" + e, e);\n-        }\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    @Override\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    @Override\n-    public String getBody() {\n-        return body;\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    public void setBody(String body) {\n-        this.body = body;\n-    }\n-\n-    /**\n-     * @return the recipientList\n-     */\n-    public String getRecipientList() {\n-        return recipientList;\n-    }\n-\n-    /**\n-     * @param recipientList\n-     *            the recipientList to set\n-     */\n-    public void setRecipientList(String recipientList) {\n-        this.recipientList = recipientList;\n-    }\n-\n-    /**\n-     * @return the lifecycleEvents\n-     */\n-    public List<JobLifecycleEvent> getLifecycleEvents() {\n-        getTransientLifecycleEvents();\n-        return lifecycleEvents;\n-    }\n-\n-    /**\n-     * @param lifecycleEvents\n-     *            the lifecycleEvents to set\n-     */\n-    public void setLifecycleEvents(List<JobLifecycleEvent> lifecycleEvents) {\n-        this.lifecycleEvents = lifecycleEvents;\n-    }\n-\n-    /**\n-     * @return the transientLifecycleEvents\n-     */\n-    public List<JobLifecycleEvent> getTransientLifecycleEvents() {\n-        if (transientLifecycleEvents == null || transientLifecycleEvents.isEmpty()) {\n-            initTransient();\n-        }\n-        return transientLifecycleEvents;\n-    }\n-\n-    /**\n-     * @param transientLifecycleEvents\n-     *            the transientLifecycleEvents to set\n-     */\n-    public void setTransientLifecycleEvents(List<JobLifecycleEvent> transientLifecycleEvents) {\n-        this.transientLifecycleEvents = transientLifecycleEvents;\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    @Override\n-    public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId())\n-                .toString();\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof JobNotification)) {\n-            return false;\n-        }\n-        JobNotification o = (JobNotification) obj;\n-        return new EqualsBuilder().append(o.getId(), getId()).isEquals();\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    @Override\n-    public int hashCode() {\n-        return new HashCodeBuilder(29, 45).append(getId()).toHashCode();\n-    }\n-\n-    /**\n-     * @{inheritDoc\n-     */\n-    @Override\n-    public Set<? extends Recipient> getRecipients() {\n-        Set<JobRecipient> ret = new HashSet<JobRecipient>();\n-        if (recipientList != null) {\n-            String[] addresses = recipientList.split(\",\");\n-            if (addresses.length == 1) {\n-                // try semi colon\n-                addresses = recipientList.split(\",\");\n-            }\n-            for (String address : addresses) {\n-                ret.add(new JobRecipient(address.trim(), RecipientType.email));\n-            }\n-        }\n-        return ret;\n-    }\n+  private static final long serialVersionUID = 1L;\n+  private static final Logger LOG = Logger.getLogger(JobNotification.class);\n+\n+  @Column(name = \"subject\")\n+  private String subject;\n+\n+  @Column(name = \"body\", length = 4096)\n+  private String body;\n+\n+  @Column(name = \"recipient_list\", length = 1024)\n+  private String recipientList;\n+\n+  @ElementCollection(fetch = FetchType.EAGER)\n+  @CollectionTable(name = \"job_notification_to_event\", joinColumns = @JoinColumn(name = \"job_notification_id\"))\n+  @Enumerated(EnumType.STRING)\n+  @Column(name = \"lifecycle_events\")\n+  private List<JobLifecycleEvent> lifecycleEvents = new ArrayList<JobLifecycleEvent>();\n+\n+  @Transient\n+  private List<JobLifecycleEvent> transientLifecycleEvents;\n+\n+  public void copyTransient() {\n+    getTransientLifecycleEvents();\n+    if (!transientLifecycleEvents.isEmpty()) {\n+      lifecycleEvents.clear();\n+      lifecycleEvents.addAll(transientLifecycleEvents);\n+    }\n+  }\n+\n+  public void initTransient() {\n+    transientLifecycleEvents = new ArrayList<JobLifecycleEvent>();\n+    try {\n+      transientLifecycleEvents = new ArrayList<JobLifecycleEvent>(lifecycleEvents);\n+    } catch (Exception e) {\n+      LOG.warn(\"Error initializing lifecycle events: \" + e, e);\n+    }\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Override\n+  public String getSubject() {\n+    return subject;\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  public void setSubject(String subject) {\n+    this.subject = subject;\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Override\n+  public String getBody() {\n+    return body;\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  public void setBody(String body) {\n+    this.body = body;\n+  }\n+\n+  /**\n+   * @return the recipientList\n+   */\n+  public String getRecipientList() {\n+    return recipientList;\n+  }\n+\n+  /**\n+   * @param recipientList the recipientList to set\n+   */\n+  public void setRecipientList(String recipientList) {\n+    this.recipientList = recipientList;\n+  }\n+\n+  /**\n+   * @return the lifecycleEvents\n+   */\n+  public List<JobLifecycleEvent> getLifecycleEvents() {\n+    getTransientLifecycleEvents();\n+    return lifecycleEvents;\n+  }\n+\n+  /**\n+   * @param lifecycleEvents the lifecycleEvents to set\n+   */\n+  public void setLifecycleEvents(List<JobLifecycleEvent> lifecycleEvents) {\n+    this.lifecycleEvents = lifecycleEvents;\n+  }\n+\n+  /**\n+   * @return the transientLifecycleEvents\n+   */\n+  public List<JobLifecycleEvent> getTransientLifecycleEvents() {\n+    if (transientLifecycleEvents == null || transientLifecycleEvents.isEmpty()) {\n+      initTransient();\n+    }\n+    return transientLifecycleEvents;\n+  }\n+\n+  /**\n+   * @param transientLifecycleEvents the transientLifecycleEvents to set\n+   */\n+  public void setTransientLifecycleEvents(List<JobLifecycleEvent> transientLifecycleEvents) {\n+    this.transientLifecycleEvents = transientLifecycleEvents;\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Override\n+  public String toString() {\n+    return new ToStringBuilder(this).append(\"id\", getId())\n+      .toString();\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (!(obj instanceof JobNotification)) {\n+      return false;\n+    }\n+    JobNotification o = (JobNotification) obj;\n+    return new EqualsBuilder().append(o.getId(), getId()).isEquals();\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(29, 45).append(getId()).toHashCode();\n+  }\n+\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Override\n+  public Set<? extends Recipient> getRecipients() {\n+    Set<JobRecipient> ret = new HashSet<JobRecipient>();\n+    if (recipientList != null) {\n+      String[] addresses = recipientList.split(\",\");\n+      if (addresses.length == 1) {\n+        // try semi colon\n+        addresses = recipientList.split(\",\");\n+      }\n+      for (String address : addresses) {\n+        ret.add(new JobRecipient(address.trim(), RecipientType.email));\n+      }\n+    }\n+    return ret;\n+  }\n }\n",
            "diff_size": 167
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "207",
                    "column": "16",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/40/JobNotification.java\nindex 079adcb1a56..c906d161e1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/40/JobNotification.java\n@@ -218,4 +218,4 @@ public class JobNotification extends BaseEntity implements Notification {\n         }\n         return ret;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "230",
                    "column": "16",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/40/JobNotification.java\nindex 079adcb1a56..ad57308e5ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/40/JobNotification.java\n@@ -16,11 +16,12 @@ package com.intuit.tank.project;\n  * #L%\n  */\n \n+\n+\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n@@ -31,13 +32,11 @@ import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n-\n import org.apache.commons.lang.builder.EqualsBuilder;\n import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.log4j.Logger;\n import org.hibernate.envers.Audited;\n-\n import com.intuit.tank.vm.api.enumerated.JobLifecycleEvent;\n import com.intuit.tank.vm.api.enumerated.RecipientType;\n import com.intuit.tank.vm.vmManager.Notification;\n@@ -49,6 +48,7 @@ import com.intuit.tank.vm.vmManager.Recipient;\n  * @author dangleton\n  * \n  */\n+\n @Entity\n @Audited\n @Table(name = \"job_notification\")\n@@ -75,6 +75,7 @@ public class JobNotification extends BaseEntity implements Notification {\n     @Transient\n     private List<JobLifecycleEvent> transientLifecycleEvents;\n \n+\n     public void copyTransient() {\n         getTransientLifecycleEvents();\n         if (!transientLifecycleEvents.isEmpty()) {\n@@ -83,6 +84,7 @@ public class JobNotification extends BaseEntity implements Notification {\n         }\n     }\n \n+\n     public void initTransient() {\n         transientLifecycleEvents = new ArrayList<JobLifecycleEvent>();\n         try {\n@@ -95,6 +97,7 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @{inheritDoc\n      */\n+\n     @Override\n     public String getSubject() {\n         return subject;\n@@ -103,6 +106,8 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @{inheritDoc\n      */\n+\n+\n     public void setSubject(String subject) {\n         this.subject = subject;\n     }\n@@ -110,6 +115,7 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @{inheritDoc\n      */\n+\n     @Override\n     public String getBody() {\n         return body;\n@@ -118,6 +124,8 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @{inheritDoc\n      */\n+\n+\n     public void setBody(String body) {\n         this.body = body;\n     }\n@@ -125,6 +133,8 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @return the recipientList\n      */\n+\n+\n     public String getRecipientList() {\n         return recipientList;\n     }\n@@ -133,6 +143,8 @@ public class JobNotification extends BaseEntity implements Notification {\n      * @param recipientList\n      *            the recipientList to set\n      */\n+\n+\n     public void setRecipientList(String recipientList) {\n         this.recipientList = recipientList;\n     }\n@@ -140,6 +152,8 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @return the lifecycleEvents\n      */\n+\n+\n     public List<JobLifecycleEvent> getLifecycleEvents() {\n         getTransientLifecycleEvents();\n         return lifecycleEvents;\n@@ -149,6 +163,8 @@ public class JobNotification extends BaseEntity implements Notification {\n      * @param lifecycleEvents\n      *            the lifecycleEvents to set\n      */\n+\n+\n     public void setLifecycleEvents(List<JobLifecycleEvent> lifecycleEvents) {\n         this.lifecycleEvents = lifecycleEvents;\n     }\n@@ -156,6 +172,8 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @return the transientLifecycleEvents\n      */\n+\n+\n     public List<JobLifecycleEvent> getTransientLifecycleEvents() {\n         if (transientLifecycleEvents == null || transientLifecycleEvents.isEmpty()) {\n             initTransient();\n@@ -167,6 +185,8 @@ public class JobNotification extends BaseEntity implements Notification {\n      * @param transientLifecycleEvents\n      *            the transientLifecycleEvents to set\n      */\n+\n+\n     public void setTransientLifecycleEvents(List<JobLifecycleEvent> transientLifecycleEvents) {\n         this.transientLifecycleEvents = transientLifecycleEvents;\n     }\n@@ -174,15 +194,16 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @{inheritDoc\n      */\n+\n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId())\n-                .toString();\n+        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n     }\n \n     /**\n      * @{inheritDoc\n      */\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (!(obj instanceof JobNotification)) {\n@@ -195,6 +216,7 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @{inheritDoc\n      */\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder(29, 45).append(getId()).toHashCode();\n@@ -203,6 +225,7 @@ public class JobNotification extends BaseEntity implements Notification {\n     /**\n      * @{inheritDoc\n      */\n+\n     @Override\n     public Set<? extends Recipient> getRecipients() {\n         Set<JobRecipient> ret = new HashSet<JobRecipient>();\n@@ -218,4 +241,5 @@ public class JobNotification extends BaseEntity implements Notification {\n         }\n         return ret;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/40/JobNotification.java\nindex 079adcb1a56..4cf6200ad35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/40/JobNotification.java\n@@ -204,7 +204,7 @@ public class JobNotification extends BaseEntity implements Notification {\n      * @{inheritDoc\n      */\n     @Override\n-    public Set<? extends Recipient> getRecipients() {\n+    public Set< ? extends Recipient> getRecipients() {\n         Set<JobRecipient> ret = new HashSet<JobRecipient>();\n         if (recipientList != null) {\n             String[] addresses = recipientList.split(\",\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/40/JobNotification.java\nindex 079adcb1a56..4cf6200ad35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/40/JobNotification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/40/JobNotification.java\n@@ -204,7 +204,7 @@ public class JobNotification extends BaseEntity implements Notification {\n      * @{inheritDoc\n      */\n     @Override\n-    public Set<? extends Recipient> getRecipients() {\n+    public Set< ? extends Recipient> getRecipients() {\n         Set<JobRecipient> ret = new HashSet<JobRecipient>();\n         if (recipientList != null) {\n             String[] addresses = recipientList.split(\",\");\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}