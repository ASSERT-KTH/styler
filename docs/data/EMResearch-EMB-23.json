{
    "project_name": "EMResearch-EMB",
    "error_id": "23",
    "information": {
        "errors": [
            {
                "line": "79",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Override\n  public String getSuggestion() {\n    return \"'$match' \u00e9 uma express\u00e3o estrangeira importada cuja grafia tem diacr\u00edticos. \u00c9 prefer\u00edvel escrever $suggestions\";\n  }\n\n  @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/23/PortugueseDiacriticsRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/23/PortugueseDiacriticsRule.java\nindex 563403bebc7..a9f18d867f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/23/PortugueseDiacriticsRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/23/PortugueseDiacriticsRule.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules.pt;\n \n import org.languagetool.language.Portuguese;\n@@ -35,63 +36,63 @@ import java.net.URL;\n /**\n  * A rule that matches words which require specific diacritics (e.g, {@code a la} instead of {@code \u00e0 la}).\n  *\n- * @author Tiago F. Santos \n+ * @author Tiago F. Santos\n  * @since 4.7\n  */\n public class PortugueseDiacriticsRule extends AbstractSimpleReplaceRule2 {\n \n-  public static final String PT_DIACRITICS_REPLACE = \"PT_DIACRITICS_REPLACE\";\n-\n-  private static final String FILE_NAME = \"/pt/diacritics.txt\";\n-  private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n-\n-  @Override\n-  public List<String> getFileNames() {\n-    return Collections.singletonList(FILE_NAME);\n-  }\n-\n-  public PortugueseDiacriticsRule(ResourceBundle messages) {\n-    super(messages, new Portuguese());\n-    setDefaultOff();\n-    super.setCategory(Categories.TYPOS.getCategory(messages));\n-    setLocQualityIssueType(ITSIssueType.Misspelling);\n-    addExamplePair(Example.wrong(\"<marker>coupe</marker>\"),\n-                   Example.fixed(\"<marker>coup\u00e9</marker>\"));\n-  }\n-\n-  @Override\n-  public String getId() {\n-    return PT_DIACRITICS_REPLACE;\n-  }\n-\n-  @Override\n-  public String getDescription() {\n-    return \"Palavras estrangeiras com diacr\u00edticos\";\n-  }\n-\n-  @Override\n-  public String getShort() {\n-    return \"A palavra estrangeira original tem diacr\u00edtico\";\n-  }\n-\n-  @Override\n-  public String getSuggestion() {\n-    return \"'$match' \u00e9 uma express\u00e3o estrangeira importada cuja grafia tem diacr\u00edticos. \u00c9 prefer\u00edvel escrever $suggestions\";\n-  }\n-\n-  @Override\n-  public String getSuggestionsSeparator() {\n-    return \" ou \";\n-  }\n-\n-  @Override\n-  public URL getUrl() {\n-    return Tools.getUrl(\"http://escreverbem.com.br/o-frances-no-portugues-2/\");\n-  }\n-\n-  @Override\n-  public Locale getLocale() {\n-    return PT_LOCALE;\n-  }\n+    public static final String PT_DIACRITICS_REPLACE = \"PT_DIACRITICS_REPLACE\";\n+\n+    private static final String FILE_NAME = \"/pt/diacritics.txt\";\n+    private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n+\n+    @Override\n+    public List<String> getFileNames() {\n+        return Collections.singletonList(FILE_NAME);\n+    }\n+\n+    public PortugueseDiacriticsRule(ResourceBundle messages) {\n+        super(messages, new Portuguese());\n+        setDefaultOff();\n+        super.setCategory(Categories.TYPOS.getCategory(messages));\n+        setLocQualityIssueType(ITSIssueType.Misspelling);\n+        addExamplePair(Example.wrong(\"<marker>coupe</marker>\"),\n+            Example.fixed(\"<marker>coup\u00e9</marker>\"));\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return PT_DIACRITICS_REPLACE;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Palavras estrangeiras com diacr\u00edticos\";\n+    }\n+\n+    @Override\n+    public String getShort() {\n+        return \"A palavra estrangeira original tem diacr\u00edtico\";\n+    }\n+\n+    @Override\n+    public String getSuggestion() {\n+        return \"'$match' \u00e9 uma express\u00e3o estrangeira importada cuja grafia tem diacr\u00edticos. \u00c9 prefer\u00edvel escrever $suggestions\";\n+    }\n+\n+    @Override\n+    public String getSuggestionsSeparator() {\n+        return \" ou \";\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return Tools.getUrl(\"http://escreverbem.com.br/o-frances-no-portugues-2/\");\n+    }\n+\n+    @Override\n+    public Locale getLocale() {\n+        return PT_LOCALE;\n+    }\n \n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/23/PortugueseDiacriticsRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/23/PortugueseDiacriticsRule.java\nindex 563403bebc7..0af479aac14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/23/PortugueseDiacriticsRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/23/PortugueseDiacriticsRule.java\n@@ -94,4 +94,4 @@ public class PortugueseDiacriticsRule extends AbstractSimpleReplaceRule2 {\n     return PT_LOCALE;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/23/PortugueseDiacriticsRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/23/PortugueseDiacriticsRule.java\nindex 563403bebc7..e825992cb22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/23/PortugueseDiacriticsRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/23/PortugueseDiacriticsRule.java\n@@ -24,12 +24,10 @@ import org.languagetool.rules.Categories;\n import org.languagetool.rules.Example;\n import org.languagetool.rules.ITSIssueType;\n import org.languagetool.tools.Tools;\n-\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n import java.util.ResourceBundle;\n-\n import java.net.URL;\n \n /**\n@@ -38,60 +36,60 @@ import java.net.URL;\n  * @author Tiago F. Santos \n  * @since 4.7\n  */\n-public class PortugueseDiacriticsRule extends AbstractSimpleReplaceRule2 {\n-\n-  public static final String PT_DIACRITICS_REPLACE = \"PT_DIACRITICS_REPLACE\";\n-\n-  private static final String FILE_NAME = \"/pt/diacritics.txt\";\n-  private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n-\n-  @Override\n-  public List<String> getFileNames() {\n-    return Collections.singletonList(FILE_NAME);\n-  }\n-\n-  public PortugueseDiacriticsRule(ResourceBundle messages) {\n-    super(messages, new Portuguese());\n-    setDefaultOff();\n-    super.setCategory(Categories.TYPOS.getCategory(messages));\n-    setLocQualityIssueType(ITSIssueType.Misspelling);\n-    addExamplePair(Example.wrong(\"<marker>coupe</marker>\"),\n-                   Example.fixed(\"<marker>coup\u00e9</marker>\"));\n-  }\n \n-  @Override\n-  public String getId() {\n-    return PT_DIACRITICS_REPLACE;\n-  }\n \n-  @Override\n-  public String getDescription() {\n-    return \"Palavras estrangeiras com diacr\u00edticos\";\n-  }\n-\n-  @Override\n-  public String getShort() {\n-    return \"A palavra estrangeira original tem diacr\u00edtico\";\n-  }\n-\n-  @Override\n-  public String getSuggestion() {\n-    return \"'$match' \u00e9 uma express\u00e3o estrangeira importada cuja grafia tem diacr\u00edticos. \u00c9 prefer\u00edvel escrever $suggestions\";\n-  }\n-\n-  @Override\n-  public String getSuggestionsSeparator() {\n-    return \" ou \";\n-  }\n-\n-  @Override\n-  public URL getUrl() {\n-    return Tools.getUrl(\"http://escreverbem.com.br/o-frances-no-portugues-2/\");\n-  }\n-\n-  @Override\n-  public Locale getLocale() {\n-    return PT_LOCALE;\n-  }\n+public class PortugueseDiacriticsRule extends AbstractSimpleReplaceRule2 {\n \n-}\n+    public static final String PT_DIACRITICS_REPLACE = \"PT_DIACRITICS_REPLACE\";\n+    private static final String FILE_NAME = \"/pt/diacritics.txt\";\n+    private static final Locale PT_LOCALE = new Locale(\"pt\");  // locale used on case-conversion\n+\n+    @Override\n+    public List<String> getFileNames() {\n+        return Collections.singletonList(FILE_NAME);\n+    }\n+\n+    public PortugueseDiacriticsRule(ResourceBundle messages) {\n+        super(messages, new Portuguese());\n+        setDefaultOff();\n+        super.setCategory(Categories.TYPOS.getCategory(messages));\n+        setLocQualityIssueType(ITSIssueType.Misspelling);\n+        addExamplePair(Example.wrong(\"<marker>coupe</marker>\"),\n+                       Example.fixed(\"<marker>coup\u00e9</marker>\"));\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return PT_DIACRITICS_REPLACE;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Palavras estrangeiras com diacr\u00edticos\";\n+    }\n+\n+    @Override\n+    public String getShort() {\n+        return \"A palavra estrangeira original tem diacr\u00edtico\";\n+    }\n+\n+    @Override\n+    public String getSuggestion() {\n+        return \"'$match' \u00e9 uma express\u00e3o estrangeira importada cuja grafia tem diacr\u00edticos. \u00c9 prefer\u00edvel escrever $suggestions\";\n+    }\n+\n+    @Override\n+    public String getSuggestionsSeparator() {\n+        return \" ou \";\n+    }\n+\n+    @Override\n+    public URL getUrl() {\n+        return Tools.getUrl(\"http://escreverbem.com.br/o-frances-no-portugues-2/\");\n+    }\n+\n+    @Override\n+    public Locale getLocale() {\n+        return PT_LOCALE;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 108
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}