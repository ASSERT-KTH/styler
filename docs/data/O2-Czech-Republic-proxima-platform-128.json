{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "128",
    "information": {
        "errors": [
            {
                "line": "48",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 95).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    PCollection<KV<String, Long>> result =\n        elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n    PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n    assertNotNull(p.run());\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/128/ExtractKeyToKvTest.java\nindex d088b1d05a6..a36bf75f070 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/128/ExtractKeyToKvTest.java\n@@ -45,7 +45,8 @@ public class ExtractKeyToKvTest {\n     PCollection<StreamElement> elems = p.apply(Create.of(write(\"gw1\"), write(\"gw2\")));\n     PCollection<KV<String, Long>> result =\n         elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n-    PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n+    PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\",1L\n+    ), KV.of(\"gw2\", 1L)));\n     assertNotNull(p.run());\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/128/ExtractKeyToKvTest.java\nindex d088b1d05a6..2c116f0d086 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/128/ExtractKeyToKvTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.beam.transforms;\n \n import static org.junit.Assert.assertNotNull;\n@@ -45,7 +46,8 @@ public class ExtractKeyToKvTest {\n     PCollection<StreamElement> elems = p.apply(Create.of(write(\"gw1\"), write(\"gw2\")));\n     PCollection<KV<String, Long>> result =\n         elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n-    PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n+    PAssert.that(result)\n+        .containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n     assertNotNull(p.run());\n   }\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/128/ExtractKeyToKvTest.java\nindex d088b1d05a6..83e1f3bdfb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/128/ExtractKeyToKvTest.java\n@@ -34,17 +34,15 @@ import org.junit.Test;\n \n public class ExtractKeyToKvTest {\n \n-  private final Repository repo =\n-      Repository.ofTest(ConfigFactory.load(\"test-reference.conf\").resolve());\n-  private final EntityDescriptor gateway = repo.getEntity(\"gateway\");\n+  private final Repository repo = Repository.ofTest(ConfigFactory.load(\"test-reference.conf\").resolve());\n+private final EntityDescriptor gateway = repo.getEntity(\"gateway\");\n   private final AttributeDescriptor<byte[]> status = gateway.getAttribute(\"status\");\n \n   @Test\n   public void testToKv() {\n     Pipeline p = Pipeline.create();\n     PCollection<StreamElement> elems = p.apply(Create.of(write(\"gw1\"), write(\"gw2\")));\n-    PCollection<KV<String, Long>> result =\n-        elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n+    PCollection<KV<String, Long>> result = elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n     PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n     assertNotNull(p.run());\n   }\n@@ -59,4 +57,4 @@ public class ExtractKeyToKvTest {\n         System.currentTimeMillis(),\n         new byte[] {1});\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "'array initialization rcurly' has incorrect indentation level 0, expected level should be one of the following: 32, 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/128/ExtractKeyToKvTest.java\nindex d088b1d05a6..b3603a1dcbe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/128/ExtractKeyToKvTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.beam.transforms;\n \n import static org.junit.Assert.assertNotNull;\n-\n import com.typesafe.config.ConfigFactory;\n import cz.o2.proxima.repository.AttributeDescriptor;\n import cz.o2.proxima.repository.EntityDescriptor;\n@@ -32,10 +31,10 @@ import org.apache.beam.sdk.values.KV;\n import org.apache.beam.sdk.values.PCollection;\n import org.junit.Test;\n \n+\n public class ExtractKeyToKvTest {\n \n-  private final Repository repo =\n-      Repository.ofTest(ConfigFactory.load(\"test-reference.conf\").resolve());\n+  private final Repository repo = Repository.ofTest(ConfigFactory.load(\"test-reference.conf\").resolve());\n   private final EntityDescriptor gateway = repo.getEntity(\"gateway\");\n   private final AttributeDescriptor<byte[]> status = gateway.getAttribute(\"status\");\n \n@@ -43,20 +42,20 @@ public class ExtractKeyToKvTest {\n   public void testToKv() {\n     Pipeline p = Pipeline.create();\n     PCollection<StreamElement> elems = p.apply(Create.of(write(\"gw1\"), write(\"gw2\")));\n-    PCollection<KV<String, Long>> result =\n-        elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n+    PCollection<KV<String, Long>> result = elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n     PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n     assertNotNull(p.run());\n   }\n \n   private StreamElement write(String key) {\n-    return StreamElement.upsert(\n-        gateway,\n-        status,\n-        UUID.randomUUID().toString(),\n-        key,\n-        status.getName(),\n-        System.currentTimeMillis(),\n-        new byte[] {1});\n+    return StreamElement.upsert(gateway,\n+                                status,\n+                                UUID.randomUUID().toString(),\n+                                key,\n+                                status.getName(),\n+                                System.currentTimeMillis(),\n+                                new byte[] {\n+                                  1\n+});\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/128/ExtractKeyToKvTest.java\nindex d088b1d05a6..72d8c9a2e6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/128/ExtractKeyToKvTest.java\n@@ -45,7 +45,7 @@ public class ExtractKeyToKvTest {\n     PCollection<StreamElement> elems = p.apply(Create.of(write(\"gw1\"), write(\"gw2\")));\n     PCollection<KV<String, Long>> result =\n         elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n-    PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n+        PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n     assertNotNull(p.run());\n   }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/128/ExtractKeyToKvTest.java\nindex d088b1d05a6..a36bf75f070 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/128/ExtractKeyToKvTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/128/ExtractKeyToKvTest.java\n@@ -45,7 +45,8 @@ public class ExtractKeyToKvTest {\n     PCollection<StreamElement> elems = p.apply(Create.of(write(\"gw1\"), write(\"gw2\")));\n     PCollection<KV<String, Long>> result =\n         elems.apply(ExtractKeyToKv.fromStreamElements()).apply(Count.perKey());\n-    PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\", 1L), KV.of(\"gw2\", 1L)));\n+    PAssert.that(result).containsInAnyOrder(Arrays.asList(KV.of(\"gw1\",1L\n+    ), KV.of(\"gw2\", 1L)));\n     assertNotNull(p.run());\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}