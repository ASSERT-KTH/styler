{
    "project_name": "findbugsproject-findbugs",
    "error_id": "36",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class RegularMenuBuilder extends MenuGenerator\n{\n\tprivate BlueJ bluej;\n\t\n\tpublic RegularMenuBuilder(BlueJ bluej)\n\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/36/RegularMenuBuilder.java\nindex 93b97d35b41..b5096d00f66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/36/RegularMenuBuilder.java\n@@ -27,7 +27,7 @@ import bluej.extensions.ProjectNotOpenException;\n  */\n public class RegularMenuBuilder extends MenuGenerator\n {\n-\tprivate BlueJ bluej;\n+private BlueJ bluej;\n \t\n \tpublic RegularMenuBuilder(BlueJ bluej)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/36/RegularMenuBuilder.java\nindex 93b97d35b41..fc3558bc586 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/36/RegularMenuBuilder.java\n@@ -25,155 +25,135 @@ import bluej.extensions.ProjectNotOpenException;\n /**\n  * Adds our menu entry to the BlueJ tools menu.\n  */\n-public class RegularMenuBuilder extends MenuGenerator\n-{\n-\tprivate BlueJ bluej;\n-\t\n-\tpublic RegularMenuBuilder(BlueJ bluej)\n-\t{\n-\t\tthis.bluej = bluej;\n-\t}\n-\t\n-\t@SuppressWarnings(\"serial\")\n-\t@Override\n-\tpublic JMenuItem getToolsMenuItem(final BPackage pckg)\n-\t{\n-\t\tJMenuItem jmi = new JMenuItem(new AbstractAction()\n-\t\t{\n-\t\t\tpublic void actionPerformed(ActionEvent evt)\n-\t\t\t{\t\t\t\t\n-\t\t\t\tnew Thread(new Runnable() {\n-\t\t\t\t\tpublic void run()\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// First see if all classes are compiled\n-\t\t\t\t\t\tArrayList<BClass> notCompiled = new ArrayList<BClass>();\n-\t\t\t\t\t\ttry\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tfor (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n-\t\t\t\t\t\t\t\tfor (BClass bc : bp.getClasses())\n-\t\t\t\t\t\t\t\t\tif (!bc.isCompiled())\n-\t\t\t\t\t\t\t\t\t\tnotCompiled.add(bc);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\tif (notCompiled.size() > 0)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t// At least one class in the project is not compiled.\n-\t\t\t\t\t\t\t\tint response;\n-\t\t\t\t\t\t\t\tString strButton = bluej.getExtensionPropertyString(FindBugsPreferences.PROFILE_LABEL,\"\");\n-\t\t\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t/*\n-\t\t\t\t\t\t\t\t * Checks the preference of BlueJ to see if user wants to compile classes\n-\t\t\t\t\t\t\t\t * that are not compiled already when FindBugs runs, don't compile them, \n-\t\t\t\t\t\t\t\t * or pop a dialogue box.\n-\t\t\t\t\t\t\t\t * \n-\t\t\t\t\t\t\t\t * Warning! The numbers are hardcoded in here. If FindBugsPreferences's radioButtons\n-\t\t\t\t\t\t\t\t * are changed need to check for correctness here.\n-\t\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\t\tif(strButton.equals(FindBugsPreferences.radioCommand[0]))\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.YES_OPTION;\n-\t\t\t\t\t\t\t\telse if(strButton.equals(FindBugsPreferences.radioCommand[1]))\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.NO_OPTION;\n-\t\t\t\t\t\t\t\telse{\n-\t\t\t\t\t\t\t\t\tStringBuffer msg = new StringBuffer();\n-\t\t\t\t\t\t\t\t\tmsg.append(\"The following class\" + (notCompiled.size() == 1 ? \" is \" : \"es are \") + \"not compiled:\\n\\n\");\n-\t\t\t\t\t\t\t\t\tfor (BClass bc : notCompiled)\n-\t\t\t\t\t\t\t\t\t\tmsg.append(bc.getName() + \"\\n\");\n-\t\t\t\t\t\t\t\t\tmsg.append(\"\\nCompile before running FindBugs?\");\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.showConfirmDialog(null, msg);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tswitch (response)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tcase JOptionPane.YES_OPTION:\n-\t\t\t\t\t\t\t\t\tbluej.addCompileListener(new FindBugsCompileListener(bluej, notCompiled.size(), RegularMenuBuilder.this));\n-\t\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t\tfor (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n-\t\t\t\t\t\t\t\t\t\tbp.compile(true);\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase JOptionPane.NO_OPTION:\n-\t\t\t\t\t\t\t\t\tgetAllClassesAndRun();\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase JOptionPane.CANCEL_OPTION:\n-\t\t\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\tgetAllClassesAndRun();\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Exception e)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}).start();\n-\t\t\t}\n-\t\t});\n-\t\tjmi.setText(\"Run FindBugs\");\n-\t\treturn jmi;\n-\t}\n-\t\n-\tvoid getAllClassesAndRun() throws IOException, InterruptedException, ExtensionException\n-\t{\n-\t\tfinal SortedBugCollection bugs = RunFindbugs.getBugs(allClassFileNames(bluej.getCurrentPackage().getProject()));\n-\t\tSwingUtilities.invokeLater(new Runnable()\n-\t\t{\n-\t\t\tpublic void run()\n-\t\t\t{\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\tResultsFrame.getInstance(bluej.getCurrentPackage().getProject(), true).update(bugs, bluej.getCurrentPackage().getProject());\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e)\n-\t\t\t\t{\n-\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\t\n-\t/**\n-\t * @param BProject the current project\n-\t * @return Absolute paths for every .class file in the project\n-\t */\n-\tprivate String[] allClassFileNames(BProject project) throws ProjectNotOpenException\n-\t{\n-\t\tArrayList<String> classes = new ArrayList<String>();\n+public class RegularMenuBuilder extends MenuGenerator {\n+    private BlueJ bluej;\n \n-\t\tFilenameFilter isClassFile = new FilenameFilter()\n-\t\t{\n-\t\t\tpublic boolean accept(File dir, String name)\n-\t\t\t{\n-\t\t\t\treturn name.endsWith(\".class\");\n-\t\t\t}\n-\t\t};\n-\t\tfor (BPackage bp : project.getPackages())\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tfor (File f : bp.getDir().listFiles(isClassFile))\n-\t\t\t\t{\n-\t\t\t\t\tif (bp.getBClass(f.getName().substring(0, f.getName().length() - \".class\".length())) != null)\n-\t\t\t\t\t\t// The class found has a BClass, meaning it's the public top-level class for its source file\n-\t\t\t\t\t\t// and it's still in the project.\n-\t\t\t\t\t\tclasses.add(f.getAbsolutePath());\n-\t\t\t\t\telse\n-\t\t\t\t\t\tif (f.getName().contains(\"$\"))\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// Not a top-level class: accept it if its top-level is still in the project,\n-\t\t\t\t\t\t\t// and if they were compiled within 30 seconds of each other\t\n-\t\t\t\t\t\t\tString topLevelName = f.getName().substring(0, f.getName().indexOf(\"$\"));\n-\t\t\t\t\t\t\tif (bp.getBClass(topLevelName) != null && f.lastModified() >= bp.getBClass(topLevelName).getClassFile().lastModified() - 30000)\n-\t\t\t\t\t\t\t\tclasses.add(f.getAbsolutePath());\n-\t\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcatch (PackageNotFoundException e)\n-\t\t\t{\n-\t\t\t\tLog.recordBug(e);\n-\t\t\t}\n-\t\t}\n-\t\tString[] classesArray = new String[classes.size()];\n-\t\tclassesArray = classes.toArray(classesArray);\n-\t\treturn classesArray;\n-\t}\n+    public RegularMenuBuilder(BlueJ bluej) {\n+        this.bluej = bluej;\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    @Override\n+    public JMenuItem getToolsMenuItem(final BPackage pckg) {\n+        JMenuItem jmi = new JMenuItem(new AbstractAction() {\n+            public void actionPerformed(ActionEvent evt) {\n+                new Thread(new Runnable() {\n+                    public void run() {\n+                        // First see if all classes are compiled\n+                        ArrayList<BClass> notCompiled = new ArrayList<BClass>();\n+                        try {\n+                            for (BPackage bp : bluej.getCurrentPackage().getProject().getPackages()) {\n+                                for (BClass bc : bp.getClasses()) {\n+                                    if (!bc.isCompiled()) {\n+                                        notCompiled.add(bc);\n+                                    }\n+                                }\n+                            }\n+\n+                            if (notCompiled.size() > 0) {\n+                                // At least one class in the project is not compiled.\n+                                int response;\n+                                String strButton = bluej.getExtensionPropertyString(FindBugsPreferences.PROFILE_LABEL, \"\");\n+\n+                                /*\n+                                 * Checks the preference of BlueJ to see if user wants to compile classes\n+                                 * that are not compiled already when FindBugs runs, don't compile them,\n+                                 * or pop a dialogue box.\n+                                 *\n+                                 * Warning! The numbers are hardcoded in here. If FindBugsPreferences's radioButtons\n+                                 * are changed need to check for correctness here.\n+                                 */\n+                                if (strButton.equals(FindBugsPreferences.radioCommand[0])) {\n+                                    response = JOptionPane.YES_OPTION;\n+                                } else if (strButton.equals(FindBugsPreferences.radioCommand[1])) {\n+                                    response = JOptionPane.NO_OPTION;\n+                                } else {\n+                                    StringBuffer msg = new StringBuffer();\n+                                    msg.append(\"The following class\" + (notCompiled.size() == 1 ? \" is \" : \"es are \") + \"not compiled:\\n\\n\");\n+                                    for (BClass bc : notCompiled) {\n+                                        msg.append(bc.getName() + \"\\n\");\n+                                    }\n+                                    msg.append(\"\\nCompile before running FindBugs?\");\n+                                    response = JOptionPane.showConfirmDialog(null, msg);\n+                                }\n+\n+                                switch (response) {\n+                                    case JOptionPane.YES_OPTION:\n+                                        bluej.addCompileListener(new FindBugsCompileListener(bluej, notCompiled.size(), RegularMenuBuilder.this));\n+\n+                                        for (BPackage bp : bluej.getCurrentPackage().getProject().getPackages()) {\n+                                            bp.compile(true);\n+                                        }\n+                                        break;\n+                                    case JOptionPane.NO_OPTION:\n+                                        getAllClassesAndRun();\n+                                        break;\n+                                    case JOptionPane.CANCEL_OPTION:\n+                                        return;\n+                                }\n+                            } else {\n+                                getAllClassesAndRun();\n+                            }\n+\n+                        } catch (Exception e) {\n+                            Log.recordBug(e);\n+                        }\n+                    }\n+                }).start();\n+            }\n+        });\n+        jmi.setText(\"Run FindBugs\");\n+        return jmi;\n+    }\n+\n+    void getAllClassesAndRun() throws IOException, InterruptedException, ExtensionException {\n+        final SortedBugCollection bugs = RunFindbugs.getBugs(allClassFileNames(bluej.getCurrentPackage().getProject()));\n+        SwingUtilities.invokeLater(new Runnable() {\n+            public void run() {\n+                try {\n+                    ResultsFrame.getInstance(bluej.getCurrentPackage().getProject(), true).update(bugs, bluej.getCurrentPackage().getProject());\n+                } catch (Exception e) {\n+                    Log.recordBug(e);\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * @param BProject the current project\n+     * @return Absolute paths for every .class file in the project\n+     */\n+    private String[] allClassFileNames(BProject project) throws ProjectNotOpenException {\n+        ArrayList<String> classes = new ArrayList<String>();\n+\n+        FilenameFilter isClassFile = new FilenameFilter() {\n+            public boolean accept(File dir, String name) {\n+                return name.endsWith(\".class\");\n+            }\n+        };\n+        for (BPackage bp : project.getPackages()) {\n+            try {\n+                for (File f : bp.getDir().listFiles(isClassFile)) {\n+                    if (bp.getBClass(f.getName().substring(0, f.getName().length() - \".class\".length())) != null)\n+                    // The class found has a BClass, meaning it's the public top-level class for its source file\n+                    // and it's still in the project.\n+                    {\n+                        classes.add(f.getAbsolutePath());\n+                    } else if (f.getName().contains(\"$\")) {\n+                        // Not a top-level class: accept it if its top-level is still in the project,\n+                        // and if they were compiled within 30 seconds of each other\n+                        String topLevelName = f.getName().substring(0, f.getName().indexOf(\"$\"));\n+                        if (bp.getBClass(topLevelName) != null && f.lastModified() >= bp.getBClass(topLevelName).getClassFile().lastModified() - 30000) {\n+                            classes.add(f.getAbsolutePath());\n+                        }\n+                    }\n+                }\n+            } catch (PackageNotFoundException e) {\n+                Log.recordBug(e);\n+            }\n+        }\n+        String[] classesArray = new String[classes.size()];\n+        classesArray = classes.toArray(classesArray);\n+        return classesArray;\n+    }\n }\n",
            "diff_size": 241
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/36/RegularMenuBuilder.java\nindex 93b97d35b41..91f33190445 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/36/RegularMenuBuilder.java\n@@ -25,42 +25,32 @@ import bluej.extensions.ProjectNotOpenException;\n /**\n  * Adds our menu entry to the BlueJ tools menu.\n  */\n-public class RegularMenuBuilder extends MenuGenerator\n-{\n-\tprivate BlueJ bluej;\n-\t\n-\tpublic RegularMenuBuilder(BlueJ bluej)\n-\t{\n-\t\tthis.bluej = bluej;\n-\t}\n-\t\n-\t@SuppressWarnings(\"serial\")\n-\t@Override\n-\tpublic JMenuItem getToolsMenuItem(final BPackage pckg)\n-\t{\n-\t\tJMenuItem jmi = new JMenuItem(new AbstractAction()\n-\t\t{\n-\t\t\tpublic void actionPerformed(ActionEvent evt)\n-\t\t\t{\t\t\t\t\n-\t\t\t\tnew Thread(new Runnable() {\n-\t\t\t\t\tpublic void run()\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// First see if all classes are compiled\n+public class RegularMenuBuilder extends MenuGenerator {\n+    private BlueJ bluej;\n+\n+public RegularMenuBuilder(BlueJ bluej) {\n+    this.bluej = bluej;\n+    }\n+\n+@SuppressWarnings(\"serial\")\n+@Override\n+\tpublic JMenuItem getToolsMenuItem(final BPackage pckg) {\n+   JMenuItem jmi = new JMenuItem(new AbstractAction() {\n+    public void actionPerformed(ActionEvent evt) { new Thread(new Runnable() {\n+    public void run() {\n+    // First see if all classes are compiled\n \t\t\t\t\t\tArrayList<BClass> notCompiled = new ArrayList<BClass>();\n-\t\t\t\t\t\ttry\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tfor (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n-\t\t\t\t\t\t\t\tfor (BClass bc : bp.getClasses())\n-\t\t\t\t\t\t\t\t\tif (!bc.isCompiled())\n-\t\t\t\t\t\t\t\t\t\tnotCompiled.add(bc);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\tif (notCompiled.size() > 0)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t// At least one class in the project is not compiled.\n+\t\t\t\t\t\ttry {\n+    for (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n+    for (BClass bc : bp.getClasses())\n+    if (!bc.isCompiled())\n+    notCompiled.add(bc);\n+if (notCompiled.size() > 0) {\n+    // At least one class in the project is not compiled.\n \t\t\t\t\t\t\t\tint response;\n \t\t\t\t\t\t\t\tString strButton = bluej.getExtensionPropertyString(FindBugsPreferences.PROFILE_LABEL,\"\");\n-\t\t\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t/*\n+\n+/*\n \t\t\t\t\t\t\t\t * Checks the preference of BlueJ to see if user wants to compile classes\n \t\t\t\t\t\t\t\t * that are not compiled already when FindBugs runs, don't compile them, \n \t\t\t\t\t\t\t\t * or pop a dialogue box.\n@@ -68,112 +58,90 @@ public class RegularMenuBuilder extends MenuGenerator\n \t\t\t\t\t\t\t\t * Warning! The numbers are hardcoded in here. If FindBugsPreferences's radioButtons\n \t\t\t\t\t\t\t\t * are changed need to check for correctness here.\n \t\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\t\tif(strButton.equals(FindBugsPreferences.radioCommand[0]))\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.YES_OPTION;\n-\t\t\t\t\t\t\t\telse if(strButton.equals(FindBugsPreferences.radioCommand[1]))\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.NO_OPTION;\n-\t\t\t\t\t\t\t\telse{\n-\t\t\t\t\t\t\t\t\tStringBuffer msg = new StringBuffer();\n+    if(strButton.equals(FindBugsPreferences.radioCommand[0]))\n+    response = JOptionPane.YES_OPTION;\n+    else if (strButton.equals(FindBugsPreferences.radioCommand[1]))\n+    response = JOptionPane.NO_OPTION;\n+    else {\n+    StringBuffer msg = new StringBuffer();\n \t\t\t\t\t\t\t\t\tmsg.append(\"The following class\" + (notCompiled.size() == 1 ? \" is \" : \"es are \") + \"not compiled:\\n\\n\");\n-\t\t\t\t\t\t\t\t\tfor (BClass bc : notCompiled)\n-\t\t\t\t\t\t\t\t\t\tmsg.append(bc.getName() + \"\\n\");\n-\t\t\t\t\t\t\t\t\tmsg.append(\"\\nCompile before running FindBugs?\");\n+\t\t\t\t\t\t\t\t\tfor (BClass bc : notCompiled) msg.append(bc.getName() + \"\\n\");\n+msg.append(\"\\nCompile before running FindBugs?\");\n \t\t\t\t\t\t\t\t\tresponse = JOptionPane.showConfirmDialog(null, msg);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tswitch (response)\n-\t\t\t\t\t\t\t\t{\n+    }\n+switch (response) {\n \t\t\t\t\t\t\t\tcase JOptionPane.YES_OPTION:\n-\t\t\t\t\t\t\t\t\tbluej.addCompileListener(new FindBugsCompileListener(bluej, notCompiled.size(), RegularMenuBuilder.this));\n-\t\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t\tfor (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n-\t\t\t\t\t\t\t\t\t\tbp.compile(true);\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase JOptionPane.NO_OPTION:\n-\t\t\t\t\t\t\t\t\tgetAllClassesAndRun();\n+    bluej.addCompileListener(new FindBugsCompileListener(bluej, notCompiled.size(), RegularMenuBuilder.this));\n+for (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n+    bp.compile(true);\n+break;\n+    case JOptionPane.NO_OPTION:\n+    getAllClassesAndRun();\n \t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase JOptionPane.CANCEL_OPTION:\n-\t\t\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\tgetAllClassesAndRun();\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Exception e)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}).start();\n-\t\t\t}\n-\t\t});\n+    case JOptionPane.CANCEL_OPTION:\n+    return;\n+    }\n+    } else\n+    getAllClassesAndRun();\n+    } catch (Exception e) {\n+   Log.recordBug(e);\n+    }\n+    }\n+    }).start();\n+    }\n+    });\n \t\tjmi.setText(\"Run FindBugs\");\n \t\treturn jmi;\n-\t}\n-\t\n-\tvoid getAllClassesAndRun() throws IOException, InterruptedException, ExtensionException\n-\t{\n-\t\tfinal SortedBugCollection bugs = RunFindbugs.getBugs(allClassFileNames(bluej.getCurrentPackage().getProject()));\n-\t\tSwingUtilities.invokeLater(new Runnable()\n-\t\t{\n-\t\t\tpublic void run()\n-\t\t\t{\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\tResultsFrame.getInstance(bluej.getCurrentPackage().getProject(), true).update(bugs, bluej.getCurrentPackage().getProject());\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e)\n-\t\t\t\t{\n-\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\t\n-\t/**\n+    }\n+\n+void getAllClassesAndRun() throws IOException, InterruptedException, ExtensionException {\n+    final SortedBugCollection bugs = RunFindbugs.getBugs(allClassFileNames(bluej.getCurrentPackage().getProject()));\n+\t\tSwingUtilities.invokeLater(new Runnable() {\n+    public void run() {\n+    try {\n+    ResultsFrame.getInstance(bluej.getCurrentPackage().getProject(), true).update(bugs, bluej.getCurrentPackage().getProject());\n+    }\n+\t\t\t\tcatch (Exception e) {\n+   Log.recordBug(e);\n+    }\n+    }\n+    });\n+    }\n+\n+/**\n \t * @param BProject the current project\n \t * @return Absolute paths for every .class file in the project\n \t */\n-\tprivate String[] allClassFileNames(BProject project) throws ProjectNotOpenException\n-\t{\n-\t\tArrayList<String> classes = new ArrayList<String>();\n+private String[] allClassFileNames(BProject project) throws ProjectNotOpenException {\n+    ArrayList<String> classes = new ArrayList<String>();\n \n-\t\tFilenameFilter isClassFile = new FilenameFilter()\n-\t\t{\n-\t\t\tpublic boolean accept(File dir, String name)\n-\t\t\t{\n-\t\t\t\treturn name.endsWith(\".class\");\n-\t\t\t}\n-\t\t};\n-\t\tfor (BPackage bp : project.getPackages())\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tfor (File f : bp.getDir().listFiles(isClassFile))\n-\t\t\t\t{\n-\t\t\t\t\tif (bp.getBClass(f.getName().substring(0, f.getName().length() - \".class\".length())) != null)\n-\t\t\t\t\t\t// The class found has a BClass, meaning it's the public top-level class for its source file\n+\t\tFilenameFilter isClassFile = new FilenameFilter() {\n+    public boolean accept(File dir, String name) {\n+   return name.endsWith(\".class\");\n+    }\n+    };\n+\t\tfor (BPackage bp : project.getPackages()) {\n+    try {\n+    for (File f : bp.getDir().listFiles(isClassFile)) {\n+   if (bp.getBClass(f.getName().substring(0, f.getName().length() - \".class\".length())) != null)\n+    // The class found has a BClass, meaning it's the public top-level class for its source file\n \t\t\t\t\t\t// and it's still in the project.\n \t\t\t\t\t\tclasses.add(f.getAbsolutePath());\n-\t\t\t\t\telse\n-\t\t\t\t\t\tif (f.getName().contains(\"$\"))\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// Not a top-level class: accept it if its top-level is still in the project,\n+    else if (f.getName().contains(\"$\")) {\n+    // Not a top-level class: accept it if its top-level is still in the project,\n \t\t\t\t\t\t\t// and if they were compiled within 30 seconds of each other\t\n \t\t\t\t\t\t\tString topLevelName = f.getName().substring(0, f.getName().indexOf(\"$\"));\n \t\t\t\t\t\t\tif (bp.getBClass(topLevelName) != null && f.lastModified() >= bp.getBClass(topLevelName).getClassFile().lastModified() - 30000)\n-\t\t\t\t\t\t\t\tclasses.add(f.getAbsolutePath());\n-\t\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcatch (PackageNotFoundException e)\n-\t\t\t{\n-\t\t\t\tLog.recordBug(e);\n-\t\t\t}\n-\t\t}\n+    classes.add(f.getAbsolutePath());\n+    }\n+    }\n+    }\n+\t\t\tcatch (PackageNotFoundException e) {\n+   Log.recordBug(e);\n+    }\n+    }\n \t\tString[] classesArray = new String[classes.size()];\n \t\tclassesArray = classes.toArray(classesArray);\n \t\treturn classesArray;\n-\t}\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/36/RegularMenuBuilder.java\nindex 93b97d35b41..61549b4d589 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/36/RegularMenuBuilder.java\n@@ -5,14 +5,11 @@ import java.io.File;\n import java.io.FilenameFilter;\n import java.io.IOException;\n import java.util.ArrayList;\n-\n import javax.swing.AbstractAction;\n import javax.swing.JMenuItem;\n import javax.swing.JOptionPane;\n import javax.swing.SwingUtilities;\n-\n import edu.umd.cs.findbugs.SortedBugCollection;\n-\n import bluej.extensions.BClass;\n import bluej.extensions.BPackage;\n import bluej.extensions.BProject;\n@@ -25,155 +22,127 @@ import bluej.extensions.ProjectNotOpenException;\n /**\n  * Adds our menu entry to the BlueJ tools menu.\n  */\n-public class RegularMenuBuilder extends MenuGenerator\n-{\n-\tprivate BlueJ bluej;\n-\t\n-\tpublic RegularMenuBuilder(BlueJ bluej)\n-\t{\n-\t\tthis.bluej = bluej;\n-\t}\n-\t\n-\t@SuppressWarnings(\"serial\")\n-\t@Override\n-\tpublic JMenuItem getToolsMenuItem(final BPackage pckg)\n-\t{\n-\t\tJMenuItem jmi = new JMenuItem(new AbstractAction()\n-\t\t{\n-\t\t\tpublic void actionPerformed(ActionEvent evt)\n-\t\t\t{\t\t\t\t\n-\t\t\t\tnew Thread(new Runnable() {\n-\t\t\t\t\tpublic void run()\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// First see if all classes are compiled\n-\t\t\t\t\t\tArrayList<BClass> notCompiled = new ArrayList<BClass>();\n-\t\t\t\t\t\ttry\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tfor (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n-\t\t\t\t\t\t\t\tfor (BClass bc : bp.getClasses())\n-\t\t\t\t\t\t\t\t\tif (!bc.isCompiled())\n-\t\t\t\t\t\t\t\t\t\tnotCompiled.add(bc);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\tif (notCompiled.size() > 0)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t// At least one class in the project is not compiled.\n-\t\t\t\t\t\t\t\tint response;\n-\t\t\t\t\t\t\t\tString strButton = bluej.getExtensionPropertyString(FindBugsPreferences.PROFILE_LABEL,\"\");\n-\t\t\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t/*\n-\t\t\t\t\t\t\t\t * Checks the preference of BlueJ to see if user wants to compile classes\n-\t\t\t\t\t\t\t\t * that are not compiled already when FindBugs runs, don't compile them, \n-\t\t\t\t\t\t\t\t * or pop a dialogue box.\n-\t\t\t\t\t\t\t\t * \n-\t\t\t\t\t\t\t\t * Warning! The numbers are hardcoded in here. If FindBugsPreferences's radioButtons\n-\t\t\t\t\t\t\t\t * are changed need to check for correctness here.\n-\t\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\t\tif(strButton.equals(FindBugsPreferences.radioCommand[0]))\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.YES_OPTION;\n-\t\t\t\t\t\t\t\telse if(strButton.equals(FindBugsPreferences.radioCommand[1]))\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.NO_OPTION;\n-\t\t\t\t\t\t\t\telse{\n-\t\t\t\t\t\t\t\t\tStringBuffer msg = new StringBuffer();\n-\t\t\t\t\t\t\t\t\tmsg.append(\"The following class\" + (notCompiled.size() == 1 ? \" is \" : \"es are \") + \"not compiled:\\n\\n\");\n-\t\t\t\t\t\t\t\t\tfor (BClass bc : notCompiled)\n-\t\t\t\t\t\t\t\t\t\tmsg.append(bc.getName() + \"\\n\");\n-\t\t\t\t\t\t\t\t\tmsg.append(\"\\nCompile before running FindBugs?\");\n-\t\t\t\t\t\t\t\t\tresponse = JOptionPane.showConfirmDialog(null, msg);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tswitch (response)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tcase JOptionPane.YES_OPTION:\n-\t\t\t\t\t\t\t\t\tbluej.addCompileListener(new FindBugsCompileListener(bluej, notCompiled.size(), RegularMenuBuilder.this));\n-\t\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t\tfor (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n-\t\t\t\t\t\t\t\t\t\tbp.compile(true);\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase JOptionPane.NO_OPTION:\n-\t\t\t\t\t\t\t\t\tgetAllClassesAndRun();\n-\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\tcase JOptionPane.CANCEL_OPTION:\n-\t\t\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\tgetAllClassesAndRun();\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Exception e)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}).start();\n-\t\t\t}\n-\t\t});\n-\t\tjmi.setText(\"Run FindBugs\");\n-\t\treturn jmi;\n-\t}\n-\t\n-\tvoid getAllClassesAndRun() throws IOException, InterruptedException, ExtensionException\n-\t{\n-\t\tfinal SortedBugCollection bugs = RunFindbugs.getBugs(allClassFileNames(bluej.getCurrentPackage().getProject()));\n-\t\tSwingUtilities.invokeLater(new Runnable()\n-\t\t{\n-\t\t\tpublic void run()\n-\t\t\t{\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\tResultsFrame.getInstance(bluej.getCurrentPackage().getProject(), true).update(bugs, bluej.getCurrentPackage().getProject());\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception e)\n-\t\t\t\t{\n-\t\t\t\t\tLog.recordBug(e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\t\n-\t/**\n-\t * @param BProject the current project\n-\t * @return Absolute paths for every .class file in the project\n-\t */\n-\tprivate String[] allClassFileNames(BProject project) throws ProjectNotOpenException\n-\t{\n-\t\tArrayList<String> classes = new ArrayList<String>();\n \n-\t\tFilenameFilter isClassFile = new FilenameFilter()\n-\t\t{\n-\t\t\tpublic boolean accept(File dir, String name)\n-\t\t\t{\n-\t\t\t\treturn name.endsWith(\".class\");\n-\t\t\t}\n-\t\t};\n-\t\tfor (BPackage bp : project.getPackages())\n-\t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tfor (File f : bp.getDir().listFiles(isClassFile))\n-\t\t\t\t{\n-\t\t\t\t\tif (bp.getBClass(f.getName().substring(0, f.getName().length() - \".class\".length())) != null)\n-\t\t\t\t\t\t// The class found has a BClass, meaning it's the public top-level class for its source file\n-\t\t\t\t\t\t// and it's still in the project.\n-\t\t\t\t\t\tclasses.add(f.getAbsolutePath());\n-\t\t\t\t\telse\n-\t\t\t\t\t\tif (f.getName().contains(\"$\"))\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// Not a top-level class: accept it if its top-level is still in the project,\n-\t\t\t\t\t\t\t// and if they were compiled within 30 seconds of each other\t\n-\t\t\t\t\t\t\tString topLevelName = f.getName().substring(0, f.getName().indexOf(\"$\"));\n-\t\t\t\t\t\t\tif (bp.getBClass(topLevelName) != null && f.lastModified() >= bp.getBClass(topLevelName).getClassFile().lastModified() - 30000)\n-\t\t\t\t\t\t\t\tclasses.add(f.getAbsolutePath());\n-\t\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcatch (PackageNotFoundException e)\n-\t\t\t{\n-\t\t\t\tLog.recordBug(e);\n-\t\t\t}\n-\t\t}\n-\t\tString[] classesArray = new String[classes.size()];\n-\t\tclassesArray = classes.toArray(classesArray);\n-\t\treturn classesArray;\n-\t}\n-}\n+public class RegularMenuBuilder extends MenuGenerator {\n+    private BlueJ bluej;\n+\n+\n+    public RegularMenuBuilder(BlueJ bluej) {\n+        this.bluej = bluej;\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    @Override\n+    public JMenuItem getToolsMenuItem(final BPackage pckg) {\n+        JMenuItem jmi = new JMenuItem(new AbstractAction() {\n+                            public void actionPerformed(ActionEvent evt) {\n+                                new Thread(new Runnable() {\n+                                    public void run() {\n+                        // First see if all classes are compiled\n+                                        ArrayList<BClass> notCompiled = new ArrayList<BClass>();\n+                                        try {\n+                                            for (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n+                                                for (BClass bc : bp.getClasses())\n+                                                    if (!bc.isCompiled())\n+                                                        notCompiled.add(bc);\n+                                            if (notCompiled.size() > 0) {\n+                                // At least one class in the project is not compiled.\n+                                                int response;\n+                                                String strButton = bluej.getExtensionPropertyString(FindBugsPreferences.PROFILE_LABEL, \"\");\n+                                        \n+                                /*\n+                                 * Checks the preference of BlueJ to see if user wants to compile classes\n+                                 * that are not compiled already when FindBugs runs, don't compile them, \n+                                 * or pop a dialogue box.\n+                                 * \n+                                 * Warning! The numbers are hardcoded in here. If FindBugsPreferences's radioButtons\n+                                 * are changed need to check for correctness here.\n+                                 */\n+                                                if (strButton.equals(FindBugsPreferences.radioCommand[0]))\n+                                                    response = JOptionPane.YES_OPTION;\n+                                                else if (strButton.equals(FindBugsPreferences.radioCommand[1]))\n+                                                    response = JOptionPane.NO_OPTION;\n+                                                else {\n+                                                    StringBuffer msg = new StringBuffer();\n+                                                    msg.append(\"The following class\" + (notCompiled.size() == 1 ? \" is \" : \"es are \") + \"not compiled:\\n\\n\");\n+                                                    for (BClass bc : notCompiled)\n+                                                        msg.append(bc.getName() + \"\\n\");\n+                                                    msg.append(\"\\nCompile before running FindBugs?\");\n+                                                    response = JOptionPane.showConfirmDialog(null, msg);\n+                                                }\n+\n+                                                switch (response) {\n+                                                case JOptionPane.YES_OPTION:\n+                                                    bluej.addCompileListener(new FindBugsCompileListener(bluej, notCompiled.size(), RegularMenuBuilder.this));\n+                                                    for (BPackage bp : bluej.getCurrentPackage().getProject().getPackages())\n+                                                        bp.compile(true);\n+                                                    break;\n+                                                case JOptionPane.NO_OPTION:\n+                                                    getAllClassesAndRun();\n+                                                    break;\n+                                                case JOptionPane.CANCEL_OPTION:\n+                                                    return;\n+                                                }\n+                                            } else\n+                                                getAllClassesAndRun();\n+                                        } catch (Exception e) {\n+                                            Log.recordBug(e);\n+                                        }\n+                                    }\n+                                }).start();\n+                            }\n+                        });\n+        jmi.setText(\"Run FindBugs\");\n+        return jmi;\n+    }\n+\n+    void getAllClassesAndRun() throws IOException, InterruptedException, ExtensionException {\n+        final SortedBugCollection bugs = RunFindbugs.getBugs(allClassFileNames(bluej.getCurrentPackage().getProject()));\n+        SwingUtilities.invokeLater(new Runnable() {\n+            public void run() {\n+                try {\n+                    ResultsFrame.getInstance(bluej.getCurrentPackage().getProject(), true).update(bugs, bluej.getCurrentPackage().getProject());\n+                } catch (Exception e) {\n+                    Log.recordBug(e);\n+                }\n+            }\n+        });\n+    }\n+    \n+    /**\n+     * @param BProject the current project\n+     * @return Absolute paths for every .class file in the project\n+     */\n+\n+\n+    private String[] allClassFileNames(BProject project) throws ProjectNotOpenException {\n+        ArrayList<String> classes = new ArrayList<String>();\n+        FilenameFilter isClassFile = new FilenameFilter() {\n+                           public boolean accept(File dir, String name) {\n+                               return name.endsWith(\".class\");\n+                           }\n+                       };\n+        for (BPackage bp : project.getPackages()) {\n+            try {\n+                for (File f : bp.getDir().listFiles(isClassFile)) {\n+                    if (bp.getBClass(f.getName().substring(0, f.getName().length() - \".class\".length())) != null)\n+                        // The class found has a BClass, meaning it's the public top-level class for its source file\n+                        // and it's still in the project.\n+                        classes.add(f.getAbsolutePath());\n+                    else if (f.getName().contains(\"$\")) {\n+                            // Not a top-level class: accept it if its top-level is still in the project,\n+                            // and if they were compiled within 30 seconds of each other    \n+                        String topLevelName = f.getName().substring(0, f.getName().indexOf(\"$\"));\n+                        if (bp.getBClass(topLevelName) != null && f.lastModified() >= bp.getBClass(topLevelName).getClassFile().lastModified() - 30000)\n+                            classes.add(f.getAbsolutePath());\n+                    }\n+                }\n+            } catch (PackageNotFoundException e) {\n+                Log.recordBug(e);\n+            }\n+        }\n+        String[] classesArray = new String[classes.size()];\n+        classesArray = classes.toArray(classesArray);\n+        return classesArray;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 239
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/36/RegularMenuBuilder.java\nindex 93b97d35b41..b5096d00f66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/36/RegularMenuBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/36/RegularMenuBuilder.java\n@@ -27,7 +27,7 @@ import bluej.extensions.ProjectNotOpenException;\n  */\n public class RegularMenuBuilder extends MenuGenerator\n {\n-\tprivate BlueJ bluej;\n+private BlueJ bluej;\n \t\n \tpublic RegularMenuBuilder(BlueJ bluej)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}