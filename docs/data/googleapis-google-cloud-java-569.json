{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "569",
    "information": {
        "errors": [
            {
                "line": "80",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 110).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final String LOCATION = \"ASIA\";\n  private static final StorageClass STORAGE_CLASS = StorageClass.STANDARD;\n  private static final String DEFAULT_KMS_KEY_NAME = \"projects/p/locations/kr-loc/keyRings/kr/cryptoKeys/key\";\n  private static final Boolean VERSIONING_ENABLED = true;\n  private static final Map<String, String> BUCKET_LABELS = ImmutableMap.of(\"label1\", \"value1\");\n  private static final Boolean REQUESTER_PAYS = true;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/569/BucketTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/569/BucketTest.java\nindex 94c8ad715a0..3a9ae6b64f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/569/BucketTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/569/BucketTest.java\n@@ -77,7 +77,8 @@ public class BucketTest {\n   private static final String NOT_FOUND_PAGE = \"error.html\";\n   private static final String LOCATION = \"ASIA\";\n   private static final StorageClass STORAGE_CLASS = StorageClass.STANDARD;\n-  private static final String DEFAULT_KMS_KEY_NAME = \"projects/p/locations/kr-loc/keyRings/kr/cryptoKeys/key\";\n+  private static final String DEFAULT_KMS_KEY_NAME =\n+      \"projects/p/locations/kr-loc/keyRings/kr/cryptoKeys/key\";\n   private static final Boolean VERSIONING_ENABLED = true;\n   private static final Map<String, String> BUCKET_LABELS = ImmutableMap.of(\"label1\", \"value1\");\n   private static final Boolean REQUESTER_PAYS = true;\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "254",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/569/BucketTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/569/BucketTest.java\nindex 94c8ad715a0..a101fabf317 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/569/BucketTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/569/BucketTest.java\n@@ -133,12 +133,11 @@ public class BucketTest {\n     expect(serviceMockReturnsOptions.getOptions()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n     expectedBucket = new Bucket(serviceMockReturnsOptions, new BucketInfo.BuilderImpl(BUCKET_INFO));\n-    blobResults = ImmutableList.of(\n-        new Blob(serviceMockReturnsOptions,\n+    blobResults = ImmutableList.of(new Blob(serviceMockReturnsOptions,\n             new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n1\").build())),\n-        new Blob(serviceMockReturnsOptions,\n+    new Blob(serviceMockReturnsOptions,\n             new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n2\").build())),\n-        new Blob(serviceMockReturnsOptions,\n+    new Blob(serviceMockReturnsOptions,\n             new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n3\").build())));\n   }\n \n@@ -252,8 +251,7 @@ public class BucketTest {\n   @Test\n   public void testGet() throws Exception {\n     initializeExpectedBucket(5);\n-    Blob expectedBlob = new Blob(\n-        serviceMockReturnsOptions, new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n\").build()));\n+    Blob expectedBlob = new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n\").build()));\n     expect(storage.getOptions()).andReturn(mockOptions);\n     expect(storage.get(BlobId.of(expectedBucket.getName(), \"n\"), new Storage.BlobGetOption[0]))\n         .andReturn(expectedBlob);\n@@ -700,4 +698,4 @@ public class BucketTest {\n     assertEquals(DEFAULT_KMS_KEY_NAME, bucket.getDefaultKmsKeyName());\n     assertEquals(storage.getOptions(), bucket.getStorage().getOptions());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 567).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 344).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "221",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 29, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "238",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 31, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "239",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 29, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "240",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 27, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "252",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "253",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 29, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "255",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 31, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "256",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 29, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "257",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 27, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "295",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "300",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 307).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "303",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 300).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "314",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "317",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "324",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "328",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "343",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "345",
                    "severity": "warning",
                    "message": "'content' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "359",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "361",
                    "severity": "warning",
                    "message": "'content' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "400",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "406",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 383).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "409",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 384).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "421",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "424",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "431",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "436",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "439",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "452",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "454",
                    "severity": "warning",
                    "message": "'streamContent' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "469",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "471",
                    "severity": "warning",
                    "message": "'streamContent' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "491",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "533",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "543",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "596",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "597",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 515).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/569/BucketTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/569/BucketTest.java\nindex 94c8ad715a0..fabe9b9cd25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/569/BucketTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/569/BucketTest.java\n@@ -40,13 +40,11 @@ import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n import com.google.common.io.BaseEncoding;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n-\n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.security.Key;\n@@ -54,9 +52,9 @@ import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-\n import javax.crypto.spec.SecretKeySpec;\n \n+\n public class BucketTest {\n \n   private static final Acl ACL = Acl.of(User.ofAllAuthenticatedUsers(), Role.OWNER);\n@@ -69,10 +67,8 @@ public class BucketTest {\n   private static final String SELF_LINK = \"http://storage/b/n\";\n   private static final Long CREATE_TIME = System.currentTimeMillis();\n   private static final List<Cors> CORS = Collections.singletonList(Cors.newBuilder().build());\n-  private static final List<Acl> DEFAULT_ACL =\n-      Collections.singletonList(Acl.of(User.ofAllAuthenticatedUsers(), WRITER));\n-  private static final List<? extends DeleteRule> DELETE_RULES =\n-      Collections.singletonList(new AgeDeleteRule(5));\n+  private static final List<Acl> DEFAULT_ACL = Collections.singletonList(Acl.of(User.ofAllAuthenticatedUsers(), WRITER));\n+  private static final List<? extends DeleteRule> DELETE_RULES = Collections.singletonList(new AgeDeleteRule(5));\n   private static final String INDEX_PAGE = \"index.html\";\n   private static final String NOT_FOUND_PAGE = \"error.html\";\n   private static final String LOCATION = \"ASIA\";\n@@ -82,33 +78,11 @@ public class BucketTest {\n   private static final Map<String, String> BUCKET_LABELS = ImmutableMap.of(\"label1\", \"value1\");\n   private static final Boolean REQUESTER_PAYS = true;\n   private static final String USER_PROJECT = \"test-project\";\n-  private static final BucketInfo FULL_BUCKET_INFO = BucketInfo.newBuilder(\"b\")\n-      .setAcl(ACLS)\n-      .setEtag(ETAG)\n-      .setGeneratedId(GENERATED_ID)\n-      .setMetageneration(META_GENERATION)\n-      .setOwner(OWNER)\n-      .setSelfLink(SELF_LINK)\n-      .setCors(CORS)\n-      .setCreateTime(CREATE_TIME)\n-      .setDefaultAcl(DEFAULT_ACL)\n-      .setDeleteRules(DELETE_RULES)\n-      .setIndexPage(INDEX_PAGE)\n-      .setNotFoundPage(NOT_FOUND_PAGE)\n-      .setLocation(LOCATION)\n-      .setStorageClass(STORAGE_CLASS)\n-      .setVersioningEnabled(VERSIONING_ENABLED)\n-      .setLabels(BUCKET_LABELS)\n-      .setRequesterPays(REQUESTER_PAYS)\n-      .setDefaultKmsKeyName(DEFAULT_KMS_KEY_NAME)\n-      .build();\n-  private static final BucketInfo BUCKET_INFO =\n-      BucketInfo.newBuilder(\"b\").setMetageneration(42L).build();\n+  private static final BucketInfo FULL_BUCKET_INFO = BucketInfo.newBuilder(\"b\").setAcl(ACLS).setEtag(ETAG).setGeneratedId(GENERATED_ID).setMetageneration(META_GENERATION).setOwner(OWNER).setSelfLink(SELF_LINK).setCors(CORS).setCreateTime(CREATE_TIME).setDefaultAcl(DEFAULT_ACL).setDeleteRules(DELETE_RULES).setIndexPage(INDEX_PAGE).setNotFoundPage(NOT_FOUND_PAGE).setLocation(LOCATION).setStorageClass(STORAGE_CLASS).setVersioningEnabled(VERSIONING_ENABLED).setLabels(BUCKET_LABELS).setRequesterPays(REQUESTER_PAYS).setDefaultKmsKeyName(DEFAULT_KMS_KEY_NAME).build();\n+  private static final BucketInfo BUCKET_INFO = BucketInfo.newBuilder(\"b\").setMetageneration(42L).build();\n   private static final String CONTENT_TYPE = \"text/plain\";\n   private static final String BASE64_KEY = \"JVzfVl8NLD9FjedFuStegjRfES5ll5zc59CIXw572OA=\";\n-  private static final Key KEY =\n-      new SecretKeySpec(BaseEncoding.base64().decode(BASE64_KEY), \"AES256\");\n-\n+  private static final Key KEY = new SecretKeySpec(BaseEncoding.base64().decode(BASE64_KEY), \"AES256\");\n   private Storage storage;\n   private Storage serviceMockReturnsOptions = createMock(Storage.class);\n   private StorageOptions mockOptions = createMock(StorageOptions.class);\n@@ -133,13 +107,7 @@ public class BucketTest {\n     expect(serviceMockReturnsOptions.getOptions()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n     expectedBucket = new Bucket(serviceMockReturnsOptions, new BucketInfo.BuilderImpl(BUCKET_INFO));\n-    blobResults = ImmutableList.of(\n-        new Blob(serviceMockReturnsOptions,\n-            new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n1\").build())),\n-        new Blob(serviceMockReturnsOptions,\n-            new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n2\").build())),\n-        new Blob(serviceMockReturnsOptions,\n-            new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n3\").build())));\n+    blobResults = ImmutableList.of(new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n1\").build())), new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n2\").build())), new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n3\").build())));\n   }\n \n   private void initializeBucket() {\n@@ -172,8 +140,7 @@ public class BucketTest {\n   public void testReload() throws Exception {\n     initializeExpectedBucket(5);\n     BucketInfo updatedInfo = BUCKET_INFO.toBuilder().setNotFoundPage(\"p\").build();\n-    Bucket expectedUpdatedBucket =\n-        new Bucket(serviceMockReturnsOptions, new BucketInfo.BuilderImpl(updatedInfo));\n+    Bucket expectedUpdatedBucket = new Bucket(serviceMockReturnsOptions, new BucketInfo.BuilderImpl(updatedInfo));\n     expect(storage.getOptions()).andReturn(mockOptions);\n     expect(storage.get(updatedInfo.getName())).andReturn(expectedUpdatedBucket);\n     replay(storage);\n@@ -196,11 +163,9 @@ public class BucketTest {\n   public void testReloadWithOptions() throws Exception {\n     initializeExpectedBucket(5);\n     BucketInfo updatedInfo = BUCKET_INFO.toBuilder().setNotFoundPage(\"p\").build();\n-    Bucket expectedUpdatedBucket =\n-        new Bucket(serviceMockReturnsOptions, new BucketInfo.BuilderImpl(updatedInfo));\n+    Bucket expectedUpdatedBucket = new Bucket(serviceMockReturnsOptions, new BucketInfo.BuilderImpl(updatedInfo));\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.get(updatedInfo.getName(), Storage.BucketGetOption.metagenerationMatch(42L)))\n-        .andReturn(expectedUpdatedBucket);\n+    expect(storage.get(updatedInfo.getName(), Storage.BucketGetOption.metagenerationMatch(42L))).andReturn(expectedUpdatedBucket);\n     replay(storage);\n     initializeBucket();\n     Bucket updatedBucket = bucket.reload(Bucket.BucketSourceOption.metagenerationMatch());\n@@ -241,7 +206,8 @@ public class BucketTest {\n     Page<Blob> blobPage = bucket.list();\n     Iterator<Blob> blobInfoIterator = blobPage.getValues().iterator();\n     Iterator<Blob> blobIterator = blobPage.getValues().iterator();\n-    while (blobInfoIterator.hasNext() && blobIterator.hasNext()) {\n+    while (blobInfoIterator.hasNext()\n+      && blobIterator.hasNext()) {\n       assertEquals(blobInfoIterator.next(), blobIterator.next());\n     }\n     assertFalse(blobInfoIterator.hasNext());\n@@ -252,11 +218,9 @@ public class BucketTest {\n   @Test\n   public void testGet() throws Exception {\n     initializeExpectedBucket(5);\n-    Blob expectedBlob = new Blob(\n-        serviceMockReturnsOptions, new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n\").build()));\n+    Blob expectedBlob = new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(BlobInfo.newBuilder(\"b\", \"n\").build()));\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.get(BlobId.of(expectedBucket.getName(), \"n\"), new Storage.BlobGetOption[0]))\n-        .andReturn(expectedBlob);\n+    expect(storage.get(BlobId.of(expectedBucket.getName(), \"n\"), new Storage.BlobGetOption[0])).andReturn(expectedBlob);\n     replay(storage);\n     initializeBucket();\n     Blob blob = bucket.get(\"n\");\n@@ -267,12 +231,13 @@ public class BucketTest {\n   public void testGetAllArray() throws Exception {\n     initializeExpectedBucket(4);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    List<BlobId> blobIds = Lists.transform(blobResults, new Function<Blob, BlobId>() {\n-      @Override\n-      public BlobId apply(Blob blob) {\n-        return blob.getBlobId();\n-      }\n-    });\n+    List<BlobId> blobIds = Lists.transform(blobResults,\n+      new Function<Blob, BlobId>() {\n+                             @Override\n+                             public BlobId apply(Blob blob) {\n+                               return blob.getBlobId();\n+                             }\n+                           });\n     expect(storage.get(blobIds)).andReturn(blobResults);\n     replay(storage);\n     initializeBucket();\n@@ -283,12 +248,13 @@ public class BucketTest {\n   public void testGetAllIterable() throws Exception {\n     initializeExpectedBucket(4);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    List<BlobId> blobIds = Lists.transform(blobResults, new Function<Blob, BlobId>() {\n-      @Override\n-      public BlobId apply(Blob blob) {\n-        return blob.getBlobId();\n-      }\n-    });\n+    List<BlobId> blobIds = Lists.transform(blobResults,\n+      new Function<Blob, BlobId>() {\n+                             @Override\n+                             public BlobId apply(Blob blob) {\n+                               return blob.getBlobId();\n+                             }\n+                           });\n     expect(storage.get(blobIds)).andReturn(blobResults);\n     replay(storage);\n     initializeBucket();\n@@ -326,27 +292,15 @@ public class BucketTest {\n   @Test\n   public void testCreateWithOptions() throws Exception {\n     initializeExpectedBucket(5);\n-    BlobInfo info = BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 42L))\n-        .setContentType(CONTENT_TYPE)\n-        .setMetageneration(24L)\n-        .build();\n+    BlobInfo info = BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 42L)).setContentType(CONTENT_TYPE).setMetageneration(24L).build();\n     Blob expectedBlob = new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(info));\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     Storage.PredefinedAcl acl = Storage.PredefinedAcl.ALL_AUTHENTICATED_USERS;\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.create(info, content, Storage.BlobTargetOption.generationMatch(),\n-        Storage.BlobTargetOption.metagenerationMatch(),\n-        Storage.BlobTargetOption.predefinedAcl(acl),\n-        Storage.BlobTargetOption.encryptionKey(BASE64_KEY),\n-        Storage.BlobTargetOption.userProject(USER_PROJECT))).andReturn(expectedBlob);\n+    expect(storage.create(info, content, Storage.BlobTargetOption.generationMatch(), Storage.BlobTargetOption.metagenerationMatch(), Storage.BlobTargetOption.predefinedAcl(acl), Storage.BlobTargetOption.encryptionKey(BASE64_KEY), Storage.BlobTargetOption.userProject(USER_PROJECT))).andReturn(expectedBlob);\n     replay(storage);\n     initializeBucket();\n-    Blob blob = bucket.create(\"n\", content, CONTENT_TYPE,\n-        Bucket.BlobTargetOption.generationMatch(42L),\n-        Bucket.BlobTargetOption.metagenerationMatch(24L),\n-        Bucket.BlobTargetOption.predefinedAcl(acl),\n-        Bucket.BlobTargetOption.encryptionKey(BASE64_KEY),\n-        Bucket.BlobTargetOption.userProject(USER_PROJECT));\n+    Blob blob = bucket.create(\"n\", content, CONTENT_TYPE, Bucket.BlobTargetOption.generationMatch(42L), Bucket.BlobTargetOption.metagenerationMatch(24L), Bucket.BlobTargetOption.predefinedAcl(acl), Bucket.BlobTargetOption.encryptionKey(BASE64_KEY), Bucket.BlobTargetOption.userProject(USER_PROJECT));\n     assertEquals(expectedBlob, blob);\n   }\n \n@@ -357,25 +311,21 @@ public class BucketTest {\n     Blob expectedBlob = new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(info));\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.create(info, content, Storage.BlobTargetOption.encryptionKey(KEY)))\n-        .andReturn(expectedBlob);\n+    expect(storage.create(info, content, Storage.BlobTargetOption.encryptionKey(KEY))).andReturn(expectedBlob);\n     replay(storage);\n     initializeBucket();\n-    Blob blob =\n-        bucket.create(\"n\", content, CONTENT_TYPE, Bucket.BlobTargetOption.encryptionKey(KEY));\n+    Blob blob = bucket.create(\"n\", content, CONTENT_TYPE, Bucket.BlobTargetOption.encryptionKey(KEY));\n     assertEquals(expectedBlob, blob);\n   }\n \n   @Test\n   public void testCreateNotExists() throws Exception {\n     initializeExpectedBucket(5);\n-    BlobInfo info =\n-        BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 0L)).setContentType(CONTENT_TYPE).build();\n+    BlobInfo info = BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 0L)).setContentType(CONTENT_TYPE).build();\n     Blob expectedBlob = new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(info));\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.create(info, content, Storage.BlobTargetOption.generationMatch()))\n-        .andReturn(expectedBlob);\n+    expect(storage.create(info, content, Storage.BlobTargetOption.generationMatch())).andReturn(expectedBlob);\n     replay(storage);\n     initializeBucket();\n     Blob blob = bucket.create(\"n\", content, CONTENT_TYPE, Bucket.BlobTargetOption.doesNotExist());\n@@ -390,10 +340,12 @@ public class BucketTest {\n     initializeBucket();\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     thrown.expect(IllegalArgumentException.class);\n-    thrown.expectMessage(\n-        \"Only one option of generationMatch, doesNotExist or generationNotMatch can be provided\");\n-    bucket.create(\"n\", content, CONTENT_TYPE, Bucket.BlobTargetOption.generationMatch(42L),\n-        Bucket.BlobTargetOption.generationNotMatch(24L));\n+    thrown.expectMessage(\"Only one option of generationMatch, doesNotExist or generationNotMatch can be provided\");\n+    bucket.create(\"n\",\n+      content,\n+        CONTENT_TYPE,\n+          Bucket.BlobTargetOption.generationMatch(42L),\n+            Bucket.BlobTargetOption.generationNotMatch(24L));\n   }\n \n   @Test\n@@ -404,10 +356,12 @@ public class BucketTest {\n     initializeBucket();\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     thrown.expect(IllegalArgumentException.class);\n-    thrown.expectMessage(\n-        \"metagenerationMatch and metagenerationNotMatch options can not be both provided\");\n-    bucket.create(\"n\", content, CONTENT_TYPE, Bucket.BlobTargetOption.metagenerationMatch(42L),\n-        Bucket.BlobTargetOption.metagenerationNotMatch(24L));\n+    thrown.expectMessage(\"metagenerationMatch and metagenerationNotMatch options can not be both provided\");\n+    bucket.create(\"n\",\n+      content,\n+        CONTENT_TYPE,\n+          Bucket.BlobTargetOption.metagenerationMatch(42L),\n+            Bucket.BlobTargetOption.metagenerationNotMatch(24L));\n   }\n \n   @Test\n@@ -443,31 +397,16 @@ public class BucketTest {\n   @Test\n   public void testCreateFromStreamWithOptions() throws Exception {\n     initializeExpectedBucket(5);\n-    BlobInfo info = BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 42L))\n-        .setContentType(CONTENT_TYPE)\n-        .setMetageneration(24L)\n-        .setCrc32c(\"crc\")\n-        .setMd5(\"md5\")\n-        .build();\n+    BlobInfo info = BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 42L)).setContentType(CONTENT_TYPE).setMetageneration(24L).setCrc32c(\"crc\").setMd5(\"md5\").build();\n     Blob expectedBlob = new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(info));\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     Storage.PredefinedAcl acl = Storage.PredefinedAcl.ALL_AUTHENTICATED_USERS;\n     InputStream streamContent = new ByteArrayInputStream(content);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.create(info, streamContent, Storage.BlobWriteOption.generationMatch(),\n-        Storage.BlobWriteOption.metagenerationMatch(), Storage.BlobWriteOption.predefinedAcl(acl),\n-        Storage.BlobWriteOption.crc32cMatch(), Storage.BlobWriteOption.md5Match(),\n-        Storage.BlobWriteOption.encryptionKey(BASE64_KEY),\n-        Storage.BlobWriteOption.userProject(USER_PROJECT)))\n-        .andReturn(expectedBlob);\n+    expect(storage.create(info, streamContent, Storage.BlobWriteOption.generationMatch(), Storage.BlobWriteOption.metagenerationMatch(), Storage.BlobWriteOption.predefinedAcl(acl), Storage.BlobWriteOption.crc32cMatch(), Storage.BlobWriteOption.md5Match(), Storage.BlobWriteOption.encryptionKey(BASE64_KEY), Storage.BlobWriteOption.userProject(USER_PROJECT))).andReturn(expectedBlob);\n     replay(storage);\n     initializeBucket();\n-    Blob blob = bucket.create(\"n\", streamContent, CONTENT_TYPE,\n-        Bucket.BlobWriteOption.generationMatch(42L),\n-        Bucket.BlobWriteOption.metagenerationMatch(24L), Bucket.BlobWriteOption.predefinedAcl(acl),\n-        Bucket.BlobWriteOption.crc32cMatch(\"crc\"), Bucket.BlobWriteOption.md5Match(\"md5\"),\n-        Bucket.BlobWriteOption.encryptionKey(BASE64_KEY),\n-        Bucket.BlobWriteOption.userProject(USER_PROJECT));\n+    Blob blob = bucket.create(\"n\", streamContent, CONTENT_TYPE, Bucket.BlobWriteOption.generationMatch(42L), Bucket.BlobWriteOption.metagenerationMatch(24L), Bucket.BlobWriteOption.predefinedAcl(acl), Bucket.BlobWriteOption.crc32cMatch(\"crc\"), Bucket.BlobWriteOption.md5Match(\"md5\"), Bucket.BlobWriteOption.encryptionKey(BASE64_KEY), Bucket.BlobWriteOption.userProject(USER_PROJECT));\n     assertEquals(expectedBlob, blob);\n   }\n \n@@ -479,30 +418,25 @@ public class BucketTest {\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     InputStream streamContent = new ByteArrayInputStream(content);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.create(info, streamContent, Storage.BlobWriteOption.encryptionKey(KEY)))\n-        .andReturn(expectedBlob);\n+    expect(storage.create(info, streamContent, Storage.BlobWriteOption.encryptionKey(KEY))).andReturn(expectedBlob);\n     replay(storage);\n     initializeBucket();\n-    Blob blob =\n-        bucket.create(\"n\", streamContent, CONTENT_TYPE, Bucket.BlobWriteOption.encryptionKey(KEY));\n+    Blob blob = bucket.create(\"n\", streamContent, CONTENT_TYPE, Bucket.BlobWriteOption.encryptionKey(KEY));\n     assertEquals(expectedBlob, blob);\n   }\n \n   @Test\n   public void testCreateFromStreamNotExists() throws Exception {\n     initializeExpectedBucket(5);\n-    BlobInfo info =\n-        BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 0L)).setContentType(CONTENT_TYPE).build();\n+    BlobInfo info = BlobInfo.newBuilder(BlobId.of(\"b\", \"n\", 0L)).setContentType(CONTENT_TYPE).build();\n     Blob expectedBlob = new Blob(serviceMockReturnsOptions, new BlobInfo.BuilderImpl(info));\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     InputStream streamContent = new ByteArrayInputStream(content);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.create(info, streamContent, Storage.BlobWriteOption.generationMatch()))\n-        .andReturn(expectedBlob);\n+    expect(storage.create(info, streamContent, Storage.BlobWriteOption.generationMatch())).andReturn(expectedBlob);\n     replay(storage);\n     initializeBucket();\n-    Blob blob =\n-        bucket.create(\"n\", streamContent, CONTENT_TYPE, Bucket.BlobWriteOption.doesNotExist());\n+    Blob blob = bucket.create(\"n\", streamContent, CONTENT_TYPE, Bucket.BlobWriteOption.doesNotExist());\n     assertEquals(expectedBlob, blob);\n   }\n \n@@ -515,10 +449,12 @@ public class BucketTest {\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     InputStream streamContent = new ByteArrayInputStream(content);\n     thrown.expect(IllegalArgumentException.class);\n-    thrown.expectMessage(\n-        \"Only one option of generationMatch, doesNotExist or generationNotMatch can be provided\");\n-    bucket.create(\"n\", streamContent, CONTENT_TYPE, Bucket.BlobWriteOption.generationMatch(42L),\n-        Bucket.BlobWriteOption.generationNotMatch(24L));\n+    thrown.expectMessage(\"Only one option of generationMatch, doesNotExist or generationNotMatch can be provided\");\n+    bucket.create(\"n\",\n+      streamContent,\n+        CONTENT_TYPE,\n+          Bucket.BlobWriteOption.generationMatch(42L),\n+            Bucket.BlobWriteOption.generationNotMatch(24L));\n   }\n \n   @Test\n@@ -530,10 +466,12 @@ public class BucketTest {\n     byte[] content = {0xD, 0xE, 0xA, 0xD};\n     InputStream streamContent = new ByteArrayInputStream(content);\n     thrown.expect(IllegalArgumentException.class);\n-    thrown.expectMessage(\n-        \"metagenerationMatch and metagenerationNotMatch options can not be both provided\");\n-    bucket.create(\"n\", streamContent, CONTENT_TYPE, Bucket.BlobWriteOption.metagenerationMatch(42L),\n-        Bucket.BlobWriteOption.metagenerationNotMatch(24L));\n+    thrown.expectMessage(\"metagenerationMatch and metagenerationNotMatch options can not be both provided\");\n+    bucket.create(\"n\",\n+      streamContent,\n+        CONTENT_TYPE,\n+          Bucket.BlobWriteOption.metagenerationMatch(42L),\n+            Bucket.BlobWriteOption.metagenerationNotMatch(24L));\n   }\n \n   @Test\n@@ -550,8 +488,7 @@ public class BucketTest {\n   public void testDeleteAcl() throws Exception {\n     initializeExpectedBucket(4);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.deleteAcl(BUCKET_INFO.getName(),\n-        User.ofAllAuthenticatedUsers())).andReturn(true);\n+    expect(storage.deleteAcl(BUCKET_INFO.getName(), User.ofAllAuthenticatedUsers())).andReturn(true);\n     replay(storage);\n     initializeBucket();\n     assertTrue(bucket.deleteAcl(User.ofAllAuthenticatedUsers()));\n@@ -593,8 +530,7 @@ public class BucketTest {\n   public void testGetDefaultAcl() throws Exception {\n     initializeExpectedBucket(4);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.getDefaultAcl(BUCKET_INFO.getName(), User.ofAllAuthenticatedUsers()))\n-        .andReturn(ACL);\n+    expect(storage.getDefaultAcl(BUCKET_INFO.getName(), User.ofAllAuthenticatedUsers())).andReturn(ACL);\n     replay(storage);\n     initializeBucket();\n     assertEquals(ACL, bucket.getDefaultAcl(User.ofAllAuthenticatedUsers()));\n@@ -604,8 +540,7 @@ public class BucketTest {\n   public void testDeleteDefaultAcl() throws Exception {\n     initializeExpectedBucket(4);\n     expect(storage.getOptions()).andReturn(mockOptions);\n-    expect(storage.deleteDefaultAcl(BUCKET_INFO.getName(), User.ofAllAuthenticatedUsers()))\n-        .andReturn(true);\n+    expect(storage.deleteDefaultAcl(BUCKET_INFO.getName(), User.ofAllAuthenticatedUsers())).andReturn(true);\n     replay(storage);\n     initializeBucket();\n     assertTrue(bucket.deleteDefaultAcl(User.ofAllAuthenticatedUsers()));\n@@ -658,27 +593,8 @@ public class BucketTest {\n     initializeExpectedBucket(4);\n     expect(storage.getOptions()).andReturn(mockOptions).times(4);\n     replay(storage);\n-    Bucket.Builder builder =\n-        new Bucket.Builder(new Bucket(storage, new BucketInfo.BuilderImpl(BUCKET_INFO)));\n-    Bucket bucket = builder.setAcl(ACLS)\n-        .setEtag(ETAG)\n-        .setGeneratedId(GENERATED_ID)\n-        .setMetageneration(META_GENERATION)\n-        .setOwner(OWNER)\n-        .setSelfLink(SELF_LINK)\n-        .setCors(CORS)\n-        .setCreateTime(CREATE_TIME)\n-        .setDefaultAcl(DEFAULT_ACL)\n-        .setDeleteRules(DELETE_RULES)\n-        .setIndexPage(INDEX_PAGE)\n-        .setNotFoundPage(NOT_FOUND_PAGE)\n-        .setLocation(LOCATION)\n-        .setStorageClass(STORAGE_CLASS)\n-        .setVersioningEnabled(VERSIONING_ENABLED)\n-        .setLabels(BUCKET_LABELS)\n-        .setRequesterPays(REQUESTER_PAYS)\n-        .setDefaultKmsKeyName(DEFAULT_KMS_KEY_NAME)\n-        .build();\n+    Bucket.Builder builder = new Bucket.Builder(new Bucket(storage, new BucketInfo.BuilderImpl(BUCKET_INFO)));\n+    Bucket bucket = builder.setAcl(ACLS).setEtag(ETAG).setGeneratedId(GENERATED_ID).setMetageneration(META_GENERATION).setOwner(OWNER).setSelfLink(SELF_LINK).setCors(CORS).setCreateTime(CREATE_TIME).setDefaultAcl(DEFAULT_ACL).setDeleteRules(DELETE_RULES).setIndexPage(INDEX_PAGE).setNotFoundPage(NOT_FOUND_PAGE).setLocation(LOCATION).setStorageClass(STORAGE_CLASS).setVersioningEnabled(VERSIONING_ENABLED).setLabels(BUCKET_LABELS).setRequesterPays(REQUESTER_PAYS).setDefaultKmsKeyName(DEFAULT_KMS_KEY_NAME).build();\n     assertEquals(\"b\", bucket.getName());\n     assertEquals(ACLS, bucket.getAcl());\n     assertEquals(ETAG, bucket.getEtag());\n@@ -700,4 +616,4 @@ public class BucketTest {\n     assertEquals(DEFAULT_KMS_KEY_NAME, bucket.getDefaultKmsKeyName());\n     assertEquals(storage.getOptions(), bucket.getStorage().getOptions());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 169
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}