{
    "project_name": "neo4j-neo4j",
    "error_id": "1296",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1296/IndexUpdateStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1296/IndexUpdateStorage.java\nindex 0bd6a1aac9b..5868f0172ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1296/IndexUpdateStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1296/IndexUpdateStorage.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.io.IOException;\n@@ -38,17 +39,17 @@ import static org.neo4j.kernel.impl.index.schema.NativeIndexUpdater.initializeKe\n  * Buffer {@link IndexEntryUpdate} by writing them out to a file. Can be read back in insert order through {@link #reader()}.\n  */\n public class IndexUpdateStorage<KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue>\n-        extends SimpleEntryStorage<IndexEntryUpdate<?>,IndexUpdateCursor<KEY,VALUE>>\n+  extends SimpleEntryStorage<IndexEntryUpdate<?>, IndexUpdateCursor<KEY, VALUE>>\n {\n-    private final Layout<KEY,VALUE> layout;\n+    private final Layout<KEY, VALUE> layout;\n     private final KEY key1;\n     private final KEY key2;\n     private final VALUE value;\n \n-    IndexUpdateStorage( FileSystemAbstraction fs, Path file, ByteBufferFactory.Allocator byteBufferFactory, int blockSize, Layout<KEY,VALUE> layout,\n-            MemoryTracker memoryTracker )\n+    IndexUpdateStorage(FileSystemAbstraction fs, Path file, ByteBufferFactory.Allocator byteBufferFactory, int blockSize, Layout<KEY, VALUE> layout,\n+                       MemoryTracker memoryTracker)\n     {\n-        super( fs, file, byteBufferFactory, blockSize, memoryTracker );\n+        super(fs, file, byteBufferFactory, blockSize, memoryTracker);\n         this.layout = layout;\n         this.key1 = layout.newKey();\n         this.key2 = layout.newKey();\n@@ -56,39 +57,39 @@ public class IndexUpdateStorage<KEY extends NativeIndexKey<KEY>, VALUE extends N\n     }\n \n     @Override\n-    public void add( IndexEntryUpdate<?> update, PageCursor pageCursor ) throws IOException\n+    public void add(IndexEntryUpdate<?> update, PageCursor pageCursor) throws IOException\n     {\n         ValueIndexEntryUpdate<?> valueUpdate = (ValueIndexEntryUpdate<?>) update;\n         int entrySize = TYPE_SIZE;\n         UpdateMode updateMode = valueUpdate.updateMode();\n-        switch ( updateMode )\n+        switch (updateMode)\n         {\n-        case ADDED:\n-            initializeKeyAndValueFromUpdate( key1, value, valueUpdate.getEntityId(), valueUpdate.values() );\n-            entrySize += BlockEntry.entrySize( layout, key1, value );\n-            break;\n-        case REMOVED:\n-            initializeKeyFromUpdate( key1, valueUpdate.getEntityId(), valueUpdate.values() );\n-            entrySize += BlockEntry.keySize( layout, key1 );\n-            break;\n-        case CHANGED:\n-            initializeKeyFromUpdate( key1, valueUpdate.getEntityId(), valueUpdate.beforeValues() );\n-            initializeKeyAndValueFromUpdate( key2, value, valueUpdate.getEntityId(), valueUpdate.values() );\n-            entrySize += BlockEntry.keySize( layout, key1 ) + BlockEntry.entrySize( layout, key2, value );\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"Unknown update mode \" + updateMode );\n+            case ADDED:\n+                initializeKeyAndValueFromUpdate(key1, value, valueUpdate.getEntityId(), valueUpdate.values());\n+                entrySize += BlockEntry.entrySize(layout, key1, value);\n+                break;\n+            case REMOVED:\n+                initializeKeyFromUpdate(key1, valueUpdate.getEntityId(), valueUpdate.values());\n+                entrySize += BlockEntry.keySize(layout, key1);\n+                break;\n+            case CHANGED:\n+                initializeKeyFromUpdate(key1, valueUpdate.getEntityId(), valueUpdate.beforeValues());\n+                initializeKeyAndValueFromUpdate(key2, value, valueUpdate.getEntityId(), valueUpdate.values());\n+                entrySize += BlockEntry.keySize(layout, key1) + BlockEntry.entrySize(layout, key2, value);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown update mode \" + updateMode);\n         }\n \n-        prepareWrite( entrySize );\n+        prepareWrite(entrySize);\n \n-        pageCursor.putByte( (byte) updateMode.ordinal() );\n-        IndexUpdateEntry.write( pageCursor, layout, updateMode, key1, key2, value );\n+        pageCursor.putByte((byte) updateMode.ordinal());\n+        IndexUpdateEntry.write(pageCursor, layout, updateMode, key1, key2, value);\n     }\n \n     @Override\n-    public IndexUpdateCursor<KEY,VALUE> reader( PageCursor pageCursor )\n+    public IndexUpdateCursor<KEY, VALUE> reader(PageCursor pageCursor)\n     {\n-        return new IndexUpdateCursor<>( pageCursor, layout );\n+        return new IndexUpdateCursor<>(pageCursor, layout);\n     }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}