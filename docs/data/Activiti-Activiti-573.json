{
    "project_name": "Activiti-Activiti",
    "error_id": "573",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.scripting;\n\nimport static java.util.Collections.singletonList;\nimport static java.util.Collections.unmodifiableList;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/573/JuelScriptEngineFactory.java\nindex 3a53eba1bcb..476c286678a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/573/JuelScriptEngineFactory.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.scripting;\n \n import static java.util.Collections.singletonList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/573/JuelScriptEngineFactory.java\nindex 3a53eba1bcb..8440674049c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/573/JuelScriptEngineFactory.java\n@@ -28,109 +28,108 @@ import javax.script.ScriptEngineFactory;\n \n /**\n  * Factory to create {@link JuelScriptEngine}s.\n- *\n  */\n public class JuelScriptEngineFactory implements ScriptEngineFactory {\n \n-  private static List<String> names;\n-  private static List<String> extensions;\n-  private static List<String> mimeTypes;\n-\n-  static {\n-    names = singletonList(\"juel\");\n-    extensions = names;\n-    mimeTypes = unmodifiableList(new ArrayList<String>(0));\n-  }\n-\n-  public String getEngineName() {\n-    return \"juel\";\n-  }\n-\n-  public String getEngineVersion() {\n-    return \"1.0\";\n-  }\n-\n-  public List<String> getExtensions() {\n-    return extensions;\n-  }\n-\n-  public String getLanguageName() {\n-    return \"JSP 2.1 EL\";\n-  }\n-\n-  public String getLanguageVersion() {\n-    return \"2.1\";\n-  }\n-\n-  public String getMethodCallSyntax(String obj, String method, String... arguments) {\n-    throw new UnsupportedOperationException(\"Method getMethodCallSyntax is not supported\");\n-  }\n-\n-  public List<String> getMimeTypes() {\n-    return mimeTypes;\n-  }\n-\n-  public List<String> getNames() {\n-    return names;\n-  }\n-\n-  public String getOutputStatement(String toDisplay) {\n-    // We will use out:print function to output statements\n-    StringBuilder stringBuffer = new StringBuilder();\n-    stringBuffer.append(\"out:print(\\\"\");\n-\n-    int length = toDisplay.length();\n-    for (int i = 0; i < length; i++) {\n-      char c = toDisplay.charAt(i);\n-      switch (c) {\n-      case '\"':\n-        stringBuffer.append(\"\\\\\\\"\");\n-        break;\n-      case '\\\\':\n-        stringBuffer.append(\"\\\\\\\\\");\n-        break;\n-      default:\n-        stringBuffer.append(c);\n-        break;\n-      }\n+    private static List<String> names;\n+    private static List<String> extensions;\n+    private static List<String> mimeTypes;\n+\n+    static {\n+        names = singletonList(\"juel\");\n+        extensions = names;\n+        mimeTypes = unmodifiableList(new ArrayList<String>(0));\n+    }\n+\n+    public String getEngineName() {\n+        return \"juel\";\n+    }\n+\n+    public String getEngineVersion() {\n+        return \"1.0\";\n     }\n-    stringBuffer.append(\"\\\")\");\n-    return stringBuffer.toString();\n-  }\n-\n-  public String getParameter(String key) {\n-    if (key.equals(ScriptEngine.NAME)) {\n-      return getLanguageName();\n-    } else if (key.equals(ScriptEngine.ENGINE)) {\n-      return getEngineName();\n-    } else if (key.equals(ScriptEngine.ENGINE_VERSION)) {\n-      return getEngineVersion();\n-    } else if (key.equals(ScriptEngine.LANGUAGE)) {\n-      return getLanguageName();\n-    } else if (key.equals(ScriptEngine.LANGUAGE_VERSION)) {\n-      return getLanguageVersion();\n-    } else if (key.equals(\"THREADING\")) {\n-      return \"MULTITHREADED\";\n-    } else {\n-      return null;\n+\n+    public List<String> getExtensions() {\n+        return extensions;\n+    }\n+\n+    public String getLanguageName() {\n+        return \"JSP 2.1 EL\";\n     }\n-  }\n-\n-  public String getProgram(String... statements) {\n-    // Each statement is wrapped in '${}' to comply with EL\n-    StringBuilder buf = new StringBuilder();\n-    if (statements.length != 0) {\n-      for (int i = 0; i < statements.length; i++) {\n-        buf.append(\"${\");\n-        buf.append(statements[i]);\n-        buf.append(\"} \");\n-      }\n+\n+    public String getLanguageVersion() {\n+        return \"2.1\";\n+    }\n+\n+    public String getMethodCallSyntax(String obj, String method, String... arguments) {\n+        throw new UnsupportedOperationException(\"Method getMethodCallSyntax is not supported\");\n     }\n-    return buf.toString();\n-  }\n \n-  public ScriptEngine getScriptEngine() {\n-    return new JuelScriptEngine(this);\n-  }\n+    public List<String> getMimeTypes() {\n+        return mimeTypes;\n+    }\n+\n+    public List<String> getNames() {\n+        return names;\n+    }\n+\n+    public String getOutputStatement(String toDisplay) {\n+        // We will use out:print function to output statements\n+        StringBuilder stringBuffer = new StringBuilder();\n+        stringBuffer.append(\"out:print(\\\"\");\n+\n+        int length = toDisplay.length();\n+        for (int i = 0; i < length; i++) {\n+            char c = toDisplay.charAt(i);\n+            switch (c) {\n+                case '\"':\n+                    stringBuffer.append(\"\\\\\\\"\");\n+                    break;\n+                case '\\\\':\n+                    stringBuffer.append(\"\\\\\\\\\");\n+                    break;\n+                default:\n+                    stringBuffer.append(c);\n+                    break;\n+            }\n+        }\n+        stringBuffer.append(\"\\\")\");\n+        return stringBuffer.toString();\n+    }\n+\n+    public String getParameter(String key) {\n+        if (key.equals(ScriptEngine.NAME)) {\n+            return getLanguageName();\n+        } else if (key.equals(ScriptEngine.ENGINE)) {\n+            return getEngineName();\n+        } else if (key.equals(ScriptEngine.ENGINE_VERSION)) {\n+            return getEngineVersion();\n+        } else if (key.equals(ScriptEngine.LANGUAGE)) {\n+            return getLanguageName();\n+        } else if (key.equals(ScriptEngine.LANGUAGE_VERSION)) {\n+            return getLanguageVersion();\n+        } else if (key.equals(\"THREADING\")) {\n+            return \"MULTITHREADED\";\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public String getProgram(String... statements) {\n+        // Each statement is wrapped in '${}' to comply with EL\n+        StringBuilder buf = new StringBuilder();\n+        if (statements.length != 0) {\n+            for (int i = 0; i < statements.length; i++) {\n+                buf.append(\"${\");\n+                buf.append(statements[i]);\n+                buf.append(\"} \");\n+            }\n+        }\n+        return buf.toString();\n+    }\n+\n+    public ScriptEngine getScriptEngine() {\n+        return new JuelScriptEngine(this);\n+    }\n \n }\n",
            "diff_size": 160
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/573/JuelScriptEngineFactory.java\nindex 3a53eba1bcb..7305b3f57bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/573/JuelScriptEngineFactory.java\n@@ -18,11 +18,10 @@\n package org.activiti.engine.impl.scripting;\n \n import static java.util.Collections.singletonList;\n-import static java.util.Collections.unmodifiableList;\n \n+import static java.util.Collections.unmodifiableList;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.script.ScriptEngine;\n import javax.script.ScriptEngineFactory;\n \n@@ -30,10 +29,14 @@ import javax.script.ScriptEngineFactory;\n  * Factory to create {@link JuelScriptEngine}s.\n  *\n  */\n+\n+\n public class JuelScriptEngineFactory implements ScriptEngineFactory {\n \n   private static List<String> names;\n+\n   private static List<String> extensions;\n+\n   private static List<String> mimeTypes;\n \n   static {\n@@ -78,7 +81,6 @@ public class JuelScriptEngineFactory implements ScriptEngineFactory {\n     // We will use out:print function to output statements\n     StringBuilder stringBuffer = new StringBuilder();\n     stringBuffer.append(\"out:print(\\\"\");\n-\n     int length = toDisplay.length();\n     for (int i = 0; i < length; i++) {\n       char c = toDisplay.charAt(i);\n@@ -105,26 +107,26 @@ public class JuelScriptEngineFactory implements ScriptEngineFactory {\n       return getEngineName();\n     } else if (key.equals(ScriptEngine.ENGINE_VERSION)) {\n       return getEngineVersion();\n-    } else if (key.equals(ScriptEngine.LANGUAGE)) {\n-      return getLanguageName();\n-    } else if (key.equals(ScriptEngine.LANGUAGE_VERSION)) {\n-      return getLanguageVersion();\n-    } else if (key.equals(\"THREADING\")) {\n-      return \"MULTITHREADED\";\n-    } else {\n-      return null;\n-    }\n+           } else if (key.equals(ScriptEngine.LANGUAGE)) {\n+             return getLanguageName();\n+           } else if (key.equals(ScriptEngine.LANGUAGE_VERSION)) {\n+             return getLanguageVersion();\n+                  } else if (key.equals(\"THREADING\")) {\n+                    return \"MULTITHREADED\";\n+                  } else {\n+                    return null;\n+                  }\n   }\n \n   public String getProgram(String... statements) {\n     // Each statement is wrapped in '${}' to comply with EL\n     StringBuilder buf = new StringBuilder();\n     if (statements.length != 0) {\n-      for (int i = 0; i < statements.length; i++) {\n-        buf.append(\"${\");\n-        buf.append(statements[i]);\n-        buf.append(\"} \");\n-      }\n+        for (int i = 0; i < statements.length; i++) {\n+          buf.append(\"${\");\n+          buf.append(statements[i]);\n+          buf.append(\"} \");\n+        }\n     }\n     return buf.toString();\n   }\n@@ -132,5 +134,4 @@ public class JuelScriptEngineFactory implements ScriptEngineFactory {\n   public ScriptEngine getScriptEngine() {\n     return new JuelScriptEngine(this);\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/573/JuelScriptEngineFactory.java\nindex 3a53eba1bcb..476c286678a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/573/JuelScriptEngineFactory.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.scripting;\n \n import static java.util.Collections.singletonList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/573/JuelScriptEngineFactory.java\nindex 3a53eba1bcb..476c286678a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/573/JuelScriptEngineFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/573/JuelScriptEngineFactory.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.scripting;\n \n import static java.util.Collections.singletonList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}