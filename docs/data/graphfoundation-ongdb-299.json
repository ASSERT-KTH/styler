{
    "project_name": "graphfoundation-ongdb",
    "error_id": "299",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "98",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/299/SupportedProtocolCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/299/SupportedProtocolCreator.java\nindex 609ce62f082..96c236b5631 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/299/SupportedProtocolCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/299/SupportedProtocolCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core;\n \n import java.util.Collections;\n@@ -42,80 +43,78 @@ import static org.neo4j.causalclustering.protocol.Protocol.ModifierProtocolCateg\n \n public class SupportedProtocolCreator\n {\n-    private final Config config;\n-    private final Log log;\n+  private final Config config;\n+  private final Log log;\n \n-    public SupportedProtocolCreator( Config config, LogProvider logProvider )\n-    {\n-        this.config = config;\n-        this.log = logProvider.getLog( getClass() );\n-    }\n+  public SupportedProtocolCreator(Config config, LogProvider logProvider)\n+  {\n+    this.config = config;\n+    this.log = logProvider.getLog(getClass());\n+  }\n \n-    public ApplicationSupportedProtocols createSupportedCatchupProtocol()\n-    {\n-        return getApplicationSupportedProtocols( config.get( CausalClusteringSettings.catchup_implementations ), CATCHUP );\n-    }\n+  public ApplicationSupportedProtocols createSupportedCatchupProtocol()\n+  {\n+    return getApplicationSupportedProtocols(config.get(CausalClusteringSettings.catchup_implementations), CATCHUP);\n+  }\n \n-    public ApplicationSupportedProtocols createSupportedRaftProtocol()\n-    {\n-        return getApplicationSupportedProtocols( config.get( CausalClusteringSettings.raft_implementations ), RAFT );\n-    }\n+  public ApplicationSupportedProtocols createSupportedRaftProtocol()\n+  {\n+    return getApplicationSupportedProtocols(config.get(CausalClusteringSettings.raft_implementations), RAFT);\n+  }\n \n-    private ApplicationSupportedProtocols getApplicationSupportedProtocols( List<Integer> configVersions, Protocol.ApplicationProtocolCategory category )\n+  private ApplicationSupportedProtocols getApplicationSupportedProtocols(List<Integer> configVersions, Protocol.ApplicationProtocolCategory category)\n+  {\n+    if (configVersions.isEmpty())\n     {\n-        if ( configVersions.isEmpty() )\n-        {\n-            return new ApplicationSupportedProtocols( category, Collections.emptyList() );\n-        }\n-        else\n-        {\n-            List<Integer> knownVersions = protocolsForConfig( category, configVersions, version -> Protocol.ApplicationProtocols.find( category, version ) );\n-            if ( knownVersions.isEmpty() )\n-            {\n-                throw new IllegalArgumentException( format( \"None of configured %s implementations %s are known\", category.canonicalName(), configVersions ) );\n-            }\n-            else\n-            {\n-                return new ApplicationSupportedProtocols( category, knownVersions );\n-            }\n-        }\n+      return new ApplicationSupportedProtocols(category, Collections.emptyList());\n+    } else\n+    {\n+      List<Integer> knownVersions = protocolsForConfig(category, configVersions, version -> Protocol.ApplicationProtocols.find(category, version));\n+      if (knownVersions.isEmpty())\n+      {\n+        throw new IllegalArgumentException(format(\"None of configured %s implementations %s are known\", category.canonicalName(), configVersions));\n+      } else\n+      {\n+        return new ApplicationSupportedProtocols(category, knownVersions);\n+      }\n     }\n+  }\n \n-    public List<ModifierSupportedProtocols> createSupportedModifierProtocols()\n-    {\n-        ModifierSupportedProtocols supportedCompression = compressionProtocolVersions();\n+  public List<ModifierSupportedProtocols> createSupportedModifierProtocols()\n+  {\n+    ModifierSupportedProtocols supportedCompression = compressionProtocolVersions();\n \n-        return Stream.of( supportedCompression )\n-                .filter( supportedProtocols -> !supportedProtocols.versions().isEmpty() )\n-                .collect( Collectors.toList() );\n-    }\n+    return Stream.of(supportedCompression)\n+        .filter(supportedProtocols -> !supportedProtocols.versions().isEmpty())\n+        .collect(Collectors.toList());\n+  }\n \n-    private ModifierSupportedProtocols compressionProtocolVersions()\n-    {\n-        List<String> implementations = protocolsForConfig( COMPRESSION, config.get( CausalClusteringSettings.compression_implementations ),\n-                implementation -> Protocol.ModifierProtocols.find( COMPRESSION, implementation ) );\n+  private ModifierSupportedProtocols compressionProtocolVersions()\n+  {\n+    List<String> implementations = protocolsForConfig(COMPRESSION, config.get(CausalClusteringSettings.compression_implementations),\n+        implementation -> Protocol.ModifierProtocols.find(COMPRESSION, implementation));\n \n-        return new ModifierSupportedProtocols( COMPRESSION, implementations );\n-    }\n+    return new ModifierSupportedProtocols(COMPRESSION, implementations);\n+  }\n \n-    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> List<IMPL> protocolsForConfig( Protocol.Category<T> category, List<IMPL> implementations,\n-            Function<IMPL,Optional<T>> finder )\n-    {\n-        return implementations.stream()\n-                .map( impl -> Pair.of( impl, finder.apply( impl ) ) )\n-                .peek( protocolWithImplementation -> logUnknownProtocol( category, protocolWithImplementation ) )\n-                .map( Pair::other )\n-                .flatMap( Streams::ofOptional )\n-                .map( Protocol::implementation )\n-                .collect( Collectors.toList() );\n-    }\n+  private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> List<IMPL> protocolsForConfig(Protocol.Category<T> category, List<IMPL> implementations,\n+                                                                                                  Function<IMPL, Optional<T>> finder)\n+  {\n+    return implementations.stream()\n+        .map(impl -> Pair.of(impl, finder.apply(impl)))\n+        .peek(protocolWithImplementation -> logUnknownProtocol(category, protocolWithImplementation))\n+        .map(Pair::other)\n+        .flatMap(Streams::ofOptional)\n+        .map(Protocol::implementation)\n+        .collect(Collectors.toList());\n+  }\n \n-    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> void logUnknownProtocol( Protocol.Category<T> category,\n-            Pair<IMPL,Optional<T>> protocolWithImplementation )\n+  private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> void logUnknownProtocol(Protocol.Category<T> category,\n+                                                                                            Pair<IMPL, Optional<T>> protocolWithImplementation)\n+  {\n+    if (!protocolWithImplementation.other().isPresent())\n     {\n-        if ( !protocolWithImplementation.other().isPresent() )\n-        {\n-            log.warn( \"Configured %s protocol implementation %s unknown. Ignoring.\", category, protocolWithImplementation.first() );\n-        }\n+      log.warn(\"Configured %s protocol implementation %s unknown. Ignoring.\", category, protocolWithImplementation.first());\n     }\n+  }\n }\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 303).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/299/SupportedProtocolCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/299/SupportedProtocolCreator.java\nindex 609ce62f082..12d88058ce6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/299/SupportedProtocolCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/299/SupportedProtocolCreator.java\n@@ -84,38 +84,26 @@ public class SupportedProtocolCreator\n     public List<ModifierSupportedProtocols> createSupportedModifierProtocols()\n     {\n         ModifierSupportedProtocols supportedCompression = compressionProtocolVersions();\n-\n-        return Stream.of( supportedCompression )\n-                .filter( supportedProtocols -> !supportedProtocols.versions().isEmpty() )\n-                .collect( Collectors.toList() );\n+return Stream.of( supportedCompression ).filter( supportedProtocols -> !supportedProtocols.versions().isEmpty() ).collect( Collectors.toList() );\n     }\n \n     private ModifierSupportedProtocols compressionProtocolVersions()\n     {\n         List<String> implementations = protocolsForConfig( COMPRESSION, config.get( CausalClusteringSettings.compression_implementations ),\n                 implementation -> Protocol.ModifierProtocols.find( COMPRESSION, implementation ) );\n-\n-        return new ModifierSupportedProtocols( COMPRESSION, implementations );\n+return new ModifierSupportedProtocols( COMPRESSION, implementations );\n     }\n \n-    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> List<IMPL> protocolsForConfig( Protocol.Category<T> category, List<IMPL> implementations,\n-            Function<IMPL,Optional<T>> finder )\n+    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> List<IMPL> protocolsForConfig( Protocol.Category<T> category, List<IMPL> implementations, Function<IMPL,Optional<T>> finder )\n     {\n-        return implementations.stream()\n-                .map( impl -> Pair.of( impl, finder.apply( impl ) ) )\n-                .peek( protocolWithImplementation -> logUnknownProtocol( category, protocolWithImplementation ) )\n-                .map( Pair::other )\n-                .flatMap( Streams::ofOptional )\n-                .map( Protocol::implementation )\n-                .collect( Collectors.toList() );\n+        return implementations.stream().map( impl -> Pair.of( impl, finder.apply( impl ) ) ).peek( protocolWithImplementation -> logUnknownProtocol( category, protocolWithImplementation ) ).map( Pair::other ).flatMap( Streams::ofOptional ).map( Protocol::implementation ).collect( Collectors.toList() );\n     }\n \n-    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> void logUnknownProtocol( Protocol.Category<T> category,\n-            Pair<IMPL,Optional<T>> protocolWithImplementation )\n+    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> void logUnknownProtocol( Protocol.Category<T> category, Pair<IMPL,Optional<T>> protocolWithImplementation )\n     {\n         if ( !protocolWithImplementation.other().isPresent() )\n         {\n             log.warn( \"Configured %s protocol implementation %s unknown. Ignoring.\", category, protocolWithImplementation.first() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "97",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 303).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/299/SupportedProtocolCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/299/SupportedProtocolCreator.java\nindex 609ce62f082..b567e66ce6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/299/SupportedProtocolCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/299/SupportedProtocolCreator.java\n@@ -25,7 +25,6 @@ import java.util.Optional;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-\n import org.neo4j.causalclustering.protocol.Protocol;\n import org.neo4j.causalclustering.protocol.handshake.ApplicationSupportedProtocols;\n import org.neo4j.causalclustering.protocol.handshake.ModifierSupportedProtocols;\n@@ -34,10 +33,12 @@ import org.neo4j.kernel.configuration.Config;\n import org.neo4j.logging.Log;\n import org.neo4j.logging.LogProvider;\n import org.neo4j.stream.Streams;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.causalclustering.protocol.Protocol.ApplicationProtocolCategory.CATCHUP;\n+\n import static org.neo4j.causalclustering.protocol.Protocol.ApplicationProtocolCategory.RAFT;\n+\n import static org.neo4j.causalclustering.protocol.Protocol.ModifierProtocolCategory.COMPRESSION;\n \n public class SupportedProtocolCreator\n@@ -84,38 +85,25 @@ public class SupportedProtocolCreator\n     public List<ModifierSupportedProtocols> createSupportedModifierProtocols()\n     {\n         ModifierSupportedProtocols supportedCompression = compressionProtocolVersions();\n-\n-        return Stream.of( supportedCompression )\n-                .filter( supportedProtocols -> !supportedProtocols.versions().isEmpty() )\n-                .collect( Collectors.toList() );\n+        return Stream.of( supportedCompression ).filter( supportedProtocols -> ! supportedProtocols.versions().isEmpty() ).collect( Collectors.toList() );\n     }\n \n     private ModifierSupportedProtocols compressionProtocolVersions()\n     {\n-        List<String> implementations = protocolsForConfig( COMPRESSION, config.get( CausalClusteringSettings.compression_implementations ),\n-                implementation -> Protocol.ModifierProtocols.find( COMPRESSION, implementation ) );\n-\n+        List<String> implementations = protocolsForConfig( COMPRESSION, config.get( CausalClusteringSettings.compression_implementations ), implementation -> Protocol.ModifierProtocols.find( COMPRESSION, implementation ) );\n         return new ModifierSupportedProtocols( COMPRESSION, implementations );\n     }\n \n-    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> List<IMPL> protocolsForConfig( Protocol.Category<T> category, List<IMPL> implementations,\n-            Function<IMPL,Optional<T>> finder )\n+    private< IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> List<IMPL> protocolsForConfig( Protocol.Category<T> category, List<IMPL> implementations, Function<IMPL,Optional<T>> finder )\n     {\n-        return implementations.stream()\n-                .map( impl -> Pair.of( impl, finder.apply( impl ) ) )\n-                .peek( protocolWithImplementation -> logUnknownProtocol( category, protocolWithImplementation ) )\n-                .map( Pair::other )\n-                .flatMap( Streams::ofOptional )\n-                .map( Protocol::implementation )\n-                .collect( Collectors.toList() );\n+        return implementations.stream().map( impl -> Pair.of( impl, finder.apply( impl ) ) ).peek( protocolWithImplementation -> logUnknownProtocol( category, protocolWithImplementation ) ).map( Pair::other ).flatMap( Streams::ofOptional ).map( Protocol::implementation ).collect( Collectors.toList() );\n     }\n \n-    private <IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> void logUnknownProtocol( Protocol.Category<T> category,\n-            Pair<IMPL,Optional<T>> protocolWithImplementation )\n+    private< IMPL extends Comparable<IMPL>, T extends Protocol<IMPL>> void logUnknownProtocol( Protocol.Category<T> category, Pair<IMPL,Optional<T>> protocolWithImplementation )\n     {\n-        if ( !protocolWithImplementation.other().isPresent() )\n+        if ( ! protocolWithImplementation.other().isPresent() )\n         {\n             log.warn( \"Configured %s protocol implementation %s unknown. Ignoring.\", category, protocolWithImplementation.first() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}