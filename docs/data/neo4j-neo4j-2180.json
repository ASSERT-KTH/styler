{
    "project_name": "neo4j-neo4j",
    "error_id": "2180",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2180/NodeBasedMemoryLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2180/NodeBasedMemoryLimiter.java\nindex 2da9cf06e3f..c14b9b6b07a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2180/NodeBasedMemoryLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2180/NodeBasedMemoryLimiter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checker;\n \n import org.neo4j.consistency.checking.cache.CacheSlots;\n@@ -36,15 +37,15 @@ public class NodeBasedMemoryLimiter extends PrefetchingIterator<LongRange>\n {\n     public interface Factory\n     {\n-        NodeBasedMemoryLimiter create( long pageCacheMemory, long highNodeId );\n+        NodeBasedMemoryLimiter create(long pageCacheMemory, long highNodeId);\n     }\n \n-    public static final Factory DEFAULT = ( pageCacheMemory, highNodeId ) ->\n+    public static final Factory DEFAULT = (pageCacheMemory, highNodeId) ->\n     {\n         long jvmMemory = Runtime.getRuntime().maxMemory();\n         long machineMemory = OsBeanUtil.getTotalPhysicalMemory();\n         long perNodeMemory = CacheSlots.CACHE_LINE_SIZE_BYTES;\n-        return new NodeBasedMemoryLimiter( pageCacheMemory, jvmMemory, machineMemory, perNodeMemory, highNodeId );\n+        return new NodeBasedMemoryLimiter(pageCacheMemory, jvmMemory, machineMemory, perNodeMemory, highNodeId);\n     };\n \n     // Original parameters\n@@ -63,7 +64,7 @@ public class NodeBasedMemoryLimiter extends PrefetchingIterator<LongRange>\n     private long currentRangeStart;\n     private long currentRangeEnd;\n \n-    public NodeBasedMemoryLimiter( long pageCacheMemory, long jvmMemory, long machineMemory, long requiredMemoryPerNode, long highNodeId )\n+    public NodeBasedMemoryLimiter(long pageCacheMemory, long jvmMemory, long machineMemory, long requiredMemoryPerNode, long highNodeId)\n     {\n         // Store the original parameters so that they can be printed for reference later\n         this.pageCacheMemory = pageCacheMemory;\n@@ -75,24 +76,24 @@ public class NodeBasedMemoryLimiter extends PrefetchingIterator<LongRange>\n         this.effectiveJvmMemory = jvmMemory == Long.MAX_VALUE ? Runtime.getRuntime().totalMemory() : jvmMemory;\n         this.occupiedMemory = pageCacheMemory + effectiveJvmMemory;\n         this.effectiveMachineMemory = machineMemory == VALUE_UNAVAILABLE\n-                                      // When the OS can't provide a number, we assume at least twice page-cache size, and at least 2GiB\n-                                      ? max( pageCacheMemory * 2, gibiBytes( 2 ) )\n-                                      : machineMemory;\n-        this.effectiveMachineMemory = max( effectiveMachineMemory, occupiedMemory );\n+          // When the OS can't provide a number, we assume at least twice page-cache size, and at least 2GiB\n+          ? max(pageCacheMemory * 2, gibiBytes(2))\n+          : machineMemory;\n+        this.effectiveMachineMemory = max(effectiveMachineMemory, occupiedMemory);\n         long availableMemory = effectiveMachineMemory - occupiedMemory;\n \n         assert availableMemory > 0;\n         assert requiredMemoryPerNode > 0;\n \n         this.highNodeId = highNodeId;\n-        this.nodesPerRange = max( 1, min( highNodeId, availableMemory / requiredMemoryPerNode ) );\n+        this.nodesPerRange = max(1, min(highNodeId, availableMemory / requiredMemoryPerNode));\n         this.currentRangeStart = 0;\n-        this.currentRangeEnd = min( this.highNodeId, nodesPerRange );\n+        this.currentRangeEnd = min(this.highNodeId, nodesPerRange);\n     }\n \n     int numberOfRanges()\n     {\n-        return toIntExact( (long) ((((double) highNodeId - 1) / nodesPerRange) + 1) );\n+        return toIntExact((long) ((((double) highNodeId - 1) / nodesPerRange) + 1));\n     }\n \n     long rangeSize()\n@@ -103,46 +104,46 @@ public class NodeBasedMemoryLimiter extends PrefetchingIterator<LongRange>\n     @Override\n     protected LongRange fetchNextOrNull()\n     {\n-        if ( currentRangeStart >= highNodeId )\n+        if (currentRangeStart >= highNodeId)\n         {\n             return null;\n         }\n \n-        LongRange range = LongRange.range( currentRangeStart, currentRangeEnd );\n+        LongRange range = LongRange.range(currentRangeStart, currentRangeEnd);\n         currentRangeStart = currentRangeEnd;\n-        currentRangeEnd = min( highNodeId, currentRangeEnd + nodesPerRange );\n+        currentRangeEnd = min(highNodeId, currentRangeEnd + nodesPerRange);\n         return range;\n     }\n \n     @Override\n     public String toString()\n     {\n-        StringBuilder builder = new StringBuilder().append( getClass().getSimpleName() ).append( ':' );\n-        builder.append( format( \"%n  pageCacheMemory:%s\", bytesToString( pageCacheMemory ) ) );\n-        builder.append( format( \"%n  jvmMemory:%s\", bytesToString( jvmMemory ) ) );\n-        builder.append( format( \"%n  machineMemory:%s\", bytesToString( machineMemory ) ) );\n-        builder.append( format( \"%n  perNodeMemory:%s\", bytesToString( requiredMemoryPerNode ) ) );\n-        builder.append( format( \"%n  nodeHighId:%s\", highNodeId ) );\n-        if ( effectiveJvmMemory != jvmMemory )\n+        StringBuilder builder = new StringBuilder().append(getClass().getSimpleName()).append(':');\n+        builder.append(format(\"%n  pageCacheMemory:%s\", bytesToString(pageCacheMemory)));\n+        builder.append(format(\"%n  jvmMemory:%s\", bytesToString(jvmMemory)));\n+        builder.append(format(\"%n  machineMemory:%s\", bytesToString(machineMemory)));\n+        builder.append(format(\"%n  perNodeMemory:%s\", bytesToString(requiredMemoryPerNode)));\n+        builder.append(format(\"%n  nodeHighId:%s\", highNodeId));\n+        if (effectiveJvmMemory != jvmMemory)\n         {\n-            builder.append( format( \"%n  effective jvmMemory:%s\", bytesToString( effectiveJvmMemory ) ) );\n+            builder.append(format(\"%n  effective jvmMemory:%s\", bytesToString(effectiveJvmMemory)));\n         }\n-        if ( effectiveMachineMemory != machineMemory )\n+        if (effectiveMachineMemory != machineMemory)\n         {\n-            builder.append( format( \"%n  effective machineMemory:%s\", bytesToString( effectiveMachineMemory ) ) );\n+            builder.append(format(\"%n  effective machineMemory:%s\", bytesToString(effectiveMachineMemory)));\n         }\n-        builder.append( format( \"%n  occupiedMemory:%s\", bytesToString( occupiedMemory ) ) );\n-        builder.append( format( \"%n  ==> numberOfRanges:%d\", numberOfRanges() ) );\n-        builder.append( format( \"%n  ==> numberOfNodesPerRange:%d\", nodesPerRange ) );\n+        builder.append(format(\"%n  occupiedMemory:%s\", bytesToString(occupiedMemory)));\n+        builder.append(format(\"%n  ==> numberOfRanges:%d\", numberOfRanges()));\n+        builder.append(format(\"%n  ==> numberOfNodesPerRange:%d\", nodesPerRange));\n         return builder.toString();\n     }\n \n-    boolean isFirst( LongRange range )\n+    boolean isFirst(LongRange range)\n     {\n         return range.from() == 0;\n     }\n \n-    boolean isLast( LongRange range )\n+    boolean isLast(LongRange range)\n     {\n         return range.to() == highNodeId;\n     }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}