{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3124",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3124/PropertyRecordFormatV3_2_0.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3124/PropertyRecordFormatV3_2_0.java\nindex 32b1ae49ade..bd1dfd6c2ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3124/PropertyRecordFormatV3_2_0.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3124/PropertyRecordFormatV3_2_0.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.highlimit.v320;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -65,155 +66,152 @@ import static org.neo4j.kernel.impl.store.format.highlimit.v320.BaseHighLimitRec\n  */\n class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyRecord>\n {\n-    static final int RECORD_SIZE = 48;\n-    private static final int PROPERTY_BLOCKS_PADDING = 3;\n-    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n-                                                Short.BYTES   /* prev prop modifiers */ +\n-                                                Integer.BYTES /* prev prop */ +\n-                                                Short.BYTES /* next prop modifiers */ +\n-                                                Integer.BYTES /* next prop */ +\n-                                                PROPERTY_BLOCKS_PADDING /* padding */;\n-\n-    private static final long HIGH_DWORD_LOWER_WORD_MASK = 0xFFFF_0000_0000L;\n-    private static final long HIGH_DWORD_LOWER_WORD_CHECK_MASK = 0xFFFF_0000_0000_0000L;\n-\n-    protected PropertyRecordFormatV3_2_0()\n-    {\n-        super( fixedRecordSize( RECORD_SIZE ), 0, IN_USE_BIT, HighLimitFormatSettingsV3_2_0.PROPERTY_MAXIMUM_ID_BITS );\n-    }\n-\n-    @Override\n-    public PropertyRecord newRecord()\n-    {\n-        return new PropertyRecord( -1 );\n-    }\n-\n-    @Override\n-    public void read( PropertyRecord record, PageCursor cursor, RecordLoad mode, int recordSize )\n+  static final int RECORD_SIZE = 48;\n+  private static final int PROPERTY_BLOCKS_PADDING = 3;\n+  static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n+      Short.BYTES   /* prev prop modifiers */ +\n+      Integer.BYTES /* prev prop */ +\n+      Short.BYTES /* next prop modifiers */ +\n+      Integer.BYTES /* next prop */ +\n+      PROPERTY_BLOCKS_PADDING /* padding */;\n+\n+  private static final long HIGH_DWORD_LOWER_WORD_MASK = 0xFFFF_0000_0000L;\n+  private static final long HIGH_DWORD_LOWER_WORD_CHECK_MASK = 0xFFFF_0000_0000_0000L;\n+\n+  protected PropertyRecordFormatV3_2_0()\n+  {\n+    super(fixedRecordSize(RECORD_SIZE), 0, IN_USE_BIT, HighLimitFormatSettingsV3_2_0.PROPERTY_MAXIMUM_ID_BITS);\n+  }\n+\n+  @Override\n+  public PropertyRecord newRecord()\n+  {\n+    return new PropertyRecord(-1);\n+  }\n+\n+  @Override\n+  public void read(PropertyRecord record, PageCursor cursor, RecordLoad mode, int recordSize)\n+  {\n+    int offset = cursor.getOffset();\n+    byte headerByte = cursor.getByte();\n+    boolean inUse = isInUse(headerByte);\n+    boolean useFixedReferences = has(headerByte, HEADER_BIT_FIXED_REFERENCE);\n+    if (mode.shouldLoad(inUse))\n     {\n-        int offset = cursor.getOffset();\n-        byte headerByte = cursor.getByte();\n-        boolean inUse = isInUse( headerByte );\n-        boolean useFixedReferences = has( headerByte, HEADER_BIT_FIXED_REFERENCE );\n-        if ( mode.shouldLoad( inUse ) )\n-        {\n-            int blockCount = headerByte >>> 4;\n-            long recordId = record.getId();\n-\n-            if ( useFixedReferences )\n-            {\n-                // read record in a fixed reference format\n-                readFixedReferencesRecord( record, cursor );\n-            }\n-            else\n-            {\n-                record.initialize( inUse,\n-                        toAbsolute( Reference.decode( cursor ), recordId ),\n-                        toAbsolute( Reference.decode( cursor ), recordId ) );\n-            }\n-            record.setUseFixedReferences( useFixedReferences );\n-            if ( (blockCount > record.getBlockCapacity()) | (RECORD_SIZE - (cursor.getOffset() - offset) < blockCount * Long.BYTES) )\n-            {\n-                cursor.setCursorException( \"PropertyRecord claims to contain more blocks than can fit in a record\" );\n-                return;\n-            }\n-            while ( blockCount-- > 0 )\n-            {\n-                record.addLoadedBlock( cursor.getLong() );\n-            }\n-        }\n+      int blockCount = headerByte >>> 4;\n+      long recordId = record.getId();\n+\n+      if (useFixedReferences)\n+      {\n+        // read record in a fixed reference format\n+        readFixedReferencesRecord(record, cursor);\n+      } else\n+      {\n+        record.initialize(inUse,\n+            toAbsolute(Reference.decode(cursor), recordId),\n+            toAbsolute(Reference.decode(cursor), recordId));\n+      }\n+      record.setUseFixedReferences(useFixedReferences);\n+      if ((blockCount > record.getBlockCapacity()) | (RECORD_SIZE - (cursor.getOffset() - offset) < blockCount * Long.BYTES))\n+      {\n+        cursor.setCursorException(\"PropertyRecord claims to contain more blocks than can fit in a record\");\n+        return;\n+      }\n+      while (blockCount-- > 0)\n+      {\n+        record.addLoadedBlock(cursor.getLong());\n+      }\n     }\n+  }\n \n-    @Override\n-    public void write( PropertyRecord record, PageCursor cursor, int recordSize )\n+  @Override\n+  public void write(PropertyRecord record, PageCursor cursor, int recordSize)\n+  {\n+    if (record.inUse())\n     {\n-        if ( record.inUse() )\n-        {\n-            byte headerByte = (byte) (IN_USE_BIT | numberOfBlocks( record ) << 4);\n-            boolean canUseFixedReferences = canUseFixedReferences( record, recordSize );\n-            record.setUseFixedReferences( canUseFixedReferences );\n-            headerByte = set( headerByte, HEADER_BIT_FIXED_REFERENCE, canUseFixedReferences );\n-            cursor.putByte( headerByte );\n-\n-            long recordId = record.getId();\n-\n-            if ( canUseFixedReferences )\n-            {\n-                // write record in fixed reference format\n-                writeFixedReferencesRecord( record, cursor );\n-            }\n-            else\n-            {\n-                Reference.encode( toRelative( record.getPrevProp(), recordId ), cursor );\n-                Reference.encode( toRelative( record.getNextProp(), recordId ), cursor );\n-            }\n-            for ( PropertyBlock block : record )\n-            {\n-                for ( long propertyBlock : block.getValueBlocks() )\n-                {\n-                    cursor.putLong( propertyBlock );\n-                }\n-            }\n-        }\n-        else\n+      byte headerByte = (byte) (IN_USE_BIT | numberOfBlocks(record) << 4);\n+      boolean canUseFixedReferences = canUseFixedReferences(record, recordSize);\n+      record.setUseFixedReferences(canUseFixedReferences);\n+      headerByte = set(headerByte, HEADER_BIT_FIXED_REFERENCE, canUseFixedReferences);\n+      cursor.putByte(headerByte);\n+\n+      long recordId = record.getId();\n+\n+      if (canUseFixedReferences)\n+      {\n+        // write record in fixed reference format\n+        writeFixedReferencesRecord(record, cursor);\n+      } else\n+      {\n+        Reference.encode(toRelative(record.getPrevProp(), recordId), cursor);\n+        Reference.encode(toRelative(record.getNextProp(), recordId), cursor);\n+      }\n+      for (PropertyBlock block : record)\n+      {\n+        for (long propertyBlock : block.getValueBlocks())\n         {\n-            markAsUnused( cursor );\n+          cursor.putLong(propertyBlock);\n         }\n-    }\n-\n-    private int numberOfBlocks( PropertyRecord record )\n-    {\n-        int count = 0;\n-        for ( PropertyBlock block : record )\n-        {\n-            count += block.getValueBlocks().length;\n-        }\n-        return count;\n-    }\n-\n-    @Override\n-    public long getNextRecordReference( PropertyRecord record )\n-    {\n-        return record.getNextProp();\n-    }\n-\n-    private boolean canUseFixedReferences( PropertyRecord record, int recordSize )\n-    {\n-        return isRecordBigEnoughForFixedReferences( recordSize ) &&\n-                (record.getNextProp() == NULL || (record.getNextProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0) &&\n-                (record.getPrevProp() == NULL || (record.getPrevProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0);\n-    }\n-\n-    private boolean isRecordBigEnoughForFixedReferences( int recordSize )\n-    {\n-        return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n-    }\n-\n-    private void readFixedReferencesRecord( PropertyRecord record, PageCursor cursor )\n+      }\n+    } else\n     {\n-        // since fixed reference limits property reference to 34 bits, 6 bytes is ample.\n-        long prevMod = cursor.getShort() & 0xFFFFL;\n-        long prevProp = cursor.getInt() & 0xFFFFFFFFL;\n-        long nextMod = cursor.getShort() & 0xFFFFL;\n-        long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n-        record.initialize( true,\n-                BaseRecordFormat.longFromIntAndMod( prevProp, prevMod << 32 ),\n-                BaseRecordFormat.longFromIntAndMod( nextProp, nextMod << 32 ) );\n-        // skip padding bytes\n-        cursor.setOffset( cursor.getOffset() + PROPERTY_BLOCKS_PADDING );\n+      markAsUnused(cursor);\n     }\n+  }\n \n-    private void writeFixedReferencesRecord( PropertyRecord record, PageCursor cursor )\n+  private int numberOfBlocks(PropertyRecord record)\n+  {\n+    int count = 0;\n+    for (PropertyBlock block : record)\n     {\n-        // Set up the record header\n-        short prevModifier = record.getPrevProp() == NULL ? 0 : (short) ((record.getPrevProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32);\n-        short nextModifier = record.getNextProp() == NULL ? 0 : (short) ((record.getNextProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32);\n-        cursor.putShort( prevModifier );\n-        cursor.putInt( (int) record.getPrevProp() );\n-        cursor.putShort( nextModifier );\n-        cursor.putInt( (int) record.getNextProp() );\n-        // skip bytes before start reading property blocks to have\n-        // aligned access and fixed position of property blocks\n-        cursor.setOffset( cursor.getOffset() + PROPERTY_BLOCKS_PADDING );\n+      count += block.getValueBlocks().length;\n     }\n+    return count;\n+  }\n+\n+  @Override\n+  public long getNextRecordReference(PropertyRecord record)\n+  {\n+    return record.getNextProp();\n+  }\n+\n+  private boolean canUseFixedReferences(PropertyRecord record, int recordSize)\n+  {\n+    return isRecordBigEnoughForFixedReferences(recordSize) &&\n+        (record.getNextProp() == NULL || (record.getNextProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0) &&\n+        (record.getPrevProp() == NULL || (record.getPrevProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0);\n+  }\n+\n+  private boolean isRecordBigEnoughForFixedReferences(int recordSize)\n+  {\n+    return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n+  }\n+\n+  private void readFixedReferencesRecord(PropertyRecord record, PageCursor cursor)\n+  {\n+    // since fixed reference limits property reference to 34 bits, 6 bytes is ample.\n+    long prevMod = cursor.getShort() & 0xFFFFL;\n+    long prevProp = cursor.getInt() & 0xFFFFFFFFL;\n+    long nextMod = cursor.getShort() & 0xFFFFL;\n+    long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n+    record.initialize(true,\n+        BaseRecordFormat.longFromIntAndMod(prevProp, prevMod << 32),\n+        BaseRecordFormat.longFromIntAndMod(nextProp, nextMod << 32));\n+    // skip padding bytes\n+    cursor.setOffset(cursor.getOffset() + PROPERTY_BLOCKS_PADDING);\n+  }\n+\n+  private void writeFixedReferencesRecord(PropertyRecord record, PageCursor cursor)\n+  {\n+    // Set up the record header\n+    short prevModifier = record.getPrevProp() == NULL ? 0 : (short) ((record.getPrevProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32);\n+    short nextModifier = record.getNextProp() == NULL ? 0 : (short) ((record.getNextProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32);\n+    cursor.putShort(prevModifier);\n+    cursor.putInt((int) record.getPrevProp());\n+    cursor.putShort(nextModifier);\n+    cursor.putInt((int) record.getNextProp());\n+    // skip bytes before start reading property blocks to have\n+    // aligned access and fixed position of property blocks\n+    cursor.setOffset(cursor.getOffset() + PROPERTY_BLOCKS_PADDING);\n+  }\n }\n",
            "diff_size": 202
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "30",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3124/PropertyRecordFormatV3_2_0.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3124/PropertyRecordFormatV3_2_0.java\nindex 32b1ae49ade..f6c03378466 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3124/PropertyRecordFormatV3_2_0.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3124/PropertyRecordFormatV3_2_0.java\n@@ -67,14 +67,9 @@ class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyR\n {\n     static final int RECORD_SIZE = 48;\n     private static final int PROPERTY_BLOCKS_PADDING = 3;\n-    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n-                                                Short.BYTES   /* prev prop modifiers */ +\n-                                                Integer.BYTES /* prev prop */ +\n-                                                Short.BYTES /* next prop modifiers */ +\n-                                                Integer.BYTES /* next prop */ +\n-                                                PROPERTY_BLOCKS_PADDING /* padding */;\n-\n-    private static final long HIGH_DWORD_LOWER_WORD_MASK = 0xFFFF_0000_0000L;\n+    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE + Short.BYTES/* prev prop modifiers */ + Integer.BYTES /* prev prop */ + Short.BYTES /* next prop modifiers */ + Integer.BYTES /* next prop */ + PROPERTY_BLOCKS_PADDING /* padding */;\n+\n+private static final long HIGH_DWORD_LOWER_WORD_MASK = 0xFFFF_0000_0000L;\n     private static final long HIGH_DWORD_LOWER_WORD_CHECK_MASK = 0xFFFF_0000_0000_0000L;\n \n     protected PropertyRecordFormatV3_2_0()\n@@ -99,8 +94,7 @@ class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyR\n         {\n             int blockCount = headerByte >>> 4;\n             long recordId = record.getId();\n-\n-            if ( useFixedReferences )\n+if ( useFixedReferences )\n             {\n                 // read record in a fixed reference format\n                 readFixedReferencesRecord( record, cursor );\n@@ -108,11 +102,10 @@ class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyR\n             else\n             {\n                 record.initialize( inUse,\n-                        toAbsolute( Reference.decode( cursor ), recordId ),\n-                        toAbsolute( Reference.decode( cursor ), recordId ) );\n+                        toAbsolute( Reference.decode( cursor ), recordId ), toAbsolute( Reference.decode( cursor ), recordId ) );\n             }\n             record.setUseFixedReferences( useFixedReferences );\n-            if ( (blockCount > record.getBlockCapacity()) | (RECORD_SIZE - (cursor.getOffset() - offset) < blockCount * Long.BYTES) )\n+            if ( ( blockCount> record.getBlockCapacity()) | ( RECORD_SIZE - (cursor.getOffset() - offset) < blockCount * Long.BYTES) )\n             {\n                 cursor.setCursorException( \"PropertyRecord claims to contain more blocks than can fit in a record\" );\n                 return;\n@@ -129,15 +122,14 @@ class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyR\n     {\n         if ( record.inUse() )\n         {\n-            byte headerByte = (byte) (IN_USE_BIT | numberOfBlocks( record ) << 4);\n+            byte headerByte = (byte) ( IN_USE_BIT | numberOfBlocks( record ) << 4 );\n             boolean canUseFixedReferences = canUseFixedReferences( record, recordSize );\n             record.setUseFixedReferences( canUseFixedReferences );\n             headerByte = set( headerByte, HEADER_BIT_FIXED_REFERENCE, canUseFixedReferences );\n             cursor.putByte( headerByte );\n \n             long recordId = record.getId();\n-\n-            if ( canUseFixedReferences )\n+if ( canUseFixedReferences )\n             {\n                 // write record in fixed reference format\n                 writeFixedReferencesRecord( record, cursor );\n@@ -168,7 +160,8 @@ class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyR\n         {\n             count += block.getValueBlocks().length;\n         }\n-        return count;\n+\n+return count;\n     }\n \n     @Override\n@@ -179,9 +172,8 @@ class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyR\n \n     private boolean canUseFixedReferences( PropertyRecord record, int recordSize )\n     {\n-        return isRecordBigEnoughForFixedReferences( recordSize ) &&\n-                (record.getNextProp() == NULL || (record.getNextProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0) &&\n-                (record.getPrevProp() == NULL || (record.getPrevProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0);\n+        return isRecordBigEnoughForFixedReferences( recordSize ) && (record.getNextProp() == NULL || (record.getNextProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0) &&\n+                (record.getPrevProp() == NULL || (record.getPrevProp() & HIGH_DWORD_LOWER_WORD_CHECK_MASK) == 0 );\n     }\n \n     private boolean isRecordBigEnoughForFixedReferences( int recordSize )\n@@ -197,23 +189,22 @@ class PropertyRecordFormatV3_2_0 extends BaseOneByteHeaderRecordFormat<PropertyR\n         long nextMod = cursor.getShort() & 0xFFFFL;\n         long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n         record.initialize( true,\n-                BaseRecordFormat.longFromIntAndMod( prevProp, prevMod << 32 ),\n-                BaseRecordFormat.longFromIntAndMod( nextProp, nextMod << 32 ) );\n-        // skip padding bytes\n+                BaseRecordFormat.longFromIntAndMod( prevProp, prevMod << 32 ), BaseRecordFormat.longFromIntAndMod( nextProp, nextMod << 32 ) );\n+    // skip padding bytes\n         cursor.setOffset( cursor.getOffset() + PROPERTY_BLOCKS_PADDING );\n     }\n \n     private void writeFixedReferencesRecord( PropertyRecord record, PageCursor cursor )\n     {\n         // Set up the record header\n-        short prevModifier = record.getPrevProp() == NULL ? 0 : (short) ((record.getPrevProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32);\n-        short nextModifier = record.getNextProp() == NULL ? 0 : (short) ((record.getNextProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32);\n+        short prevModifier = record.getPrevProp() == NULL ? 0 : (short) ((record.getPrevProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32 );\n+        short nextModifier = record.getNextProp() == NULL ? 0 : (short) ((record.getNextProp() & HIGH_DWORD_LOWER_WORD_MASK) >> 32 );\n         cursor.putShort( prevModifier );\n-        cursor.putInt( (int) record.getPrevProp() );\n+        cursor.putInt( ( int) record.getPrevProp() );\n         cursor.putShort( nextModifier );\n-        cursor.putInt( (int) record.getNextProp() );\n+        cursor.putInt( ( int) record.getNextProp() );\n         // skip bytes before start reading property blocks to have\n         // aligned access and fixed position of property blocks\n         cursor.setOffset( cursor.getOffset() + PROPERTY_BLOCKS_PADDING );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}