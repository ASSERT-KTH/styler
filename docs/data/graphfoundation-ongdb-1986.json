{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1986",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "178",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "240",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "309",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "345",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1986/Util.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1986/Util.java\nindex f1ba6b7ef24..ce7bfd829b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1986/Util.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1986/Util.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.HashMap;\n@@ -35,401 +36,381 @@ import org.neo4j.graphdb.Relationship;\n  * constructing them from sets of predecessors or counting them. These functions\n  * are lifted out here because they can be used by algorithms for too different\n  * problems.\n+ *\n  * @author Patrik Larsson\n  */\n public class Util\n {\n-    private Util()\n+  private Util()\n+  {\n+  }\n+\n+  /**\n+   * Constructs a path to a given node, for a given set of predecessors\n+   *\n+   * @param node         The start node\n+   * @param predecessors The predecessors set\n+   * @param includeNode  Boolean which determines if the start node should be included\n+   *                     in the paths\n+   * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+   *                     reversed\n+   * @return A path as a list of nodes.\n+   */\n+  public static List<Node> constructSinglePathToNodeAsNodes(Node node,\n+                                                            Map<Node, List<Relationship>> predecessors, boolean includeNode,\n+                                                            boolean backwards)\n+  {\n+    List<PropertyContainer> singlePathToNode = constructSinglePathToNode(\n+        node, predecessors, includeNode, backwards);\n+    Iterator<PropertyContainer> iterator = singlePathToNode.iterator();\n+    // When going backwards and not including the node the first element is\n+    // a relationship. Thus skip it.\n+    if (backwards && !includeNode && iterator.hasNext())\n     {\n+      iterator.next();\n     }\n-\n-    /**\n-     * Constructs a path to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n-     * @return A path as a list of nodes.\n-     */\n-    public static List<Node> constructSinglePathToNodeAsNodes( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n-        boolean backwards )\n+    LinkedList<Node> path = new LinkedList<>();\n+    while (iterator.hasNext())\n     {\n-        List<PropertyContainer> singlePathToNode = constructSinglePathToNode(\n-            node, predecessors, includeNode, backwards );\n-        Iterator<PropertyContainer> iterator = singlePathToNode.iterator();\n-        // When going backwards and not including the node the first element is\n-        // a relationship. Thus skip it.\n-        if ( backwards && !includeNode && iterator.hasNext() )\n-        {\n-            iterator.next();\n-        }\n-        LinkedList<Node> path = new LinkedList<>();\n-        while ( iterator.hasNext() )\n-        {\n-            path.addLast( (Node) iterator.next() );\n-            if ( iterator.hasNext() )\n-            {\n-                iterator.next();\n-            }\n-        }\n-        return path;\n+      path.addLast((Node) iterator.next());\n+      if (iterator.hasNext())\n+      {\n+        iterator.next();\n+      }\n     }\n+    return path;\n+  }\n \n-    /**\n-     * Constructs a path to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n-     * @return A path as a list of relationships.\n-     */\n-    public static List<Relationship> constructSinglePathToNodeAsRelationships(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+  /**\n+   * Constructs a path to a given node, for a given set of predecessors\n+   *\n+   * @param node         The start node\n+   * @param predecessors The predecessors set\n+   * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+   *                     reversed\n+   * @return A path as a list of relationships.\n+   */\n+  public static List<Relationship> constructSinglePathToNodeAsRelationships(\n+      Node node, Map<Node, List<Relationship>> predecessors, boolean backwards)\n+  {\n+    List<PropertyContainer> singlePathToNode = constructSinglePathToNode(\n+        node, predecessors, true, backwards);\n+    Iterator<PropertyContainer> iterator = singlePathToNode.iterator();\n+    // Skip the first, it is a node\n+    if (iterator.hasNext())\n     {\n-        List<PropertyContainer> singlePathToNode = constructSinglePathToNode(\n-            node, predecessors, true, backwards );\n-        Iterator<PropertyContainer> iterator = singlePathToNode.iterator();\n-        // Skip the first, it is a node\n-        if ( iterator.hasNext() )\n-        {\n-            iterator.next();\n-        }\n-        LinkedList<Relationship> path = new LinkedList<>();\n-        while ( iterator.hasNext() )\n-        {\n-            path.addLast( (Relationship) iterator.next() );\n-            if ( iterator.hasNext() )\n-            {\n-                iterator.next();\n-            }\n-        }\n-        return path;\n+      iterator.next();\n     }\n-\n-    /**\n-     * Constructs a path to a given node, for a given set of predecessors. The\n-     * result is a list of alternating Node/Relationship.\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n-     * @return A path as a list of alternating Node/Relationship.\n-     */\n-    public static List<PropertyContainer> constructSinglePathToNode( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n-        boolean backwards )\n+    LinkedList<Relationship> path = new LinkedList<>();\n+    while (iterator.hasNext())\n     {\n-        LinkedList<PropertyContainer> path = new LinkedList<>();\n-        if ( includeNode )\n-        {\n-            if ( backwards )\n-            {\n-                path.addLast( node );\n-            }\n-            else\n-            {\n-                path.addFirst( node );\n-            }\n-        }\n-        Node currentNode = node;\n-        List<Relationship> currentPreds = predecessors.get( currentNode );\n-        // Traverse predecessors until we have added a node without predecessors\n-        while ( currentPreds != null && currentPreds.size() != 0 )\n-        {\n-            // Get next node\n-            Relationship currentRelationship = currentPreds.get( 0 );\n-            currentNode = currentRelationship.getOtherNode( currentNode );\n-            // Add current\n-            if ( backwards )\n-            {\n-                path.addLast( currentRelationship );\n-                path.addLast( currentNode );\n-            }\n-            else\n-            {\n-                path.addFirst( currentRelationship );\n-                path.addFirst( currentNode );\n-            }\n-            // Continue with the next node\n-            currentPreds = predecessors.get( currentNode );\n-        }\n-        return path;\n+      path.addLast((Relationship) iterator.next());\n+      if (iterator.hasNext())\n+      {\n+        iterator.next();\n+      }\n     }\n+    return path;\n+  }\n \n-    /**\n-     * Constructs all paths to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n-     * @return\n-     */\n-    public static List<List<Node>> constructAllPathsToNodeAsNodes( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n-        boolean backwards )\n+  /**\n+   * Constructs a path to a given node, for a given set of predecessors. The\n+   * result is a list of alternating Node/Relationship.\n+   *\n+   * @param node         The start node\n+   * @param predecessors The predecessors set\n+   * @param includeNode  Boolean which determines if the start node should be included\n+   *                     in the paths\n+   * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+   *                     reversed\n+   * @return A path as a list of alternating Node/Relationship.\n+   */\n+  public static List<PropertyContainer> constructSinglePathToNode(Node node,\n+                                                                  Map<Node, List<Relationship>> predecessors, boolean includeNode,\n+                                                                  boolean backwards)\n+  {\n+    LinkedList<PropertyContainer> path = new LinkedList<>();\n+    if (includeNode)\n     {\n-        return new LinkedList<>( constructAllPathsToNodeAsNodeLinkedLists( node, predecessors, includeNode, backwards ) );\n+      if (backwards)\n+      {\n+        path.addLast(node);\n+      } else\n+      {\n+        path.addFirst(node);\n+      }\n     }\n-\n-    /**\n-     * Same as constructAllPathsToNodeAsNodes, but different return type\n-     */\n-    protected static List<LinkedList<Node>> constructAllPathsToNodeAsNodeLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n-        boolean includeNode, boolean backwards )\n+    Node currentNode = node;\n+    List<Relationship> currentPreds = predecessors.get(currentNode);\n+    // Traverse predecessors until we have added a node without predecessors\n+    while (currentPreds != null && currentPreds.size() != 0)\n     {\n-        List<LinkedList<Node>> paths = new LinkedList<>();\n-        List<Relationship> current = predecessors.get( node );\n-        // First build all paths to this node's predecessors\n-        if ( current != null )\n-        {\n-            for ( Relationship r : current )\n-            {\n-                Node n = r.getOtherNode( node );\n-                paths.addAll( constructAllPathsToNodeAsNodeLinkedLists( n,\n-                    predecessors, true, backwards ) );\n-            }\n-        }\n-        // If no paths exists to this node, just create an empty one (which will\n-        // have this node added to it)\n-        if ( paths.isEmpty() )\n-        {\n-            paths.add( new LinkedList<>() );\n-        }\n-        // Then add this node to all those paths\n-        if ( includeNode )\n-        {\n-            for ( LinkedList<Node> path : paths )\n-            {\n-                if ( backwards )\n-                {\n-                    path.addFirst( node );\n-                }\n-                else\n-                {\n-                    path.addLast( node );\n-                }\n-            }\n-        }\n-        return paths;\n+      // Get next node\n+      Relationship currentRelationship = currentPreds.get(0);\n+      currentNode = currentRelationship.getOtherNode(currentNode);\n+      // Add current\n+      if (backwards)\n+      {\n+        path.addLast(currentRelationship);\n+        path.addLast(currentNode);\n+      } else\n+      {\n+        path.addFirst(currentRelationship);\n+        path.addFirst(currentNode);\n+      }\n+      // Continue with the next node\n+      currentPreds = predecessors.get(currentNode);\n     }\n+    return path;\n+  }\n+\n+  /**\n+   * Constructs all paths to a given node, for a given set of predecessors\n+   *\n+   * @param node         The start node\n+   * @param predecessors The predecessors set\n+   * @param includeNode  Boolean which determines if the start node should be included\n+   *                     in the paths\n+   * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+   *                     reversed\n+   * @return\n+   */\n+  public static List<List<Node>> constructAllPathsToNodeAsNodes(Node node,\n+                                                                Map<Node, List<Relationship>> predecessors, boolean includeNode,\n+                                                                boolean backwards)\n+  {\n+    return new LinkedList<>(constructAllPathsToNodeAsNodeLinkedLists(node, predecessors, includeNode, backwards));\n+  }\n \n-    /**\n-     * Constructs all paths to a given node, for a given set of predecessors\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param includeNode\n-     *            Boolean which determines if the start node should be included\n-     *            in the paths\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n-     * @return List of lists of alternating Node/Relationship.\n-     */\n-    public static List<List<PropertyContainer>> constructAllPathsToNode(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n-        boolean includeNode, boolean backwards )\n+  /**\n+   * Same as constructAllPathsToNodeAsNodes, but different return type\n+   */\n+  protected static List<LinkedList<Node>> constructAllPathsToNodeAsNodeLinkedLists(\n+      Node node, Map<Node, List<Relationship>> predecessors,\n+      boolean includeNode, boolean backwards)\n+  {\n+    List<LinkedList<Node>> paths = new LinkedList<>();\n+    List<Relationship> current = predecessors.get(node);\n+    // First build all paths to this node's predecessors\n+    if (current != null)\n     {\n-        return new LinkedList<>( constructAllPathsToNodeAsLinkedLists( node, predecessors, includeNode, backwards ) );\n+      for (Relationship r : current)\n+      {\n+        Node n = r.getOtherNode(node);\n+        paths.addAll(constructAllPathsToNodeAsNodeLinkedLists(n,\n+            predecessors, true, backwards));\n+      }\n     }\n-\n-    /**\n-     * Same as constructAllPathsToNode, but different return type\n-     */\n-    protected static List<LinkedList<PropertyContainer>> constructAllPathsToNodeAsLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n-        boolean includeNode, boolean backwards )\n+    // If no paths exists to this node, just create an empty one (which will\n+    // have this node added to it)\n+    if (paths.isEmpty())\n+    {\n+      paths.add(new LinkedList<>());\n+    }\n+    // Then add this node to all those paths\n+    if (includeNode)\n     {\n-        List<LinkedList<PropertyContainer>> paths = new LinkedList<>();\n-        List<Relationship> current = predecessors.get( node );\n-        // First build all paths to this node's predecessors\n-        if ( current != null )\n+      for (LinkedList<Node> path : paths)\n+      {\n+        if (backwards)\n         {\n-            for ( Relationship r : current )\n-            {\n-                Node n = r.getOtherNode( node );\n-                List<LinkedList<PropertyContainer>> newPaths = constructAllPathsToNodeAsLinkedLists(\n-                    n, predecessors, true, backwards );\n-                paths.addAll( newPaths );\n-                // Add the relationship\n-                for ( LinkedList<PropertyContainer> path : newPaths )\n-                {\n-                    if ( backwards )\n-                    {\n-                        path.addFirst( r );\n-                    }\n-                    else\n-                    {\n-                        path.addLast( r );\n-                    }\n-                }\n-            }\n-        }\n-        // If no paths exists to this node, just create an empty one (which will\n-        // have this node added to it)\n-        if ( paths.isEmpty() )\n+          path.addFirst(node);\n+        } else\n         {\n-            paths.add( new LinkedList<>() );\n+          path.addLast(node);\n         }\n-        // Then add this node to all those paths\n-        if ( includeNode )\n+      }\n+    }\n+    return paths;\n+  }\n+\n+  /**\n+   * Constructs all paths to a given node, for a given set of predecessors\n+   *\n+   * @param node         The start node\n+   * @param predecessors The predecessors set\n+   * @param includeNode  Boolean which determines if the start node should be included\n+   *                     in the paths\n+   * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+   *                     reversed\n+   * @return List of lists of alternating Node/Relationship.\n+   */\n+  public static List<List<PropertyContainer>> constructAllPathsToNode(\n+      Node node, Map<Node, List<Relationship>> predecessors,\n+      boolean includeNode, boolean backwards)\n+  {\n+    return new LinkedList<>(constructAllPathsToNodeAsLinkedLists(node, predecessors, includeNode, backwards));\n+  }\n+\n+  /**\n+   * Same as constructAllPathsToNode, but different return type\n+   */\n+  protected static List<LinkedList<PropertyContainer>> constructAllPathsToNodeAsLinkedLists(\n+      Node node, Map<Node, List<Relationship>> predecessors,\n+      boolean includeNode, boolean backwards)\n+  {\n+    List<LinkedList<PropertyContainer>> paths = new LinkedList<>();\n+    List<Relationship> current = predecessors.get(node);\n+    // First build all paths to this node's predecessors\n+    if (current != null)\n+    {\n+      for (Relationship r : current)\n+      {\n+        Node n = r.getOtherNode(node);\n+        List<LinkedList<PropertyContainer>> newPaths = constructAllPathsToNodeAsLinkedLists(\n+            n, predecessors, true, backwards);\n+        paths.addAll(newPaths);\n+        // Add the relationship\n+        for (LinkedList<PropertyContainer> path : newPaths)\n         {\n-            for ( LinkedList<PropertyContainer> path : paths )\n-            {\n-                if ( backwards )\n-                {\n-                    path.addFirst( node );\n-                }\n-                else\n-                {\n-                    path.addLast( node );\n-                }\n-            }\n+          if (backwards)\n+          {\n+            path.addFirst(r);\n+          } else\n+          {\n+            path.addLast(r);\n+          }\n         }\n-        return paths;\n+      }\n     }\n-\n-    /**\n-     * Constructs all paths to a given node, for a given set of predecessors.\n-     * @param node\n-     *            The start node\n-     * @param predecessors\n-     *            The predecessors set\n-     * @param backwards\n-     *            Boolean, if true the order of the nodes in the paths will be\n-     *            reversed\n-     * @return List of lists of relationships.\n-     */\n-    public static List<List<Relationship>> constructAllPathsToNodeAsRelationships(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+    // If no paths exists to this node, just create an empty one (which will\n+    // have this node added to it)\n+    if (paths.isEmpty())\n     {\n-        return new LinkedList<>( constructAllPathsToNodeAsRelationshipLinkedLists( node, predecessors, backwards ) );\n+      paths.add(new LinkedList<>());\n     }\n-\n-    /**\n-     * Same as constructAllPathsToNodeAsRelationships, but different return type\n-     */\n-    protected static List<LinkedList<Relationship>> constructAllPathsToNodeAsRelationshipLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+    // Then add this node to all those paths\n+    if (includeNode)\n     {\n-        List<LinkedList<Relationship>> paths = new LinkedList<>();\n-        List<Relationship> current = predecessors.get( node );\n-        // First build all paths to this node's predecessors\n-        if ( current != null )\n+      for (LinkedList<PropertyContainer> path : paths)\n+      {\n+        if (backwards)\n         {\n-            for ( Relationship r : current )\n-            {\n-                Node n = r.getOtherNode( node );\n-                List<LinkedList<Relationship>> newPaths = constructAllPathsToNodeAsRelationshipLinkedLists(\n-                    n, predecessors, backwards );\n-                paths.addAll( newPaths );\n-                // Add the relationship\n-                for ( LinkedList<Relationship> path : newPaths )\n-                {\n-                    if ( backwards )\n-                    {\n-                        path.addFirst( r );\n-                    }\n-                    else\n-                    {\n-                        path.addLast( r );\n-                    }\n-                }\n-            }\n-        }\n-        // If no paths exists to this node, just create an empty one\n-        if ( paths.isEmpty() )\n+          path.addFirst(node);\n+        } else\n         {\n-            paths.add( new LinkedList<>() );\n+          path.addLast(node);\n         }\n-        return paths;\n+      }\n     }\n+    return paths;\n+  }\n \n-    /**\n-     * This can be used for counting the number of paths from the start node\n-     * (implicit from the predecessors) and some target nodes.\n-     */\n-    public static class PathCounter\n-    {\n-        Map<Node,List<Relationship>> predecessors;\n-        Map<Node,Integer> pathCounts = new HashMap<>();\n+  /**\n+   * Constructs all paths to a given node, for a given set of predecessors.\n+   *\n+   * @param node         The start node\n+   * @param predecessors The predecessors set\n+   * @param backwards    Boolean, if true the order of the nodes in the paths will be\n+   *                     reversed\n+   * @return List of lists of relationships.\n+   */\n+  public static List<List<Relationship>> constructAllPathsToNodeAsRelationships(\n+      Node node, Map<Node, List<Relationship>> predecessors, boolean backwards)\n+  {\n+    return new LinkedList<>(constructAllPathsToNodeAsRelationshipLinkedLists(node, predecessors, backwards));\n+  }\n \n-        public PathCounter( Map<Node,List<Relationship>> predecessors )\n+  /**\n+   * Same as constructAllPathsToNodeAsRelationships, but different return type\n+   */\n+  protected static List<LinkedList<Relationship>> constructAllPathsToNodeAsRelationshipLinkedLists(\n+      Node node, Map<Node, List<Relationship>> predecessors, boolean backwards)\n+  {\n+    List<LinkedList<Relationship>> paths = new LinkedList<>();\n+    List<Relationship> current = predecessors.get(node);\n+    // First build all paths to this node's predecessors\n+    if (current != null)\n+    {\n+      for (Relationship r : current)\n+      {\n+        Node n = r.getOtherNode(node);\n+        List<LinkedList<Relationship>> newPaths = constructAllPathsToNodeAsRelationshipLinkedLists(\n+            n, predecessors, backwards);\n+        paths.addAll(newPaths);\n+        // Add the relationship\n+        for (LinkedList<Relationship> path : newPaths)\n         {\n-            super();\n-            this.predecessors = predecessors;\n+          if (backwards)\n+          {\n+            path.addFirst(r);\n+          } else\n+          {\n+            path.addLast(r);\n+          }\n         }\n+      }\n+    }\n+    // If no paths exists to this node, just create an empty one\n+    if (paths.isEmpty())\n+    {\n+      paths.add(new LinkedList<>());\n+    }\n+    return paths;\n+  }\n \n-        public int getNumberOfPathsToNode( Node node )\n-        {\n-            Integer i = pathCounts.get( node );\n-            if ( i != null )\n-            {\n-                return i;\n-            }\n-            List<Relationship> preds = predecessors.get( node );\n-            if ( preds == null || preds.size() == 0 )\n-            {\n-                return 1;\n-            }\n-            int result = 0;\n-            for ( Relationship relationship : preds )\n-            {\n-                result += getNumberOfPathsToNode( relationship\n-                    .getOtherNode( node ) );\n-            }\n-            pathCounts.put( node, result );\n-            return result;\n-        }\n+  /**\n+   * This can be used for counting the number of paths from the start node\n+   * (implicit from the predecessors) and some target nodes.\n+   */\n+  public static class PathCounter\n+  {\n+    Map<Node, List<Relationship>> predecessors;\n+    Map<Node, Integer> pathCounts = new HashMap<>();\n+\n+    public PathCounter(Map<Node, List<Relationship>> predecessors)\n+    {\n+      super();\n+      this.predecessors = predecessors;\n     }\n \n-    /**\n-     * This can be used to generate the inverse of a structure with\n-     * predecessors, i.e. the successors.\n-     * @param predecessors\n-     * @return\n-     */\n-    public static Map<Node,List<Relationship>> reversedPredecessors(\n-        Map<Node,List<Relationship>> predecessors )\n+    public int getNumberOfPathsToNode(Node node)\n     {\n-        Map<Node,List<Relationship>> result = new HashMap<>();\n-        Set<Node> keys = predecessors.keySet();\n-        for ( Node node : keys )\n-        {\n-            List<Relationship> preds = predecessors.get( node );\n-            for ( Relationship relationship : preds )\n-            {\n-                Node otherNode = relationship.getOtherNode( node );\n-                // We add node as a predecessor to otherNode, instead of the\n-                // other way around\n-                List<Relationship> otherPreds = result.computeIfAbsent( otherNode, k -> new LinkedList<>() );\n-                otherPreds.add( relationship );\n-            }\n-        }\n-        return result;\n+      Integer i = pathCounts.get(node);\n+      if (i != null)\n+      {\n+        return i;\n+      }\n+      List<Relationship> preds = predecessors.get(node);\n+      if (preds == null || preds.size() == 0)\n+      {\n+        return 1;\n+      }\n+      int result = 0;\n+      for (Relationship relationship : preds)\n+      {\n+        result += getNumberOfPathsToNode(relationship\n+            .getOtherNode(node));\n+      }\n+      pathCounts.put(node, result);\n+      return result;\n+    }\n+  }\n+\n+  /**\n+   * This can be used to generate the inverse of a structure with\n+   * predecessors, i.e. the successors.\n+   *\n+   * @param predecessors\n+   * @return\n+   */\n+  public static Map<Node, List<Relationship>> reversedPredecessors(\n+      Map<Node, List<Relationship>> predecessors)\n+  {\n+    Map<Node, List<Relationship>> result = new HashMap<>();\n+    Set<Node> keys = predecessors.keySet();\n+    for (Node node : keys)\n+    {\n+      List<Relationship> preds = predecessors.get(node);\n+      for (Relationship relationship : preds)\n+      {\n+        Node otherNode = relationship.getOtherNode(node);\n+        // We add node as a predecessor to otherNode, instead of the\n+        // other way around\n+        List<Relationship> otherPreds = result.computeIfAbsent(otherNode, k -> new LinkedList<>());\n+        otherPreds.add(relationship);\n+      }\n     }\n+    return result;\n+  }\n }\n",
            "diff_size": 533
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "325",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1986/Util.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1986/Util.java\nindex f1ba6b7ef24..98baafeed0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1986/Util.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1986/Util.java\n@@ -57,12 +57,10 @@ public class Util\n      *            reversed\n      * @return A path as a list of nodes.\n      */\n-    public static List<Node> constructSinglePathToNodeAsNodes( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n+    public static List<Node> constructSinglePathToNodeAsNodes( Node node, Map<Node,List<Relationship>> predecessors, boolean includeNode,\n         boolean backwards )\n-    {\n-        List<PropertyContainer> singlePathToNode = constructSinglePathToNode(\n-            node, predecessors, includeNode, backwards );\n+{\n+        List<PropertyContainer> singlePathToNode = constructSinglePathToNode( node, predecessors, includeNode, backwards );\n         Iterator<PropertyContainer> iterator = singlePathToNode.iterator();\n         // When going backwards and not including the node the first element is\n         // a relationship. Thus skip it.\n@@ -93,11 +91,9 @@ public class Util\n      *            reversed\n      * @return A path as a list of relationships.\n      */\n-    public static List<Relationship> constructSinglePathToNodeAsRelationships(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n-    {\n-        List<PropertyContainer> singlePathToNode = constructSinglePathToNode(\n-            node, predecessors, true, backwards );\n+    public static List<Relationship> constructSinglePathToNodeAsRelationships( Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+{\n+        List<PropertyContainer> singlePathToNode = constructSinglePathToNode( node, predecessors, true, backwards );\n         Iterator<PropertyContainer> iterator = singlePathToNode.iterator();\n         // Skip the first, it is a node\n         if ( iterator.hasNext() )\n@@ -131,10 +127,9 @@ public class Util\n      *            reversed\n      * @return A path as a list of alternating Node/Relationship.\n      */\n-    public static List<PropertyContainer> constructSinglePathToNode( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n+    public static List<PropertyContainer> constructSinglePathToNode( Node node, Map<Node,List<Relationship>> predecessors, boolean includeNode,\n         boolean backwards )\n-    {\n+{\n         LinkedList<PropertyContainer> path = new LinkedList<>();\n         if ( includeNode )\n         {\n@@ -169,7 +164,8 @@ public class Util\n             // Continue with the next node\n             currentPreds = predecessors.get( currentNode );\n         }\n-        return path;\n+\n+return path;\n     }\n \n     /**\n@@ -186,20 +182,18 @@ public class Util\n      *            reversed\n      * @return\n      */\n-    public static List<List<Node>> constructAllPathsToNodeAsNodes( Node node,\n-        Map<Node,List<Relationship>> predecessors, boolean includeNode,\n+    public static List<List<Node>> constructAllPathsToNodeAsNodes( Node node, Map<Node,List<Relationship>> predecessors, boolean includeNode,\n         boolean backwards )\n-    {\n+{\n         return new LinkedList<>( constructAllPathsToNodeAsNodeLinkedLists( node, predecessors, includeNode, backwards ) );\n     }\n \n     /**\n      * Same as constructAllPathsToNodeAsNodes, but different return type\n      */\n-    protected static List<LinkedList<Node>> constructAllPathsToNodeAsNodeLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n+    protected static List<LinkedList<Node>> constructAllPathsToNodeAsNodeLinkedLists( Node node, Map<Node,List<Relationship>> predecessors,\n         boolean includeNode, boolean backwards )\n-    {\n+{\n         List<LinkedList<Node>> paths = new LinkedList<>();\n         List<Relationship> current = predecessors.get( node );\n         // First build all paths to this node's predecessors\n@@ -208,9 +202,8 @@ public class Util\n             for ( Relationship r : current )\n             {\n                 Node n = r.getOtherNode( node );\n-                paths.addAll( constructAllPathsToNodeAsNodeLinkedLists( n,\n-                    predecessors, true, backwards ) );\n-            }\n+                paths.addAll( constructAllPathsToNodeAsNodeLinkedLists( n, predecessors, true, backwards ) );\n+    }\n         }\n         // If no paths exists to this node, just create an empty one (which will\n         // have this node added to it)\n@@ -250,20 +243,18 @@ public class Util\n      *            reversed\n      * @return List of lists of alternating Node/Relationship.\n      */\n-    public static List<List<PropertyContainer>> constructAllPathsToNode(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n+    public static List<List<PropertyContainer>> constructAllPathsToNode( Node node, Map<Node,List<Relationship>> predecessors,\n         boolean includeNode, boolean backwards )\n-    {\n+{\n         return new LinkedList<>( constructAllPathsToNodeAsLinkedLists( node, predecessors, includeNode, backwards ) );\n     }\n \n     /**\n      * Same as constructAllPathsToNode, but different return type\n      */\n-    protected static List<LinkedList<PropertyContainer>> constructAllPathsToNodeAsLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors,\n+    protected static List<LinkedList<PropertyContainer>> constructAllPathsToNodeAsLinkedLists( Node node, Map<Node,List<Relationship>> predecessors,\n         boolean includeNode, boolean backwards )\n-    {\n+{\n         List<LinkedList<PropertyContainer>> paths = new LinkedList<>();\n         List<Relationship> current = predecessors.get( node );\n         // First build all paths to this node's predecessors\n@@ -272,9 +263,8 @@ public class Util\n             for ( Relationship r : current )\n             {\n                 Node n = r.getOtherNode( node );\n-                List<LinkedList<PropertyContainer>> newPaths = constructAllPathsToNodeAsLinkedLists(\n-                    n, predecessors, true, backwards );\n-                paths.addAll( newPaths );\n+                List<LinkedList<PropertyContainer>> newPaths = constructAllPathsToNodeAsLinkedLists( n, predecessors, true, backwards );\n+paths.addAll( newPaths );\n                 // Add the relationship\n                 for ( LinkedList<PropertyContainer> path : newPaths )\n                 {\n@@ -324,18 +314,16 @@ public class Util\n      *            reversed\n      * @return List of lists of relationships.\n      */\n-    public static List<List<Relationship>> constructAllPathsToNodeAsRelationships(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n-    {\n+    public static List<List<Relationship>> constructAllPathsToNodeAsRelationships( Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+{\n         return new LinkedList<>( constructAllPathsToNodeAsRelationshipLinkedLists( node, predecessors, backwards ) );\n     }\n \n     /**\n      * Same as constructAllPathsToNodeAsRelationships, but different return type\n      */\n-    protected static List<LinkedList<Relationship>> constructAllPathsToNodeAsRelationshipLinkedLists(\n-        Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n-    {\n+    protected static List<LinkedList<Relationship>> constructAllPathsToNodeAsRelationshipLinkedLists( Node node, Map<Node,List<Relationship>> predecessors, boolean backwards )\n+{\n         List<LinkedList<Relationship>> paths = new LinkedList<>();\n         List<Relationship> current = predecessors.get( node );\n         // First build all paths to this node's predecessors\n@@ -344,9 +332,8 @@ public class Util\n             for ( Relationship r : current )\n             {\n                 Node n = r.getOtherNode( node );\n-                List<LinkedList<Relationship>> newPaths = constructAllPathsToNodeAsRelationshipLinkedLists(\n-                    n, predecessors, backwards );\n-                paths.addAll( newPaths );\n+                List<LinkedList<Relationship>> newPaths = constructAllPathsToNodeAsRelationshipLinkedLists( n, predecessors, backwards );\n+paths.addAll( newPaths );\n                 // Add the relationship\n                 for ( LinkedList<Relationship> path : newPaths )\n                 {\n@@ -366,7 +353,8 @@ public class Util\n         {\n             paths.add( new LinkedList<>() );\n         }\n-        return paths;\n+\n+return paths;\n     }\n \n     /**\n@@ -399,9 +387,8 @@ public class Util\n             int result = 0;\n             for ( Relationship relationship : preds )\n             {\n-                result += getNumberOfPathsToNode( relationship\n-                    .getOtherNode( node ) );\n-            }\n+                result += getNumberOfPathsToNode( relationship.getOtherNode( node ) );\n+    }\n             pathCounts.put( node, result );\n             return result;\n         }\n@@ -413,9 +400,8 @@ public class Util\n      * @param predecessors\n      * @return\n      */\n-    public static Map<Node,List<Relationship>> reversedPredecessors(\n-        Map<Node,List<Relationship>> predecessors )\n-    {\n+    public static Map<Node,List<Relationship>> reversedPredecessors( Map<Node,List<Relationship>> predecessors )\n+{\n         Map<Node,List<Relationship>> result = new HashMap<>();\n         Set<Node> keys = predecessors.keySet();\n         for ( Node node : keys )\n@@ -432,4 +418,4 @@ public class Util\n         }\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}