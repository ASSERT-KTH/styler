{
    "project_name": "Angel-ML-angel",
    "error_id": "815",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/815/RowSplitCombineUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/815/RowSplitCombineUtils.java\nindex 19beeedccfd..8a937fdb58d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/815/RowSplitCombineUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/815/RowSplitCombineUtils.java\n@@ -108,12 +108,12 @@ public class RowSplitCombineUtils {\n    * Combine row splits of a single matrix row.\r\n    *\r\n    * @param rowSplits row splits\r\n-   * @param matrixId matrix id\r\n-   * @param rowIndex row index\r\n+   * @param matrixId  matrix id\r\n+   * @param rowIndex  row index\r\n    * @return TVector merged row\r\n    */\r\n   public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId,\r\n-      int rowIndex) {\r\n+                                              int rowIndex) {\r\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n     RowType rowType = matrixMeta.getRowType();\r\n \r\n@@ -155,15 +155,15 @@ public class RowSplitCombineUtils {\n   /**\r\n    * Combine the rows splits.\r\n    *\r\n-   * @param matrixId Matrix id\r\n-   * @param rowIds row id\r\n+   * @param matrixId   Matrix id\r\n+   * @param rowIds     row id\r\n    * @param resultSize keys number\r\n-   * @param keyParts keys partitions\r\n+   * @param keyParts   keys partitions\r\n    * @param valueParts values partitions\r\n    * @return merged vectors\r\n    */\r\n   public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[][] valueParts) {\r\n+                                                KeyPart[] keyParts, ValuePart[][] valueParts) {\r\n     Vector[] vectors = new Vector[rowIds.length];\r\n     for (int i = 0; i < rowIds.length; i++) {\r\n       vectors[i] = combineIndexRowSplits(matrixId, rowIds[i], resultSize, keyParts, valueParts[i]);\r\n@@ -174,15 +174,15 @@ public class RowSplitCombineUtils {\n   /**\r\n    * Combine the row splits.\r\n    *\r\n-   * @param matrixId Matrix id\r\n-   * @param rowId row id\r\n+   * @param matrixId   Matrix id\r\n+   * @param rowId      row id\r\n    * @param resultSize keys number\r\n-   * @param keyParts keys partitions\r\n+   * @param keyParts   keys partitions\r\n    * @param valueParts values partitions\r\n    * @return merged vector\r\n    */\r\n   public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts) {\r\n+                                             KeyPart[] keyParts, ValuePart[] valueParts) {\r\n \r\n     // Get matrix meta\r\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n@@ -234,8 +234,8 @@ public class RowSplitCombineUtils {\n   // Combine Int key Double value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                      MatrixMeta matrixMeta) {\r\n     IntDoubleVector vector = VFactory.sparseDoubleVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\r\n@@ -246,7 +246,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntDoubleVector vector, KeyPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n+                             DoubleValuesPart valuesPart) {\r\n     if (keysPart instanceof RangeViewIntKeysPart) {\r\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\r\n     } else {\r\n@@ -255,7 +255,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntDoubleVector vector, RangeViewIntKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n+                             DoubleValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -266,7 +266,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntDoubleVector vector, HashIntKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n+                             DoubleValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     double[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -278,8 +278,8 @@ public class RowSplitCombineUtils {\n   // Combine Int key Float value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                     KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                     MatrixMeta matrixMeta) {\r\n     IntFloatVector vector = VFactory.sparseFloatVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\r\n@@ -298,7 +298,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntFloatVector vector, RangeViewIntKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n+                             FloatValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -309,7 +309,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntFloatVector vector, HashIntKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n+                             FloatValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     float[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -321,8 +321,8 @@ public class RowSplitCombineUtils {\n   // Combine Int key Long value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                    KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                    MatrixMeta matrixMeta) {\r\n     IntLongVector vector = VFactory.sparseLongVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\r\n@@ -341,7 +341,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntLongVector vector, RangeViewIntKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n+                             LongValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -352,7 +352,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntLongVector vector, HashIntKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n+                             LongValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     long[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -364,8 +364,8 @@ public class RowSplitCombineUtils {\n   // Combine Int key Int value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                   KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                   MatrixMeta matrixMeta) {\r\n     IntIntVector vector = VFactory.sparseIntVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\r\n@@ -384,7 +384,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntIntVector vector, RangeViewIntKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n+                             IntValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -395,7 +395,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntIntVector vector, HashIntKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n+                             IntValuesPart valuesPart) {\r\n     int[] keys = keysPart.getKeys();\r\n     int[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -407,8 +407,8 @@ public class RowSplitCombineUtils {\n   // Combine Long key Double value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                       KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                       MatrixMeta matrixMeta) {\r\n     LongDoubleVector vector = VFactory\r\n         .sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -420,7 +420,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongDoubleVector vector, KeyPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n+                             DoubleValuesPart valuesPart) {\r\n     if (keysPart instanceof RangeViewLongKeysPart) {\r\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\r\n     } else {\r\n@@ -429,7 +429,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongDoubleVector vector, RangeViewLongKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n+                             DoubleValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -440,7 +440,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongDoubleVector vector, HashLongKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n+                             DoubleValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     double[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -452,8 +452,8 @@ public class RowSplitCombineUtils {\n   // Combine Long key Float value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                      MatrixMeta matrixMeta) {\r\n     LongFloatVector vector = VFactory.sparseLongKeyFloatVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\r\n@@ -472,7 +472,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongFloatVector vector, RangeViewLongKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n+                             FloatValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -483,7 +483,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongFloatVector vector, HashLongKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n+                             FloatValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     float[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -495,8 +495,8 @@ public class RowSplitCombineUtils {\n   // Combine Long key Int value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                    KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                    MatrixMeta matrixMeta) {\r\n     LongIntVector vector = VFactory.sparseLongKeyIntVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\r\n@@ -515,7 +515,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongIntVector vector, RangeViewLongKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n+                             IntValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -526,7 +526,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongIntVector vector, HashLongKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n+                             IntValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     int[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -538,8 +538,8 @@ public class RowSplitCombineUtils {\n   // Combine Long key Long value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n+                                                     KeyPart[] keyParts, ValuePart[] valueParts,\r\n+                                                     MatrixMeta matrixMeta) {\r\n     LongLongVector vector = VFactory.sparseLongKeyLongVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\r\n@@ -558,7 +558,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongLongVector vector, RangeViewLongKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n+                             LongValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n@@ -569,7 +569,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongLongVector vector, HashLongKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n+                             LongValuesPart valuesPart) {\r\n     long[] keys = keysPart.getKeys();\r\n     long[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n@@ -578,7 +578,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntDoubleRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                        MatrixMeta matrixMeta, int rowIndex) {\r\n     int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n@@ -612,7 +612,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntFloatRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                       MatrixMeta matrixMeta, int rowIndex) {\r\n     int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n@@ -646,7 +646,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntIntRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                     MatrixMeta matrixMeta, int rowIndex) {\r\n     int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n@@ -680,7 +680,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntLongRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                      MatrixMeta matrixMeta, int rowIndex) {\r\n     int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n@@ -714,7 +714,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerLongDoubleRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                         MatrixMeta matrixMeta, int rowIndex) {\r\n     long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n@@ -743,7 +743,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerLongFloatRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                        MatrixMeta matrixMeta, int rowIndex) {\r\n     long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n@@ -772,7 +772,7 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerLongIntRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                      MatrixMeta matrixMeta, int rowIndex) {\r\n     long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n@@ -802,7 +802,7 @@ public class RowSplitCombineUtils {\n \r\n \r\n   private static Vector combineServerLongLongRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n+                                                       MatrixMeta matrixMeta, int rowIndex) {\r\n     long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 170.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "252",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "336",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "378",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "380",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "421",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "463",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "505",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/815/RowSplitCombineUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/815/RowSplitCombineUtils.java\nindex 19beeedccfd..439a8cdfc50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/815/RowSplitCombineUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/815/RowSplitCombineUtils.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.psagent.matrix.transport.adapter;\r\n \r\n import com.tencent.angel.PartitionKey;\r\n@@ -67,9 +66,8 @@ public class RowSplitCombineUtils {\n   private static final Comparator partKeyComp = new PartitionKeyComparator();\r\n   private static final float storageConvFactor = 0.25f;\r\n \r\n-  static class StartColComparator implements Comparator<ServerRow> {\r\n-\r\n-    @Override\r\n+  static class StartColComparator implements Comparator<ServerRow> {\n+  @Override\r\n     public int compare(ServerRow r1, ServerRow r2) {\r\n       return compareStartCol(r1, r2);\r\n     }\r\n@@ -83,12 +81,10 @@ public class RowSplitCombineUtils {\n         return 0;\r\n       }\r\n     }\r\n-  }\r\n-\r\n-\r\n-  static class PartitionKeyComparator implements Comparator<PartitionKey> {\r\n-\r\n-    @Override\r\n+  }\n+\n+static class PartitionKeyComparator implements Comparator<PartitionKey> {\n+  @Override\r\n     public int compare(PartitionKey p1, PartitionKey p2) {\r\n       return comparePartitionKey(p1, p2);\r\n     }\r\n@@ -112,43 +108,32 @@ public class RowSplitCombineUtils {\n    * @param rowIndex row index\r\n    * @return TVector merged row\r\n    */\r\n-  public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId,\r\n-      int rowIndex) {\r\n+  public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId, int rowIndex) {\r\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n-    RowType rowType = matrixMeta.getRowType();\r\n-\r\n-    switch (rowType) {\r\n+    RowType rowType = matrixMeta.getRowType();\n+switch (rowType) {\r\n       case T_DOUBLE_DENSE:\r\n       case T_DOUBLE_SPARSE:\r\n-        return combineServerIntDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_FLOAT_DENSE:\r\n+        return combineServerIntDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n+  case T_FLOAT_DENSE:\r\n       case T_FLOAT_SPARSE:\r\n-        return combineServerIntFloatRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_INT_DENSE:\r\n+        return combineServerIntFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n+  case T_INT_DENSE:\r\n       case T_INT_SPARSE:\r\n-        return combineServerIntIntRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_LONG_DENSE:\r\n+        return combineServerIntIntRowSplits(rowSplits, matrixMeta, rowIndex);\n+  case T_LONG_DENSE:\r\n       case T_LONG_SPARSE:\r\n-        return combineServerIntLongRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_DOUBLE_SPARSE_LONGKEY:\r\n-        return combineServerLongDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_FLOAT_SPARSE_LONGKEY:\r\n-        return combineServerLongFloatRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_INT_SPARSE_LONGKEY:\r\n-        return combineServerLongIntRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_LONG_SPARSE_LONGKEY:\r\n-        return combineServerLongLongRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      default:\r\n-        throw new UnsupportedOperationException(\r\n-            \"Unsupport operation: merge \" + rowType + \" vector splits\");\r\n+        return combineServerIntLongRowSplits(rowSplits, matrixMeta, rowIndex);\n+  case T_DOUBLE_SPARSE_LONGKEY:\r\n+        return combineServerLongDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n+  case T_FLOAT_SPARSE_LONGKEY:\r\n+        return combineServerLongFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n+  case T_INT_SPARSE_LONGKEY:\r\n+        return combineServerLongIntRowSplits(rowSplits, matrixMeta, rowIndex);\n+  case T_LONG_SPARSE_LONGKEY:\r\n+        return combineServerLongLongRowSplits(rowSplits, matrixMeta, rowIndex);\n+  default:\r\n+        throw new UnsupportedOperationException(\"Unsupport operation: merge \" + rowType + \" vector splits\");\r\n     }\r\n   }\r\n \r\n@@ -162,9 +147,8 @@ public class RowSplitCombineUtils {\n    * @param valueParts values partitions\r\n    * @return merged vectors\r\n    */\r\n-  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[][] valueParts) {\r\n-    Vector[] vectors = new Vector[rowIds.length];\r\n+  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize, KeyPart[] keyParts, ValuePart[][] valueParts) {\n+  Vector[] vectors = new Vector[rowIds.length];\r\n     for (int i = 0; i < rowIds.length; i++) {\r\n       vectors[i] = combineIndexRowSplits(matrixId, rowIds[i], resultSize, keyParts, valueParts[i]);\r\n     }\r\n@@ -181,51 +165,40 @@ public class RowSplitCombineUtils {\n    * @param valueParts values partitions\r\n    * @return merged vector\r\n    */\r\n-  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts) {\r\n-\r\n-    // Get matrix meta\r\n+  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts) {\n+  // Get matrix meta\r\n     MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n-    RowType rowType = matrixMeta.getRowType();\r\n-\r\n-    switch (rowType) {\r\n+    RowType rowType = matrixMeta.getRowType();\n+switch (rowType) {\r\n       case T_DOUBLE_DENSE:\r\n       case T_DOUBLE_SPARSE:\r\n         return combineIntDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_FLOAT_DENSE:\r\n+            matrixMeta);\n+  case T_FLOAT_DENSE:\r\n       case T_FLOAT_SPARSE:\r\n         return combineIntFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_INT_DENSE:\r\n+            matrixMeta);\n+  case T_INT_DENSE:\r\n       case T_INT_SPARSE:\r\n         return combineIntIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_LONG_DENSE:\r\n+            matrixMeta);\n+  case T_LONG_DENSE:\r\n       case T_LONG_SPARSE:\r\n         return combineIntLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_DOUBLE_SPARSE_LONGKEY:\r\n+            matrixMeta);\n+  case T_DOUBLE_SPARSE_LONGKEY:\r\n         return combineLongDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_FLOAT_SPARSE_LONGKEY:\r\n+            matrixMeta);\n+  case T_FLOAT_SPARSE_LONGKEY:\r\n         return combineLongFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_INT_SPARSE_LONGKEY:\r\n+            matrixMeta);\n+  case T_INT_SPARSE_LONGKEY:\r\n         return combineLongIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_LONG_SPARSE_LONGKEY:\r\n+            matrixMeta);\n+  case T_LONG_SPARSE_LONGKEY:\r\n         return combineLongLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      default:\r\n+            matrixMeta);\n+  default:\r\n         throw new UnsupportedOperationException(\"unsupport row type \" + rowType);\r\n     }\r\n   }\r\n@@ -233,8 +206,7 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Double value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n     IntDoubleVector vector = VFactory.sparseDoubleVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -246,8 +218,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntDoubleVector vector, KeyPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewIntKeysPart) {\r\n+      DoubleValuesPart valuesPart) {\n+  if (keysPart instanceof RangeViewIntKeysPart) {\r\n       mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\r\n     } else {\r\n       mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\r\n@@ -255,8 +227,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntDoubleVector vector, RangeViewIntKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      DoubleValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     double[] values = valuesPart.getValues();\r\n@@ -266,8 +238,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntDoubleVector vector, HashIntKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      DoubleValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     double[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -277,8 +249,7 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Float value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n     IntFloatVector vector = VFactory.sparseFloatVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -298,8 +269,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntFloatVector vector, RangeViewIntKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      FloatValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     float[] values = valuesPart.getValues();\r\n@@ -309,8 +280,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntFloatVector vector, HashIntKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      FloatValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     float[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -320,8 +291,7 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Long value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n     IntLongVector vector = VFactory.sparseLongVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -341,8 +311,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntLongVector vector, RangeViewIntKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      LongValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     long[] values = valuesPart.getValues();\r\n@@ -352,8 +322,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntLongVector vector, HashIntKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      LongValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     long[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -363,8 +333,7 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Int value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n     IntIntVector vector = VFactory.sparseIntVector((int) matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -384,8 +353,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntIntVector vector, RangeViewIntKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      IntValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     int[] values = valuesPart.getValues();\r\n@@ -395,8 +364,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(IntIntVector vector, HashIntKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n+      IntValuesPart valuesPart) {\n+  int[] keys = keysPart.getKeys();\r\n     int[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -406,11 +375,9 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Double value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n-    LongDoubleVector vector = VFactory\r\n-        .sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\r\n+    LongDoubleVector vector = VFactory.sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n       mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\r\n     }\r\n@@ -420,8 +387,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongDoubleVector vector, KeyPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewLongKeysPart) {\r\n+      DoubleValuesPart valuesPart) {\n+  if (keysPart instanceof RangeViewLongKeysPart) {\r\n       mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\r\n     } else {\r\n       mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\r\n@@ -429,8 +396,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongDoubleVector vector, RangeViewLongKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      DoubleValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     double[] values = valuesPart.getValues();\r\n@@ -440,8 +407,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongDoubleVector vector, HashLongKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      DoubleValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     double[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -451,8 +418,7 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Float value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n     LongFloatVector vector = VFactory.sparseLongKeyFloatVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -472,8 +438,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongFloatVector vector, RangeViewLongKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      FloatValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     float[] values = valuesPart.getValues();\r\n@@ -483,8 +449,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongFloatVector vector, HashLongKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      FloatValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     float[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -494,8 +460,7 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Int value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n     LongIntVector vector = VFactory.sparseLongKeyIntVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -515,8 +480,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongIntVector vector, RangeViewLongKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      IntValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     int[] values = valuesPart.getValues();\r\n@@ -526,8 +491,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongIntVector vector, HashLongKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      IntValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     int[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -537,8 +502,7 @@ public class RowSplitCombineUtils {\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Long value vector\r\n   ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n+  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts,\r\n       MatrixMeta matrixMeta) {\r\n     LongLongVector vector = VFactory.sparseLongKeyLongVector(matrixMeta.getColNum(), resultSize);\r\n     for (int i = 0; i < keyParts.length; i++) {\r\n@@ -558,8 +522,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongLongVector vector, RangeViewLongKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      LongValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     int startPos = keysPart.getStartPos();\r\n     int endPos = keysPart.getEndPos();\r\n     long[] values = valuesPart.getValues();\r\n@@ -569,8 +533,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   public static void mergeTo(LongLongVector vector, HashLongKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n+      LongValuesPart valuesPart) {\n+  long[] keys = keysPart.getKeys();\r\n     long[] values = valuesPart.getValues();\r\n     for (int i = 0; i < keys.length; i++) {\r\n       vector.set(keys[i], values[i]);\r\n@@ -578,8 +542,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntDoubleRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -612,8 +576,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntFloatRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -646,8 +610,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntIntRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -680,8 +644,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerIntLongRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  int colNum = (int) matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -714,8 +678,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerLongDoubleRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -743,8 +707,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerLongFloatRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -772,8 +736,8 @@ public class RowSplitCombineUtils {\n   }\r\n \r\n   private static Vector combineServerLongIntRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -802,8 +766,8 @@ public class RowSplitCombineUtils {\n \r\n \r\n   private static Vector combineServerLongLongRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n+      MatrixMeta matrixMeta, int rowIndex) {\n+  long colNum = matrixMeta.getColNum();\r\n     int elemNum = 0;\r\n     int size = rowSplits.size();\r\n     for (int i = 0; i < size; i++) {\r\n@@ -829,4 +793,4 @@ public class RowSplitCombineUtils {\n     row.setClock(clock);\r\n     return row;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 148
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "299",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "342",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "385",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "386",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "428",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "471",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "514",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/815/RowSplitCombineUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/815/RowSplitCombineUtils.java\nindex 19beeedccfd..707f35d6d13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/815/RowSplitCombineUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/815/RowSplitCombineUtils.java\n@@ -16,92 +16,94 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.psagent.matrix.transport.adapter;\r\n-\r\n-import com.tencent.angel.PartitionKey;\r\n-import com.tencent.angel.ml.math2.VFactory;\r\n-import com.tencent.angel.ml.math2.vector.IntDoubleVector;\r\n-import com.tencent.angel.ml.math2.vector.IntFloatVector;\r\n-import com.tencent.angel.ml.math2.vector.IntIntVector;\r\n-import com.tencent.angel.ml.math2.vector.IntLongVector;\r\n-import com.tencent.angel.ml.math2.vector.LongDoubleVector;\r\n-import com.tencent.angel.ml.math2.vector.LongFloatVector;\r\n-import com.tencent.angel.ml.math2.vector.LongIntVector;\r\n-import com.tencent.angel.ml.math2.vector.LongLongVector;\r\n-import com.tencent.angel.ml.math2.vector.Vector;\r\n-import com.tencent.angel.ml.matrix.MatrixMeta;\r\n-import com.tencent.angel.ml.matrix.RowType;\r\n-import com.tencent.angel.ps.storage.vector.ServerIntDoubleRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerIntFloatRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerIntIntRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerIntLongRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerLongDoubleRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerLongFloatRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerLongIntRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerLongLongRow;\r\n-import com.tencent.angel.ps.storage.vector.ServerRow;\r\n-import com.tencent.angel.psagent.PSAgentContext;\r\n-import com.tencent.angel.psagent.matrix.transport.router.KeyPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.ValuePart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.hash.HashIntKeysPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.hash.HashLongKeysPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.range.RangeViewIntKeysPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.range.RangeViewLongKeysPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.value.DoubleValuesPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.value.FloatValuesPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.value.IntValuesPart;\r\n-import com.tencent.angel.psagent.matrix.transport.router.value.LongValuesPart;\r\n-import java.util.Collections;\r\n-import java.util.Comparator;\r\n-import java.util.List;\r\n-import org.apache.commons.logging.Log;\r\n+package com.tencent.angel.psagent.matrix.transport.adapter;\n+\n+import com.tencent.angel.PartitionKey;\n+import com.tencent.angel.ml.math2.VFactory;\n+import com.tencent.angel.ml.math2.vector.IntDoubleVector;\n+import com.tencent.angel.ml.math2.vector.IntFloatVector;\n+import com.tencent.angel.ml.math2.vector.IntIntVector;\n+import com.tencent.angel.ml.math2.vector.IntLongVector;\n+import com.tencent.angel.ml.math2.vector.LongDoubleVector;\n+import com.tencent.angel.ml.math2.vector.LongFloatVector;\n+import com.tencent.angel.ml.math2.vector.LongIntVector;\n+import com.tencent.angel.ml.math2.vector.LongLongVector;\n+import com.tencent.angel.ml.math2.vector.Vector;\n+import com.tencent.angel.ml.matrix.MatrixMeta;\n+import com.tencent.angel.ml.matrix.RowType;\n+import com.tencent.angel.ps.storage.vector.ServerIntDoubleRow;\n+import com.tencent.angel.ps.storage.vector.ServerIntFloatRow;\n+import com.tencent.angel.ps.storage.vector.ServerIntIntRow;\n+import com.tencent.angel.ps.storage.vector.ServerIntLongRow;\n+import com.tencent.angel.ps.storage.vector.ServerLongDoubleRow;\n+import com.tencent.angel.ps.storage.vector.ServerLongFloatRow;\n+import com.tencent.angel.ps.storage.vector.ServerLongIntRow;\n+import com.tencent.angel.ps.storage.vector.ServerLongLongRow;\n+import com.tencent.angel.ps.storage.vector.ServerRow;\n+import com.tencent.angel.psagent.PSAgentContext;\n+import com.tencent.angel.psagent.matrix.transport.router.KeyPart;\n+import com.tencent.angel.psagent.matrix.transport.router.ValuePart;\n+import com.tencent.angel.psagent.matrix.transport.router.hash.HashIntKeysPart;\n+import com.tencent.angel.psagent.matrix.transport.router.hash.HashLongKeysPart;\n+import com.tencent.angel.psagent.matrix.transport.router.range.RangeViewIntKeysPart;\n+import com.tencent.angel.psagent.matrix.transport.router.range.RangeViewLongKeysPart;\n+import com.tencent.angel.psagent.matrix.transport.router.value.DoubleValuesPart;\n+import com.tencent.angel.psagent.matrix.transport.router.value.FloatValuesPart;\n+import com.tencent.angel.psagent.matrix.transport.router.value.IntValuesPart;\n+import com.tencent.angel.psagent.matrix.transport.router.value.LongValuesPart;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\r\n \r\n /**\r\n  * Row splits combine tool.\r\n- */\r\n-public class RowSplitCombineUtils {\r\n-\r\n-  private static final Log LOG = LogFactory.getLog(RowSplitCombineUtils.class);\r\n-  private static final Comparator serverRowComp = new StartColComparator();\r\n-  private static final Comparator partKeyComp = new PartitionKeyComparator();\r\n-  private static final float storageConvFactor = 0.25f;\r\n-\r\n-  static class StartColComparator implements Comparator<ServerRow> {\r\n-\r\n-    @Override\r\n-    public int compare(ServerRow r1, ServerRow r2) {\r\n-      return compareStartCol(r1, r2);\r\n-    }\r\n-\r\n-    private int compareStartCol(ServerRow r1, ServerRow r2) {\r\n-      if (r1.getStartCol() > r2.getStartCol()) {\r\n-        return 1;\r\n-      } else if (r1.getStartCol() < r2.getStartCol()) {\r\n-        return -1;\r\n-      } else {\r\n-        return 0;\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  static class PartitionKeyComparator implements Comparator<PartitionKey> {\r\n-\r\n-    @Override\r\n-    public int compare(PartitionKey p1, PartitionKey p2) {\r\n-      return comparePartitionKey(p1, p2);\r\n-    }\r\n-\r\n-    private int comparePartitionKey(PartitionKey p1, PartitionKey p2) {\r\n-      if (p1.getStartCol() > p2.getStartCol()) {\r\n-        return 1;\r\n-      } else if (p1.getStartCol() < p2.getStartCol()) {\r\n-        return -1;\r\n-      } else {\r\n-        return 0;\r\n-      }\r\n-    }\r\n+ */\n+\n+public class RowSplitCombineUtils {\n+\n+  private static final Log LOG = LogFactory.getLog(RowSplitCombineUtils.class);\n+  private static final Comparator serverRowComp = new StartColComparator();\n+  private static final Comparator partKeyComp = new PartitionKeyComparator();\n+  private static final float storageConvFactor = 0.25f;\n+\n+  static class StartColComparator implements Comparator<ServerRow> {\n+\n+\n+    @Override\n+    public int compare(ServerRow r1, ServerRow r2) {\n+      return compareStartCol(r1, r2);\n+    }\n+\n+    private int compareStartCol(ServerRow r1, ServerRow r2) {\n+      if (r1.getStartCol() > r2.getStartCol()) {\n+        return 1;\n+      } else if (r1.getStartCol() < r2.getStartCol()) {\n+               return -1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  static class PartitionKeyComparator implements Comparator<PartitionKey> {\n+\n+\n+    @Override\n+    public int compare(PartitionKey p1, PartitionKey p2) {\n+      return comparePartitionKey(p1, p2);\n+    }\n+\n+    private int comparePartitionKey(PartitionKey p1, PartitionKey p2) {\n+      if (p1.getStartCol() > p2.getStartCol()) {\n+        return 1;\n+      } else if (p1.getStartCol() < p2.getStartCol()) {\n+               return -1;\n+      } else {\n+        return 0;\n+      }\n+    }\n   }\r\n \r\n   /**\r\n@@ -111,45 +113,36 @@ public class RowSplitCombineUtils {\n    * @param matrixId matrix id\r\n    * @param rowIndex row index\r\n    * @return TVector merged row\r\n-   */\r\n-  public static Vector combineServerRowSplits(List<ServerRow> rowSplits, int matrixId,\r\n-      int rowIndex) {\r\n-    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n-    RowType rowType = matrixMeta.getRowType();\r\n-\r\n-    switch (rowType) {\r\n-      case T_DOUBLE_DENSE:\r\n-      case T_DOUBLE_SPARSE:\r\n-        return combineServerIntDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_FLOAT_DENSE:\r\n-      case T_FLOAT_SPARSE:\r\n-        return combineServerIntFloatRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_INT_DENSE:\r\n-      case T_INT_SPARSE:\r\n-        return combineServerIntIntRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_LONG_DENSE:\r\n-      case T_LONG_SPARSE:\r\n-        return combineServerIntLongRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_DOUBLE_SPARSE_LONGKEY:\r\n-        return combineServerLongDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_FLOAT_SPARSE_LONGKEY:\r\n-        return combineServerLongFloatRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_INT_SPARSE_LONGKEY:\r\n-        return combineServerLongIntRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      case T_LONG_SPARSE_LONGKEY:\r\n-        return combineServerLongLongRowSplits(rowSplits, matrixMeta, rowIndex);\r\n-\r\n-      default:\r\n-        throw new UnsupportedOperationException(\r\n-            \"Unsupport operation: merge \" + rowType + \" vector splits\");\r\n-    }\r\n+   */\n+\n+  public static Vector combineServerRowSplits(\n+    List<ServerRow> rowSplits, int matrixId, int rowIndex) {\n+    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n+    RowType rowType = matrixMeta.getRowType();\n+    switch (rowType) {\n+      case T_DOUBLE_DENSE:\n+      case T_DOUBLE_SPARSE:\n+        return combineServerIntDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n+      case T_FLOAT_DENSE:\n+      case T_FLOAT_SPARSE:\n+        return combineServerIntFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n+      case T_INT_DENSE:\n+      case T_INT_SPARSE:\n+        return combineServerIntIntRowSplits(rowSplits, matrixMeta, rowIndex);\n+      case T_LONG_DENSE:\n+      case T_LONG_SPARSE:\n+        return combineServerIntLongRowSplits(rowSplits, matrixMeta, rowIndex);\n+      case T_DOUBLE_SPARSE_LONGKEY:\n+        return combineServerLongDoubleRowSplits(rowSplits, matrixMeta, rowIndex);\n+      case T_FLOAT_SPARSE_LONGKEY:\n+        return combineServerLongFloatRowSplits(rowSplits, matrixMeta, rowIndex);\n+      case T_INT_SPARSE_LONGKEY:\n+        return combineServerLongIntRowSplits(rowSplits, matrixMeta, rowIndex);\n+      case T_LONG_SPARSE_LONGKEY:\n+        return combineServerLongLongRowSplits(rowSplits, matrixMeta, rowIndex);\n+      default:\n+        throw new UnsupportedOperationException(\"Unsupport operation: merge \" + rowType + \" vector splits\");\n+    }\n   }\r\n \r\n   /**\r\n@@ -161,14 +154,14 @@ public class RowSplitCombineUtils {\n    * @param keyParts keys partitions\r\n    * @param valueParts values partitions\r\n    * @return merged vectors\r\n-   */\r\n-  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[][] valueParts) {\r\n-    Vector[] vectors = new Vector[rowIds.length];\r\n-    for (int i = 0; i < rowIds.length; i++) {\r\n-      vectors[i] = combineIndexRowSplits(matrixId, rowIds[i], resultSize, keyParts, valueParts[i]);\r\n-    }\r\n-    return vectors;\r\n+   */\n+\n+  public static Vector[] combineIndexRowsSplits(int matrixId, int[] rowIds, int resultSize, KeyPart[] keyParts, ValuePart[][] valueParts) {\n+    Vector[] vectors = new Vector[rowIds.length];\n+    for (int i = 0; i < rowIds.length; i++) {\n+      vectors[i] = combineIndexRowSplits(matrixId, rowIds[i], resultSize, keyParts, valueParts[i]);\n+    }\n+    return vectors;\n   }\r\n \r\n   /**\r\n@@ -180,653 +173,633 @@ public class RowSplitCombineUtils {\n    * @param keyParts keys partitions\r\n    * @param valueParts values partitions\r\n    * @return merged vector\r\n-   */\r\n-  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts) {\r\n-\r\n-    // Get matrix meta\r\n-    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n-    RowType rowType = matrixMeta.getRowType();\r\n-\r\n-    switch (rowType) {\r\n-      case T_DOUBLE_DENSE:\r\n-      case T_DOUBLE_SPARSE:\r\n-        return combineIntDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_FLOAT_DENSE:\r\n-      case T_FLOAT_SPARSE:\r\n-        return combineIntFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_INT_DENSE:\r\n-      case T_INT_SPARSE:\r\n-        return combineIntIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_LONG_DENSE:\r\n-      case T_LONG_SPARSE:\r\n-        return combineIntLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_DOUBLE_SPARSE_LONGKEY:\r\n-        return combineLongDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_FLOAT_SPARSE_LONGKEY:\r\n-        return combineLongFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_INT_SPARSE_LONGKEY:\r\n-        return combineLongIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      case T_LONG_SPARSE_LONGKEY:\r\n-        return combineLongLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts,\r\n-            matrixMeta);\r\n-\r\n-      default:\r\n-        throw new UnsupportedOperationException(\"unsupport row type \" + rowType);\r\n-    }\r\n+   */\n+\n+  public static Vector combineIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts) {\r\n+\r\n+    // Get matrix meta\n+    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n+    RowType rowType = matrixMeta.getRowType();\n+    switch (rowType) {\n+      case T_DOUBLE_DENSE:\n+      case T_DOUBLE_SPARSE:\n+        return combineIntDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      case T_FLOAT_DENSE:\n+      case T_FLOAT_SPARSE:\n+        return combineIntFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      case T_INT_DENSE:\n+      case T_INT_SPARSE:\n+        return combineIntIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      case T_LONG_DENSE:\n+      case T_LONG_SPARSE:\n+        return combineIntLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      case T_DOUBLE_SPARSE_LONGKEY:\n+        return combineLongDoubleIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      case T_FLOAT_SPARSE_LONGKEY:\n+        return combineLongFloatIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      case T_INT_SPARSE_LONGKEY:\n+        return combineLongIntIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      case T_LONG_SPARSE_LONGKEY:\n+        return combineLongLongIndexRowSplits(matrixId, rowId, resultSize, keyParts, valueParts, matrixMeta);\n+      default:\n+        throw new UnsupportedOperationException(\"unsupport row type \" + rowType);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Double value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    IntDoubleVector vector = VFactory.sparseDoubleVector((int) matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(IntDoubleVector vector, KeyPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewIntKeysPart) {\r\n-      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntDoubleVector vector, RangeViewIntKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    double[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntDoubleVector vector, HashIntKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    double[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineIntDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    IntDoubleVector vector = VFactory.sparseDoubleVector((int) matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    IntDoubleVector vector, KeyPart keysPart, DoubleValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewIntKeysPart) {\n+      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntDoubleVector vector, RangeViewIntKeysPart keysPart, DoubleValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    double[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntDoubleVector vector, HashIntKeysPart keysPart, DoubleValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    double[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Float value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    IntFloatVector vector = VFactory.sparseFloatVector((int) matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(IntFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewIntKeysPart) {\r\n-      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntFloatVector vector, RangeViewIntKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    float[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntFloatVector vector, HashIntKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    float[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineIntFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    IntFloatVector vector = VFactory.sparseFloatVector((int) matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    IntFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewIntKeysPart) {\n+      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntFloatVector vector, RangeViewIntKeysPart keysPart, FloatValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    float[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntFloatVector vector, HashIntKeysPart keysPart, FloatValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    float[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Long value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    IntLongVector vector = VFactory.sparseLongVector((int) matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(IntLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewIntKeysPart) {\r\n-      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntLongVector vector, RangeViewIntKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    long[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntLongVector vector, HashIntKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    long[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineIntLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    IntLongVector vector = VFactory.sparseLongVector((int) matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    IntLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewIntKeysPart) {\n+      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntLongVector vector, RangeViewIntKeysPart keysPart, LongValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    long[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntLongVector vector, HashIntKeysPart keysPart, LongValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    long[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Int key Int value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    IntIntVector vector = VFactory.sparseIntVector((int) matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(IntIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewIntKeysPart) {\r\n-      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntIntVector vector, RangeViewIntKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    int[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(IntIntVector vector, HashIntKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    int[] keys = keysPart.getKeys();\r\n-    int[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineIntIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    IntIntVector vector = VFactory.sparseIntVector((int) matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    IntIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewIntKeysPart) {\n+      mergeTo(vector, (RangeViewIntKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashIntKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntIntVector vector, RangeViewIntKeysPart keysPart, IntValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    int[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    IntIntVector vector, HashIntKeysPart keysPart, IntValuesPart valuesPart) {\n+    int[] keys = keysPart.getKeys();\n+    int[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Double value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    LongDoubleVector vector = VFactory\r\n-        .sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(LongDoubleVector vector, KeyPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewLongKeysPart) {\r\n-      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongDoubleVector vector, RangeViewLongKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    double[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongDoubleVector vector, HashLongKeysPart keysPart,\r\n-      DoubleValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    double[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineLongDoubleIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    LongDoubleVector vector = VFactory.sparseLongKeyDoubleVector(matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (DoubleValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    LongDoubleVector vector, KeyPart keysPart, DoubleValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewLongKeysPart) {\n+      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongDoubleVector vector, RangeViewLongKeysPart keysPart, DoubleValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    double[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongDoubleVector vector, HashLongKeysPart keysPart, DoubleValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    double[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Float value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    LongFloatVector vector = VFactory.sparseLongKeyFloatVector(matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(LongFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewLongKeysPart) {\r\n-      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongFloatVector vector, RangeViewLongKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    float[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongFloatVector vector, HashLongKeysPart keysPart,\r\n-      FloatValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    float[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineLongFloatIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    LongFloatVector vector = VFactory.sparseLongKeyFloatVector(matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (FloatValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    LongFloatVector vector, KeyPart keysPart, FloatValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewLongKeysPart) {\n+      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongFloatVector vector, RangeViewLongKeysPart keysPart, FloatValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    float[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongFloatVector vector, HashLongKeysPart keysPart, FloatValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    float[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Int value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    LongIntVector vector = VFactory.sparseLongKeyIntVector(matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(LongIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewLongKeysPart) {\r\n-      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongIntVector vector, RangeViewLongKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    int[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongIntVector vector, HashLongKeysPart keysPart,\r\n-      IntValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    int[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineLongIntIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    LongIntVector vector = VFactory.sparseLongKeyIntVector(matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (IntValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    LongIntVector vector, KeyPart keysPart, IntValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewLongKeysPart) {\n+      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongIntVector vector, RangeViewLongKeysPart keysPart, IntValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    int[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongIntVector vector, HashLongKeysPart keysPart, IntValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    int[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n   }\r\n \r\n   ////////////////////////////////////////////////////////////////////////////////\r\n   // Combine Long key Long value vector\r\n-  ////////////////////////////////////////////////////////////////////////////////\r\n-  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize,\r\n-      KeyPart[] keyParts, ValuePart[] valueParts,\r\n-      MatrixMeta matrixMeta) {\r\n-    LongLongVector vector = VFactory.sparseLongKeyLongVector(matrixMeta.getColNum(), resultSize);\r\n-    for (int i = 0; i < keyParts.length; i++) {\r\n-      mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\r\n-    }\r\n-    vector.setRowId(rowId);\r\n-    vector.setMatrixId(matrixId);\r\n-    return vector;\r\n-  }\r\n-\r\n-  public static void mergeTo(LongLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\r\n-    if (keysPart instanceof RangeViewLongKeysPart) {\r\n-      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\r\n-    } else {\r\n-      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongLongVector vector, RangeViewLongKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    int startPos = keysPart.getStartPos();\r\n-    int endPos = keysPart.getEndPos();\r\n-    long[] values = valuesPart.getValues();\r\n-    for (int i = startPos; i < endPos; i++) {\r\n-      vector.set(keys[i], values[i - startPos]);\r\n-    }\r\n-  }\r\n-\r\n-  public static void mergeTo(LongLongVector vector, HashLongKeysPart keysPart,\r\n-      LongValuesPart valuesPart) {\r\n-    long[] keys = keysPart.getKeys();\r\n-    long[] values = valuesPart.getValues();\r\n-    for (int i = 0; i < keys.length; i++) {\r\n-      vector.set(keys[i], values[i]);\r\n-    }\r\n-  }\r\n-\r\n-  private static Vector combineServerIntDoubleRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    IntDoubleVector row;\r\n-    if (elemNum >= (int) (storageConvFactor * colNum)) {\r\n-      row = VFactory.denseDoubleVector(colNum);\r\n-    } else {\r\n-      row = VFactory.sparseDoubleVector(colNum, elemNum);\r\n-    }\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerIntDoubleRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-\r\n-  private static Vector combineServerIntFloatRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    IntFloatVector row;\r\n-    if (elemNum >= (int) (storageConvFactor * colNum)) {\r\n-      row = VFactory.denseFloatVector(colNum);\r\n-    } else {\r\n-      row = VFactory.sparseFloatVector(colNum, elemNum);\r\n-    }\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerIntFloatRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-\r\n-  private static Vector combineServerIntIntRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    IntIntVector row;\r\n-    if (elemNum >= (int) (storageConvFactor * colNum)) {\r\n-      row = VFactory.denseIntVector(colNum);\r\n-    } else {\r\n-      row = VFactory.sparseIntVector(colNum, elemNum);\r\n-    }\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerIntIntRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-\r\n-  private static Vector combineServerIntLongRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    int colNum = (int) matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    IntLongVector row;\r\n-    if (elemNum >= (int) (storageConvFactor * colNum)) {\r\n-      row = VFactory.denseLongVector(colNum);\r\n-    } else {\r\n-      row = VFactory.sparseLongVector(colNum, elemNum);\r\n-    }\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerIntLongRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-\r\n-  private static Vector combineServerLongDoubleRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    LongDoubleVector row = VFactory.sparseLongKeyDoubleVector(colNum, elemNum);\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerLongDoubleRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-\r\n-  private static Vector combineServerLongFloatRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    LongFloatVector row = VFactory.sparseLongKeyFloatVector(colNum, elemNum);\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerLongFloatRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-\r\n-  private static Vector combineServerLongIntRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    LongIntVector row = VFactory.sparseLongKeyIntVector(colNum, elemNum);\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerLongIntRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-\r\n-\r\n-  private static Vector combineServerLongLongRowSplits(List<ServerRow> rowSplits,\r\n-      MatrixMeta matrixMeta, int rowIndex) {\r\n-    long colNum = matrixMeta.getColNum();\r\n-    int elemNum = 0;\r\n-    int size = rowSplits.size();\r\n-    for (int i = 0; i < size; i++) {\r\n-      elemNum += rowSplits.get(i).size();\r\n-    }\r\n-\r\n-    LongLongVector row = VFactory.sparseLongKeyLongVector(colNum, elemNum);\r\n-    row.setMatrixId(matrixMeta.getId());\r\n-    row.setRowId(rowIndex);\r\n-\r\n-    Collections.sort(rowSplits, serverRowComp);\r\n-\r\n-    int clock = Integer.MAX_VALUE;\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (rowSplits.get(i) == null) {\r\n-        continue;\r\n-      }\r\n-      if (rowSplits.get(i).getClock() < clock) {\r\n-        clock = rowSplits.get(i).getClock();\r\n-      }\r\n-      ((ServerLongLongRow) rowSplits.get(i)).mergeTo(row);\r\n-    }\r\n-    row.setClock(clock);\r\n-    return row;\r\n-  }\r\n-}\r\n+  ////////////////////////////////////////////////////////////////////////////////\n+\n+  public static Vector combineLongLongIndexRowSplits(int matrixId, int rowId, int resultSize, KeyPart[] keyParts, ValuePart[] valueParts, MatrixMeta matrixMeta) {\n+    LongLongVector vector = VFactory.sparseLongKeyLongVector(matrixMeta.getColNum(), resultSize);\n+    for (int i = 0; i < keyParts.length; i++) {\n+      mergeTo(vector, keyParts[i], (LongValuesPart) valueParts[i]);\n+    }\n+    vector.setRowId(rowId);\n+    vector.setMatrixId(matrixId);\n+    return vector;\n+  }\n+\n+  public static void mergeTo(\n+    LongLongVector vector, KeyPart keysPart, LongValuesPart valuesPart) {\n+    if (keysPart instanceof RangeViewLongKeysPart) {\n+      mergeTo(vector, (RangeViewLongKeysPart) keysPart, valuesPart);\n+    } else {\n+      mergeTo(vector, (HashLongKeysPart) keysPart, valuesPart);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongLongVector vector, RangeViewLongKeysPart keysPart, LongValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    int startPos = keysPart.getStartPos();\n+    int endPos = keysPart.getEndPos();\n+    long[] values = valuesPart.getValues();\n+    for (int i = startPos; i < endPos; i++) {\n+      vector.set(keys[i], values[i - startPos]);\n+    }\n+  }\n+\n+  public static void mergeTo(\n+    LongLongVector vector, HashLongKeysPart keysPart, LongValuesPart valuesPart) {\n+    long[] keys = keysPart.getKeys();\n+    long[] values = valuesPart.getValues();\n+    for (int i = 0; i < keys.length; i++) {\n+      vector.set(keys[i], values[i]);\n+    }\n+  }\n+\n+  private static Vector combineServerIntDoubleRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    int colNum = (int) matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    IntDoubleVector row;\n+    if (elemNum >= (int) (storageConvFactor * colNum)) {\n+      row = VFactory.denseDoubleVector(colNum);\n+    } else {\n+      row = VFactory.sparseDoubleVector(colNum, elemNum);\n+    }\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerIntDoubleRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+  private static Vector combineServerIntFloatRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    int colNum = (int) matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    IntFloatVector row;\n+    if (elemNum >= (int) (storageConvFactor * colNum)) {\n+      row = VFactory.denseFloatVector(colNum);\n+    } else {\n+      row = VFactory.sparseFloatVector(colNum, elemNum);\n+    }\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerIntFloatRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+  private static Vector combineServerIntIntRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    int colNum = (int) matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    IntIntVector row;\n+    if (elemNum >= (int) (storageConvFactor * colNum)) {\n+      row = VFactory.denseIntVector(colNum);\n+    } else {\n+      row = VFactory.sparseIntVector(colNum, elemNum);\n+    }\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerIntIntRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+  private static Vector combineServerIntLongRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    int colNum = (int) matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    IntLongVector row;\n+    if (elemNum >= (int) (storageConvFactor * colNum)) {\n+      row = VFactory.denseLongVector(colNum);\n+    } else {\n+      row = VFactory.sparseLongVector(colNum, elemNum);\n+    }\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerIntLongRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+  private static Vector combineServerLongDoubleRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    long colNum = matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    LongDoubleVector row = VFactory.sparseLongKeyDoubleVector(colNum, elemNum);\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerLongDoubleRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+  private static Vector combineServerLongFloatRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    long colNum = matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    LongFloatVector row = VFactory.sparseLongKeyFloatVector(colNum, elemNum);\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerLongFloatRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+  private static Vector combineServerLongIntRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    long colNum = matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    LongIntVector row = VFactory.sparseLongKeyIntVector(colNum, elemNum);\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerLongIntRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+  private static Vector combineServerLongLongRowSplits(\n+    List<ServerRow> rowSplits, MatrixMeta matrixMeta, int rowIndex) {\n+    long colNum = matrixMeta.getColNum();\n+    int elemNum = 0;\n+    int size = rowSplits.size();\n+    for (int i = 0; i < size; i++) {\n+      elemNum += rowSplits.get(i).size();\n+    }\n+\n+    LongLongVector row = VFactory.sparseLongKeyLongVector(colNum, elemNum);\n+    row.setMatrixId(matrixMeta.getId());\n+    row.setRowId(rowIndex);\n+    Collections.sort(rowSplits, serverRowComp);\n+\n+    int clock = Integer.MAX_VALUE;\n+    for (int i = 0; i < size; i++) {\n+      if (rowSplits.get(i) == null) {\n+        continue;\n+      }\n+\n+      if (rowSplits.get(i).getClock() < clock) {\n+        clock = rowSplits.get(i).getClock();\n+      }\n+      ((ServerLongLongRow) rowSplits.get(i)).mergeTo(row);\n+    }\n+    row.setClock(clock);\n+    return row;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 749
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}