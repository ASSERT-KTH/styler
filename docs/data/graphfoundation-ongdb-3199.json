{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3199",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "60",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "66",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3199/PropertyUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3199/PropertyUtil.java\nindex fdb8f2a34dd..9899ab29b4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3199/PropertyUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3199/PropertyUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.store;\n \n import java.nio.ByteBuffer;\n@@ -33,70 +34,65 @@ import org.neo4j.values.storable.Values;\n \n public class PropertyUtil\n {\n-    public static ArrayValue readArrayFromBuffer( ByteBuffer buffer )\n+  public static ArrayValue readArrayFromBuffer(ByteBuffer buffer)\n+  {\n+    if (buffer.limit() <= 0)\n     {\n-        if ( buffer.limit() <= 0 )\n-        {\n-            throw new IllegalStateException( \"Given buffer is empty\" );\n-        }\n+      throw new IllegalStateException(\"Given buffer is empty\");\n+    }\n \n-        byte typeId = buffer.get();\n-        buffer.order( ByteOrder.BIG_ENDIAN );\n-        try\n-        {\n-            if ( typeId == PropertyType.STRING.intValue() )\n-            {\n-                int arrayLength = buffer.getInt();\n-                String[] result = new String[arrayLength];\n+    byte typeId = buffer.get();\n+    buffer.order(ByteOrder.BIG_ENDIAN);\n+    try\n+    {\n+      if (typeId == PropertyType.STRING.intValue())\n+      {\n+        int arrayLength = buffer.getInt();\n+        String[] result = new String[arrayLength];\n \n-                for ( int i = 0; i < arrayLength; i++ )\n-                {\n-                    int byteLength = buffer.getInt();\n-                    result[i] = UTF8.decode( buffer.array(), buffer.position(), byteLength );\n-                    buffer.position( buffer.position() + byteLength );\n-                }\n-                return Values.stringArray( result );\n-            }\n-            else if ( typeId == PropertyType.GEOMETRY.intValue() )\n-            {\n-                GeometryType.GeometryHeader header = GeometryType.GeometryHeader.fromArrayHeaderByteBuffer( buffer );\n-                byte[] byteArray = new byte[buffer.limit() - buffer.position()];\n-                buffer.get( byteArray );\n-                return GeometryType.decodeGeometryArray( header, byteArray );\n-            }\n-            else if ( typeId == PropertyType.TEMPORAL.intValue() )\n-            {\n-                TemporalType.TemporalHeader header = TemporalType.TemporalHeader.fromArrayHeaderByteBuffer( buffer );\n-                byte[] byteArray = new byte[buffer.limit() - buffer.position()];\n-                buffer.get( byteArray );\n-                return TemporalType.decodeTemporalArray( header, byteArray );\n-            }\n-            else\n-            {\n-                ShortArray type = ShortArray.typeOf( typeId );\n-                int bitsUsedInLastByte = buffer.get();\n-                int requiredBits = buffer.get();\n-                if ( requiredBits == 0 )\n-                {\n-                    return type.createEmptyArray();\n-                }\n-                if ( type == ShortArray.BYTE && requiredBits == Byte.SIZE )\n-                {   // Optimization for byte arrays (probably large ones)\n-                    byte[] byteArray = new byte[buffer.limit() - buffer.position()];\n-                    buffer.get( byteArray );\n-                    return Values.byteArray( byteArray );\n-                }\n-                else\n-                {   // Fallback to the generic approach, which is a slower\n-                    Bits bits = Bits.bitsFromBytes( buffer.array(), buffer.position() );\n-                    int length = ((buffer.limit() - buffer.position()) * 8 - (8 - bitsUsedInLastByte)) / requiredBits;\n-                    return type.createArray( length, bits, requiredBits );\n-                }\n-            }\n+        for (int i = 0; i < arrayLength; i++)\n+        {\n+          int byteLength = buffer.getInt();\n+          result[i] = UTF8.decode(buffer.array(), buffer.position(), byteLength);\n+          buffer.position(buffer.position() + byteLength);\n         }\n-        finally\n+        return Values.stringArray(result);\n+      } else if (typeId == PropertyType.GEOMETRY.intValue())\n+      {\n+        GeometryType.GeometryHeader header = GeometryType.GeometryHeader.fromArrayHeaderByteBuffer(buffer);\n+        byte[] byteArray = new byte[buffer.limit() - buffer.position()];\n+        buffer.get(byteArray);\n+        return GeometryType.decodeGeometryArray(header, byteArray);\n+      } else if (typeId == PropertyType.TEMPORAL.intValue())\n+      {\n+        TemporalType.TemporalHeader header = TemporalType.TemporalHeader.fromArrayHeaderByteBuffer(buffer);\n+        byte[] byteArray = new byte[buffer.limit() - buffer.position()];\n+        buffer.get(byteArray);\n+        return TemporalType.decodeTemporalArray(header, byteArray);\n+      } else\n+      {\n+        ShortArray type = ShortArray.typeOf(typeId);\n+        int bitsUsedInLastByte = buffer.get();\n+        int requiredBits = buffer.get();\n+        if (requiredBits == 0)\n         {\n-            buffer.order( ByteOrder.LITTLE_ENDIAN );\n+          return type.createEmptyArray();\n         }\n+        if (type == ShortArray.BYTE && requiredBits == Byte.SIZE)\n+        {   // Optimization for byte arrays (probably large ones)\n+          byte[] byteArray = new byte[buffer.limit() - buffer.position()];\n+          buffer.get(byteArray);\n+          return Values.byteArray(byteArray);\n+        } else\n+        {   // Fallback to the generic approach, which is a slower\n+          Bits bits = Bits.bitsFromBytes(buffer.array(), buffer.position());\n+          int length = ((buffer.limit() - buffer.position()) * 8 - (8 - bitsUsedInLastByte)) / requiredBits;\n+          return type.createArray(length, bits, requiredBits);\n+        }\n+      }\n+    } finally\n+    {\n+      buffer.order(ByteOrder.LITTLE_ENDIAN);\n     }\n+  }\n }\n",
            "diff_size": 96
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3199/PropertyUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3199/PropertyUtil.java\nindex fdb8f2a34dd..2a37f4e44ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3199/PropertyUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3199/PropertyUtil.java\n@@ -48,14 +48,14 @@ public class PropertyUtil\n             {\n                 int arrayLength = buffer.getInt();\n                 String[] result = new String[arrayLength];\n-\n-                for ( int i = 0; i < arrayLength; i++ )\n+for ( int i = 0; i < arrayLength; i++ )\n                 {\n                     int byteLength = buffer.getInt();\n                     result[i] = UTF8.decode( buffer.array(), buffer.position(), byteLength );\n                     buffer.position( buffer.position() + byteLength );\n                 }\n-                return Values.stringArray( result );\n+\n+return Values.stringArray( result );\n             }\n             else if ( typeId == PropertyType.GEOMETRY.intValue() )\n             {\n@@ -80,16 +80,19 @@ public class PropertyUtil\n                 {\n                     return type.createEmptyArray();\n                 }\n-                if ( type == ShortArray.BYTE && requiredBits == Byte.SIZE )\n-                {   // Optimization for byte arrays (probably large ones)\n+\n+if ( type == ShortArray.BYTE && requiredBits == Byte.SIZE )\n+                {\n+    // Optimization for byte arrays (probably large ones)\n                     byte[] byteArray = new byte[buffer.limit() - buffer.position()];\n                     buffer.get( byteArray );\n                     return Values.byteArray( byteArray );\n                 }\n                 else\n-                {   // Fallback to the generic approach, which is a slower\n+                {\n+    // Fallback to the generic approach, which is a slower\n                     Bits bits = Bits.bitsFromBytes( buffer.array(), buffer.position() );\n-                    int length = ((buffer.limit() - buffer.position()) * 8 - (8 - bitsUsedInLastByte)) / requiredBits;\n+                    int length = ((buffer.limit() - buffer.position()) * 8 - ( 8 - bitsUsedInLastByte)) / requiredBits;\n                     return type.createArray( length, bits, requiredBits );\n                 }\n             }\n@@ -99,4 +102,4 @@ public class PropertyUtil\n             buffer.order( ByteOrder.LITTLE_ENDIAN );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}