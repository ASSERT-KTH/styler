{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3153",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3153/HashFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3153/HashFunction.java\nindex d6b7185c935..ac9d93a4e6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3153/HashFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3153/HashFunction.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.hashing;\n \n /**\n@@ -34,122 +35,122 @@ package org.neo4j.hashing;\n  */\n public interface HashFunction\n {\n-    /**\n-     * Initialise the hash function with the given seed.\n-     * <p>\n-     * Different seeds should produce different final hash values.\n-     *\n-     * @param seed The initialisation seed for the hash function.\n-     * @return An initialised intermediate hash state.\n-     */\n-    long initialise( long seed );\n+  /**\n+   * Initialise the hash function with the given seed.\n+   * <p>\n+   * Different seeds should produce different final hash values.\n+   *\n+   * @param seed The initialisation seed for the hash function.\n+   * @return An initialised intermediate hash state.\n+   */\n+  long initialise(long seed);\n \n-    /**\n-     * Update the hash state by mixing the given value into the given intermediate hash state.\n-     *\n-     * @param intermediateHash The intermediate hash state given either by {@link #initialise(long)}, or by a previous\n-     * call to this function.\n-     * @param value The value to add to the hash state.\n-     * @return a new intermediate hash state with the value mixed in.\n-     */\n-    long update( long intermediateHash, long value );\n+  /**\n+   * Update the hash state by mixing the given value into the given intermediate hash state.\n+   *\n+   * @param intermediateHash The intermediate hash state given either by {@link #initialise(long)}, or by a previous\n+   *                         call to this function.\n+   * @param value            The value to add to the hash state.\n+   * @return a new intermediate hash state with the value mixed in.\n+   */\n+  long update(long intermediateHash, long value);\n \n-    /**\n-     * Produce a final hash value from the given intermediate hash state.\n-     *\n-     * @param intermediateHash the intermediate hash state from which to produce a final hash value.\n-     * @return the final hash value.\n-     */\n-    long finalise( long intermediateHash );\n+  /**\n+   * Produce a final hash value from the given intermediate hash state.\n+   *\n+   * @param intermediateHash the intermediate hash state from which to produce a final hash value.\n+   * @return the final hash value.\n+   */\n+  long finalise(long intermediateHash);\n \n-    /**\n-     * Reduce the given 64-bit hash value to a 32-bit value.\n-     *\n-     * @param hash The hash value to reduce.\n-     * @return The 32-bit representation of the given hash value.\n-     */\n-    default int toInt( long hash )\n-    {\n-        return (int) ((hash >> 32) ^ hash);\n-    }\n+  /**\n+   * Reduce the given 64-bit hash value to a 32-bit value.\n+   *\n+   * @param hash The hash value to reduce.\n+   * @return The 32-bit representation of the given hash value.\n+   */\n+  default int toInt(long hash)\n+  {\n+    return (int) ((hash >> 32) ^ hash);\n+  }\n \n-    /**\n-     * Produce a 64-bit hash value from a single long value.\n-     *\n-     * @param value The single value to hash.\n-     * @return The hash of the given value.\n-     */\n-    default long hashSingleValue( long value )\n-    {\n-        return finalise( update( initialise( 0 ), value ) );\n-    }\n+  /**\n+   * Produce a 64-bit hash value from a single long value.\n+   *\n+   * @param value The single value to hash.\n+   * @return The hash of the given value.\n+   */\n+  default long hashSingleValue(long value)\n+  {\n+    return finalise(update(initialise(0), value));\n+  }\n \n-    /**\n-     * Produce a 32-bit hash value from a single long value.\n-     *\n-     * @param value The single value to hash.\n-     * @return The hash of the given value.\n-     */\n-    default int hashSingleValueToInt( long value )\n-    {\n-        return toInt( hashSingleValue( value ) );\n-    }\n+  /**\n+   * Produce a 32-bit hash value from a single long value.\n+   *\n+   * @param value The single value to hash.\n+   * @return The hash of the given value.\n+   */\n+  default int hashSingleValueToInt(long value)\n+  {\n+    return toInt(hashSingleValue(value));\n+  }\n \n-    /**\n-     * Our incremental XXH64 based hash function.\n-     * <p>\n-     * This hash function is based on xxHash (XXH64 variant), but modified to work incrementally on 8-byte blocks\n-     * instead of on 32-byte blocks. Basically, the 32-byte block hash loop has been removed, so we use the 8-byte\n-     * block tail-loop for the entire input.\n-     * <p>\n-     * This hash function is roughly twice as fast as the hash function used for index entries since 2.2.0, about 30%\n-     * faster than optimised murmurhash3 implementations though not as fast as optimised xxHash implementations due to\n-     * the smaller block size. It is allocation free, unlike its predecessor. And it retains most of the excellent\n-     * statistical properties of xxHash, failing only the \"TwoBytes\" and \"Zeroes\" keyset tests in SMHasher, passing 12\n-     * out of 14 tests. According to <a href=\"https://twitter.com/Cyan4973/status/899995095549698049\">Yann Collet on\n-     * twitter</a>, this modification is expected to mostly cause degraded performance, and worsens some of the\n-     * avalanche statistics.\n-     * <p>\n-     * This hash function is stateless, so the returned instance can be freely cached and accessed concurrently by\n-     * multiple threads.\n-     * <p>\n-     * The <a href=\"http://cyan4973.github.io/xxHash/\">xxHash</a> algorithm is originally by Yann Collet, and this\n-     * implementation is with inspiration from Vsevolod Tolstopyatovs implementation in the\n-     * <a href=\"https://github.com/OpenHFT/Zero-Allocation-Hashing\">Zero Allocation Hashing</a> library.\n-     * Credit for <a href=\"https://github.com/aappleby/smhasher\">SMHasher</a> goes to Austin Appleby.\n-     */\n-    static HashFunction incrementalXXH64()\n-    {\n-        return IncrementalXXH64.INSTANCE;\n-    }\n+  /**\n+   * Our incremental XXH64 based hash function.\n+   * <p>\n+   * This hash function is based on xxHash (XXH64 variant), but modified to work incrementally on 8-byte blocks\n+   * instead of on 32-byte blocks. Basically, the 32-byte block hash loop has been removed, so we use the 8-byte\n+   * block tail-loop for the entire input.\n+   * <p>\n+   * This hash function is roughly twice as fast as the hash function used for index entries since 2.2.0, about 30%\n+   * faster than optimised murmurhash3 implementations though not as fast as optimised xxHash implementations due to\n+   * the smaller block size. It is allocation free, unlike its predecessor. And it retains most of the excellent\n+   * statistical properties of xxHash, failing only the \"TwoBytes\" and \"Zeroes\" keyset tests in SMHasher, passing 12\n+   * out of 14 tests. According to <a href=\"https://twitter.com/Cyan4973/status/899995095549698049\">Yann Collet on\n+   * twitter</a>, this modification is expected to mostly cause degraded performance, and worsens some of the\n+   * avalanche statistics.\n+   * <p>\n+   * This hash function is stateless, so the returned instance can be freely cached and accessed concurrently by\n+   * multiple threads.\n+   * <p>\n+   * The <a href=\"http://cyan4973.github.io/xxHash/\">xxHash</a> algorithm is originally by Yann Collet, and this\n+   * implementation is with inspiration from Vsevolod Tolstopyatovs implementation in the\n+   * <a href=\"https://github.com/OpenHFT/Zero-Allocation-Hashing\">Zero Allocation Hashing</a> library.\n+   * Credit for <a href=\"https://github.com/aappleby/smhasher\">SMHasher</a> goes to Austin Appleby.\n+   */\n+  static HashFunction incrementalXXH64()\n+  {\n+    return IncrementalXXH64.INSTANCE;\n+  }\n \n-    /**\n-     * Same hash function as that used by the standard library hash collections. It generates a hash by splitting the\n-     * input value into segments, and then re-distributing those segments, so the end result is effectively a striped\n-     * and then jumbled version of the input data. For randomly distributed keys, this has a good chance at generating\n-     * an even hash distribution over the full hash space.\n-     * <p>\n-     * It performs exceptionally poorly for sequences of numbers, as the sequence increments all end up in the same\n-     * stripe, generating hash values that will end up in the same buckets in collections.\n-     * <p>\n-     * This hash function is stateless, so the returned instance can be freely cached and accessed concurrently by\n-     * multiple threads.\n-     */\n-    static HashFunction javaUtilHashing()\n-    {\n-        return JavaUtilHashFunction.INSTANCE;\n-    }\n+  /**\n+   * Same hash function as that used by the standard library hash collections. It generates a hash by splitting the\n+   * input value into segments, and then re-distributing those segments, so the end result is effectively a striped\n+   * and then jumbled version of the input data. For randomly distributed keys, this has a good chance at generating\n+   * an even hash distribution over the full hash space.\n+   * <p>\n+   * It performs exceptionally poorly for sequences of numbers, as the sequence increments all end up in the same\n+   * stripe, generating hash values that will end up in the same buckets in collections.\n+   * <p>\n+   * This hash function is stateless, so the returned instance can be freely cached and accessed concurrently by\n+   * multiple threads.\n+   */\n+  static HashFunction javaUtilHashing()\n+  {\n+    return JavaUtilHashFunction.INSTANCE;\n+  }\n \n-    /**\n-     * The default hash function is based on a pseudo-random number generator, which uses the input value as a seed\n-     * to the generator. This is very fast, and performs well for most input data. However, it is not guaranteed to\n-     * generate a superb distribution, only a \"decent\" one.\n-     * <p>\n-     * This hash function is stateless, so the returned instance can be freely cached and accessed concurrently by\n-     * multiple threads.\n-     */\n-    static HashFunction xorShift32()\n-    {\n-        return XorShift32HashFunction.INSTANCE;\n-    }\n+  /**\n+   * The default hash function is based on a pseudo-random number generator, which uses the input value as a seed\n+   * to the generator. This is very fast, and performs well for most input data. However, it is not guaranteed to\n+   * generate a superb distribution, only a \"decent\" one.\n+   * <p>\n+   * This hash function is stateless, so the returned instance can be freely cached and accessed concurrently by\n+   * multiple threads.\n+   */\n+  static HashFunction xorShift32()\n+  {\n+    return XorShift32HashFunction.INSTANCE;\n+  }\n }\n",
            "diff_size": 111
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3153/HashFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3153/HashFunction.java\nindex d6b7185c935..67180e6087d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3153/HashFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3153/HashFunction.java\n@@ -70,7 +70,7 @@ public interface HashFunction\n      */\n     default int toInt( long hash )\n     {\n-        return (int) ((hash >> 32) ^ hash);\n+        return ( int) ((hash >> 32) ^ hash);\n     }\n \n     /**\n@@ -152,4 +152,4 @@ public interface HashFunction\n     {\n         return XorShift32HashFunction.INSTANCE;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}