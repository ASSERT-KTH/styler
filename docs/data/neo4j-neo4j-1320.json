{
    "project_name": "neo4j-neo4j",
    "error_id": "1320",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "123",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "281",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "377",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "502",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "530",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "564",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "574",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "609",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "615",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "615",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "628",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "649",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "689",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "691",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "691",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "705",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "747",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "747",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "752",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "762",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "765",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "765",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "775",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "831",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "831",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "840",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "845",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "848",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "868",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "868",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "871",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "871",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "871",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "875",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "875",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "875",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "879",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "883",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "886",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "890",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "894",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "897",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "897",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "897",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "900",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "904",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "904",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "904",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "908",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "912",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "912",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "916",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "920",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "924",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "924",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "924",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "928",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "932",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "932",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "932",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "938",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "938",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "938",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "945",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "948",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "948",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "948",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "952",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "971",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "972",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "974",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "974",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "980",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "980",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "984",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "988",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "988",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "988",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "992",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "992",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "992",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "996",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "996",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "996",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1000",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1004",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1008",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1012",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1012",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1012",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1017",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1017",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1017",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1021",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1021",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1021",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1025",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1025",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1025",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1029",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1029",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1029",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1033",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1033",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1033",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1037",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1037",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1037",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1040",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1040",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1040",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1044",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1056",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1056",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1064",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1064",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1077",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1077",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1081",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1081",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1089",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1090",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1092",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1092",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1107",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1107",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1109",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1109",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1110",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1110",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1117",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1118",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1122",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1122",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1320/ProcedureCompilation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1320/ProcedureCompilation.java\nindex 740cf1b8e46..dc479a70db7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1320/ProcedureCompilation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1320/ProcedureCompilation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.impl;\n \n import java.lang.reflect.Field;\n@@ -119,24 +120,24 @@ import static org.neo4j.values.SequenceValue.IterationPreference.RANDOM_ACCESS;\n /**\n  * Class responsible for generating code for calling user-defined procedures and functions.\n  */\n-@SuppressWarnings( {\"WeakerAccess\", \"unused\"} )\n+@SuppressWarnings({\"WeakerAccess\", \"unused\"})\n public final class ProcedureCompilation\n {\n-    public static final RawIterator<AnyValue[],ProcedureException> VOID_ITERATOR =\n-            new RawIterator<>()\n-            {\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    return false;\n-                }\n-\n-                @Override\n-                public AnyValue[] next()\n-                {\n-                    return EMPTY_ARRAY;\n-                }\n-            };\n+    public static final RawIterator<AnyValue[], ProcedureException> VOID_ITERATOR =\n+      new RawIterator<>()\n+      {\n+          @Override\n+          public boolean hasNext()\n+          {\n+              return false;\n+          }\n+\n+          @Override\n+          public AnyValue[] next()\n+          {\n+              return EMPTY_ARRAY;\n+          }\n+      };\n \n     private static final boolean DEBUG = false;\n     private static final String LONG = long.class.getCanonicalName();\n@@ -166,29 +167,29 @@ public final class ProcedureCompilation\n     private static final String VALUE_MAPPER_NAME = \"MAPPER\";\n     private static final AnyValue[] EMPTY_ARRAY = new AnyValue[0];\n \n-    private static final MethodDeclaration.Builder USER_FUNCTION = method( AnyValue.class, \"apply\",\n-            param( Context.class, \"ctx\" ),\n-            param( AnyValue[].class, \"input\" ) )\n-            .throwsException( typeReference( ProcedureException.class ) );\n+    private static final MethodDeclaration.Builder USER_FUNCTION = method(AnyValue.class, \"apply\",\n+      param(Context.class, \"ctx\"),\n+      param(AnyValue[].class, \"input\"))\n+      .throwsException(typeReference(ProcedureException.class));\n     private static final MethodDeclaration.Builder USER_PROCEDURE = method(\n-            parameterizedType( RawIterator.class, typeReference( AnyValue[].class), typeReference( ProcedureException.class ) ),\n-            \"apply\",\n-            param( Context.class, \"ctx\" ),\n-            param( AnyValue[].class, \"input\" ),\n-            param( ResourceTracker.class, \"tracker\" ))\n-            .throwsException( typeReference( ProcedureException.class ) );\n-    private static final MethodDeclaration.Builder AGGREGATION_CREATE = method( UserAggregator.class, \"create\",\n-            param( Context.class, \"ctx\" ))\n-            .throwsException( typeReference( ProcedureException.class ) );\n-    private static final MethodDeclaration.Builder AGGREGATION_UPDATE = method( void.class, \"update\",\n-            param( AnyValue[].class, \"input\" ))\n-            .throwsException( typeReference( ProcedureException.class ) );\n-    private static final MethodDeclaration.Builder AGGREGATION_RESULT = method( AnyValue.class, \"result\")\n-            .throwsException( typeReference( ProcedureException.class ) );\n+      parameterizedType(RawIterator.class, typeReference(AnyValue[].class), typeReference(ProcedureException.class)),\n+      \"apply\",\n+      param(Context.class, \"ctx\"),\n+      param(AnyValue[].class, \"input\"),\n+      param(ResourceTracker.class, \"tracker\"))\n+      .throwsException(typeReference(ProcedureException.class));\n+    private static final MethodDeclaration.Builder AGGREGATION_CREATE = method(UserAggregator.class, \"create\",\n+      param(Context.class, \"ctx\"))\n+      .throwsException(typeReference(ProcedureException.class));\n+    private static final MethodDeclaration.Builder AGGREGATION_UPDATE = method(void.class, \"update\",\n+      param(AnyValue[].class, \"input\"))\n+      .throwsException(typeReference(ProcedureException.class));\n+    private static final MethodDeclaration.Builder AGGREGATION_RESULT = method(AnyValue.class, \"result\")\n+      .throwsException(typeReference(ProcedureException.class));\n \n     private ProcedureCompilation()\n     {\n-        throw new UnsupportedOperationException( \"Do not instantiate\" );\n+        throw new UnsupportedOperationException(\"Do not instantiate\");\n     }\n \n     /**\n@@ -200,7 +201,7 @@ public final class ProcedureCompilation\n      *     class MyClass {\n      *       {@literal @}Context\n      *        public Log log;\n-\n+     *\n      *       {@literal @}UserFunction\n      *        public double addPi(long value) {\n      *            return value + Math.PI;\n@@ -231,42 +232,42 @@ public final class ProcedureCompilation\n      * <p>\n      * where the static fields are set once during loading via reflection.\n      *\n-     * @param signature the signature of the user-defined function\n+     * @param signature    the signature of the user-defined function\n      * @param fieldSetters the fields to set before each call.\n      * @param methodToCall the method to call\n      * @return a CallableUserFunction delegating to the underlying user-defined function.\n      * @throws ProcedureException if something went wrong when compiling the user-defined function.\n      */\n     static CallableUserFunction compileFunction(\n-            UserFunctionSignature signature, List<FieldSetter> fieldSetters,\n-            Method methodToCall ) throws ProcedureException\n+      UserFunctionSignature signature, List<FieldSetter> fieldSetters,\n+      Method methodToCall) throws ProcedureException\n     {\n \n         ClassHandle handle;\n         try\n         {\n             CodeGenerator codeGenerator = codeGenerator();\n-            try ( ClassGenerator generator = codeGenerator.generateClass( PACKAGE, className( signature ), CallableUserFunction.class ) )\n+            try (ClassGenerator generator = codeGenerator.generateClass(PACKAGE, className(signature), CallableUserFunction.class))\n             {\n                 //static fields\n-                FieldReference signatureField = generator.publicStaticField( typeReference( UserFunctionSignature.class ), SIGNATURE_NAME );\n-                List<FieldReference> fieldsToSet = createContextSetters( fieldSetters, generator );\n+                FieldReference signatureField = generator.publicStaticField(typeReference(UserFunctionSignature.class), SIGNATURE_NAME);\n+                List<FieldReference> fieldsToSet = createContextSetters(fieldSetters, generator);\n \n                 //CallableUserFunction::apply\n-                try ( CodeBlock method = generator.generate( USER_FUNCTION ) )\n+                try (CodeBlock method = generator.generate(USER_FUNCTION))\n                 {\n                     method.tryCatch(\n-                            body -> functionBody( body, fieldSetters, fieldsToSet, methodToCall ),\n-                            onError ->\n-                                    onError( onError, format( \"function `%s`\", signature.name() ) ),\n-                            param( Throwable.class, \"T\" )\n+                      body -> functionBody(body, fieldSetters, fieldsToSet, methodToCall),\n+                      onError ->\n+                        onError(onError, format(\"function `%s`\", signature.name())),\n+                      param(Throwable.class, \"T\")\n                     );\n                 }\n \n                 //CallableUserFunction::signature\n-                try ( CodeBlock method = generator.generateMethod( UserFunctionSignature.class, \"signature\" ) )\n+                try (CodeBlock method = generator.generateMethod(UserFunctionSignature.class, \"signature\"))\n                 {\n-                    method.returns( getStatic( signatureField ) );\n+                    method.returns(getStatic(signatureField));\n                 }\n \n                 handle = generator.handle();\n@@ -274,15 +275,14 @@ public final class ProcedureCompilation\n             Class<?> clazz = handle.loadClass();\n \n             //set all static fields\n-            setAllStaticFields( signature, fieldSetters, methodToCall, clazz );\n+            setAllStaticFields(signature, fieldSetters, methodToCall, clazz);\n \n             return (CallableUserFunction) clazz.getConstructor().newInstance();\n-        }\n-        catch ( Throwable e )\n+        } catch (Throwable e)\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile function defined in `%s`: %s\", methodToCall.getDeclaringClass().getSimpleName(),\n-                    e.getMessage() );\n+            throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed, e,\n+              \"Failed to compile function defined in `%s`: %s\", methodToCall.getDeclaringClass().getSimpleName(),\n+              e.getMessage());\n         }\n     }\n \n@@ -295,7 +295,7 @@ public final class ProcedureCompilation\n      *     class MyClass {\n      *       {@literal @}Context\n      *        public Log log;\n-\n+     *\n      *       {@literal @}Procedure\n      *        public Stream<MyOut> myStream(long value) {\n      *            ...\n@@ -328,43 +328,43 @@ public final class ProcedureCompilation\n      * where the static fields are set once during loading via reflection and where the <tt>GeneratedIterator</tt>\n      * implements the appropriate mapping from user-types Object[] to AnyValue[].\n      *\n-     * @param signature the signature of the procedure\n+     * @param signature    the signature of the procedure\n      * @param fieldSetters the fields to set before each call.\n      * @param methodToCall the method to call\n      * @return a CallableProcedure delegating to the underlying procedure method.\n      * @throws ProcedureException if something went wrong when compiling the user-defined function.\n      */\n     static CallableProcedure compileProcedure(\n-            ProcedureSignature signature, List<FieldSetter> fieldSetters,\n-            Method methodToCall ) throws ProcedureException\n+      ProcedureSignature signature, List<FieldSetter> fieldSetters,\n+      Method methodToCall) throws ProcedureException\n     {\n \n         ClassHandle handle;\n         try\n         {\n             CodeGenerator codeGenerator = codeGenerator();\n-            Class<?> iterator = generateIterator( codeGenerator, procedureType( methodToCall ) );\n+            Class<?> iterator = generateIterator(codeGenerator, procedureType(methodToCall));\n \n-            try ( ClassGenerator generator = codeGenerator.generateClass( PACKAGE, className( signature ), CallableProcedure.class ) )\n+            try (ClassGenerator generator = codeGenerator.generateClass(PACKAGE, className(signature), CallableProcedure.class))\n             {\n                 //static fields\n-                FieldReference signatureField = generator.publicStaticField( typeReference( ProcedureSignature.class ), SIGNATURE_NAME );\n-                List<FieldReference> fieldsToSet = createContextSetters( fieldSetters, generator );\n+                FieldReference signatureField = generator.publicStaticField(typeReference(ProcedureSignature.class), SIGNATURE_NAME);\n+                List<FieldReference> fieldsToSet = createContextSetters(fieldSetters, generator);\n \n                 //CallableProcedure::apply\n-                try ( CodeBlock method = generator.generate( USER_PROCEDURE ) )\n+                try (CodeBlock method = generator.generate(USER_PROCEDURE))\n                 {\n                     method.tryCatch(\n-                            body -> procedureBody( body, fieldSetters, fieldsToSet, signatureField, methodToCall, iterator ),\n-                            onError -> onError( onError, format( \"procedure `%s`\", signature.name() ) ),\n-                            param( Throwable.class, \"T\" )\n+                      body -> procedureBody(body, fieldSetters, fieldsToSet, signatureField, methodToCall, iterator),\n+                      onError -> onError(onError, format(\"procedure `%s`\", signature.name())),\n+                      param(Throwable.class, \"T\")\n                     );\n                 }\n \n                 //CallableUserFunction::signature\n-                try ( CodeBlock method = generator.generateMethod( ProcedureSignature.class, \"signature\" ) )\n+                try (CodeBlock method = generator.generateMethod(ProcedureSignature.class, \"signature\"))\n                 {\n-                    method.returns( getStatic( signatureField ) );\n+                    method.returns(getStatic(signatureField));\n                 }\n \n                 handle = generator.handle();\n@@ -372,14 +372,13 @@ public final class ProcedureCompilation\n             Class<?> clazz = handle.loadClass();\n \n             //set all static fields\n-            setAllStaticFields( signature, fieldSetters, methodToCall, clazz );\n+            setAllStaticFields(signature, fieldSetters, methodToCall, clazz);\n             return (CallableProcedure) clazz.getConstructor().newInstance();\n-        }\n-        catch ( Throwable e )\n+        } catch (Throwable e)\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile procedure defined in `%s`: %s\", methodToCall.getDeclaringClass().getSimpleName(),\n-                    e.getMessage() );\n+            throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed, e,\n+              \"Failed to compile procedure defined in `%s`: %s\", methodToCall.getDeclaringClass().getSimpleName(),\n+              e.getMessage());\n         }\n     }\n \n@@ -392,7 +391,7 @@ public final class ProcedureCompilation\n      *     class MyClass {\n      *       {@literal @}Context\n      *        public Log log;\n-\n+     *\n      *       {@literal @}UserAggregationFunction\n      *        public Adder create() {\n      *            return new Adder;\n@@ -451,45 +450,45 @@ public final class ProcedureCompilation\n      * <p>\n      * where the static fields are set once during loading via reflection.\n      *\n-     * @param signature the signature of the user-defined function\n+     * @param signature    the signature of the user-defined function\n      * @param fieldSetters the fields to set before each call.\n-     * @param create the method that creates the aggregator\n-     * @param update the update method of the aggregator\n-     * @param result the result method of the aggregator\n+     * @param create       the method that creates the aggregator\n+     * @param update       the update method of the aggregator\n+     * @param result       the result method of the aggregator\n      * @return a CallableUserFunction delegating to the underlying user-defined function.\n      * @throws ProcedureException if something went wrong when compiling the user-defined function.\n      */\n     static CallableUserAggregationFunction compileAggregation(\n-            UserFunctionSignature signature, List<FieldSetter> fieldSetters,\n-            Method create, Method update, Method result ) throws ProcedureException\n+      UserFunctionSignature signature, List<FieldSetter> fieldSetters,\n+      Method create, Method update, Method result) throws ProcedureException\n     {\n \n         ClassHandle handle;\n         try\n         {\n             CodeGenerator codeGenerator = codeGenerator();\n-            Class<?> aggregator = generateAggregator( codeGenerator,update, result, signature );\n-            try ( ClassGenerator generator = codeGenerator.generateClass( PACKAGE, className( signature ), CallableUserAggregationFunction.class ) )\n+            Class<?> aggregator = generateAggregator(codeGenerator, update, result, signature);\n+            try (ClassGenerator generator = codeGenerator.generateClass(PACKAGE, className(signature), CallableUserAggregationFunction.class))\n             {\n                 //static fields\n-                FieldReference signatureField = generator.publicStaticField( typeReference( UserFunctionSignature.class ), SIGNATURE_NAME );\n-                List<FieldReference> fieldsToSet = createContextSetters( fieldSetters, generator );\n+                FieldReference signatureField = generator.publicStaticField(typeReference(UserFunctionSignature.class), SIGNATURE_NAME);\n+                List<FieldReference> fieldsToSet = createContextSetters(fieldSetters, generator);\n \n                 //CallableUserAggregationFunction::create\n-                try ( CodeBlock method = generator.generate( AGGREGATION_CREATE ) )\n+                try (CodeBlock method = generator.generate(AGGREGATION_CREATE))\n                 {\n                     method.tryCatch(\n-                            body -> createAggregationBody( body, fieldSetters, fieldsToSet, create, aggregator ),\n-                            onError ->\n-                                    onError( onError, format( \"function `%s`\", signature.name() ) ),\n-                            param( Throwable.class, \"T\" )\n+                      body -> createAggregationBody(body, fieldSetters, fieldsToSet, create, aggregator),\n+                      onError ->\n+                        onError(onError, format(\"function `%s`\", signature.name())),\n+                      param(Throwable.class, \"T\")\n                     );\n                 }\n \n                 //CallableUserFunction::signature\n-                try ( CodeBlock method = generator.generateMethod( UserFunctionSignature.class, \"signature\" ) )\n+                try (CodeBlock method = generator.generateMethod(UserFunctionSignature.class, \"signature\"))\n                 {\n-                    method.returns( getStatic( signatureField ) );\n+                    method.returns(getStatic(signatureField));\n                 }\n \n                 handle = generator.handle();\n@@ -497,130 +496,128 @@ public final class ProcedureCompilation\n             Class<?> clazz = handle.loadClass();\n \n             //set all static fields\n-            setAllStaticFields( signature, fieldSetters, create, clazz );\n+            setAllStaticFields(signature, fieldSetters, create, clazz);\n \n             return (CallableUserAggregationFunction) clazz.getConstructor().newInstance();\n-        }\n-        catch ( Throwable e )\n+        } catch (Throwable e)\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, e,\n-                    \"Failed to compile function defined in `%s`: %s\", create.getDeclaringClass().getSimpleName(),\n-                    e.getMessage() );\n+            throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed, e,\n+              \"Failed to compile function defined in `%s`: %s\", create.getDeclaringClass().getSimpleName(),\n+              e.getMessage());\n         }\n     }\n \n     /**\n      * Used by generated code. Needs to be public.\n-     * @param throwable The thrown exception\n+     *\n+     * @param throwable   The thrown exception\n      * @param typeAndName the type and name of the caller, e.g \"function `my.udf`\"\n      * @return an exception with an appropriate message.\n      */\n-    public static ProcedureException rethrowProcedureException( Throwable throwable, String typeAndName )\n+    public static ProcedureException rethrowProcedureException(Throwable throwable, String typeAndName)\n     {\n-        if ( throwable instanceof ProcedureException )\n+        if (throwable instanceof ProcedureException)\n         {\n             return (ProcedureException) throwable;\n         }\n-        if ( throwable instanceof Status.HasStatus )\n+        if (throwable instanceof Status.HasStatus)\n         {\n-            return new ProcedureException( ((Status.HasStatus) throwable).status(), throwable,\n-                    throwable.getMessage(), throwable );\n-        }\n-        else\n+            return new ProcedureException(((Status.HasStatus) throwable).status(), throwable,\n+              throwable.getMessage(), throwable);\n+        } else\n         {\n-            Throwable cause = getRootCause( throwable );\n-            return new ProcedureException( Status.Procedure.ProcedureCallFailed, throwable,\n-                    \"Failed to invoke %s: %s\", typeAndName,\n-                    \"Caused by: \" + (cause != null ? cause : throwable) );\n+            Throwable cause = getRootCause(throwable);\n+            return new ProcedureException(Status.Procedure.ProcedureCallFailed, throwable,\n+              \"Failed to invoke %s: %s\", typeAndName,\n+              \"Caused by: \" + (cause != null ? cause : throwable));\n         }\n     }\n \n     /**\n      * Byte arrays needs special treatment since it is not a proper Cypher type\n+     *\n      * @param input either a ByteArray or ListValue of bytes\n      * @return input value converted to a byte[]\n      */\n-    public static byte[] toByteArray( AnyValue input )\n+    public static byte[] toByteArray(AnyValue input)\n     {\n-        if ( input instanceof ByteArray )\n+        if (input instanceof ByteArray)\n         {\n             return ((ByteArray) input).asObjectCopy();\n         }\n-        if ( input instanceof SequenceValue )\n+        if (input instanceof SequenceValue)\n         {\n             SequenceValue list = (SequenceValue) input;\n-            if ( list.iterationPreference() == RANDOM_ACCESS )\n+            if (list.iterationPreference() == RANDOM_ACCESS)\n             {\n                 byte[] bytes = new byte[list.length()];\n-                for ( int a = 0; a < bytes.length; a++ )\n+                for (int a = 0; a < bytes.length; a++)\n                 {\n-                    bytes[a] = asByte( list.value( a ) );\n+                    bytes[a] = asByte(list.value(a));\n                 }\n-                return  bytes;\n-            }\n-            else\n+                return bytes;\n+            } else\n             {\n                 //list.length may have linear complexity, still worth doing it upfront\n                 byte[] bytes = new byte[list.length()];\n                 int i = 0;\n-                for ( AnyValue anyValue : list )\n+                for (AnyValue anyValue : list)\n                 {\n-                    bytes[i++] = asByte( anyValue );\n+                    bytes[i++] = asByte(anyValue);\n                 }\n \n                 return bytes;\n             }\n-        }\n-        else\n+        } else\n         {\n             throw new IllegalArgumentException(\n-                    \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\" );\n+              \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\");\n         }\n     }\n \n     /**\n      * Generates a tailored iterator mapping from the user-stream to the internal RawIterator\n-     *\n+     * <p>\n      * The generated iterator extends {@link BaseStreamIterator} and generates a tailored\n      * {@link BaseStreamIterator#map(Object)} method based on the signature of the user procedure.\n      *\n      * @param codeGenerator the current generator\n-     * @param outputType the output type of the user procedure\n+     * @param outputType    the output type of the user procedure\n      * @return a tailored iterator with appropriate code mappings\n      */\n-    private static Class<?> generateIterator( CodeGenerator codeGenerator, Class<?> outputType )\n+    private static Class<?> generateIterator(CodeGenerator codeGenerator, Class<?> outputType)\n     {\n-        if ( outputType.equals( void.class ) )\n+        if (outputType.equals(void.class))\n         {\n             return VOID_ITERATOR.getClass();\n         }\n \n         ClassHandle handle;\n-        try ( ClassGenerator generator = codeGenerator.generateClass( BaseStreamIterator.class, PACKAGE, iteratorName( outputType ) ) )\n+        try (ClassGenerator generator = codeGenerator.generateClass(BaseStreamIterator.class, PACKAGE, iteratorName(outputType)))\n         {\n-            FieldReference context = generator.field( Context.class, \"ctx\" );\n-            try ( CodeBlock constructor = generator.generateConstructor( param( Stream.class, \"stream\" ),\n-                    param( ResourceTracker.class, \"tracker\" ), param( ProcedureSignature.class, \"signature\" ), param( Context.class, \"ctx\" ) ) )\n+            FieldReference context = generator.field(Context.class, \"ctx\");\n+            try (CodeBlock constructor = generator.generateConstructor(param(Stream.class, \"stream\"),\n+              param(ResourceTracker.class, \"tracker\"), param(ProcedureSignature.class, \"signature\"), param(Context.class, \"ctx\")))\n             {\n                 constructor.expression(\n-                        invokeSuper( typeReference( BaseStreamIterator.class ), constructor.load( \"stream\" ),\n-                                constructor.load( \"tracker\" ), constructor.load( \"signature\" ) ) );\n-                constructor.put( constructor.self(), context, constructor.load( \"ctx\" ) );\n+                  invokeSuper(typeReference(BaseStreamIterator.class), constructor.load(\"stream\"),\n+                    constructor.load(\"tracker\"), constructor.load(\"signature\")));\n+                constructor.put(constructor.self(), context, constructor.load(\"ctx\"));\n             }\n \n-            try ( CodeBlock method = generator\n-                    .generate( method( AnyValue[].class, \"map\", param( Object.class, \"in\" ) ) ) )\n+            try (CodeBlock method = generator\n+              .generate(method(AnyValue[].class, \"map\", param(Object.class, \"in\"))))\n             {\n-                method.assign( outputType, \"casted\", cast( outputType, method.load( \"in\" ) ) );\n+                method.assign(outputType, \"casted\", cast(outputType, method.load(\"in\")));\n                 //we know all fields are properly typed\n-                List<Field> fields = ProcedureOutputSignatureCompiler.instanceFields( outputType );\n+                List<Field> fields = ProcedureOutputSignatureCompiler.instanceFields(outputType);\n                 Expression[] mapped = new Expression[fields.size()];\n-                for ( int i = 0; i < fields.size(); i++ )\n+                for (int i = 0; i < fields.size(); i++)\n                 {\n-                    Field f = fields.get( i );\n-                    mapped[i] = toAnyValue( get( method.load( \"casted\" ), field( f ) ), f.getType(), get( method.self(), context ) );\n+                    Field f = fields.get(i);\n+                    mapped[i] = toAnyValue(get(method.load(\"casted\"), field(f)), f.getType(), get(method.self(), context));\n                 }\n-                method.returns( Expression.newInitializedArray( typeReference( AnyValue.class ), mapped ) );\n+                method.returns(Expression.newInitializedArray(typeReference(AnyValue.class), mapped));\n             }\n             handle = generator.handle();\n         }\n@@ -628,60 +625,59 @@ public final class ProcedureCompilation\n         try\n         {\n             return handle.loadClass();\n-        }\n-        catch ( CompilationFailureException e )\n+        } catch (CompilationFailureException e)\n         {   //We are being called from a lambda so it'll have to do with runtime exceptions here\n-            throw new RuntimeException( \"Failed to generate iterator\", e );\n+            throw new RuntimeException(\"Failed to generate iterator\", e);\n         }\n     }\n \n-    private static Class<?> generateAggregator( CodeGenerator codeGenerator, Method update, Method result, UserFunctionSignature signature )\n+    private static Class<?> generateAggregator(CodeGenerator codeGenerator, Method update, Method result, UserFunctionSignature signature)\n     {\n-       assert update.getDeclaringClass().equals( result.getDeclaringClass() );\n+        assert update.getDeclaringClass().equals(result.getDeclaringClass());\n \n-       Class<?> userAggregatorClass = update.getDeclaringClass();\n+        Class<?> userAggregatorClass = update.getDeclaringClass();\n \n         ClassHandle handle;\n-        try ( ClassGenerator generator = codeGenerator\n-                .generateClass( PACKAGE, \"Aggregator\" + userAggregatorClass.getSimpleName() + System.nanoTime(),\n-                        UserAggregator.class ) )\n+        try (ClassGenerator generator = codeGenerator\n+          .generateClass(PACKAGE, \"Aggregator\" + userAggregatorClass.getSimpleName() + System.nanoTime(),\n+            UserAggregator.class))\n         {\n-            FieldReference aggregator = generator.field( userAggregatorClass, \"aggregator\" );\n-            FieldReference context = generator.field( Context.class, \"ctx\" );\n+            FieldReference aggregator = generator.field(userAggregatorClass, \"aggregator\");\n+            FieldReference context = generator.field(Context.class, \"ctx\");\n             //constructor\n-            try ( CodeBlock constructor = generator.generateConstructor( param( userAggregatorClass, \"aggregator\" ),\n-                    param( Context.class, \"ctx\" ) ) )\n+            try (CodeBlock constructor = generator.generateConstructor(param(userAggregatorClass, \"aggregator\"),\n+              param(Context.class, \"ctx\")))\n             {\n-                constructor.expression( invokeSuper( OBJECT ) );\n-                constructor.put( constructor.self(), aggregator, constructor.load( \"aggregator\" ) );\n-                constructor.put( constructor.self(), context, constructor.load( \"ctx\" ) );\n+                constructor.expression(invokeSuper(OBJECT));\n+                constructor.put(constructor.self(), aggregator, constructor.load(\"aggregator\"));\n+                constructor.put(constructor.self(), context, constructor.load(\"ctx\"));\n             }\n \n             //update\n-            try ( CodeBlock block = generator.generate( AGGREGATION_UPDATE ) )\n+            try (CodeBlock block = generator.generate(AGGREGATION_UPDATE))\n             {\n                 block.tryCatch(\n-                        onSuccess ->\n-                                onSuccess.expression( invoke( get( onSuccess.self(), aggregator ), methodReference( update ),\n-                                        parameters( onSuccess, update, get( onSuccess.self(), context ) ) ) ),\n-                        onError ->\n-                                onError( onError, format( \"function `%s`\", signature.name() ) ),\n-                        param( Throwable.class, \"T\" )\n+                  onSuccess ->\n+                    onSuccess.expression(invoke(get(onSuccess.self(), aggregator), methodReference(update),\n+                      parameters(onSuccess, update, get(onSuccess.self(), context)))),\n+                  onError ->\n+                    onError(onError, format(\"function `%s`\", signature.name())),\n+                  param(Throwable.class, \"T\")\n                 );\n             }\n \n             //result\n-            try ( CodeBlock block = generator.generate( AGGREGATION_RESULT ) )\n+            try (CodeBlock block = generator.generate(AGGREGATION_RESULT))\n             {\n \n                 block.tryCatch(\n-                        onSuccess ->\n-                                onSuccess.returns( toAnyValue(\n-                                        invoke( get( onSuccess.self(), aggregator ), methodReference( result ) ), result.getReturnType(),\n-                                        get( onSuccess.self(), context )) ),\n-                        onError ->\n-                                onError( onError, format( \"function `%s`\", signature.name() ) ),\n-                        param( Throwable.class, \"T\" ) );\n+                  onSuccess ->\n+                    onSuccess.returns(toAnyValue(\n+                      invoke(get(onSuccess.self(), aggregator), methodReference(result)), result.getReturnType(),\n+                      get(onSuccess.self(), context))),\n+                  onError ->\n+                    onError(onError, format(\"function `%s`\", signature.name())),\n+                  param(Throwable.class, \"T\"));\n             }\n \n             handle = generator.handle();\n@@ -690,26 +686,25 @@ public final class ProcedureCompilation\n         try\n         {\n             return handle.loadClass();\n-        }\n-        catch ( CompilationFailureException e )\n+        } catch (CompilationFailureException e)\n         {   //We are being called from a lambda so it'll have to do with runtime exceptions here\n-            throw new RuntimeException( \"Failed to generate iterator\", e );\n+            throw new RuntimeException(\"Failed to generate iterator\", e);\n         }\n     }\n \n-    private static String className( UserFunctionSignature signature )\n+    private static String className(UserFunctionSignature signature)\n     {\n-        return format( \"GeneratedFunction_%s%d\", signature.name().name(), System.nanoTime() );\n+        return format(\"GeneratedFunction_%s%d\", signature.name().name(), System.nanoTime());\n     }\n \n-    private static String className( ProcedureSignature signature )\n+    private static String className(ProcedureSignature signature)\n     {\n-        return format( \"GeneratedProcedure_%s%d\", signature.name().name(), System.nanoTime() );\n+        return format(\"GeneratedProcedure_%s%d\", signature.name().name(), System.nanoTime());\n     }\n \n-    private static String iteratorName( Class<?> out )\n+    private static String iteratorName(Class<?> out)\n     {\n-        return format( \"Iterator_%s%d\", out.getSimpleName(), System.nanoTime() );\n+        return format(\"Iterator_%s%d\", out.getSimpleName(), System.nanoTime());\n     }\n \n     /**\n@@ -720,142 +715,137 @@ public final class ProcedureCompilation\n      * ...\n      * return [CONVERT TO AnyVALUE](userClass.call( [CONVERT_TO_JAVA] input[0], ... );\n      */\n-    private static void functionBody( CodeBlock block,\n-            List<FieldSetter> fieldSetters, List<FieldReference> fieldsToSet,\n-            Method methodToCall )\n+    private static void functionBody(CodeBlock block,\n+                                     List<FieldSetter> fieldSetters, List<FieldReference> fieldsToSet,\n+                                     Method methodToCall)\n     {\n         //generate: `UserClass userClass = new UserClass();\n-        block.assign( typeReference( methodToCall.getDeclaringClass() ), USER_CLASS,\n-                invoke( newInstance( methodToCall.getDeclaringClass() ), constructorReference( methodToCall.getDeclaringClass() )));\n+        block.assign(typeReference(methodToCall.getDeclaringClass()), USER_CLASS,\n+          invoke(newInstance(methodToCall.getDeclaringClass()), constructorReference(methodToCall.getDeclaringClass())));\n         //inject fields in user class\n-        injectFields( block, fieldSetters, fieldsToSet );\n+        injectFields(block, fieldSetters, fieldsToSet);\n \n         //get parameters to the user-method to call\n-        Expression[] parameters = parameters( block, methodToCall, block.load(\"ctx\") );\n+        Expression[] parameters = parameters(block, methodToCall, block.load(\"ctx\"));\n \n         //call the actual function\n-        block.assign( methodToCall.getReturnType(), \"fromFunction\",\n-                invoke( block.load( USER_CLASS ), methodReference( methodToCall ), parameters ) );\n-        block.returns( toAnyValue( block.load( \"fromFunction\" ), methodToCall.getReturnType(), block.load( \"ctx\" ) ) );\n+        block.assign(methodToCall.getReturnType(), \"fromFunction\",\n+          invoke(block.load(USER_CLASS), methodReference(methodToCall), parameters));\n+        block.returns(toAnyValue(block.load(\"fromFunction\"), methodToCall.getReturnType(), block.load(\"ctx\")));\n     }\n \n-    private static void procedureBody( CodeBlock block,\n-            List<FieldSetter> fieldSetters, List<FieldReference> fieldsToSet,\n-            FieldReference signature, Method methodToCall, Class<?> iterator )\n+    private static void procedureBody(CodeBlock block,\n+                                      List<FieldSetter> fieldSetters, List<FieldReference> fieldsToSet,\n+                                      FieldReference signature, Method methodToCall, Class<?> iterator)\n     {\n         //generate: `UserClass userClass = new UserClass();\n-        block.assign( typeReference( methodToCall.getDeclaringClass() ), USER_CLASS,\n-                invoke( newInstance( methodToCall.getDeclaringClass() ), constructorReference( methodToCall.getDeclaringClass() )));\n-        injectFields( block, fieldSetters, fieldsToSet );\n-        Expression[] parameters = parameters( block, methodToCall, block.load(\"ctx\") );\n+        block.assign(typeReference(methodToCall.getDeclaringClass()), USER_CLASS,\n+          invoke(newInstance(methodToCall.getDeclaringClass()), constructorReference(methodToCall.getDeclaringClass())));\n+        injectFields(block, fieldSetters, fieldsToSet);\n+        Expression[] parameters = parameters(block, methodToCall, block.load(\"ctx\"));\n \n-        if ( iterator.equals( VOID_ITERATOR.getClass() ) )\n+        if (iterator.equals(VOID_ITERATOR.getClass()))\n         {   //if we are calling a void method we just need to call and return empty\n-            block.expression( invoke( block.load( USER_CLASS ), methodReference( methodToCall ), parameters ) );\n-            block.returns( getStatic( FieldReference.field( typeReference( ProcedureCompilation.class ),\n-                    typeReference( RawIterator.class ), \"VOID_ITERATOR\" ) ) );\n-        }\n-        else\n+            block.expression(invoke(block.load(USER_CLASS), methodReference(methodToCall), parameters));\n+            block.returns(getStatic(FieldReference.field(typeReference(ProcedureCompilation.class),\n+              typeReference(RawIterator.class), \"VOID_ITERATOR\")));\n+        } else\n         {   //here we must both call and map stream to an iterator\n-            block.assign( parameterizedType( Stream.class, procedureType( methodToCall ) ), \"fromProcedure\",\n-                    invoke( block.load( USER_CLASS ), methodReference( methodToCall ), parameters ) );\n-            block.returns( invoke( newInstance( iterator ),\n-                    constructorReference( iterator, Stream.class, ResourceTracker.class, ProcedureSignature.class, Context.class ),\n-                    block.load( \"fromProcedure\" ), block.load( \"tracker\" ), getStatic( signature ), block.load( \"ctx\" ) ) );\n+            block.assign(parameterizedType(Stream.class, procedureType(methodToCall)), \"fromProcedure\",\n+              invoke(block.load(USER_CLASS), methodReference(methodToCall), parameters));\n+            block.returns(invoke(newInstance(iterator),\n+              constructorReference(iterator, Stream.class, ResourceTracker.class, ProcedureSignature.class, Context.class),\n+              block.load(\"fromProcedure\"), block.load(\"tracker\"), getStatic(signature), block.load(\"ctx\")));\n         }\n     }\n \n-    private static Class<?> procedureType( Method method )\n+    private static Class<?> procedureType(Method method)\n     {\n         //return type is always Stream<> or void\n-        if ( method.getReturnType().equals( void.class ) )\n+        if (method.getReturnType().equals(void.class))\n         {\n             return void.class;\n-        }\n-        else\n+        } else\n         {\n             ParameterizedType returnType = (ParameterizedType) method.getGenericReturnType();\n             return (Class<?>) returnType.getActualTypeArguments()[0];\n         }\n     }\n \n-    private static void createAggregationBody( CodeBlock block,\n-            List<FieldSetter> fieldSetters, List<FieldReference> fieldsToSet,\n-            Method createMethod,  Class<?> aggregator )\n+    private static void createAggregationBody(CodeBlock block,\n+                                              List<FieldSetter> fieldSetters, List<FieldReference> fieldsToSet,\n+                                              Method createMethod, Class<?> aggregator)\n     {\n         //generate: `UserClass userClass = new UserClass();\n-        block.assign( typeReference( createMethod.getDeclaringClass() ), USER_CLASS,\n-                invoke( newInstance( createMethod.getDeclaringClass() ), constructorReference( createMethod.getDeclaringClass() )));\n+        block.assign(typeReference(createMethod.getDeclaringClass()), USER_CLASS,\n+          invoke(newInstance(createMethod.getDeclaringClass()), constructorReference(createMethod.getDeclaringClass())));\n         //inject fields in user class\n-        injectFields( block, fieldSetters, fieldsToSet );\n+        injectFields(block, fieldSetters, fieldsToSet);\n \n         //call the actual function\n-        block.assign( createMethod.getReturnType(), \"fromUser\",\n-                invoke( block.load( USER_CLASS ), methodReference( createMethod ) ) );\n-        block.returns( invoke( newInstance( aggregator ),\n-                constructorReference( aggregator, createMethod.getReturnType(), Context.class ),\n-                block.load( \"fromUser\" ), block.load( \"ctx\" ) ) );\n+        block.assign(createMethod.getReturnType(), \"fromUser\",\n+          invoke(block.load(USER_CLASS), methodReference(createMethod)));\n+        block.returns(invoke(newInstance(aggregator),\n+          constructorReference(aggregator, createMethod.getReturnType(), Context.class),\n+          block.load(\"fromUser\"), block.load(\"ctx\")));\n     }\n \n     /**\n      * Handle errors by redirecting to {@link #rethrowProcedureException(Throwable, String)}  }\n      */\n-    private static void onError( CodeBlock block, String typeAndName )\n+    private static void onError(CodeBlock block, String typeAndName)\n     {\n \n         block.throwException(\n-                invoke( methodReference( ProcedureCompilation.class, ProcedureException.class,\n-                        \"rethrowProcedureException\", Throwable.class, String.class ),\n-                        block.load( \"T\" ),\n-                        constant( typeAndName ) ) );\n+          invoke(methodReference(ProcedureCompilation.class, ProcedureException.class,\n+            \"rethrowProcedureException\", Throwable.class, String.class),\n+            block.load(\"T\"),\n+            constant(typeAndName)));\n     }\n \n     /**\n      * Used for properly setting a primitive field\n-     *\n+     * <p>\n      * For example say that the class has a field of type long. Then we will generate the RHS of.\n      * <pre>\n      *     userClass.longField = ((Long) invoke).longValue()\n      * </pre>\n      *\n      * @param fieldType the type of the field\n-     * @param invoke the expression used to set the field\n+     * @param invoke    the expression used to set the field\n      * @return an expression where casting and boxing/unboxing has been taken care of.\n      */\n-    private static Expression unboxIfNecessary( Class<?> fieldType, Expression invoke )\n+    private static Expression unboxIfNecessary(Class<?> fieldType, Expression invoke)\n     {\n-        if ( fieldType.isPrimitive() )\n+        if (fieldType.isPrimitive())\n         {\n-            return unbox( cast( toBoxedType( typeReference( fieldType ) ), invoke ) );\n-        }\n-        else\n+            return unbox(cast(toBoxedType(typeReference(fieldType)), invoke));\n+        } else\n         {\n-            return cast( fieldType, invoke );\n+            return cast(fieldType, invoke);\n         }\n     }\n \n     private static CodeGenerator codeGenerator() throws CodeGenerationNotSupportedException\n     {\n-        if ( DEBUG )\n+        if (DEBUG)\n         {\n-            return generateCode( CallableUserFunction.class.getClassLoader(), SOURCECODE, PRINT_SOURCE );\n-        }\n-        else\n+            return generateCode(CallableUserFunction.class.getClassLoader(), SOURCECODE, PRINT_SOURCE);\n+        } else\n         {\n-            return generateCode( CallableUserFunction.class.getClassLoader(), BYTECODE );\n+            return generateCode(CallableUserFunction.class.getClassLoader(), BYTECODE);\n         }\n     }\n \n-    private static byte asByte( AnyValue value )\n+    private static byte asByte(AnyValue value)\n     {\n-        if ( value instanceof ByteValue )\n+        if (value instanceof ByteValue)\n         {\n             return ((ByteValue) value).value();\n-        }\n-        else\n+        } else\n         {\n             throw new IllegalArgumentException(\n-                    \"Cannot convert \" + value.map( new DefaultValueMapper( null ) ) + \" to byte for input to procedure\" );\n+              \"Cannot convert \" + value.map(new DefaultValueMapper(null)) + \" to byte for input to procedure\");\n         }\n     }\n \n@@ -864,125 +854,104 @@ public final class ProcedureCompilation\n      * it into the corresponding AnyValue\n      *\n      * @param expression the expression to evaluate\n-     * @param userType the type of the expression to map\n+     * @param userType   the type of the expression to map\n      * @return an expression properly mapped to AnyValue\n      */\n-    private static Expression toAnyValue( Expression expression, Class<?> userType, Expression context )\n+    private static Expression toAnyValue(Expression expression, Class<?> userType, Expression context)\n     {\n-        if ( AnyValue.class.isAssignableFrom( userType ) )\n+        if (AnyValue.class.isAssignableFrom(userType))\n         {\n-            return nullCheck( expression, cast( userType, expression ) );\n+            return nullCheck(expression, cast(userType, expression));\n         }\n \n         String type = userType.getCanonicalName();\n-        if ( type.equals( LONG ) )\n+        if (type.equals(LONG))\n         {\n-            return invoke( methodReference( Values.class, LongValue.class, \"longValue\", long.class ), expression );\n-        }\n-        else if ( type.equals( BOXED_LONG ) )\n+            return invoke(methodReference(Values.class, LongValue.class, \"longValue\", long.class), expression);\n+        } else if (type.equals(BOXED_LONG))\n         {\n-            return nullCheck( expression, invoke( methodReference( Values.class, LongValue.class, \"longValue\", long.class ),\n-                    unbox( expression ) ));\n-        }\n-        else if ( type.equals( DOUBLE ) )\n+            return nullCheck(expression, invoke(methodReference(Values.class, LongValue.class, \"longValue\", long.class),\n+              unbox(expression)));\n+        } else if (type.equals(DOUBLE))\n         {\n-            return invoke( methodReference( Values.class, DoubleValue.class, \"doubleValue\", double.class ),\n-                    expression );\n-        }\n-        else if ( type.equals( BOXED_DOUBLE ) )\n+            return invoke(methodReference(Values.class, DoubleValue.class, \"doubleValue\", double.class),\n+              expression);\n+        } else if (type.equals(BOXED_DOUBLE))\n         {\n-            return nullCheck( expression, invoke( methodReference( Values.class, DoubleValue.class, \"doubleValue\", double.class ),\n-                    unbox( expression )));\n-        }\n-        else if ( type.equals( NUMBER ) )\n+            return nullCheck(expression, invoke(methodReference(Values.class, DoubleValue.class, \"doubleValue\", double.class),\n+              unbox(expression)));\n+        } else if (type.equals(NUMBER))\n         {\n-            return nullCheck( expression, invoke( methodReference( Values.class, NumberValue.class, \"numberValue\", Number.class ), expression ));\n-        }\n-        else if ( type.equals( BOOLEAN ) )\n+            return nullCheck(expression, invoke(methodReference(Values.class, NumberValue.class, \"numberValue\", Number.class), expression));\n+        } else if (type.equals(BOOLEAN))\n         {\n-            return invoke( methodReference( Values.class, BooleanValue.class, \"booleanValue\", boolean.class ),\n-                    expression );\n-        }\n-        else if ( type.equals( BOXED_BOOLEAN ) )\n+            return invoke(methodReference(Values.class, BooleanValue.class, \"booleanValue\", boolean.class),\n+              expression);\n+        } else if (type.equals(BOXED_BOOLEAN))\n         {\n-            return nullCheck( expression, invoke( methodReference( Values.class, BooleanValue.class, \"booleanValue\", boolean.class ),\n-                    unbox( expression ) ));\n-        }\n-        else if ( type.equals( STRING ) )\n+            return nullCheck(expression, invoke(methodReference(Values.class, BooleanValue.class, \"booleanValue\", boolean.class),\n+              unbox(expression)));\n+        } else if (type.equals(STRING))\n         {\n-            return invoke( methodReference( Values.class, Value.class, \"stringOrNoValue\", String.class ), expression );\n-        }\n-        else if ( type.equals( BYTE_ARRAY ) )\n+            return invoke(methodReference(Values.class, Value.class, \"stringOrNoValue\", String.class), expression);\n+        } else if (type.equals(BYTE_ARRAY))\n         {\n-            return nullCheck( expression, invoke( methodReference( Values.class, ByteArray.class, \"byteArray\", byte[].class ), expression ));\n-        }\n-        else if ( type.equals( LIST ) )\n+            return nullCheck(expression, invoke(methodReference(Values.class, ByteArray.class, \"byteArray\", byte[].class), expression));\n+        } else if (type.equals(LIST))\n         {\n-            return nullCheck( expression, invoke( methodReference( ValueUtils.class, ListValue.class, \"asListValue\", Iterable.class ),\n-                    expression ));\n-        }\n-        else if ( type.equals( MAP ) )\n+            return nullCheck(expression, invoke(methodReference(ValueUtils.class, ListValue.class, \"asListValue\", Iterable.class),\n+              expression));\n+        } else if (type.equals(MAP))\n         {\n-            return nullCheck( expression, invoke( methodReference( ValueUtils.class, MapValue.class, \"asMapValue\", Map.class ),\n-                    expression ));\n-        }\n-        else if ( type.equals( ZONED_DATE_TIME ) )\n+            return nullCheck(expression, invoke(methodReference(ValueUtils.class, MapValue.class, \"asMapValue\", Map.class),\n+              expression));\n+        } else if (type.equals(ZONED_DATE_TIME))\n         {\n-            return nullCheck( expression, invoke( methodReference( DateTimeValue.class, DateTimeValue.class, \"datetime\", ZonedDateTime.class ),\n-                    expression ));\n-        }\n-        else if ( type.equals( OFFSET_TIME ) )\n+            return nullCheck(expression, invoke(methodReference(DateTimeValue.class, DateTimeValue.class, \"datetime\", ZonedDateTime.class),\n+              expression));\n+        } else if (type.equals(OFFSET_TIME))\n         {\n-            return nullCheck( expression, invoke( methodReference( TimeValue.class, TimeValue.class, \"time\", OffsetTime.class ),\n-                    expression ));\n-        }\n-        else if ( type.equals( LOCAL_DATE ) )\n+            return nullCheck(expression, invoke(methodReference(TimeValue.class, TimeValue.class, \"time\", OffsetTime.class),\n+              expression));\n+        } else if (type.equals(LOCAL_DATE))\n         {\n-            return nullCheck( expression, invoke( methodReference( DateValue.class, DateValue.class, \"date\", LocalDate.class ),\n-                    expression ));\n-        }\n-        else if ( type.equals( LOCAL_TIME ) )\n+            return nullCheck(expression, invoke(methodReference(DateValue.class, DateValue.class, \"date\", LocalDate.class),\n+              expression));\n+        } else if (type.equals(LOCAL_TIME))\n         {\n-            return nullCheck( expression, invoke( methodReference( LocalTimeValue.class, LocalTimeValue.class, \"localTime\", LocalTime.class ),\n-                    expression ));\n-        }\n-        else if ( type.equals( LOCAL_DATE_TIME ) )\n+            return nullCheck(expression, invoke(methodReference(LocalTimeValue.class, LocalTimeValue.class, \"localTime\", LocalTime.class),\n+              expression));\n+        } else if (type.equals(LOCAL_DATE_TIME))\n         {\n-            return nullCheck( expression, invoke( methodReference( LocalDateTimeValue.class, LocalDateTimeValue.class, \"localDateTime\",\n-                    LocalDateTime.class ), expression ));\n-        }\n-        else if ( type.equals( TEMPORAL_AMOUNT ) )\n+            return nullCheck(expression, invoke(methodReference(LocalDateTimeValue.class, LocalDateTimeValue.class, \"localDateTime\",\n+              LocalDateTime.class), expression));\n+        } else if (type.equals(TEMPORAL_AMOUNT))\n         {\n-            return nullCheck( expression, invoke( methodReference( Values.class, DurationValue.class, \"durationValue\",\n-                    TemporalAmount.class ), expression ));\n-        }\n-        else if ( type.equals( NODE ) )\n+            return nullCheck(expression, invoke(methodReference(Values.class, DurationValue.class, \"durationValue\",\n+              TemporalAmount.class), expression));\n+        } else if (type.equals(NODE))\n         {\n-            Expression internalTransaction = invoke( context, methodReference( Context.class, InternalTransaction.class, \"internalTransactionOrNull\" ) );\n-            Expression getNode = invoke( internalTransaction,\n-                                         methodReference( InternalTransaction.class, Entity.class, \"validateSameDB\", Entity.class ), expression );\n-            return nullCheck( expression, invoke( methodReference( ValueUtils.class, NodeValue.class, \"fromNodeEntity\", Node.class ), getNode ) );\n-        }\n-        else if ( type.equals( RELATIONSHIP ) )\n+            Expression internalTransaction = invoke(context, methodReference(Context.class, InternalTransaction.class, \"internalTransactionOrNull\"));\n+            Expression getNode = invoke(internalTransaction,\n+              methodReference(InternalTransaction.class, Entity.class, \"validateSameDB\", Entity.class), expression);\n+            return nullCheck(expression, invoke(methodReference(ValueUtils.class, NodeValue.class, \"fromNodeEntity\", Node.class), getNode));\n+        } else if (type.equals(RELATIONSHIP))\n         {\n-            Expression internalTransaction = invoke( context, methodReference( Context.class, InternalTransaction.class, \"internalTransactionOrNull\" ) );\n+            Expression internalTransaction = invoke(context, methodReference(Context.class, InternalTransaction.class, \"internalTransactionOrNull\"));\n             Expression getRelationship =\n-                    invoke( internalTransaction, methodReference( InternalTransaction.class, Entity.class, \"validateSameDB\", Entity.class ), expression );\n-            return nullCheck( expression, invoke(\n-                    methodReference( ValueUtils.class, RelationshipValue.class, \"fromRelationshipEntity\", Relationship.class ), getRelationship ) );\n-        }\n-        else if ( type.equals( PATH ) )\n+              invoke(internalTransaction, methodReference(InternalTransaction.class, Entity.class, \"validateSameDB\", Entity.class), expression);\n+            return nullCheck(expression, invoke(\n+              methodReference(ValueUtils.class, RelationshipValue.class, \"fromRelationshipEntity\", Relationship.class), getRelationship));\n+        } else if (type.equals(PATH))\n         {\n-            return nullCheck( expression, invoke( methodReference( ValueUtils.class, PathValue.class, \"fromPath\", Path.class ), expression ));\n-        }\n-        else if ( type.equals( POINT ) )\n+            return nullCheck(expression, invoke(methodReference(ValueUtils.class, PathValue.class, \"fromPath\", Path.class), expression));\n+        } else if (type.equals(POINT))\n         {\n-            return nullCheck( expression, invoke( methodReference( ValueUtils.class, PointValue.class, \"asPointValue\", Point.class ),\n-                    expression ));\n-        }\n-        else\n+            return nullCheck(expression, invoke(methodReference(ValueUtils.class, PointValue.class, \"asPointValue\", Point.class),\n+              expression));\n+        } else\n         {\n-            return invoke( methodReference( ValueUtils.class, AnyValue.class, \"of\", Object.class ), expression );\n+            return invoke(methodReference(ValueUtils.class, AnyValue.class, \"of\", Object.class), expression);\n         }\n     }\n \n@@ -994,123 +963,107 @@ public final class ProcedureCompilation\n      * for Graph types such as Nodes, Relationships and Paths we will use a ValueMapper.\n      *\n      * @param expectedType the java type expected by the procedure or function\n-     * @param expression an expression that will evaluate to an AnyValue\n-     * @param block The current code block.\n-     * @param context The current context.\n+     * @param expression   an expression that will evaluate to an AnyValue\n+     * @param block        The current code block.\n+     * @param context      The current context.\n      * @return an expression properly typed to be consumed by function or procedure\n      */\n-    private static Expression fromAnyValue( Class<?> expectedType, Expression expression, CodeBlock block,\n-            Expression context )\n+    private static Expression fromAnyValue(Class<?> expectedType, Expression expression, CodeBlock block,\n+                                           Expression context)\n     {\n-        if ( AnyValue.class.isAssignableFrom( expectedType ) )\n+        if (AnyValue.class.isAssignableFrom(expectedType))\n         {\n-            return cast( expectedType, expression);\n+            return cast(expectedType, expression);\n         }\n \n         String type = expectedType.getCanonicalName();\n-        if ( type.equals( LONG ) )\n+        if (type.equals(LONG))\n         {\n-            return invoke( cast( NumberValue.class, expression ),\n-                    methodReference( NumberValue.class, long.class, \"longValue\" ) );\n-        }\n-        else if ( type.equals( BOXED_LONG ) )\n+            return invoke(cast(NumberValue.class, expression),\n+              methodReference(NumberValue.class, long.class, \"longValue\"));\n+        } else if (type.equals(BOXED_LONG))\n         {\n-            return noValueCheck( expression, box( invoke( cast( NumberValue.class, expression ),\n-                    methodReference( NumberValue.class, long.class, \"longValue\" ) ) ));\n-        }\n-        else if ( type.equals( DOUBLE ) )\n+            return noValueCheck(expression, box(invoke(cast(NumberValue.class, expression),\n+              methodReference(NumberValue.class, long.class, \"longValue\"))));\n+        } else if (type.equals(DOUBLE))\n         {\n-            return invoke( cast( NumberValue.class, expression ),\n-                    methodReference( NumberValue.class, double.class, \"doubleValue\" ) );\n-        }\n-        else if ( type.equals( BOXED_DOUBLE ) )\n+            return invoke(cast(NumberValue.class, expression),\n+              methodReference(NumberValue.class, double.class, \"doubleValue\"));\n+        } else if (type.equals(BOXED_DOUBLE))\n         {\n-            return noValueCheck( expression,box( invoke( cast( NumberValue.class, expression ),\n-                    methodReference( NumberValue.class, double.class, \"doubleValue\" ) ) ));\n-        }\n-        else if ( type.equals( NUMBER ) )\n+            return noValueCheck(expression, box(invoke(cast(NumberValue.class, expression),\n+              methodReference(NumberValue.class, double.class, \"doubleValue\"))));\n+        } else if (type.equals(NUMBER))\n         {\n-            return noValueCheck( expression, invoke( cast( NumberValue.class, expression ),\n-                    methodReference( NumberValue.class, Number.class, \"asObjectCopy\" ) ));\n-        }\n-        else if ( type.equals( BOOLEAN ) )\n+            return noValueCheck(expression, invoke(cast(NumberValue.class, expression),\n+              methodReference(NumberValue.class, Number.class, \"asObjectCopy\")));\n+        } else if (type.equals(BOOLEAN))\n         {\n-            return invoke( cast( BooleanValue.class, expression ),\n-                    methodReference( BooleanValue.class, boolean.class, \"booleanValue\" ) );\n-        }\n-        else if ( type.equals( BOXED_BOOLEAN ) )\n+            return invoke(cast(BooleanValue.class, expression),\n+              methodReference(BooleanValue.class, boolean.class, \"booleanValue\"));\n+        } else if (type.equals(BOXED_BOOLEAN))\n         {\n-            return noValueCheck(expression, box( invoke( cast( BooleanValue.class, expression ),\n-                    methodReference( BooleanValue.class, boolean.class, \"booleanValue\" ) ) ));\n-        }\n-        else if ( type.equals( STRING ) )\n+            return noValueCheck(expression, box(invoke(cast(BooleanValue.class, expression),\n+              methodReference(BooleanValue.class, boolean.class, \"booleanValue\"))));\n+        } else if (type.equals(STRING))\n         {\n-            return noValueCheck( expression, invoke( cast( TextValue.class, expression ),\n-                    methodReference( TextValue.class, String.class, \"stringValue\" ) ));\n-        }\n-        else if ( type.equals( BYTE_ARRAY ) )\n+            return noValueCheck(expression, invoke(cast(TextValue.class, expression),\n+              methodReference(TextValue.class, String.class, \"stringValue\")));\n+        } else if (type.equals(BYTE_ARRAY))\n         {\n-            return noValueCheck( expression, invoke(\n-                    methodReference( ProcedureCompilation.class, byte[].class, \"toByteArray\", AnyValue.class ),\n-                    expression ));\n-        }\n-        else if ( type.equals( ZONED_DATE_TIME ) )\n+            return noValueCheck(expression, invoke(\n+              methodReference(ProcedureCompilation.class, byte[].class, \"toByteArray\", AnyValue.class),\n+              expression));\n+        } else if (type.equals(ZONED_DATE_TIME))\n         {\n-            return  noValueCheck( expression, cast(ZonedDateTime.class, invoke( cast( DateTimeValue.class, expression ),\n-                    methodReference( DateTimeValue.class, Temporal.class, \"asObjectCopy\" ) )));\n-        }\n-        else if ( type.equals( OFFSET_TIME ) )\n+            return noValueCheck(expression, cast(ZonedDateTime.class, invoke(cast(DateTimeValue.class, expression),\n+              methodReference(DateTimeValue.class, Temporal.class, \"asObjectCopy\"))));\n+        } else if (type.equals(OFFSET_TIME))\n         {\n-            return  noValueCheck( expression, cast(OffsetTime.class, invoke( cast( TimeValue.class, expression ),\n-                    methodReference( TimeValue.class, Temporal.class, \"asObjectCopy\" ) )));\n-        }\n-        else if ( type.equals( LOCAL_DATE ) )\n+            return noValueCheck(expression, cast(OffsetTime.class, invoke(cast(TimeValue.class, expression),\n+              methodReference(TimeValue.class, Temporal.class, \"asObjectCopy\"))));\n+        } else if (type.equals(LOCAL_DATE))\n         {\n-            return noValueCheck( expression, cast(LocalDate.class, invoke( cast( DateValue.class, expression ),\n-                    methodReference( DateValue.class, Temporal.class, \"asObjectCopy\" ) )));\n-        }\n-        else if ( type.equals( LOCAL_TIME ) )\n+            return noValueCheck(expression, cast(LocalDate.class, invoke(cast(DateValue.class, expression),\n+              methodReference(DateValue.class, Temporal.class, \"asObjectCopy\"))));\n+        } else if (type.equals(LOCAL_TIME))\n         {\n-            return noValueCheck( expression, cast(LocalTime.class, invoke( cast( LocalTimeValue.class, expression ),\n-                    methodReference( LocalTimeValue.class, Temporal.class, \"asObjectCopy\" ) )));\n-        }\n-        else if ( type.equals( LOCAL_DATE_TIME ) )\n+            return noValueCheck(expression, cast(LocalTime.class, invoke(cast(LocalTimeValue.class, expression),\n+              methodReference(LocalTimeValue.class, Temporal.class, \"asObjectCopy\"))));\n+        } else if (type.equals(LOCAL_DATE_TIME))\n         {\n-            return  noValueCheck( expression, cast(LocalDateTime.class, invoke( cast( LocalDateTimeValue.class, expression ),\n-                    methodReference( LocalDateTimeValue.class, Temporal.class, \"asObjectCopy\" ) )));\n-        }\n-        else if ( type.equals( TEMPORAL_AMOUNT ) )\n+            return noValueCheck(expression, cast(LocalDateTime.class, invoke(cast(LocalDateTimeValue.class, expression),\n+              methodReference(LocalDateTimeValue.class, Temporal.class, \"asObjectCopy\"))));\n+        } else if (type.equals(TEMPORAL_AMOUNT))\n         {\n-            return noValueCheck( expression, cast( TemporalAmount.class, expression ) );\n-        }\n-        else if ( type.equals( POINT ) )\n+            return noValueCheck(expression, cast(TemporalAmount.class, expression));\n+        } else if (type.equals(POINT))\n         {\n-            return noValueCheck( expression, invoke( cast( PointValue.class, expression ),\n-                    methodReference( PointValue.class, Point.class, \"asObjectCopy\" ) ));\n-        }\n-        else\n+            return noValueCheck(expression, invoke(cast(PointValue.class, expression),\n+              methodReference(PointValue.class, Point.class, \"asObjectCopy\")));\n+        } else\n         {\n-            return cast( expectedType, invoke(\n-                            expression,\n-                            methodReference( AnyValue.class, Object.class, \"map\", ValueMapper.class ),\n-                            invoke( context, methodReference( Context.class, ValueMapper.class, \"valueMapper\" ) ) ) );\n+            return cast(expectedType, invoke(\n+              expression,\n+              methodReference(AnyValue.class, Object.class, \"map\", ValueMapper.class),\n+              invoke(context, methodReference(Context.class, ValueMapper.class, \"valueMapper\"))));\n         }\n     }\n \n     /**\n      * toCheck == null ? Values.NO_VALUE : onNotNull;\n      */\n-    private static Expression nullCheck( Expression toCheck, Expression onNotNull )\n+    private static Expression nullCheck(Expression toCheck, Expression onNotNull)\n     {\n-        return ternary( equal( toCheck, constant( null ) ), noValue(), onNotNull );\n+        return ternary(equal(toCheck, constant(null)), noValue(), onNotNull);\n     }\n \n     /**\n      * toCheck == NO_VALUE ? null : onNotNoValue;\n      */\n-    private static Expression noValueCheck( Expression toCheck, Expression onNotNoValue )\n+    private static Expression noValueCheck(Expression toCheck, Expression onNotNoValue)\n     {\n-        return ternary( equal( toCheck, noValue() ), constant( null ), onNotNoValue );\n+        return ternary(equal(toCheck, noValue()), constant(null), onNotNoValue);\n     }\n \n     /**\n@@ -1118,57 +1071,57 @@ public final class ProcedureCompilation\n      */\n     private static Expression noValue()\n     {\n-        return getStatic( field( typeReference( Values.class ), typeReference( Value.class ), \"NO_VALUE\" ) );\n+        return getStatic(field(typeReference(Values.class), typeReference(Value.class), \"NO_VALUE\"));\n     }\n \n-    private static Expression[] parameters( CodeBlock block, Method methodToCall, Expression context )\n+    private static Expression[] parameters(CodeBlock block, Method methodToCall, Expression context)\n     {\n         Class<?>[] parameterTypes = methodToCall.getParameterTypes();\n         Expression[] parameters = new Expression[parameterTypes.length];\n-        for ( int i = 0; i < parameterTypes.length; i++ )\n+        for (int i = 0; i < parameterTypes.length; i++)\n         {\n-            parameters[i] = fromAnyValue( parameterTypes[i] , arrayLoad( block.load( \"input\" ), constant( i ) ), block,\n-                    context );\n+            parameters[i] = fromAnyValue(parameterTypes[i], arrayLoad(block.load(\"input\"), constant(i)), block,\n+              context);\n         }\n         return parameters;\n     }\n \n-    private static void injectFields( CodeBlock block, List<FieldSetter> fieldSetters,\n-            List<FieldReference> fieldsToSet )\n+    private static void injectFields(CodeBlock block, List<FieldSetter> fieldSetters,\n+                                     List<FieldReference> fieldsToSet)\n     {\n-        for ( int i = 0; i < fieldSetters.size(); i++ )\n+        for (int i = 0; i < fieldSetters.size(); i++)\n         {\n-            FieldSetter setter = fieldSetters.get( i );\n+            FieldSetter setter = fieldSetters.get(i);\n             Field field = setter.field();\n             Class<?> fieldType = field.getType();\n-            block.put( block.load( USER_CLASS ), field( field ),\n-                    unboxIfNecessary( fieldType,\n-                            invoke(\n-                                    getStatic( fieldsToSet.get( i ) ),\n-                                    methodReference( typeReference( FieldSetter.class ), OBJECT, \"get\",\n-                                            typeReference( Context.class ) ),\n-                                    block.load( \"ctx\" ) ) ) );\n+            block.put(block.load(USER_CLASS), field(field),\n+              unboxIfNecessary(fieldType,\n+                invoke(\n+                  getStatic(fieldsToSet.get(i)),\n+                  methodReference(typeReference(FieldSetter.class), OBJECT, \"get\",\n+                    typeReference(Context.class)),\n+                  block.load(\"ctx\"))));\n         }\n     }\n \n-    private static List<FieldReference> createContextSetters( List<FieldSetter> fieldSetters, ClassGenerator generator )\n+    private static List<FieldReference> createContextSetters(List<FieldSetter> fieldSetters, ClassGenerator generator)\n     {\n-        List<FieldReference> fieldsToSet = new ArrayList<>( fieldSetters.size() );\n-        for ( int i = 0; i < fieldSetters.size(); i++ )\n+        List<FieldReference> fieldsToSet = new ArrayList<>(fieldSetters.size());\n+        for (int i = 0; i < fieldSetters.size(); i++)\n         {\n-            fieldsToSet.add( generator.publicStaticField( typeReference( FieldSetter.class ), \"SETTER_\" + i ) );\n+            fieldsToSet.add(generator.publicStaticField(typeReference(FieldSetter.class), \"SETTER_\" + i));\n         }\n         return fieldsToSet;\n     }\n \n-    private static void setAllStaticFields( Object signature, List<FieldSetter> fieldSetters,\n-            Method methodToCall, Class<?> clazz )\n-            throws IllegalAccessException, NoSuchFieldException\n+    private static void setAllStaticFields(Object signature, List<FieldSetter> fieldSetters,\n+                                           Method methodToCall, Class<?> clazz)\n+      throws IllegalAccessException, NoSuchFieldException\n     {\n-        clazz.getDeclaredField( SIGNATURE_NAME ).set( null, signature );\n-        for ( int i = 0; i < fieldSetters.size(); i++ )\n+        clazz.getDeclaredField(SIGNATURE_NAME).set(null, signature);\n+        for (int i = 0; i < fieldSetters.size(); i++)\n         {\n-            clazz.getDeclaredField( \"SETTER_\" + i ).set(null, fieldSetters.get( i ));\n+            clazz.getDeclaredField(\"SETTER_\" + i).set(null, fieldSetters.get(i));\n         }\n     }\n \n",
            "diff_size": 448
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}