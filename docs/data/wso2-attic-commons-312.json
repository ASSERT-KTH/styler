{
    "project_name": "wso2-attic-commons",
    "error_id": "312",
    "information": {
        "errors": [
            {
                "line": "73",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * @see org.apache.ode.bpel.compiler.v2.ExpressionCompiler#setCompilerContext(org.apache.ode.bpel.compiler.v2.CompilerContext)\n     */\n    public void setCompilerContext(CompilerContext compilerContext) {\n        _compilerContext = compilerContext;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/312/JaxpXPath10ExpressionCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/312/JaxpXPath10ExpressionCompilerImpl.java\nindex 3d7f0d52821..722c31a9f0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/312/JaxpXPath10ExpressionCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/312/JaxpXPath10ExpressionCompilerImpl.java\n@@ -3,13 +3,14 @@\n  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the\n  * License. You may obtain a copy of the License at\n- * \n+ *\n  * http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n  * specific language governing permissions and limitations under the License.\n  */\n+\n package org.apache.ode.bpel.compiler.v2.xpath10.jaxp;\n \n import java.util.HashMap;\n@@ -37,84 +38,87 @@ import org.w3c.dom.Node;\n  * XPath compiler based on the default JAXP implementation. Supports both 2.0 and 1.1 BPEL.\n  */\n public abstract class JaxpXPath10ExpressionCompilerImpl implements ExpressionCompiler {\n-    /** Class-level logger. */\n-    private static final Log __log = LogFactory.getLog(JaxpXPath10ExpressionCompilerImpl.class);\n-\n-    private static final XPathMessages __msgs = MessageBundle.getMessages(XPathMessages.class);\n-\n-    protected CompilerContext _compilerContext;\n-\n-    /** Namespace of the BPEL functions (for v2 to v1 compatibility) . */\n-    private String _bpelNsURI;\n-\n-    protected QName _qnFnGetVariableData;\n-\n-    protected QName _qnFnGetVariableProperty;\n-\n-    protected QName _qnFnGetLinkStatus;\n-\n-    protected Map<String, String> _properties = new HashMap<String, String>();\n-\n-    /**\n-     * Construtor.\n-     * \n-     * @param bpelNsURI\n-     *            the BPEL extension function namespace; varies depending on BPEL version.\n-     */\n-    public JaxpXPath10ExpressionCompilerImpl(String bpelNsURI) {\n-        _bpelNsURI = bpelNsURI;\n-        _qnFnGetVariableData = new QName(_bpelNsURI, \"getVariableData\");\n-        _qnFnGetVariableProperty = new QName(_bpelNsURI, \"getVariableProperty\");\n-        _qnFnGetLinkStatus = new QName(_bpelNsURI, \"getLinkStatus\");\n-        _properties.put(\"runtime-class\", \"org.apache.ode.bpel.rtrep.v2.xpath10.jaxp.JaxpXPath10ExpressionRuntime\");\n-    }\n-\n-    /**\n-     * @see org.apache.ode.bpel.compiler.v2.ExpressionCompiler#setCompilerContext(org.apache.ode.bpel.compiler.v2.CompilerContext)\n-     */\n-    public void setCompilerContext(CompilerContext compilerContext) {\n-        _compilerContext = compilerContext;\n+  /**\n+   * Class-level logger.\n+   */\n+  private static final Log __log = LogFactory.getLog(JaxpXPath10ExpressionCompilerImpl.class);\n+\n+  private static final XPathMessages __msgs = MessageBundle.getMessages(XPathMessages.class);\n+\n+  protected CompilerContext _compilerContext;\n+\n+  /**\n+   * Namespace of the BPEL functions (for v2 to v1 compatibility) .\n+   */\n+  private String _bpelNsURI;\n+\n+  protected QName _qnFnGetVariableData;\n+\n+  protected QName _qnFnGetVariableProperty;\n+\n+  protected QName _qnFnGetLinkStatus;\n+\n+  protected Map<String, String> _properties = new HashMap<String, String>();\n+\n+  /**\n+   * Construtor.\n+   *\n+   * @param bpelNsURI the BPEL extension function namespace; varies depending on BPEL version.\n+   */\n+  public JaxpXPath10ExpressionCompilerImpl(String bpelNsURI) {\n+    _bpelNsURI = bpelNsURI;\n+    _qnFnGetVariableData = new QName(_bpelNsURI, \"getVariableData\");\n+    _qnFnGetVariableProperty = new QName(_bpelNsURI, \"getVariableProperty\");\n+    _qnFnGetLinkStatus = new QName(_bpelNsURI, \"getLinkStatus\");\n+    _properties.put(\"runtime-class\", \"org.apache.ode.bpel.rtrep.v2.xpath10.jaxp.JaxpXPath10ExpressionRuntime\");\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.compiler.v2.ExpressionCompiler#setCompilerContext(org.apache.ode.bpel.compiler.v2.CompilerContext)\n+   */\n+  public void setCompilerContext(CompilerContext compilerContext) {\n+    _compilerContext = compilerContext;\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.compiler.v2.ExpressionCompiler#getProperties()\n+   */\n+  public Map<String, String> getProperties() {\n+    return _properties;\n+  }\n+\n+  /**\n+   * Verifies validity of a xpath expression.\n+   */\n+  protected void doJaxpCompile(OXPath10Expression out, Expression source) throws CompilationException {\n+    String xpathStr;\n+    Node node = source.getExpression();\n+    if (node == null) {\n+      throw new IllegalStateException(\"XPath string and xpath node are both null\");\n     }\n \n-    /**\n-     * @see org.apache.ode.bpel.compiler.v2.ExpressionCompiler#getProperties()\n-     */\n-    public Map<String, String> getProperties() {\n-        return _properties;\n+    xpathStr = node.getNodeValue();\n+    xpathStr = xpathStr.trim();\n+    if (xpathStr.length() == 0) {\n+      throw new CompilationException(__msgs.errXPathSyntax(xpathStr));\n     }\n \n-    /**\n-     * Verifies validity of a xpath expression.\n-     */\n-    protected void doJaxpCompile(OXPath10Expression out, Expression source) throws CompilationException {\n-        String xpathStr;\n-        Node node = source.getExpression();\n-        if (node == null) {\n-            throw new IllegalStateException(\"XPath string and xpath node are both null\");\n-        }\n-\n-        xpathStr = node.getNodeValue();\n-        xpathStr = xpathStr.trim();\n-        if (xpathStr.length() == 0) {\n-            throw new CompilationException(__msgs.errXPathSyntax(xpathStr));\n-        }\n-\n-        try {\n-            __log.debug(\"JAXP compile: xpath = \" + xpathStr);\n-            // use default XPath implementation\n-            XPathFactory xpf = XPathFactory.newInstance();\n-            __log.debug(\"JAXP compile: XPathFactory impl = \" + xpf.getClass());\n-            XPath xpath = xpf.newXPath();\n-            xpath.setXPathFunctionResolver(new JaxpFunctionResolver(_compilerContext, out, source\n-                .getNamespaceContext(), _bpelNsURI));\n-            xpath.setXPathVariableResolver(new JaxpVariableResolver(_compilerContext, out));\n-            xpath.setNamespaceContext(source.getNamespaceContext());\n-            XPathExpression xpe = xpath.compile(xpathStr);\n-            // dummy evaluation to resolve variables and functions (hopefully complete...)\n-            xpe.evaluate(DOMUtils.newDocument());\n-            out.xpath = xpathStr;\n-        } catch (XPathExpressionException e) {\n-            throw new CompilationException(__msgs.errUnexpectedCompilationError(e.getMessage()), e);\n-        }\n+    try {\n+      __log.debug(\"JAXP compile: xpath = \" + xpathStr);\n+      // use default XPath implementation\n+      XPathFactory xpf = XPathFactory.newInstance();\n+      __log.debug(\"JAXP compile: XPathFactory impl = \" + xpf.getClass());\n+      XPath xpath = xpf.newXPath();\n+      xpath.setXPathFunctionResolver(new JaxpFunctionResolver(_compilerContext, out, source\n+        .getNamespaceContext(), _bpelNsURI));\n+      xpath.setXPathVariableResolver(new JaxpVariableResolver(_compilerContext, out));\n+      xpath.setNamespaceContext(source.getNamespaceContext());\n+      XPathExpression xpe = xpath.compile(xpathStr);\n+      // dummy evaluation to resolve variables and functions (hopefully complete...)\n+      xpe.evaluate(DOMUtils.newDocument());\n+      out.xpath = xpathStr;\n+    } catch (XPathExpressionException e) {\n+      throw new CompilationException(__msgs.errUnexpectedCompilationError(e.getMessage()), e);\n     }\n+  }\n }\n",
            "diff_size": 99
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/312/JaxpXPath10ExpressionCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/312/JaxpXPath10ExpressionCompilerImpl.java\nindex 3d7f0d52821..f57285df4c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/312/JaxpXPath10ExpressionCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/312/JaxpXPath10ExpressionCompilerImpl.java\n@@ -117,4 +117,4 @@ public abstract class JaxpXPath10ExpressionCompilerImpl implements ExpressionCom\n             throw new CompilationException(__msgs.errUnexpectedCompilationError(e.getMessage()), e);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}