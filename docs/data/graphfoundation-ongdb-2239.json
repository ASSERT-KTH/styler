{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2239",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2239/Evaluators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2239/Evaluators.java\nindex 4cc2769993d..c479e41e7b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2239/Evaluators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2239/Evaluators.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import java.util.HashSet;\n@@ -39,437 +40,439 @@ import static org.neo4j.graphdb.traversal.Evaluation.INCLUDE_AND_CONTINUE;\n  */\n public abstract class Evaluators\n {\n-    @SuppressWarnings( \"rawtypes\" )\n-    private static final PathEvaluator<?> ALL = new PathEvaluator.Adapter()\n+  @SuppressWarnings(\"rawtypes\")\n+  private static final PathEvaluator<?> ALL = new PathEvaluator.Adapter()\n+  {\n+    @Override\n+    public Evaluation evaluate(Path path, BranchState state)\n     {\n-        @Override\n-        public Evaluation evaluate( Path path, BranchState state )\n-        {\n-            return INCLUDE_AND_CONTINUE;\n-        }\n-    };\n+      return INCLUDE_AND_CONTINUE;\n+    }\n+  };\n+\n+  private static final PathEvaluator ALL_BUT_START_POSITION = fromDepth(1);\n+\n+  /**\n+   * @param <STATE> the type of the state object.\n+   * @return an evaluator which includes everything it encounters and doesn't prune\n+   * anything.\n+   */\n+  public static <STATE> PathEvaluator<STATE> all()\n+  {\n+    //noinspection unchecked\n+    return (PathEvaluator<STATE>) ALL;\n+  }\n \n-    private static final PathEvaluator ALL_BUT_START_POSITION = fromDepth( 1 );\n+  /**\n+   * @return an evaluator which never prunes and includes everything except\n+   * the first position, i.e. the the start node.\n+   */\n+  public static PathEvaluator excludeStartPosition()\n+  {\n+    return ALL_BUT_START_POSITION;\n+  }\n \n-    /**\n-     * @param <STATE> the type of the state object.\n-     * @return an evaluator which includes everything it encounters and doesn't prune\n-     *         anything.\n-     */\n-    public static <STATE> PathEvaluator<STATE> all()\n+  /**\n+   * Returns an {@link Evaluator} which includes positions down to {@code depth}\n+   * and prunes everything deeper than that.\n+   *\n+   * @param depth   the max depth to traverse to.\n+   * @param <STATE> the type of the state object.\n+   * @return Returns an {@link Evaluator} which includes positions down to\n+   * {@code depth} and prunes everything deeper than that.\n+   */\n+  public static <STATE> PathEvaluator<STATE> toDepth(final int depth)\n+  {\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        //noinspection unchecked\n-        return (PathEvaluator<STATE>) ALL;\n-    }\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        int pathLength = path.length();\n+        return Evaluation.of(pathLength <= depth, pathLength < depth);\n+      }\n+    };\n+  }\n \n-    /**\n-     * @return an evaluator which never prunes and includes everything except\n-     *         the first position, i.e. the the start node.\n-     */\n-    public static PathEvaluator excludeStartPosition()\n+  /**\n+   * Returns an {@link Evaluator} which only includes positions from {@code depth}\n+   * and deeper and never prunes anything.\n+   *\n+   * @param depth   the depth to start include positions from.\n+   * @param <STATE> the type of the state object.\n+   * @return Returns an {@link Evaluator} which only includes positions from\n+   * {@code depth} and deeper and never prunes anything.\n+   */\n+  public static <STATE> PathEvaluator<STATE> fromDepth(final int depth)\n+  {\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        return ALL_BUT_START_POSITION;\n-    }\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        return Evaluation.ofIncludes(path.length() >= depth);\n+      }\n+    };\n+  }\n \n-    /**\n-     * Returns an {@link Evaluator} which includes positions down to {@code depth}\n-     * and prunes everything deeper than that.\n-     *\n-     * @param depth   the max depth to traverse to.\n-     * @param <STATE> the type of the state object.\n-     * @return Returns an {@link Evaluator} which includes positions down to\n-     *         {@code depth} and prunes everything deeper than that.\n-     */\n-    public static <STATE> PathEvaluator<STATE> toDepth( final int depth )\n+  /**\n+   * Returns an {@link Evaluator} which only includes positions at {@code depth}\n+   * and prunes everything deeper than that.\n+   *\n+   * @param depth   the depth to start include positions from.\n+   * @param <STATE> the type of the state object.\n+   * @return Returns an {@link Evaluator} which only includes positions at\n+   * {@code depth} and prunes everything deeper than that.\n+   */\n+  public static <STATE> PathEvaluator<STATE> atDepth(final int depth)\n+  {\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        return new PathEvaluator.Adapter<STATE>()\n-        {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                int pathLength = path.length();\n-                return Evaluation.of( pathLength <= depth, pathLength < depth );\n-            }\n-        };\n-    }\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        return path.length() == depth ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_CONTINUE;\n+      }\n+    };\n+  }\n \n-    /**\n-     * Returns an {@link Evaluator} which only includes positions from {@code depth}\n-     * and deeper and never prunes anything.\n-     *\n-     * @param depth   the depth to start include positions from.\n-     * @param <STATE> the type of the state object.\n-     * @return Returns an {@link Evaluator} which only includes positions from\n-     *         {@code depth} and deeper and never prunes anything.\n-     */\n-    public static <STATE> PathEvaluator<STATE> fromDepth( final int depth )\n+  /**\n+   * Returns an {@link Evaluator} which only includes positions between\n+   * depths {@code minDepth} and {@code maxDepth}. It prunes everything deeper\n+   * than {@code maxDepth}.\n+   *\n+   * @param minDepth minimum depth a position must have to be included.\n+   * @param maxDepth maximum depth a position must have to be included.\n+   * @param <STATE>  the type of the state object.\n+   * @return Returns an {@link Evaluator} which only includes positions between\n+   * depths {@code minDepth} and {@code maxDepth}. It prunes everything deeper\n+   * than {@code maxDepth}.\n+   */\n+  public static <STATE> PathEvaluator<STATE> includingDepths(final int minDepth, final int maxDepth)\n+  {\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        return new PathEvaluator.Adapter<STATE>()\n-        {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                return Evaluation.ofIncludes( path.length() >= depth );\n-            }\n-        };\n-    }\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        int length = path.length();\n+        return Evaluation.of(length >= minDepth && length <= maxDepth, length < maxDepth);\n+      }\n+    };\n+  }\n \n-    /**\n-     * Returns an {@link Evaluator} which only includes positions at {@code depth}\n-     * and prunes everything deeper than that.\n-     *\n-     * @param depth   the depth to start include positions from.\n-     * @param <STATE> the type of the state object.\n-     * @return Returns an {@link Evaluator} which only includes positions at\n-     *         {@code depth} and prunes everything deeper than that.\n-     */\n-    public static <STATE> PathEvaluator<STATE> atDepth( final int depth )\n+  /**\n+   * Returns an {@link Evaluator} which compares the type of the last relationship\n+   * in a {@link Path} to a given set of relationship types (one or more).If the type of\n+   * the last relationship in a path is of one of the given types then\n+   * {@code evaluationIfMatch} will be returned, otherwise\n+   * {@code evaluationIfNoMatch} will be returned.\n+   *\n+   * @param evaluationIfMatch   the {@link Evaluation} to return if the type of the\n+   *                            last relationship in the path matches any of the given types.\n+   * @param evaluationIfNoMatch the {@link Evaluation} to return if the type of the\n+   *                            last relationship in the path doesn't match any of the given types.\n+   * @param type                the (first) type (of possibly many) to match the last relationship\n+   *                            in paths with.\n+   * @param orAnyOfTheseTypes   additional types to match the last relationship in\n+   *                            paths with.\n+   * @param <STATE>             the type of the state object.\n+   * @return an {@link Evaluator} which compares the type of the last relationship\n+   * in a {@link Path} to a given set of relationship types.\n+   */\n+  public static <STATE> PathEvaluator<STATE> lastRelationshipTypeIs(final Evaluation evaluationIfMatch,\n+                                                                    final Evaluation evaluationIfNoMatch, final RelationshipType type,\n+                                                                    RelationshipType... orAnyOfTheseTypes)\n+  {\n+    if (orAnyOfTheseTypes.length == 0)\n     {\n-        return new PathEvaluator.Adapter<STATE>()\n+      return new PathEvaluator.Adapter<STATE>()\n+      {\n+        @Override\n+        public Evaluation evaluate(Path path, BranchState state)\n         {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                return path.length() == depth ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_CONTINUE;\n-            }\n-        };\n+          Relationship rel = path.lastRelationship();\n+          return rel != null && rel.isType(type) ? evaluationIfMatch : evaluationIfNoMatch;\n+        }\n+      };\n     }\n \n-    /**\n-     * Returns an {@link Evaluator} which only includes positions between\n-     * depths {@code minDepth} and {@code maxDepth}. It prunes everything deeper\n-     * than {@code maxDepth}.\n-     *\n-     * @param minDepth minimum depth a position must have to be included.\n-     * @param maxDepth maximum depth a position must have to be included.\n-     * @param <STATE>  the type of the state object.\n-     * @return Returns an {@link Evaluator} which only includes positions between\n-     *         depths {@code minDepth} and {@code maxDepth}. It prunes everything deeper\n-     *         than {@code maxDepth}.\n-     */\n-    public static <STATE> PathEvaluator<STATE> includingDepths( final int minDepth, final int maxDepth )\n+    final Set<String> expectedTypes = new HashSet<>();\n+    expectedTypes.add(type.name());\n+    for (RelationshipType otherType : orAnyOfTheseTypes)\n     {\n-        return new PathEvaluator.Adapter<STATE>()\n-        {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                int length = path.length();\n-                return Evaluation.of( length >= minDepth && length <= maxDepth, length < maxDepth );\n-            }\n-        };\n+      expectedTypes.add(otherType.name());\n     }\n \n-    /**\n-     * Returns an {@link Evaluator} which compares the type of the last relationship\n-     * in a {@link Path} to a given set of relationship types (one or more).If the type of\n-     * the last relationship in a path is of one of the given types then\n-     * {@code evaluationIfMatch} will be returned, otherwise\n-     * {@code evaluationIfNoMatch} will be returned.\n-     *\n-     * @param evaluationIfMatch   the {@link Evaluation} to return if the type of the\n-     *                            last relationship in the path matches any of the given types.\n-     * @param evaluationIfNoMatch the {@link Evaluation} to return if the type of the\n-     *                            last relationship in the path doesn't match any of the given types.\n-     * @param type                the (first) type (of possibly many) to match the last relationship\n-     *                            in paths with.\n-     * @param orAnyOfTheseTypes   additional types to match the last relationship in\n-     *                            paths with.\n-     * @param <STATE>             the type of the state object.\n-     * @return an {@link Evaluator} which compares the type of the last relationship\n-     *         in a {@link Path} to a given set of relationship types.\n-     */\n-    public static <STATE> PathEvaluator<STATE> lastRelationshipTypeIs( final Evaluation evaluationIfMatch,\n-            final Evaluation evaluationIfNoMatch, final RelationshipType type, RelationshipType... orAnyOfTheseTypes )\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        if ( orAnyOfTheseTypes.length == 0 )\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        Relationship lastRelationship = path.lastRelationship();\n+        if (lastRelationship == null)\n         {\n-            return new PathEvaluator.Adapter<STATE>()\n-            {\n-                @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n-                {\n-                    Relationship rel = path.lastRelationship();\n-                    return rel != null && rel.isType( type ) ? evaluationIfMatch : evaluationIfNoMatch;\n-                }\n-            };\n+          return evaluationIfNoMatch;\n         }\n \n-        final Set<String> expectedTypes = new HashSet<>();\n-        expectedTypes.add( type.name() );\n-        for ( RelationshipType otherType : orAnyOfTheseTypes )\n-        {\n-            expectedTypes.add( otherType.name() );\n-        }\n+        return expectedTypes.contains(lastRelationship.getType().name()) ?\n+            evaluationIfMatch : evaluationIfNoMatch;\n+      }\n+    };\n+  }\n \n-        return new PathEvaluator.Adapter<STATE>()\n-        {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                Relationship lastRelationship = path.lastRelationship();\n-                if ( lastRelationship == null )\n-                {\n-                    return evaluationIfNoMatch;\n-                }\n+  /**\n+   * @param type              the (first) type (of possibly many) to match the last relationship\n+   *                          in paths with.\n+   * @param orAnyOfTheseTypes types to match the last relationship in paths with. If any matches\n+   *                          it's considered a match.\n+   * @param <STATE>           the type of the state object.\n+   * @return an {@link Evaluator} which compares the type of the last relationship\n+   * in a {@link Path} to a given set of relationship types.\n+   * @see #lastRelationshipTypeIs(Evaluation, Evaluation, RelationshipType, RelationshipType...)\n+   * Uses {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfMatch}\n+   * and {@link Evaluation#EXCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n+   */\n+  public static <STATE> PathEvaluator<STATE> includeWhereLastRelationshipTypeIs(RelationshipType type,\n+                                                                                RelationshipType... orAnyOfTheseTypes)\n+  {\n+    return lastRelationshipTypeIs(Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE,\n+        type, orAnyOfTheseTypes);\n+  }\n \n-                return expectedTypes.contains( lastRelationship.getType().name() ) ?\n-                        evaluationIfMatch : evaluationIfNoMatch;\n-            }\n-        };\n-    }\n+  /**\n+   * @param type              the (first) type (of possibly many) to match the last relationship\n+   *                          in paths with.\n+   * @param orAnyOfTheseTypes types to match the last relationship in paths with. If any matches\n+   *                          it's considered a match.\n+   * @param <STATE>           the type of the state object.\n+   * @return an {@link Evaluator} which compares the type of the last relationship\n+   * in a {@link Path} to a given set of relationship types.\n+   * @see #lastRelationshipTypeIs(Evaluation, Evaluation, RelationshipType, RelationshipType...)\n+   * Uses {@link Evaluation#INCLUDE_AND_PRUNE} for {@code evaluationIfMatch}\n+   * and {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n+   */\n+  public static <STATE> PathEvaluator<STATE> pruneWhereLastRelationshipTypeIs(RelationshipType type,\n+                                                                              RelationshipType... orAnyOfTheseTypes)\n+  {\n+    return lastRelationshipTypeIs(Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE,\n+        type, orAnyOfTheseTypes);\n+  }\n \n-    /**\n-     * @param type              the (first) type (of possibly many) to match the last relationship\n-     *                          in paths with.\n-     * @param orAnyOfTheseTypes types to match the last relationship in paths with. If any matches\n-     *                          it's considered a match.\n-     * @param <STATE>           the type of the state object.\n-     * @return an {@link Evaluator} which compares the type of the last relationship\n-     *         in a {@link Path} to a given set of relationship types.\n-     * @see #lastRelationshipTypeIs(Evaluation, Evaluation, RelationshipType, RelationshipType...)\n-     *      Uses {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfMatch}\n-     *      and {@link Evaluation#EXCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n-     */\n-    public static <STATE> PathEvaluator<STATE> includeWhereLastRelationshipTypeIs( RelationshipType type,\n-            RelationshipType... orAnyOfTheseTypes )\n+  /**\n+   * An {@link Evaluator} which will return {@code evaluationIfMatch} if {@link Path#endNode()}\n+   * for a given path is any of {@code nodes}, else {@code evaluationIfNoMatch}.\n+   *\n+   * @param evaluationIfMatch   the {@link Evaluation} to return if the {@link Path#endNode()}\n+   *                            is any of the nodes in {@code nodes}.\n+   * @param evaluationIfNoMatch the {@link Evaluation} to return if the {@link Path#endNode()}\n+   *                            doesn't match any of the nodes in {@code nodes}.\n+   * @param possibleEndNodes    a set of nodes to match to end nodes in paths.\n+   * @param <STATE>             the type of the state object.\n+   * @return an {@link Evaluator} which will return {@code evaluationIfMatch} if\n+   * {@link Path#endNode()} for a given path is any of {@code nodes},\n+   * else {@code evaluationIfNoMatch}.\n+   */\n+  public static <STATE> PathEvaluator<STATE> endNodeIs(final Evaluation evaluationIfMatch, final Evaluation\n+      evaluationIfNoMatch,\n+                                                       Node... possibleEndNodes)\n+  {\n+    if (possibleEndNodes.length == 1)\n     {\n-        return lastRelationshipTypeIs( Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE,\n-                type, orAnyOfTheseTypes );\n+      final Node target = possibleEndNodes[0];\n+      return new PathEvaluator.Adapter<STATE>()\n+      {\n+        @Override\n+        public Evaluation evaluate(Path path, BranchState state)\n+        {\n+          return target.equals(path.endNode()) ? evaluationIfMatch : evaluationIfNoMatch;\n+        }\n+      };\n     }\n \n-    /**\n-     * @param type              the (first) type (of possibly many) to match the last relationship\n-     *                          in paths with.\n-     * @param orAnyOfTheseTypes types to match the last relationship in paths with. If any matches\n-     *                          it's considered a match.\n-     * @param <STATE>           the type of the state object.\n-     * @return an {@link Evaluator} which compares the type of the last relationship\n-     *         in a {@link Path} to a given set of relationship types.\n-     * @see #lastRelationshipTypeIs(Evaluation, Evaluation, RelationshipType, RelationshipType...)\n-     *      Uses {@link Evaluation#INCLUDE_AND_PRUNE} for {@code evaluationIfMatch}\n-     *      and {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n-     */\n-    public static <STATE> PathEvaluator<STATE> pruneWhereLastRelationshipTypeIs( RelationshipType type,\n-            RelationshipType... orAnyOfTheseTypes )\n+    final Set<Node> endNodes = new HashSet<>(asList(possibleEndNodes));\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        return lastRelationshipTypeIs( Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE,\n-                type, orAnyOfTheseTypes );\n-    }\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        return endNodes.contains(path.endNode()) ? evaluationIfMatch : evaluationIfNoMatch;\n+      }\n+    };\n+  }\n \n-    /**\n-     * An {@link Evaluator} which will return {@code evaluationIfMatch} if {@link Path#endNode()}\n-     * for a given path is any of {@code nodes}, else {@code evaluationIfNoMatch}.\n-     *\n-     * @param evaluationIfMatch   the {@link Evaluation} to return if the {@link Path#endNode()}\n-     *                            is any of the nodes in {@code nodes}.\n-     * @param evaluationIfNoMatch the {@link Evaluation} to return if the {@link Path#endNode()}\n-     *                            doesn't match any of the nodes in {@code nodes}.\n-     * @param possibleEndNodes    a set of nodes to match to end nodes in paths.\n-     * @param <STATE>             the type of the state object.\n-     * @return an {@link Evaluator} which will return {@code evaluationIfMatch} if\n-     *         {@link Path#endNode()} for a given path is any of {@code nodes},\n-     *         else {@code evaluationIfNoMatch}.\n-     */\n-    public static <STATE> PathEvaluator<STATE> endNodeIs( final Evaluation evaluationIfMatch, final Evaluation\n-        evaluationIfNoMatch,\n-            Node... possibleEndNodes )\n-    {\n-        if ( possibleEndNodes.length == 1 )\n-        {\n-            final Node target = possibleEndNodes[0];\n-            return new PathEvaluator.Adapter<STATE>()\n-            {\n-                @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n-                {\n-                    return target.equals( path.endNode() ) ? evaluationIfMatch : evaluationIfNoMatch;\n-                }\n-            };\n-        }\n+  /**\n+   * Include paths with the specified end nodes.\n+   * <p>\n+   * Uses Evaluators#endNodeIs(Evaluation, Evaluation, Node...) with\n+   * {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfMatch} and\n+   * {@link Evaluation#EXCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n+   *\n+   * @param nodes   end nodes for paths to be included in the result.\n+   * @param <STATE> the type of the state object.\n+   * @return paths where the end node is one of {@code nodes}\n+   */\n+  public static <STATE> PathEvaluator<STATE> includeWhereEndNodeIs(Node... nodes)\n+  {\n+    return endNodeIs(Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE, nodes);\n+  }\n+\n+  public static <STATE> PathEvaluator<STATE> pruneWhereEndNodeIs(Node... nodes)\n+  {\n+    return endNodeIs(Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE, nodes);\n+  }\n \n-        final Set<Node> endNodes = new HashSet<>( asList( possibleEndNodes ) );\n-        return new PathEvaluator.Adapter<STATE>()\n+  /**\n+   * Evaluator which decides to include a {@link Path} if all the\n+   * {@code nodes} exist in it.\n+   *\n+   * @param nodes   {@link Node}s that must exist in a {@link Path} for it\n+   *                to be included.\n+   * @param <STATE> the type of the state object.\n+   * @return {@link Evaluation#INCLUDE_AND_CONTINUE} if all {@code nodes}\n+   * exist in a given {@link Path}, otherwise\n+   * {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n+   */\n+  public static <STATE> PathEvaluator<STATE> includeIfContainsAll(final Node... nodes)\n+  {\n+    if (nodes.length == 1)\n+    {\n+      return new PathEvaluator.Adapter<STATE>()\n+      {\n+        @Override\n+        public Evaluation evaluate(Path path, BranchState state)\n         {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n+          for (Node node : path.reverseNodes())\n+          {\n+            if (node.equals(nodes[0]))\n             {\n-                return endNodes.contains( path.endNode() ) ? evaluationIfMatch : evaluationIfNoMatch;\n+              return Evaluation.INCLUDE_AND_CONTINUE;\n             }\n-        };\n-    }\n-\n-    /**\n-     * Include paths with the specified end nodes.\n-     *\n-     * Uses Evaluators#endNodeIs(Evaluation, Evaluation, Node...) with\n-     * {@link Evaluation#INCLUDE_AND_CONTINUE} for {@code evaluationIfMatch} and\n-     * {@link Evaluation#EXCLUDE_AND_CONTINUE} for {@code evaluationIfNoMatch}.\n-     *\n-     * @param nodes   end nodes for paths to be included in the result.\n-     * @param <STATE> the type of the state object.\n-     * @return paths where the end node is one of {@code nodes}\n-     */\n-    public static <STATE> PathEvaluator<STATE> includeWhereEndNodeIs( Node... nodes )\n-    {\n-        return endNodeIs( Evaluation.INCLUDE_AND_CONTINUE, Evaluation.EXCLUDE_AND_CONTINUE, nodes );\n-    }\n-\n-    public static <STATE> PathEvaluator<STATE> pruneWhereEndNodeIs( Node... nodes )\n-    {\n-        return endNodeIs( Evaluation.INCLUDE_AND_PRUNE, Evaluation.EXCLUDE_AND_CONTINUE, nodes );\n+          }\n+          return Evaluation.EXCLUDE_AND_CONTINUE;\n+        }\n+      };\n     }\n \n-    /**\n-     * Evaluator which decides to include a {@link Path} if all the\n-     * {@code nodes} exist in it.\n-     *\n-     * @param nodes   {@link Node}s that must exist in a {@link Path} for it\n-     *                to be included.\n-     * @param <STATE> the type of the state object.\n-     * @return {@link Evaluation#INCLUDE_AND_CONTINUE} if all {@code nodes}\n-     *         exist in a given {@link Path}, otherwise\n-     *         {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n-     */\n-    public static <STATE> PathEvaluator<STATE> includeIfContainsAll( final Node... nodes )\n+    final Set<Node> fullSet = new HashSet<>(asList(nodes));\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        if ( nodes.length == 1 )\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        Set<Node> set = new HashSet<>(fullSet);\n+        for (Node node : path.reverseNodes())\n         {\n-            return new PathEvaluator.Adapter<STATE>()\n-            {\n-                @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n-                {\n-                    for ( Node node : path.reverseNodes() )\n-                    {\n-                        if ( node.equals( nodes[0] ) )\n-                        {\n-                            return Evaluation.INCLUDE_AND_CONTINUE;\n-                        }\n-                    }\n-                    return Evaluation.EXCLUDE_AND_CONTINUE;\n-                }\n-            };\n+          if (set.remove(node) && set.isEmpty())\n+          {\n+            return Evaluation.INCLUDE_AND_CONTINUE;\n+          }\n         }\n+        return Evaluation.EXCLUDE_AND_CONTINUE;\n+      }\n+    };\n+  }\n \n-        final Set<Node> fullSet = new HashSet<>( asList( nodes ) );\n-        return new PathEvaluator.Adapter<STATE>()\n+  /**\n+   * Whereas adding {@link Evaluator}s to a {@link TraversalDescription} puts those\n+   * evaluators in {@code AND-mode} this can group many evaluators in {@code OR-mode}.\n+   *\n+   * @param evaluators represented as one evaluators. If any of the evaluators decides\n+   *                   to include a path it will be included.\n+   * @param <STATE>    the type of the state object.\n+   * @return an {@link Evaluator} which decides to include a path if any of the supplied\n+   * evaluators wants to include it.\n+   */\n+  public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny(final PathEvaluator... evaluators)\n+  {\n+    return new PathEvaluator.Adapter<STATE>()\n+    {\n+      @SuppressWarnings(\"unchecked\")\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        for (PathEvaluator evaluator : evaluators)\n         {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                Set<Node> set = new HashSet<>( fullSet );\n-                for ( Node node : path.reverseNodes() )\n-                {\n-                    if ( set.remove( node ) && set.isEmpty() )\n-                    {\n-                        return Evaluation.INCLUDE_AND_CONTINUE;\n-                    }\n-                }\n-                return Evaluation.EXCLUDE_AND_CONTINUE;\n-            }\n-        };\n-    }\n+          if (evaluator.evaluate(path, state).includes())\n+          {\n+            return Evaluation.INCLUDE_AND_CONTINUE;\n+          }\n+        }\n+        return Evaluation.EXCLUDE_AND_CONTINUE;\n+      }\n+    };\n+  }\n \n-    /**\n-     * Whereas adding {@link Evaluator}s to a {@link TraversalDescription} puts those\n-     * evaluators in {@code AND-mode} this can group many evaluators in {@code OR-mode}.\n-     *\n-     * @param evaluators represented as one evaluators. If any of the evaluators decides\n-     *                   to include a path it will be included.\n-     * @param <STATE>    the type of the state object.\n-     * @return an {@link Evaluator} which decides to include a path if any of the supplied\n-     *         evaluators wants to include it.\n-     */\n-    public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny( final PathEvaluator... evaluators )\n+  /**\n+   * Whereas adding {@link Evaluator}s to a {@link TraversalDescription} puts those\n+   * evaluators in {@code AND-mode} this can group many evaluators in {@code OR-mode}.\n+   *\n+   * @param evaluators represented as one evaluators. If any of the evaluators decides\n+   *                   to include a path it will be included.\n+   * @param <STATE>    the type of the state object.\n+   * @return an {@link Evaluator} which decides to include a path if any of the supplied\n+   * evaluators wants to include it.\n+   */\n+  public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny(final Evaluator... evaluators)\n+  {\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        return new PathEvaluator.Adapter<STATE>()\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        for (Evaluator evaluator : evaluators)\n         {\n-            @SuppressWarnings( \"unchecked\" )\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                for ( PathEvaluator evaluator : evaluators )\n-                {\n-                    if ( evaluator.evaluate( path, state ).includes() )\n-                    {\n-                        return Evaluation.INCLUDE_AND_CONTINUE;\n-                    }\n-                }\n-                return Evaluation.EXCLUDE_AND_CONTINUE;\n-            }\n-        };\n-    }\n+          if (evaluator.evaluate(path).includes())\n+          {\n+            return Evaluation.INCLUDE_AND_CONTINUE;\n+          }\n+        }\n+        return Evaluation.EXCLUDE_AND_CONTINUE;\n+      }\n+    };\n+  }\n \n-    /**\n-     * Whereas adding {@link Evaluator}s to a {@link TraversalDescription} puts those\n-     * evaluators in {@code AND-mode} this can group many evaluators in {@code OR-mode}.\n-     *\n-     * @param evaluators represented as one evaluators. If any of the evaluators decides\n-     *                   to include a path it will be included.\n-     * @param <STATE>    the type of the state object.\n-     * @return an {@link Evaluator} which decides to include a path if any of the supplied\n-     *         evaluators wants to include it.\n-     */\n-    public static <STATE> PathEvaluator<STATE> includeIfAcceptedByAny( final Evaluator... evaluators )\n+  /**\n+   * Returns {@link Evaluator}s for paths with the specified depth and with an end node from the list of\n+   * possibleEndNodes.\n+   *\n+   * @param depth            The exact depth to filter the returned path evaluators.\n+   * @param possibleEndNodes Filter for the possible nodes to end the path on.\n+   * @param <STATE>          the type of the state object.\n+   * @return {@link Evaluator}s for paths with the specified depth and with an end node from the list of\n+   * possibleEndNodes.\n+   */\n+  public static <STATE> PathEvaluator<STATE> endNodeIsAtDepth(final int depth, Node... possibleEndNodes)\n+  {\n+    if (possibleEndNodes.length == 1)\n     {\n-        return new PathEvaluator.Adapter<STATE>()\n+      final Node target = possibleEndNodes[0];\n+      return new PathEvaluator.Adapter<STATE>()\n+      {\n+        @Override\n+        public Evaluation evaluate(Path path, BranchState state)\n         {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                for ( Evaluator evaluator : evaluators )\n-                {\n-                    if ( evaluator.evaluate( path ).includes() )\n-                    {\n-                        return Evaluation.INCLUDE_AND_CONTINUE;\n-                    }\n-                }\n-                return Evaluation.EXCLUDE_AND_CONTINUE;\n-            }\n-        };\n+          if (path.length() == depth)\n+          {\n+            return target.equals(path.endNode()) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n+          }\n+          return Evaluation.EXCLUDE_AND_CONTINUE;\n+        }\n+      };\n     }\n \n-    /**\n-     * Returns {@link Evaluator}s for paths with the specified depth and with an end node from the list of\n-     * possibleEndNodes.\n-     * @param depth The exact depth to filter the returned path evaluators.\n-     * @param possibleEndNodes Filter for the possible nodes to end the path on.\n-     * @param <STATE> the type of the state object.\n-     * @return {@link Evaluator}s for paths with the specified depth and with an end node from the list of\n-     * possibleEndNodes.\n-     */\n-    public static <STATE> PathEvaluator<STATE> endNodeIsAtDepth( final int depth, Node... possibleEndNodes )\n+    final Set<Node> endNodes = new HashSet<>(asList(possibleEndNodes));\n+    return new PathEvaluator.Adapter<STATE>()\n     {\n-        if ( possibleEndNodes.length == 1 )\n+      @Override\n+      public Evaluation evaluate(Path path, BranchState state)\n+      {\n+        if (path.length() == depth)\n         {\n-            final Node target = possibleEndNodes[0];\n-            return new PathEvaluator.Adapter<STATE>()\n-            {\n-                @Override\n-                public Evaluation evaluate( Path path, BranchState state )\n-                {\n-                    if ( path.length() == depth )\n-                    {\n-                        return target.equals( path.endNode() ) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n-                    }\n-                    return Evaluation.EXCLUDE_AND_CONTINUE;\n-                }\n-            };\n+          return endNodes.contains(path.endNode()) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n         }\n-\n-        final Set<Node> endNodes = new HashSet<>( asList( possibleEndNodes ) );\n-        return new PathEvaluator.Adapter<STATE>()\n-        {\n-            @Override\n-            public Evaluation evaluate( Path path, BranchState state )\n-            {\n-                if ( path.length() == depth )\n-                {\n-                    return endNodes.contains( path.endNode() ) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n-                }\n-                return Evaluation.EXCLUDE_AND_CONTINUE;\n-            }\n-        };\n-    }\n+        return Evaluation.EXCLUDE_AND_CONTINUE;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 547
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2239/Evaluators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2239/Evaluators.java\nindex 4cc2769993d..bb3b9d53a57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2239/Evaluators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2239/Evaluators.java\n@@ -179,8 +179,7 @@ public abstract class Evaluators\n      * @return an {@link Evaluator} which compares the type of the last relationship\n      *         in a {@link Path} to a given set of relationship types.\n      */\n-    public static <STATE> PathEvaluator<STATE> lastRelationshipTypeIs( final Evaluation evaluationIfMatch,\n-            final Evaluation evaluationIfNoMatch, final RelationshipType type, RelationshipType... orAnyOfTheseTypes )\n+    public static <STATE> PathEvaluator<STATE> lastRelationshipTypeIs( final Evaluation evaluationIfMatch, final Evaluation evaluationIfNoMatch, final RelationshipType type, RelationshipType... orAnyOfTheseTypes )\n     {\n         if ( orAnyOfTheseTypes.length == 0 )\n         {\n@@ -213,9 +212,8 @@ public abstract class Evaluators\n                     return evaluationIfNoMatch;\n                 }\n \n-                return expectedTypes.contains( lastRelationship.getType().name() ) ?\n-                        evaluationIfMatch : evaluationIfNoMatch;\n-            }\n+                return expectedTypes.contains( lastRelationship.getType().name() ) ? evaluationIfMatch : evaluationIfNoMatch;\n+    }\n         };\n     }\n \n@@ -271,9 +269,7 @@ public abstract class Evaluators\n      *         {@link Path#endNode()} for a given path is any of {@code nodes},\n      *         else {@code evaluationIfNoMatch}.\n      */\n-    public static <STATE> PathEvaluator<STATE> endNodeIs( final Evaluation evaluationIfMatch, final Evaluation\n-        evaluationIfNoMatch,\n-            Node... possibleEndNodes )\n+    public static <STATE> PathEvaluator<STATE> endNodeIs( final Evaluation evaluationIfMatch, final Evaluation evaluationIfNoMatch, Node... possibleEndNodes )\n     {\n         if ( possibleEndNodes.length == 1 )\n         {\n@@ -453,7 +449,8 @@ public abstract class Evaluators\n                     {\n                         return target.equals( path.endNode() ) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n                     }\n-                    return Evaluation.EXCLUDE_AND_CONTINUE;\n+\n+return Evaluation.EXCLUDE_AND_CONTINUE;\n                 }\n             };\n         }\n@@ -468,8 +465,9 @@ public abstract class Evaluators\n                 {\n                     return endNodes.contains( path.endNode() ) ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.EXCLUDE_AND_PRUNE;\n                 }\n-                return Evaluation.EXCLUDE_AND_CONTINUE;\n+\n+return Evaluation.EXCLUDE_AND_CONTINUE;\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}