{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3507",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3507/IndexingServiceFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3507/IndexingServiceFactory.java\nindex 3fdcdeac9a5..f6d9fe5d334 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3507/IndexingServiceFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3507/IndexingServiceFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import org.neo4j.internal.kernel.api.TokenNameLookup;\n@@ -35,38 +36,38 @@ import org.neo4j.scheduler.JobScheduler;\n  */\n public class IndexingServiceFactory\n {\n-    private IndexingServiceFactory()\n-    {\n-    }\n+  private IndexingServiceFactory()\n+  {\n+  }\n \n-    public static IndexingService createIndexingService( Config config,\n-                                          JobScheduler scheduler,\n-                                          IndexProviderMap providerMap,\n-                                          IndexStoreView storeView,\n-                                          TokenNameLookup tokenNameLookup,\n-                                          Iterable<IndexRule> indexRules,\n-                                          LogProvider logProvider,\n-                                          IndexingService.Monitor monitor,\n-                                          SchemaState schemaState )\n+  public static IndexingService createIndexingService(Config config,\n+                                                      JobScheduler scheduler,\n+                                                      IndexProviderMap providerMap,\n+                                                      IndexStoreView storeView,\n+                                                      TokenNameLookup tokenNameLookup,\n+                                                      Iterable<IndexRule> indexRules,\n+                                                      LogProvider logProvider,\n+                                                      IndexingService.Monitor monitor,\n+                                                      SchemaState schemaState)\n+  {\n+    if (providerMap == null || providerMap.getDefaultProvider() == null)\n     {\n-        if ( providerMap == null || providerMap.getDefaultProvider() == null )\n-        {\n-            throw new IllegalStateException( \"You cannot run the database without an index provider, \" +\n-                                             \"please make sure that a valid provider (subclass of \" + IndexProvider.class.getName() +\n-                                             \") is on your classpath.\" );\n-        }\n+      throw new IllegalStateException(\"You cannot run the database without an index provider, \" +\n+          \"please make sure that a valid provider (subclass of \" + IndexProvider.class.getName() +\n+          \") is on your classpath.\");\n+    }\n \n-        IndexSamplingConfig samplingConfig = new IndexSamplingConfig( config );\n-        MultiPopulatorFactory multiPopulatorFactory = MultiPopulatorFactory.forConfig( config );\n-        IndexMapReference indexMapRef = new IndexMapReference();\n-        IndexSamplingControllerFactory factory =\n-                new IndexSamplingControllerFactory( samplingConfig, storeView, scheduler, tokenNameLookup, logProvider );\n-        IndexSamplingController indexSamplingController = factory.create( indexMapRef );\n-        IndexProxyCreator proxySetup =\n-                new IndexProxyCreator( samplingConfig, storeView, providerMap, tokenNameLookup, logProvider );\n+    IndexSamplingConfig samplingConfig = new IndexSamplingConfig(config);\n+    MultiPopulatorFactory multiPopulatorFactory = MultiPopulatorFactory.forConfig(config);\n+    IndexMapReference indexMapRef = new IndexMapReference();\n+    IndexSamplingControllerFactory factory =\n+        new IndexSamplingControllerFactory(samplingConfig, storeView, scheduler, tokenNameLookup, logProvider);\n+    IndexSamplingController indexSamplingController = factory.create(indexMapRef);\n+    IndexProxyCreator proxySetup =\n+        new IndexProxyCreator(samplingConfig, storeView, providerMap, tokenNameLookup, logProvider);\n \n-        return new IndexingService( proxySetup, providerMap, indexMapRef, storeView, indexRules,\n-                indexSamplingController, tokenNameLookup, scheduler, schemaState,\n-                multiPopulatorFactory, logProvider, monitor );\n-    }\n+    return new IndexingService(proxySetup, providerMap, indexMapRef, storeView, indexRules,\n+        indexSamplingController, tokenNameLookup, scheduler, schemaState,\n+        multiPopulatorFactory, logProvider, monitor);\n+  }\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3507/IndexingServiceFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3507/IndexingServiceFactory.java\nindex 3fdcdeac9a5..b4031189be9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3507/IndexingServiceFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3507/IndexingServiceFactory.java\n@@ -39,34 +39,26 @@ public class IndexingServiceFactory\n     {\n     }\n \n-    public static IndexingService createIndexingService( Config config,\n-                                          JobScheduler scheduler,\n+    public static IndexingService createIndexingService( Config config, JobScheduler scheduler,\n                                           IndexProviderMap providerMap,\n                                           IndexStoreView storeView,\n-                                          TokenNameLookup tokenNameLookup,\n-                                          Iterable<IndexRule> indexRules,\n+                                          TokenNameLookup tokenNameLookup, Iterable<IndexRule> indexRules,\n                                           LogProvider logProvider,\n                                           IndexingService.Monitor monitor,\n                                           SchemaState schemaState )\n-    {\n+{\n         if ( providerMap == null || providerMap.getDefaultProvider() == null )\n         {\n-            throw new IllegalStateException( \"You cannot run the database without an index provider, \" +\n-                                             \"please make sure that a valid provider (subclass of \" + IndexProvider.class.getName() +\n-                                             \") is on your classpath.\" );\n-        }\n+            throw new IllegalStateException( \"You cannot run the database without an index provider, \" + \"please make sure that a valid provider (subclass of \" + IndexProvider.class.getName() + \") is on your classpath.\" );\n+    }\n \n         IndexSamplingConfig samplingConfig = new IndexSamplingConfig( config );\n         MultiPopulatorFactory multiPopulatorFactory = MultiPopulatorFactory.forConfig( config );\n         IndexMapReference indexMapRef = new IndexMapReference();\n-        IndexSamplingControllerFactory factory =\n-                new IndexSamplingControllerFactory( samplingConfig, storeView, scheduler, tokenNameLookup, logProvider );\n-        IndexSamplingController indexSamplingController = factory.create( indexMapRef );\n-        IndexProxyCreator proxySetup =\n-                new IndexProxyCreator( samplingConfig, storeView, providerMap, tokenNameLookup, logProvider );\n-\n-        return new IndexingService( proxySetup, providerMap, indexMapRef, storeView, indexRules,\n-                indexSamplingController, tokenNameLookup, scheduler, schemaState,\n-                multiPopulatorFactory, logProvider, monitor );\n+        IndexSamplingControllerFactory factory = new IndexSamplingControllerFactory( samplingConfig, storeView, scheduler, tokenNameLookup, logProvider );\n+IndexSamplingController indexSamplingController = factory.create( indexMapRef );\n+        IndexProxyCreator proxySetup = new IndexProxyCreator( samplingConfig, storeView, providerMap, tokenNameLookup, logProvider );\n+return new IndexingService( proxySetup, providerMap, indexMapRef, storeView, indexRules,\n+                indexSamplingController, tokenNameLookup, scheduler, schemaState, multiPopulatorFactory, logProvider, monitor );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}