{
    "project_name": "GluuFederation-oxCore",
    "error_id": "79",
    "information": {
        "errors": [
            {
                "line": "107",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    }\n\n\tpublic CustomScript getScriptByInum(String inum) {\n\t\treturn persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "108",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/79/AbstractCustomScriptService.java\nindex 7cbdd036c64..02e5b79c8ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/79/AbstractCustomScriptService.java\n@@ -104,7 +104,7 @@ public abstract class AbstractCustomScriptService implements Serializable {\n         return result;\n     }\n \n-\tpublic CustomScript getScriptByInum(String inum) {\n+    public CustomScript getScriptByInum(String inum) {\n \t\treturn persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/79/AbstractCustomScriptService.java\nindex 7cbdd036c64..e88ebf4b743 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/79/AbstractCustomScriptService.java\n@@ -3,6 +3,7 @@\n  *\n  * Copyright (c) 2014, Gluu\n  */\n+\n package org.gluu.service.custom.script;\n \n import java.io.Serializable;\n@@ -69,7 +70,7 @@ public abstract class AbstractCustomScriptService implements Serializable {\n \n         if (result.isEmpty()) {\n \n-            return  Optional.absent();\n+            return Optional.absent();\n         }\n \n         return Optional.of(result.get(0));\n@@ -104,86 +105,86 @@ public abstract class AbstractCustomScriptService implements Serializable {\n         return result;\n     }\n \n-\tpublic CustomScript getScriptByInum(String inum) {\n-\t\treturn persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION.getValue());\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, null);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), null);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic String buildDn(String customScriptId) {\n+    public CustomScript getScriptByInum(String inum) {\n+        return persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n+            CustomScriptType.PERSON_AUTHENTICATION);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n+            CustomScriptType.PERSON_AUTHENTICATION.getValue());\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n+            sizeLimit);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createNOTFilter(\n+            Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n+            sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, null);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, typeFilter), null);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createNOTFilter(\n+            Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n+            sizeLimit);\n+    }\n+\n+    public String buildDn(String customScriptId) {\n         final StringBuilder dn = new StringBuilder();\n         dn.append(String.format(\"inum=%s,\", customScriptId));\n         dn.append(baseDn());\n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "108",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/79/AbstractCustomScriptService.java\nindex 7cbdd036c64..baad9c82c2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/79/AbstractCustomScriptService.java\n@@ -57,8 +57,7 @@ public abstract class AbstractCustomScriptService implements Serializable {\n     }\n \n     public Optional<CustomScript> getCustomScriptByINum(String baseDn, String inum, String... returnAttributes) {\n-\n-        final List<Filter> customScriptTypeFilters = new ArrayList<Filter>();\n+    final List<Filter> customScriptTypeFilters = new ArrayList<Filter>();\n \n         final Filter customScriptTypeFilter = Filter.createEqualityFilter(\"inum\", inum);\n         customScriptTypeFilters.add(customScriptTypeFilter);\n@@ -68,15 +67,13 @@ public abstract class AbstractCustomScriptService implements Serializable {\n         final List<CustomScript> result = persistenceEntryManager.findEntries(baseDn, CustomScript.class, filter, returnAttributes);\n \n         if (result.isEmpty()) {\n-\n-            return  Optional.absent();\n+    return Optional.absent();\n         }\n \n         return Optional.of(result.get(0));\n     }\n \n-\n-    public List<CustomScript> findAllCustomScripts(String[] returnAttributes) {\n+public List<CustomScript> findAllCustomScripts(String[] returnAttributes) {\n         String baseDn = baseDn();\n \n         List<CustomScript> result = persistenceEntryManager.findEntries(baseDn, CustomScript.class, null, returnAttributes);\n@@ -104,87 +101,76 @@ public abstract class AbstractCustomScriptService implements Serializable {\n         return result;\n     }\n \n-\tpublic CustomScript getScriptByInum(String inum) {\n-\t\treturn persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n-\t}\n+public CustomScript getScriptByInum(String inum) {\n+    return persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n+    }\n \n \tpublic List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION);\n+Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION.getValue());\n+    Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION.getValue());\n \n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n+return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+\t\tFilter scriptTypeFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+    Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findScriptByType(CustomScriptType type) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+    Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n \t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, null);\n-\t}\n+    }\n \n \tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n \t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, Filter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n \t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), null);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, Filter.createANDFilter(searchFilter, typeFilter), null);\n+    }\n \n \tpublic List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+    Filter searchFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n \n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n+return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, sizeLimit);\n+    }\n \n \tpublic String buildDn(String customScriptId) {\n-        final StringBuilder dn = new StringBuilder();\n+    final StringBuilder dn = new StringBuilder();\n         dn.append(String.format(\"inum=%s,\", customScriptId));\n         dn.append(baseDn());\n         return dn.toString();\n@@ -192,4 +178,4 @@ public abstract class AbstractCustomScriptService implements Serializable {\n \n     public abstract String baseDn();\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/79/AbstractCustomScriptService.java\nindex 7cbdd036c64..7c779048d21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/79/AbstractCustomScriptService.java\n@@ -8,16 +8,13 @@ package org.gluu.service.custom.script;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.inject.Inject;\n-\n import org.gluu.model.custom.script.CustomScriptType;\n import org.gluu.model.custom.script.model.CustomScript;\n import org.gluu.persist.PersistenceEntryManager;\n import org.gluu.search.filter.Filter;\n import org.gluu.util.OxConstants;\n import org.slf4j.Logger;\n-\n import com.google.common.base.Optional;\n \n /**\n@@ -26,6 +23,8 @@ import com.google.common.base.Optional;\n  * @author Yuriy Movchan Date: 12/03/2014\n  * @author Mougang T.Gasmyr\n  */\n+\n+\n public abstract class AbstractCustomScriptService implements Serializable {\n \n     private static final long serialVersionUID = -6187179012715072064L;\n@@ -57,28 +56,21 @@ public abstract class AbstractCustomScriptService implements Serializable {\n     }\n \n     public Optional<CustomScript> getCustomScriptByINum(String baseDn, String inum, String... returnAttributes) {\n-\n         final List<Filter> customScriptTypeFilters = new ArrayList<Filter>();\n-\n         final Filter customScriptTypeFilter = Filter.createEqualityFilter(\"inum\", inum);\n         customScriptTypeFilters.add(customScriptTypeFilter);\n \n         final Filter filter = Filter.createORFilter(customScriptTypeFilters);\n-\n         final List<CustomScript> result = persistenceEntryManager.findEntries(baseDn, CustomScript.class, filter, returnAttributes);\n-\n         if (result.isEmpty()) {\n-\n-            return  Optional.absent();\n+            return Optional.absent();\n         }\n \n         return Optional.of(result.get(0));\n     }\n \n-\n     public List<CustomScript> findAllCustomScripts(String[] returnAttributes) {\n         String baseDn = baseDn();\n-\n         List<CustomScript> result = persistenceEntryManager.findEntries(baseDn, CustomScript.class, null, returnAttributes);\n \n         return result;\n@@ -86,7 +78,6 @@ public abstract class AbstractCustomScriptService implements Serializable {\n \n     public List<CustomScript> findCustomScripts(List<CustomScriptType> customScriptTypes, String... returnAttributes) {\n         String baseDn = baseDn();\n-\n         if ((customScriptTypes == null) || (customScriptTypes.size() == 0)) {\n             return findAllCustomScripts(returnAttributes);\n         }\n@@ -98,92 +89,89 @@ public abstract class AbstractCustomScriptService implements Serializable {\n         }\n \n         Filter filter = Filter.createORFilter(customScriptTypeFilters);\n-\n         List<CustomScript> result = persistenceEntryManager.findEntries(baseDn, CustomScript.class, filter, returnAttributes);\n \n         return result;\n     }\n \n-\tpublic CustomScript getScriptByInum(String inum) {\n-\t\treturn persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION.getValue());\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, null);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), null);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\n-\t\treturn persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic String buildDn(String customScriptId) {\n+    public CustomScript getScriptByInum(String inum) {\n+        return persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(baseDn(),\n+            CustomScript.class,\n+                Filter.createANDFilter(searchFilter, scriptTypeFilter),\n+                    sizeLimit);\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION.getValue());\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, sizeLimit);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(baseDn(),\n+            CustomScript.class,\n+                Filter.createANDFilter(searchFilter, scriptTypeFilter),\n+                    sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, null);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(),\n+            CustomScript.class,\n+                Filter.createANDFilter(searchFilter, typeFilter),\n+                    sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, Filter.createANDFilter(searchFilter, typeFilter), null);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+\n+        return persistenceEntryManager.findEntries(baseDn(), CustomScript.class, searchFilter, sizeLimit);\n+    }\n+\n+    public String buildDn(String customScriptId) {\n         final StringBuilder dn = new StringBuilder();\n         dn.append(String.format(\"inum=%s,\", customScriptId));\n         dn.append(baseDn());\n@@ -192,4 +180,4 @@ public abstract class AbstractCustomScriptService implements Serializable {\n \n     public abstract String baseDn();\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 96
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "108",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/79/AbstractCustomScriptService.java\nindex 7cbdd036c64..02e5b79c8ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/79/AbstractCustomScriptService.java\n@@ -104,7 +104,7 @@ public abstract class AbstractCustomScriptService implements Serializable {\n         return result;\n     }\n \n-\tpublic CustomScript getScriptByInum(String inum) {\n+    public CustomScript getScriptByInum(String inum) {\n \t\treturn persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "108",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/79/AbstractCustomScriptService.java\nindex 7cbdd036c64..02e5b79c8ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/79/AbstractCustomScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/79/AbstractCustomScriptService.java\n@@ -104,7 +104,7 @@ public abstract class AbstractCustomScriptService implements Serializable {\n         return result;\n     }\n \n-\tpublic CustomScript getScriptByInum(String inum) {\n+    public CustomScript getScriptByInum(String inum) {\n \t\treturn persistenceEntryManager.find(CustomScript.class, buildDn(inum));\n \t}\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}