{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3763",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3763/FormattedLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3763/FormattedLog.java\nindex ba7aa2c43b2..43b52e1662c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3763/FormattedLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3763/FormattedLog.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.logging;\n \n import java.io.OutputStream;\n@@ -42,281 +43,131 @@ import org.neo4j.function.Suppliers;\n  */\n public class FormattedLog extends AbstractLog\n {\n-    static final Function<OutputStream, PrintWriter> OUTPUT_STREAM_CONVERTER =\n-            outputStream -> new PrintWriter( new OutputStreamWriter( outputStream, StandardCharsets.UTF_8 ) );\n-\n-    /**\n-     * A Builder for a {@link FormattedLog}\n-     */\n-    public static class Builder\n+  static final Function<OutputStream, PrintWriter> OUTPUT_STREAM_CONVERTER =\n+      outputStream -> new PrintWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));\n+\n+  /**\n+   * A Builder for a {@link FormattedLog}\n+   */\n+  public static class Builder\n+  {\n+    private ZoneId zoneId = ZoneOffset.UTC;\n+    private Object lock = this;\n+    private String category;\n+    private Level level = Level.INFO;\n+    private boolean autoFlush = true;\n+    private DateTimeFormatter dateTimeFormatter = FormattedLogger.DATE_TIME_FORMATTER;\n+    private Supplier<ZonedDateTime> dateTimeFormatterSupplier = () ->\n+        FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply(zoneId);\n+\n+    private Builder()\n     {\n-        private ZoneId zoneId = ZoneOffset.UTC;\n-        private Object lock = this;\n-        private String category;\n-        private Level level = Level.INFO;\n-        private boolean autoFlush = true;\n-        private DateTimeFormatter dateTimeFormatter = FormattedLogger.DATE_TIME_FORMATTER;\n-        private Supplier<ZonedDateTime> dateTimeFormatterSupplier = () ->\n-                FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply( zoneId );\n-\n-        private Builder()\n-        {\n-        }\n-\n-        /**\n-         * Set the zoneId for datestamps in the log\n-         *\n-         * @return this builder\n-         */\n-        public Builder withUTCZoneId()\n-        {\n-            return withZoneId( ZoneOffset.UTC );\n-        }\n-\n-        /**\n-         * Set the zoneId for datestamps in the log\n-         *\n-         * @return this builder\n-         * @param timezone to use\n-         * @deprecated use {@link #withZoneId(ZoneId)}\n-         */\n-        @Deprecated\n-        public Builder withTimeZone( TimeZone timezone )\n-        {\n-            return this.withZoneId( timezone.toZoneId() );\n-        }\n-\n-        /**\n-         * Set the zoneId for datestamps in the log\n-         *\n-         * @param zoneId to use\n-         * @return this builder\n-         */\n-        public Builder withZoneId( ZoneId zoneId )\n-        {\n-            this.zoneId = zoneId;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the dateFormat for datestamps in the log\n-         *\n-         * @param dateTimeFormatter the dateFormat to use for datestamps\n-         * @return this builder\n-         */\n-        public Builder withDateTimeFormatter( DateTimeFormatter dateTimeFormatter )\n-        {\n-            this.dateTimeFormatter = dateTimeFormatter;\n-            return this;\n-        }\n-\n-        /**\n-         * Use the specified object to synchronize on.\n-         *\n-         * @param lock the object to synchronize on\n-         * @return this builder\n-         */\n-        public Builder usingLock( Object lock )\n-        {\n-            this.lock = lock;\n-            return this;\n-        }\n-\n-        /**\n-         * Include the specified category in each output log line.\n-         *\n-         * @param category the category to include ing each output line\n-         * @return this builder\n-         */\n-        public Builder withCategory( String category )\n-        {\n-            this.category = category;\n-            return this;\n-        }\n-\n-        /**\n-         * Use the specified log {@link Level} as a default.\n-         *\n-         * @param level the log level to use as a default\n-         * @return this builder\n-         */\n-        public Builder withLogLevel( Level level )\n-        {\n-            this.level = level;\n-            return this;\n-        }\n-\n-        /**\n-         * Use the specified function\n-         *\n-         * @param zonedDateTimeSupplier the log level to use as a default\n-         * @return this builder\n-         */\n-        Builder withTimeSupplier( Supplier<ZonedDateTime> zonedDateTimeSupplier )\n-        {\n-            this.dateTimeFormatterSupplier = zonedDateTimeSupplier;\n-            return this;\n-        }\n-\n-        /**\n-         * Disable auto flushing.\n-         *\n-         * @return this builder\n-         */\n-        public Builder withoutAutoFlush()\n-        {\n-            autoFlush = false;\n-            return this;\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLog} instance that writes messages to an {@link OutputStream}.\n-         *\n-         * @param out An {@link OutputStream} to write to\n-         * @return A {@link FormattedLog} instance that writes to the specified OutputStream\n-         */\n-        public FormattedLog toOutputStream( OutputStream out )\n-        {\n-            return toPrintWriter( Suppliers.singleton( OUTPUT_STREAM_CONVERTER.apply( out ) ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLog} instance that writes messages to {@link OutputStream}s obtained from the specified\n-         * {@link Supplier}. The OutputStream is obtained from the Supplier before every log message is written.\n-         *\n-         * @param outSupplier A supplier for an output stream to write to\n-         * @return A {@link FormattedLog} instance\n-         */\n-        public FormattedLog toOutputStream( Supplier<OutputStream> outSupplier )\n-        {\n-            return toPrintWriter( Suppliers.adapted( outSupplier, OUTPUT_STREAM_CONVERTER ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLog} instance that writes messages to a {@link Writer}.\n-         *\n-         * @param writer A {@link Writer} to write to\n-         * @return A {@link FormattedLog} instance that writes to the specified Writer\n-         */\n-        public FormattedLog toWriter( Writer writer )\n-        {\n-            return toPrintWriter( new PrintWriter( writer ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLog} instance that writes messages to a {@link PrintWriter}.\n-         *\n-         * @param writer A {@link PrintWriter} to write to\n-         * @return A {@link FormattedLog} instance that writes to the specified PrintWriter\n-         */\n-        public FormattedLog toPrintWriter( PrintWriter writer )\n-        {\n-            return toPrintWriter( Suppliers.singleton( writer ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLog} instance that writes messages to {@link PrintWriter}s obtained from the specified\n-         * {@link Supplier}. The PrintWriter is obtained from the Supplier before every log message is written.\n-         *\n-         * @param writerSupplier A supplier for a {@link PrintWriter} to write to\n-         * @return A {@link FormattedLog} instance that writes to the specified PrintWriter\n-         */\n-        public FormattedLog toPrintWriter( Supplier<PrintWriter> writerSupplier )\n-        {\n-            return new FormattedLog( writerSupplier, zoneId, lock, category, level, autoFlush,\n-                    dateTimeFormatter, dateTimeFormatterSupplier );\n-        }\n     }\n \n-    private final Supplier<PrintWriter> writerSupplier;\n-    final ZoneId zoneId;\n-    final Object lock;\n-    private final String category;\n-    private final AtomicReference<Level> levelRef;\n-    final boolean autoFlush;\n-    private final Logger debugLogger;\n-    private final Logger infoLogger;\n-    private final Logger warnLogger;\n-    private final Logger errorLogger;\n-\n     /**\n-     * Start creating a {@link FormattedLog} with UTC timezone for datestamps in the log\n+     * Set the zoneId for datestamps in the log\n      *\n-     * @return a builder for a {@link FormattedLog}\n+     * @return this builder\n      */\n-    public static Builder withUTCTimeZone()\n+    public Builder withUTCZoneId()\n     {\n-        return new Builder().withUTCZoneId();\n+      return withZoneId(ZoneOffset.UTC);\n     }\n \n     /**\n-     * Start creating a {@link FormattedLog} with the specified zoneId from timezone for datestamps in the log\n+     * Set the zoneId for datestamps in the log\n      *\n      * @param timezone to use\n-     * @return a builder for a {@link FormattedLog}\n+     * @return this builder\n      * @deprecated use {@link #withZoneId(ZoneId)}\n      */\n     @Deprecated\n-    public static Builder withTimeZone( TimeZone timezone )\n+    public Builder withTimeZone(TimeZone timezone)\n     {\n-        return new Builder().withZoneId( timezone.toZoneId() );\n+      return this.withZoneId(timezone.toZoneId());\n     }\n \n     /**\n-     * Start creating a {@link FormattedLog} with the specified zoneId for datestamps in the log\n+     * Set the zoneId for datestamps in the log\n      *\n      * @param zoneId to use\n-     * @return a builder for a {@link FormattedLog}\n+     * @return this builder\n+     */\n+    public Builder withZoneId(ZoneId zoneId)\n+    {\n+      this.zoneId = zoneId;\n+      return this;\n+    }\n+\n+    /**\n+     * Set the dateFormat for datestamps in the log\n+     *\n+     * @param dateTimeFormatter the dateFormat to use for datestamps\n+     * @return this builder\n      */\n-    public static Builder withZoneId( ZoneId zoneId )\n+    public Builder withDateTimeFormatter(DateTimeFormatter dateTimeFormatter)\n     {\n-        return new Builder().withZoneId( zoneId );\n+      this.dateTimeFormatter = dateTimeFormatter;\n+      return this;\n     }\n \n     /**\n-     * Start creating a {@link FormattedLog} using the specified object to synchronize on.\n-     * Use {@link Builder#toOutputStream} to complete.\n+     * Use the specified object to synchronize on.\n      *\n      * @param lock the object to synchronize on\n-     * @return a builder for a {@link FormattedLog}\n+     * @return this builder\n      */\n-    public static Builder usingLock( Object lock )\n+    public Builder usingLock(Object lock)\n     {\n-        return new Builder().usingLock( lock );\n+      this.lock = lock;\n+      return this;\n     }\n \n     /**\n-     * Include the specified category in each output log line\n+     * Include the specified category in each output log line.\n      *\n      * @param category the category to include ing each output line\n-     * @return a builder for a {@link FormattedLog}\n+     * @return this builder\n      */\n-    public static Builder withCategory( String category )\n+    public Builder withCategory(String category)\n     {\n-        return new Builder().withCategory( category );\n+      this.category = category;\n+      return this;\n     }\n \n     /**\n-     * Start creating a {@link FormattedLog} with the specified log {@link Level} as a default.\n-     * Use {@link Builder#toOutputStream} to complete.\n+     * Use the specified log {@link Level} as a default.\n      *\n      * @param level the log level to use as a default\n-     * @return a builder for a {@link FormattedLog}\n+     * @return this builder\n+     */\n+    public Builder withLogLevel(Level level)\n+    {\n+      this.level = level;\n+      return this;\n+    }\n+\n+    /**\n+     * Use the specified function\n+     *\n+     * @param zonedDateTimeSupplier the log level to use as a default\n+     * @return this builder\n      */\n-    public static Builder withLogLevel( Level level )\n+    Builder withTimeSupplier(Supplier<ZonedDateTime> zonedDateTimeSupplier)\n     {\n-        return new Builder().withLogLevel( level );\n+      this.dateTimeFormatterSupplier = zonedDateTimeSupplier;\n+      return this;\n     }\n \n     /**\n-     * Start creating a {@link FormattedLog} without auto flushing.\n-     * Use {@link Builder#toOutputStream} to complete.\n+     * Disable auto flushing.\n      *\n-     * @return a builder for a {@link FormattedLog}\n+     * @return this builder\n      */\n-    public static Builder withoutAutoFlush()\n+    public Builder withoutAutoFlush()\n     {\n-        return new Builder().withoutAutoFlush();\n+      autoFlush = false;\n+      return this;\n     }\n \n     /**\n@@ -325,9 +176,9 @@ public class FormattedLog extends AbstractLog\n      * @param out An {@link OutputStream} to write to\n      * @return A {@link FormattedLog} instance that writes to the specified OutputStream\n      */\n-    public static FormattedLog toOutputStream( OutputStream out )\n+    public FormattedLog toOutputStream(OutputStream out)\n     {\n-        return new Builder().toOutputStream( out );\n+      return toPrintWriter(Suppliers.singleton(OUTPUT_STREAM_CONVERTER.apply(out)));\n     }\n \n     /**\n@@ -337,9 +188,9 @@ public class FormattedLog extends AbstractLog\n      * @param outSupplier A supplier for an output stream to write to\n      * @return A {@link FormattedLog} instance\n      */\n-    public static FormattedLog toOutputStream( Supplier<OutputStream> outSupplier )\n+    public FormattedLog toOutputStream(Supplier<OutputStream> outSupplier)\n     {\n-        return new Builder().toOutputStream( outSupplier );\n+      return toPrintWriter(Suppliers.adapted(outSupplier, OUTPUT_STREAM_CONVERTER));\n     }\n \n     /**\n@@ -348,9 +199,9 @@ public class FormattedLog extends AbstractLog\n      * @param writer A {@link Writer} to write to\n      * @return A {@link FormattedLog} instance that writes to the specified Writer\n      */\n-    public static FormattedLog toWriter( Writer writer )\n+    public FormattedLog toWriter(Writer writer)\n     {\n-        return new Builder().toWriter( writer );\n+      return toPrintWriter(new PrintWriter(writer));\n     }\n \n     /**\n@@ -359,9 +210,9 @@ public class FormattedLog extends AbstractLog\n      * @param writer A {@link PrintWriter} to write to\n      * @return A {@link FormattedLog} instance that writes to the specified PrintWriter\n      */\n-    public static FormattedLog toPrintWriter( PrintWriter writer )\n+    public FormattedLog toPrintWriter(PrintWriter writer)\n     {\n-        return new Builder().toPrintWriter( writer );\n+      return toPrintWriter(Suppliers.singleton(writer));\n     }\n \n     /**\n@@ -371,149 +222,299 @@ public class FormattedLog extends AbstractLog\n      * @param writerSupplier A supplier for a {@link PrintWriter} to write to\n      * @return A {@link FormattedLog} instance that writes to the specified PrintWriter\n      */\n-    public static FormattedLog toPrintWriter( Supplier<PrintWriter> writerSupplier )\n-    {\n-        return new Builder().toPrintWriter( writerSupplier );\n-    }\n-\n-    protected FormattedLog(\n-            Supplier<PrintWriter> writerSupplier,\n-            ZoneId zoneId,\n-            Object maybeLock,\n-            String category,\n-            Level level,\n-            boolean autoFlush )\n-    {\n-        this( writerSupplier, zoneId, maybeLock, category, level, autoFlush,\n-                FormattedLogger.DATE_TIME_FORMATTER,\n-                () -> FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply( zoneId ) );\n-    }\n-\n-    protected FormattedLog(\n-            Supplier<PrintWriter> writerSupplier,\n-            ZoneId zoneId,\n-            Object maybeLock,\n-            String category,\n-            Level level,\n-            boolean autoFlush,\n-            DateTimeFormatter dateTimeFormatter,\n-            Supplier<ZonedDateTime> dateTimeSupplier )\n-    {\n-        this.writerSupplier = writerSupplier;\n-        this.zoneId = zoneId;\n-        this.lock = ( maybeLock != null ) ? maybeLock : this;\n-        this.category = category;\n-        this.levelRef = new AtomicReference<>( level );\n-        this.autoFlush = autoFlush;\n-\n-        String debugPrefix = ( category != null && !category.isEmpty() ) ? \"DEBUG [\" + category + \"]\" : \"DEBUG\";\n-        String infoPrefix = ( category != null && !category.isEmpty() ) ? \"INFO [\" + category + \"]\" : \"INFO \";\n-        String warnPrefix = ( category != null && !category.isEmpty() ) ? \"WARN [\" + category + \"]\" : \"WARN \";\n-        String errorPrefix = ( category != null && !category.isEmpty() ) ? \"ERROR [\" + category + \"]\" : \"ERROR\";\n-\n-        this.debugLogger = new FormattedLogger( this, writerSupplier, debugPrefix, dateTimeFormatter,\n-                dateTimeSupplier );\n-        this.infoLogger = new FormattedLogger( this, writerSupplier, infoPrefix, dateTimeFormatter,\n-                dateTimeSupplier );\n-        this.warnLogger = new FormattedLogger( this, writerSupplier, warnPrefix, dateTimeFormatter,\n-                dateTimeSupplier );\n-        this.errorLogger = new FormattedLogger( this, writerSupplier, errorPrefix, dateTimeFormatter,\n-                dateTimeSupplier );\n-    }\n-\n-    /**\n-     * Get the current {@link Level} that logging is enabled at\n-     *\n-     * @return the current level that logging is enabled at\n-     */\n-    public Level getLevel()\n-    {\n-        return levelRef.get();\n-    }\n-\n-    /**\n-     * Set the {@link Level} that logging should be enabled at\n-     *\n-     * @param level the new logging level\n-     * @return the previous logging level\n-     */\n-    public Level setLevel( Level level )\n-    {\n-        return levelRef.getAndSet( level );\n-    }\n-\n-    @Override\n-    public boolean isDebugEnabled()\n-    {\n-        return Level.DEBUG.compareTo( levelRef.get() ) >= 0;\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Logger debugLogger()\n-    {\n-        return isDebugEnabled() ? this.debugLogger : NullLogger.getInstance();\n-    }\n-\n-    /**\n-     * @return true if the current log level enables info logging\n-     */\n-    public boolean isInfoEnabled()\n-    {\n-        return Level.INFO.compareTo( levelRef.get() ) >= 0;\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Logger infoLogger()\n-    {\n-        return isInfoEnabled() ? this.infoLogger : NullLogger.getInstance();\n-    }\n-\n-    /**\n-     * @return true if the current log level enables warn logging\n-     */\n-    public boolean isWarnEnabled()\n-    {\n-        return Level.WARN.compareTo( levelRef.get() ) >= 0;\n-    }\n-\n-    @Nonnull\n-    @Override\n-    public Logger warnLogger()\n-    {\n-        return isWarnEnabled() ? this.warnLogger : NullLogger.getInstance();\n-    }\n-\n-    /**\n-     * @return true if the current log level enables error logging\n-     */\n-    public boolean isErrorEnabled()\n+    public FormattedLog toPrintWriter(Supplier<PrintWriter> writerSupplier)\n     {\n-        return Level.ERROR.compareTo( levelRef.get() ) >= 0;\n+      return new FormattedLog(writerSupplier, zoneId, lock, category, level, autoFlush,\n+          dateTimeFormatter, dateTimeFormatterSupplier);\n     }\n-\n-    @Nonnull\n-    @Override\n-    public Logger errorLogger()\n+  }\n+\n+  private final Supplier<PrintWriter> writerSupplier;\n+  final ZoneId zoneId;\n+  final Object lock;\n+  private final String category;\n+  private final AtomicReference<Level> levelRef;\n+  final boolean autoFlush;\n+  private final Logger debugLogger;\n+  private final Logger infoLogger;\n+  private final Logger warnLogger;\n+  private final Logger errorLogger;\n+\n+  /**\n+   * Start creating a {@link FormattedLog} with UTC timezone for datestamps in the log\n+   *\n+   * @return a builder for a {@link FormattedLog}\n+   */\n+  public static Builder withUTCTimeZone()\n+  {\n+    return new Builder().withUTCZoneId();\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLog} with the specified zoneId from timezone for datestamps in the log\n+   *\n+   * @param timezone to use\n+   * @return a builder for a {@link FormattedLog}\n+   * @deprecated use {@link #withZoneId(ZoneId)}\n+   */\n+  @Deprecated\n+  public static Builder withTimeZone(TimeZone timezone)\n+  {\n+    return new Builder().withZoneId(timezone.toZoneId());\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLog} with the specified zoneId for datestamps in the log\n+   *\n+   * @param zoneId to use\n+   * @return a builder for a {@link FormattedLog}\n+   */\n+  public static Builder withZoneId(ZoneId zoneId)\n+  {\n+    return new Builder().withZoneId(zoneId);\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLog} using the specified object to synchronize on.\n+   * Use {@link Builder#toOutputStream} to complete.\n+   *\n+   * @param lock the object to synchronize on\n+   * @return a builder for a {@link FormattedLog}\n+   */\n+  public static Builder usingLock(Object lock)\n+  {\n+    return new Builder().usingLock(lock);\n+  }\n+\n+  /**\n+   * Include the specified category in each output log line\n+   *\n+   * @param category the category to include ing each output line\n+   * @return a builder for a {@link FormattedLog}\n+   */\n+  public static Builder withCategory(String category)\n+  {\n+    return new Builder().withCategory(category);\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLog} with the specified log {@link Level} as a default.\n+   * Use {@link Builder#toOutputStream} to complete.\n+   *\n+   * @param level the log level to use as a default\n+   * @return a builder for a {@link FormattedLog}\n+   */\n+  public static Builder withLogLevel(Level level)\n+  {\n+    return new Builder().withLogLevel(level);\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLog} without auto flushing.\n+   * Use {@link Builder#toOutputStream} to complete.\n+   *\n+   * @return a builder for a {@link FormattedLog}\n+   */\n+  public static Builder withoutAutoFlush()\n+  {\n+    return new Builder().withoutAutoFlush();\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLog} instance that writes messages to an {@link OutputStream}.\n+   *\n+   * @param out An {@link OutputStream} to write to\n+   * @return A {@link FormattedLog} instance that writes to the specified OutputStream\n+   */\n+  public static FormattedLog toOutputStream(OutputStream out)\n+  {\n+    return new Builder().toOutputStream(out);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLog} instance that writes messages to {@link OutputStream}s obtained from the specified\n+   * {@link Supplier}. The OutputStream is obtained from the Supplier before every log message is written.\n+   *\n+   * @param outSupplier A supplier for an output stream to write to\n+   * @return A {@link FormattedLog} instance\n+   */\n+  public static FormattedLog toOutputStream(Supplier<OutputStream> outSupplier)\n+  {\n+    return new Builder().toOutputStream(outSupplier);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLog} instance that writes messages to a {@link Writer}.\n+   *\n+   * @param writer A {@link Writer} to write to\n+   * @return A {@link FormattedLog} instance that writes to the specified Writer\n+   */\n+  public static FormattedLog toWriter(Writer writer)\n+  {\n+    return new Builder().toWriter(writer);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLog} instance that writes messages to a {@link PrintWriter}.\n+   *\n+   * @param writer A {@link PrintWriter} to write to\n+   * @return A {@link FormattedLog} instance that writes to the specified PrintWriter\n+   */\n+  public static FormattedLog toPrintWriter(PrintWriter writer)\n+  {\n+    return new Builder().toPrintWriter(writer);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLog} instance that writes messages to {@link PrintWriter}s obtained from the specified\n+   * {@link Supplier}. The PrintWriter is obtained from the Supplier before every log message is written.\n+   *\n+   * @param writerSupplier A supplier for a {@link PrintWriter} to write to\n+   * @return A {@link FormattedLog} instance that writes to the specified PrintWriter\n+   */\n+  public static FormattedLog toPrintWriter(Supplier<PrintWriter> writerSupplier)\n+  {\n+    return new Builder().toPrintWriter(writerSupplier);\n+  }\n+\n+  protected FormattedLog(\n+      Supplier<PrintWriter> writerSupplier,\n+      ZoneId zoneId,\n+      Object maybeLock,\n+      String category,\n+      Level level,\n+      boolean autoFlush)\n+  {\n+    this(writerSupplier, zoneId, maybeLock, category, level, autoFlush,\n+        FormattedLogger.DATE_TIME_FORMATTER,\n+        () -> FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply(zoneId));\n+  }\n+\n+  protected FormattedLog(\n+      Supplier<PrintWriter> writerSupplier,\n+      ZoneId zoneId,\n+      Object maybeLock,\n+      String category,\n+      Level level,\n+      boolean autoFlush,\n+      DateTimeFormatter dateTimeFormatter,\n+      Supplier<ZonedDateTime> dateTimeSupplier)\n+  {\n+    this.writerSupplier = writerSupplier;\n+    this.zoneId = zoneId;\n+    this.lock = (maybeLock != null) ? maybeLock : this;\n+    this.category = category;\n+    this.levelRef = new AtomicReference<>(level);\n+    this.autoFlush = autoFlush;\n+\n+    String debugPrefix = (category != null && !category.isEmpty()) ? \"DEBUG [\" + category + \"]\" : \"DEBUG\";\n+    String infoPrefix = (category != null && !category.isEmpty()) ? \"INFO [\" + category + \"]\" : \"INFO \";\n+    String warnPrefix = (category != null && !category.isEmpty()) ? \"WARN [\" + category + \"]\" : \"WARN \";\n+    String errorPrefix = (category != null && !category.isEmpty()) ? \"ERROR [\" + category + \"]\" : \"ERROR\";\n+\n+    this.debugLogger = new FormattedLogger(this, writerSupplier, debugPrefix, dateTimeFormatter,\n+        dateTimeSupplier);\n+    this.infoLogger = new FormattedLogger(this, writerSupplier, infoPrefix, dateTimeFormatter,\n+        dateTimeSupplier);\n+    this.warnLogger = new FormattedLogger(this, writerSupplier, warnPrefix, dateTimeFormatter,\n+        dateTimeSupplier);\n+    this.errorLogger = new FormattedLogger(this, writerSupplier, errorPrefix, dateTimeFormatter,\n+        dateTimeSupplier);\n+  }\n+\n+  /**\n+   * Get the current {@link Level} that logging is enabled at\n+   *\n+   * @return the current level that logging is enabled at\n+   */\n+  public Level getLevel()\n+  {\n+    return levelRef.get();\n+  }\n+\n+  /**\n+   * Set the {@link Level} that logging should be enabled at\n+   *\n+   * @param level the new logging level\n+   * @return the previous logging level\n+   */\n+  public Level setLevel(Level level)\n+  {\n+    return levelRef.getAndSet(level);\n+  }\n+\n+  @Override\n+  public boolean isDebugEnabled()\n+  {\n+    return Level.DEBUG.compareTo(levelRef.get()) >= 0;\n+  }\n+\n+  @Nonnull\n+  @Override\n+  public Logger debugLogger()\n+  {\n+    return isDebugEnabled() ? this.debugLogger : NullLogger.getInstance();\n+  }\n+\n+  /**\n+   * @return true if the current log level enables info logging\n+   */\n+  public boolean isInfoEnabled()\n+  {\n+    return Level.INFO.compareTo(levelRef.get()) >= 0;\n+  }\n+\n+  @Nonnull\n+  @Override\n+  public Logger infoLogger()\n+  {\n+    return isInfoEnabled() ? this.infoLogger : NullLogger.getInstance();\n+  }\n+\n+  /**\n+   * @return true if the current log level enables warn logging\n+   */\n+  public boolean isWarnEnabled()\n+  {\n+    return Level.WARN.compareTo(levelRef.get()) >= 0;\n+  }\n+\n+  @Nonnull\n+  @Override\n+  public Logger warnLogger()\n+  {\n+    return isWarnEnabled() ? this.warnLogger : NullLogger.getInstance();\n+  }\n+\n+  /**\n+   * @return true if the current log level enables error logging\n+   */\n+  public boolean isErrorEnabled()\n+  {\n+    return Level.ERROR.compareTo(levelRef.get()) >= 0;\n+  }\n+\n+  @Nonnull\n+  @Override\n+  public Logger errorLogger()\n+  {\n+    return isErrorEnabled() ? this.errorLogger : NullLogger.getInstance();\n+  }\n+\n+  @Override\n+  public void bulk(@Nonnull Consumer<Log> consumer)\n+  {\n+    PrintWriter writer;\n+    synchronized (lock)\n     {\n-        return isErrorEnabled() ? this.errorLogger : NullLogger.getInstance();\n+      writer = writerSupplier.get();\n+      consumer.accept(new FormattedLog(Suppliers.singleton(writer), zoneId,\n+          lock, category, levelRef.get(), false));\n     }\n-\n-    @Override\n-    public void bulk( @Nonnull Consumer<Log> consumer )\n+    if (autoFlush)\n     {\n-        PrintWriter writer;\n-        synchronized ( lock )\n-        {\n-            writer = writerSupplier.get();\n-            consumer.accept( new FormattedLog( Suppliers.singleton( writer ), zoneId,\n-                    lock, category, levelRef.get(), false ) );\n-        }\n-        if ( autoFlush )\n-        {\n-            writer.flush();\n-        }\n+      writer.flush();\n     }\n+  }\n \n }\n",
            "diff_size": 691
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3763/FormattedLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3763/FormattedLog.java\nindex ba7aa2c43b2..89af415af73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3763/FormattedLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3763/FormattedLog.java\n@@ -42,10 +42,10 @@ import org.neo4j.function.Suppliers;\n  */\n public class FormattedLog extends AbstractLog\n {\n-    static final Function<OutputStream, PrintWriter> OUTPUT_STREAM_CONVERTER =\n+    static final Function<OutputStream,PrintWriter> OUTPUT_STREAM_CONVERTER =\n             outputStream -> new PrintWriter( new OutputStreamWriter( outputStream, StandardCharsets.UTF_8 ) );\n \n-    /**\n+/**\n      * A Builder for a {@link FormattedLog}\n      */\n     public static class Builder\n@@ -56,10 +56,9 @@ public class FormattedLog extends AbstractLog\n         private Level level = Level.INFO;\n         private boolean autoFlush = true;\n         private DateTimeFormatter dateTimeFormatter = FormattedLogger.DATE_TIME_FORMATTER;\n-        private Supplier<ZonedDateTime> dateTimeFormatterSupplier = () ->\n-                FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply( zoneId );\n+        private Supplier<ZonedDateTime> dateTimeFormatterSupplier = () -> FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply( zoneId );\n \n-        private Builder()\n+private Builder()\n         {\n         }\n \n@@ -225,7 +224,7 @@ public class FormattedLog extends AbstractLog\n         {\n             return new FormattedLog( writerSupplier, zoneId, lock, category, level, autoFlush,\n                     dateTimeFormatter, dateTimeFormatterSupplier );\n-        }\n+    }\n     }\n \n     private final Supplier<PrintWriter> writerSupplier;\n@@ -376,8 +375,7 @@ public class FormattedLog extends AbstractLog\n         return new Builder().toPrintWriter( writerSupplier );\n     }\n \n-    protected FormattedLog(\n-            Supplier<PrintWriter> writerSupplier,\n+    protected FormattedLog( Supplier<PrintWriter> writerSupplier,\n             ZoneId zoneId,\n             Object maybeLock,\n             String category,\n@@ -385,19 +383,16 @@ public class FormattedLog extends AbstractLog\n             boolean autoFlush )\n     {\n         this( writerSupplier, zoneId, maybeLock, category, level, autoFlush,\n-                FormattedLogger.DATE_TIME_FORMATTER,\n-                () -> FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply( zoneId ) );\n+                FormattedLogger.DATE_TIME_FORMATTER,() -> FormattedLogger.DEFAULT_CURRENT_DATE_TIME.apply( zoneId ) );\n     }\n \n-    protected FormattedLog(\n-            Supplier<PrintWriter> writerSupplier,\n+    protected FormattedLog( Supplier<PrintWriter> writerSupplier,\n             ZoneId zoneId,\n             Object maybeLock,\n             String category,\n             Level level,\n             boolean autoFlush,\n-            DateTimeFormatter dateTimeFormatter,\n-            Supplier<ZonedDateTime> dateTimeSupplier )\n+            DateTimeFormatter dateTimeFormatter, Supplier<ZonedDateTime> dateTimeSupplier )\n     {\n         this.writerSupplier = writerSupplier;\n         this.zoneId = zoneId;\n@@ -410,14 +405,13 @@ public class FormattedLog extends AbstractLog\n         String infoPrefix = ( category != null && !category.isEmpty() ) ? \"INFO [\" + category + \"]\" : \"INFO \";\n         String warnPrefix = ( category != null && !category.isEmpty() ) ? \"WARN [\" + category + \"]\" : \"WARN \";\n         String errorPrefix = ( category != null && !category.isEmpty() ) ? \"ERROR [\" + category + \"]\" : \"ERROR\";\n-\n-        this.debugLogger = new FormattedLogger( this, writerSupplier, debugPrefix, dateTimeFormatter,\n+this.debugLogger = new FormattedLogger( this, writerSupplier, debugPrefix, dateTimeFormatter,\n                 dateTimeSupplier );\n-        this.infoLogger = new FormattedLogger( this, writerSupplier, infoPrefix, dateTimeFormatter,\n+this.infoLogger = new FormattedLogger( this, writerSupplier, infoPrefix, dateTimeFormatter,\n                 dateTimeSupplier );\n-        this.warnLogger = new FormattedLogger( this, writerSupplier, warnPrefix, dateTimeFormatter,\n+this.warnLogger = new FormattedLogger( this, writerSupplier, warnPrefix, dateTimeFormatter,\n                 dateTimeSupplier );\n-        this.errorLogger = new FormattedLogger( this, writerSupplier, errorPrefix, dateTimeFormatter,\n+this.errorLogger = new FormattedLogger( this, writerSupplier, errorPrefix, dateTimeFormatter,\n                 dateTimeSupplier );\n     }\n \n@@ -510,10 +504,10 @@ public class FormattedLog extends AbstractLog\n             consumer.accept( new FormattedLog( Suppliers.singleton( writer ), zoneId,\n                     lock, category, levelRef.get(), false ) );\n         }\n-        if ( autoFlush )\n+\n+if ( autoFlush )\n         {\n             writer.flush();\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}