{
    "project_name": "opencb-opencga",
    "error_id": "45",
    "information": {
        "errors": [
            {
                "line": "235",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 150).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    .writeValues(bufferedWriter)) {\n                for (File file : FileUtils.listFiles(getScratchDir().toFile(), new RegexFileFilter(\"knockout.sample..*.json.gz\"), null)) {\n                    KnockoutByIndividual knockoutByIndividual = reader.readValue(org.opencb.commons.utils.FileUtils.newBufferedReader(file.toPath()));\n\n                    Individual individual = catalogManager\n                            .getIndividualManager()",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/45/KnockoutAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/45/KnockoutAnalysis.java\nindex 5cd419eceeb..31cd8c8e05d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/45/KnockoutAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/45/KnockoutAnalysis.java\n@@ -53,269 +53,269 @@ import java.util.*;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n-@Tool(id= KnockoutAnalysis.ID, description = KnockoutAnalysis.DESCRIPTION, resource = Enums.Resource.VARIANT)\n+@Tool(id = KnockoutAnalysis.ID, description = KnockoutAnalysis.DESCRIPTION, resource = Enums.Resource.VARIANT)\n public class KnockoutAnalysis extends OpenCgaToolScopeStudy {\n-    public static final String ID = \"knockout\";\n-    public static final String DESCRIPTION = \"Obtains the list of knocked out genes for each sample.\";\n-    protected static final String KNOCKOUT_INDIVIDUALS_JSON = \"knockout.individuals.json.gz\";\n-    protected static final String KNOCKOUT_GENES_JSON = \"knockout.genes.json.gz\";\n+  public static final String ID = \"knockout\";\n+  public static final String DESCRIPTION = \"Obtains the list of knocked out genes for each sample.\";\n+  protected static final String KNOCKOUT_INDIVIDUALS_JSON = \"knockout.individuals.json.gz\";\n+  protected static final String KNOCKOUT_GENES_JSON = \"knockout.genes.json.gz\";\n \n-    private final KnockoutAnalysisParams analysisParams = new KnockoutAnalysisParams();\n-    private String studyFqn;\n+  private final KnockoutAnalysisParams analysisParams = new KnockoutAnalysisParams();\n+  private String studyFqn;\n \n-    @Override\n-    protected List<String> getSteps() {\n-        return Arrays.asList(\n-                \"list-genes\",\n-                \"list-families\",\n-                getId(),\n-                \"add-metadata-to-output-files\");\n-    }\n-\n-    @Override\n-    protected void check() throws Exception {\n-        analysisParams.updateParams(params);\n-        studyFqn = getStudyFqn();\n-        executorParams.put(\"executionMethod\", params.getString(\"executionMethod\", \"auto\"));\n+  @Override\n+  protected List<String> getSteps() {\n+    return Arrays.asList(\n+        \"list-genes\",\n+        \"list-families\",\n+        getId(),\n+        \"add-metadata-to-output-files\");\n+  }\n \n-        if (CollectionUtils.isEmpty(analysisParams.getSample())\n-                || analysisParams.getSample().size() == 1 && analysisParams.getSample().get(0).equals(ParamConstants.ALL)) {\n-            analysisParams.setSample(new ArrayList<>(getVariantStorageManager().getIndexedSamples(studyFqn, getToken())));\n-        }\n+  @Override\n+  protected void check() throws Exception {\n+    analysisParams.updateParams(params);\n+    studyFqn = getStudyFqn();\n+    executorParams.put(\"executionMethod\", params.getString(\"executionMethod\", \"auto\"));\n \n-        if (StringUtils.isEmpty(analysisParams.getBiotype())) {\n-            if (CollectionUtils.isEmpty(analysisParams.getGene()) && CollectionUtils.isEmpty(analysisParams.getPanel())) {\n-                analysisParams.setBiotype(VariantAnnotationUtils.PROTEIN_CODING);\n-            }\n-        }\n+    if (CollectionUtils.isEmpty(analysisParams.getSample())\n+        || analysisParams.getSample().size() == 1 && analysisParams.getSample().get(0).equals(ParamConstants.ALL)) {\n+      analysisParams.setSample(new ArrayList<>(getVariantStorageManager().getIndexedSamples(studyFqn, getToken())));\n+    }\n \n-        if (StringUtils.isEmpty(analysisParams.getConsequenceType())) {\n-            analysisParams.setConsequenceType(VariantQueryUtils.LOF);\n-        }\n+    if (StringUtils.isEmpty(analysisParams.getBiotype())) {\n+      if (CollectionUtils.isEmpty(analysisParams.getGene()) && CollectionUtils.isEmpty(analysisParams.getPanel())) {\n+        analysisParams.setBiotype(VariantAnnotationUtils.PROTEIN_CODING);\n+      }\n+    }\n \n-        super.check();\n+    if (StringUtils.isEmpty(analysisParams.getConsequenceType())) {\n+      analysisParams.setConsequenceType(VariantQueryUtils.LOF);\n     }\n \n-    @Override\n-    protected void run() throws Exception {\n+    super.check();\n+  }\n \n-        List<String> proteinCodingGenes = new LinkedList<>();\n-        List<String> otherGenes = new LinkedList<>();\n+  @Override\n+  protected void run() throws Exception {\n \n-        step(\"list-genes\", () -> {\n-            CellBaseUtils cellBaseUtils = getVariantStorageManager().getCellBaseUtils(studyFqn, token);\n-            QueryOptions queryOptions = new QueryOptions(QueryOptions.INCLUDE, \"id,name,chromosome,start,end,biotype,transcripts.biotype\");\n+    List<String> proteinCodingGenes = new LinkedList<>();\n+    List<String> otherGenes = new LinkedList<>();\n \n-            boolean allProteinCoding = false;\n-            if (CollectionUtils.isEmpty(analysisParams.getGene()) && CollectionUtils.isEmpty(analysisParams.getPanel())) {\n-                // No genes or panel given.\n-                // Get genes by biotype\n-                List<String> biotypes = new ArrayList<>(Arrays.asList(analysisParams.getBiotype().split(\",\")));\n-                if (biotypes.contains(VariantAnnotationUtils.PROTEIN_CODING)) {\n-                    allProteinCoding = true;\n-                    proteinCodingGenes.add(VariantQueryUtils.ALL);\n-                    biotypes.remove(VariantAnnotationUtils.PROTEIN_CODING);\n-                }\n-                if (!biotypes.isEmpty()) {\n-                    Query query = new Query(GeneDBAdaptor.QueryParams.TRANSCRIPT_BIOTYPE.key(), String.join(\",\", biotypes));\n-                    for (Gene gene : cellBaseUtils.getCellBaseClient().getGeneClient().search(query, queryOptions).allResults()) {\n-                        otherGenes.add(gene.getName());\n-                    }\n-                }\n-            } else {\n-                Set<String> genes = new HashSet<>();\n-                Predicate<String> biotypeFilter;\n-                if (StringUtils.isNotEmpty(analysisParams.getBiotype())) {\n-                    biotypeFilter = new HashSet<>(Arrays.asList(analysisParams.getBiotype().split(\",\")))::contains;\n-                } else {\n-                    biotypeFilter = s -> true;\n-                }\n-                if (CollectionUtils.isNotEmpty(analysisParams.getGene())) {\n-                    genes.addAll(analysisParams.getGene());\n-                }\n-                if (CollectionUtils.isNotEmpty(analysisParams.getPanel())) {\n-                    List<Panel> panels = getCatalogManager()\n-                            .getPanelManager()\n-                            .get(studyFqn, analysisParams.getPanel(), new QueryOptions(), getToken())\n-                            .getResults();\n-                    for (Panel panel : panels) {\n-                        for (DiseasePanel.GenePanel gene : panel.getGenes()) {\n-                            genes.add(gene.getName());\n-                        }\n-                    }\n-                }\n-                for (Gene gene : cellBaseUtils.getCellBaseClient().getGeneClient().get(new ArrayList<>(genes), queryOptions).allResults()) {\n-                    Set<String> biotypes = gene.getTranscripts().stream()\n-                            .map(Transcript::getBiotype)\n-                            .filter(biotypeFilter)\n-                            .collect(Collectors.toSet());\n-                    if (biotypes.contains(VariantAnnotationUtils.PROTEIN_CODING)) {\n-                        proteinCodingGenes.add(gene.getName());\n-                    }\n-                    if (biotypes.size() == 1 && !biotypes.contains(VariantAnnotationUtils.PROTEIN_CODING) || biotypes.size() > 1) {\n-                        otherGenes.add(gene.getName());\n-                    }\n-                }\n-            }\n-            if (allProteinCoding) {\n-                addAttribute(\"proteinCodingGenesCount\", VariantQueryUtils.ALL);\n-            } else {\n-                addAttribute(\"proteinCodingGenesCount\", proteinCodingGenes.size());\n+    step(\"list-genes\", () -> {\n+      CellBaseUtils cellBaseUtils = getVariantStorageManager().getCellBaseUtils(studyFqn, token);\n+      QueryOptions queryOptions = new QueryOptions(QueryOptions.INCLUDE, \"id,name,chromosome,start,end,biotype,transcripts.biotype\");\n+\n+      boolean allProteinCoding = false;\n+      if (CollectionUtils.isEmpty(analysisParams.getGene()) && CollectionUtils.isEmpty(analysisParams.getPanel())) {\n+        // No genes or panel given.\n+        // Get genes by biotype\n+        List<String> biotypes = new ArrayList<>(Arrays.asList(analysisParams.getBiotype().split(\",\")));\n+        if (biotypes.contains(VariantAnnotationUtils.PROTEIN_CODING)) {\n+          allProteinCoding = true;\n+          proteinCodingGenes.add(VariantQueryUtils.ALL);\n+          biotypes.remove(VariantAnnotationUtils.PROTEIN_CODING);\n+        }\n+        if (!biotypes.isEmpty()) {\n+          Query query = new Query(GeneDBAdaptor.QueryParams.TRANSCRIPT_BIOTYPE.key(), String.join(\",\", biotypes));\n+          for (Gene gene : cellBaseUtils.getCellBaseClient().getGeneClient().search(query, queryOptions).allResults()) {\n+            otherGenes.add(gene.getName());\n+          }\n+        }\n+      } else {\n+        Set<String> genes = new HashSet<>();\n+        Predicate<String> biotypeFilter;\n+        if (StringUtils.isNotEmpty(analysisParams.getBiotype())) {\n+          biotypeFilter = new HashSet<>(Arrays.asList(analysisParams.getBiotype().split(\",\")))::contains;\n+        } else {\n+          biotypeFilter = s -> true;\n+        }\n+        if (CollectionUtils.isNotEmpty(analysisParams.getGene())) {\n+          genes.addAll(analysisParams.getGene());\n+        }\n+        if (CollectionUtils.isNotEmpty(analysisParams.getPanel())) {\n+          List<Panel> panels = getCatalogManager()\n+              .getPanelManager()\n+              .get(studyFqn, analysisParams.getPanel(), new QueryOptions(), getToken())\n+              .getResults();\n+          for (Panel panel : panels) {\n+            for (DiseasePanel.GenePanel gene : panel.getGenes()) {\n+              genes.add(gene.getName());\n             }\n-            addAttribute(\"otherGenesCount\", otherGenes.size());\n+          }\n+        }\n+        for (Gene gene : cellBaseUtils.getCellBaseClient().getGeneClient().get(new ArrayList<>(genes), queryOptions).allResults()) {\n+          Set<String> biotypes = gene.getTranscripts().stream()\n+              .map(Transcript::getBiotype)\n+              .filter(biotypeFilter)\n+              .collect(Collectors.toSet());\n+          if (biotypes.contains(VariantAnnotationUtils.PROTEIN_CODING)) {\n+            proteinCodingGenes.add(gene.getName());\n+          }\n+          if (biotypes.size() == 1 && !biotypes.contains(VariantAnnotationUtils.PROTEIN_CODING) || biotypes.size() > 1) {\n+            otherGenes.add(gene.getName());\n+          }\n+        }\n+      }\n+      if (allProteinCoding) {\n+        addAttribute(\"proteinCodingGenesCount\", VariantQueryUtils.ALL);\n+      } else {\n+        addAttribute(\"proteinCodingGenesCount\", proteinCodingGenes.size());\n+      }\n+      addAttribute(\"otherGenesCount\", otherGenes.size());\n \n //            addAttribute(\"proteinCodingGenes\", proteinCodingGenes);\n //            addAttribute(\"otherGenes\", otherGenes);\n-        });\n+    });\n \n-        Map<String, Trio> triosMap = new HashMap<>(analysisParams.getSample().size());\n-        step(\"list-families\", () -> {\n-            Query familyQuery = new Query(IndividualDBAdaptor.QueryParams.SAMPLES.key(), analysisParams.getSample());\n-            for (Family family : getCatalogManager().getFamilyManager()\n-                    .search(studyFqn, familyQuery, new QueryOptions(), getToken()).getResults()) {\n-                if (family == null || StringUtils.isEmpty(family.getId())) {\n-                    continue;\n-                }\n-                List<List<String>> trios = variantStorageManager.getTriosFromFamily(studyFqn, family, true, getToken());\n-                for (List<String> trio : trios) {\n-                    String child = trio.get(2);\n-                    if (analysisParams.getSample().contains(child)) {\n-                        triosMap.put(child, new Trio(family.getId(), trio.get(0), trio.get(1), child));\n-                    }\n-                }\n-            }\n-            List<String> samplesWithoutFamily = new LinkedList<>();\n-            for (String sample : analysisParams.getSample()) {\n-                if (!triosMap.containsKey(sample)) {\n-                    samplesWithoutFamily.add(sample);\n-                }\n-            }\n-            if (samplesWithoutFamily.size() < 10) {\n-                samplesWithoutFamily.sort(String::compareTo);\n-                String warning = \"Missing family for samples \" + samplesWithoutFamily + \". Unable to get compoundHeterozygous.\";\n-                logger.warn(warning);\n-                addWarning(warning);\n-            } else {\n-                String warning = \"Missing family for \" + samplesWithoutFamily.size() + \" samples. Unable to get compoundHeterozygous.\";\n-                logger.warn(warning);\n-                addWarning(warning);\n-            }\n-        });\n+    Map<String, Trio> triosMap = new HashMap<>(analysisParams.getSample().size());\n+    step(\"list-families\", () -> {\n+      Query familyQuery = new Query(IndividualDBAdaptor.QueryParams.SAMPLES.key(), analysisParams.getSample());\n+      for (Family family : getCatalogManager().getFamilyManager()\n+          .search(studyFqn, familyQuery, new QueryOptions(), getToken()).getResults()) {\n+        if (family == null || StringUtils.isEmpty(family.getId())) {\n+          continue;\n+        }\n+        List<List<String>> trios = variantStorageManager.getTriosFromFamily(studyFqn, family, true, getToken());\n+        for (List<String> trio : trios) {\n+          String child = trio.get(2);\n+          if (analysisParams.getSample().contains(child)) {\n+            triosMap.put(child, new Trio(family.getId(), trio.get(0), trio.get(1), child));\n+          }\n+        }\n+      }\n+      List<String> samplesWithoutFamily = new LinkedList<>();\n+      for (String sample : analysisParams.getSample()) {\n+        if (!triosMap.containsKey(sample)) {\n+          samplesWithoutFamily.add(sample);\n+        }\n+      }\n+      if (samplesWithoutFamily.size() < 10) {\n+        samplesWithoutFamily.sort(String::compareTo);\n+        String warning = \"Missing family for samples \" + samplesWithoutFamily + \". Unable to get compoundHeterozygous.\";\n+        logger.warn(warning);\n+        addWarning(warning);\n+      } else {\n+        String warning = \"Missing family for \" + samplesWithoutFamily.size() + \" samples. Unable to get compoundHeterozygous.\";\n+        logger.warn(warning);\n+        addWarning(warning);\n+      }\n+    });\n \n-        step(() -> {\n-            setUpStorageEngineExecutor(studyFqn);\n+    step(() -> {\n+      setUpStorageEngineExecutor(studyFqn);\n //            MappingIterator<String> objectMappingIterator = JacksonUtils.getDefaultObjectMapper().reader().readValues(genesFile);\n //            List<String> genes = objectMappingIterator.readAll(new ArrayList<>());\n-            getToolExecutor(KnockoutAnalysisExecutor.class)\n-                    .setStudy(studyFqn)\n-                    .setSamples(analysisParams.getSample())\n-                    .setSampleFileNamePattern(getScratchDir().resolve(\"knockout.sample.{sample}.json.gz\").toString())\n-                    .setGeneFileNamePattern(getScratchDir().resolve(\"knockout.gene.{gene}.json.gz\").toString())\n-                    .setProteinCodingGenes(new HashSet<>(proteinCodingGenes))\n-                    .setOtherGenes(new HashSet<>(otherGenes))\n-                    .setBiotype(analysisParams.getBiotype())\n-                    .setFilter(analysisParams.getFilter())\n-                    .setQual(analysisParams.getQual())\n-                    .setCt(analysisParams.getConsequenceType())\n-                    .setTrios(triosMap)\n-                    .execute();\n-        });\n+      getToolExecutor(KnockoutAnalysisExecutor.class)\n+          .setStudy(studyFqn)\n+          .setSamples(analysisParams.getSample())\n+          .setSampleFileNamePattern(getScratchDir().resolve(\"knockout.sample.{sample}.json.gz\").toString())\n+          .setGeneFileNamePattern(getScratchDir().resolve(\"knockout.gene.{gene}.json.gz\").toString())\n+          .setProteinCodingGenes(new HashSet<>(proteinCodingGenes))\n+          .setOtherGenes(new HashSet<>(otherGenes))\n+          .setBiotype(analysisParams.getBiotype())\n+          .setFilter(analysisParams.getFilter())\n+          .setQual(analysisParams.getQual())\n+          .setCt(analysisParams.getConsequenceType())\n+          .setTrios(triosMap)\n+          .execute();\n+    });\n \n-        step(\"add-metadata-to-output-files\", () -> {\n-            Map<String, String> sampleIdToIndividualIdMap = new HashMap<>();\n-            ObjectReader reader = JacksonUtils.getDefaultObjectMapper().readerFor(KnockoutByIndividual.class);\n+    step(\"add-metadata-to-output-files\", () -> {\n+      Map<String, String> sampleIdToIndividualIdMap = new HashMap<>();\n+      ObjectReader reader = JacksonUtils.getDefaultObjectMapper().readerFor(KnockoutByIndividual.class);\n \n-            try (BufferedWriter bufferedWriter = org.opencb.commons.utils.FileUtils.newBufferedWriter(getIndividualsOutputFile());\n-                 SequenceWriter writer = JacksonUtils.getDefaultObjectMapper()\n+      try (BufferedWriter bufferedWriter = org.opencb.commons.utils.FileUtils.newBufferedWriter(getIndividualsOutputFile());\n+           SequenceWriter writer = JacksonUtils.getDefaultObjectMapper()\n //                    .writerWithDefaultPrettyPrinter()\n-                    .writer(new MinimalPrettyPrinter(\"\\n\"))\n-                    .forType(KnockoutByIndividual.class)\n-                    .writeValues(bufferedWriter)) {\n-                for (File file : FileUtils.listFiles(getScratchDir().toFile(), new RegexFileFilter(\"knockout.sample..*.json.gz\"), null)) {\n-                    KnockoutByIndividual knockoutByIndividual = reader.readValue(org.opencb.commons.utils.FileUtils.newBufferedReader(file.toPath()));\n+               .writer(new MinimalPrettyPrinter(\"\\n\"))\n+               .forType(KnockoutByIndividual.class)\n+               .writeValues(bufferedWriter)) {\n+        for (File file : FileUtils.listFiles(getScratchDir().toFile(), new RegexFileFilter(\"knockout.sample..*.json.gz\"), null)) {\n+          KnockoutByIndividual knockoutByIndividual = reader.readValue(org.opencb.commons.utils.FileUtils.newBufferedReader(file.toPath()));\n \n-                    Individual individual = catalogManager\n-                            .getIndividualManager()\n-                            .search(studyFqn, new Query(IndividualDBAdaptor.QueryParams.SAMPLES.key(), knockoutByIndividual.getSampleId()),\n-                                    new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\n-                                            IndividualDBAdaptor.QueryParams.SEX.key(),\n-                                            IndividualDBAdaptor.QueryParams.PHENOTYPES.key(),\n-                                            IndividualDBAdaptor.QueryParams.DISORDERS.key()\n-                                    )),\n-                                    getToken())\n-                            .first();\n-                    if (individual != null) {\n-                        sampleIdToIndividualIdMap.put(knockoutByIndividual.getSampleId(), individual.getId());\n-                        knockoutByIndividual.setId(individual.getId());\n-                        knockoutByIndividual.setSex(individual.getSex());\n-                        knockoutByIndividual.setDisorders(individual.getDisorders());\n-                        knockoutByIndividual.setPhenotypes(individual.getPhenotypes());\n-                    } else {\n-                        // Empty value for missing individuals\n-                        sampleIdToIndividualIdMap.put(knockoutByIndividual.getSampleId(), \"\");\n-                    }\n-                    writer.write(knockoutByIndividual);\n-                }\n-            }\n+          Individual individual = catalogManager\n+              .getIndividualManager()\n+              .search(studyFqn, new Query(IndividualDBAdaptor.QueryParams.SAMPLES.key(), knockoutByIndividual.getSampleId()),\n+                  new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\n+                      IndividualDBAdaptor.QueryParams.SEX.key(),\n+                      IndividualDBAdaptor.QueryParams.PHENOTYPES.key(),\n+                      IndividualDBAdaptor.QueryParams.DISORDERS.key()\n+                  )),\n+                  getToken())\n+              .first();\n+          if (individual != null) {\n+            sampleIdToIndividualIdMap.put(knockoutByIndividual.getSampleId(), individual.getId());\n+            knockoutByIndividual.setId(individual.getId());\n+            knockoutByIndividual.setSex(individual.getSex());\n+            knockoutByIndividual.setDisorders(individual.getDisorders());\n+            knockoutByIndividual.setPhenotypes(individual.getPhenotypes());\n+          } else {\n+            // Empty value for missing individuals\n+            sampleIdToIndividualIdMap.put(knockoutByIndividual.getSampleId(), \"\");\n+          }\n+          writer.write(knockoutByIndividual);\n+        }\n+      }\n \n-            reader = JacksonUtils.getDefaultObjectMapper().readerFor(KnockoutByGene.class);\n+      reader = JacksonUtils.getDefaultObjectMapper().readerFor(KnockoutByGene.class);\n \n-            try (BufferedWriter bufferedWriter = org.opencb.commons.utils.FileUtils.newBufferedWriter(getGenesOutputFile());\n-                 SequenceWriter writer = JacksonUtils.getDefaultObjectMapper()\n+      try (BufferedWriter bufferedWriter = org.opencb.commons.utils.FileUtils.newBufferedWriter(getGenesOutputFile());\n+           SequenceWriter writer = JacksonUtils.getDefaultObjectMapper()\n //                    .writerWithDefaultPrettyPrinter()\n-                    .writer(new MinimalPrettyPrinter(\"\\n\"))\n-                    .forType(KnockoutByGene.class)\n-                    .writeValues(bufferedWriter)) {\n-                CellBaseUtils cellBaseUtils = getVariantStorageManager().getCellBaseUtils(studyFqn, getToken());\n-                for (File file : FileUtils.listFiles(getScratchDir().toFile(), new RegexFileFilter(\"knockout.gene..*.json.gz\"), null)) {\n-                    KnockoutByGene knockoutByGene = reader.readValue(org.opencb.commons.utils.FileUtils.newBufferedReader(file.toPath()));\n-                    QueryOptions queryOptions = new QueryOptions(QueryOptions.EXCLUDE, \"transcripts,annotation.expression\");\n-                    Gene gene = cellBaseUtils.getCellBaseClient().getGeneClient()\n-                            .search(new Query(GeneDBAdaptor.QueryParams.NAME.key(), knockoutByGene.getName()), queryOptions).firstResult();\n-                    knockoutByGene.setId(gene.getId());\n-                    knockoutByGene.setName(gene.getName());\n-                    knockoutByGene.setChromosome(gene.getChromosome());\n-                    knockoutByGene.setStart(gene.getStart());\n-                    knockoutByGene.setEnd(gene.getEnd());\n-                    knockoutByGene.setStrand(gene.getStrand());\n-                    knockoutByGene.setBiotype(gene.getBiotype());\n-                    knockoutByGene.setAnnotation(gene.getAnnotation());\n-                    for (KnockoutByGene.KnockoutIndividual individual : knockoutByGene.getIndividuals()) {\n-                        if (individual.getId() == null) {\n-                            String individualId = sampleIdToIndividualIdMap.get(individual.getSampleId());\n-                            if (individualId == null) {\n-                                Individual individualObj = catalogManager\n-                                        .getIndividualManager()\n-                                        .search(studyFqn,\n-                                                new Query(IndividualDBAdaptor.QueryParams.SAMPLES.key(), individual.getSampleId()),\n-                                                new QueryOptions(QueryOptions.INCLUDE, IndividualDBAdaptor.QueryParams.ID.key()),\n-                                                getToken())\n-                                        .first();\n-                                if (individualObj == null) {\n-                                    // Empty value for missing individuals\n-                                    individualId = \"\";\n-                                } else {\n-                                    individualId = individualObj.getId();\n-                                }\n-                                sampleIdToIndividualIdMap.put(individual.getSampleId(), individualId);\n-                            }\n-                            if (!individualId.isEmpty()) {\n-                                individual.setId(individualId);\n-                            }\n-                        }\n-                    }\n-                    writer.write(knockoutByGene);\n+               .writer(new MinimalPrettyPrinter(\"\\n\"))\n+               .forType(KnockoutByGene.class)\n+               .writeValues(bufferedWriter)) {\n+        CellBaseUtils cellBaseUtils = getVariantStorageManager().getCellBaseUtils(studyFqn, getToken());\n+        for (File file : FileUtils.listFiles(getScratchDir().toFile(), new RegexFileFilter(\"knockout.gene..*.json.gz\"), null)) {\n+          KnockoutByGene knockoutByGene = reader.readValue(org.opencb.commons.utils.FileUtils.newBufferedReader(file.toPath()));\n+          QueryOptions queryOptions = new QueryOptions(QueryOptions.EXCLUDE, \"transcripts,annotation.expression\");\n+          Gene gene = cellBaseUtils.getCellBaseClient().getGeneClient()\n+              .search(new Query(GeneDBAdaptor.QueryParams.NAME.key(), knockoutByGene.getName()), queryOptions).firstResult();\n+          knockoutByGene.setId(gene.getId());\n+          knockoutByGene.setName(gene.getName());\n+          knockoutByGene.setChromosome(gene.getChromosome());\n+          knockoutByGene.setStart(gene.getStart());\n+          knockoutByGene.setEnd(gene.getEnd());\n+          knockoutByGene.setStrand(gene.getStrand());\n+          knockoutByGene.setBiotype(gene.getBiotype());\n+          knockoutByGene.setAnnotation(gene.getAnnotation());\n+          for (KnockoutByGene.KnockoutIndividual individual : knockoutByGene.getIndividuals()) {\n+            if (individual.getId() == null) {\n+              String individualId = sampleIdToIndividualIdMap.get(individual.getSampleId());\n+              if (individualId == null) {\n+                Individual individualObj = catalogManager\n+                    .getIndividualManager()\n+                    .search(studyFqn,\n+                        new Query(IndividualDBAdaptor.QueryParams.SAMPLES.key(), individual.getSampleId()),\n+                        new QueryOptions(QueryOptions.INCLUDE, IndividualDBAdaptor.QueryParams.ID.key()),\n+                        getToken())\n+                    .first();\n+                if (individualObj == null) {\n+                  // Empty value for missing individuals\n+                  individualId = \"\";\n+                } else {\n+                  individualId = individualObj.getId();\n                 }\n+                sampleIdToIndividualIdMap.put(individual.getSampleId(), individualId);\n+              }\n+              if (!individualId.isEmpty()) {\n+                individual.setId(individualId);\n+              }\n             }\n-        });\n-    }\n+          }\n+          writer.write(knockoutByGene);\n+        }\n+      }\n+    });\n+  }\n \n-    private Path getIndividualsOutputFile() {\n-        return getOutDir().resolve(KNOCKOUT_INDIVIDUALS_JSON);\n-    }\n+  private Path getIndividualsOutputFile() {\n+    return getOutDir().resolve(KNOCKOUT_INDIVIDUALS_JSON);\n+  }\n \n-    private Path getGenesOutputFile() {\n-        return getOutDir().resolve(KNOCKOUT_GENES_JSON);\n-    }\n+  private Path getGenesOutputFile() {\n+    return getOutDir().resolve(KNOCKOUT_GENES_JSON);\n+  }\n \n }\n",
            "diff_size": 266
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "237",
                    "column": "22",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/45/KnockoutAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/45/KnockoutAnalysis.java\nindex 5cd419eceeb..6fb124038ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/45/KnockoutAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/45/KnockoutAnalysis.java\n@@ -232,7 +232,9 @@ public class KnockoutAnalysis extends OpenCgaToolScopeStudy {\n                     .forType(KnockoutByIndividual.class)\n                     .writeValues(bufferedWriter)) {\n                 for (File file : FileUtils.listFiles(getScratchDir().toFile(), new RegexFileFilter(\"knockout.sample..*.json.gz\"), null)) {\n-                    KnockoutByIndividual knockoutByIndividual = reader.readValue(org.opencb.commons.utils.FileUtils.newBufferedReader(file.toPath()));\n+                    KnockoutByIndividual knockoutByIndividual =reader.readValue(org.opencb.commons.utils.FileUtils\n+\n+                    . newBufferedReader(file.toPath()));\n \n                     Individual individual = catalogManager\n                             .getIndividualManager()\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}