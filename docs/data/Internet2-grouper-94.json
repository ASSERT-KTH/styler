{
    "project_name": "Internet2-grouper",
    "error_id": "94",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 01. October 2003 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/94/CollectionConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/94/CollectionConverter.java\nindex f1c408f2c35..16879e8c105 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/94/CollectionConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/94/CollectionConverter.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 01. October 2003 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;\r\n \r\n import java.util.ArrayList;\r\n@@ -51,39 +52,39 @@ import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.mapper\n  */\r\n public class CollectionConverter extends AbstractCollectionConverter {\r\n \r\n-    public CollectionConverter(Mapper mapper) {\r\n-        super(mapper);\r\n-    }\r\n+  public CollectionConverter(Mapper mapper) {\r\n+    super(mapper);\r\n+  }\r\n \r\n-    public boolean canConvert(Class type) {\r\n-        return type.equals(ArrayList.class)\r\n-                || type.equals(HashSet.class)\r\n-                || type.equals(LinkedList.class)\r\n-                || type.equals(Vector.class)\r\n-                || (JVM.is14() && type.getName().equals(\"java.util.LinkedHashSet\"));\r\n-    }\r\n+  public boolean canConvert(Class type) {\r\n+    return type.equals(ArrayList.class)\r\n+      || type.equals(HashSet.class)\r\n+      || type.equals(LinkedList.class)\r\n+      || type.equals(Vector.class)\r\n+      || (JVM.is14() && type.getName().equals(\"java.util.LinkedHashSet\"));\r\n+  }\r\n \r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Collection collection = (Collection) source;\r\n-        for (Iterator iterator = collection.iterator(); iterator.hasNext();) {\r\n-            Object item = iterator.next();\r\n-            writeItem(item, context, writer);\r\n-        }\r\n+  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n+    Collection collection = (Collection) source;\r\n+    for (Iterator iterator = collection.iterator(); iterator.hasNext(); ) {\r\n+      Object item = iterator.next();\r\n+      writeItem(item, context, writer);\r\n     }\r\n+  }\r\n \r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        Collection collection = (Collection) createCollection(context.getRequiredType());\r\n-        populateCollection(reader, context, collection);\r\n-        return collection;\r\n-    }\r\n+  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n+    Collection collection = (Collection) createCollection(context.getRequiredType());\r\n+    populateCollection(reader, context, collection);\r\n+    return collection;\r\n+  }\r\n \r\n-    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\r\n-        while (reader.hasMoreChildren()) {\r\n-            reader.moveDown();\r\n-            Object item = readItem(reader, context, collection);\r\n-            collection.add(item);\r\n-            reader.moveUp();\r\n-        }\r\n+  protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\r\n+    while (reader.hasMoreChildren()) {\r\n+      reader.moveDown();\r\n+      Object item = readItem(reader, context, collection);\r\n+      collection.add(item);\r\n+      reader.moveUp();\r\n     }\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/94/CollectionConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/94/CollectionConverter.java\nindex f1c408f2c35..388da63c2ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/94/CollectionConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/94/CollectionConverter.java\n@@ -49,9 +49,8 @@ import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.mapper\n  *\r\n  * @author Joe Walnes\r\n  */\r\n-public class CollectionConverter extends AbstractCollectionConverter {\r\n-\r\n-    public CollectionConverter(Mapper mapper) {\r\n+public class CollectionConverter extends AbstractCollectionConverter {\n+  public CollectionConverter(Mapper mapper) {\r\n         super(mapper);\r\n     }\r\n \r\n@@ -86,4 +85,4 @@ public class CollectionConverter extends AbstractCollectionConverter {\n         }\r\n     }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/94/CollectionConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/94/CollectionConverter.java\nindex f1c408f2c35..c4724419d34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/94/CollectionConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/94/CollectionConverter.java\n@@ -24,20 +24,19 @@\n  * \r\n  * Created on 01. October 2003 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.HashSet;\r\n-import java.util.Iterator;\r\n-import java.util.LinkedList;\r\n-import java.util.Vector;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.core.JVM;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Vector;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.core.JVM;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.mapper.Mapper;\r\n \r\n /**\r\n@@ -48,42 +47,44 @@ import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.mapper\n  * java.util.LinkedList, java.util.Vector and java.util.LinkedHashSet.</p>\r\n  *\r\n  * @author Joe Walnes\r\n- */\r\n-public class CollectionConverter extends AbstractCollectionConverter {\r\n-\r\n-    public CollectionConverter(Mapper mapper) {\r\n-        super(mapper);\r\n-    }\r\n-\r\n-    public boolean canConvert(Class type) {\r\n-        return type.equals(ArrayList.class)\r\n-                || type.equals(HashSet.class)\r\n-                || type.equals(LinkedList.class)\r\n-                || type.equals(Vector.class)\r\n-                || (JVM.is14() && type.getName().equals(\"java.util.LinkedHashSet\"));\r\n-    }\r\n-\r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Collection collection = (Collection) source;\r\n-        for (Iterator iterator = collection.iterator(); iterator.hasNext();) {\r\n-            Object item = iterator.next();\r\n-            writeItem(item, context, writer);\r\n-        }\r\n-    }\r\n-\r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        Collection collection = (Collection) createCollection(context.getRequiredType());\r\n-        populateCollection(reader, context, collection);\r\n-        return collection;\r\n-    }\r\n-\r\n-    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\r\n-        while (reader.hasMoreChildren()) {\r\n-            reader.moveDown();\r\n-            Object item = readItem(reader, context, collection);\r\n-            collection.add(item);\r\n-            reader.moveUp();\r\n-        }\r\n-    }\r\n-\r\n-}\r\n+ */\n+\n+\n+public class CollectionConverter extends AbstractCollectionConverter {\n+    public CollectionConverter(Mapper mapper) {\n+    super(mapper);\n+    }\n+\n+\n+\n+    public boolean canConvert(Class type) {\n+        return type.equals(ArrayList.class) || type.equals(HashSet.class) || type.equals(LinkedList.class) || type.equals(Vector.class) || (JVM.is14() && type.getName().equals(\"java.util.LinkedHashSet\"));\n+    }\n+\n+\n+    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n+        Collection collection = (Collection) source;\n+\n+        for (Iterator iterator = collection.iterator(); iterator.hasNext(); ) {\n+            Object item = iterator.next();\n+            writeItem(item, context, writer);\n+        }\n+    }\n+\n+\n+    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n+        Collection collection = (Collection) createCollection(context.getRequiredType());\n+        populateCollection(reader, context, collection);\n+        return collection;\n+    }\n+\n+\n+    protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {\n+        while (reader.hasMoreChildren()) {\n+            reader.moveDown();\n+            Object item = readItem(reader, context, collection);\n+            collection.add(item);\n+            reader.moveUp();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}