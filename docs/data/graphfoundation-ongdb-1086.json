{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1086",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "123",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "96",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "column": "166",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "104",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "158",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "104",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "column": "174",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "93",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "column": "163",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1086/NativeSchemaIndexUpdater.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1086/NativeSchemaIndexUpdater.java\nindex 3a6dfc3b902..fe99d3aabfc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1086/NativeSchemaIndexUpdater.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1086/NativeSchemaIndexUpdater.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.io.IOException;\n@@ -27,109 +28,111 @@ import org.neo4j.kernel.api.index.IndexEntryUpdate;\n import org.neo4j.kernel.api.index.IndexUpdater;\n \n class NativeSchemaIndexUpdater<KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue>\n-        implements IndexUpdater\n+    implements IndexUpdater\n {\n-    private final KEY treeKey;\n-    private final VALUE treeValue;\n-    private final ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger = new ConflictDetectingValueMerger<>( true );\n-    private Writer<KEY,VALUE> writer;\n+  private final KEY treeKey;\n+  private final VALUE treeValue;\n+  private final ConflictDetectingValueMerger<KEY, VALUE> conflictDetectingValueMerger = new ConflictDetectingValueMerger<>(true);\n+  private Writer<KEY, VALUE> writer;\n \n-    private boolean closed = true;\n+  private boolean closed = true;\n \n-    NativeSchemaIndexUpdater( KEY treeKey, VALUE treeValue )\n-    {\n-        this.treeKey = treeKey;\n-        this.treeValue = treeValue;\n-    }\n+  NativeSchemaIndexUpdater(KEY treeKey, VALUE treeValue)\n+  {\n+    this.treeKey = treeKey;\n+    this.treeValue = treeValue;\n+  }\n \n-    NativeSchemaIndexUpdater<KEY,VALUE> initialize( Writer<KEY,VALUE> writer )\n+  NativeSchemaIndexUpdater<KEY, VALUE> initialize(Writer<KEY, VALUE> writer)\n+  {\n+    if (!closed)\n     {\n-        if ( !closed )\n-        {\n-            throw new IllegalStateException( \"Updater still open\" );\n-        }\n-\n-        this.writer = writer;\n-        closed = false;\n-        return this;\n+      throw new IllegalStateException(\"Updater still open\");\n     }\n \n-    @Override\n-    public void process( IndexEntryUpdate<?> update ) throws IOException, IndexEntryConflictException\n-    {\n-        assertOpen();\n-        processUpdate( treeKey, treeValue, update, writer, conflictDetectingValueMerger );\n-    }\n+    this.writer = writer;\n+    closed = false;\n+    return this;\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        writer.close();\n-        closed = true;\n-    }\n+  @Override\n+  public void process(IndexEntryUpdate<?> update) throws IOException, IndexEntryConflictException\n+  {\n+    assertOpen();\n+    processUpdate(treeKey, treeValue, update, writer, conflictDetectingValueMerger);\n+  }\n \n-    private void assertOpen()\n-    {\n-        if ( closed )\n-        {\n-            throw new IllegalStateException( \"Updater has been closed\" );\n-        }\n-    }\n+  @Override\n+  public void close() throws IOException\n+  {\n+    writer.close();\n+    closed = true;\n+  }\n \n-    static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processUpdate( KEY treeKey, VALUE treeValue,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer, ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger )\n-            throws IOException, IndexEntryConflictException\n+  private void assertOpen()\n+  {\n+    if (closed)\n     {\n-        switch ( update.updateMode() )\n-        {\n-        case ADDED:\n-            processAdd( treeKey, treeValue, update, writer, conflictDetectingValueMerger );\n-            break;\n-        case CHANGED:\n-            processChange( treeKey, treeValue, update, writer, conflictDetectingValueMerger );\n-            break;\n-        case REMOVED:\n-            processRemove( treeKey, update, writer );\n-            break;\n-        default:\n-            throw new IllegalArgumentException();\n-        }\n+      throw new IllegalStateException(\"Updater has been closed\");\n     }\n+  }\n \n-    private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processRemove( KEY treeKey,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer ) throws IOException\n+  static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processUpdate(KEY treeKey, VALUE treeValue,\n+                                                                                                IndexEntryUpdate<?> update, Writer<KEY, VALUE> writer,\n+                                                                                                ConflictDetectingValueMerger<KEY, VALUE> conflictDetectingValueMerger)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    switch (update.updateMode())\n     {\n-        // todo Do we need to verify that we actually removed something at all?\n-        // todo Difference between online and recovery?\n-        treeKey.from( update.getEntityId(), update.values() );\n-        writer.remove( treeKey );\n+      case ADDED:\n+        processAdd(treeKey, treeValue, update, writer, conflictDetectingValueMerger);\n+        break;\n+      case CHANGED:\n+        processChange(treeKey, treeValue, update, writer, conflictDetectingValueMerger);\n+        break;\n+      case REMOVED:\n+        processRemove(treeKey, update, writer);\n+        break;\n+      default:\n+        throw new IllegalArgumentException();\n     }\n+  }\n \n-    private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processChange( KEY treeKey, VALUE treeValue,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer,\n-            ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        // Remove old entry\n-        treeKey.from( update.getEntityId(), update.beforeValues() );\n-        writer.remove( treeKey );\n-        // Insert new entry\n-        treeKey.from( update.getEntityId(), update.values() );\n-        treeValue.from( update.values() );\n-        conflictDetectingValueMerger.controlConflictDetection( treeKey );\n-        writer.merge( treeKey, treeValue, conflictDetectingValueMerger );\n-        conflictDetectingValueMerger.checkConflict( update.values() );\n-    }\n+  private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processRemove(KEY treeKey,\n+                                                                                                        IndexEntryUpdate<?> update, Writer<KEY, VALUE> writer)\n+      throws IOException\n+  {\n+    // todo Do we need to verify that we actually removed something at all?\n+    // todo Difference between online and recovery?\n+    treeKey.from(update.getEntityId(), update.values());\n+    writer.remove(treeKey);\n+  }\n \n-    static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processAdd( KEY treeKey, VALUE treeValue,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer,\n-            ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger )\n-            throws IOException, IndexEntryConflictException\n-    {\n-        treeKey.from( update.getEntityId(), update.values() );\n-        treeValue.from( update.values() );\n-        conflictDetectingValueMerger.controlConflictDetection( treeKey );\n-        writer.merge( treeKey, treeValue, conflictDetectingValueMerger );\n-        conflictDetectingValueMerger.checkConflict( update.values() );\n-    }\n+  private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processChange(KEY treeKey, VALUE treeValue,\n+                                                                                                        IndexEntryUpdate<?> update, Writer<KEY, VALUE> writer,\n+                                                                                                        ConflictDetectingValueMerger<KEY, VALUE> conflictDetectingValueMerger)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    // Remove old entry\n+    treeKey.from(update.getEntityId(), update.beforeValues());\n+    writer.remove(treeKey);\n+    // Insert new entry\n+    treeKey.from(update.getEntityId(), update.values());\n+    treeValue.from(update.values());\n+    conflictDetectingValueMerger.controlConflictDetection(treeKey);\n+    writer.merge(treeKey, treeValue, conflictDetectingValueMerger);\n+    conflictDetectingValueMerger.checkConflict(update.values());\n+  }\n+\n+  static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processAdd(KEY treeKey, VALUE treeValue,\n+                                                                                             IndexEntryUpdate<?> update, Writer<KEY, VALUE> writer,\n+                                                                                             ConflictDetectingValueMerger<KEY, VALUE> conflictDetectingValueMerger)\n+      throws IOException, IndexEntryConflictException\n+  {\n+    treeKey.from(update.getEntityId(), update.values());\n+    treeValue.from(update.values());\n+    conflictDetectingValueMerger.controlConflictDetection(treeKey);\n+    writer.merge(treeKey, treeValue, conflictDetectingValueMerger);\n+    conflictDetectingValueMerger.checkConflict(update.values());\n+  }\n }\n",
            "diff_size": 120
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 301).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 309).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 298).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1086/NativeSchemaIndexUpdater.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1086/NativeSchemaIndexUpdater.java\nindex 3a6dfc3b902..5153ded2771 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1086/NativeSchemaIndexUpdater.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1086/NativeSchemaIndexUpdater.java\n@@ -26,8 +26,7 @@ import org.neo4j.kernel.api.exceptions.index.IndexEntryConflictException;\n import org.neo4j.kernel.api.index.IndexEntryUpdate;\n import org.neo4j.kernel.api.index.IndexUpdater;\n \n-class NativeSchemaIndexUpdater<KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue>\n-        implements IndexUpdater\n+class NativeSchemaIndexUpdater<KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> implements IndexUpdater\n {\n     private final KEY treeKey;\n     private final VALUE treeValue;\n@@ -76,10 +75,8 @@ class NativeSchemaIndexUpdater<KEY extends NativeSchemaKey<KEY>, VALUE extends N\n         }\n     }\n \n-    static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processUpdate( KEY treeKey, VALUE treeValue,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer, ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processUpdate( KEY treeKey, VALUE treeValue, IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer, ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger ) throws IOException, IndexEntryConflictException\n+{\n         switch ( update.updateMode() )\n         {\n         case ADDED:\n@@ -96,20 +93,16 @@ class NativeSchemaIndexUpdater<KEY extends NativeSchemaKey<KEY>, VALUE extends N\n         }\n     }\n \n-    private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processRemove( KEY treeKey,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer ) throws IOException\n-    {\n+    private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processRemove( KEY treeKey, IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer ) throws IOException\n+{\n         // todo Do we need to verify that we actually removed something at all?\n         // todo Difference between online and recovery?\n         treeKey.from( update.getEntityId(), update.values() );\n         writer.remove( treeKey );\n     }\n \n-    private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processChange( KEY treeKey, VALUE treeValue,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer,\n-            ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    private static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processChange( KEY treeKey, VALUE treeValue, IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer, ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger ) throws IOException, IndexEntryConflictException\n+{\n         // Remove old entry\n         treeKey.from( update.getEntityId(), update.beforeValues() );\n         writer.remove( treeKey );\n@@ -121,15 +114,12 @@ class NativeSchemaIndexUpdater<KEY extends NativeSchemaKey<KEY>, VALUE extends N\n         conflictDetectingValueMerger.checkConflict( update.values() );\n     }\n \n-    static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processAdd( KEY treeKey, VALUE treeValue,\n-            IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer,\n-            ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger )\n-            throws IOException, IndexEntryConflictException\n-    {\n+    static <KEY extends NativeSchemaKey<KEY>, VALUE extends NativeSchemaValue> void processAdd( KEY treeKey, VALUE treeValue, IndexEntryUpdate<?> update, Writer<KEY,VALUE> writer, ConflictDetectingValueMerger<KEY,VALUE> conflictDetectingValueMerger ) throws IOException, IndexEntryConflictException\n+{\n         treeKey.from( update.getEntityId(), update.values() );\n         treeValue.from( update.values() );\n         conflictDetectingValueMerger.controlConflictDetection( treeKey );\n         writer.merge( treeKey, treeValue, conflictDetectingValueMerger );\n         conflictDetectingValueMerger.checkConflict( update.values() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}