{
    "project_name": "atlanmod-NeoEMF",
    "error_id": "80",
    "information": {
        "errors": [
            {
                "line": "515",
                "column": "46",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        checkNotNull(id, \"id\");\n\n        Optional<Edge> edge = supportEdgeIds ?\n                MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n                Optional.ofNullable(baseGraph.getEdge(id));\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/80/IdGraph.java\nindex bd46a738710..80de5073963 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/80/IdGraph.java\n@@ -512,8 +512,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     public <E extends Edge> Optional<E> getEdge(Object id, BiFunction<Edge, G, E> mappingFunc) {\n         checkNotNull(id, \"id\");\n \n-        Optional<Edge> edge = supportEdgeIds ?\n-                MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n+        Optional<Edge> edge = supportEdgeIds ? MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n                 Optional.ofNullable(baseGraph.getEdge(id));\n \n         return edge.map(e -> mappingFunc.apply(e, me()));\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "500",
                    "column": "46",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/80/IdGraph.java\nindex bd46a738710..1ec11135242 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/80/IdGraph.java\n@@ -236,8 +236,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     public void stopTransaction(Conclusion conclusion) {\n         if (Conclusion.SUCCESS == conclusion) {\n             commit();\n-        }\n-        else {\n+        } else {\n             rollback();\n         }\n     }\n@@ -296,8 +295,8 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n         }\n \n         final BiFunction<E, G, E> mappingFunc = isVertexClass(indexClass)\n-                ? (v, g) -> (E) new IdVertex<>((Vertex) v, g)\n-                : (e, g) -> (E) new IdEdge<>((Edge) e, g);\n+            ? (v, g) -> (E) new IdVertex<>((Vertex) v, g)\n+            : (e, g) -> (E) new IdEdge<>((Edge) e, g);\n \n         return createIndex(indexName, indexClass, mappingFunc);\n     }\n@@ -306,8 +305,8 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     @SuppressWarnings(\"unchecked\")\n     public <E extends Element> Index<E> getIndex(String indexName, Class<E> indexClass) {\n         final BiFunction<E, G, E> mappingFunc = isVertexClass(indexClass)\n-                ? (v, g) -> (E) new IdVertex<>((Vertex) v, g)\n-                : (e, g) -> (E) new IdEdge<>((Edge) e, g);\n+            ? (v, g) -> (E) new IdVertex<>((Vertex) v, g)\n+            : (e, g) -> (E) new IdEdge<>((Edge) e, g);\n \n         return getIndex(indexName, indexClass, mappingFunc);\n     }\n@@ -334,7 +333,6 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * Returns the base element of the specified element.\n      *\n      * @param e the element\n-     *\n      * @return the base element\n      */\n     @Nonnull\n@@ -378,7 +376,6 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * Returns {@code true} if the specified class is assignable from {@link Vertex}.\n      *\n      * @param type the class to test\n-     *\n      * @return {@code true} if the specified class is assignable from {@link Vertex}\n      */\n     private <E extends Element> boolean isVertexClass(Class<? extends E> type) {\n@@ -395,9 +392,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param id          the identifier of the vertex\n      * @param mappingFunc the function to create a new dedicated vertex from another\n      * @param <V>         the type of the vertex after mapping\n-     *\n      * @return the newly created vertex\n-     *\n      * @see #addVertex(Object)\n      */\n     @Nonnull\n@@ -418,9 +413,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param id          the identifier of the vertex\n      * @param mappingFunc the function to create a new dedicated vertex from another\n      * @param <V>         the type of the vertex after mapping\n-     *\n      * @return an {@link Optional} containing the vertex referenced by the provided identifier\n-     *\n      * @see #getVertex(Object)\n      */\n     @Nonnull\n@@ -428,8 +421,8 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n         checkNotNull(id, \"id\");\n \n         Optional<Vertex> vertex = supportVertexIds\n-                ? MoreIterables.onlyElement(baseGraph.getVertices(ID, id))\n-                : Optional.ofNullable(baseGraph.getVertex(id));\n+            ? MoreIterables.onlyElement(baseGraph.getVertices(ID, id))\n+            : Optional.ofNullable(baseGraph.getVertex(id));\n \n         return vertex.map(v -> mappingFunc.apply(v, me()));\n     }\n@@ -439,9 +432,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      *\n      * @param mappingFunc the function to create a new dedicated vertex from another\n      * @param <V>         the type of the vertex after mapping\n-     *\n      * @return an iterable reference to all vertices in the graph\n-     *\n      * @see #getVertices()\n      */\n     @Nonnull\n@@ -456,9 +447,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param value       the value of the vertex\n      * @param mappingFunc the function to create a new dedicated vertex from another\n      * @param <V>         the type of the vertex after mapping\n-     *\n      * @return an iterable of vertices with provided key and value\n-     *\n      * @see #getVertices(String, Object)\n      */\n     @Nonnull\n@@ -477,9 +466,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param label       the label associated with the edge\n      * @param mappingFunc the function to create a new dedicated edge from another\n      * @param <E>         the type of the edge after mapping\n-     *\n      * @return the newly created edge\n-     *\n      * @see #addEdge(Object, Vertex, Vertex, String)\n      */\n     @Nonnull\n@@ -503,9 +490,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param id          the identifier of the edge to retrieved from the graph\n      * @param mappingFunc the function to create a new dedicated edge from another\n      * @param <E>         the type of the edge after mapping\n-     *\n      * @return an {@link Optional} containing the edge referenced by the provided identifier\n-     *\n      * @see #getEdge(Object)\n      */\n     @Nonnull\n@@ -513,8 +498,8 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n         checkNotNull(id, \"id\");\n \n         Optional<Edge> edge = supportEdgeIds ?\n-                MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n-                Optional.ofNullable(baseGraph.getEdge(id));\n+            MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n+            Optional.ofNullable(baseGraph.getEdge(id));\n \n         return edge.map(e -> mappingFunc.apply(e, me()));\n     }\n@@ -524,9 +509,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      *\n      * @param mappingFunc the function to create a new dedicated edge from another\n      * @param <E>         the type of the edge after mapping\n-     *\n      * @return an iterable reference to all edges in the graph\n-     *\n      * @see #getEdges()\n      */\n     @Nonnull\n@@ -541,9 +524,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param value       the value of the edge\n      * @param mappingFunc the function to create a new dedicated edge from another\n      * @param <E>         the type of the edge after mapping\n-     *\n      * @return an iterable of edges with provided key and value\n-     *\n      * @see #getEdges(String, Object)\n      */\n     @Nonnull\n@@ -561,9 +542,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param mappingFunc the function to create a new dedicated element from another\n      * @param <T>         the element class that this index is indexing (can be base class)\n      * @param <U>         the type of the edge indexed element mapping\n-     *\n      * @return the index created\n-     *\n      * @see #createIndex(String, Class, Parameter[])\n      */\n     @Nonnull\n@@ -584,9 +563,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param mappingFunc the function to create a new dedicated element from another\n      * @param <T>         the class of the elements being indexed (can be base class)\n      * @param <U>         the type of the edge indexed element mapping\n-     *\n      * @return the retrieved index\n-     *\n      * @see #getIndex(String, Class)\n      */\n     @Nullable\n@@ -597,8 +574,8 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n         final Index<T> baseIndex = indexableBaseGraph.getIndex(indexName, indexClass);\n \n         return nonNull(baseIndex)\n-                ? new IdElementIndex<>(baseIndex, e -> mappingFunc.apply(e, me()))\n-                : null;\n+            ? new IdElementIndex<>(baseIndex, e -> mappingFunc.apply(e, me()))\n+            : null;\n     }\n \n     /**\n@@ -610,16 +587,14 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n      * @param mappingFunc the function to create a new dedicated element from another\n      * @param <T>         the element class that this index is indexing (can be base class)\n      * @param <U>         the type of the edge indexed element mapping\n-     *\n      * @return the index\n-     *\n      * @see #getIndex(String, Class, BiFunction)\n      * @see #createIndex(String, Class, BiFunction)\n      */\n     @Nonnull\n     public <T extends Element, U extends T> Index<U> getOrCreateIndex(String indexName, Class<T> indexClass, BiFunction<T, G, U> mappingFunc) {\n         return Optional.ofNullable(getIndex(indexName, indexClass, mappingFunc))\n-                .orElseGet(() -> createIndex(indexName, indexClass, mappingFunc));\n+            .orElseGet(() -> createIndex(indexName, indexClass, mappingFunc));\n     }\n \n     // endregion\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "324",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "569",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "591",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/80/IdGraph.java\nindex bd46a738710..09a702e875a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/80/IdGraph.java\n@@ -321,8 +321,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     @Override\n     public void dropIndex(String indexName) {\n         checkIndexableGraph();\n-\n-        final IndexableGraph indexableBaseGraph = (IndexableGraph) baseGraph;\n+final IndexableGraph indexableBaseGraph = (IndexableGraph) baseGraph;\n         indexableBaseGraph.dropIndex(indexName);\n     }\n \n@@ -512,9 +511,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     public <E extends Edge> Optional<E> getEdge(Object id, BiFunction<Edge, G, E> mappingFunc) {\n         checkNotNull(id, \"id\");\n \n-        Optional<Edge> edge = supportEdgeIds ?\n-                MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n-                Optional.ofNullable(baseGraph.getEdge(id));\n+        Optional<Edge> edge = supportEdgeIds ? MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) : Optional.ofNullable(baseGraph.getEdge(id));\n \n         return edge.map(e -> mappingFunc.apply(e, me()));\n     }\n@@ -569,8 +566,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     @Nonnull\n     public <T extends Element, U extends T> Index<U> createIndex(String indexName, Class<T> indexClass, BiFunction<T, G, U> mappingFunc) {\n         checkIndexableGraph();\n-\n-        final IndexableGraph indexableBaseGraph = (IndexableGraph) baseGraph;\n+final IndexableGraph indexableBaseGraph = (IndexableGraph) baseGraph;\n         final Index<T> baseIndex = indexableBaseGraph.createIndex(indexName, indexClass);\n \n         return new IdElementIndex<>(baseIndex, e -> mappingFunc.apply(e, me()));\n@@ -592,8 +588,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     @Nullable\n     public <T extends Element, U extends T> Index<U> getIndex(String indexName, Class<T> indexClass, BiFunction<T, G, U> mappingFunc) {\n         checkIndexableGraph();\n-\n-        final IndexableGraph indexableBaseGraph = (IndexableGraph) baseGraph;\n+final IndexableGraph indexableBaseGraph = (IndexableGraph) baseGraph;\n         final Index<T> baseIndex = indexableBaseGraph.getIndex(indexName, indexClass);\n \n         return nonNull(baseIndex)\n@@ -633,4 +628,4 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     private G me() {\n         return (G) this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/80/IdGraph.java\nindex bd46a738710..80de5073963 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/80/IdGraph.java\n@@ -512,8 +512,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     public <E extends Edge> Optional<E> getEdge(Object id, BiFunction<Edge, G, E> mappingFunc) {\n         checkNotNull(id, \"id\");\n \n-        Optional<Edge> edge = supportEdgeIds ?\n-                MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n+        Optional<Edge> edge = supportEdgeIds ? MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n                 Optional.ofNullable(baseGraph.getEdge(id));\n \n         return edge.map(e -> mappingFunc.apply(e, me()));\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/80/IdGraph.java\nindex bd46a738710..80de5073963 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/80/IdGraph.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/80/IdGraph.java\n@@ -512,8 +512,7 @@ public class IdGraph<G extends IdGraph<G>> implements WrapperGraph<KeyIndexableG\n     public <E extends Edge> Optional<E> getEdge(Object id, BiFunction<Edge, G, E> mappingFunc) {\n         checkNotNull(id, \"id\");\n \n-        Optional<Edge> edge = supportEdgeIds ?\n-                MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n+        Optional<Edge> edge = supportEdgeIds ? MoreIterables.onlyElement(baseGraph.getEdges(ID, id)) :\n                 Optional.ofNullable(baseGraph.getEdge(id));\n \n         return edge.map(e -> mappingFunc.apply(e, me()));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}