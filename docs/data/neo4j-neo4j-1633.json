{
    "project_name": "neo4j-neo4j",
    "error_id": "1633",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1633/DatabaseStateService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1633/DatabaseStateService.java\nindex 35a0e7f0feb..8aa54e40a9d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1633/DatabaseStateService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1633/DatabaseStateService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.dbms;\n \n import java.util.Map;\n@@ -26,7 +27,7 @@ import org.neo4j.kernel.database.NamedDatabaseId;\n \n /**\n  * Simple api for retrieving a human readable state for a given database, by id.\n- *\n+ * <p>\n  * Also provides the ability to check whether a database is in a failed state.\n  * A failed database has usually failed to undergo some state transition (i.e. START -> STOP)\n  */\n@@ -35,12 +36,12 @@ public interface DatabaseStateService\n \n     /**\n      * Return a snapshot of states for all known databases.\n-     *\n+     * <p>\n      * *NOTE* that if a database has been dropped it will be excluded from this table\n      *\n      * @return map of named database Ids to operator states\n      */\n-    Map<NamedDatabaseId,DatabaseState> stateOfAllDatabases();\n+    Map<NamedDatabaseId, DatabaseState> stateOfAllDatabases();\n \n     /**\n      * Note that if a database with the given name does not exist, the state\n@@ -49,7 +50,7 @@ public interface DatabaseStateService\n      * @param namedDatabaseId the database whose state to return\n      * @return state of database with name\n      */\n-    DatabaseState stateOfDatabase( NamedDatabaseId namedDatabaseId );\n+    DatabaseState stateOfDatabase(NamedDatabaseId namedDatabaseId);\n \n     /**\n      * Note that if a database with the given name does not exist, {@code Optional.empty()}\n@@ -58,6 +59,6 @@ public interface DatabaseStateService\n      * @param namedDatabaseId the database to check for failure\n      * @return the cause of the database failure, if there is one.\n      */\n-    Optional<Throwable> causeOfFailure( NamedDatabaseId namedDatabaseId );\n+    Optional<Throwable> causeOfFailure(NamedDatabaseId namedDatabaseId);\n \n }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}