{
    "project_name": "neo4j-neo4j",
    "error_id": "687",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/687/EagerBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/687/EagerBuffer.java\nindex 979089e79c9..95ebb418ac9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/687/EagerBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/687/EagerBuffer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.collection;\n \n import java.util.Iterator;\n@@ -35,7 +36,7 @@ import static org.neo4j.memory.HeapEstimator.shallowSizeOfObjectArray;\n /**\n  * A specialized heap tracking buffer of Measurable elements, which grows in chunks without array copy as a linked list.\n  * Its use case is append only, and sequential read from beginning to end.\n- *\n+ * <p>\n  * Each new chunk can grow by a configurable factor, up to a maximum size\n  *\n  * @param <T> element type\n@@ -46,7 +47,7 @@ public class EagerBuffer<T extends Measurable> extends DefaultCloseListenable\n     public static final IntUnaryOperator GROW_NEW_CHUNKS_BY_50_PCT = size -> size + (size >> 1);\n     public static final IntUnaryOperator GROW_NEW_CHUNKS_BY_100_PCT = size -> size << 1;\n \n-    private static final long SHALLOW_SIZE = shallowSizeOfInstance( EagerBuffer.class );\n+    private static final long SHALLOW_SIZE = shallowSizeOfInstance(EagerBuffer.class);\n \n     private final MemoryTracker scopedMemoryTracker;\n     private final IntUnaryOperator growthStrategy;\n@@ -56,42 +57,42 @@ public class EagerBuffer<T extends Measurable> extends DefaultCloseListenable\n     private long size;\n     private int maxChunkSize;\n \n-    public static <T extends Measurable> EagerBuffer<T> createEagerBuffer( MemoryTracker memoryTracker )\n+    public static <T extends Measurable> EagerBuffer<T> createEagerBuffer(MemoryTracker memoryTracker)\n     {\n-        return createEagerBuffer( memoryTracker, 1024, ArrayUtil.MAX_ARRAY_SIZE, GROW_NEW_CHUNKS_BY_50_PCT ); // Grow by 50%\n+        return createEagerBuffer(memoryTracker, 1024, ArrayUtil.MAX_ARRAY_SIZE, GROW_NEW_CHUNKS_BY_50_PCT); // Grow by 50%\n     }\n \n-    public static <T extends Measurable> EagerBuffer<T> createEagerBuffer( MemoryTracker memoryTracker, int initialChunkSize )\n+    public static <T extends Measurable> EagerBuffer<T> createEagerBuffer(MemoryTracker memoryTracker, int initialChunkSize)\n     {\n-        return createEagerBuffer( memoryTracker, initialChunkSize, ArrayUtil.MAX_ARRAY_SIZE, GROW_NEW_CHUNKS_BY_50_PCT ); // Grow by 50%\n+        return createEagerBuffer(memoryTracker, initialChunkSize, ArrayUtil.MAX_ARRAY_SIZE, GROW_NEW_CHUNKS_BY_50_PCT); // Grow by 50%\n     }\n \n     public static <T extends Measurable> EagerBuffer<T> createEagerBuffer(\n-            MemoryTracker memoryTracker, int initialChunkSize, int maxChunkSize, IntUnaryOperator growthStrategy )\n+      MemoryTracker memoryTracker, int initialChunkSize, int maxChunkSize, IntUnaryOperator growthStrategy)\n     {\n         MemoryTracker scopedMemoryTracker = memoryTracker.getScopedMemoryTracker();\n-        scopedMemoryTracker.allocateHeap( SHALLOW_SIZE + SCOPED_MEMORY_TRACKER_SHALLOW_SIZE + shallowSizeOfInstance( IntUnaryOperator.class ) );\n-        return new EagerBuffer<T>( scopedMemoryTracker, initialChunkSize, maxChunkSize, growthStrategy );\n+        scopedMemoryTracker.allocateHeap(SHALLOW_SIZE + SCOPED_MEMORY_TRACKER_SHALLOW_SIZE + shallowSizeOfInstance(IntUnaryOperator.class));\n+        return new EagerBuffer<T>(scopedMemoryTracker, initialChunkSize, maxChunkSize, growthStrategy);\n     }\n \n-    private EagerBuffer( MemoryTracker scopedMemoryTracker, int initialChunkSize, int maxChunkSize, IntUnaryOperator growthStrategy )\n+    private EagerBuffer(MemoryTracker scopedMemoryTracker, int initialChunkSize, int maxChunkSize, IntUnaryOperator growthStrategy)\n     {\n         this.scopedMemoryTracker = scopedMemoryTracker;\n         this.maxChunkSize = maxChunkSize;\n         this.growthStrategy = growthStrategy;\n-        first = new EagerBuffer.Chunk<>( initialChunkSize, scopedMemoryTracker.getScopedMemoryTracker() );\n+        first = new EagerBuffer.Chunk<>(initialChunkSize, scopedMemoryTracker.getScopedMemoryTracker());\n         current = first;\n     }\n \n-    public void add( T element )\n+    public void add(T element)\n     {\n-        if ( !current.add( element ) )\n+        if (!current.add(element))\n         {\n-            int newChunkSize = grow( current.elements.length );\n-            EagerBuffer.Chunk<T> newChunk = new EagerBuffer.Chunk<>( newChunkSize, scopedMemoryTracker.getScopedMemoryTracker() );\n+            int newChunkSize = grow(current.elements.length);\n+            EagerBuffer.Chunk<T> newChunk = new EagerBuffer.Chunk<>(newChunkSize, scopedMemoryTracker.getScopedMemoryTracker());\n             current.next = newChunk;\n             current = newChunk;\n-            current.add( element );\n+            current.add(element);\n         }\n         size++;\n     }\n@@ -117,7 +118,7 @@ public class EagerBuffer<T extends Measurable> extends DefaultCloseListenable\n             @Override\n             public boolean hasNext()\n             {\n-                if ( chunk == null || index >= chunk.cursor )\n+                if (chunk == null || index >= chunk.cursor)\n                 {\n                     close();\n                     return false;\n@@ -125,12 +126,12 @@ public class EagerBuffer<T extends Measurable> extends DefaultCloseListenable\n                 return true;\n             }\n \n-            @SuppressWarnings( \"unchecked\" )\n+            @SuppressWarnings(\"unchecked\")\n             @Override\n             public T next()\n             {\n                 Object element = chunk.elements[index++];\n-                if ( index >= chunk.cursor )\n+                if (index >= chunk.cursor)\n                 {\n                     var chunkToRelease = chunk;\n                     chunk = chunk.next;\n@@ -161,7 +162,7 @@ public class EagerBuffer<T extends Measurable> extends DefaultCloseListenable\n     {\n         int i = 0;\n         var chunk = first;\n-        while ( chunk != null )\n+        while (chunk != null)\n         {\n             chunk = chunk.next;\n             i++;\n@@ -169,14 +170,14 @@ public class EagerBuffer<T extends Measurable> extends DefaultCloseListenable\n         return i;\n     }\n \n-    private int grow( int size )\n+    private int grow(int size)\n     {\n-        if ( size == maxChunkSize )\n+        if (size == maxChunkSize)\n         {\n             return size;\n         }\n-        int newSize = growthStrategy.applyAsInt( size );\n-        if ( newSize <= 0 || newSize > maxChunkSize ) // Check overflow\n+        int newSize = growthStrategy.applyAsInt(size);\n+        if (newSize <= 0 || newSize > maxChunkSize) // Check overflow\n         {\n             return maxChunkSize;\n         }\n@@ -185,25 +186,25 @@ public class EagerBuffer<T extends Measurable> extends DefaultCloseListenable\n \n     private static class Chunk<T extends Measurable>\n     {\n-        private static final long SHALLOW_SIZE = shallowSizeOfInstance( EagerBuffer.Chunk.class );\n+        private static final long SHALLOW_SIZE = shallowSizeOfInstance(EagerBuffer.Chunk.class);\n \n         private final Object[] elements;\n         private EagerBuffer.Chunk<T> next;\n         private MemoryTracker memoryTracker;\n         private int cursor;\n \n-        Chunk( int size, MemoryTracker memoryTracker )\n+        Chunk(int size, MemoryTracker memoryTracker)\n         {\n-            memoryTracker.allocateHeap( SHALLOW_SIZE + SCOPED_MEMORY_TRACKER_SHALLOW_SIZE + shallowSizeOfObjectArray( size ) );\n+            memoryTracker.allocateHeap(SHALLOW_SIZE + SCOPED_MEMORY_TRACKER_SHALLOW_SIZE + shallowSizeOfObjectArray(size));\n             elements = new Object[size];\n             this.memoryTracker = memoryTracker;\n         }\n \n-        boolean add( T element )\n+        boolean add(T element)\n         {\n-            if ( cursor < elements.length )\n+            if (cursor < elements.length)\n             {\n-                memoryTracker.allocateHeap( element.estimatedHeapUsage() );\n+                memoryTracker.allocateHeap(element.estimatedHeapUsage());\n                 elements[cursor++] = element;\n                 return true;\n             }\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}