{
    "project_name": "neo4j-neo4j",
    "error_id": "3332",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "154",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "145",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3332/GraphAlgoFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3332/GraphAlgoFactory.java\nindex af2bb0e0623..86fcac531f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3332/GraphAlgoFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3332/GraphAlgoFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo;\n \n import org.neo4j.annotations.api.PublicApi;\n@@ -49,16 +50,16 @@ public abstract class GraphAlgoFactory\n      * nodes. These returned paths can contain loops (i.e. a node can occur\n      * more than once in any returned path).\n      *\n-     * @param context algorithm evaluation context\n+     * @param context  algorithm evaluation context\n      * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n+     *                 {@link Relationship}s for each {@link Path}.\n      * @param maxDepth the max {@link Path#length()} returned paths are\n-     * allowed to have.\n+     *                 allowed to have.\n      * @return an algorithm which finds all paths between two nodes.\n      */\n-    public static PathFinder<Path> allPaths( EvaluationContext context, PathExpander expander, int maxDepth )\n+    public static PathFinder<Path> allPaths(EvaluationContext context, PathExpander expander, int maxDepth)\n     {\n-        return new AllPaths( context, maxDepth, expander );\n+        return new AllPaths(context, maxDepth, expander);\n     }\n \n     /**\n@@ -66,16 +67,16 @@ public abstract class GraphAlgoFactory\n      * nodes. These returned paths cannot contain loops (i.e. a node cannot\n      * occur more than once in any returned path).\n      *\n-     * @param context algorithm evaluation context\n+     * @param context  algorithm evaluation context\n      * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n+     *                 {@link Relationship}s for each {@link Path}.\n      * @param maxDepth the max {@link Path#length()} returned paths are\n-     * allowed to have.\n+     *                 allowed to have.\n      * @return an algorithm which finds simple paths between two nodes.\n      */\n-    public static PathFinder<Path> allSimplePaths( EvaluationContext context, PathExpander expander, int maxDepth )\n+    public static PathFinder<Path> allSimplePaths(EvaluationContext context, PathExpander expander, int maxDepth)\n     {\n-        return new AllSimplePaths( context, maxDepth, expander );\n+        return new AllSimplePaths(context, maxDepth, expander);\n     }\n \n     /**\n@@ -85,16 +86,16 @@ public abstract class GraphAlgoFactory\n      * once in any returned path). The algorithm is bi-directional breadth-first\n      * where nodes will be expanded according to the given {@code expander}.\n      *\n-     * @param context algorithm evaluation context\n+     * @param context  algorithm evaluation context\n      * @param expander the {@link PathExpander} to use for expanding\n-     *            {@link Relationship}s for each {@link Path}.\n+     *                 {@link Relationship}s for each {@link Path}.\n      * @param maxDepth the max {@link Path#length()} returned paths are allowed\n-     *            to have. Longer paths than that will not be examined.\n+     *                 to have. Longer paths than that will not be examined.\n      * @return an algorithm which finds shortest paths between two nodes.\n      */\n-    public static PathFinder<Path> shortestPath( EvaluationContext context, PathExpander expander, int maxDepth )\n+    public static PathFinder<Path> shortestPath(EvaluationContext context, PathExpander expander, int maxDepth)\n     {\n-        return new ShortestPath( context, maxDepth, expander );\n+        return new ShortestPath(context, maxDepth, expander);\n     }\n \n     /**\n@@ -104,18 +105,18 @@ public abstract class GraphAlgoFactory\n      * once in any returned path). The algorithm is bi-directional breadth-first\n      * where nodes will be expanded according to the given {@code expander}.\n      *\n-     * @param context algorithm evaluation context\n-     * @param expander the {@link PathExpander} to use for expanding\n-     *            {@link Relationship}s for each {@link Path}.\n-     * @param maxDepth the max {@link Path#length()} returned paths are allowed\n-     *            to have. Longer paths than that will not be examined.\n+     * @param context     algorithm evaluation context\n+     * @param expander    the {@link PathExpander} to use for expanding\n+     *                    {@link Relationship}s for each {@link Path}.\n+     * @param maxDepth    the max {@link Path#length()} returned paths are allowed\n+     *                    to have. Longer paths than that will not be examined.\n      * @param maxHitCount the maximum number of {@link Path}s to return.\n-     * If this number of found paths are encountered the traversal will stop.\n+     *                    If this number of found paths are encountered the traversal will stop.\n      * @return an algorithm which finds shortest paths between two nodes.\n      */\n-    public static PathFinder<Path> shortestPath( EvaluationContext context, PathExpander expander, int maxDepth, int maxHitCount )\n+    public static PathFinder<Path> shortestPath(EvaluationContext context, PathExpander expander, int maxDepth, int maxHitCount)\n     {\n-        return new ShortestPath( context, maxDepth, expander, maxHitCount );\n+        return new ShortestPath(context, maxDepth, expander, maxHitCount);\n     }\n \n     /**\n@@ -123,16 +124,16 @@ public abstract class GraphAlgoFactory\n      * between two nodes. These returned paths cannot contain loops (i.e. a node\n      * could not occur more than once in any returned path).\n      *\n-     * @param context algorithm evaluation context\n+     * @param context  algorithm evaluation context\n      * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Node}.\n-     * @param length the {@link Path#length()} returned paths will have, if any\n-     * paths were found.\n+     *                 {@link Relationship}s for each {@link Node}.\n+     * @param length   the {@link Path#length()} returned paths will have, if any\n+     *                 paths were found.\n      * @return an algorithm which finds paths of a certain length between two nodes.\n      */\n-    public static PathFinder<Path> pathsWithLength( EvaluationContext context, PathExpander expander, int length )\n+    public static PathFinder<Path> pathsWithLength(EvaluationContext context, PathExpander expander, int length)\n     {\n-        return new ExactDepthPathFinder( context, expander, length, Integer.MAX_VALUE, false );\n+        return new ExactDepthPathFinder(context, expander, length, Integer.MAX_VALUE, false);\n     }\n \n     /**\n@@ -142,25 +143,25 @@ public abstract class GraphAlgoFactory\n      * is returned from {@code lengthEvaluator} and {@code estimateEvaluator}.\n      * These returned paths cannot contain loops (i.e. a node cannot occur more\n      * than once in any returned path).\n-     *\n+     * <p>\n      * See http://en.wikipedia.org/wiki/A*_search_algorithm for more\n      * information.\n      *\n-     * @param context algorithm evaluation context\n-     * @param expander the {@link PathExpander} to use for expanding\n-     * {@link Relationship}s for each {@link Path}.\n-     * @param lengthEvaluator evaluator that can return the cost represented\n-     * by each relationship the algorithm traverses.\n+     * @param context           algorithm evaluation context\n+     * @param expander          the {@link PathExpander} to use for expanding\n+     *                          {@link Relationship}s for each {@link Path}.\n+     * @param lengthEvaluator   evaluator that can return the cost represented\n+     *                          by each relationship the algorithm traverses.\n      * @param estimateEvaluator evaluator that returns an (optimistic)\n-     * estimation of the cost to get from the current node (in the traversal)\n-     * to the end node.\n+     *                          estimation of the cost to get from the current node (in the traversal)\n+     *                          to the end node.\n      * @return an algorithm which finds the cheapest path between two nodes\n      * using the A* algorithm.\n      */\n-    public static PathFinder<WeightedPath> aStar( EvaluationContext context, PathExpander expander,\n-            CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+    public static PathFinder<WeightedPath> aStar(EvaluationContext context, PathExpander expander,\n+                                                 CostEvaluator<Double> lengthEvaluator, EstimateEvaluator<Double> estimateEvaluator)\n     {\n-        return new AStar( context, expander, lengthEvaluator, estimateEvaluator );\n+        return new AStar(context, expander, lengthEvaluator, estimateEvaluator);\n     }\n \n     /**\n@@ -170,73 +171,73 @@ public abstract class GraphAlgoFactory\n      * the cost is returned from {@code costEvaluator}. These returned paths\n      * cannot contain loops (i.e. a node cannot occur more than once in any\n      * returned path).\n-     *\n+     * <p>\n      * Dijkstra assumes none negative costs on all considered relationships.\n      * If this is not the case behaviour is undefined. Do not use Dijkstra\n      * with negative weights or use a {@link CostEvaluator} that handles\n      * negative weights.\n-     *\n+     * <p>\n      * See http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm for more\n      * information.\n      *\n-     * @param context algorithm evaluation context\n-     * @param expander the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n+     * @param context       algorithm evaluation context\n+     * @param expander      the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n      * @param costEvaluator evaluator that can return the cost represented by each relationship the algorithm traverses.\n      * @return an algorithm which finds the cheapest path between two nodes using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( EvaluationContext context, PathExpander<Double> expander, CostEvaluator<Double> costEvaluator )\n+    public static PathFinder<WeightedPath> dijkstra(EvaluationContext context, PathExpander<Double> expander, CostEvaluator<Double> costEvaluator)\n     {\n-        return new DijkstraBidirectional( context, expander, costEvaluator, DEFAULT_EPSILON );\n+        return new DijkstraBidirectional(context, expander, costEvaluator, DEFAULT_EPSILON);\n     }\n \n     /**\n      * See {@link #dijkstra(EvaluationContext, PathExpander, CostEvaluator)} for documentation.\n-     *\n+     * <p>\n      * Uses a cost evaluator which uses the supplied property key to\n      * represent the cost (values of type <b>double</b>).\n      *\n-     * @param context algorithm evaluation context\n-     * @param expander the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n+     * @param context                              algorithm evaluation context\n+     * @param expander                             the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n      * @param relationshipPropertyRepresentingCost the property to represent cost on each relationship the algorithm traverses.\n      * @return an algorithm which finds the cheapest path between two nodes using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( EvaluationContext context, PathExpander<Double> expander, String relationshipPropertyRepresentingCost )\n+    public static PathFinder<WeightedPath> dijkstra(EvaluationContext context, PathExpander<Double> expander, String relationshipPropertyRepresentingCost)\n     {\n-        return dijkstra( context, expander, new DoubleEvaluator( relationshipPropertyRepresentingCost ) );\n+        return dijkstra(context, expander, new DoubleEvaluator(relationshipPropertyRepresentingCost));\n     }\n \n     /**\n      * See {@link #dijkstra(EvaluationContext, PathExpander, CostEvaluator)} for documentation\n-     *\n+     * <p>\n      * Instead of finding all shortest paths with equal cost, find the top {@code numberOfWantedPaths} paths.\n      * This is usually slower than finding all shortest paths with equal cost.\n-     *\n+     * <p>\n      * Uses a cost evaluator which uses the supplied property key to\n      * represent the cost (values of type <b>double</b>).\n      *\n-     * @param expander the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n+     * @param expander                             the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n      * @param relationshipPropertyRepresentingCost the property to represent cost on each relationship the algorithm traverses.\n-     * @param numberOfWantedPaths number of paths to find.\n+     * @param numberOfWantedPaths                  number of paths to find.\n      * @return an algorithm which finds the cheapest path between two nodes using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander<Double> expander, String relationshipPropertyRepresentingCost, int numberOfWantedPaths )\n+    public static PathFinder<WeightedPath> dijkstra(PathExpander<Double> expander, String relationshipPropertyRepresentingCost, int numberOfWantedPaths)\n     {\n-        return dijkstra( expander, new DoubleEvaluator( relationshipPropertyRepresentingCost ), numberOfWantedPaths );\n+        return dijkstra(expander, new DoubleEvaluator(relationshipPropertyRepresentingCost), numberOfWantedPaths);\n     }\n \n     /**\n      * See {@link #dijkstra(EvaluationContext, PathExpander, CostEvaluator)} for documentation\n-     *\n+     * <p>\n      * Instead of finding all shortest paths with equal cost, find the top {@code numberOfWantedPaths} paths.\n      * This is usually slower than finding all shortest paths with equal cost.\n      *\n-     * @param expander the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n-     * @param costEvaluator evaluator that can return the cost represented by each relationship the algorithm traverses.\n+     * @param expander            the {@link PathExpander} to use for expanding {@link Relationship}s for each {@link Path}.\n+     * @param costEvaluator       evaluator that can return the cost represented by each relationship the algorithm traverses.\n      * @param numberOfWantedPaths number of paths to find.\n      * @return an algorithm which finds the cheapest path between two nodes using the Dijkstra algorithm.\n      */\n-    public static PathFinder<WeightedPath> dijkstra( PathExpander<Double> expander, CostEvaluator<Double> costEvaluator, int numberOfWantedPaths )\n+    public static PathFinder<WeightedPath> dijkstra(PathExpander<Double> expander, CostEvaluator<Double> costEvaluator, int numberOfWantedPaths)\n     {\n-        return new Dijkstra( expander, costEvaluator, DEFAULT_EPSILON, PathInterestFactory.numberOfShortest( DEFAULT_EPSILON, numberOfWantedPaths ) );\n+        return new Dijkstra(expander, costEvaluator, DEFAULT_EPSILON, PathInterestFactory.numberOfShortest(DEFAULT_EPSILON, numberOfWantedPaths));\n     }\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3332/GraphAlgoFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3332/GraphAlgoFactory.java\nindex af2bb0e0623..4138ccd1422 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3332/GraphAlgoFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3332/GraphAlgoFactory.java\n@@ -239,4 +239,4 @@ public abstract class GraphAlgoFactory\n     {\n         return new Dijkstra( expander, costEvaluator, DEFAULT_EPSILON, PathInterestFactory.numberOfShortest( DEFAULT_EPSILON, numberOfWantedPaths ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}