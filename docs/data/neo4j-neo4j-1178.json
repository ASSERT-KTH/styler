{
    "project_name": "neo4j-neo4j",
    "error_id": "1178",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1178/Help.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1178/Help.java\nindex 2e49e51e164..7aa298498ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1178/Help.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1178/Help.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.commands;\n \n import java.util.Arrays;\n@@ -39,7 +40,7 @@ public class Help implements Command\n     private final Logger logger;\n     private final CommandHelper commandHelper;\n \n-    public Help( @Nonnull final Logger shell, @Nonnull final CommandHelper commandHelper )\n+    public Help(@Nonnull final Logger shell, @Nonnull final CommandHelper commandHelper)\n     {\n         this.logger = shell;\n         this.commandHelper = commandHelper;\n@@ -77,80 +78,79 @@ public class Help implements Command\n     @Override\n     public List<String> getAliases()\n     {\n-        return Arrays.asList( \":man\" );\n+        return Arrays.asList(\":man\");\n     }\n \n     @Override\n-    public void execute( @Nonnull final String argString ) throws CommandException\n+    public void execute(@Nonnull final String argString) throws CommandException\n     {\n-        String[] args = simpleArgParse( argString, 0, 1, COMMAND_NAME, getUsage() );\n-        if ( args.length == 0 )\n+        String[] args = simpleArgParse(argString, 0, 1, COMMAND_NAME, getUsage());\n+        if (args.length == 0)\n         {\n             printGeneralHelp();\n-        }\n-        else\n+        } else\n         {\n-            printHelpFor( args[0] );\n+            printHelpFor(args[0]);\n         }\n     }\n \n-    private void printHelpFor( @Nonnull final String name ) throws CommandException\n+    private void printHelpFor(@Nonnull final String name) throws CommandException\n     {\n-        Command cmd = commandHelper.getCommand( name );\n-        if ( cmd == null && !name.startsWith( \":\" ) )\n+        Command cmd = commandHelper.getCommand(name);\n+        if (cmd == null && !name.startsWith(\":\"))\n         {\n             // Be friendly to users and don't force them to type colons for help if possible\n-            cmd = commandHelper.getCommand( \":\" + name );\n+            cmd = commandHelper.getCommand(\":\" + name);\n         }\n \n-        if ( cmd == null )\n+        if (cmd == null)\n         {\n-            throw new CommandException( AnsiFormattedText.from( \"No such command: \" ).bold().append( name ) );\n+            throw new CommandException(AnsiFormattedText.from(\"No such command: \").bold().append(name));\n         }\n \n-        logger.printOut( AnsiFormattedText.from( \"\\nusage: \" )\n-                                          .bold().append( cmd.getName() )\n-                                          .boldOff()\n-                                          .append( \" \" )\n-                                          .append( cmd.getUsage() )\n-                                          .append( \"\\n\\n\" )\n-                                          .append( cmd.getHelp() )\n-                                          .append( \"\\n\" )\n-                                          .formattedString() );\n+        logger.printOut(AnsiFormattedText.from(\"\\nusage: \")\n+          .bold().append(cmd.getName())\n+          .boldOff()\n+          .append(\" \")\n+          .append(cmd.getUsage())\n+          .append(\"\\n\\n\")\n+          .append(cmd.getHelp())\n+          .append(\"\\n\")\n+          .formattedString());\n     }\n \n     private void printGeneralHelp()\n     {\n-        logger.printOut( \"\\nAvailable commands:\" );\n+        logger.printOut(\"\\nAvailable commands:\");\n \n         // Get longest command so we can align them nicely\n         List<Command> allCommands = commandHelper.getAllCommands();\n \n-        int leftColWidth = longestCmdLength( allCommands );\n+        int leftColWidth = longestCmdLength(allCommands);\n \n-        allCommands.stream().forEach( cmd -> logger.printOut(\n-                AnsiFormattedText.from( \"  \" )\n-                                 .bold().append( String.format( \"%-\" + leftColWidth + \"s\", cmd.getName() ) )\n-                                 .boldOff().append( \" \" + cmd.getDescription() )\n-                                 .formattedString() ) );\n+        allCommands.stream().forEach(cmd -> logger.printOut(\n+          AnsiFormattedText.from(\"  \")\n+            .bold().append(String.format(\"%-\" + leftColWidth + \"s\", cmd.getName()))\n+            .boldOff().append(\" \" + cmd.getDescription())\n+            .formattedString()));\n \n-        logger.printOut( \"\\nFor help on a specific command type:\" );\n-        logger.printOut( AnsiFormattedText.from( \"    \" )\n-                                          .append( COMMAND_NAME )\n-                                          .bold().append( \" command\" )\n-                                          .boldOff().append( \"\\n\" ).formattedString() );\n+        logger.printOut(\"\\nFor help on a specific command type:\");\n+        logger.printOut(AnsiFormattedText.from(\"    \")\n+          .append(COMMAND_NAME)\n+          .bold().append(\" command\")\n+          .boldOff().append(\"\\n\").formattedString());\n \n-        logger.printOut( \"\\nFor help on cypher please visit:\" );\n-        logger.printOut( AnsiFormattedText.from( \"    \" )\n-                                          .append( CYPHER_REFCARD_LINK )\n-                                          .append( \"\\n\" ).formattedString() );\n+        logger.printOut(\"\\nFor help on cypher please visit:\");\n+        logger.printOut(AnsiFormattedText.from(\"    \")\n+          .append(CYPHER_REFCARD_LINK)\n+          .append(\"\\n\").formattedString());\n     }\n \n-    private int longestCmdLength( List<Command> allCommands )\n+    private int longestCmdLength(List<Command> allCommands)\n     {\n         String longestCommand = allCommands.stream()\n-                                           .map( Command::getName )\n-                                           .reduce( \"\", ( s1, s2 ) -> s1.length() > s2.length() ? s1 : s2 );\n+          .map(Command::getName)\n+          .reduce(\"\", (s1, s2) -> s1.length() > s2.length() ? s1 : s2);\n         return longestCommand.length();\n     }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}