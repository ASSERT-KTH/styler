{
    "project_name": "EMResearch-EMB",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "38",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "@Profile(\"jpa\")\npublic class JpaSpecialtyRepositoryImpl implements SpecialtyRepository {\n\t\n    @PersistenceContext\n    private EntityManager em;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "38",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/9/JpaSpecialtyRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/9/JpaSpecialtyRepositoryImpl.java\nindex 54248caf308..d19123f966a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/9/JpaSpecialtyRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/9/JpaSpecialtyRepositoryImpl.java\n@@ -29,42 +29,41 @@ import org.springframework.stereotype.Repository;\n \n /**\n  * @author Vitaliy Fedoriv\n- *\n  */\n \n @Repository\n @Profile(\"jpa\")\n public class JpaSpecialtyRepositoryImpl implements SpecialtyRepository {\n-\t\n+\n     @PersistenceContext\n     private EntityManager em;\n \n-\t@Override\n-\tpublic Specialty findById(int id) {\n-\t\treturn this.em.find(Specialty.class, id);\n-\t}\n+    @Override\n+    public Specialty findById(int id) {\n+        return this.em.find(Specialty.class, id);\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic Collection<Specialty> findAll() throws DataAccessException {\n-\t\treturn this.em.createQuery(\"SELECT s FROM Specialty s\").getResultList();\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Collection<Specialty> findAll() throws DataAccessException {\n+        return this.em.createQuery(\"SELECT s FROM Specialty s\").getResultList();\n+    }\n \n-\t@Override\n-\tpublic void save(Specialty specialty) throws DataAccessException {\n-\t\tif (specialty.getId() == null) {\n+    @Override\n+    public void save(Specialty specialty) throws DataAccessException {\n+        if (specialty.getId() == null) {\n             this.em.persist(specialty);\n         } else {\n             this.em.merge(specialty);\n         }\n-\t}\n+    }\n \n-\t@Override\n-\tpublic void delete(Specialty specialty) throws DataAccessException {\n-\t\tthis.em.remove(this.em.contains(specialty) ? specialty : this.em.merge(specialty));\n-\t\tString specId = specialty.getId().toString();\n-\t\tthis.em.createNativeQuery(\"DELETE FROM vet_specialties WHERE specialty_id=\" + specId).executeUpdate();\n-\t\tthis.em.createQuery(\"DELETE FROM Specialty specialty WHERE id=\" + specId).executeUpdate();\n-\t}\n+    @Override\n+    public void delete(Specialty specialty) throws DataAccessException {\n+        this.em.remove(this.em.contains(specialty) ? specialty : this.em.merge(specialty));\n+        String specId = specialty.getId().toString();\n+        this.em.createNativeQuery(\"DELETE FROM vet_specialties WHERE specialty_id=\" + specId).executeUpdate();\n+        this.em.createQuery(\"DELETE FROM Specialty specialty WHERE id=\" + specId).executeUpdate();\n+    }\n \n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/9/JpaSpecialtyRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/9/JpaSpecialtyRepositoryImpl.java\nindex 54248caf308..b551b11453c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/9/JpaSpecialtyRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/9/JpaSpecialtyRepositoryImpl.java\n@@ -35,36 +35,35 @@ import org.springframework.stereotype.Repository;\n @Repository\n @Profile(\"jpa\")\n public class JpaSpecialtyRepositoryImpl implements SpecialtyRepository {\n-\t\n+\n     @PersistenceContext\n-    private EntityManager em;\n+private EntityManager em;\n \n-\t@Override\n+@Override\n \tpublic Specialty findById(int id) {\n-\t\treturn this.em.find(Specialty.class, id);\n-\t}\n+    return this.em.find(Specialty.class, id);\n+    }\n \n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic Collection<Specialty> findAll() throws DataAccessException {\n-\t\treturn this.em.createQuery(\"SELECT s FROM Specialty s\").getResultList();\n-\t}\n+    return this.em.createQuery(\"SELECT s FROM Specialty s\").getResultList();\n+    }\n \n \t@Override\n \tpublic void save(Specialty specialty) throws DataAccessException {\n-\t\tif (specialty.getId() == null) {\n-            this.em.persist(specialty);\n+    if (specialty.getId() == null) {\n+    this.em.persist(specialty);\n         } else {\n             this.em.merge(specialty);\n         }\n-\t}\n+    }\n \n \t@Override\n \tpublic void delete(Specialty specialty) throws DataAccessException {\n-\t\tthis.em.remove(this.em.contains(specialty) ? specialty : this.em.merge(specialty));\n+    this.em.remove(this.em.contains(specialty) ? specialty : this.em.merge(specialty));\n \t\tString specId = specialty.getId().toString();\n \t\tthis.em.createNativeQuery(\"DELETE FROM vet_specialties WHERE specialty_id=\" + specId).executeUpdate();\n \t\tthis.em.createQuery(\"DELETE FROM Specialty specialty WHERE id=\" + specId).executeUpdate();\n-\t}\n-\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/9/JpaSpecialtyRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/9/JpaSpecialtyRepositoryImpl.java\nindex 54248caf308..59b9fed8601 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/9/JpaSpecialtyRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/9/JpaSpecialtyRepositoryImpl.java\n@@ -17,10 +17,8 @@\n package org.springframework.samples.petclinic.repository.jpa;\n \n import java.util.Collection;\n-\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n-\n import org.springframework.context.annotation.Profile;\n import org.springframework.dao.DataAccessException;\n import org.springframework.samples.petclinic.model.Specialty;\n@@ -32,39 +30,41 @@ import org.springframework.stereotype.Repository;\n  *\n  */\n \n+\n @Repository\n @Profile(\"jpa\")\n public class JpaSpecialtyRepositoryImpl implements SpecialtyRepository {\n-\t\n     @PersistenceContext\n     private EntityManager em;\n \n-\t@Override\n-\tpublic Specialty findById(int id) {\n-\t\treturn this.em.find(Specialty.class, id);\n-\t}\n+    @Override\n+    public Specialty findById(int id) {\n+        return this.em.find(Specialty.class, id);\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic Collection<Specialty> findAll() throws DataAccessException {\n-\t\treturn this.em.createQuery(\"SELECT s FROM Specialty s\").getResultList();\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Collection<Specialty> findAll() throws DataAccessException {\n+    return this.em.createQuery(\"SELECT s FROM Specialty s\").getResultList();\n+    }\n \n-\t@Override\n-\tpublic void save(Specialty specialty) throws DataAccessException {\n-\t\tif (specialty.getId() == null) {\n+    @Override\n+    public void save(Specialty specialty) throws DataAccessException {\n+        if (specialty.getId() == null) {\n             this.em.persist(specialty);\n         } else {\n             this.em.merge(specialty);\n         }\n-\t}\n+    }\n \n-\t@Override\n-\tpublic void delete(Specialty specialty) throws DataAccessException {\n-\t\tthis.em.remove(this.em.contains(specialty) ? specialty : this.em.merge(specialty));\n-\t\tString specId = specialty.getId().toString();\n-\t\tthis.em.createNativeQuery(\"DELETE FROM vet_specialties WHERE specialty_id=\" + specId).executeUpdate();\n-\t\tthis.em.createQuery(\"DELETE FROM Specialty specialty WHERE id=\" + specId).executeUpdate();\n-\t}\n+    @Override\n+    public void delete(Specialty specialty) throws DataAccessException {\n+        this.em.remove(this.em.contains(specialty) ? specialty : this.em.merge(specialty));\n \n-}\n+        String specId = specialty.getId().toString();\n+        this.em.createNativeQuery(\"DELETE FROM vet_specialties WHERE specialty_id=\"\n+            + specId).executeUpdate();\n+        this.em.createQuery(\"DELETE FROM Specialty specialty WHERE id=\"\n+            + specId).executeUpdate();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "38",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}