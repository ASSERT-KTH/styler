{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "305",
    "information": {
        "errors": [
            {
                "line": "55",
                "column": "78",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  public void setInvocationMonitorType(InvocationType invocationType) {\n    if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n    }\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/305/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/305/InvocationMonitor.java\nindex f5430f7f992..00b77ec00dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/305/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/305/InvocationMonitor.java\n@@ -52,8 +52,8 @@ public class InvocationMonitor extends BasicMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER\n+          ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "55",
                    "column": "78",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/305/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/305/InvocationMonitor.java\nindex f5430f7f992..3a0e714cb70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/305/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/305/InvocationMonitor.java\n@@ -52,8 +52,7 @@ public class InvocationMonitor extends BasicMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n@@ -121,4 +120,4 @@ public class InvocationMonitor extends BasicMonitor {\n     }\n     return metric;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "55",
                    "column": "78",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/305/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/305/InvocationMonitor.java\nindex f5430f7f992..00b77ec00dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/305/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/305/InvocationMonitor.java\n@@ -52,8 +52,8 @@ public class InvocationMonitor extends BasicMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER\n+          ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}