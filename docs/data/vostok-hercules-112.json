{
    "project_name": "vostok-hercules",
    "error_id": "112",
    "information": {
        "errors": [
            {
                "line": "234",
                "column": "17",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "            do {\n                // Add cursor info to support pagination\n                if(nextCursor.isPresent()) {\n                    RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                    requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                    request = requestBuilder.build();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/112/SentryApiClient.java\nindex 64dc3ceb0e2..07789a5b3a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/112/SentryApiClient.java\n@@ -231,7 +231,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/112/SentryApiClient.java\nindex 64dc3ceb0e2..c8a3bcfe1bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/112/SentryApiClient.java\n@@ -46,239 +46,247 @@ import java.util.stream.Collectors;\n  */\n public class SentryApiClient {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(SentryApiClient.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SentryApiClient.class);\n \n-    private static final String API_URL = \"/api/0/\";\n+  private static final String API_URL = \"/api/0/\";\n \n-    private static final String ORGANIZATIONS_URL = API_URL + \"organizations/\";\n-    private static final String PROJECTS_URL = API_URL + \"projects/\";\n-    private static final String TEAMS_URL = API_URL + \"teams/\";\n+  private static final String ORGANIZATIONS_URL = API_URL + \"organizations/\";\n+  private static final String PROJECTS_URL = API_URL + \"projects/\";\n+  private static final String TEAMS_URL = API_URL + \"teams/\";\n \n-    private static final String GET_PROJECTS_URL = ORGANIZATIONS_URL + \"%s/projects/\";\n-    private static final String GET_PUBLIC_DSN_URL = PROJECTS_URL + \"%s/%s/keys/\";\n-    private static final String GET_TEAMS_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n-    private static final String CREATE_TEAM_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n-    private static final String CREATE_PROJECT_URL = TEAMS_URL + \"%s/%s/projects/\";\n+  private static final String GET_PROJECTS_URL = ORGANIZATIONS_URL + \"%s/projects/\";\n+  private static final String GET_PUBLIC_DSN_URL = PROJECTS_URL + \"%s/%s/keys/\";\n+  private static final String GET_TEAMS_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n+  private static final String CREATE_TEAM_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n+  private static final String CREATE_PROJECT_URL = TEAMS_URL + \"%s/%s/projects/\";\n \n-    private static final String CLIENT_API_ERROR = \"ClientApiError\";\n-    private static final String CANNOT_CREATE_JSON = \"CannotCreateJSON\";\n+  private static final String CLIENT_API_ERROR = \"ClientApiError\";\n+  private static final String CANNOT_CREATE_JSON = \"CannotCreateJSON\";\n \n-    private final ObjectMapper objectMapper;\n-    private final HttpHost sentryHost;\n-    private final CloseableHttpClient httpClient;\n+  private final ObjectMapper objectMapper;\n+  private final HttpHost sentryHost;\n+  private final CloseableHttpClient httpClient;\n \n-    public SentryApiClient(String sentryUrl, String token) {\n-        this.objectMapper = new ObjectMapper();\n-        this.sentryHost = HttpHost.create(sentryUrl);\n-        this.httpClient = HttpClients.custom()\n-                .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n-                .setRetryHandler(new StandardHttpRequestRetryHandler())\n-                .build();\n-    }\n+  public SentryApiClient(String sentryUrl, String token) {\n+    this.objectMapper = new ObjectMapper();\n+    this.sentryHost = HttpHost.create(sentryUrl);\n+    this.httpClient = HttpClients.custom()\n+      .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n+      .setRetryHandler(new StandardHttpRequestRetryHandler())\n+      .build();\n+  }\n \n-    /**\n-     * Ping of Sentry\n-     *\n-     * @return the {@link Result} object with error information in case of error\n-     */\n-    public Result<Void, ErrorInfo> ping() {\n-        return request(\n-                new HttpHead(API_URL),\n-                new TypeReference<Void>() {});\n-    }\n+  /**\n+   * Ping of Sentry\n+   *\n+   * @return the {@link Result} object with error information in case of error\n+   */\n+  public Result<Void, ErrorInfo> ping() {\n+    return request(\n+      new HttpHead(API_URL),\n+      new TypeReference<Void>() {\n+      });\n+  }\n \n-    /**\n-     * Get the organizations for this Sentry API client\n-     *\n-     * @return the {@link Result} object with a list of organizations\n-     */\n-    public Result<List<OrganizationInfo>, ErrorInfo> getOrganizations() {\n-        return pagedRequest(\n-                new HttpGet(ORGANIZATIONS_URL),\n-                new TypeReference<List<OrganizationInfo>>() {});\n-    }\n+  /**\n+   * Get the organizations for this Sentry API client\n+   *\n+   * @return the {@link Result} object with a list of organizations\n+   */\n+  public Result<List<OrganizationInfo>, ErrorInfo> getOrganizations() {\n+    return pagedRequest(\n+      new HttpGet(ORGANIZATIONS_URL),\n+      new TypeReference<List<OrganizationInfo>>() {\n+      });\n+  }\n \n-    /**\n-     * Get the projects which match the organization\n-     *\n-     * @param organization the organization\n-     * @return the {@link Result} object with a list of projects\n-     */\n-    public Result<List<ProjectInfo>, ErrorInfo> getProjects(String organization) {\n-        return pagedRequest(\n-                new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n-                new TypeReference<List<ProjectInfo>>() {});\n-    }\n+  /**\n+   * Get the projects which match the organization\n+   *\n+   * @param organization the organization\n+   * @return the {@link Result} object with a list of projects\n+   */\n+  public Result<List<ProjectInfo>, ErrorInfo> getProjects(String organization) {\n+    return pagedRequest(\n+      new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n+      new TypeReference<List<ProjectInfo>>() {\n+      });\n+  }\n \n-    /**\n-     * Get a list of public DSN which match the project\n-     *\n-     * @param organization the organization of the project\n-     * @param project the project for which a list of public DSN is requested\n-     * @return the {@link Result} object with a list of public DSN\n-     */\n-    public Result<List<KeyInfo>, ErrorInfo> getPublicDsn(String organization, String project) {\n-        return pagedRequest(\n-                new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n-                new TypeReference<List<KeyInfo>>() {} );\n-    }\n+  /**\n+   * Get a list of public DSN which match the project\n+   *\n+   * @param organization the organization of the project\n+   * @param project      the project for which a list of public DSN is requested\n+   * @return the {@link Result} object with a list of public DSN\n+   */\n+  public Result<List<KeyInfo>, ErrorInfo> getPublicDsn(String organization, String project) {\n+    return pagedRequest(\n+      new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n+      new TypeReference<List<KeyInfo>>() {\n+      });\n+  }\n \n-    /**\n-     * Get the teams which match the organization\n-     *\n-     * @param organization the organization\n-     * @return the {@link Result} object with a list of teams\n-     */\n-    public Result<List<TeamInfo>, ErrorInfo> getTeams(String organization) {\n-        return pagedRequest(\n-                new HttpGet(String.format(GET_TEAMS_URL, organization)),\n-                new TypeReference<List<TeamInfo>>() {} );\n+  /**\n+   * Get the teams which match the organization\n+   *\n+   * @param organization the organization\n+   * @return the {@link Result} object with a list of teams\n+   */\n+  public Result<List<TeamInfo>, ErrorInfo> getTeams(String organization) {\n+    return pagedRequest(\n+      new HttpGet(String.format(GET_TEAMS_URL, organization)),\n+      new TypeReference<List<TeamInfo>>() {\n+      });\n+  }\n+\n+  /**\n+   * Create new organization in the Sentry\n+   *\n+   * @param organization the name of an organization\n+   * @return the {@link Result} object with created organization or error\n+   */\n+  public Result<OrganizationInfo, ErrorInfo> createOrganization(String organization) {\n+    Organization organizationModel = new Organization(organization);\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    byte[] body;\n+    try {\n+      body = objectMapper.writeValueAsBytes(organizationModel);\n+    } catch (JsonProcessingException e) {\n+      LOGGER.error(String.format(\"Cannot create JSON from model for organization creation: %s\", e.getMessage()));\n+      return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n     }\n+    HttpPost post = new HttpPost(ORGANIZATIONS_URL);\n+    post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n+    LOGGER.info(String.format(\"Creating of new organization '%s' in Sentry\", organization));\n+    return request(post, new TypeReference<OrganizationInfo>() {\n+    });\n+  }\n \n-    /**\n-     * Create new organization in the Sentry\n-     *\n-     * @param organization the name of an organization\n-     * @return the {@link Result} object with created organization or error\n-     */\n-    public Result<OrganizationInfo, ErrorInfo> createOrganization(String organization) {\n-        Organization organizationModel = new Organization(organization);\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        byte[] body;\n-        try {\n-            body = objectMapper.writeValueAsBytes(organizationModel);\n-        } catch (JsonProcessingException e) {\n-            LOGGER.error(String.format(\"Cannot create JSON from model for organization creation: %s\", e.getMessage()));\n-            return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n-        }\n-        HttpPost post = new HttpPost(ORGANIZATIONS_URL);\n-        post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n-        LOGGER.info(String.format(\"Creating of new organization '%s' in Sentry\", organization));\n-        return request(post, new TypeReference<OrganizationInfo>() {});\n+  /**\n+   * Create new team in the Sentry\n+   *\n+   * @param organization the organization where need to create a team\n+   * @param team         the team name\n+   * @return the {@link Result} object with created team or error\n+   */\n+  public Result<TeamInfo, ErrorInfo> createTeam(String organization, String team) {\n+    Team teamModel = new Team(team);\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    byte[] body;\n+    try {\n+      body = objectMapper.writeValueAsBytes(teamModel);\n+    } catch (JsonProcessingException e) {\n+      LOGGER.error(String.format(\"Cannot create JSON from model for team creation: %s\", e.getMessage()));\n+      return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n     }\n+    HttpPost post = new HttpPost(String.format(CREATE_TEAM_URL, organization));\n+    post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n+    LOGGER.info(String.format(\"Creating of new team '%s' in Sentry\", team));\n+    return request(post, new TypeReference<TeamInfo>() {\n+    });\n+  }\n \n-    /**\n-     * Create new team in the Sentry\n-     *\n-     * @param organization the organization where need to create a team\n-     * @param team the team name\n-     * @return the {@link Result} object with created team or error\n-     */\n-    public Result<TeamInfo, ErrorInfo> createTeam(String organization, String team) {\n-        Team teamModel = new Team(team);\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        byte[] body;\n-        try {\n-            body = objectMapper.writeValueAsBytes(teamModel);\n-        } catch (JsonProcessingException e) {\n-            LOGGER.error(String.format(\"Cannot create JSON from model for team creation: %s\", e.getMessage()));\n-            return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n-        }\n-        HttpPost post = new HttpPost(String.format(CREATE_TEAM_URL, organization));\n-        post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n-        LOGGER.info(String.format(\"Creating of new team '%s' in Sentry\", team));\n-        return request(post, new TypeReference<TeamInfo>() {});\n+  /**\n+   * Create new project in the Sentry\n+   *\n+   * @param organization the organization where need to create a project\n+   * @param team         the team where need to create a project\n+   * @param project      the project name\n+   * @return the {@link Result} object with created project or error\n+   */\n+  public Result<ProjectInfo, ErrorInfo> createProject(String organization, String team, String project) {\n+    Project projectModel = new Project(project);\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    byte[] body;\n+    try {\n+      body = objectMapper.writeValueAsBytes(projectModel);\n+    } catch (JsonProcessingException e) {\n+      LOGGER.error(String.format(\"Cannot create JSON from model for project creation: %s\", e.getMessage()));\n+      return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n     }\n+    HttpPost post = new HttpPost(String.format(CREATE_PROJECT_URL, organization, team));\n+    post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n+    LOGGER.info(String.format(\"Creating of new project '%s' in Sentry\", project));\n+    return request(post, new TypeReference<ProjectInfo>() {\n+    });\n+  }\n \n-    /**\n-     * Create new project in the Sentry\n-     *\n-     * @param organization the organization where need to create a project\n-     * @param team the team where need to create a project\n-     * @param project the project name\n-     * @return the {@link Result} object with created project or error\n-     */\n-    public Result<ProjectInfo, ErrorInfo> createProject(String organization, String team, String project) {\n-        Project projectModel = new Project(project);\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        byte[] body;\n-        try {\n-            body = objectMapper.writeValueAsBytes(projectModel);\n-        } catch (JsonProcessingException e) {\n-            LOGGER.error(String.format(\"Cannot create JSON from model for project creation: %s\", e.getMessage()));\n-            return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n+  private <T> Result<T, ErrorInfo> request(HttpUriRequest request, TypeReference<T> typeReference) {\n+    try (CloseableHttpResponse response = httpClient.execute(sentryHost, request)) {\n+      Optional<HttpEntity> entity = Optional.ofNullable(response.getEntity());\n+      if (isErrorResponse(response)) {\n+        String message = null;\n+        if (entity.isPresent()) {\n+          message = objectMapper.writeValueAsString(entity.get().getContent());\n         }\n-        HttpPost post = new HttpPost(String.format(CREATE_PROJECT_URL, organization, team));\n-        post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n-        LOGGER.info(String.format(\"Creating of new project '%s' in Sentry\", project));\n-        return request(post, new TypeReference<ProjectInfo>() {});\n+        return Result.error(new ErrorInfo(CLIENT_API_ERROR, extractStatusCode(response), message));\n+      }\n+      T value = null;\n+      if (entity.isPresent()) {\n+        value = objectMapper.readValue(entity.get().getContent(), typeReference);\n+      }\n+      return Result.ok(value);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Error on request: {}\", e.getMessage());\n+      return Result.error(new ErrorInfo(CLIENT_API_ERROR, e.getMessage()));\n     }\n+  }\n \n-    private <T> Result<T, ErrorInfo> request(HttpUriRequest request, TypeReference<T> typeReference) {\n+  private <T> Result<List<T>, ErrorInfo> pagedRequest(HttpUriRequest request, TypeReference<List<T>> listTypeReference) {\n+    List<T> resultList = new LinkedList<>();\n+    Optional<String> nextCursor = Optional.empty();\n+    try {\n+      do {\n+        // Add cursor info to support pagination\n+        if (nextCursor.isPresent()) {\n+          RequestBuilder requestBuilder = RequestBuilder.copy(request);\n+          requestBuilder.addParameter(\"cursor\", nextCursor.get());\n+          request = requestBuilder.build();\n+        }\n         try (CloseableHttpResponse response = httpClient.execute(sentryHost, request)) {\n-            Optional<HttpEntity> entity = Optional.ofNullable(response.getEntity());\n-            if (isErrorResponse(response)) {\n-                String message = null;\n-                if (entity.isPresent()) {\n-                    message = objectMapper.writeValueAsString(entity.get().getContent());\n-                }\n-                return Result.error(new ErrorInfo(CLIENT_API_ERROR, extractStatusCode(response), message));\n-            }\n-            T value = null;\n+          Optional<HttpEntity> entity = Optional.ofNullable(response.getEntity());\n+          if (isErrorResponse(response)) {\n+            String message = null;\n             if (entity.isPresent()) {\n-                value = objectMapper.readValue(entity.get().getContent(), typeReference);\n+              message = objectMapper.writeValueAsString(entity.get().getContent());\n             }\n-            return Result.ok(value);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Error on request: {}\", e.getMessage());\n-            return Result.error(new ErrorInfo(CLIENT_API_ERROR, e.getMessage()));\n+            return Result.error(new ErrorInfo(CLIENT_API_ERROR, extractStatusCode(response), message));\n+          }\n+          if (entity.isPresent()) {\n+            resultList.addAll(objectMapper.readValue(entity.get().getContent(), listTypeReference));\n+          }\n+          nextCursor = getCursorValue(response.getFirstHeader(\"Link\"));\n         }\n+      } while (nextCursor.isPresent());\n+      return Result.ok(resultList);\n+    } catch (Exception e) {\n+      LOGGER.error(\"Error on paged request: {}\", e.getMessage());\n+      return Result.error(new ErrorInfo(CLIENT_API_ERROR, e.getMessage()));\n     }\n+  }\n \n-    private <T> Result<List<T>, ErrorInfo> pagedRequest(HttpUriRequest request, TypeReference<List<T>> listTypeReference) {\n-        List<T> resultList = new LinkedList<>();\n-        Optional<String> nextCursor = Optional.empty();\n-        try {\n-            do {\n-                // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n-                    RequestBuilder requestBuilder = RequestBuilder.copy(request);\n-                    requestBuilder.addParameter(\"cursor\", nextCursor.get());\n-                    request = requestBuilder.build();\n-                }\n-                try (CloseableHttpResponse response = httpClient.execute(sentryHost, request)) {\n-                    Optional<HttpEntity> entity = Optional.ofNullable(response.getEntity());\n-                    if (isErrorResponse(response)) {\n-                        String message = null;\n-                        if (entity.isPresent()) {\n-                            message = objectMapper.writeValueAsString(entity.get().getContent());\n-                        }\n-                        return Result.error(new ErrorInfo(CLIENT_API_ERROR, extractStatusCode(response), message));\n-                    }\n-                    if (entity.isPresent()) {\n-                        resultList.addAll(objectMapper.readValue(entity.get().getContent(), listTypeReference));\n-                    }\n-                    nextCursor = getCursorValue(response.getFirstHeader(\"Link\"));\n-                }\n-            } while (nextCursor.isPresent());\n-            return Result.ok(resultList);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Error on paged request: {}\", e.getMessage());\n-            return Result.error(new ErrorInfo(CLIENT_API_ERROR, e.getMessage()));\n-        }\n-    }\n+  private static boolean isErrorResponse(CloseableHttpResponse response) {\n+    return 400 <= extractStatusCode(response);\n+  }\n \n-    private static boolean isErrorResponse(CloseableHttpResponse response) {\n-        return 400 <= extractStatusCode(response);\n-    }\n+  private static int extractStatusCode(CloseableHttpResponse response) {\n+    return response.getStatusLine().getStatusCode();\n+  }\n \n-    private static int extractStatusCode(CloseableHttpResponse response) {\n-        return response.getStatusLine().getStatusCode();\n-    }\n+  private static Optional<String> getCursorValue(Header linkHeader) {\n+    for (HeaderElement element : linkHeader.getElements()) {\n+      Map<String, String> params = Arrays.stream(element.getParameters())\n+        .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n \n-    private static Optional<String> getCursorValue(Header linkHeader) {\n-        for (HeaderElement element : linkHeader.getElements()) {\n-            Map<String, String> params = Arrays.stream(element.getParameters())\n-                    .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n-\n-            if (!\"next\".equals(params.get(\"rel\"))) {\n-                continue;\n-            }\n-            if (\"false\".equals(params.get(\"results\"))) {\n-                return Optional.empty();\n-            }\n-            return Optional.ofNullable(params.get(\"cursor\"));\n-        }\n+      if (!\"next\".equals(params.get(\"rel\"))) {\n+        continue;\n+      }\n+      if (\"false\".equals(params.get(\"results\"))) {\n         return Optional.empty();\n+      }\n+      return Optional.ofNullable(params.get(\"cursor\"));\n     }\n+    return Optional.empty();\n+  }\n }\n",
            "diff_size": 274
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/112/SentryApiClient.java\nindex 64dc3ceb0e2..22d13b1e208 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/112/SentryApiClient.java\n@@ -120,7 +120,7 @@ public class SentryApiClient {\n     public Result<List<KeyInfo>, ErrorInfo> getPublicDsn(String organization, String project) {\n         return pagedRequest(\n                 new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n-                new TypeReference<List<KeyInfo>>() {} );\n+                new TypeReference<List<KeyInfo>>() {});\n     }\n \n     /**\n@@ -132,7 +132,7 @@ public class SentryApiClient {\n     public Result<List<TeamInfo>, ErrorInfo> getTeams(String organization) {\n         return pagedRequest(\n                 new HttpGet(String.format(GET_TEAMS_URL, organization)),\n-                new TypeReference<List<TeamInfo>>() {} );\n+                new TypeReference<List<TeamInfo>>() {});\n     }\n \n     /**\n@@ -231,7 +231,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n@@ -281,4 +281,4 @@ public class SentryApiClient {\n         }\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/112/SentryApiClient.java\nindex 64dc3ceb0e2..600e035951b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/112/SentryApiClient.java\n@@ -31,7 +31,6 @@ import ru.kontur.vostok.hercules.sentry.api.model.Team;\n import ru.kontur.vostok.hercules.sentry.api.model.TeamInfo;\n import ru.kontur.vostok.hercules.sentry.sink.ErrorInfo;\n import ru.kontur.vostok.hercules.util.functional.Result;\n-\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n@@ -44,25 +43,22 @@ import java.util.stream.Collectors;\n  *\n  * @author Kirill Sulim\n  */\n+\n+\n public class SentryApiClient {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SentryApiClient.class);\n-\n     private static final String API_URL = \"/api/0/\";\n-\n     private static final String ORGANIZATIONS_URL = API_URL + \"organizations/\";\n     private static final String PROJECTS_URL = API_URL + \"projects/\";\n     private static final String TEAMS_URL = API_URL + \"teams/\";\n-\n     private static final String GET_PROJECTS_URL = ORGANIZATIONS_URL + \"%s/projects/\";\n     private static final String GET_PUBLIC_DSN_URL = PROJECTS_URL + \"%s/%s/keys/\";\n     private static final String GET_TEAMS_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n     private static final String CREATE_TEAM_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n     private static final String CREATE_PROJECT_URL = TEAMS_URL + \"%s/%s/projects/\";\n-\n     private static final String CLIENT_API_ERROR = \"ClientApiError\";\n     private static final String CANNOT_CREATE_JSON = \"CannotCreateJSON\";\n-\n     private final ObjectMapper objectMapper;\n     private final HttpHost sentryHost;\n     private final CloseableHttpClient httpClient;\n@@ -71,9 +67,9 @@ public class SentryApiClient {\n         this.objectMapper = new ObjectMapper();\n         this.sentryHost = HttpHost.create(sentryUrl);\n         this.httpClient = HttpClients.custom()\n-                .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n-                .setRetryHandler(new StandardHttpRequestRetryHandler())\n-                .build();\n+        .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n+        .setRetryHandler(new StandardHttpRequestRetryHandler())\n+        .build();\n     }\n \n     /**\n@@ -81,10 +77,9 @@ public class SentryApiClient {\n      *\n      * @return the {@link Result} object with error information in case of error\n      */\n+\n     public Result<Void, ErrorInfo> ping() {\n-        return request(\n-                new HttpHead(API_URL),\n-                new TypeReference<Void>() {});\n+        return request(new HttpHead(API_URL), new TypeReference<Void>() {});\n     }\n \n     /**\n@@ -92,10 +87,12 @@ public class SentryApiClient {\n      *\n      * @return the {@link Result} object with a list of organizations\n      */\n+\n     public Result<List<OrganizationInfo>, ErrorInfo> getOrganizations() {\n         return pagedRequest(\n-                new HttpGet(ORGANIZATIONS_URL),\n-                new TypeReference<List<OrganizationInfo>>() {});\n+            new HttpGet(ORGANIZATIONS_URL),\n+            new TypeReference<List<OrganizationInfo>>() {}\n+);\n     }\n \n     /**\n@@ -104,10 +101,12 @@ public class SentryApiClient {\n      * @param organization the organization\n      * @return the {@link Result} object with a list of projects\n      */\n+\n     public Result<List<ProjectInfo>, ErrorInfo> getProjects(String organization) {\n         return pagedRequest(\n-                new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n-                new TypeReference<List<ProjectInfo>>() {});\n+            new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n+            new TypeReference<List<ProjectInfo>>() {}\n+);\n     }\n \n     /**\n@@ -117,10 +116,9 @@ public class SentryApiClient {\n      * @param project the project for which a list of public DSN is requested\n      * @return the {@link Result} object with a list of public DSN\n      */\n+\n     public Result<List<KeyInfo>, ErrorInfo> getPublicDsn(String organization, String project) {\n-        return pagedRequest(\n-                new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n-                new TypeReference<List<KeyInfo>>() {} );\n+        return pagedRequest(new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)), new TypeReference<List<KeyInfo>>() {});\n     }\n \n     /**\n@@ -129,10 +127,12 @@ public class SentryApiClient {\n      * @param organization the organization\n      * @return the {@link Result} object with a list of teams\n      */\n+\n     public Result<List<TeamInfo>, ErrorInfo> getTeams(String organization) {\n         return pagedRequest(\n-                new HttpGet(String.format(GET_TEAMS_URL, organization)),\n-                new TypeReference<List<TeamInfo>>() {} );\n+            new HttpGet(String.format(GET_TEAMS_URL, organization)),\n+            new TypeReference<List<TeamInfo>>() {}\n+);\n     }\n \n     /**\n@@ -141,6 +141,7 @@ public class SentryApiClient {\n      * @param organization the name of an organization\n      * @return the {@link Result} object with created organization or error\n      */\n+\n     public Result<OrganizationInfo, ErrorInfo> createOrganization(String organization) {\n         Organization organizationModel = new Organization(organization);\n         ObjectMapper objectMapper = new ObjectMapper();\n@@ -148,9 +149,12 @@ public class SentryApiClient {\n         try {\n             body = objectMapper.writeValueAsBytes(organizationModel);\n         } catch (JsonProcessingException e) {\n-            LOGGER.error(String.format(\"Cannot create JSON from model for organization creation: %s\", e.getMessage()));\n+            LOGGER.error(String.format(\"Cannot create JSON from model for organization creation: %s\",\n+                                       e.getMessage()\n+    ));\n             return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n         }\n+\n         HttpPost post = new HttpPost(ORGANIZATIONS_URL);\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new organization '%s' in Sentry\", organization));\n@@ -164,6 +168,7 @@ public class SentryApiClient {\n      * @param team the team name\n      * @return the {@link Result} object with created team or error\n      */\n+\n     public Result<TeamInfo, ErrorInfo> createTeam(String organization, String team) {\n         Team teamModel = new Team(team);\n         ObjectMapper objectMapper = new ObjectMapper();\n@@ -174,6 +179,7 @@ public class SentryApiClient {\n             LOGGER.error(String.format(\"Cannot create JSON from model for team creation: %s\", e.getMessage()));\n             return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n         }\n+\n         HttpPost post = new HttpPost(String.format(CREATE_TEAM_URL, organization));\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new team '%s' in Sentry\", team));\n@@ -188,6 +194,7 @@ public class SentryApiClient {\n      * @param project the project name\n      * @return the {@link Result} object with created project or error\n      */\n+\n     public Result<ProjectInfo, ErrorInfo> createProject(String organization, String team, String project) {\n         Project projectModel = new Project(project);\n         ObjectMapper objectMapper = new ObjectMapper();\n@@ -198,6 +205,7 @@ public class SentryApiClient {\n             LOGGER.error(String.format(\"Cannot create JSON from model for project creation: %s\", e.getMessage()));\n             return Result.error(new ErrorInfo(CANNOT_CREATE_JSON, false));\n         }\n+\n         HttpPost post = new HttpPost(String.format(CREATE_PROJECT_URL, organization, team));\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new project '%s' in Sentry\", project));\n@@ -210,13 +218,16 @@ public class SentryApiClient {\n             if (isErrorResponse(response)) {\n                 String message = null;\n                 if (entity.isPresent()) {\n-                    message = objectMapper.writeValueAsString(entity.get().getContent());\n+                    message = objectMapper.writeValueAsString(entity.get()\n+                    .getContent());\n                 }\n                 return Result.error(new ErrorInfo(CLIENT_API_ERROR, extractStatusCode(response), message));\n             }\n+\n             T value = null;\n             if (entity.isPresent()) {\n-                value = objectMapper.readValue(entity.get().getContent(), typeReference);\n+                value = objectMapper.readValue(entity.get()\n+                .getContent(), typeReference);\n             }\n             return Result.ok(value);\n         } catch (Exception e) {\n@@ -231,23 +242,27 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n                 }\n+\n                 try (CloseableHttpResponse response = httpClient.execute(sentryHost, request)) {\n                     Optional<HttpEntity> entity = Optional.ofNullable(response.getEntity());\n                     if (isErrorResponse(response)) {\n                         String message = null;\n                         if (entity.isPresent()) {\n-                            message = objectMapper.writeValueAsString(entity.get().getContent());\n+                            message = objectMapper.writeValueAsString(entity.get()\n+                            .getContent());\n                         }\n                         return Result.error(new ErrorInfo(CLIENT_API_ERROR, extractStatusCode(response), message));\n                     }\n                     if (entity.isPresent()) {\n-                        resultList.addAll(objectMapper.readValue(entity.get().getContent(), listTypeReference));\n+                        resultList.addAll(objectMapper.readValue(entity.get()\n+                        .getContent(), listTypeReference));\n                     }\n+\n                     nextCursor = getCursorValue(response.getFirstHeader(\"Link\"));\n                 }\n             } while (nextCursor.isPresent());\n@@ -263,14 +278,14 @@ public class SentryApiClient {\n     }\n \n     private static int extractStatusCode(CloseableHttpResponse response) {\n-        return response.getStatusLine().getStatusCode();\n+        return response.getStatusLine()\n+        .getStatusCode();\n     }\n \n     private static Optional<String> getCursorValue(Header linkHeader) {\n         for (HeaderElement element : linkHeader.getElements()) {\n             Map<String, String> params = Arrays.stream(element.getParameters())\n-                    .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n-\n+            .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n             if (!\"next\".equals(params.get(\"rel\"))) {\n                 continue;\n             }\n@@ -281,4 +296,4 @@ public class SentryApiClient {\n         }\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/112/SentryApiClient.java\nindex 64dc3ceb0e2..07789a5b3a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/112/SentryApiClient.java\n@@ -231,7 +231,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/112/SentryApiClient.java\nindex 64dc3ceb0e2..07789a5b3a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/112/SentryApiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/112/SentryApiClient.java\n@@ -231,7 +231,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}