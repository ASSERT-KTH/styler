{
    "project_name": "apache-iotdb",
    "error_id": "48",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.db.query.executor;\n\nimport org.apache.iotdb.db.engine.StorageEngine;\nimport org.apache.iotdb.db.engine.querycontext.QueryDataSource;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/48/RawDataQueryExecutor.java\nindex ac13c1eb1f9..583db3b3565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/48/RawDataQueryExecutor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.executor;\n \n import org.apache.iotdb.db.engine.StorageEngine;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/48/RawDataQueryExecutor.java\nindex ac13c1eb1f9..e871cc60664 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/48/RawDataQueryExecutor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.executor;\n \n import org.apache.iotdb.db.engine.StorageEngine;\n@@ -48,7 +49,9 @@ import java.util.Set;\n \n import static org.apache.iotdb.tsfile.read.query.executor.ExecutorWithTimeGenerator.markFilterdPaths;\n \n-/** IoTDB query executor. */\n+/**\n+ * IoTDB query executor.\n+ */\n public class RawDataQueryExecutor {\n \n   protected RawDataQueryPlan queryPlan;\n@@ -57,7 +60,9 @@ public class RawDataQueryExecutor {\n     this.queryPlan = queryPlan;\n   }\n \n-  /** without filter or with global time filter. */\n+  /**\n+   * without filter or with global time filter.\n+   */\n   public QueryDataSet executeWithoutValueFilter(QueryContext context)\n       throws StorageEngineException, QueryProcessException {\n     QueryDataSet dataSet = needRedirect(context, false);\n@@ -210,7 +215,7 @@ public class RawDataQueryExecutor {\n   /**\n    * Check whether need to redirect query to other node.\n    *\n-   * @param context query context\n+   * @param context        query context\n    * @param hasValueFilter if has value filter, we need to check timegenerator\n    * @return dummyDataSet to avoid more cost, if null, no need\n    */\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "'queryPlan' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'timestampGenerator' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'QueryContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'path' has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "'queryPlan' has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "'queryPlan' has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'context' has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'PartialPath' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "202",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/48/RawDataQueryExecutor.java\nindex ac13c1eb1f9..58e148cc248 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/48/RawDataQueryExecutor.java\n@@ -40,7 +40,6 @@ import org.apache.iotdb.tsfile.read.expression.impl.GlobalTimeExpression;\n import org.apache.iotdb.tsfile.read.filter.basic.Filter;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n import org.apache.iotdb.tsfile.read.query.timegenerator.TimeGenerator;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -49,6 +48,7 @@ import java.util.Set;\n import static org.apache.iotdb.tsfile.read.query.executor.ExecutorWithTimeGenerator.markFilterdPaths;\n \n /** IoTDB query executor. */\n+\n public class RawDataQueryExecutor {\n \n   protected RawDataQueryPlan queryPlan;\n@@ -58,8 +58,8 @@ public class RawDataQueryExecutor {\n   }\n \n   /** without filter or with global time filter. */\n-  public QueryDataSet executeWithoutValueFilter(QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+\n+  public QueryDataSet executeWithoutValueFilter(QueryContext context) throws StorageEngineException, QueryProcessException {\n     QueryDataSet dataSet = needRedirect(context, false);\n     if (dataSet != null) {\n       return dataSet;\n@@ -67,11 +67,11 @@ public class RawDataQueryExecutor {\n     List<ManagedSeriesReader> readersOfSelectedSeries = initManagedSeriesReader(context);\n     try {\n       return new RawQueryDataSetWithoutValueFilter(\n-          context.getQueryId(),\n-          queryPlan.getDeduplicatedPaths(),\n-          queryPlan.getDeduplicatedDataTypes(),\n-          readersOfSelectedSeries,\n-          queryPlan.isAscending());\n+                 context.getQueryId(),\n+                 queryPlan.getDeduplicatedPaths(),\n+                 queryPlan.getDeduplicatedDataTypes(),\n+                 readersOfSelectedSeries,\n+                 queryPlan.isAscending());\n     } catch (InterruptedException e) {\n       Thread.currentThread().interrupt();\n       throw new StorageEngineException(e.getMessage());\n@@ -80,50 +80,42 @@ public class RawDataQueryExecutor {\n     }\n   }\n \n-  public final QueryDataSet executeNonAlign(QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+  public final QueryDataSet executeNonAlign(QueryContext context) throws StorageEngineException, QueryProcessException {\n     QueryDataSet dataSet = needRedirect(context, false);\n     if (dataSet != null) {\n       return dataSet;\n     }\n     List<ManagedSeriesReader> readersOfSelectedSeries = initManagedSeriesReader(context);\n     return new NonAlignEngineDataSet(\n-        context.getQueryId(),\n-        queryPlan.getDeduplicatedPaths(),\n-        queryPlan.getDeduplicatedDataTypes(),\n-        readersOfSelectedSeries);\n+               context.getQueryId(),\n+               queryPlan.getDeduplicatedPaths(),\n+               queryPlan.getDeduplicatedDataTypes(),\n+               readersOfSelectedSeries);\n   }\n \n-  protected List<ManagedSeriesReader> initManagedSeriesReader(QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+  protected List<ManagedSeriesReader> initManagedSeriesReader(QueryContext context) throws StorageEngineException, QueryProcessException {\n     Filter timeFilter = null;\n     if (queryPlan.getExpression() != null) {\n       timeFilter = ((GlobalTimeExpression) queryPlan.getExpression()).getFilter();\n     }\n-\n     List<ManagedSeriesReader> readersOfSelectedSeries = new ArrayList<>();\n-    List<StorageGroupProcessor> list =\n-        StorageEngine.getInstance().mergeLock(queryPlan.getDeduplicatedPaths());\n+    List<StorageGroupProcessor> list = StorageEngine.getInstance().mergeLock(queryPlan.getDeduplicatedPaths());\n     try {\n       for (int i = 0; i < queryPlan.getDeduplicatedPaths().size(); i++) {\n         PartialPath path = queryPlan.getDeduplicatedPaths().get(i);\n         TSDataType dataType = queryPlan.getDeduplicatedDataTypes().get(i);\n-\n-        QueryDataSource queryDataSource =\n-            QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter);\n+        QueryDataSource queryDataSource = QueryResourceManager.getInstance().getQueryDataSource(path, context, timeFilter);\n         timeFilter = queryDataSource.updateFilterUsingTTL(timeFilter);\n-\n-        ManagedSeriesReader reader =\n-            new SeriesRawDataBatchReader(\n-                path,\n-                queryPlan.getAllMeasurementsInDevice(path.getDevice()),\n-                dataType,\n-                context,\n-                queryDataSource,\n-                timeFilter,\n-                null,\n-                null,\n-                queryPlan.isAscending());\n+        ManagedSeriesReader reader = new SeriesRawDataBatchReader(\n+                                         path,\n+                                         queryPlan.getAllMeasurementsInDevice(path.getDevice()),\n+                                         dataType,\n+                                         context,\n+                                         queryDataSource,\n+                                         timeFilter,\n+                                         null,\n+                                         null,\n+                                         queryPlan.isAscending());\n         readersOfSelectedSeries.add(reader);\n       }\n     } finally {\n@@ -138,36 +130,31 @@ public class RawDataQueryExecutor {\n    * @return QueryDataSet object\n    * @throws StorageEngineException StorageEngineException\n    */\n-  public final QueryDataSet executeWithValueFilter(QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+\n+  public final QueryDataSet executeWithValueFilter(QueryContext context) throws StorageEngineException, QueryProcessException {\n     QueryDataSet dataSet = needRedirect(context, true);\n     if (dataSet != null) {\n       return dataSet;\n     }\n-\n     TimeGenerator timestampGenerator = getTimeGenerator(context, queryPlan);\n-    List<Boolean> cached =\n-        markFilterdPaths(\n-            queryPlan.getExpression(),\n-            new ArrayList<>(queryPlan.getDeduplicatedPaths()),\n-            timestampGenerator.hasOrNode());\n-    List<IReaderByTimestamp> readersOfSelectedSeries =\n-        initSeriesReaderByTimestamp(context, queryPlan, cached);\n+    List<Boolean> cached = markFilterdPaths(\n+      queryPlan.getExpression(),\n+      new ArrayList<>(queryPlan.getDeduplicatedPaths()),\n+      timestampGenerator.hasOrNode());\n+    List<IReaderByTimestamp> readersOfSelectedSeries = initSeriesReaderByTimestamp(context, queryPlan, cached);\n     return new RawQueryDataSetWithValueFilter(\n-        queryPlan.getDeduplicatedPaths(),\n-        queryPlan.getDeduplicatedDataTypes(),\n-        timestampGenerator,\n-        readersOfSelectedSeries,\n-        cached,\n-        queryPlan.isAscending());\n+               queryPlan.getDeduplicatedPaths(),\n+               queryPlan.getDeduplicatedDataTypes(),\n+               timestampGenerator,\n+               readersOfSelectedSeries,\n+               cached,\n+               queryPlan.isAscending());\n   }\n \n   protected List<IReaderByTimestamp> initSeriesReaderByTimestamp(\n-      QueryContext context, RawDataQueryPlan queryPlan, List<Boolean> cached)\n-      throws QueryProcessException, StorageEngineException {\n+    QueryContext context, RawDataQueryPlan queryPlan, List<Boolean> cached) throws QueryProcessException, StorageEngineException {\n     List<IReaderByTimestamp> readersOfSelectedSeries = new ArrayList<>();\n-    List<StorageGroupProcessor> list =\n-        StorageEngine.getInstance().mergeLock(queryPlan.getDeduplicatedPaths());\n+    List<StorageGroupProcessor> list = StorageEngine.getInstance().mergeLock(queryPlan.getDeduplicatedPaths());\n     try {\n       for (int i = 0; i < queryPlan.getDeduplicatedPaths().size(); i++) {\n         if (cached.get(i)) {\n@@ -175,12 +162,11 @@ public class RawDataQueryExecutor {\n           continue;\n         }\n         PartialPath path = queryPlan.getDeduplicatedPaths().get(i);\n-        IReaderByTimestamp seriesReaderByTimestamp =\n-            getReaderByTimestamp(\n-                path,\n-                queryPlan.getAllMeasurementsInDevice(path.getDevice()),\n-                queryPlan.getDeduplicatedDataTypes().get(i),\n-                context);\n+        IReaderByTimestamp seriesReaderByTimestamp = getReaderByTimestamp(\n+          path,\n+          queryPlan.getAllMeasurementsInDevice(path.getDevice()),\n+          queryPlan.getDeduplicatedDataTypes().get(i),\n+          context);\n         readersOfSelectedSeries.add(seriesReaderByTimestamp);\n       }\n     } finally {\n@@ -190,20 +176,18 @@ public class RawDataQueryExecutor {\n   }\n \n   protected IReaderByTimestamp getReaderByTimestamp(\n-      PartialPath path, Set<String> allSensors, TSDataType dataType, QueryContext context)\n-      throws StorageEngineException, QueryProcessException {\n+    PartialPath path, Set<String> allSensors, TSDataType dataType, QueryContext context) throws StorageEngineException, QueryProcessException {\n     return new SeriesReaderByTimestamp(\n-        path,\n-        allSensors,\n-        dataType,\n-        context,\n-        QueryResourceManager.getInstance().getQueryDataSource(path, context, null),\n-        null,\n-        queryPlan.isAscending());\n+               path,\n+               allSensors,\n+               dataType,\n+               context,\n+               QueryResourceManager.getInstance().getQueryDataSource(path, context, null),\n+               null,\n+               queryPlan.isAscending());\n   }\n \n-  protected TimeGenerator getTimeGenerator(QueryContext context, RawDataQueryPlan queryPlan)\n-      throws StorageEngineException {\n+  protected TimeGenerator getTimeGenerator(QueryContext context, RawDataQueryPlan queryPlan) throws StorageEngineException {\n     return new ServerTimeGenerator(context, queryPlan);\n   }\n \n@@ -214,8 +198,8 @@ public class RawDataQueryExecutor {\n    * @param hasValueFilter if has value filter, we need to check timegenerator\n    * @return dummyDataSet to avoid more cost, if null, no need\n    */\n-  protected QueryDataSet needRedirect(QueryContext context, boolean hasValueFilter)\n-      throws StorageEngineException, QueryProcessException {\n+\n+  protected QueryDataSet needRedirect(QueryContext context, boolean hasValueFilter) throws StorageEngineException, QueryProcessException {\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/48/RawDataQueryExecutor.java\nindex ac13c1eb1f9..583db3b3565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/48/RawDataQueryExecutor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.executor;\n \n import org.apache.iotdb.db.engine.StorageEngine;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/48/RawDataQueryExecutor.java\nindex ac13c1eb1f9..583db3b3565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/48/RawDataQueryExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/48/RawDataQueryExecutor.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.executor;\n \n import org.apache.iotdb.db.engine.StorageEngine;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}