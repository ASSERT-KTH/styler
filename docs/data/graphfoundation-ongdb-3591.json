{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3591",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "144",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3591/TokenAccess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3591/TokenAccess.java\nindex 9a820b3cd27..2ae8a1f3b7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3591/TokenAccess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3591/TokenAccess.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.Iterator;\n@@ -37,172 +38,170 @@ import static org.neo4j.kernel.api.StatementConstants.ANY_LABEL;\n \n public abstract class TokenAccess<R>\n {\n-    public static final TokenAccess<RelationshipType> RELATIONSHIP_TYPES = new TokenAccess<RelationshipType>()\n+  public static final TokenAccess<RelationshipType> RELATIONSHIP_TYPES = new TokenAccess<RelationshipType>()\n+  {\n+    @Override\n+    Iterator<NamedToken> tokens(TokenRead read)\n     {\n-        @Override\n-        Iterator<NamedToken> tokens( TokenRead read )\n-        {\n-            return read.relationshipTypesGetAllTokens();\n-        }\n-\n-        @Override\n-        RelationshipType token( NamedToken token )\n-        {\n-            return RelationshipType.withName( token.name() );\n-        }\n+      return read.relationshipTypesGetAllTokens();\n+    }\n \n-        @Override\n-        boolean inUse( KernelTransaction transaction, int tokenId )\n-        {\n-            return hasAny( transaction.schemaRead().constraintsGetForRelationshipType( tokenId ) ) ||   // used by constraint\n-                   transaction.dataRead().countsForRelationship( ANY_LABEL, tokenId, ANY_LABEL ) > 0; // used by data\n-        }\n-    };\n-    public static final TokenAccess<Label> LABELS = new TokenAccess<Label>()\n+    @Override\n+    RelationshipType token(NamedToken token)\n     {\n-        @Override\n-        Iterator<NamedToken> tokens( TokenRead read )\n-        {\n-            return read.labelsGetAllTokens();\n-        }\n-\n-        @Override\n-        Label token( NamedToken token )\n-        {\n-            return label( token.name() );\n-        }\n+      return RelationshipType.withName(token.name());\n+    }\n \n-        @Override\n-        boolean inUse( KernelTransaction transaction, int tokenId )\n-        {\n+    @Override\n+    boolean inUse(KernelTransaction transaction, int tokenId)\n+    {\n+      return hasAny(transaction.schemaRead().constraintsGetForRelationshipType(tokenId)) ||   // used by constraint\n+          transaction.dataRead().countsForRelationship(ANY_LABEL, tokenId, ANY_LABEL) > 0; // used by data\n+    }\n+  };\n+  public static final TokenAccess<Label> LABELS = new TokenAccess<Label>()\n+  {\n+    @Override\n+    Iterator<NamedToken> tokens(TokenRead read)\n+    {\n+      return read.labelsGetAllTokens();\n+    }\n \n-            SchemaRead schemaRead = transaction.schemaRead();\n-            return hasAny( schemaRead.indexesGetForLabel( tokenId ) ) ||     // used by index\n-                   hasAny( schemaRead.constraintsGetForLabel( tokenId ) ) || // used by constraint\n-                   transaction.dataRead().countsForNode( tokenId ) > 0;                  // used by data\n-        }\n-    };\n+    @Override\n+    Label token(NamedToken token)\n+    {\n+      return label(token.name());\n+    }\n \n-    public static final TokenAccess<String> PROPERTY_KEYS = new TokenAccess<String>()\n+    @Override\n+    boolean inUse(KernelTransaction transaction, int tokenId)\n     {\n-        @Override\n-        Iterator<NamedToken> tokens( TokenRead read )\n-        {\n-            return read.propertyKeyGetAllTokens();\n-        }\n \n-        @Override\n-        String token( NamedToken token )\n-        {\n-            return token.name();\n-        }\n+      SchemaRead schemaRead = transaction.schemaRead();\n+      return hasAny(schemaRead.indexesGetForLabel(tokenId)) ||     // used by index\n+          hasAny(schemaRead.constraintsGetForLabel(tokenId)) || // used by constraint\n+          transaction.dataRead().countsForNode(tokenId) > 0;                  // used by data\n+    }\n+  };\n \n-        @Override\n-        boolean inUse( KernelTransaction transaction, int tokenId )\n-        {\n-            return true; // TODO: add support for telling if a property key is in use or not\n-        }\n-    };\n+  public static final TokenAccess<String> PROPERTY_KEYS = new TokenAccess<String>()\n+  {\n+    @Override\n+    Iterator<NamedToken> tokens(TokenRead read)\n+    {\n+      return read.propertyKeyGetAllTokens();\n+    }\n \n-    public final ResourceIterator<R> inUse( KernelTransaction transaction )\n+    @Override\n+    String token(NamedToken token)\n     {\n-        return TokenIterator.inUse( transaction, this );\n+      return token.name();\n     }\n \n-    public final ResourceIterator<R> all( KernelTransaction transaction )\n+    @Override\n+    boolean inUse(KernelTransaction transaction, int tokenId)\n     {\n-        return TokenIterator.all( transaction, this );\n+      return true; // TODO: add support for telling if a property key is in use or not\n     }\n+  };\n+\n+  public final ResourceIterator<R> inUse(KernelTransaction transaction)\n+  {\n+    return TokenIterator.inUse(transaction, this);\n+  }\n+\n+  public final ResourceIterator<R> all(KernelTransaction transaction)\n+  {\n+    return TokenIterator.all(transaction, this);\n+  }\n \n-    private static boolean hasAny( Iterator<?> iter )\n+  private static boolean hasAny(Iterator<?> iter)\n+  {\n+    if (iter.hasNext())\n     {\n-        if ( iter.hasNext() )\n-        {\n-            return true;\n-        }\n-        if ( iter instanceof Resource )\n-        {\n-            ((Resource) iter).close();\n-        }\n-        return false;\n+      return true;\n     }\n+    if (iter instanceof Resource)\n+    {\n+      ((Resource) iter).close();\n+    }\n+    return false;\n+  }\n \n-    private abstract static class TokenIterator<T> extends PrefetchingResourceIterator<T>\n+  private abstract static class TokenIterator<T> extends PrefetchingResourceIterator<T>\n+  {\n+    private Statement statement;\n+    protected final TokenAccess<T> access;\n+    protected final Iterator<NamedToken> tokens;\n+\n+    private TokenIterator(KernelTransaction transaction, TokenAccess<T> access)\n     {\n-        private Statement statement;\n-        protected final TokenAccess<T> access;\n-        protected final Iterator<NamedToken> tokens;\n+      this.access = access;\n+      this.statement = transaction.acquireStatement();\n+      try\n+      {\n+        this.tokens = access.tokens(transaction.tokenRead());\n+      } catch (Exception e)\n+      {\n+        close();\n+        throw e;\n+      }\n+    }\n \n-        private TokenIterator( KernelTransaction transaction, TokenAccess<T> access )\n-        {\n-            this.access = access;\n-            this.statement = transaction.acquireStatement();\n-            try\n-            {\n-                this.tokens = access.tokens( transaction.tokenRead() );\n-            }\n-            catch ( Exception e )\n-            {\n-                close();\n-                throw e;\n-            }\n-        }\n+    @Override\n+    public void close()\n+    {\n+      if (statement != null)\n+      {\n+        statement.close();\n+        statement = null;\n+      }\n+    }\n \n+    static <T> ResourceIterator<T> inUse(KernelTransaction transaction, TokenAccess<T> access)\n+    {\n+      return new TokenIterator<T>(transaction, access)\n+      {\n         @Override\n-        public void close()\n+        protected T fetchNextOrNull()\n         {\n-            if ( statement != null )\n+          while (tokens.hasNext())\n+          {\n+            NamedToken token = tokens.next();\n+            if (this.access.inUse(transaction, token.id()))\n             {\n-                statement.close();\n-                statement = null;\n+              return this.access.token(token);\n             }\n+          }\n+          close();\n+          return null;\n         }\n+      };\n+    }\n \n-        static <T> ResourceIterator<T> inUse( KernelTransaction transaction, TokenAccess<T> access )\n-        {\n-            return new TokenIterator<T>( transaction, access )\n-            {\n-                @Override\n-                protected T fetchNextOrNull()\n-                {\n-                    while ( tokens.hasNext() )\n-                    {\n-                        NamedToken token = tokens.next();\n-                        if ( this.access.inUse( transaction, token.id() ) )\n-                        {\n-                            return this.access.token( token );\n-                        }\n-                    }\n-                    close();\n-                    return null;\n-                }\n-            };\n-        }\n-\n-        static <T> ResourceIterator<T> all( KernelTransaction transaction, TokenAccess<T> access )\n+    static <T> ResourceIterator<T> all(KernelTransaction transaction, TokenAccess<T> access)\n+    {\n+      return new TokenIterator<T>(transaction, access)\n+      {\n+        @Override\n+        protected T fetchNextOrNull()\n         {\n-            return new TokenIterator<T>( transaction, access )\n-            {\n-                @Override\n-                protected T fetchNextOrNull()\n-                {\n-                    if ( tokens.hasNext() )\n-                    {\n-                        return access.token( tokens.next() );\n-                    }\n-                    else\n-                    {\n-                        close();\n-                        return null;\n-                    }\n-                }\n-            };\n+          if (tokens.hasNext())\n+          {\n+            return access.token(tokens.next());\n+          } else\n+          {\n+            close();\n+            return null;\n+          }\n         }\n+      };\n     }\n+  }\n \n-    abstract Iterator<NamedToken> tokens( TokenRead tokenRead );\n+  abstract Iterator<NamedToken> tokens(TokenRead tokenRead);\n \n-    abstract R token( NamedToken token );\n+  abstract R token(NamedToken token);\n \n-    abstract boolean inUse( KernelTransaction transaction, int tokenId );\n+  abstract boolean inUse(KernelTransaction transaction, int tokenId);\n }\n",
            "diff_size": 201
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}