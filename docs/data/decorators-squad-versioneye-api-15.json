{
    "project_name": "decorators-squad-versioneye-api",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "72",
                "column": "12",
                "severity": "error",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            .getJsonArray(\"comments\");\n        final List<Comment> comments = new ArrayList<>();\n        for(int idx=0; idx<array.size(); idx++) {\n            comments.add(\n                new RtComment(array.getJsonObject(idx))\n            );",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/styler/15/RtComments.java\nindex 3cac5683fec..285952ee92d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/styler/15/RtComments.java\n@@ -69,7 +69,7 @@ final class RtComments implements Comments {\n             .readObject()\n             .getJsonArray(\"comments\");\n         final List<Comment> comments = new ArrayList<>();\n-        for(int idx=0; idx<array.size(); idx++) {\n+        for (int idx=0; idx<array.size(); idx++) {\n             comments.add(\n                 new RtComment(array.getJsonObject(idx))\n             );\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/intellij/15/RtComments.java\nindex 3cac5683fec..a0109fd9a4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/intellij/15/RtComments.java\n@@ -1,17 +1,17 @@\n /**\n  * Copyright (c) 2017, Mihai Emil Andronache\n  * All rights reserved.\n- *\n+ * <p>\n  * Redistribution and use in source and binary forms, with or without\n- *  modification, are permitted provided that the following conditions are met:\n+ * modification, are permitted provided that the following conditions are met:\n  * Redistributions of source code must retain the above copyright notice, this\n- *  list of conditions and the following disclaimer.\n- *  Redistributions in binary form must reproduce the above copyright notice,\n- *  this list of conditions and the following disclaimer in the documentation\n- *  and/or other materials provided with the distribution.\n+ * list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n  * Neither the name of the copyright holder nor the names of its\n- *  contributors may be used to endorse or promote products derived from\n- *  this software without specific prior written permission.\n+ * contributors may be used to endorse or promote products derived from\n+ * this software without specific prior written permission.\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n@@ -25,6 +25,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n package com.amihaiemil.versioneye;\n \n import java.io.IOException;\n@@ -44,12 +45,12 @@ import com.jcabi.http.response.RestResponse;\n  *\n  */\n final class RtComments implements Comments {\n-    \n+\n     /**\n      * HTTP request.\n      */\n     private Request req;\n-    \n+\n     /**\n      * Ctor.\n      * @param entry HTTP Request.\n@@ -57,7 +58,7 @@ final class RtComments implements Comments {\n     RtComments(final Request entry) {\n         this.req = entry.uri().path(\"/comments\").back();\n     }\n-    \n+\n     @Override\n     public List<Comment> fetch(final int page) throws IOException {\n         final JsonArray array = this.req.uri()\n@@ -69,7 +70,7 @@ final class RtComments implements Comments {\n             .readObject()\n             .getJsonArray(\"comments\");\n         final List<Comment> comments = new ArrayList<>();\n-        for(int idx=0; idx<array.size(); idx++) {\n+        for (int idx = 0; idx < array.size(); idx++) {\n             comments.add(\n                 new RtComment(array.getJsonObject(idx))\n             );\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 0, indentation should be the same level as line 51.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/naturalize/15/RtComments.java\nindex 3cac5683fec..5b70ebdd7af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/naturalize/15/RtComments.java\n@@ -48,7 +48,7 @@ final class RtComments implements Comments {\n     /**\n      * HTTP request.\n      */\n-    private Request req;\n+private Request req;\n     \n     /**\n      * Ctor.\n@@ -70,24 +70,21 @@ final class RtComments implements Comments {\n             .getJsonArray(\"comments\");\n         final List<Comment> comments = new ArrayList<>();\n         for(int idx=0; idx<array.size(); idx++) {\n-            comments.add(\n-                new RtComment(array.getJsonObject(idx))\n-            );\n+            comments.add(new RtComment(array.getJsonObject(idx)));\n         }\n         return comments;\n     }\n \n     @Override\n     public Paging paging(final int page) throws IOException {\n-        return new JsonPaging(\n-            this.req.uri()\n+        return new JsonPaging(this.req.uri()\n                 .queryParam(\"page\", String.valueOf(page)).back().fetch()\n                 .as(RestResponse.class)\n                 .assertStatus(HttpURLConnection.HTTP_OK)\n                 .as(JsonResponse.class)\n                 .json()\n                 .readObject()\n-                .getJsonObject(\"paging\")\n-        );\n+                .getJsonObject(\"paging\"));\n     }\n-}\n+\n+    }\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "69",
                    "column": "16",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "69",
                    "column": "18",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "'int' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "'this' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "column": "11",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "82",
                    "column": "13",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "column": "14",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'for' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "column": "4",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "'0' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "column": "2",
                    "severity": "error",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "'int' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/codebuff/15/RtComments.java\nindex 3cac5683fec..a71d10d9c5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/codebuff/15/RtComments.java\n@@ -43,51 +43,71 @@ import com.jcabi.http.response.RestResponse;\n  * @since 1.0.0\n  *\n  */\n+\n+\n final class RtComments implements Comments {\n     \n     /**\n      * HTTP request.\n      */\n+\n+\n     private Request req;\n     \n     /**\n      * Ctor.\n      * @param entry HTTP Request.\n      */\n+\n+\n     RtComments(final Request entry) {\n-        this.req = entry.uri().path(\"/comments\").back();\n+        this.req = entry.uri().path(\"/comments\")\n+.back();\n     }\n-    \n+\n     @Override\n-    public List<Comment> fetch(final int page) throws IOException {\n-        final JsonArray array = this.req.uri()\n-            .queryParam(\"page\", String.valueOf(page)).back().fetch()\n-            .as(RestResponse.class)\n-            .assertStatus(HttpURLConnection.HTTP_OK)\n-            .as(JsonResponse.class)\n-            .json()\n-            .readObject()\n-            .getJsonArray(\"comments\");\n-        final List<Comment> comments = new ArrayList<>();\n-        for(int idx=0; idx<array.size(); idx++) {\n-            comments.add(\n-                new RtComment(array.getJsonObject(idx))\n-            );\n-        }\n-        return comments;\n+    public List < Comment> fetch(final\n+int page) throws IOException {\n+        final JsonArray array=\n+this.req.uri()\n+.queryParam(\"page\", String.valueOf(page))\n+.back()\n+.fetch()\n+.as(RestResponse.class)\n+.assertStatus(HttpURLConnection.HTTP_OK)\n+.as(JsonResponse.class)\n+.json()\n+.readObject()\n+.getJsonArray(\"comments\");\n+final List < Comment> comments=\n+new ArrayList <>();\n+\n+\n+for(int idx=\n+0 ;\n+\n+\n+idx< array.size();\n+\n+\n+                idx++) {\n+comments.add(new RtComment(array.getJsonObject(idx)));\n+} return comments;\n     }\n \n     @Override\n-    public Paging paging(final int page) throws IOException {\n-        return new JsonPaging(\n-            this.req.uri()\n-                .queryParam(\"page\", String.valueOf(page)).back().fetch()\n-                .as(RestResponse.class)\n-                .assertStatus(HttpURLConnection.HTTP_OK)\n-                .as(JsonResponse.class)\n-                .json()\n-                .readObject()\n-                .getJsonObject(\"paging\")\n-        );\n+    public Paging paging(final\n+int page) throws IOException {\n+        return new JsonPaging(this.req.uri()\n+.queryParam(\"page\", String.valueOf(page))\n+.back()\n+.fetch()\n+.as(RestResponse.class)\n+.assertStatus(HttpURLConnection.HTTP_OK)\n+.as(JsonResponse.class)\n+.json()\n+.readObject()\n+.getJsonObject(\"paging\"));\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/styler_random/15/RtComments.java\nindex 3cac5683fec..285952ee92d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/errored/1/15/RtComments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-versioneye-api/styler_random/15/RtComments.java\n@@ -69,7 +69,7 @@ final class RtComments implements Comments {\n             .readObject()\n             .getJsonArray(\"comments\");\n         final List<Comment> comments = new ArrayList<>();\n-        for(int idx=0; idx<array.size(); idx++) {\n+        for (int idx=0; idx<array.size(); idx++) {\n             comments.add(\n                 new RtComment(array.getJsonObject(idx))\n             );\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}