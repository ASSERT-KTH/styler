{
    "project_name": "graphfoundation-ongdb",
    "error_id": "329",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/329/CsvInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/329/CsvInput.java\nindex afd643e4005..fa8051997d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/329/CsvInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/329/CsvInput.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.input.csv;\n \n import java.io.IOException;\n@@ -55,209 +56,208 @@ import static org.neo4j.unsafe.impl.batchimport.input.csv.CsvInputIterator.extra\n  */\n public class CsvInput implements Input\n {\n-    private static final long ESTIMATE_SAMPLE_SIZE = mebiBytes( 1 );\n+  private static final long ESTIMATE_SAMPLE_SIZE = mebiBytes(1);\n \n-    private final Iterable<DataFactory> nodeDataFactory;\n-    private final Header.Factory nodeHeaderFactory;\n-    private final Iterable<DataFactory> relationshipDataFactory;\n-    private final Header.Factory relationshipHeaderFactory;\n-    private final IdType idType;\n-    private final Configuration config;\n-    private final Collector badCollector;\n-    private final Groups groups;\n+  private final Iterable<DataFactory> nodeDataFactory;\n+  private final Header.Factory nodeHeaderFactory;\n+  private final Iterable<DataFactory> relationshipDataFactory;\n+  private final Header.Factory relationshipHeaderFactory;\n+  private final IdType idType;\n+  private final Configuration config;\n+  private final Collector badCollector;\n+  private final Groups groups;\n \n-    /**\n-     * @param nodeDataFactory multiple {@link DataFactory} instances providing data, each {@link DataFactory}\n-     * specifies an input group with its own header, extracted by the {@code nodeHeaderFactory}. From the outside\n-     * it looks like one stream of nodes.\n-     * @param nodeHeaderFactory factory for reading node headers.\n-     * @param relationshipDataFactory multiple {@link DataFactory} instances providing data, each {@link DataFactory}\n-     * specifies an input group with its own header, extracted by the {@code relationshipHeaderFactory}.\n-     * From the outside it looks like one stream of relationships.\n-     * @param relationshipHeaderFactory factory for reading relationship headers.\n-     * @param idType {@link IdType} to expect in id fields of node and relationship input.\n-     * @param config CSV configuration.\n-     * @param badCollector Collector getting calls about bad input data.\n-     */\n-    public CsvInput(\n-            Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory,\n-            Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n-            IdType idType, Configuration config, Collector badCollector )\n-    {\n-        this( nodeDataFactory, nodeHeaderFactory, relationshipDataFactory, relationshipHeaderFactory, idType, config, badCollector,\n-                new Groups() );\n-    }\n+  /**\n+   * @param nodeDataFactory           multiple {@link DataFactory} instances providing data, each {@link DataFactory}\n+   *                                  specifies an input group with its own header, extracted by the {@code nodeHeaderFactory}. From the outside\n+   *                                  it looks like one stream of nodes.\n+   * @param nodeHeaderFactory         factory for reading node headers.\n+   * @param relationshipDataFactory   multiple {@link DataFactory} instances providing data, each {@link DataFactory}\n+   *                                  specifies an input group with its own header, extracted by the {@code relationshipHeaderFactory}.\n+   *                                  From the outside it looks like one stream of relationships.\n+   * @param relationshipHeaderFactory factory for reading relationship headers.\n+   * @param idType                    {@link IdType} to expect in id fields of node and relationship input.\n+   * @param config                    CSV configuration.\n+   * @param badCollector              Collector getting calls about bad input data.\n+   */\n+  public CsvInput(\n+      Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory,\n+      Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n+      IdType idType, Configuration config, Collector badCollector)\n+  {\n+    this(nodeDataFactory, nodeHeaderFactory, relationshipDataFactory, relationshipHeaderFactory, idType, config, badCollector,\n+        new Groups());\n+  }\n \n-    CsvInput(\n-            Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory,\n-            Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n-            IdType idType, Configuration config, Collector badCollector, Groups groups )\n-    {\n-        assertSaneConfiguration( config );\n+  CsvInput(\n+      Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory,\n+      Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n+      IdType idType, Configuration config, Collector badCollector, Groups groups)\n+  {\n+    assertSaneConfiguration(config);\n \n-        this.nodeDataFactory = nodeDataFactory;\n-        this.nodeHeaderFactory = nodeHeaderFactory;\n-        this.relationshipDataFactory = relationshipDataFactory;\n-        this.relationshipHeaderFactory = relationshipHeaderFactory;\n-        this.idType = idType;\n-        this.config = config;\n-        this.badCollector = badCollector;\n-        this.groups = groups;\n+    this.nodeDataFactory = nodeDataFactory;\n+    this.nodeHeaderFactory = nodeHeaderFactory;\n+    this.relationshipDataFactory = relationshipDataFactory;\n+    this.relationshipHeaderFactory = relationshipHeaderFactory;\n+    this.idType = idType;\n+    this.config = config;\n+    this.badCollector = badCollector;\n+    this.groups = groups;\n \n-        verifyHeaders();\n-    }\n+    verifyHeaders();\n+  }\n \n-    /**\n-     * Verifies so that all headers in input files looks sane:\n-     * <ul>\n-     * <li>node/relationship headers can be parsed correctly</li>\n-     * <li>relationship headers uses ID spaces previously defined in node headers</li>\n-     * </ul>\n-     */\n-    private void verifyHeaders()\n+  /**\n+   * Verifies so that all headers in input files looks sane:\n+   * <ul>\n+   * <li>node/relationship headers can be parsed correctly</li>\n+   * <li>relationship headers uses ID spaces previously defined in node headers</li>\n+   * </ul>\n+   */\n+  private void verifyHeaders()\n+  {\n+    try\n     {\n-        try\n+      // parse all node headers and remember all ID spaces\n+      for (DataFactory dataFactory : nodeDataFactory)\n+      {\n+        try (CharSeeker dataStream = charSeeker(new MultiReadable(dataFactory.create(config).stream()), config, true))\n         {\n-            // parse all node headers and remember all ID spaces\n-            for ( DataFactory dataFactory : nodeDataFactory )\n-            {\n-                try ( CharSeeker dataStream = charSeeker( new MultiReadable( dataFactory.create( config ).stream() ), config, true ) )\n-                {\n-                    // Parsing and constructing this header will create this group,\n-                    // so no need to do something with the result of it right now\n-                    nodeHeaderFactory.create( dataStream, config, idType, groups );\n-                }\n-            }\n-\n-            // parse all relationship headers and verify all ID spaces\n-            for ( DataFactory dataFactory : relationshipDataFactory )\n-            {\n-                try ( CharSeeker dataStream = charSeeker( new MultiReadable( dataFactory.create( config ).stream() ), config, true ) )\n-                {\n-                    // Merely parsing and constructing the header here will as a side-effect verify that the\n-                    // id groups already exists (relationship header isn't allowed to create groups)\n-                    relationshipHeaderFactory.create( dataStream, config, idType, groups );\n-                }\n-            }\n+          // Parsing and constructing this header will create this group,\n+          // so no need to do something with the result of it right now\n+          nodeHeaderFactory.create(dataStream, config, idType, groups);\n         }\n-        catch ( IOException e )\n+      }\n+\n+      // parse all relationship headers and verify all ID spaces\n+      for (DataFactory dataFactory : relationshipDataFactory)\n+      {\n+        try (CharSeeker dataStream = charSeeker(new MultiReadable(dataFactory.create(config).stream()), config, true))\n         {\n-            throw new UncheckedIOException( e );\n+          // Merely parsing and constructing the header here will as a side-effect verify that the\n+          // id groups already exists (relationship header isn't allowed to create groups)\n+          relationshipHeaderFactory.create(dataStream, config, idType, groups);\n         }\n-    }\n-\n-    private static void assertSaneConfiguration( Configuration config )\n+      }\n+    } catch (IOException e)\n     {\n-        Map<Character,String> delimiters = new HashMap<>();\n-        delimiters.put( config.delimiter(), \"delimiter\" );\n-        checkUniqueCharacter( delimiters, config.arrayDelimiter(), \"array delimiter\" );\n-        checkUniqueCharacter( delimiters, config.quotationCharacter(), \"quotation character\" );\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    private static void checkUniqueCharacter( Map<Character,String> characters, char character, String characterDescription )\n-    {\n-        String conflict = characters.put( character, characterDescription );\n-        if ( conflict != null )\n-        {\n-            throw new IllegalArgumentException( \"Character '\" + character + \"' specified by \" + characterDescription +\n-                    \" is the same as specified by \" + conflict );\n-        }\n-    }\n+  private static void assertSaneConfiguration(Configuration config)\n+  {\n+    Map<Character, String> delimiters = new HashMap<>();\n+    delimiters.put(config.delimiter(), \"delimiter\");\n+    checkUniqueCharacter(delimiters, config.arrayDelimiter(), \"array delimiter\");\n+    checkUniqueCharacter(delimiters, config.quotationCharacter(), \"quotation character\");\n+  }\n \n-    @Override\n-    public InputIterable nodes()\n+  private static void checkUniqueCharacter(Map<Character, String> characters, char character, String characterDescription)\n+  {\n+    String conflict = characters.put(character, characterDescription);\n+    if (conflict != null)\n     {\n-        return replayable( () -> stream( nodeDataFactory, nodeHeaderFactory ) );\n+      throw new IllegalArgumentException(\"Character '\" + character + \"' specified by \" + characterDescription +\n+          \" is the same as specified by \" + conflict);\n     }\n+  }\n \n-    @Override\n-    public InputIterable relationships()\n-    {\n-        return replayable( () -> stream( relationshipDataFactory, relationshipHeaderFactory ) );\n-    }\n+  @Override\n+  public InputIterable nodes()\n+  {\n+    return replayable(() -> stream(nodeDataFactory, nodeHeaderFactory));\n+  }\n \n-    private InputIterator stream( Iterable<DataFactory> data, Header.Factory headerFactory )\n-    {\n-        return new CsvGroupInputIterator( data.iterator(), headerFactory, idType, config, badCollector, groups );\n-    }\n+  @Override\n+  public InputIterable relationships()\n+  {\n+    return replayable(() -> stream(relationshipDataFactory, relationshipHeaderFactory));\n+  }\n \n-    @Override\n-    public IdMapper idMapper( NumberArrayFactory numberArrayFactory )\n-    {\n-        return idType.idMapper( numberArrayFactory, groups );\n-    }\n+  private InputIterator stream(Iterable<DataFactory> data, Header.Factory headerFactory)\n+  {\n+    return new CsvGroupInputIterator(data.iterator(), headerFactory, idType, config, badCollector, groups);\n+  }\n \n-    @Override\n-    public Collector badCollector()\n-    {\n-        return badCollector;\n-    }\n+  @Override\n+  public IdMapper idMapper(NumberArrayFactory numberArrayFactory)\n+  {\n+    return idType.idMapper(numberArrayFactory, groups);\n+  }\n \n-    @Override\n-    public Estimates calculateEstimates( ToIntFunction<Value[]> valueSizeCalculator ) throws IOException\n-    {\n-        long[] nodeSample = sample( nodeDataFactory, nodeHeaderFactory, valueSizeCalculator, node -> node.labels().length );\n-        long[] relationshipSample = sample( relationshipDataFactory, relationshipHeaderFactory, valueSizeCalculator, entity -> 0 );\n-        return knownEstimates(\n-                nodeSample[0], relationshipSample[0],\n-                nodeSample[1], relationshipSample[1],\n-                nodeSample[2], relationshipSample[2],\n-                nodeSample[3] );\n-    }\n+  @Override\n+  public Collector badCollector()\n+  {\n+    return badCollector;\n+  }\n+\n+  @Override\n+  public Estimates calculateEstimates(ToIntFunction<Value[]> valueSizeCalculator) throws IOException\n+  {\n+    long[] nodeSample = sample(nodeDataFactory, nodeHeaderFactory, valueSizeCalculator, node -> node.labels().length);\n+    long[] relationshipSample = sample(relationshipDataFactory, relationshipHeaderFactory, valueSizeCalculator, entity -> 0);\n+    return knownEstimates(\n+        nodeSample[0], relationshipSample[0],\n+        nodeSample[1], relationshipSample[1],\n+        nodeSample[2], relationshipSample[2],\n+        nodeSample[3]);\n+  }\n \n-    private long[] sample( Iterable<DataFactory> dataFactories, Header.Factory headerFactory,\n-            ToIntFunction<Value[]> valueSizeCalculator, ToIntFunction<InputEntity> additionalCalculator ) throws IOException\n+  private long[] sample(Iterable<DataFactory> dataFactories, Header.Factory headerFactory,\n+                        ToIntFunction<Value[]> valueSizeCalculator, ToIntFunction<InputEntity> additionalCalculator) throws IOException\n+  {\n+    long[] estimates = new long[4]; // [entity count, property count, property size, labels (for nodes only)]\n+    try (CsvInputChunkProxy chunk = new CsvInputChunkProxy())\n     {\n-        long[] estimates = new long[4]; // [entity count, property count, property size, labels (for nodes only)]\n-        try ( CsvInputChunkProxy chunk = new CsvInputChunkProxy() )\n+      // One group of input files\n+      int groupId = 0;\n+      for (DataFactory dataFactory : dataFactories) // one input group\n+      {\n+        groupId++;\n+        Header header = null;\n+        Data data = dataFactory.create(config);\n+        RawIterator<CharReadable, IOException> sources = data.stream();\n+        while (sources.hasNext())\n         {\n-            // One group of input files\n-            int groupId = 0;\n-            for ( DataFactory dataFactory : dataFactories ) // one input group\n+          try (CharReadable source = sources.next())\n+          {\n+            if (header == null)\n+            {\n+              // Extract the header from the first file in this group\n+              header = extractHeader(source, headerFactory, idType, config, groups);\n+            }\n+            try (CsvInputIterator iterator = new CsvInputIterator(source, data.decorator(), header, config,\n+                idType, EMPTY, extractors(config), groupId);\n+                 InputEntity entity = new InputEntity())\n             {\n-                groupId++;\n-                Header header = null;\n-                Data data = dataFactory.create( config );\n-                RawIterator<CharReadable,IOException> sources = data.stream();\n-                while ( sources.hasNext() )\n+              int entities = 0;\n+              int properties = 0;\n+              int propertySize = 0;\n+              int additional = 0;\n+              while (iterator.position() < ESTIMATE_SAMPLE_SIZE && iterator.next(chunk))\n+              {\n+                for (; chunk.next(entity); entities++)\n                 {\n-                    try ( CharReadable source = sources.next() )\n-                    {\n-                        if ( header == null )\n-                        {\n-                            // Extract the header from the first file in this group\n-                            header = extractHeader( source, headerFactory, idType, config, groups );\n-                        }\n-                        try ( CsvInputIterator iterator = new CsvInputIterator( source, data.decorator(), header, config,\n-                                idType, EMPTY, extractors( config ), groupId );\n-                              InputEntity entity = new InputEntity() )\n-                        {\n-                            int entities = 0;\n-                            int properties = 0;\n-                            int propertySize = 0;\n-                            int additional = 0;\n-                            while ( iterator.position() < ESTIMATE_SAMPLE_SIZE && iterator.next( chunk ) )\n-                            {\n-                                for ( ; chunk.next( entity ); entities++ )\n-                                {\n-                                    properties += entity.propertyCount();\n-                                    propertySize += calculatePropertySize( entity, valueSizeCalculator );\n-                                    additional += additionalCalculator.applyAsInt( entity );\n-                                }\n-                            }\n-                            if ( entities > 0 )\n-                            {\n-                                long entityCountInSource = (long) (((double) source.length() / iterator.position()) * entities);\n-                                estimates[0] += entityCountInSource;\n-                                estimates[1] += ((double) properties / entities) * entityCountInSource;\n-                                estimates[2] += ((double) propertySize / entities) * entityCountInSource;\n-                                estimates[3] += ((double) additional / entities) * entityCountInSource;\n-                            }\n-                        }\n-                    }\n+                  properties += entity.propertyCount();\n+                  propertySize += calculatePropertySize(entity, valueSizeCalculator);\n+                  additional += additionalCalculator.applyAsInt(entity);\n                 }\n+              }\n+              if (entities > 0)\n+              {\n+                long entityCountInSource = (long) (((double) source.length() / iterator.position()) * entities);\n+                estimates[0] += entityCountInSource;\n+                estimates[1] += ((double) properties / entities) * entityCountInSource;\n+                estimates[2] += ((double) propertySize / entities) * entityCountInSource;\n+                estimates[3] += ((double) additional / entities) * entityCountInSource;\n+              }\n             }\n+          }\n         }\n-        return estimates;\n+      }\n     }\n+    return estimates;\n+  }\n }\n",
            "diff_size": 230
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/329/CsvInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/329/CsvInput.java\nindex afd643e4005..77eb42fae25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/329/CsvInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/329/CsvInput.java\n@@ -79,23 +79,17 @@ public class CsvInput implements Input\n      * @param config CSV configuration.\n      * @param badCollector Collector getting calls about bad input data.\n      */\n-    public CsvInput(\n-            Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory,\n-            Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n+    public CsvInput( Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory, Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n             IdType idType, Configuration config, Collector badCollector )\n     {\n-        this( nodeDataFactory, nodeHeaderFactory, relationshipDataFactory, relationshipHeaderFactory, idType, config, badCollector,\n-                new Groups() );\n+        this( nodeDataFactory, nodeHeaderFactory, relationshipDataFactory, relationshipHeaderFactory, idType, config, badCollector, new Groups() );\n     }\n \n-    CsvInput(\n-            Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory,\n-            Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n+    CsvInput( Iterable<DataFactory> nodeDataFactory, Header.Factory nodeHeaderFactory, Iterable<DataFactory> relationshipDataFactory, Header.Factory relationshipHeaderFactory,\n             IdType idType, Configuration config, Collector badCollector, Groups groups )\n     {\n         assertSaneConfiguration( config );\n-\n-        this.nodeDataFactory = nodeDataFactory;\n+this.nodeDataFactory = nodeDataFactory;\n         this.nodeHeaderFactory = nodeHeaderFactory;\n         this.relationshipDataFactory = relationshipDataFactory;\n         this.relationshipHeaderFactory = relationshipHeaderFactory;\n@@ -159,9 +153,8 @@ public class CsvInput implements Input\n         String conflict = characters.put( character, characterDescription );\n         if ( conflict != null )\n         {\n-            throw new IllegalArgumentException( \"Character '\" + character + \"' specified by \" + characterDescription +\n-                    \" is the same as specified by \" + conflict );\n-        }\n+            throw new IllegalArgumentException( \"Character '\" + character + \"' specified by \" + characterDescription + \" is the same as specified by \" + conflict );\n+    }\n     }\n \n     @Override\n@@ -198,16 +191,14 @@ public class CsvInput implements Input\n     {\n         long[] nodeSample = sample( nodeDataFactory, nodeHeaderFactory, valueSizeCalculator, node -> node.labels().length );\n         long[] relationshipSample = sample( relationshipDataFactory, relationshipHeaderFactory, valueSizeCalculator, entity -> 0 );\n-        return knownEstimates(\n-                nodeSample[0], relationshipSample[0],\n+        return knownEstimates( nodeSample[0], relationshipSample[0],\n                 nodeSample[1], relationshipSample[1],\n                 nodeSample[2], relationshipSample[2],\n                 nodeSample[3] );\n     }\n \n-    private long[] sample( Iterable<DataFactory> dataFactories, Header.Factory headerFactory,\n-            ToIntFunction<Value[]> valueSizeCalculator, ToIntFunction<InputEntity> additionalCalculator ) throws IOException\n-    {\n+    private long[] sample( Iterable<DataFactory> dataFactories, Header.Factory headerFactory, ToIntFunction<Value[]> valueSizeCalculator, ToIntFunction<InputEntity> additionalCalculator ) throws IOException\n+{\n         long[] estimates = new long[4]; // [entity count, property count, property size, labels (for nodes only)]\n         try ( CsvInputChunkProxy chunk = new CsvInputChunkProxy() )\n         {\n@@ -230,8 +221,8 @@ public class CsvInput implements Input\n                         }\n                         try ( CsvInputIterator iterator = new CsvInputIterator( source, data.decorator(), header, config,\n                                 idType, EMPTY, extractors( config ), groupId );\n-                              InputEntity entity = new InputEntity() )\n-                        {\n+InputEntity entity = new InputEntity() )\n+{\n                             int entities = 0;\n                             int properties = 0;\n                             int propertySize = 0;\n@@ -260,4 +251,4 @@ public class CsvInput implements Input\n         }\n         return estimates;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}