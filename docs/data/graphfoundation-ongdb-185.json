{
    "project_name": "graphfoundation-ongdb",
    "error_id": "185",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "150",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/185/SectionedCharBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/185/SectionedCharBuffer.java\nindex f5077ffea1a..3b67664218a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/185/SectionedCharBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/185/SectionedCharBuffer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.IOException;\n@@ -28,7 +29,7 @@ import static java.lang.Math.min;\n /**\n  * Has a similar role to a {@link CharBuffer}, but is tailored to how {@link BufferedCharSeeker}\n  * works and to be able to take full advantage of {@link ThreadAheadReadable}.\n- *\n+ * <p>\n  * First of all this thing wraps a {@code char[]} where the array, while still being one array,\n  * is sectioned into two equally sized parts: the back and the front. The flow of things is as follows:\n  * <ol>\n@@ -44,7 +45,7 @@ import static java.lang.Math.min;\n  * in the array.</li>\n  * <li>Now more characters can be read into the front section using {@link #readFrom(Reader)}.</li>\n  * </ol>\n- *\n+ * <p>\n  * This divide into back and front section enables a behaviour in {@link ThreadAheadReadable} where the\n  * thread that reads ahead reads into the front section of another buffer, a double buffer,\n  * and the current buffer that {@link BufferedCharSeeker} is working with can\n@@ -55,142 +56,142 @@ import static java.lang.Math.min;\n  */\n public class SectionedCharBuffer\n {\n-    private final char[] buffer;\n-    private final int pivot;\n-    private int back;\n-    private int front; // exclusive\n+  private final char[] buffer;\n+  private final int pivot;\n+  private int back;\n+  private int front; // exclusive\n \n-    /**\n-     * @param effectiveBuffserSize Size of each section, i.e. effective buffer size that can be\n-     * {@link #readFrom(Reader) read} each time.\n-     */\n-    public SectionedCharBuffer( int effectiveBuffserSize )\n-    {\n-        this.buffer = new char[effectiveBuffserSize * 2];\n-        this.back = this.front = this.pivot = effectiveBuffserSize;\n-    }\n+  /**\n+   * @param effectiveBuffserSize Size of each section, i.e. effective buffer size that can be\n+   *                             {@link #readFrom(Reader) read} each time.\n+   */\n+  public SectionedCharBuffer(int effectiveBuffserSize)\n+  {\n+    this.buffer = new char[effectiveBuffserSize * 2];\n+    this.back = this.front = this.pivot = effectiveBuffserSize;\n+  }\n \n-    /**\n-     * @return the underlying array which characters are {@link #readFrom(Reader) read into}.\n-     * {@link #back()}, {@link #pivot()} and {@link #front()} marks the noteworthy indexes into this array.\n-     */\n-    public char[] array()\n-    {\n-        return buffer;\n-    }\n+  /**\n+   * @return the underlying array which characters are {@link #readFrom(Reader) read into}.\n+   * {@link #back()}, {@link #pivot()} and {@link #front()} marks the noteworthy indexes into this array.\n+   */\n+  public char[] array()\n+  {\n+    return buffer;\n+  }\n \n-    /**\n-     * Copies characters in the {@link #array()} from (and including) the given {@code from} index of the array\n-     * and all characters forwards to {@link #front()} (excluding) index. These characters are copied into\n-     * the {@link #array()} of the given {@code into} buffer, where the character {@code array[from]} will\n-     * be be copied to {@code into.array[pivot-(front-from)]}, and so on. As an example:\n-     *\n-     * <pre>\n-     * pivot (i.e. effective buffer size) = 16\n-     * buffer A\n-     * &lt;------ back ------&gt; &lt;------ front -----&gt;\n-     * [    .    .    .    |abcd.efgh.ijkl.mnop]\n-     *                                 ^ = 25\n-     *\n-     * A.compactInto( B, 25 )\n-     *\n-     * buffer B\n-     * &lt;------ back ------&gt; &lt;------ front -----&gt;\n-     * [    .    . jkl.mnop|    .    .    .    ]\n-     * </pre>\n-     *\n-     * @param into which buffer to compact into.\n-     * @param from the array index to start compacting from.\n-     */\n-    public void compact( SectionedCharBuffer into, int from )\n-    {\n-        assert buffer.length == into.buffer.length;\n-        int diff = front - from;\n-        into.back = pivot - diff;\n-        System.arraycopy( buffer, from, into.buffer, into.back, diff );\n-    }\n+  /**\n+   * Copies characters in the {@link #array()} from (and including) the given {@code from} index of the array\n+   * and all characters forwards to {@link #front()} (excluding) index. These characters are copied into\n+   * the {@link #array()} of the given {@code into} buffer, where the character {@code array[from]} will\n+   * be be copied to {@code into.array[pivot-(front-from)]}, and so on. As an example:\n+   *\n+   * <pre>\n+   * pivot (i.e. effective buffer size) = 16\n+   * buffer A\n+   * &lt;------ back ------&gt; &lt;------ front -----&gt;\n+   * [    .    .    .    |abcd.efgh.ijkl.mnop]\n+   *                                 ^ = 25\n+   *\n+   * A.compactInto( B, 25 )\n+   *\n+   * buffer B\n+   * &lt;------ back ------&gt; &lt;------ front -----&gt;\n+   * [    .    . jkl.mnop|    .    .    .    ]\n+   * </pre>\n+   *\n+   * @param into which buffer to compact into.\n+   * @param from the array index to start compacting from.\n+   */\n+  public void compact(SectionedCharBuffer into, int from)\n+  {\n+    assert buffer.length == into.buffer.length;\n+    int diff = front - from;\n+    into.back = pivot - diff;\n+    System.arraycopy(buffer, from, into.buffer, into.back, diff);\n+  }\n \n-    /**\n-     * Reads characters from {@code reader} into the front section of this buffer, setting {@link #front()}\n-     * accordingly afterwards. If no characters were read due to end reached then {@link #hasAvailable()} will\n-     * return {@code false} after this call, likewise {@link #available()} will return 0.\n-     *\n-     * @param reader {@link Reader} to read from.\n-     * @throws IOException any exception from the {@link Reader}.\n-     */\n-    public void readFrom( Reader reader ) throws IOException\n-    {\n-        readFrom( reader, pivot );\n-    }\n+  /**\n+   * Reads characters from {@code reader} into the front section of this buffer, setting {@link #front()}\n+   * accordingly afterwards. If no characters were read due to end reached then {@link #hasAvailable()} will\n+   * return {@code false} after this call, likewise {@link #available()} will return 0.\n+   *\n+   * @param reader {@link Reader} to read from.\n+   * @throws IOException any exception from the {@link Reader}.\n+   */\n+  public void readFrom(Reader reader) throws IOException\n+  {\n+    readFrom(reader, pivot);\n+  }\n \n-    /**\n-     * Like {@link #readFrom(Reader)} but with added {@code max} argument for limiting the number of\n-     * characters read from the {@link Reader}.\n-     *\n-     * @see #readFrom(Reader)\n-     */\n-    public void readFrom( Reader reader, int max ) throws IOException\n-    {\n-        int read = reader.read( buffer, pivot, min( max, pivot ) );\n-        if ( read == -1 )\n-        {   // we reached the end\n-            front = pivot;\n-        }\n-        else\n-        {   // we did read something\n-            front = pivot + read;\n-        }\n+  /**\n+   * Like {@link #readFrom(Reader)} but with added {@code max} argument for limiting the number of\n+   * characters read from the {@link Reader}.\n+   *\n+   * @see #readFrom(Reader)\n+   */\n+  public void readFrom(Reader reader, int max) throws IOException\n+  {\n+    int read = reader.read(buffer, pivot, min(max, pivot));\n+    if (read == -1)\n+    {   // we reached the end\n+      front = pivot;\n+    } else\n+    {   // we did read something\n+      front = pivot + read;\n     }\n+  }\n \n-    /**\n-     * Puts a character into the front section of the buffer and increments the front index.\n-     * @param ch\n-     */\n-    public void append( char ch )\n-    {\n-        buffer[front++] = ch;\n-    }\n+  /**\n+   * Puts a character into the front section of the buffer and increments the front index.\n+   *\n+   * @param ch\n+   */\n+  public void append(char ch)\n+  {\n+    buffer[front++] = ch;\n+  }\n \n-    /**\n-     * @return the pivot point of the {@link #array()}. Before the pivot there are characters saved\n-     * from a previous {@link #compact(SectionedCharBuffer, int) compaction} and after (and including) this point\n-     * are characters read from {@link #readFrom(Reader)}.\n-     */\n-    public int pivot()\n-    {\n-        return pivot;\n-    }\n+  /**\n+   * @return the pivot point of the {@link #array()}. Before the pivot there are characters saved\n+   * from a previous {@link #compact(SectionedCharBuffer, int) compaction} and after (and including) this point\n+   * are characters read from {@link #readFrom(Reader)}.\n+   */\n+  public int pivot()\n+  {\n+    return pivot;\n+  }\n \n-    /**\n-     * @return index of first available character, might be before pivot point if there have been\n-     * characters moved over from a previous compaction.\n-     */\n-    public int back()\n-    {\n-        return back;\n-    }\n+  /**\n+   * @return index of first available character, might be before pivot point if there have been\n+   * characters moved over from a previous compaction.\n+   */\n+  public int back()\n+  {\n+    return back;\n+  }\n \n-    /**\n-     * @return index of the last available character plus one.\n-     */\n-    public int front()\n-    {\n-        return front;\n-    }\n+  /**\n+   * @return index of the last available character plus one.\n+   */\n+  public int front()\n+  {\n+    return front;\n+  }\n \n-    /**\n-     * @return whether or not there are characters read into the front section of the buffer.\n-     */\n-    public boolean hasAvailable()\n-    {\n-        return front > pivot;\n-    }\n+  /**\n+   * @return whether or not there are characters read into the front section of the buffer.\n+   */\n+  public boolean hasAvailable()\n+  {\n+    return front > pivot;\n+  }\n \n-    /**\n-     * @return the number of characters available in the front section of the buffer.\n-     */\n-    public int available()\n-    {\n-        return front - pivot;\n-    }\n+  /**\n+   * @return the number of characters available in the front section of the buffer.\n+   */\n+  public int available()\n+  {\n+    return front - pivot;\n+  }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "188",
                    "column": "21",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/185/SectionedCharBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/185/SectionedCharBuffer.java\nindex f5077ffea1a..6c0d35c3d2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/185/SectionedCharBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/185/SectionedCharBuffer.java\n@@ -133,11 +133,13 @@ public class SectionedCharBuffer\n     {\n         int read = reader.read( buffer, pivot, min( max, pivot ) );\n         if ( read == -1 )\n-        {   // we reached the end\n+        {\n+    // we reached the end\n             front = pivot;\n         }\n         else\n-        {   // we did read something\n+        {\n+    // we did read something\n             front = pivot + read;\n         }\n     }\n@@ -183,7 +185,7 @@ public class SectionedCharBuffer\n      */\n     public boolean hasAvailable()\n     {\n-        return front > pivot;\n+        return front> pivot;\n     }\n \n     /**\n@@ -193,4 +195,4 @@ public class SectionedCharBuffer\n     {\n         return front - pivot;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}