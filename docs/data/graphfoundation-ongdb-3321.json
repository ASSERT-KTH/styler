{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3321",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3321/DecayingFlags.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3321/DecayingFlags.java\nindex 5b7141eba4b..ce572f5569f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3321/DecayingFlags.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3321/DecayingFlags.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.concurrent;\n \n import java.util.Arrays;\n@@ -31,154 +32,154 @@ import org.neo4j.string.HexString;\n  * depend on how often they are toggled - meaning this uses\n  * both recency and frequency to determine which flags to keep\n  * high.\n- *\n+ * <p>\n  * The more often a flag is toggled high, the longer it'll\n  * take before it resets to low - if a flag gets set more\n  * often than sweep is called, it will always be high.\n- *\n+ * <p>\n  * This data structure is coordination free, but sacrifices\n  * accuracy for performance.\n- *\n+ * <p>\n  * Intended usage is that you'd have a set of keys you care\n  * about, and set a max time where you'd like to mark a key\n  * as low if that time passes; say 7 days.\n- *\n+ * <p>\n  * So, you'd set {@link #keepalive} to 7, and then you'd\n  * schedule a thread to call {@link #sweep()} once per day.\n  * Now, flags that were toggled once will be set to low again\n  * the next day, while flags that were extensively used will\n  * take up to seven days before falling back to low.\n- *\n+ * <p>\n  * Flags that are toggled at or more than once every day will\n  * always be high.\n  */\n public class DecayingFlags\n {\n-    /**\n-     * A flag in the set, with a unique index pointing\n-     * to the bit that correlates to this flag.\n-     */\n-    public static class Key\n+  /**\n+   * A flag in the set, with a unique index pointing\n+   * to the bit that correlates to this flag.\n+   */\n+  public static class Key\n+  {\n+    private final int index;\n+\n+    public Key(int index)\n     {\n-        private final int index;\n-\n-        public Key( int index )\n-        {\n-            this.index = index;\n-        }\n-\n-        public int index()\n-        {\n-            return index;\n-        }\n+      this.index = index;\n     }\n \n-    /**\n-     * To model the time-based \"decay\" of the flags,\n-     * each flag is represented as an int that counts\n-     * the number of times the flag has been toggled, up to\n-     * {@link #keepalive}. Each time #sweep is called, all\n-     * flags are decremented by 1, once a flag reaches 0 it\n-     * is considered low.\n-     *\n-     * This way, if a flag is not \"renewed\", the flag will\n-     * eventually fall back to low.\n-     */\n-    private int[] flags;\n-\n-    /**\n-     * The max number of sweep iteration a flag is kept alive\n-     * if it is not toggled. The more toggles seen in a flag,\n-     * the more likely it is to hit this threshold.\n-     */\n-    private final int keepalive;\n-\n-    /**\n-     * @param keepalive controls the maximum length of time\n-     *                     a flag will stay toggled if it is not\n-     *                     renewed, expressed as the number of times\n-     *                     {@link #sweep()} needs to be called.\n-     */\n-    public DecayingFlags( int keepalive )\n+    public int index()\n     {\n-        this.keepalive = keepalive;\n-        this.flags = new int[16];\n+      return index;\n     }\n-\n-    public void flag( Key key )\n+  }\n+\n+  /**\n+   * To model the time-based \"decay\" of the flags,\n+   * each flag is represented as an int that counts\n+   * the number of times the flag has been toggled, up to\n+   * {@link #keepalive}. Each time #sweep is called, all\n+   * flags are decremented by 1, once a flag reaches 0 it\n+   * is considered low.\n+   * <p>\n+   * This way, if a flag is not \"renewed\", the flag will\n+   * eventually fall back to low.\n+   */\n+  private int[] flags;\n+\n+  /**\n+   * The max number of sweep iteration a flag is kept alive\n+   * if it is not toggled. The more toggles seen in a flag,\n+   * the more likely it is to hit this threshold.\n+   */\n+  private final int keepalive;\n+\n+  /**\n+   * @param keepalive controls the maximum length of time\n+   *                  a flag will stay toggled if it is not\n+   *                  renewed, expressed as the number of times\n+   *                  {@link #sweep()} needs to be called.\n+   */\n+  public DecayingFlags(int keepalive)\n+  {\n+    this.keepalive = keepalive;\n+    this.flags = new int[16];\n+  }\n+\n+  public void flag(Key key)\n+  {\n+    // We dynamically size this up as needed\n+    if (key.index >= flags.length)\n     {\n-        // We dynamically size this up as needed\n-        if ( key.index >= flags.length )\n-        {\n-            resize( key.index );\n-        }\n-\n-        int flag = flags[key.index];\n-        if ( flag < keepalive )\n-        {\n-            flags[key.index] = flag + 1;\n-        }\n+      resize(key.index);\n     }\n \n-    /**\n-     * This is how decay happens, the interval at which\n-     * this method is called controls how long unused\n-     * flags are kept 'high'. Each invocation of this will\n-     * decrement the flag counters by 1, marking any that\n-     * reach 0 as low.\n-     */\n-    public void sweep()\n+    int flag = flags[key.index];\n+    if (flag < keepalive)\n     {\n-        for ( int i = 0; i < flags.length; i++ )\n-        {\n-            int count = flags[i];\n-            if ( count > 0 )\n-            {\n-                flags[i] = count - 1;\n-            }\n-        }\n+      flags[key.index] = flag + 1;\n     }\n-\n-    private synchronized void resize( int minSize )\n+  }\n+\n+  /**\n+   * This is how decay happens, the interval at which\n+   * this method is called controls how long unused\n+   * flags are kept 'high'. Each invocation of this will\n+   * decrement the flag counters by 1, marking any that\n+   * reach 0 as low.\n+   */\n+  public void sweep()\n+  {\n+    for (int i = 0; i < flags.length; i++)\n     {\n-        int newSize = flags.length;\n-        while ( newSize < minSize )\n-        {\n-            newSize += 16;\n-        }\n-\n-        if ( flags.length < newSize )\n-        {\n-            flags = Arrays.copyOf( flags, newSize );\n-        }\n+      int count = flags[i];\n+      if (count > 0)\n+      {\n+        flags[i] = count - 1;\n+      }\n     }\n+  }\n \n-    public String asHex()\n+  private synchronized void resize(int minSize)\n+  {\n+    int newSize = flags.length;\n+    while (newSize < minSize)\n     {\n-        // Convert the flags to a byte-array, each\n-        // flag represented as a single bit.\n-        byte[] bits = new byte[flags.length / 8];\n-\n-        // Go over the flags, eight at a time to align\n-        // with sticking eight bits at a time into the\n-        // output array.\n-        for ( int i = 0; i < flags.length; i += 8 )\n-        {\n-            bits[i / 8] = (byte)(\n-                (bit( i ) << 7) |\n-                (bit( i + 1 ) << 6) |\n-                (bit( i + 2 ) << 5) |\n-                (bit( i + 3 ) << 4) |\n-                (bit( i + 4 ) << 3) |\n-                (bit( i + 5 ) << 2) |\n-                (bit( i + 6 ) << 1) |\n-                (bit( i + 7 )) ) ;\n-        }\n-        return HexString.encodeHexString( bits );\n+      newSize += 16;\n     }\n \n-    private int bit( int idx )\n+    if (flags.length < newSize)\n     {\n-        return flags[idx] > 0 ? 1 : 0;\n+      flags = Arrays.copyOf(flags, newSize);\n     }\n+  }\n+\n+  public String asHex()\n+  {\n+    // Convert the flags to a byte-array, each\n+    // flag represented as a single bit.\n+    byte[] bits = new byte[flags.length / 8];\n+\n+    // Go over the flags, eight at a time to align\n+    // with sticking eight bits at a time into the\n+    // output array.\n+    for (int i = 0; i < flags.length; i += 8)\n+    {\n+      bits[i / 8] = (byte) (\n+          (bit(i) << 7) |\n+              (bit(i + 1) << 6) |\n+              (bit(i + 2) << 5) |\n+              (bit(i + 3) << 4) |\n+              (bit(i + 4) << 3) |\n+              (bit(i + 5) << 2) |\n+              (bit(i + 6) << 1) |\n+              (bit(i + 7)));\n+    }\n+    return HexString.encodeHexString(bits);\n+  }\n+\n+  private int bit(int idx)\n+  {\n+    return flags[idx] > 0 ? 1 : 0;\n+  }\n }\n",
            "diff_size": 199
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3321/DecayingFlags.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3321/DecayingFlags.java\nindex 5b7141eba4b..d6490a28451 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3321/DecayingFlags.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3321/DecayingFlags.java\n@@ -164,16 +164,8 @@ public class DecayingFlags\n         // output array.\n         for ( int i = 0; i < flags.length; i += 8 )\n         {\n-            bits[i / 8] = (byte)(\n-                (bit( i ) << 7) |\n-                (bit( i + 1 ) << 6) |\n-                (bit( i + 2 ) << 5) |\n-                (bit( i + 3 ) << 4) |\n-                (bit( i + 4 ) << 3) |\n-                (bit( i + 5 ) << 2) |\n-                (bit( i + 6 ) << 1) |\n-                (bit( i + 7 )) ) ;\n-        }\n+            bits[i / 8] = (byte)((bit( i ) << 7) | (bit( i + 1 ) << 6) | (bit( i + 2 ) << 5) | (bit( i + 3 ) << 4) | (bit( i + 4 ) << 3) | (bit( i + 5 ) << 2) | (bit( i + 6 ) << 1) | (bit( i + 7 )) );\n+    }\n         return HexString.encodeHexString( bits );\n     }\n \n@@ -181,4 +173,4 @@ public class DecayingFlags\n     {\n         return flags[idx] > 0 ? 1 : 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}