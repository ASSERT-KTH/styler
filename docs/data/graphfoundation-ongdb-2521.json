{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2521",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "102",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "171",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "177",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "187",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2521/JmxQueryProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2521/JmxQueryProcedure.java\nindex c4a712d0288..c1676ba411f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2521/JmxQueryProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2521/JmxQueryProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.builtinprocs;\n \n import java.util.Arrays;\n@@ -52,186 +53,175 @@ import static org.neo4j.internal.kernel.api.procs.ProcedureSignature.procedureSi\n \n public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n {\n-    private final MBeanServer jmxServer;\n-\n-    public JmxQueryProcedure( QualifiedName name, MBeanServer jmxServer )\n+  private final MBeanServer jmxServer;\n+\n+  public JmxQueryProcedure(QualifiedName name, MBeanServer jmxServer)\n+  {\n+    super(procedureSignature(name)\n+        .in(\"query\", Neo4jTypes.NTString)\n+        .out(\"name\", Neo4jTypes.NTString)\n+        .out(\"description\", Neo4jTypes.NTString)\n+        .out(\"attributes\", Neo4jTypes.NTMap)\n+        .description(\"Query JMX management data by domain and name. For instance, \\\"org.neo4j:*\\\"\")\n+        .build());\n+    this.jmxServer = jmxServer;\n+  }\n+\n+  @Override\n+  public RawIterator<Object[], ProcedureException> apply(Context ctx, Object[] input, ResourceTracker resourceTracker) throws ProcedureException\n+  {\n+    String query = input[0].toString();\n+    try\n     {\n-        super( procedureSignature( name )\n-                .in( \"query\", Neo4jTypes.NTString )\n-                .out( \"name\", Neo4jTypes.NTString )\n-                .out( \"description\", Neo4jTypes.NTString )\n-                .out( \"attributes\", Neo4jTypes.NTMap )\n-                .description( \"Query JMX management data by domain and name. For instance, \\\"org.neo4j:*\\\"\" )\n-                .build() );\n-        this.jmxServer = jmxServer;\n-    }\n+      // Find all beans that match the query name pattern\n+      Iterator<ObjectName> names = jmxServer.queryNames(new ObjectName(query), null).iterator();\n \n-    @Override\n-    public RawIterator<Object[], ProcedureException> apply( Context ctx, Object[] input, ResourceTracker resourceTracker ) throws ProcedureException\n-    {\n-        String query = input[0].toString();\n-        try\n-        {\n-            // Find all beans that match the query name pattern\n-            Iterator<ObjectName> names = jmxServer.queryNames( new ObjectName( query ), null ).iterator();\n-\n-            // Then convert them to a Neo4j type system representation\n-            return RawIterator.from( () ->\n-            {\n-                if ( !names.hasNext() )\n-                {\n-                    return null;\n-                }\n-\n-                ObjectName name = names.next();\n-                try\n-                {\n-                    MBeanInfo beanInfo = jmxServer.getMBeanInfo( name );\n-                    return new Object[]{\n-                            name.getCanonicalName(),\n-                            beanInfo.getDescription(),\n-                            toNeo4jValue( name, beanInfo.getAttributes() ) };\n-                }\n-                catch ( JMException e )\n-                {\n-                    throw new ProcedureException( Status.General.UnknownError,\n-                            e, \"JMX error while accessing `%s`, please report this. Message was: %s\",\n-                            name, e.getMessage() );\n-                }\n-            });\n-        }\n-        catch ( MalformedObjectNameException e )\n+      // Then convert them to a Neo4j type system representation\n+      return RawIterator.from(() ->\n+      {\n+        if (!names.hasNext())\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                  \"'%s' is an invalid JMX name pattern. Valid queries should use\" +\n-                  \"the syntax outlined in the javax.management.ObjectName API documentation.\" +\n-                  \"For instance, try 'org.neo4j:*' to find all JMX beans of the 'org.neo4j' \" +\n-                  \"domain, or '*:*' to find every JMX bean.\", query );\n+          return null;\n         }\n-    }\n \n-    private Map<String,Object> toNeo4jValue( ObjectName name, MBeanAttributeInfo[] attributes )\n-            throws JMException\n-    {\n-        HashMap<String,Object> out = new HashMap<>();\n-        for ( MBeanAttributeInfo attribute : attributes )\n-        {\n-            if ( attribute.isReadable() )\n-            {\n-                out.put( attribute.getName(), toNeo4jValue( name, attribute ) );\n-            }\n-        }\n-        return out;\n-    }\n-\n-    private Map<String,Object> toNeo4jValue( ObjectName name, MBeanAttributeInfo attribute )\n-            throws JMException\n-    {\n-        Object value;\n+        ObjectName name = names.next();\n         try\n         {\n-            value = toNeo4jValue( jmxServer.getAttribute( name, attribute.getName() ) );\n-        }\n-        catch ( RuntimeMBeanException e )\n+          MBeanInfo beanInfo = jmxServer.getMBeanInfo(name);\n+          return new Object[] {\n+              name.getCanonicalName(),\n+              beanInfo.getDescription(),\n+              toNeo4jValue(name, beanInfo.getAttributes())};\n+        } catch (JMException e)\n         {\n-            if ( e.getCause() != null && e.getCause() instanceof UnsupportedOperationException )\n-            {\n-                // We include the name and description of this attribute still - but the value of it is\n-                // unknown. We do this rather than rethrow the exception, because several MBeans built into\n-                // the JVM will throw exception on attribute access depending on their runtime state, even\n-                // if the attribute is marked as readable. Notably the GC beans do this.\n-                value = null;\n-            }\n-            else\n-            {\n-                throw e;\n-            }\n+          throw new ProcedureException(Status.General.UnknownError,\n+              e, \"JMX error while accessing `%s`, please report this. Message was: %s\",\n+              name, e.getMessage());\n         }\n-        return map(\n-            \"description\", attribute.getDescription(),\n-            \"value\", value\n-        );\n-    }\n-\n-    private Object toNeo4jValue( Object attributeValue )\n+      });\n+    } catch (MalformedObjectNameException e)\n     {\n-        // These branches as per {@link javax.management.openmbean.OpenType#ALLOWED_CLASSNAMES_LIST}\n-        if ( isSimpleType( attributeValue ) )\n-        {\n-            return attributeValue;\n-        }\n-        else if ( attributeValue.getClass().isArray() )\n-        {\n-            if ( isSimpleType( attributeValue.getClass().getComponentType() ) )\n-            {\n-                return attributeValue;\n-            }\n-            else\n-            {\n-                return toNeo4jValue( (Object[]) attributeValue );\n-            }\n-        }\n-        else if ( attributeValue instanceof CompositeData )\n-        {\n-            return toNeo4jValue( (CompositeData) attributeValue );\n-        }\n-        else if ( attributeValue instanceof ObjectName )\n-        {\n-            return ((ObjectName) attributeValue).getCanonicalName();\n-        }\n-        else if ( attributeValue instanceof TabularData )\n-        {\n-            return toNeo4jValue( (Map<?,?>) attributeValue );\n-        }\n-        else if ( attributeValue instanceof Date )\n-        {\n-            return ((Date) attributeValue).getTime();\n-        }\n-        else\n-        {\n-            // Don't convert objects that are not OpenType values\n-            return null;\n-        }\n+      throw new ProcedureException(Status.Procedure.ProcedureCallFailed,\n+          \"'%s' is an invalid JMX name pattern. Valid queries should use\" +\n+              \"the syntax outlined in the javax.management.ObjectName API documentation.\" +\n+              \"For instance, try 'org.neo4j:*' to find all JMX beans of the 'org.neo4j' \" +\n+              \"domain, or '*:*' to find every JMX bean.\", query);\n     }\n+  }\n \n-    private Map<String,Object> toNeo4jValue( Map<?,?> attributeValue )\n+  private Map<String, Object> toNeo4jValue(ObjectName name, MBeanAttributeInfo[] attributes)\n+      throws JMException\n+  {\n+    HashMap<String, Object> out = new HashMap<>();\n+    for (MBeanAttributeInfo attribute : attributes)\n     {\n-        // Build a new map with the same keys, but each value passed\n-        // through `toNeo4jValue`\n-        return attributeValue.entrySet().stream()\n-                .map( e -> pair( e.getKey().toString(), toNeo4jValue( e.getValue() ) ) )\n-                .collect( CollectorsUtil.pairsToMap() );\n+      if (attribute.isReadable())\n+      {\n+        out.put(attribute.getName(), toNeo4jValue(name, attribute));\n+      }\n     }\n-\n-    private List<Object> toNeo4jValue( Object[] array )\n+    return out;\n+  }\n+\n+  private Map<String, Object> toNeo4jValue(ObjectName name, MBeanAttributeInfo attribute)\n+      throws JMException\n+  {\n+    Object value;\n+    try\n     {\n-        return Arrays.stream(array).map( this::toNeo4jValue ).collect( Collectors.toList() );\n-    }\n-\n-    private Map<String, Object> toNeo4jValue( CompositeData composite )\n+      value = toNeo4jValue(jmxServer.getAttribute(name, attribute.getName()));\n+    } catch (RuntimeMBeanException e)\n     {\n-        HashMap<String,Object> properties = new HashMap<>();\n-        for ( String key : composite.getCompositeType().keySet() )\n-        {\n-            properties.put( key, toNeo4jValue(composite.get( key )) );\n-        }\n-\n-        return map(\n-            \"description\", composite.getCompositeType().getDescription(),\n-            \"properties\", properties\n-        );\n+      if (e.getCause() != null && e.getCause() instanceof UnsupportedOperationException)\n+      {\n+        // We include the name and description of this attribute still - but the value of it is\n+        // unknown. We do this rather than rethrow the exception, because several MBeans built into\n+        // the JVM will throw exception on attribute access depending on their runtime state, even\n+        // if the attribute is marked as readable. Notably the GC beans do this.\n+        value = null;\n+      } else\n+      {\n+        throw e;\n+      }\n     }\n-\n-    private boolean isSimpleType( Object value )\n+    return map(\n+        \"description\", attribute.getDescription(),\n+        \"value\", value\n+    );\n+  }\n+\n+  private Object toNeo4jValue(Object attributeValue)\n+  {\n+    // These branches as per {@link javax.management.openmbean.OpenType#ALLOWED_CLASSNAMES_LIST}\n+    if (isSimpleType(attributeValue))\n+    {\n+      return attributeValue;\n+    } else if (attributeValue.getClass().isArray())\n+    {\n+      if (isSimpleType(attributeValue.getClass().getComponentType()))\n+      {\n+        return attributeValue;\n+      } else\n+      {\n+        return toNeo4jValue((Object[]) attributeValue);\n+      }\n+    } else if (attributeValue instanceof CompositeData)\n+    {\n+      return toNeo4jValue((CompositeData) attributeValue);\n+    } else if (attributeValue instanceof ObjectName)\n     {\n-        return value == null || isSimpleType( value.getClass() );\n+      return ((ObjectName) attributeValue).getCanonicalName();\n+    } else if (attributeValue instanceof TabularData)\n+    {\n+      return toNeo4jValue((Map<?, ?>) attributeValue);\n+    } else if (attributeValue instanceof Date)\n+    {\n+      return ((Date) attributeValue).getTime();\n+    } else\n+    {\n+      // Don't convert objects that are not OpenType values\n+      return null;\n     }\n-\n-    private boolean isSimpleType( Class<?> cls )\n+  }\n+\n+  private Map<String, Object> toNeo4jValue(Map<?, ?> attributeValue)\n+  {\n+    // Build a new map with the same keys, but each value passed\n+    // through `toNeo4jValue`\n+    return attributeValue.entrySet().stream()\n+        .map(e -> pair(e.getKey().toString(), toNeo4jValue(e.getValue())))\n+        .collect(CollectorsUtil.pairsToMap());\n+  }\n+\n+  private List<Object> toNeo4jValue(Object[] array)\n+  {\n+    return Arrays.stream(array).map(this::toNeo4jValue).collect(Collectors.toList());\n+  }\n+\n+  private Map<String, Object> toNeo4jValue(CompositeData composite)\n+  {\n+    HashMap<String, Object> properties = new HashMap<>();\n+    for (String key : composite.getCompositeType().keySet())\n     {\n-        return String.class.isAssignableFrom( cls ) ||\n-               Number.class.isAssignableFrom( cls ) ||\n-               Boolean.class.isAssignableFrom( cls ) ||\n-               cls.isPrimitive();\n+      properties.put(key, toNeo4jValue(composite.get(key)));\n     }\n+\n+    return map(\n+        \"description\", composite.getCompositeType().getDescription(),\n+        \"properties\", properties\n+    );\n+  }\n+\n+  private boolean isSimpleType(Object value)\n+  {\n+    return value == null || isSimpleType(value.getClass());\n+  }\n+\n+  private boolean isSimpleType(Class<?> cls)\n+  {\n+    return String.class.isAssignableFrom(cls) ||\n+        Number.class.isAssignableFrom(cls) ||\n+        Boolean.class.isAssignableFrom(cls) ||\n+        cls.isPrimitive();\n+  }\n }\n",
            "diff_size": 263
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 295).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 354).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "209",
                    "column": "53",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2521/JmxQueryProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2521/JmxQueryProcedure.java\nindex c4a712d0288..45864508bf2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2521/JmxQueryProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2521/JmxQueryProcedure.java\n@@ -56,14 +56,8 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n \n     public JmxQueryProcedure( QualifiedName name, MBeanServer jmxServer )\n     {\n-        super( procedureSignature( name )\n-                .in( \"query\", Neo4jTypes.NTString )\n-                .out( \"name\", Neo4jTypes.NTString )\n-                .out( \"description\", Neo4jTypes.NTString )\n-                .out( \"attributes\", Neo4jTypes.NTMap )\n-                .description( \"Query JMX management data by domain and name. For instance, \\\"org.neo4j:*\\\"\" )\n-                .build() );\n-        this.jmxServer = jmxServer;\n+        super( procedureSignature( name ).in( \"query\", Neo4jTypes.NTString ).out( \"name\", Neo4jTypes.NTString ).out( \"description\", Neo4jTypes.NTString ).out( \"attributes\", Neo4jTypes.NTMap ).description( \"Query JMX management data by domain and name. For instance, \\\"org.neo4j:*\\\"\" ).build() );\n+this.jmxServer = jmxServer;\n     }\n \n     @Override\n@@ -87,32 +81,24 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n                 try\n                 {\n                     MBeanInfo beanInfo = jmxServer.getMBeanInfo( name );\n-                    return new Object[]{\n-                            name.getCanonicalName(),\n-                            beanInfo.getDescription(),\n+                    return new Object[]{name.getCanonicalName(), beanInfo.getDescription(),\n                             toNeo4jValue( name, beanInfo.getAttributes() ) };\n-                }\n+    }\n                 catch ( JMException e )\n                 {\n                     throw new ProcedureException( Status.General.UnknownError,\n-                            e, \"JMX error while accessing `%s`, please report this. Message was: %s\",\n-                            name, e.getMessage() );\n-                }\n+                            e, \"JMX error while accessing `%s`, please report this. Message was: %s\", name, e.getMessage() );\n+    }\n             });\n         }\n         catch ( MalformedObjectNameException e )\n         {\n-            throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                  \"'%s' is an invalid JMX name pattern. Valid queries should use\" +\n-                  \"the syntax outlined in the javax.management.ObjectName API documentation.\" +\n-                  \"For instance, try 'org.neo4j:*' to find all JMX beans of the 'org.neo4j' \" +\n-                  \"domain, or '*:*' to find every JMX bean.\", query );\n-        }\n+            throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"'%s' is an invalid JMX name pattern. Valid queries should use\" + \"the syntax outlined in the javax.management.ObjectName API documentation.\" + \"For instance, try 'org.neo4j:*' to find all JMX beans of the 'org.neo4j' \" + \"domain, or '*:*' to find every JMX bean.\", query );\n+    }\n     }\n \n-    private Map<String,Object> toNeo4jValue( ObjectName name, MBeanAttributeInfo[] attributes )\n-            throws JMException\n-    {\n+    private Map<String,Object> toNeo4jValue( ObjectName name, MBeanAttributeInfo[] attributes ) throws JMException\n+{\n         HashMap<String,Object> out = new HashMap<>();\n         for ( MBeanAttributeInfo attribute : attributes )\n         {\n@@ -124,9 +110,8 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n         return out;\n     }\n \n-    private Map<String,Object> toNeo4jValue( ObjectName name, MBeanAttributeInfo attribute )\n-            throws JMException\n-    {\n+    private Map<String,Object> toNeo4jValue( ObjectName name, MBeanAttributeInfo attribute ) throws JMException\n+{\n         Object value;\n         try\n         {\n@@ -147,10 +132,7 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n                 throw e;\n             }\n         }\n-        return map(\n-            \"description\", attribute.getDescription(),\n-            \"value\", value\n-        );\n+        return map( \"description\", attribute.getDescription(), \"value\", value );\n     }\n \n     private Object toNeo4jValue( Object attributeValue )\n@@ -181,7 +163,7 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n         }\n         else if ( attributeValue instanceof TabularData )\n         {\n-            return toNeo4jValue( (Map<?,?>) attributeValue );\n+            return toNeo4jValue( (Map<?, ?>) attributeValue );\n         }\n         else if ( attributeValue instanceof Date )\n         {\n@@ -194,13 +176,11 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n         }\n     }\n \n-    private Map<String,Object> toNeo4jValue( Map<?,?> attributeValue )\n+    private Map<String,Object> toNeo4jValue( Map<?, ?> attributeValue )\n     {\n         // Build a new map with the same keys, but each value passed\n         // through `toNeo4jValue`\n-        return attributeValue.entrySet().stream()\n-                .map( e -> pair( e.getKey().toString(), toNeo4jValue( e.getValue() ) ) )\n-                .collect( CollectorsUtil.pairsToMap() );\n+        return attributeValue.entrySet().stream().map( e -> pair( e.getKey().toString(), toNeo4jValue( e.getValue() ) ) ).collect( CollectorsUtil.pairsToMap() );\n     }\n \n     private List<Object> toNeo4jValue( Object[] array )\n@@ -208,7 +188,7 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n         return Arrays.stream(array).map( this::toNeo4jValue ).collect( Collectors.toList() );\n     }\n \n-    private Map<String, Object> toNeo4jValue( CompositeData composite )\n+    private Map<String,Object> toNeo4jValue( CompositeData composite )\n     {\n         HashMap<String,Object> properties = new HashMap<>();\n         for ( String key : composite.getCompositeType().keySet() )\n@@ -216,10 +196,7 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n             properties.put( key, toNeo4jValue(composite.get( key )) );\n         }\n \n-        return map(\n-            \"description\", composite.getCompositeType().getDescription(),\n-            \"properties\", properties\n-        );\n+        return map( \"description\", composite.getCompositeType().getDescription(), \"properties\", properties );\n     }\n \n     private boolean isSimpleType( Object value )\n@@ -229,9 +206,8 @@ public class JmxQueryProcedure extends CallableProcedure.BasicProcedure\n \n     private boolean isSimpleType( Class<?> cls )\n     {\n-        return String.class.isAssignableFrom( cls ) ||\n-               Number.class.isAssignableFrom( cls ) ||\n+        return String.class.isAssignableFrom( cls ) ||Number.class.isAssignableFrom( cls ) ||\n                Boolean.class.isAssignableFrom( cls ) ||\n                cls.isPrimitive();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}