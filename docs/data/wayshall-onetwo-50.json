{
    "project_name": "wayshall-onetwo",
    "error_id": "50",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "75",
                "severity": "error",
                "message": "',' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\t\n\n\tpublic Object execute(String expressString, IExpressContext<String,Object> context) {\n//\t\tDefaultContext<String, Object> ctx = new DefaultContext<String, Object>();\n\t\tif (StringUtils.isBlank(expressString)) {\n\t\t\tthrow new BaseException(\"\u516c\u5f0f\u4e0d\u80fd\u4e3a\u7a7a\");",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/50/ExpressExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/50/ExpressExecutor.java\nindex 296d07d948d..93db9dcfa88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/50/ExpressExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/50/ExpressExecutor.java\n@@ -13,41 +13,41 @@ import com.ql.util.express.IExpressContext;\n  * <br/>\n  */\n public class ExpressExecutor {\n-\t\n-\tprivate final Logger logger = JFishLoggerFactory.getLogger(getClass());\n-\t\n-\tprivate ExpressRunner expressRunner;\n-\tprivate QLExpressProperties properties;\n-\t\n-\tpublic ExpressExecutor(ExpressRunner expressRunner, QLExpressProperties properties) {\n-\t\tsuper();\n-\t\tthis.expressRunner = expressRunner;\n-\t\tthis.properties = properties;\n-\t}\n-\t\n-\n-\tpublic Object execute(String expressString, IExpressContext<String,Object> context) {\n+\n+  private final Logger logger = JFishLoggerFactory.getLogger(getClass());\n+\n+  private ExpressRunner expressRunner;\n+  private QLExpressProperties properties;\n+\n+  public ExpressExecutor(ExpressRunner expressRunner, QLExpressProperties properties) {\n+    super();\n+    this.expressRunner = expressRunner;\n+    this.properties = properties;\n+  }\n+\n+\n+  public Object execute(String expressString, IExpressContext<String, Object> context) {\n //\t\tDefaultContext<String, Object> ctx = new DefaultContext<String, Object>();\n-\t\tif (StringUtils.isBlank(expressString)) {\n-\t\t\tthrow new BaseException(\"\u516c\u5f0f\u4e0d\u80fd\u4e3a\u7a7a\");\n-\t\t}\n-\t\tObject result = null;\n-\t\tif (properties.isShowExpression()) {\n-\t\t\tlogger.info(\"execute expression: {}\", expressString);\n-\t\t}\n-\t\ttry {\n-\t\t\tresult = this.expressRunner.execute(expressString, context, null, properties.isCache(), properties.isTrace());\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new BaseException(\"execute ql error, expression: \" + expressString + \", message: \" + e.getMessage(), e);\n-\t\t}\n-\t\treturn result;\n-\t}\n-\t\n-\n-\tpublic void checkSyntax(String expressString) {\n-\t\tboolean result = this.expressRunner.checkSyntax(expressString);\n-\t\tif (!result) {\n-\t\t\tthrow new BaseException(\"ql syntax error: \" + expressString);\n-\t\t}\n-\t}\n+    if (StringUtils.isBlank(expressString)) {\n+      throw new BaseException(\"\u516c\u5f0f\u4e0d\u80fd\u4e3a\u7a7a\");\n+    }\n+    Object result = null;\n+    if (properties.isShowExpression()) {\n+      logger.info(\"execute expression: {}\", expressString);\n+    }\n+    try {\n+      result = this.expressRunner.execute(expressString, context, null, properties.isCache(), properties.isTrace());\n+    } catch (Exception e) {\n+      throw new BaseException(\"execute ql error, expression: \" + expressString + \", message: \" + e.getMessage(), e);\n+    }\n+    return result;\n+  }\n+\n+\n+  public void checkSyntax(String expressString) {\n+    boolean result = this.expressRunner.checkSyntax(expressString);\n+    if (!result) {\n+      throw new BaseException(\"ql syntax error: \" + expressString);\n+    }\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}