{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3546",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3546/NodeState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3546/NodeState.java\nindex 8196d8be3dd..398b2f14fc6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3546/NodeState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3546/NodeState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api.txstate;\n \n import java.util.Set;\n@@ -38,39 +39,39 @@ import org.neo4j.storageengine.api.Direction;\n  */\n public interface NodeState extends PropertyContainerState\n {\n-    interface Visitor extends PropertyContainerState.Visitor\n-    {\n-        void visitLabelChanges( long nodeId, Set<Integer> added, Set<Integer> removed )\n-                throws ConstraintValidationException;\n-    }\n+  interface Visitor extends PropertyContainerState.Visitor\n+  {\n+    void visitLabelChanges(long nodeId, Set<Integer> added, Set<Integer> removed)\n+        throws ConstraintValidationException;\n+  }\n \n-    ReadableDiffSets<Integer> labelDiffSets();\n+  ReadableDiffSets<Integer> labelDiffSets();\n \n-    int augmentDegree( Direction direction, int degree );\n+  int augmentDegree(Direction direction, int degree);\n \n-    int augmentDegree( Direction direction, int degree, int typeId );\n+  int augmentDegree(Direction direction, int degree, int typeId);\n \n-    /**\n-     * This method counts all directions separately, i.e.\n-     * total count = count(INCOMING) + count(OUTGOING) + count(LOOPS)\n-     */\n-    int augmentDegree( RelationshipDirection direction, int degree, int typeId );\n+  /**\n+   * This method counts all directions separately, i.e.\n+   * total count = count(INCOMING) + count(OUTGOING) + count(LOOPS)\n+   */\n+  int augmentDegree(RelationshipDirection direction, int degree, int typeId);\n \n-    void accept( NodeState.Visitor visitor ) throws ConstraintValidationException;\n+  void accept(NodeState.Visitor visitor) throws ConstraintValidationException;\n \n-    PrimitiveIntSet relationshipTypes();\n+  PrimitiveIntSet relationshipTypes();\n \n-    long getId();\n+  long getId();\n \n-    @Deprecated\n-    PrimitiveLongIterator getAddedRelationships( Direction direction );\n+  @Deprecated\n+  PrimitiveLongIterator getAddedRelationships(Direction direction);\n \n-    @Deprecated\n-    PrimitiveLongIterator getAddedRelationships( Direction direction, int[] relTypes );\n+  @Deprecated\n+  PrimitiveLongIterator getAddedRelationships(Direction direction, int[] relTypes);\n \n-    PrimitiveLongIterator getAddedRelationships();\n+  PrimitiveLongIterator getAddedRelationships();\n \n-    PrimitiveLongIterator getAddedRelationships( RelationshipDirection direction, int relType );\n+  PrimitiveLongIterator getAddedRelationships(RelationshipDirection direction, int relType);\n \n-    boolean hasRelationshipChanges();\n+  boolean hasRelationshipChanges();\n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3546/NodeState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3546/NodeState.java\nindex 8196d8be3dd..88868e723a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3546/NodeState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3546/NodeState.java\n@@ -40,8 +40,7 @@ public interface NodeState extends PropertyContainerState\n {\n     interface Visitor extends PropertyContainerState.Visitor\n     {\n-        void visitLabelChanges( long nodeId, Set<Integer> added, Set<Integer> removed )\n-                throws ConstraintValidationException;\n+        void visitLabelChanges( long nodeId, Set<Integer> added, Set<Integer> removed ) throws ConstraintValidationException;\n     }\n \n     ReadableDiffSets<Integer> labelDiffSets();\n@@ -67,10 +66,9 @@ public interface NodeState extends PropertyContainerState\n \n     @Deprecated\n     PrimitiveLongIterator getAddedRelationships( Direction direction, int[] relTypes );\n-\n-    PrimitiveLongIterator getAddedRelationships();\n+PrimitiveLongIterator getAddedRelationships();\n \n     PrimitiveLongIterator getAddedRelationships( RelationshipDirection direction, int relType );\n \n     boolean hasRelationshipChanges();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "column": "127",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "44",
                    "column": "129",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "55",
                    "column": "85",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "58",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Annotation 'Deprecated' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Annotation 'Deprecated' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "65",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "66",
                    "column": "9",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "67",
                    "column": "11",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3546/NodeState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3546/NodeState.java\nindex 8196d8be3dd..b2d0dcf8a5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3546/NodeState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3546/NodeState.java\n@@ -20,7 +20,6 @@\n package org.neo4j.storageengine.api.txstate;\n \n import java.util.Set;\n-\n import org.neo4j.collection.primitive.PrimitiveIntSet;\n import org.neo4j.collection.primitive.PrimitiveLongIterator;\n import org.neo4j.internal.kernel.api.exceptions.schema.ConstraintValidationException;\n@@ -36,41 +35,33 @@ import org.neo4j.storageengine.api.Direction;\n  * <li>{@linkplain PropertyContainerState Changes to properties}.</li>\n  * </ul>\n  */\n+\n public interface NodeState extends PropertyContainerState\n {\n     interface Visitor extends PropertyContainerState.Visitor\n     {\n-        void visitLabelChanges( long nodeId, Set<Integer> added, Set<Integer> removed )\n-                throws ConstraintValidationException;\n-    }\n-\n-    ReadableDiffSets<Integer> labelDiffSets();\n-\n-    int augmentDegree( Direction direction, int degree );\n-\n-    int augmentDegree( Direction direction, int degree, int typeId );\n+        void visitLabelChanges( long nodeId, Set<Integer> added, Set<Integer> removed ) throws ConstraintValidationException ;} ReadableDiffSets<Integer> labelDiffSets()\n+                                                                                                                                ;\n+    int augmentDegree( Direction direction, int degree )\n+    ;\n+    int augmentDegree( Direction direction, int degree, int typeId )\n+    ;\n \n     /**\n      * This method counts all directions separately, i.e.\n      * total count = count(INCOMING) + count(OUTGOING) + count(LOOPS)\n      */\n-    int augmentDegree( RelationshipDirection direction, int degree, int typeId );\n-\n-    void accept( NodeState.Visitor visitor ) throws ConstraintValidationException;\n-\n-    PrimitiveIntSet relationshipTypes();\n-\n-    long getId();\n-\n-    @Deprecated\n-    PrimitiveLongIterator getAddedRelationships( Direction direction );\n-\n-    @Deprecated\n-    PrimitiveLongIterator getAddedRelationships( Direction direction, int[] relTypes );\n-\n-    PrimitiveLongIterator getAddedRelationships();\n+    int augmentDegree( RelationshipDirection direction, int degree, int typeId )\n+    ; void accept( NodeState.Visitor visitor ) throws ConstraintValidationException ;\n+    PrimitiveIntSet relationshipTypes()\n+    ; long getId()\n+      ;\n \n-    PrimitiveLongIterator getAddedRelationships( RelationshipDirection direction, int relType );\n+    @Deprecated PrimitiveLongIterator getAddedRelationships( Direction direction )\n+    ;\n \n-    boolean hasRelationshipChanges();\n-}\n+    @Deprecated PrimitiveLongIterator getAddedRelationships( Direction direction, int[] relTypes )\n+    ; PrimitiveLongIterator getAddedRelationships()\n+      ; PrimitiveLongIterator getAddedRelationships( RelationshipDirection direction, int relType )\n+        ; boolean hasRelationshipChanges()\n+          ; }\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}