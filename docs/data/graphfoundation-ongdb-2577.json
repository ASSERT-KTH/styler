{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2577",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2577/MandatoryProperties.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2577/MandatoryProperties.java\nindex 9834ed330f9..8a9749f56d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2577/MandatoryProperties.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2577/MandatoryProperties.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.Arrays;\n@@ -43,193 +44,192 @@ import static org.neo4j.helpers.Numbers.safeCastLongToInt;\n \n public class MandatoryProperties\n {\n-    private final PrimitiveIntObjectMap<int[]> nodes = Primitive.intObjectMap();\n-    private final PrimitiveIntObjectMap<int[]> relationships = Primitive.intObjectMap();\n-    private final StoreAccess storeAccess;\n+  private final PrimitiveIntObjectMap<int[]> nodes = Primitive.intObjectMap();\n+  private final PrimitiveIntObjectMap<int[]> relationships = Primitive.intObjectMap();\n+  private final StoreAccess storeAccess;\n+\n+  public MandatoryProperties(StoreAccess storeAccess)\n+  {\n+    this.storeAccess = storeAccess;\n+    SchemaStorage schemaStorage = new SchemaStorage(storeAccess.getSchemaStore());\n+    for (ConstraintRule rule : constraintsIgnoringMalformed(schemaStorage))\n+    {\n+      if (rule.getConstraintDescriptor().enforcesPropertyExistence())\n+      {\n+        rule.schema().processWith(constraintRecorder);\n+      }\n+    }\n+  }\n \n-    public MandatoryProperties( StoreAccess storeAccess )\n+  private SchemaProcessor constraintRecorder = new SchemaProcessor()\n+  {\n+    @Override\n+    public void processSpecific(LabelSchemaDescriptor schema)\n     {\n-        this.storeAccess = storeAccess;\n-        SchemaStorage schemaStorage = new SchemaStorage( storeAccess.getSchemaStore() );\n-        for ( ConstraintRule rule : constraintsIgnoringMalformed( schemaStorage ) )\n-        {\n-            if ( rule.getConstraintDescriptor().enforcesPropertyExistence() )\n-            {\n-                rule.schema().processWith( constraintRecorder );\n-            }\n-        }\n+      for (int propertyId : schema.getPropertyIds())\n+      {\n+        recordConstraint(schema.getLabelId(), propertyId, nodes);\n+      }\n     }\n \n-    private SchemaProcessor constraintRecorder = new SchemaProcessor()\n+    @Override\n+    public void processSpecific(RelationTypeSchemaDescriptor schema)\n     {\n-        @Override\n-        public void processSpecific( LabelSchemaDescriptor schema )\n+      for (int propertyId : schema.getPropertyIds())\n+      {\n+        recordConstraint(schema.getRelTypeId(), propertyId, relationships);\n+      }\n+    }\n+  };\n+\n+  public Function<NodeRecord, Check<NodeRecord, ConsistencyReport.NodeConsistencyReport>> forNodes(\n+      final ConsistencyReporter reporter)\n+  {\n+    return node ->\n+    {\n+      PrimitiveIntSet keys = null;\n+      for (long labelId : NodeLabelReader.getListOfLabels(node, storeAccess.getNodeDynamicLabelStore()))\n+      {\n+        // labelId _is_ actually an int. A technical detail in the store format has these come in a long[]\n+        int[] propertyKeys = nodes.get(safeCastLongToInt(labelId));\n+        if (propertyKeys != null)\n         {\n-            for ( int propertyId : schema.getPropertyIds() )\n-            {\n-                recordConstraint( schema.getLabelId(), propertyId, nodes );\n-            }\n+          if (keys == null)\n+          {\n+            keys = Primitive.intSet(16);\n+          }\n+          for (int key : propertyKeys)\n+          {\n+            keys.add(key);\n+          }\n         }\n+      }\n+      return keys != null\n+          ? new RealCheck<>(node, ConsistencyReport.NodeConsistencyReport.class, reporter,\n+          RecordType.NODE, keys)\n+          : MandatoryProperties.noCheck();\n+    };\n+  }\n \n-        @Override\n-        public void processSpecific( RelationTypeSchemaDescriptor schema )\n+  public Function<RelationshipRecord, Check<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport>>\n+  forRelationships(final ConsistencyReporter reporter)\n+  {\n+    return relationship ->\n+    {\n+      int[] propertyKeys = relationships.get(relationship.getType());\n+      if (propertyKeys != null)\n+      {\n+        PrimitiveIntSet keys = Primitive.intSet(propertyKeys.length);\n+        for (int key : propertyKeys)\n         {\n-            for ( int propertyId : schema.getPropertyIds() )\n-            {\n-                recordConstraint( schema.getRelTypeId(), propertyId, relationships );\n-            }\n+          keys.add(key);\n         }\n+        return new RealCheck<>(relationship, ConsistencyReport.RelationshipConsistencyReport.class,\n+            reporter, RecordType.RELATIONSHIP, keys);\n+      }\n+      return noCheck();\n     };\n+  }\n \n-    public Function<NodeRecord,Check<NodeRecord,ConsistencyReport.NodeConsistencyReport>> forNodes(\n-            final ConsistencyReporter reporter )\n+  private Iterable<ConstraintRule> constraintsIgnoringMalformed(SchemaStorage schemaStorage)\n+  {\n+    return schemaStorage::constraintsGetAllIgnoreMalformed;\n+  }\n+\n+  private static void recordConstraint(int labelOrRelType, int propertyKey, PrimitiveIntObjectMap<int[]> storage)\n+  {\n+    int[] propertyKeys = storage.get(labelOrRelType);\n+    if (propertyKeys == null)\n     {\n-        return node ->\n-        {\n-            PrimitiveIntSet keys = null;\n-            for ( long labelId : NodeLabelReader.getListOfLabels( node, storeAccess.getNodeDynamicLabelStore() ) )\n-            {\n-                // labelId _is_ actually an int. A technical detail in the store format has these come in a long[]\n-                int[] propertyKeys = nodes.get( safeCastLongToInt( labelId ) );\n-                if ( propertyKeys != null )\n-                {\n-                    if ( keys == null )\n-                    {\n-                        keys = Primitive.intSet( 16 );\n-                    }\n-                    for ( int key : propertyKeys )\n-                    {\n-                        keys.add( key );\n-                    }\n-                }\n-            }\n-            return keys != null\n-                    ? new RealCheck<>( node, ConsistencyReport.NodeConsistencyReport.class, reporter,\n-                            RecordType.NODE, keys )\n-                    : MandatoryProperties.noCheck();\n-        };\n+      propertyKeys = new int[] {propertyKey};\n+    } else\n+    {\n+      propertyKeys = Arrays.copyOf(propertyKeys, propertyKeys.length + 1);\n+      propertyKeys[propertyKeys.length - 1] = propertyKey;\n     }\n-\n-    public Function<RelationshipRecord,Check<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>>\n-            forRelationships( final ConsistencyReporter reporter )\n+    storage.put(labelOrRelType, propertyKeys);\n+  }\n+\n+  public interface Check<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n+      extends AutoCloseable\n+  {\n+    void receive(int[] keys);\n+\n+    @Override\n+    void close();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static <RECORD extends PrimitiveRecord,\n+      REPORT extends ConsistencyReport.PrimitiveConsistencyReport> Check<RECORD, REPORT> noCheck()\n+  {\n+    return NONE;\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  private static final Check NONE = new Check()\n+  {\n+    @Override\n+    public void receive(int[] keys)\n     {\n-        return relationship ->\n-        {\n-            int[] propertyKeys = relationships.get( relationship.getType() );\n-            if ( propertyKeys != null )\n-            {\n-                PrimitiveIntSet keys = Primitive.intSet( propertyKeys.length );\n-                for ( int key : propertyKeys )\n-                {\n-                    keys.add( key );\n-                }\n-                return new RealCheck<>( relationship, ConsistencyReport.RelationshipConsistencyReport.class,\n-                        reporter, RecordType.RELATIONSHIP, keys );\n-            }\n-            return noCheck();\n-        };\n     }\n \n-    private Iterable<ConstraintRule> constraintsIgnoringMalformed( SchemaStorage schemaStorage )\n+    @Override\n+    public void close()\n     {\n-        return schemaStorage::constraintsGetAllIgnoreMalformed;\n     }\n \n-    private static void recordConstraint( int labelOrRelType, int propertyKey, PrimitiveIntObjectMap<int[]> storage )\n+    @Override\n+    public String toString()\n     {\n-        int[] propertyKeys = storage.get( labelOrRelType );\n-        if ( propertyKeys == null )\n-        {\n-            propertyKeys = new int[]{propertyKey};\n-        }\n-        else\n-        {\n-            propertyKeys = Arrays.copyOf( propertyKeys, propertyKeys.length + 1 );\n-            propertyKeys[propertyKeys.length - 1] = propertyKey;\n-        }\n-        storage.put( labelOrRelType, propertyKeys );\n+      return \"NONE\";\n     }\n-\n-    public interface Check<RECORD extends PrimitiveRecord,REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            extends AutoCloseable\n+  };\n+\n+  private static class RealCheck<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n+      implements Check<RECORD, REPORT>\n+  {\n+    private final RECORD record;\n+    private final PrimitiveIntSet mandatoryKeys;\n+    private final Class<REPORT> reportClass;\n+    private final ConsistencyReporter reporter;\n+    private final RecordType recordType;\n+\n+    RealCheck(RECORD record, Class<REPORT> reportClass, ConsistencyReporter reporter, RecordType recordType,\n+              PrimitiveIntSet mandatoryKeys)\n     {\n-        void receive( int[] keys );\n-\n-        @Override\n-        void close();\n+      this.record = record;\n+      this.reportClass = reportClass;\n+      this.reporter = reporter;\n+      this.recordType = recordType;\n+      this.mandatoryKeys = mandatoryKeys;\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private static <RECORD extends PrimitiveRecord,\n-            REPORT extends ConsistencyReport.PrimitiveConsistencyReport> Check<RECORD,REPORT> noCheck()\n+    @Override\n+    public void receive(int[] keys)\n     {\n-        return NONE;\n+      for (int key : keys)\n+      {\n+        mandatoryKeys.remove(key);\n+      }\n     }\n \n-    @SuppressWarnings( \"rawtypes\" )\n-    private static final Check NONE = new Check()\n+    @Override\n+    public void close()\n     {\n-        @Override\n-        public void receive( int[] keys )\n-        {\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-        }\n-\n-        @Override\n-        public String toString()\n+      if (!mandatoryKeys.isEmpty())\n+      {\n+        for (PrimitiveIntIterator key = mandatoryKeys.iterator(); key.hasNext(); )\n         {\n-            return \"NONE\";\n+          reporter.report(record, reportClass, recordType).missingMandatoryProperty(key.next());\n         }\n-    };\n+      }\n+    }\n \n-    private static class RealCheck<RECORD extends PrimitiveRecord,REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            implements Check<RECORD,REPORT>\n+    @Override\n+    public String toString()\n     {\n-        private final RECORD record;\n-        private final PrimitiveIntSet mandatoryKeys;\n-        private final Class<REPORT> reportClass;\n-        private final ConsistencyReporter reporter;\n-        private final RecordType recordType;\n-\n-        RealCheck( RECORD record, Class<REPORT> reportClass, ConsistencyReporter reporter, RecordType recordType,\n-                PrimitiveIntSet mandatoryKeys )\n-        {\n-            this.record = record;\n-            this.reportClass = reportClass;\n-            this.reporter = reporter;\n-            this.recordType = recordType;\n-            this.mandatoryKeys = mandatoryKeys;\n-        }\n-\n-        @Override\n-        public void receive( int[] keys )\n-        {\n-            for ( int key : keys )\n-            {\n-                mandatoryKeys.remove( key );\n-            }\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            if ( !mandatoryKeys.isEmpty() )\n-            {\n-                for ( PrimitiveIntIterator key = mandatoryKeys.iterator(); key.hasNext(); )\n-                {\n-                    reporter.report( record, reportClass, recordType ).missingMandatoryProperty( key.next() );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"Mandatory properties: \" + mandatoryKeys;\n-        }\n+      return \"Mandatory properties: \" + mandatoryKeys;\n     }\n+  }\n }\n",
            "diff_size": 259
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2577/MandatoryProperties.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2577/MandatoryProperties.java\nindex 9834ed330f9..6989dbeef62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2577/MandatoryProperties.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2577/MandatoryProperties.java\n@@ -81,8 +81,7 @@ public class MandatoryProperties\n         }\n     };\n \n-    public Function<NodeRecord,Check<NodeRecord,ConsistencyReport.NodeConsistencyReport>> forNodes(\n-            final ConsistencyReporter reporter )\n+    public Function<NodeRecord,Check<NodeRecord,ConsistencyReport.NodeConsistencyReport>> forNodes( final ConsistencyReporter reporter )\n     {\n         return node ->\n         {\n@@ -103,15 +102,12 @@ public class MandatoryProperties\n                     }\n                 }\n             }\n-            return keys != null\n-                    ? new RealCheck<>( node, ConsistencyReport.NodeConsistencyReport.class, reporter,\n-                            RecordType.NODE, keys )\n-                    : MandatoryProperties.noCheck();\n-        };\n+            return keys != null ? new RealCheck<>( node, ConsistencyReport.NodeConsistencyReport.class, reporter,\n+                            RecordType.NODE, keys ) : MandatoryProperties.noCheck();\n+    };\n     }\n \n-    public Function<RelationshipRecord,Check<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>>\n-            forRelationships( final ConsistencyReporter reporter )\n+    public Function<RelationshipRecord,Check<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>> forRelationships( final ConsistencyReporter reporter )\n     {\n         return relationship ->\n         {\n@@ -126,7 +122,8 @@ public class MandatoryProperties\n                 return new RealCheck<>( relationship, ConsistencyReport.RelationshipConsistencyReport.class,\n                         reporter, RecordType.RELATIONSHIP, keys );\n             }\n-            return noCheck();\n+\n+return noCheck();\n         };\n     }\n \n@@ -150,9 +147,8 @@ public class MandatoryProperties\n         storage.put( labelOrRelType, propertyKeys );\n     }\n \n-    public interface Check<RECORD extends PrimitiveRecord,REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            extends AutoCloseable\n-    {\n+    public interface Check<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> extends AutoCloseable\n+{\n         void receive( int[] keys );\n \n         @Override\n@@ -162,7 +158,7 @@ public class MandatoryProperties\n     @SuppressWarnings( \"unchecked\" )\n     private static <RECORD extends PrimitiveRecord,\n             REPORT extends ConsistencyReport.PrimitiveConsistencyReport> Check<RECORD,REPORT> noCheck()\n-    {\n+{\n         return NONE;\n     }\n \n@@ -186,8 +182,7 @@ public class MandatoryProperties\n         }\n     };\n \n-    private static class RealCheck<RECORD extends PrimitiveRecord,REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            implements Check<RECORD,REPORT>\n+    private static class RealCheck<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> implements Check<RECORD,REPORT>\n     {\n         private final RECORD record;\n         private final PrimitiveIntSet mandatoryKeys;\n@@ -219,7 +214,8 @@ public class MandatoryProperties\n         {\n             if ( !mandatoryKeys.isEmpty() )\n             {\n-                for ( PrimitiveIntIterator key = mandatoryKeys.iterator(); key.hasNext(); )\n+                for ( PrimitiveIntIterator key = mandatoryKeys.iterator();\n+key.hasNext(); )\n                 {\n                     reporter.report( record, reportClass, recordType ).missingMandatoryProperty( key.next() );\n                 }\n@@ -232,4 +228,4 @@ public class MandatoryProperties\n             return \"Mandatory properties: \" + mandatoryKeys;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "90",
                    "column": "20",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "28",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "column": "24",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "121",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "27",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "162",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "20",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "168",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "column": "36",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "187",
                    "column": "36",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "207",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "207",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2577/MandatoryProperties.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2577/MandatoryProperties.java\nindex 9834ed330f9..f511f92d65b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2577/MandatoryProperties.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2577/MandatoryProperties.java\n@@ -21,7 +21,6 @@ package org.neo4j.consistency.checking.full;\n \n import java.util.Arrays;\n import java.util.function.Function;\n-\n import org.neo4j.collection.primitive.Primitive;\n import org.neo4j.collection.primitive.PrimitiveIntIterator;\n import org.neo4j.collection.primitive.PrimitiveIntObjectMap;\n@@ -38,7 +37,6 @@ import org.neo4j.kernel.impl.store.record.ConstraintRule;\n import org.neo4j.kernel.impl.store.record.NodeRecord;\n import org.neo4j.kernel.impl.store.record.PrimitiveRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n-\n import static org.neo4j.helpers.Numbers.safeCastLongToInt;\n \n public class MandatoryProperties\n@@ -51,7 +49,8 @@ public class MandatoryProperties\n     {\n         this.storeAccess = storeAccess;\n         SchemaStorage schemaStorage = new SchemaStorage( storeAccess.getSchemaStore() );\n-        for ( ConstraintRule rule : constraintsIgnoringMalformed( schemaStorage ) )\n+        for( ConstraintRule rule : constraintsIgnoringMalformed( schemaStorage )\n+        )\n         {\n             if ( rule.getConstraintDescriptor().enforcesPropertyExistence() )\n             {\n@@ -61,73 +60,74 @@ public class MandatoryProperties\n     }\n \n     private SchemaProcessor constraintRecorder = new SchemaProcessor()\n+{\n+    @Override\n+    public void processSpecific( LabelSchemaDescriptor schema )\n     {\n-        @Override\n-        public void processSpecific( LabelSchemaDescriptor schema )\n+        for( int propertyId : schema.getPropertyIds()\n+        )\n         {\n-            for ( int propertyId : schema.getPropertyIds() )\n-            {\n-                recordConstraint( schema.getLabelId(), propertyId, nodes );\n-            }\n+            recordConstraint( schema.getLabelId(), propertyId, nodes );\n         }\n+    }\n \n-        @Override\n-        public void processSpecific( RelationTypeSchemaDescriptor schema )\n+    @Override\n+    public void processSpecific( RelationTypeSchemaDescriptor schema )\n+    {\n+        for( int propertyId : schema.getPropertyIds()\n+        )\n         {\n-            for ( int propertyId : schema.getPropertyIds() )\n-            {\n-                recordConstraint( schema.getRelTypeId(), propertyId, relationships );\n-            }\n+            recordConstraint( schema.getRelTypeId(), propertyId, relationships );\n         }\n-    };\n+    }\n+};\n \n-    public Function<NodeRecord,Check<NodeRecord,ConsistencyReport.NodeConsistencyReport>> forNodes(\n-            final ConsistencyReporter reporter )\n+    public Function<NodeRecord,Check<NodeRecord,ConsistencyReport.NodeConsistencyReport>> forNodes( final ConsistencyReporter reporter )\n     {\n         return node ->\n-        {\n-            PrimitiveIntSet keys = null;\n-            for ( long labelId : NodeLabelReader.getListOfLabels( node, storeAccess.getNodeDynamicLabelStore() ) )\n-            {\n+               {\n+                   PrimitiveIntSet keys = null;\n+                   for( long labelId : NodeLabelReader.getListOfLabels( node, storeAccess.getNodeDynamicLabelStore() )\n+                   )\n+                   {\n                 // labelId _is_ actually an int. A technical detail in the store format has these come in a long[]\n-                int[] propertyKeys = nodes.get( safeCastLongToInt( labelId ) );\n-                if ( propertyKeys != null )\n-                {\n-                    if ( keys == null )\n-                    {\n-                        keys = Primitive.intSet( 16 );\n-                    }\n-                    for ( int key : propertyKeys )\n-                    {\n-                        keys.add( key );\n-                    }\n-                }\n-            }\n-            return keys != null\n-                    ? new RealCheck<>( node, ConsistencyReport.NodeConsistencyReport.class, reporter,\n-                            RecordType.NODE, keys )\n-                    : MandatoryProperties.noCheck();\n-        };\n+                       int[] propertyKeys = nodes.get( safeCastLongToInt( labelId ) );\n+                       if ( propertyKeys != null )\n+                       {\n+                           if ( keys == null )\n+                           {\n+                               keys = Primitive.intSet( 16 );\n+                           }\n+\n+                           for( int key : propertyKeys)\n+                           {\n+                               keys.add( key );\n+                           }\n+                       }\n+                   }\n+\n+                   return keys != null ? new RealCheck<>( node, ConsistencyReport.NodeConsistencyReport.class, reporter, RecordType.NODE, keys ) : MandatoryProperties.noCheck();\n+               };\n     }\n \n-    public Function<RelationshipRecord,Check<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>>\n-            forRelationships( final ConsistencyReporter reporter )\n+    public Function<RelationshipRecord,Check<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport>> forRelationships( final ConsistencyReporter reporter )\n     {\n         return relationship ->\n-        {\n-            int[] propertyKeys = relationships.get( relationship.getType() );\n-            if ( propertyKeys != null )\n-            {\n-                PrimitiveIntSet keys = Primitive.intSet( propertyKeys.length );\n-                for ( int key : propertyKeys )\n-                {\n-                    keys.add( key );\n-                }\n-                return new RealCheck<>( relationship, ConsistencyReport.RelationshipConsistencyReport.class,\n-                        reporter, RecordType.RELATIONSHIP, keys );\n-            }\n-            return noCheck();\n-        };\n+               {\n+                   int[] propertyKeys = relationships.get( relationship.getType() );\n+                   if ( propertyKeys != null )\n+                   {\n+                       PrimitiveIntSet keys = Primitive.intSet( propertyKeys.length );\n+                       for( int key : propertyKeys)\n+                       {\n+                           keys.add( key );\n+                       }\n+\n+                       return new RealCheck<>( relationship, ConsistencyReport.RelationshipConsistencyReport.class, reporter, RecordType.RELATIONSHIP, keys );\n+                   }\n+\n+                   return noCheck();\n+               };\n     }\n \n     private Iterable<ConstraintRule> constraintsIgnoringMalformed( SchemaStorage schemaStorage )\n@@ -147,47 +147,44 @@ public class MandatoryProperties\n             propertyKeys = Arrays.copyOf( propertyKeys, propertyKeys.length + 1 );\n             propertyKeys[propertyKeys.length - 1] = propertyKey;\n         }\n+\n         storage.put( labelOrRelType, propertyKeys );\n     }\n \n-    public interface Check<RECORD extends PrimitiveRecord,REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            extends AutoCloseable\n-    {\n-        void receive( int[] keys );\n+    public interface Check< RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> extends AutoCloseable\n+{\n+   void receive( int[] keys )\n+   ;\n \n-        @Override\n-        void close();\n-    }\n+   @Override void close()\n+   ; }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private static <RECORD extends PrimitiveRecord,\n-            REPORT extends ConsistencyReport.PrimitiveConsistencyReport> Check<RECORD,REPORT> noCheck()\n+    @ SuppressWarnings( \"unchecked\")\n+    private static < RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> Check<RECORD,REPORT> noCheck()\n     {\n         return NONE;\n     }\n \n-    @SuppressWarnings( \"rawtypes\" )\n+    @ SuppressWarnings( \"rawtypes\")\n     private static final Check NONE = new Check()\n+{\n+    @Override\n+    public void receive( int[] keys )\n     {\n-        @Override\n-        public void receive( int[] keys )\n-        {\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-        }\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"NONE\";\n-        }\n-    };\n+    @Override\n+    public void close()\n+    {\n+    }\n \n-    private static class RealCheck<RECORD extends PrimitiveRecord,REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-            implements Check<RECORD,REPORT>\n+    @Override\n+    public String toString()\n+    {\n+        return \"NONE\";\n+    }\n+};\n+    private static class RealCheck < RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> implements Check<RECORD,REPORT>\n     {\n         private final RECORD record;\n         private final PrimitiveIntSet mandatoryKeys;\n@@ -195,8 +192,7 @@ public class MandatoryProperties\n         private final ConsistencyReporter reporter;\n         private final RecordType recordType;\n \n-        RealCheck( RECORD record, Class<REPORT> reportClass, ConsistencyReporter reporter, RecordType recordType,\n-                PrimitiveIntSet mandatoryKeys )\n+        RealCheck( RECORD record, Class<REPORT> reportClass, ConsistencyReporter reporter, RecordType recordType, PrimitiveIntSet mandatoryKeys )\n         {\n             this.record = record;\n             this.reportClass = reportClass;\n@@ -208,7 +204,7 @@ public class MandatoryProperties\n         @Override\n         public void receive( int[] keys )\n         {\n-            for ( int key : keys )\n+            for( int key : keys)\n             {\n                 mandatoryKeys.remove( key );\n             }\n@@ -217,7 +213,7 @@ public class MandatoryProperties\n         @Override\n         public void close()\n         {\n-            if ( !mandatoryKeys.isEmpty() )\n+            if ( ! mandatoryKeys.isEmpty() )\n             {\n                 for ( PrimitiveIntIterator key = mandatoryKeys.iterator(); key.hasNext(); )\n                 {\n@@ -232,4 +228,4 @@ public class MandatoryProperties\n             return \"Mandatory properties: \" + mandatoryKeys;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 109
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}