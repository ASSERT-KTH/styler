{
    "project_name": "Angel-ML-angel",
    "error_id": "660",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/660/IncrementRows.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/660/IncrementRows.java\nindex c71c57c113d..1cfee4a212b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/660/IncrementRows.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/660/IncrementRows.java\n@@ -61,8 +61,8 @@ public class IncrementRows extends UpdateFunc {\n    * type\n    *\n    * @param matrixId matrix id\n-   * @param rowId row id\n-   * @param part partition key\n+   * @param rowId    row id\n+   * @param part     partition key\n    * @return inner vector\n    */\n   protected Vector getVector(int matrixId, int rowId, PartitionKey part) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/660/IncrementRows.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/660/IncrementRows.java\nindex c71c57c113d..25fb760c5af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/660/IncrementRows.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/660/IncrementRows.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.matrix.psf.update.update;\n \n import com.tencent.angel.PartitionKey;\n@@ -69,6 +68,6 @@ public class IncrementRows extends UpdateFunc {\n     ServerMatrix matrix = psContext.getMatrixStorageManager().getMatrix(matrixId);\n     ServerRow psRow = ((RowBasedPartition) matrix.getPartition(part.getPartitionId()))\n         .getRow(rowId);\n-    return ServerRowUtils.getVector(psRow);\n+return ServerRowUtils.getVector(psRow);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/660/IncrementRows.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/660/IncrementRows.java\nindex c71c57c113d..bbc785c167d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/660/IncrementRows.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/660/IncrementRows.java\n@@ -33,11 +33,13 @@ import java.util.List;\n /**\n  * Increment PS matrix rows\n  */\n+\n public class IncrementRows extends UpdateFunc {\n \n   /**\n    * Create a new UpdateParam\n    */\n+\n   public IncrementRows(UpdateParam param) {\n     super(param);\n   }\n@@ -51,8 +53,7 @@ public class IncrementRows extends UpdateFunc {\n     PartIncrementRowsParam partUpdateRowsParam = (PartIncrementRowsParam) partParam;\n     List<RowUpdateSplit> updates = partUpdateRowsParam.getUpdates();\n     for (RowUpdateSplit update : updates) {\n-      getVector(partUpdateRowsParam.getMatrixId(), update.getRowId(), partParam.getPartKey())\n-          .iadd(update.getVector());\n+      getVector(partUpdateRowsParam.getMatrixId(), update.getRowId(), partParam.getPartKey()).iadd(update.getVector());\n     }\n   }\n \n@@ -65,10 +66,11 @@ public class IncrementRows extends UpdateFunc {\n    * @param part partition key\n    * @return inner vector\n    */\n+\n   protected Vector getVector(int matrixId, int rowId, PartitionKey part) {\n     ServerMatrix matrix = psContext.getMatrixStorageManager().getMatrix(matrixId);\n-    ServerRow psRow = ((RowBasedPartition) matrix.getPartition(part.getPartitionId()))\n-        .getRow(rowId);\n+    ServerRow psRow = ((RowBasedPartition) matrix.getPartition(part.getPartitionId())).getRow(rowId);\n     return ServerRowUtils.getVector(psRow);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}