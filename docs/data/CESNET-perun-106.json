{
    "project_name": "CESNET-perun",
    "error_id": "106",
    "information": {
        "errors": [
            {
                "line": "150",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\tattr.setFriendlyName(\"projectDataQuota\");\n\t\tattr.setDisplayName(\"Project soft data quota.\");\n\t\tattr.setType(String.class.getName());\t\t\n\t\tattr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n\t\treturn attr;\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\nindex d4351a2db73..8677b3d0ae1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n@@ -147,7 +147,7 @@ public class urn_perun_group_resource_attribute_def_def_projectDataQuota extends\n \t\tattr.setNamespace(AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF);\n \t\tattr.setFriendlyName(\"projectDataQuota\");\n \t\tattr.setDisplayName(\"Project soft data quota.\");\n-\t\tattr.setType(String.class.getName());\t\t\n+\t\tattr.setType(String.class.getName());\n \t\tattr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n \t\treturn attr;\n \t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\nindex d4351a2db73..f5c42e8a82f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n@@ -15,6 +15,7 @@ import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueExce\n import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n import cz.metacentrum.perun.core.implApi.modules.attributes.ResourceGroupAttributesModuleAbstract;\n import cz.metacentrum.perun.core.implApi.modules.attributes.ResourceGroupAttributesModuleImplApi;\n+\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.math.BigDecimal;\n@@ -26,129 +27,151 @@ import java.math.BigDecimal;\n  */\n public class urn_perun_group_resource_attribute_def_def_projectDataQuota extends ResourceGroupAttributesModuleAbstract implements ResourceGroupAttributesModuleImplApi {\n \n-\tprivate static final String A_GR_projectDataLimit = AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF + \":projectDataLimit\";\n-\tPattern numberPattern = Pattern.compile(\"[0-9]+[.]?[0-9]*\");\n-\tPattern letterPattern = Pattern.compile(\"[A-Z]\");\n-\tPattern testingPattern = Pattern.compile(\"^[0-9]+([.][0-9]+)?[KMGTPE]$\");\n-\n-\t//Definition of K = KB, M = MB etc.\n-\tlong K = 1024;\n-\tlong M = K * 1024;\n-\tlong G = M * 1024;\n-\tlong T = G * 1024;\n-\tlong P = T * 1024;\n-\tlong E = P * 1024;\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSessionImpl perunSession, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tAttribute attrProjectDataLimit = null;\n-\t\tString projectDataQuota = null;\n-\t\tString projectDataLimit = null;\n-\n-\t\tString projectDataQuotaNumber = null;\n-\t\tString projectDataQuotaLetter = null;\n-\t\tString projectDataLimitNumber = null;\n-\t\tString projectDataLimitLetter = null;\n-\n-\t\t//Check if attribute value has the right exp pattern (can be null)\n-\t\tif(attribute.getValue() != null) {\n-\t\t\tMatcher testMatcher = testingPattern.matcher((String) attribute.getValue());\n-\t\t\tif(!testMatcher.find()) throw new WrongAttributeValueException(attribute, resource, group, \"Format of quota must be something like ex.: 1.30M or 2500K, but it is \" + attribute.getValue());\n-\t\t}\n-\n-\t\t//Get ProjectDataLimit attribute\n-\t\ttry {\n-\t\t\tattrProjectDataLimit = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, resource, group, A_GR_projectDataLimit);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute with projectDataLimit from resource \" + resource.getId() + \" and group \" + group.getId() + \" could not obtain.\", ex);\n-\t\t}\n-\n-\t\t//Get ProjectDataQuota value\n-\t\tif (attribute.getValue() != null) {\n-\t\t\tprojectDataQuota = (String) attribute.getValue();\n-\t\t\tMatcher numberMatcher = numberPattern.matcher(projectDataQuota);\n-\t\t\tMatcher letterMatcher = letterPattern.matcher(projectDataQuota);\n-\t\t\tnumberMatcher.find();\n-\t\t\tletterMatcher.find();\n-\t\t\ttry {\n-\t\t\t\tprojectDataQuotaNumber = projectDataQuota.substring(numberMatcher.start(), numberMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataQuotaNumber = null;\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tprojectDataQuotaLetter = projectDataQuota.substring(letterMatcher.start(), letterMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataQuotaLetter = \"G\";\n-\t\t\t}\n-\t\t}\n-\t\tBigDecimal quotaNumber;\n-\t\tif(projectDataQuotaNumber != null) quotaNumber = new BigDecimal(projectDataQuotaNumber.replace(',', '.'));\n-\t\telse quotaNumber = new BigDecimal(\"0\");\n-\t\tif (quotaNumber != null && quotaNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n-\t\t\tthrow new WrongAttributeValueException(attribute, attribute + \" can't be less than 0.\");\n-\t\t}\n-\n-\t\t//Get ProjectDataLimit value\n-\t\tif (attrProjectDataLimit != null && attrProjectDataLimit.getValue() != null) {\n-\t\t\tprojectDataLimit = (String) attrProjectDataLimit.getValue();\n-\t\t\tMatcher numberMatcher = numberPattern.matcher(projectDataLimit);\n-\t\t\tMatcher letterMatcher = letterPattern.matcher(projectDataLimit);\n-\t\t\tnumberMatcher.find();\n-\t\t\tletterMatcher.find();\n-\t\t\ttry {\n-\t\t\t\tprojectDataLimitNumber = projectDataLimit.substring(numberMatcher.start(), numberMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataLimitNumber = null;\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tprojectDataLimitLetter = projectDataLimit.substring(letterMatcher.start(), letterMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataLimitLetter = \"G\";\n-\t\t\t}\n-\t\t}\n-\t\tBigDecimal limitNumber;\n-\t\tif(projectDataLimitNumber != null) limitNumber = new BigDecimal(projectDataLimitNumber.replace(',', '.'));\n-\t\telse limitNumber = new BigDecimal(\"0\");\n-\n-\t\tif (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n-\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attrProjectDataLimit + \" cant be less than 0.\");\n-\t\t}\n-\n-\t\t//Compare ProjectDataQuota with ProjectDataLimit\n-\t\tif (quotaNumber == null || quotaNumber.compareTo(BigDecimal.valueOf(0)) == 0) {\n-\t\t\tif (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n-\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, \"Try to set unlimited quota, but limit is still \" + projectDataLimitNumber + projectDataLimitLetter);\n-\t\t\t}\n-\t\t} else if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n-\n-\t\t\tif(projectDataLimitLetter.equals(\"K\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(K));\n-\t\t\telse if(projectDataLimitLetter.equals(\"M\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(M));\n-\t\t\telse if(projectDataLimitLetter.equals(\"T\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(T));\n-\t\t\telse if(projectDataLimitLetter.equals(\"P\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(P));\n-\t\t\telse if(projectDataLimitLetter.equals(\"E\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(E));\n-\t\t\telse limitNumber = limitNumber.multiply(BigDecimal.valueOf(G));\n-\n-\t\t\tif(projectDataQuotaLetter.equals(\"K\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(K));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"M\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(M));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"T\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(T));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"P\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(P));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"E\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(E));\n-\t\t\telse quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(G));\n-\n-\t\t\tif (limitNumber.compareTo(quotaNumber) < 0) {\n-\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attribute + \" must be less than or equals to \" + projectDataLimit);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic AttributeDefinition getAttributeDefinition() {\n-\t\tAttributeDefinition attr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF);\n-\t\tattr.setFriendlyName(\"projectDataQuota\");\n-\t\tattr.setDisplayName(\"Project soft data quota.\");\n-\t\tattr.setType(String.class.getName());\t\t\n-\t\tattr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n-\t\treturn attr;\n-\t}\n+    private static final String A_GR_projectDataLimit = AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF + \":projectDataLimit\";\n+    Pattern numberPattern = Pattern.compile(\"[0-9]+[.]?[0-9]*\");\n+    Pattern letterPattern = Pattern.compile(\"[A-Z]\");\n+    Pattern testingPattern = Pattern.compile(\"^[0-9]+([.][0-9]+)?[KMGTPE]$\");\n+\n+    //Definition of K = KB, M = MB etc.\n+    long K = 1024;\n+    long M = K * 1024;\n+    long G = M * 1024;\n+    long T = G * 1024;\n+    long P = T * 1024;\n+    long E = P * 1024;\n+\n+    @Override\n+    public void checkAttributeValue(PerunSessionImpl perunSession, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+        Attribute attrProjectDataLimit = null;\n+        String projectDataQuota = null;\n+        String projectDataLimit = null;\n+\n+        String projectDataQuotaNumber = null;\n+        String projectDataQuotaLetter = null;\n+        String projectDataLimitNumber = null;\n+        String projectDataLimitLetter = null;\n+\n+        //Check if attribute value has the right exp pattern (can be null)\n+        if (attribute.getValue() != null) {\n+            Matcher testMatcher = testingPattern.matcher((String) attribute.getValue());\n+            if (!testMatcher.find()) {\n+                throw new WrongAttributeValueException(attribute, resource, group, \"Format of quota must be something like ex.: 1.30M or 2500K, but it is \" + attribute.getValue());\n+            }\n+        }\n+\n+        //Get ProjectDataLimit attribute\n+        try {\n+            attrProjectDataLimit = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, resource, group, A_GR_projectDataLimit);\n+        } catch (AttributeNotExistsException ex) {\n+            throw new ConsistencyErrorException(\"Attribute with projectDataLimit from resource \" + resource.getId() + \" and group \" + group.getId() + \" could not obtain.\", ex);\n+        }\n+\n+        //Get ProjectDataQuota value\n+        if (attribute.getValue() != null) {\n+            projectDataQuota = (String) attribute.getValue();\n+            Matcher numberMatcher = numberPattern.matcher(projectDataQuota);\n+            Matcher letterMatcher = letterPattern.matcher(projectDataQuota);\n+            numberMatcher.find();\n+            letterMatcher.find();\n+            try {\n+                projectDataQuotaNumber = projectDataQuota.substring(numberMatcher.start(), numberMatcher.end());\n+            } catch (IllegalStateException ex) {\n+                projectDataQuotaNumber = null;\n+            }\n+            try {\n+                projectDataQuotaLetter = projectDataQuota.substring(letterMatcher.start(), letterMatcher.end());\n+            } catch (IllegalStateException ex) {\n+                projectDataQuotaLetter = \"G\";\n+            }\n+        }\n+        BigDecimal quotaNumber;\n+        if (projectDataQuotaNumber != null) {\n+            quotaNumber = new BigDecimal(projectDataQuotaNumber.replace(',', '.'));\n+        } else {\n+            quotaNumber = new BigDecimal(\"0\");\n+        }\n+        if (quotaNumber != null && quotaNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n+            throw new WrongAttributeValueException(attribute, attribute + \" can't be less than 0.\");\n+        }\n+\n+        //Get ProjectDataLimit value\n+        if (attrProjectDataLimit != null && attrProjectDataLimit.getValue() != null) {\n+            projectDataLimit = (String) attrProjectDataLimit.getValue();\n+            Matcher numberMatcher = numberPattern.matcher(projectDataLimit);\n+            Matcher letterMatcher = letterPattern.matcher(projectDataLimit);\n+            numberMatcher.find();\n+            letterMatcher.find();\n+            try {\n+                projectDataLimitNumber = projectDataLimit.substring(numberMatcher.start(), numberMatcher.end());\n+            } catch (IllegalStateException ex) {\n+                projectDataLimitNumber = null;\n+            }\n+            try {\n+                projectDataLimitLetter = projectDataLimit.substring(letterMatcher.start(), letterMatcher.end());\n+            } catch (IllegalStateException ex) {\n+                projectDataLimitLetter = \"G\";\n+            }\n+        }\n+        BigDecimal limitNumber;\n+        if (projectDataLimitNumber != null) {\n+            limitNumber = new BigDecimal(projectDataLimitNumber.replace(',', '.'));\n+        } else {\n+            limitNumber = new BigDecimal(\"0\");\n+        }\n+\n+        if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n+            throw new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attrProjectDataLimit + \" cant be less than 0.\");\n+        }\n+\n+        //Compare ProjectDataQuota with ProjectDataLimit\n+        if (quotaNumber == null || quotaNumber.compareTo(BigDecimal.valueOf(0)) == 0) {\n+            if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n+                throw new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, \"Try to set unlimited quota, but limit is still \" + projectDataLimitNumber + projectDataLimitLetter);\n+            }\n+        } else if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n+\n+            if (projectDataLimitLetter.equals(\"K\")) {\n+                limitNumber = limitNumber.multiply(BigDecimal.valueOf(K));\n+            } else if (projectDataLimitLetter.equals(\"M\")) {\n+                limitNumber = limitNumber.multiply(BigDecimal.valueOf(M));\n+            } else if (projectDataLimitLetter.equals(\"T\")) {\n+                limitNumber = limitNumber.multiply(BigDecimal.valueOf(T));\n+            } else if (projectDataLimitLetter.equals(\"P\")) {\n+                limitNumber = limitNumber.multiply(BigDecimal.valueOf(P));\n+            } else if (projectDataLimitLetter.equals(\"E\")) {\n+                limitNumber = limitNumber.multiply(BigDecimal.valueOf(E));\n+            } else {\n+                limitNumber = limitNumber.multiply(BigDecimal.valueOf(G));\n+            }\n+\n+            if (projectDataQuotaLetter.equals(\"K\")) {\n+                quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(K));\n+            } else if (projectDataQuotaLetter.equals(\"M\")) {\n+                quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(M));\n+            } else if (projectDataQuotaLetter.equals(\"T\")) {\n+                quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(T));\n+            } else if (projectDataQuotaLetter.equals(\"P\")) {\n+                quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(P));\n+            } else if (projectDataQuotaLetter.equals(\"E\")) {\n+                quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(E));\n+            } else {\n+                quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(G));\n+            }\n+\n+            if (limitNumber.compareTo(quotaNumber) < 0) {\n+                throw new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attribute + \" must be less than or equals to \" + projectDataLimit);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public AttributeDefinition getAttributeDefinition() {\n+        AttributeDefinition attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF);\n+        attr.setFriendlyName(\"projectDataQuota\");\n+        attr.setDisplayName(\"Project soft data quota.\");\n+        attr.setType(String.class.getName());\n+        attr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n+        return attr;\n+    }\n }\n",
            "diff_size": 148
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\nindex d4351a2db73..a71748b5d96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n@@ -24,131 +24,139 @@ import java.math.BigDecimal;\n  *\n  * @author Michal Stava stavamichal@gmail.com\n  */\n+\n+\n public class urn_perun_group_resource_attribute_def_def_projectDataQuota extends ResourceGroupAttributesModuleAbstract implements ResourceGroupAttributesModuleImplApi {\n \n-\tprivate static final String A_GR_projectDataLimit = AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF + \":projectDataLimit\";\n-\tPattern numberPattern = Pattern.compile(\"[0-9]+[.]?[0-9]*\");\n-\tPattern letterPattern = Pattern.compile(\"[A-Z]\");\n-\tPattern testingPattern = Pattern.compile(\"^[0-9]+([.][0-9]+)?[KMGTPE]$\");\n-\n-\t//Definition of K = KB, M = MB etc.\n-\tlong K = 1024;\n-\tlong M = K * 1024;\n-\tlong G = M * 1024;\n-\tlong T = G * 1024;\n-\tlong P = T * 1024;\n-\tlong E = P * 1024;\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSessionImpl perunSession, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n-\t\tAttribute attrProjectDataLimit = null;\n-\t\tString projectDataQuota = null;\n-\t\tString projectDataLimit = null;\n-\n-\t\tString projectDataQuotaNumber = null;\n-\t\tString projectDataQuotaLetter = null;\n-\t\tString projectDataLimitNumber = null;\n-\t\tString projectDataLimitLetter = null;\n-\n-\t\t//Check if attribute value has the right exp pattern (can be null)\n-\t\tif(attribute.getValue() != null) {\n-\t\t\tMatcher testMatcher = testingPattern.matcher((String) attribute.getValue());\n-\t\t\tif(!testMatcher.find()) throw new WrongAttributeValueException(attribute, resource, group, \"Format of quota must be something like ex.: 1.30M or 2500K, but it is \" + attribute.getValue());\n-\t\t}\n-\n-\t\t//Get ProjectDataLimit attribute\n-\t\ttry {\n-\t\t\tattrProjectDataLimit = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, resource, group, A_GR_projectDataLimit);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute with projectDataLimit from resource \" + resource.getId() + \" and group \" + group.getId() + \" could not obtain.\", ex);\n-\t\t}\n-\n-\t\t//Get ProjectDataQuota value\n-\t\tif (attribute.getValue() != null) {\n-\t\t\tprojectDataQuota = (String) attribute.getValue();\n-\t\t\tMatcher numberMatcher = numberPattern.matcher(projectDataQuota);\n-\t\t\tMatcher letterMatcher = letterPattern.matcher(projectDataQuota);\n-\t\t\tnumberMatcher.find();\n-\t\t\tletterMatcher.find();\n-\t\t\ttry {\n-\t\t\t\tprojectDataQuotaNumber = projectDataQuota.substring(numberMatcher.start(), numberMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataQuotaNumber = null;\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tprojectDataQuotaLetter = projectDataQuota.substring(letterMatcher.start(), letterMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataQuotaLetter = \"G\";\n-\t\t\t}\n-\t\t}\n-\t\tBigDecimal quotaNumber;\n-\t\tif(projectDataQuotaNumber != null) quotaNumber = new BigDecimal(projectDataQuotaNumber.replace(',', '.'));\n-\t\telse quotaNumber = new BigDecimal(\"0\");\n-\t\tif (quotaNumber != null && quotaNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n-\t\t\tthrow new WrongAttributeValueException(attribute, attribute + \" can't be less than 0.\");\n-\t\t}\n-\n-\t\t//Get ProjectDataLimit value\n-\t\tif (attrProjectDataLimit != null && attrProjectDataLimit.getValue() != null) {\n-\t\t\tprojectDataLimit = (String) attrProjectDataLimit.getValue();\n-\t\t\tMatcher numberMatcher = numberPattern.matcher(projectDataLimit);\n-\t\t\tMatcher letterMatcher = letterPattern.matcher(projectDataLimit);\n-\t\t\tnumberMatcher.find();\n-\t\t\tletterMatcher.find();\n-\t\t\ttry {\n-\t\t\t\tprojectDataLimitNumber = projectDataLimit.substring(numberMatcher.start(), numberMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataLimitNumber = null;\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tprojectDataLimitLetter = projectDataLimit.substring(letterMatcher.start(), letterMatcher.end());\n-\t\t\t} catch (IllegalStateException ex) {\n-\t\t\t\tprojectDataLimitLetter = \"G\";\n-\t\t\t}\n-\t\t}\n-\t\tBigDecimal limitNumber;\n-\t\tif(projectDataLimitNumber != null) limitNumber = new BigDecimal(projectDataLimitNumber.replace(',', '.'));\n-\t\telse limitNumber = new BigDecimal(\"0\");\n-\n-\t\tif (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n-\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attrProjectDataLimit + \" cant be less than 0.\");\n-\t\t}\n-\n-\t\t//Compare ProjectDataQuota with ProjectDataLimit\n-\t\tif (quotaNumber == null || quotaNumber.compareTo(BigDecimal.valueOf(0)) == 0) {\n-\t\t\tif (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n-\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, \"Try to set unlimited quota, but limit is still \" + projectDataLimitNumber + projectDataLimitLetter);\n-\t\t\t}\n-\t\t} else if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n-\n-\t\t\tif(projectDataLimitLetter.equals(\"K\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(K));\n-\t\t\telse if(projectDataLimitLetter.equals(\"M\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(M));\n-\t\t\telse if(projectDataLimitLetter.equals(\"T\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(T));\n-\t\t\telse if(projectDataLimitLetter.equals(\"P\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(P));\n-\t\t\telse if(projectDataLimitLetter.equals(\"E\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(E));\n-\t\t\telse limitNumber = limitNumber.multiply(BigDecimal.valueOf(G));\n-\n-\t\t\tif(projectDataQuotaLetter.equals(\"K\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(K));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"M\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(M));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"T\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(T));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"P\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(P));\n-\t\t\telse if(projectDataQuotaLetter.equals(\"E\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(E));\n-\t\t\telse quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(G));\n-\n-\t\t\tif (limitNumber.compareTo(quotaNumber) < 0) {\n-\t\t\t\tthrow new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attribute + \" must be less than or equals to \" + projectDataLimit);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic AttributeDefinition getAttributeDefinition() {\n-\t\tAttributeDefinition attr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF);\n-\t\tattr.setFriendlyName(\"projectDataQuota\");\n-\t\tattr.setDisplayName(\"Project soft data quota.\");\n-\t\tattr.setType(String.class.getName());\t\t\n-\t\tattr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n-\t\treturn attr;\n-\t}\n-}\n+\n+ private static final String A_GR_projectDataLimit = AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF + \":projectDataLimit\";\n+ Pattern numberPattern = Pattern.compile(\"[0-9]+[.]?[0-9]*\");\n+ Pattern letterPattern = Pattern.compile(\"[A-Z]\");\n+ Pattern testingPattern = Pattern.compile(\"^[0-9]+([.][0-9]+)?[KMGTPE]$\");\n+\n+ //Definition of K = KB, M = MB etc.\n+ long K = 1024;\n+ long M = K * 1024;\n+ long G = M * 1024;\n+ long T = G * 1024;\n+ long P = T * 1024;\n+ long E = P * 1024;\n+\n+ @Override\n+ public void checkAttributeValue(PerunSessionImpl perunSession, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, GroupResourceMismatchException {\n+  Attribute attrProjectDataLimit = null;\n+  String projectDataQuota = null;\n+  String projectDataLimit = null;\n+  String projectDataQuotaNumber = null;\n+  String projectDataQuotaLetter = null;\n+  String projectDataLimitNumber = null;\n+  String projectDataLimitLetter = null;\n+\n+  //Check if attribute value has the right exp pattern (can be null)\n+  if (attribute.getValue() != null) {\n+   Matcher testMatcher = testingPattern.matcher((String) attribute.getValue());\n+   if (!testMatcher.find()) throw new WrongAttributeValueException(attribute,\n+resource,\n+group,\n+\"Format of quota must be something like ex.: 1.30M or 2500K, but it is \" + attribute.getValue());\n+  }\n+\n+  //Get ProjectDataLimit attribute\n+\n+  try {\n+   attrProjectDataLimit = perunSession.getPerunBl().getAttributesManagerBl().getAttribute(perunSession, resource, group, A_GR_projectDataLimit);\n+  } catch (AttributeNotExistsException ex) {\n+   throw new ConsistencyErrorException(\"Attribute with projectDataLimit from resource \" + resource.getId() + \" and group \" + group.getId() + \" could not obtain.\",\n+ex);\n+  }\n+\n+  //Get ProjectDataQuota value\n+  if (attribute.getValue() != null) {\n+   projectDataQuota = (String) attribute.getValue();\n+   Matcher numberMatcher = numberPattern.matcher(projectDataQuota);\n+   Matcher letterMatcher = letterPattern.matcher(projectDataQuota);\n+   numberMatcher.find();\n+   letterMatcher.find();\n+\n+   try {\n+    projectDataQuotaNumber = projectDataQuota.substring(numberMatcher.start(), numberMatcher.end());\n+   } catch (IllegalStateException ex) {\n+    projectDataQuotaNumber = null;\n+   }\n+\n+   try {\n+    projectDataQuotaLetter = projectDataQuota.substring(letterMatcher.start(), letterMatcher.end());\n+   } catch (IllegalStateException ex) {\n+    projectDataQuotaLetter = \"G\";\n+   }\n+  }\n+  BigDecimal quotaNumber;\n+  if (projectDataQuotaNumber != null) quotaNumber = new BigDecimal(projectDataQuotaNumber.replace(',', '.'));\n+  else quotaNumber = new BigDecimal(\"0\");\n+  if (quotaNumber != null && quotaNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n+   throw new WrongAttributeValueException(attribute, attribute + \" can't be less than 0.\");\n+  }\n+\n+  //Get ProjectDataLimit value\n+  if (attrProjectDataLimit != null && attrProjectDataLimit.getValue() != null) {\n+   projectDataLimit = (String) attrProjectDataLimit.getValue();\n+   Matcher numberMatcher = numberPattern.matcher(projectDataLimit);\n+   Matcher letterMatcher = letterPattern.matcher(projectDataLimit);\n+   numberMatcher.find();\n+   letterMatcher.find();\n+\n+   try {\n+    projectDataLimitNumber = projectDataLimit.substring(numberMatcher.start(), numberMatcher.end());\n+   } catch (IllegalStateException ex) {\n+    projectDataLimitNumber = null;\n+   }\n+\n+   try {\n+    projectDataLimitLetter = projectDataLimit.substring(letterMatcher.start(), letterMatcher.end());\n+   } catch (IllegalStateException ex) {\n+    projectDataLimitLetter = \"G\";\n+   }\n+  }\n+  BigDecimal limitNumber;\n+  if (projectDataLimitNumber != null) limitNumber = new BigDecimal(projectDataLimitNumber.replace(',', '.'));\n+  else limitNumber = new BigDecimal(\"0\");\n+  if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) < 0) {\n+   throw new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attrProjectDataLimit + \" cant be less than 0.\");\n+  }\n+\n+  //Compare ProjectDataQuota with ProjectDataLimit\n+  if (quotaNumber == null || quotaNumber.compareTo(BigDecimal.valueOf(0)) == 0) {\n+   if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n+    throw new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, \"Try to set unlimited quota, but limit is still \" + projectDataLimitNumber + projectDataLimitLetter);\n+   }\n+  } else if (limitNumber != null && limitNumber.compareTo(BigDecimal.valueOf(0)) != 0) {\n+   if (projectDataLimitLetter.equals(\"K\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(K));\n+   else if (projectDataLimitLetter.equals(\"M\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(M));\n+   else if (projectDataLimitLetter.equals(\"T\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(T));\n+   else if (projectDataLimitLetter.equals(\"P\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(P));\n+   else if (projectDataLimitLetter.equals(\"E\")) limitNumber = limitNumber.multiply(BigDecimal.valueOf(E));\n+   else limitNumber = limitNumber.multiply(BigDecimal.valueOf(G));\n+   if (projectDataQuotaLetter.equals(\"K\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(K));\n+   else if (projectDataQuotaLetter.equals(\"M\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(M));\n+   else if (projectDataQuotaLetter.equals(\"T\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(T));\n+   else if (projectDataQuotaLetter.equals(\"P\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(P));\n+   else if (projectDataQuotaLetter.equals(\"E\")) quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(E));\n+   else quotaNumber = quotaNumber.multiply(BigDecimal.valueOf(G));\n+   if (limitNumber.compareTo(quotaNumber) < 0) {\n+    throw new WrongReferenceAttributeValueException(attribute, attrProjectDataLimit, attribute + \" must be less than or equals to \" + projectDataLimit);\n+   }\n+  }\n+ }\n+\n+ @Override\n+ public AttributeDefinition getAttributeDefinition() {\n+  AttributeDefinition attr = new AttributeDefinition();\n+  attr.setNamespace(AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF);\n+  attr.setFriendlyName(\"projectDataQuota\");\n+  attr.setDisplayName(\"Project soft data quota.\");\n+  attr.setType(String.class.getName());\n+  attr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n+  return attr;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 134
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\nindex d4351a2db73..8677b3d0ae1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n@@ -147,7 +147,7 @@ public class urn_perun_group_resource_attribute_def_def_projectDataQuota extends\n \t\tattr.setNamespace(AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF);\n \t\tattr.setFriendlyName(\"projectDataQuota\");\n \t\tattr.setDisplayName(\"Project soft data quota.\");\n-\t\tattr.setType(String.class.getName());\t\t\n+\t\tattr.setType(String.class.getName());\n \t\tattr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n \t\treturn attr;\n \t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\nindex d4351a2db73..356001f0cf3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/106/urn_perun_group_resource_attribute_def_def_projectDataQuota.java\n@@ -147,8 +147,8 @@ public class urn_perun_group_resource_attribute_def_def_projectDataQuota extends\n \t\tattr.setNamespace(AttributesManager.NS_GROUP_RESOURCE_ATTR_DEF);\n \t\tattr.setFriendlyName(\"projectDataQuota\");\n \t\tattr.setDisplayName(\"Project soft data quota.\");\n-\t\tattr.setType(String.class.getName());\t\t\n-\t\tattr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n+\t\tattr . setType ( String.class.\n+\t\tgetName());attr.setDescription(\"Project soft quota including units (M, G, T, ...), G is default.\");\n \t\treturn attr;\n \t}\n }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}