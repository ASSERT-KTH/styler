{
    "project_name": "neo4j-neo4j",
    "error_id": "3078",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "153",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "150",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "157",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "151",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "154",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3078/SchemaComplianceChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3078/SchemaComplianceChecker.java\nindex ba60655c956..749b5872ebc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3078/SchemaComplianceChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3078/SchemaComplianceChecker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checker;\n \n import org.eclipse.collections.api.iterator.LongIterator;\n@@ -63,45 +64,44 @@ class SchemaComplianceChecker implements AutoCloseable\n     private final PageCursorTracer cursorTracer;\n     private final DefaultNodePropertyAccessor propertyAccessor;\n \n-    SchemaComplianceChecker( CheckerContext context, MutableIntObjectMap<MutableIntSet> mandatoryProperties, Iterable<IndexDescriptor> indexes,\n-            PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    SchemaComplianceChecker(CheckerContext context, MutableIntObjectMap<MutableIntSet> mandatoryProperties, Iterable<IndexDescriptor> indexes,\n+                            PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         this.mandatoryProperties = mandatoryProperties;\n         this.indexReaders = context.indexAccessors.readers();\n         this.indexes = indexes;\n         this.cursorTracer = cursorTracer;\n-        this.propertyAccessor = new DefaultNodePropertyAccessor( new RecordStorageReader( context.neoStores ), cursorTracer, memoryTracker );\n+        this.propertyAccessor = new DefaultNodePropertyAccessor(new RecordStorageReader(context.neoStores), cursorTracer, memoryTracker);\n     }\n \n-    <ENTITY extends PrimitiveRecord> void checkContainsMandatoryProperties( ENTITY entity, long[] entityTokens, IntObjectMap<Value> values,\n-            Function<ENTITY,ConsistencyReport.PrimitiveConsistencyReport> reportSupplier )\n+    <ENTITY extends PrimitiveRecord> void checkContainsMandatoryProperties(ENTITY entity, long[] entityTokens, IntObjectMap<Value> values,\n+                                                                           Function<ENTITY, ConsistencyReport.PrimitiveConsistencyReport> reportSupplier)\n     {\n-        if ( entityTokens.length > 0 )\n+        if (entityTokens.length > 0)\n         {\n-            checkMandatoryProperties( entity, values, entityTokens, reportSupplier );\n+            checkMandatoryProperties(entity, values, entityTokens, reportSupplier);\n         }\n     }\n \n-    <ENTITY extends PrimitiveRecord> void checkCorrectlyIndexed( ENTITY entity, long[] entityTokens, IntObjectMap<Value> values,\n-            Function<ENTITY,ConsistencyReport.PrimitiveConsistencyReport> reportSupplier )\n+    <ENTITY extends PrimitiveRecord> void checkCorrectlyIndexed(ENTITY entity, long[] entityTokens, IntObjectMap<Value> values,\n+                                                                Function<ENTITY, ConsistencyReport.PrimitiveConsistencyReport> reportSupplier)\n     {\n-        for ( IndexDescriptor indexRule : indexes )\n+        for (IndexDescriptor indexRule : indexes)\n         {\n             SchemaDescriptor schema = indexRule.schema();\n-            Value[] valueArray = RecordLoading.entityIntersectionWithSchema( entityTokens, values, schema );\n-            if ( valueArray == null )\n+            Value[] valueArray = RecordLoading.entityIntersectionWithSchema(entityTokens, values, schema);\n+            if (valueArray == null)\n             {\n                 continue;\n             }\n-            IndexReader reader = indexReaders.reader( indexRule );\n-            if ( indexRule.isUnique() )\n+            IndexReader reader = indexReaders.reader(indexRule);\n+            if (indexRule.isUnique())\n             {\n-                verifyIndexedUniquely( entity, valueArray, indexRule, reader, reportSupplier );\n-            }\n-            else\n+                verifyIndexedUniquely(entity, valueArray, indexRule, reader, reportSupplier);\n+            } else\n             {\n-                long count = reader.countIndexedEntities( entity.getId(), cursorTracer, schema.getPropertyIds(), valueArray );\n-                reportIncorrectIndexCount( entity, valueArray, indexRule, count, reportSupplier );\n+                long count = reader.countIndexedEntities(entity.getId(), cursorTracer, schema.getPropertyIds(), valueArray);\n+                reportIncorrectIndexCount(entity, valueArray, indexRule, count, reportSupplier);\n             }\n         }\n     }\n@@ -109,80 +109,79 @@ class SchemaComplianceChecker implements AutoCloseable\n     @Override\n     public void close()\n     {\n-        closeAllUnchecked( indexReaders, propertyAccessor );\n+        closeAllUnchecked(indexReaders, propertyAccessor);\n     }\n \n-    private <ENTITY extends PrimitiveRecord> void verifyIndexedUniquely( ENTITY entity, Value[] propertyValues, IndexDescriptor indexRule,\n-            IndexReader reader, Function<ENTITY,ConsistencyReport.PrimitiveConsistencyReport> reportSupplier )\n+    private <ENTITY extends PrimitiveRecord> void verifyIndexedUniquely(ENTITY entity, Value[] propertyValues, IndexDescriptor indexRule,\n+                                                                        IndexReader reader,\n+                                                                        Function<ENTITY, ConsistencyReport.PrimitiveConsistencyReport> reportSupplier)\n     {\n         long nodeId = entity.getId();\n-        IndexQuery[] query = seek( indexRule.schema(), propertyValues );\n-        LongIterator indexedNodeIds = queryIndexOrEmpty( reader, query );\n+        IndexQuery[] query = seek(indexRule.schema(), propertyValues);\n+        LongIterator indexedNodeIds = queryIndexOrEmpty(reader, query);\n         long count = 0;\n-        while ( indexedNodeIds.hasNext() )\n+        while (indexedNodeIds.hasNext())\n         {\n             long indexedNodeId = indexedNodeIds.next();\n-            if ( nodeId == indexedNodeId )\n+            if (nodeId == indexedNodeId)\n             {\n                 count++;\n-            }\n-            else\n+            } else\n             {\n-                reportSupplier.apply( entity ).uniqueIndexNotUnique( indexRule, Values.asObjects( propertyValues ), indexedNodeId );\n+                reportSupplier.apply(entity).uniqueIndexNotUnique(indexRule, Values.asObjects(propertyValues), indexedNodeId);\n             }\n         }\n \n-        reportIncorrectIndexCount( entity, propertyValues, indexRule, count, reportSupplier );\n+        reportIncorrectIndexCount(entity, propertyValues, indexRule, count, reportSupplier);\n     }\n \n-    private IndexQuery[] seek( SchemaDescriptor schema, Value[] propertyValues )\n+    private IndexQuery[] seek(SchemaDescriptor schema, Value[] propertyValues)\n     {\n         int[] propertyIds = schema.getPropertyIds();\n         assert propertyIds.length == propertyValues.length;\n         IndexQuery[] query = new IndexQuery[propertyValues.length];\n-        for ( int i = 0; i < query.length; i++ )\n+        for (int i = 0; i < query.length; i++)\n         {\n-            query[i] = IndexQuery.exact( propertyIds[i], propertyValues[i] );\n+            query[i] = IndexQuery.exact(propertyIds[i], propertyValues[i]);\n         }\n         return query;\n     }\n \n-    private LongIterator queryIndexOrEmpty( IndexReader reader, IndexQuery[] query )\n+    private LongIterator queryIndexOrEmpty(IndexReader reader, IndexQuery[] query)\n     {\n         try\n         {\n             NodeValueIterator indexedNodeIds = new NodeValueIterator();\n-            reader.query( NULL_CONTEXT, indexedNodeIds, unconstrained(), query );\n+            reader.query(NULL_CONTEXT, indexedNodeIds, unconstrained(), query);\n             return indexedNodeIds;\n-        }\n-        catch ( IndexNotApplicableKernelException e )\n+        } catch (IndexNotApplicableKernelException e)\n         {\n-            throw new RuntimeException( format( \"Consistency checking error: index provider does not support exact query %s\", Arrays.toString( query ) ), e );\n+            throw new RuntimeException(format(\"Consistency checking error: index provider does not support exact query %s\", Arrays.toString(query)), e);\n         }\n     }\n \n-    private <ENTITY extends PrimitiveRecord> void reportIncorrectIndexCount( ENTITY entity, Value[] propertyValues, IndexDescriptor indexRule,\n-            long count, Function<ENTITY,ConsistencyReport.PrimitiveConsistencyReport> reportSupplier )\n+    private <ENTITY extends PrimitiveRecord> void reportIncorrectIndexCount(ENTITY entity, Value[] propertyValues, IndexDescriptor indexRule,\n+                                                                            long count,\n+                                                                            Function<ENTITY, ConsistencyReport.PrimitiveConsistencyReport> reportSupplier)\n     {\n-        if ( count == 0 )\n+        if (count == 0)\n         {\n             // Fulltext indexes only index text values, so if the entity only have non-string properties it is correct to not find it in the index.\n-            if ( !(indexRule.getIndexType() == IndexType.FULLTEXT && !valuesContainTextProperty( propertyValues ) ) )\n+            if (!(indexRule.getIndexType() == IndexType.FULLTEXT && !valuesContainTextProperty(propertyValues)))\n             {\n-                reportSupplier.apply( entity ).notIndexed( indexRule, Values.asObjects( propertyValues ) );\n+                reportSupplier.apply(entity).notIndexed(indexRule, Values.asObjects(propertyValues));\n             }\n-        }\n-        else if ( count != 1 )\n+        } else if (count != 1)\n         {\n-            reportSupplier.apply( entity ).indexedMultipleTimes( indexRule, Values.asObjects( propertyValues ), count );\n+            reportSupplier.apply(entity).indexedMultipleTimes(indexRule, Values.asObjects(propertyValues), count);\n         }\n     }\n \n-    private boolean valuesContainTextProperty( Value[] values )\n+    private boolean valuesContainTextProperty(Value[] values)\n     {\n-        for ( Value value : values )\n+        for (Value value : values)\n         {\n-            if ( value.valueGroup() == ValueGroup.TEXT )\n+            if (value.valueGroup() == ValueGroup.TEXT)\n             {\n                 return true;\n             }\n@@ -190,25 +189,25 @@ class SchemaComplianceChecker implements AutoCloseable\n         return false;\n     }\n \n-    private <ENTITY extends PrimitiveRecord> void checkMandatoryProperties( ENTITY entity, IntObjectMap<Value> seenProperties, long[] entityTokenIds,\n-            Function<ENTITY,ConsistencyReport.PrimitiveConsistencyReport> reporter )\n+    private <ENTITY extends PrimitiveRecord> void checkMandatoryProperties(ENTITY entity, IntObjectMap<Value> seenProperties, long[] entityTokenIds,\n+                                                                           Function<ENTITY, ConsistencyReport.PrimitiveConsistencyReport> reporter)\n     {\n-        if ( !mandatoryProperties.isEmpty() )\n+        if (!mandatoryProperties.isEmpty())\n         {\n-            lightClear( reportedMissingMandatoryPropertyKeys );\n-            for ( long entityToken : entityTokenIds )\n+            lightClear(reportedMissingMandatoryPropertyKeys);\n+            for (long entityToken : entityTokenIds)\n             {\n-                MutableIntSet mandatoryPropertyKeysForEntityToken = mandatoryProperties.get( toIntExact( entityToken ) );\n-                if ( mandatoryPropertyKeysForEntityToken != null )\n+                MutableIntSet mandatoryPropertyKeysForEntityToken = mandatoryProperties.get(toIntExact(entityToken));\n+                if (mandatoryPropertyKeysForEntityToken != null)\n                 {\n                     MutableIntIterator iterator = mandatoryPropertyKeysForEntityToken.intIterator();\n-                    while ( iterator.hasNext() )\n+                    while (iterator.hasNext())\n                     {\n                         int mandatoryPropertyKeyForEntityToken = iterator.next();\n-                        if ( !seenProperties.containsKey( mandatoryPropertyKeyForEntityToken ) &&\n-                                reportedMissingMandatoryPropertyKeys.add( mandatoryPropertyKeyForEntityToken ) )\n+                        if (!seenProperties.containsKey(mandatoryPropertyKeyForEntityToken) &&\n+                          reportedMissingMandatoryPropertyKeys.add(mandatoryPropertyKeyForEntityToken))\n                         {\n-                            reporter.apply( entity ).missingMandatoryProperty( mandatoryPropertyKeyForEntityToken );\n+                            reporter.apply(entity).missingMandatoryProperty(mandatoryPropertyKeyForEntityToken);\n                         }\n                     }\n                 }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3078/SchemaComplianceChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3078/SchemaComplianceChecker.java\nindex ba60655c956..c48875ed1ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3078/SchemaComplianceChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3078/SchemaComplianceChecker.java\n@@ -215,4 +215,4 @@ class SchemaComplianceChecker implements AutoCloseable\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}