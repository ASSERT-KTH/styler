{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4010",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4010/SingleSourceShortestPathBFS.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4010/SingleSourceShortestPathBFS.java\nindex 3df75b96521..92e65f02883 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4010/SingleSourceShortestPathBFS.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4010/SingleSourceShortestPathBFS.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.HashMap;\n@@ -34,309 +35,311 @@ import org.neo4j.graphdb.RelationshipType;\n  * Breadth first search to find all shortest uniform paths from a node to all\n  * others. I.e. assume the cost 1 for all relationships. This can be done by\n  * Dijkstra with the right arguments, but this should be faster.\n- * @complexity This algorithm runs in O(m) time (not including the case when m\n- *             is zero).\n+ *\n  * @author Patrik Larsson\n+ * @complexity This algorithm runs in O(m) time (not including the case when m\n+ * is zero).\n  */\n public class SingleSourceShortestPathBFS implements\n     SingleSourceShortestPath<Integer>\n {\n-    protected Node startNode;\n-    protected Direction relationShipDirection;\n-    protected RelationshipType[] relationShipTypes;\n-    protected HashMap<Node,Integer> distances = new HashMap<>();\n-    protected HashMap<Node,List<Relationship>> predecessors = new HashMap<>();\n-    // Limits\n-    protected long maxDepth = Long.MAX_VALUE;\n-    protected long depth;\n-    LinkedList<Node> currentLayer = new LinkedList<>();\n-    LinkedList<Node> nextLayer = new LinkedList<>();\n+  protected Node startNode;\n+  protected Direction relationShipDirection;\n+  protected RelationshipType[] relationShipTypes;\n+  protected HashMap<Node, Integer> distances = new HashMap<>();\n+  protected HashMap<Node, List<Relationship>> predecessors = new HashMap<>();\n+  // Limits\n+  protected long maxDepth = Long.MAX_VALUE;\n+  protected long depth;\n+  LinkedList<Node> currentLayer = new LinkedList<>();\n+  LinkedList<Node> nextLayer = new LinkedList<>();\n+\n+  public SingleSourceShortestPathBFS(Node startNode,\n+                                     Direction relationShipDirection, RelationshipType... relationShipTypes)\n+  {\n+    super();\n+    this.startNode = startNode;\n+    this.relationShipDirection = relationShipDirection;\n+    this.relationShipTypes = relationShipTypes;\n+    reset();\n+  }\n+\n+  /**\n+   * This sets the maximum depth to scan.\n+   */\n+  public void limitDepth(long maxDepth)\n+  {\n+    this.maxDepth = maxDepth;\n+  }\n+\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public void setStartNode(Node node)\n+  {\n+    startNode = node;\n+    reset();\n+  }\n \n-    public SingleSourceShortestPathBFS( Node startNode,\n-        Direction relationShipDirection, RelationshipType... relationShipTypes )\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public void reset()\n+  {\n+    distances = new HashMap<>();\n+    predecessors = new HashMap<>();\n+    currentLayer = new LinkedList<>();\n+    nextLayer = new LinkedList<>();\n+    currentLayer.add(startNode);\n+    depth = 0;\n+  }\n+\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public Integer getCost(Node targetNode)\n+  {\n+    calculate(targetNode);\n+    return distances.get(targetNode);\n+  }\n+\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public List<PropertyContainer> getPath(Node targetNode)\n+  {\n+    if (targetNode == null)\n     {\n-        super();\n-        this.startNode = startNode;\n-        this.relationShipDirection = relationShipDirection;\n-        this.relationShipTypes = relationShipTypes;\n-        reset();\n+      throw new RuntimeException(\"No end node defined\");\n     }\n-\n-    /**\n-     * This sets the maximum depth to scan.\n-     */\n-    public void limitDepth( long maxDepth )\n+    calculate(targetNode);\n+    if (!distances.containsKey(targetNode))\n     {\n-        this.maxDepth = maxDepth;\n+      return null;\n     }\n+    return Util.constructSinglePathToNode(targetNode, predecessors, true,\n+        false);\n+  }\n \n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public void setStartNode( Node node )\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public List<Node> getPathAsNodes(Node targetNode)\n+  {\n+    if (targetNode == null)\n     {\n-        startNode = node;\n-        reset();\n+      throw new RuntimeException(\"No end node defined\");\n     }\n-\n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public void reset()\n+    calculate(targetNode);\n+    if (!distances.containsKey(targetNode))\n     {\n-        distances = new HashMap<>();\n-        predecessors = new HashMap<>();\n-        currentLayer = new LinkedList<>();\n-        nextLayer = new LinkedList<>();\n-        currentLayer.add( startNode );\n-        depth = 0;\n+      return null;\n     }\n+    return Util.constructSinglePathToNodeAsNodes(targetNode, predecessors,\n+        true, false);\n+  }\n \n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public Integer getCost( Node targetNode )\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public List<Relationship> getPathAsRelationships(Node targetNode)\n+  {\n+    if (targetNode == null)\n     {\n-        calculate( targetNode );\n-        return distances.get( targetNode );\n+      throw new RuntimeException(\"No end node defined\");\n     }\n-\n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public List<PropertyContainer> getPath( Node targetNode )\n+    calculate(targetNode);\n+    if (!distances.containsKey(targetNode))\n     {\n-        if ( targetNode == null )\n-        {\n-            throw new RuntimeException( \"No end node defined\" );\n-        }\n-        calculate( targetNode );\n-        if ( !distances.containsKey( targetNode ) )\n-        {\n-            return null;\n-        }\n-        return Util.constructSinglePathToNode( targetNode, predecessors, true,\n-            false );\n+      return null;\n     }\n+    return Util.constructSinglePathToNodeAsRelationships(targetNode,\n+        predecessors, false);\n+  }\n \n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public List<Node> getPathAsNodes( Node targetNode )\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public List<List<PropertyContainer>> getPaths(Node targetNode)\n+  {\n+    if (targetNode == null)\n     {\n-        if ( targetNode == null )\n-        {\n-            throw new RuntimeException( \"No end node defined\" );\n-        }\n-        calculate( targetNode );\n-        if ( !distances.containsKey( targetNode ) )\n-        {\n-            return null;\n-        }\n-        return Util.constructSinglePathToNodeAsNodes( targetNode, predecessors,\n-            true, false );\n+      throw new RuntimeException(\"No end node defined\");\n     }\n-\n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public List<Relationship> getPathAsRelationships( Node targetNode )\n+    calculate(targetNode);\n+    if (!distances.containsKey(targetNode))\n     {\n-        if ( targetNode == null )\n-        {\n-            throw new RuntimeException( \"No end node defined\" );\n-        }\n-        calculate( targetNode );\n-        if ( !distances.containsKey( targetNode ) )\n-        {\n-            return null;\n-        }\n-        return Util.constructSinglePathToNodeAsRelationships( targetNode,\n-            predecessors, false );\n+      return null;\n     }\n+    return Util.constructAllPathsToNode(targetNode, predecessors, true,\n+        false);\n+  }\n \n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public List<List<PropertyContainer>> getPaths( Node targetNode )\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public List<List<Node>> getPathsAsNodes(Node targetNode)\n+  {\n+    if (targetNode == null)\n     {\n-        if ( targetNode == null )\n-        {\n-            throw new RuntimeException( \"No end node defined\" );\n-        }\n-        calculate( targetNode );\n-        if ( !distances.containsKey( targetNode ) )\n-        {\n-            return null;\n-        }\n-        return Util.constructAllPathsToNode( targetNode, predecessors, true,\n-            false );\n+      throw new RuntimeException(\"No end node defined\");\n     }\n-\n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public List<List<Node>> getPathsAsNodes( Node targetNode )\n+    calculate(targetNode);\n+    if (!distances.containsKey(targetNode))\n     {\n-        if ( targetNode == null )\n-        {\n-            throw new RuntimeException( \"No end node defined\" );\n-        }\n-        calculate( targetNode );\n-        if ( !distances.containsKey( targetNode ) )\n-        {\n-            return null;\n-        }\n-        return Util.constructAllPathsToNodeAsNodes( targetNode, predecessors,\n-            true, false );\n+      return null;\n     }\n+    return Util.constructAllPathsToNodeAsNodes(targetNode, predecessors,\n+        true, false);\n+  }\n \n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public List<List<Relationship>> getPathsAsRelationships( Node targetNode )\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public List<List<Relationship>> getPathsAsRelationships(Node targetNode)\n+  {\n+    if (targetNode == null)\n     {\n-        if ( targetNode == null )\n-        {\n-            throw new RuntimeException( \"No end node defined\" );\n-        }\n-        calculate( targetNode );\n-        if ( !distances.containsKey( targetNode ) )\n-        {\n-            return null;\n-        }\n-        return Util.constructAllPathsToNodeAsRelationships( targetNode,\n-            predecessors, false );\n+      throw new RuntimeException(\"No end node defined\");\n     }\n-\n-    /**\n-     * Iterator-style \"next\" method.\n-     * @return True if evaluate was made. False if no more computation could be\n-     *         done.\n-     */\n-    public boolean processNextNode()\n+    calculate(targetNode);\n+    if (!distances.containsKey(targetNode))\n     {\n-        // finished with current layer? increase depth\n-        if ( currentLayer.isEmpty() )\n-        {\n-            if ( nextLayer.isEmpty() )\n-            {\n-                return false;\n-            }\n-            currentLayer = nextLayer;\n-            nextLayer = new LinkedList<>();\n-            ++depth;\n-        }\n-        Node node = currentLayer.poll();\n-        // Multiple paths to a certain node might make it appear several\n-        // times, just process it once\n-        if ( distances.containsKey( node ) )\n-        {\n-            return true;\n-        }\n-        // Put it in distances\n-        distances.put( node, (int) depth );\n-        // Follow all edges\n-        for ( RelationshipType relationshipType : relationShipTypes )\n-        {\n-            for ( Relationship relationship : node.getRelationships(\n-                relationshipType, relationShipDirection ) )\n-            {\n-                Node targetNode = relationship.getOtherNode( node );\n-                // Are we going back into the already finished area?\n-                // That would be more expensive.\n-                if ( !distances.containsKey( targetNode ) )\n-                {\n-                    // Put this into the next layer and the predecessors\n-                    nextLayer.add( targetNode );\n-                    List<Relationship> targetPreds = predecessors.computeIfAbsent( targetNode, k -> new LinkedList<>() );\n-                    targetPreds.add( relationship );\n-                }\n-            }\n-        }\n-        return true;\n+      return null;\n     }\n+    return Util.constructAllPathsToNodeAsRelationships(targetNode,\n+        predecessors, false);\n+  }\n \n-    /**\n-     * Internal calculate method that will do the calculation. This can however\n-     * be called externally to manually trigger the calculation.\n-     */\n-    public boolean calculate()\n+  /**\n+   * Iterator-style \"next\" method.\n+   *\n+   * @return True if evaluate was made. False if no more computation could be\n+   * done.\n+   */\n+  public boolean processNextNode()\n+  {\n+    // finished with current layer? increase depth\n+    if (currentLayer.isEmpty())\n     {\n-        return calculate( null );\n+      if (nextLayer.isEmpty())\n+      {\n+        return false;\n+      }\n+      currentLayer = nextLayer;\n+      nextLayer = new LinkedList<>();\n+      ++depth;\n     }\n-\n-    /**\n-     * Internal calculate method that will run the calculation until either the\n-     * limit is reached or a result has been generated for a given node.\n-     */\n-    public boolean calculate( Node targetNode )\n+    Node node = currentLayer.poll();\n+    // Multiple paths to a certain node might make it appear several\n+    // times, just process it once\n+    if (distances.containsKey(node))\n     {\n-        while ( depth <= maxDepth\n-            && (targetNode == null || !distances.containsKey( targetNode )) )\n-        {\n-            if ( !processNextNode() )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      return true;\n     }\n-\n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public List<Node> getPredecessorNodes( Node node )\n+    // Put it in distances\n+    distances.put(node, (int) depth);\n+    // Follow all edges\n+    for (RelationshipType relationshipType : relationShipTypes)\n     {\n-        List<Node> result = new LinkedList<>();\n-        List<Relationship> predecessorRelationShips = predecessors.get( node );\n-        if ( predecessorRelationShips == null\n-            || predecessorRelationShips.size() == 0 )\n+      for (Relationship relationship : node.getRelationships(\n+          relationshipType, relationShipDirection))\n+      {\n+        Node targetNode = relationship.getOtherNode(node);\n+        // Are we going back into the already finished area?\n+        // That would be more expensive.\n+        if (!distances.containsKey(targetNode))\n         {\n-            return null;\n+          // Put this into the next layer and the predecessors\n+          nextLayer.add(targetNode);\n+          List<Relationship> targetPreds = predecessors.computeIfAbsent(targetNode, k -> new LinkedList<>());\n+          targetPreds.add(relationship);\n         }\n-        for ( Relationship relationship : predecessorRelationShips )\n-        {\n-            result.add( relationship.getOtherNode( node ) );\n-        }\n-        return result;\n+      }\n     }\n+    return true;\n+  }\n \n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public Map<Node,List<Relationship>> getPredecessors()\n+  /**\n+   * Internal calculate method that will do the calculation. This can however\n+   * be called externally to manually trigger the calculation.\n+   */\n+  public boolean calculate()\n+  {\n+    return calculate(null);\n+  }\n+\n+  /**\n+   * Internal calculate method that will run the calculation until either the\n+   * limit is reached or a result has been generated for a given node.\n+   */\n+  public boolean calculate(Node targetNode)\n+  {\n+    while (depth <= maxDepth\n+        && (targetNode == null || !distances.containsKey(targetNode)))\n     {\n-        calculate();\n-        return predecessors;\n+      if (!processNextNode())\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public Direction getDirection()\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public List<Node> getPredecessorNodes(Node node)\n+  {\n+    List<Node> result = new LinkedList<>();\n+    List<Relationship> predecessorRelationShips = predecessors.get(node);\n+    if (predecessorRelationShips == null\n+        || predecessorRelationShips.size() == 0)\n     {\n-        return relationShipDirection;\n+      return null;\n     }\n-\n-    /**\n-     * @see SingleSourceShortestPath\n-     */\n-    @Override\n-    public RelationshipType[] getRelationshipTypes()\n+    for (Relationship relationship : predecessorRelationShips)\n     {\n-        return relationShipTypes;\n+      result.add(relationship.getOtherNode(node));\n     }\n+    return result;\n+  }\n+\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public Map<Node, List<Relationship>> getPredecessors()\n+  {\n+    calculate();\n+    return predecessors;\n+  }\n+\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public Direction getDirection()\n+  {\n+    return relationShipDirection;\n+  }\n+\n+  /**\n+   * @see SingleSourceShortestPath\n+   */\n+  @Override\n+  public RelationshipType[] getRelationshipTypes()\n+  {\n+    return relationShipTypes;\n+  }\n }\n",
            "diff_size": 411
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "87",
                    "severity": "error",
                    "message": "'{' at column 87 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "254",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4010/SingleSourceShortestPathBFS.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4010/SingleSourceShortestPathBFS.java\nindex 3df75b96521..be4a0d27a62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4010/SingleSourceShortestPathBFS.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4010/SingleSourceShortestPathBFS.java\n@@ -38,9 +38,7 @@ import org.neo4j.graphdb.RelationshipType;\n  *             is zero).\n  * @author Patrik Larsson\n  */\n-public class SingleSourceShortestPathBFS implements\n-    SingleSourceShortestPath<Integer>\n-{\n+public class SingleSourceShortestPathBFS implements SingleSourceShortestPath<Integer> {\n     protected Node startNode;\n     protected Direction relationShipDirection;\n     protected RelationshipType[] relationShipTypes;\n@@ -52,9 +50,8 @@ public class SingleSourceShortestPathBFS implements\n     LinkedList<Node> currentLayer = new LinkedList<>();\n     LinkedList<Node> nextLayer = new LinkedList<>();\n \n-    public SingleSourceShortestPathBFS( Node startNode,\n-        Direction relationShipDirection, RelationshipType... relationShipTypes )\n-    {\n+    public SingleSourceShortestPathBFS( Node startNode, Direction relationShipDirection, RelationshipType... relationShipTypes )\n+{\n         super();\n         this.startNode = startNode;\n         this.relationShipDirection = relationShipDirection;\n@@ -114,14 +111,16 @@ public class SingleSourceShortestPathBFS implements\n         {\n             throw new RuntimeException( \"No end node defined\" );\n         }\n-        calculate( targetNode );\n+\n+calculate( targetNode );\n         if ( !distances.containsKey( targetNode ) )\n         {\n             return null;\n         }\n-        return Util.constructSinglePathToNode( targetNode, predecessors, true,\n+\n+return Util.constructSinglePathToNode( targetNode, predecessors, true,\n             false );\n-    }\n+            }\n \n     /**\n      * @see SingleSourceShortestPath\n@@ -133,14 +132,15 @@ public class SingleSourceShortestPathBFS implements\n         {\n             throw new RuntimeException( \"No end node defined\" );\n         }\n-        calculate( targetNode );\n+\n+calculate( targetNode );\n         if ( !distances.containsKey( targetNode ) )\n         {\n             return null;\n         }\n-        return Util.constructSinglePathToNodeAsNodes( targetNode, predecessors,\n-            true, false );\n-    }\n+\n+return Util.constructSinglePathToNodeAsNodes( targetNode, predecessors, true, false );\n+            }\n \n     /**\n      * @see SingleSourceShortestPath\n@@ -152,14 +152,15 @@ public class SingleSourceShortestPathBFS implements\n         {\n             throw new RuntimeException( \"No end node defined\" );\n         }\n-        calculate( targetNode );\n+\n+calculate( targetNode );\n         if ( !distances.containsKey( targetNode ) )\n         {\n             return null;\n         }\n-        return Util.constructSinglePathToNodeAsRelationships( targetNode,\n-            predecessors, false );\n-    }\n+\n+return Util.constructSinglePathToNodeAsRelationships( targetNode, predecessors, false );\n+            }\n \n     /**\n      * @see SingleSourceShortestPath\n@@ -171,14 +172,16 @@ public class SingleSourceShortestPathBFS implements\n         {\n             throw new RuntimeException( \"No end node defined\" );\n         }\n-        calculate( targetNode );\n+\n+calculate( targetNode );\n         if ( !distances.containsKey( targetNode ) )\n         {\n             return null;\n         }\n-        return Util.constructAllPathsToNode( targetNode, predecessors, true,\n+\n+return Util.constructAllPathsToNode( targetNode, predecessors, true,\n             false );\n-    }\n+            }\n \n     /**\n      * @see SingleSourceShortestPath\n@@ -190,14 +193,15 @@ public class SingleSourceShortestPathBFS implements\n         {\n             throw new RuntimeException( \"No end node defined\" );\n         }\n-        calculate( targetNode );\n+\n+calculate( targetNode );\n         if ( !distances.containsKey( targetNode ) )\n         {\n             return null;\n         }\n-        return Util.constructAllPathsToNodeAsNodes( targetNode, predecessors,\n-            true, false );\n-    }\n+\n+return Util.constructAllPathsToNodeAsNodes( targetNode, predecessors, true, false );\n+            }\n \n     /**\n      * @see SingleSourceShortestPath\n@@ -209,14 +213,15 @@ public class SingleSourceShortestPathBFS implements\n         {\n             throw new RuntimeException( \"No end node defined\" );\n         }\n-        calculate( targetNode );\n+\n+calculate( targetNode );\n         if ( !distances.containsKey( targetNode ) )\n         {\n             return null;\n         }\n-        return Util.constructAllPathsToNodeAsRelationships( targetNode,\n-            predecessors, false );\n-    }\n+\n+return Util.constructAllPathsToNodeAsRelationships( targetNode, predecessors, false );\n+            }\n \n     /**\n      * Iterator-style \"next\" method.\n@@ -232,11 +237,13 @@ public class SingleSourceShortestPathBFS implements\n             {\n                 return false;\n             }\n-            currentLayer = nextLayer;\n+\n+currentLayer = nextLayer;\n             nextLayer = new LinkedList<>();\n             ++depth;\n         }\n-        Node node = currentLayer.poll();\n+\n+Node node = currentLayer.poll();\n         // Multiple paths to a certain node might make it appear several\n         // times, just process it once\n         if ( distances.containsKey( node ) )\n@@ -244,13 +251,12 @@ public class SingleSourceShortestPathBFS implements\n             return true;\n         }\n         // Put it in distances\n-        distances.put( node, (int) depth );\n+        distances.put( node, ( int) depth );\n         // Follow all edges\n         for ( RelationshipType relationshipType : relationShipTypes )\n         {\n-            for ( Relationship relationship : node.getRelationships(\n-                relationshipType, relationShipDirection ) )\n-            {\n+            for ( Relationship relationship : node.getRelationships( relationshipType, relationShipDirection ) )\n+{\n                 Node targetNode = relationship.getOtherNode( node );\n                 // Are we going back into the already finished area?\n                 // That would be more expensive.\n@@ -282,8 +288,8 @@ public class SingleSourceShortestPathBFS implements\n     public boolean calculate( Node targetNode )\n     {\n         while ( depth <= maxDepth\n-            && (targetNode == null || !distances.containsKey( targetNode )) )\n-        {\n+            && ( targetNode == null || !distances.containsKey( targetNode )) )\n+{\n             if ( !processNextNode() )\n             {\n                 return false;\n@@ -302,14 +308,15 @@ public class SingleSourceShortestPathBFS implements\n         List<Relationship> predecessorRelationShips = predecessors.get( node );\n         if ( predecessorRelationShips == null\n             || predecessorRelationShips.size() == 0 )\n-        {\n+{\n             return null;\n         }\n         for ( Relationship relationship : predecessorRelationShips )\n         {\n             result.add( relationship.getOtherNode( node ) );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -339,4 +346,4 @@ public class SingleSourceShortestPathBFS implements\n     {\n         return relationShipTypes;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}