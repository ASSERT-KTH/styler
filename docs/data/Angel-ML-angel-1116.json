{
    "project_name": "Angel-ML-angel",
    "error_id": "1116",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1116/PSAgentAttemptJVM.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1116/PSAgentAttemptJVM.java\nindex f4dd4165564..d9019ae15db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1116/PSAgentAttemptJVM.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1116/PSAgentAttemptJVM.java\n@@ -82,7 +82,7 @@ public class PSAgentAttemptJVM {\n   }\n \n   private static String getChildJavaOpts(Configuration jobConf, ApplicationId appid,\n-      PSAgentAttemptId attemptId) {\n+                                         PSAgentAttemptId attemptId) {\n     String userOpts = null;\n     userOpts = jobConf.get(AngelConfiguration.ANGEL_PSAGENT_JAVA_OPTS);\n     if (userOpts == null) {\n@@ -93,7 +93,7 @@ public class PSAgentAttemptJVM {\n   }\n \n   private static String generateDefaultJVMParameters(Configuration conf, ApplicationId appid,\n-      PSAgentAttemptId attemptId) {\n+                                                     PSAgentAttemptId attemptId) {\n     int workerMemSizeInMB =\n         conf.getInt(AngelConfiguration.ANGEL_PSAGENT_MERMORY_MB,\n             AngelConfiguration.DEFAULT_ANGEL_PSAGENT_MERMORY_MB);\n@@ -126,7 +126,7 @@ public class PSAgentAttemptJVM {\n   }\n \n   public static List<String> getVMCommand(Configuration conf, ApplicationId appid,\n-      PSAgentAttemptId attemptId) {\n+                                          PSAgentAttemptId attemptId) {\n \n     Vector<String> vargs = new Vector<String>(8);\n     vargs.add(Environment.JAVA_HOME.$() + \"/bin/java\");\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 147.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1116/PSAgentAttemptJVM.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1116/PSAgentAttemptJVM.java\nindex f4dd4165564..5d44641324e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1116/PSAgentAttemptJVM.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1116/PSAgentAttemptJVM.java\n@@ -41,8 +41,7 @@ public class PSAgentAttemptJVM {\n   }\n \n   private static String getChildEnv(Configuration jobConf) {\n-\n-    return jobConf.get(AngelConfiguration.ANGEL_PSAGENT_ENV,\n+  return jobConf.get(AngelConfiguration.ANGEL_PSAGENT_ENV,\n         AngelConfiguration.DEFAULT_ANGEL_PSAGENT_ENV);\n   }\n \n@@ -94,11 +93,10 @@ public class PSAgentAttemptJVM {\n \n   private static String generateDefaultJVMParameters(Configuration conf, ApplicationId appid,\n       PSAgentAttemptId attemptId) {\n-    int workerMemSizeInMB =\n+  int workerMemSizeInMB =\n         conf.getInt(AngelConfiguration.ANGEL_PSAGENT_MERMORY_MB,\n             AngelConfiguration.DEFAULT_ANGEL_PSAGENT_MERMORY_MB);\n-\n-    int heapMax = workerMemSizeInMB - 200;\n+int heapMax = workerMemSizeInMB - 200;\n     int youngRegionSize = (int) (heapMax * 0.4);\n     int suvivorRatio = 4;\n \n@@ -127,8 +125,7 @@ public class PSAgentAttemptJVM {\n \n   public static List<String> getVMCommand(Configuration conf, ApplicationId appid,\n       PSAgentAttemptId attemptId) {\n-\n-    Vector<String> vargs = new Vector<String>(8);\n+  Vector<String> vargs = new Vector<String>(8);\n     vargs.add(Environment.JAVA_HOME.$() + \"/bin/java\");\n \n     String javaOpts = getChildJavaOpts(conf, appid, attemptId);\n@@ -145,7 +142,8 @@ public class PSAgentAttemptJVM {\n     vargs.add(\"-javaagent:\" + sizeOfJarPath);\n \n     // Setup the log4j prop\n-    long logSize = 0;// TaskLog.getTaskLogLength(conf);\n+    long logSize = 0;\n+// TaskLog.getTaskLogLength(conf);\n     setupLog4jProperties(conf, vargs, logSize);\n \n     // Add main class and its arguments\n@@ -168,4 +166,4 @@ public class PSAgentAttemptJVM {\n     vargsFinal.add(mergedCommand.toString());\n     return vargsFinal;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 944).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1116/PSAgentAttemptJVM.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1116/PSAgentAttemptJVM.java\nindex f4dd4165564..d1abdf57ab5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1116/PSAgentAttemptJVM.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1116/PSAgentAttemptJVM.java\n@@ -28,7 +28,6 @@ import org.apache.hadoop.yarn.api.ApplicationConstants.Environment;\n import org.apache.hadoop.yarn.api.records.ApplicationId;\n import org.apache.hadoop.yarn.conf.YarnConfiguration;\n import org.apache.hadoop.yarn.util.Apps;\n-\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -41,14 +40,11 @@ public class PSAgentAttemptJVM {\n   }\n \n   private static String getChildEnv(Configuration jobConf) {\n-\n-    return jobConf.get(AngelConfiguration.ANGEL_PSAGENT_ENV,\n-        AngelConfiguration.DEFAULT_ANGEL_PSAGENT_ENV);\n+    return jobConf.get(AngelConfiguration.ANGEL_PSAGENT_ENV, AngelConfiguration.DEFAULT_ANGEL_PSAGENT_ENV);\n   }\n \n   private static String getChildLogLevel(Configuration conf) {\n-    return conf.get(AngelConfiguration.ANGEL_PSAGNET_LOG_LEVEL,\n-        AngelConfiguration.DEFAULT_ANGEL_PSAGNET_LOG_LEVEL);\n+    return conf.get(AngelConfiguration.ANGEL_PSAGNET_LOG_LEVEL, AngelConfiguration.DEFAULT_ANGEL_PSAGNET_LOG_LEVEL);\n   }\n \n   @SuppressWarnings(\"deprecation\")\n@@ -61,7 +57,6 @@ public class PSAgentAttemptJVM {\n     // This is so that, if the child forks another \"bin/hadoop\" (common in\n     // streaming) it will have the correct loglevel.\n     environment.put(\"HADOOP_ROOT_LOGGER\", getChildLogLevel(conf) + \",CLA\");\n-\n     String hadoopClientOpts = System.getenv(\"HADOOP_CLIENT_OPTS\");\n     if (hadoopClientOpts == null) {\n       hadoopClientOpts = \"\";\n@@ -81,58 +76,37 @@ public class PSAgentAttemptJVM {\n     environment.put(\"HADOOP_CLIENT_OPTS\", hadoopClientOpts);\n   }\n \n-  private static String getChildJavaOpts(Configuration jobConf, ApplicationId appid,\n-      PSAgentAttemptId attemptId) {\n+  private static String getChildJavaOpts(\n+    Configuration jobConf, ApplicationId appid, PSAgentAttemptId attemptId) {\n     String userOpts = null;\n     userOpts = jobConf.get(AngelConfiguration.ANGEL_PSAGENT_JAVA_OPTS);\n     if (userOpts == null) {\n       userOpts = generateDefaultJVMParameters(jobConf, appid, attemptId);\n     }\n-\n     return userOpts;\n   }\n \n-  private static String generateDefaultJVMParameters(Configuration conf, ApplicationId appid,\n-      PSAgentAttemptId attemptId) {\n-    int workerMemSizeInMB =\n-        conf.getInt(AngelConfiguration.ANGEL_PSAGENT_MERMORY_MB,\n-            AngelConfiguration.DEFAULT_ANGEL_PSAGENT_MERMORY_MB);\n-\n+  private static String generateDefaultJVMParameters(\n+    Configuration conf, ApplicationId appid, PSAgentAttemptId attemptId) {\n+    int workerMemSizeInMB = conf.getInt(AngelConfiguration.ANGEL_PSAGENT_MERMORY_MB, AngelConfiguration.DEFAULT_ANGEL_PSAGENT_MERMORY_MB);\n     int heapMax = workerMemSizeInMB - 200;\n     int youngRegionSize = (int) (heapMax * 0.4);\n     int suvivorRatio = 4;\n-\n-    String ret =\n-        new StringBuilder().append(\" -Xmx\").append(heapMax).append(\"M\").append(\" -Xmn\")\n-            .append(youngRegionSize).append(\"M\").append(\" -XX:MaxDirectMemorySize=\")\n-            .append(workerMemSizeInMB / 4).append(\"M\").append(\" -XX:SurvivorRatio=\")\n-            .append(suvivorRatio).append(\" -XX:PermSize=100M -XX:MaxPermSize=200M\")\n-            .append(\" -XX:+AggressiveOpts\").append(\" -XX:+UseLargePages\")\n-            .append(\" -XX:+UseParallelGC\").append(\" -XX:+UseAdaptiveSizePolicy\")\n-            .append(\" -XX:CMSInitiatingOccupancyFraction=70\")\n-            .append(\" -XX:+UseCMSInitiatingOccupancyOnly\").append(\" -XX:+CMSScavengeBeforeRemark\")\n-            .append(\" -XX:+UseCMSCompactAtFullCollection\").append(\" -verbose:gc\")\n-            .append(\" -XX:+PrintGCDateStamps\").append(\" -XX:+PrintGCDetails\")\n-            .append(\" -XX:+PrintCommandLineFlags\").append(\" -XX:+PrintTenuringDistribution\")\n-            .append(\" -XX:+PrintAdaptiveSizePolicy\").append(\" -Xloggc:/tmp/\").append(\"angelgc-\")\n-            .append(appid).append(\"-\").append(attemptId).append(\".log\").toString();\n-\n+    String ret = new StringBuilder().append(\" -Xmx\").append(heapMax).append(\"M\").append(\" -Xmn\").append(youngRegionSize).append(\"M\").append(\" -XX:MaxDirectMemorySize=\").append(workerMemSizeInMB / 4).append(\"M\").append(\" -XX:SurvivorRatio=\").append(suvivorRatio).append(\" -XX:PermSize=100M -XX:MaxPermSize=200M\").append(\" -XX:+AggressiveOpts\").append(\" -XX:+UseLargePages\").append(\" -XX:+UseParallelGC\").append(\" -XX:+UseAdaptiveSizePolicy\").append(\" -XX:CMSInitiatingOccupancyFraction=70\").append(\" -XX:+UseCMSInitiatingOccupancyOnly\").append(\" -XX:+CMSScavengeBeforeRemark\").append(\" -XX:+UseCMSCompactAtFullCollection\").append(\" -verbose:gc\").append(\" -XX:+PrintGCDateStamps\").append(\" -XX:+PrintGCDetails\").append(\" -XX:+PrintCommandLineFlags\").append(\" -XX:+PrintTenuringDistribution\").append(\" -XX:+PrintAdaptiveSizePolicy\").append(\" -Xloggc:/tmp/\").append(\"angelgc-\").append(appid).append(\"-\").append(attemptId).append(\".log\").toString();\n     return ret;\n   }\n \n-  private static void setupLog4jProperties(Configuration conf, Vector<String> vargs, long logSize) {\n+  private static void setupLog4jProperties(\n+    Configuration conf, Vector<String> vargs, long logSize) {\n     String logLevel = getChildLogLevel(conf);\n     AngelApps.addLog4jSystemProperties(logLevel, logSize, vargs);\n   }\n \n-  public static List<String> getVMCommand(Configuration conf, ApplicationId appid,\n-      PSAgentAttemptId attemptId) {\n-\n+  public static List<String> getVMCommand(\n+    Configuration conf, ApplicationId appid, PSAgentAttemptId attemptId) {\n     Vector<String> vargs = new Vector<String>(8);\n     vargs.add(Environment.JAVA_HOME.$() + \"/bin/java\");\n-\n     String javaOpts = getChildJavaOpts(conf, appid, attemptId);\n-\n     String[] javaOptsSplit = javaOpts.split(\" \");\n     for (int i = 0; i < javaOptsSplit.length; i++) {\n       vargs.add(javaOptsSplit[i]);\n@@ -140,18 +114,16 @@ public class PSAgentAttemptJVM {\n \n     Path childTmpDir = new Path(Environment.PWD.$(), YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR);\n     vargs.add(\"-Djava.io.tmpdir=\" + childTmpDir);\n-\n     Path sizeOfJarPath = new Path(Environment.PWD.$(), \"sizeof-0.3.0.jar\");\n     vargs.add(\"-javaagent:\" + sizeOfJarPath);\n \n     // Setup the log4j prop\n+\n     long logSize = 0;// TaskLog.getTaskLogLength(conf);\n     setupLog4jProperties(conf, vargs, logSize);\n \n     // Add main class and its arguments\n-    String className =\n-        conf.get(AngelConfiguration.ANGEL_PSAGENT_CLASS,\n-            AngelConfiguration.DEFAULT_ANGEL_PSAGENT_CLASS);\n+    String className = conf.get(AngelConfiguration.ANGEL_PSAGENT_CLASS, AngelConfiguration.DEFAULT_ANGEL_PSAGENT_CLASS);\n     vargs.add(className); // main of Child\n \n     // Finally add the jvmID\n@@ -164,8 +136,9 @@ public class PSAgentAttemptJVM {\n     for (CharSequence str : vargs) {\n       mergedCommand.append(str).append(\" \");\n     }\n+\n     Vector<String> vargsFinal = new Vector<String>(1);\n     vargsFinal.add(mergedCommand.toString());\n     return vargsFinal;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}