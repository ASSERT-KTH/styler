{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "56",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.data.Value;\nimport org.apache.accumulo.core.security.ColumnVisibility;\nimport org.apache.accumulo.server.client.HdfsZooInstance;\nimport org.apache.commons.lang.time.DateUtils;\nimport org.apache.hadoop.io.Text;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/56/GenerateShardSplits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/56/GenerateShardSplits.java\nindex e7fffa3d3aa..1e808c59783 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/56/GenerateShardSplits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/56/GenerateShardSplits.java\n@@ -31,157 +31,161 @@ import java.util.concurrent.TimeUnit;\n  * will create maker key/values for the specified data types if requested\n  */\n public class GenerateShardSplits {\n-    \n-    private static final ColumnVisibility EMPTY_VIS = new ColumnVisibility();\n-    private static final Text EMPTY_TEXT = new Text();\n-    private static final Value EMPTY_VALUE = new Value(EMPTY_TEXT.getBytes());\n-    \n-    private static void printUsageAndExit() {\n-        System.out.println(\"Usage: datawave.ingest.util.GenerateShardSplits <startDate (yyyyMMDD)> <daysToGenerate> <numShardsPerDay> [-markersOnly] [-addShardMarkers] [-addDataTypeMarkers <comma delim data types>] [<username> <password> <tableName> [<instanceName> <zookeepers>]]\");\n-        System.exit(-1);\n+\n+  private static final ColumnVisibility EMPTY_VIS = new ColumnVisibility();\n+  private static final Text EMPTY_TEXT = new Text();\n+  private static final Value EMPTY_VALUE = new Value(EMPTY_TEXT.getBytes());\n+\n+  private static void printUsageAndExit() {\n+    System.out.println(\n+        \"Usage: datawave.ingest.util.GenerateShardSplits <startDate (yyyyMMDD)> <daysToGenerate> <numShardsPerDay> [-markersOnly] [-addShardMarkers] [-addDataTypeMarkers <comma delim data types>] [<username> <password> <tableName> [<instanceName> <zookeepers>]]\");\n+    System.exit(-1);\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+\n+    if (args.length < 3) {\n+      printUsageAndExit();\n     }\n-    \n-    public static void main(String[] args) throws Exception {\n-        \n-        if (args.length < 3) {\n-            printUsageAndExit();\n+    // parse out the args\n+    Date startDate = null;\n+    int DAYS_TO_GENERATE = -1;\n+    int SHARDS = -1;\n+    boolean addSplits = true;\n+    boolean addShardMarkers = false;\n+    String[] shardMarkerTypes = null;\n+    String username = null;\n+    byte[] password = null;\n+    String tableName = null;\n+    String instanceName = null;\n+    String zookeepers = null;\n+    for (int i = 0; i < args.length; i++) {\n+      if (i == 0) {\n+        try {\n+          startDate = DateHelper.parse(args[i]);\n+        } catch (DateTimeParseException e) {\n+          System.out.println(\"Start Date does not match format. Exception=\" + e.getMessage());\n+          System.exit(-2);\n         }\n-        // parse out the args\n-        Date startDate = null;\n-        int DAYS_TO_GENERATE = -1;\n-        int SHARDS = -1;\n-        boolean addSplits = true;\n-        boolean addShardMarkers = false;\n-        String[] shardMarkerTypes = null;\n-        String username = null;\n-        byte[] password = null;\n-        String tableName = null;\n-        String instanceName = null;\n-        String zookeepers = null;\n-        for (int i = 0; i < args.length; i++) {\n-            if (i == 0) {\n-                try {\n-                    startDate = DateHelper.parse(args[i]);\n-                } catch (DateTimeParseException e) {\n-                    System.out.println(\"Start Date does not match format. Exception=\" + e.getMessage());\n-                    System.exit(-2);\n-                }\n-            } else if (i == 1) {\n-                try {\n-                    DAYS_TO_GENERATE = Integer.parseInt(args[i]);\n-                } catch (NumberFormatException e) {\n-                    System.out.println(\"Days to Generate argument is not an integer:\" + e.getMessage());\n-                    System.exit(-2);\n-                }\n-            } else if (i == 2) {\n-                try {\n-                    SHARDS = Integer.parseInt(args[i]);\n-                } catch (NumberFormatException e) {\n-                    System.out.println(\"Days to Generate argument is not an integer:\" + e.getMessage());\n-                    System.exit(-2);\n-                }\n-            } else if (args[i].equals(\"-markersOnly\")) {\n-                addSplits = false;\n-            } else if (args[i].equals(\"-addShardMarkers\")) {\n-                addShardMarkers = true;\n-            } else if (args[i].equals(\"-addDataTypeMarkers\")) {\n-                shardMarkerTypes = StringUtils.split(args[i + 1], ',');\n-                // skip over cmd, for loop will skip over arg\n-                i++;\n-            } else {\n-                // need at least 3 more args\n-                if (i + 3 > args.length) {\n-                    printUsageAndExit();\n-                } else {\n-                    username = args[i];\n-                    password = PasswordConverter.parseArg(args[i + 1]).getBytes();\n-                    tableName = args[i + 2];\n-                    // skip over args\n-                    i += 3;\n-                }\n-                // if we still have args\n-                if (i < args.length) {\n-                    // then we need exactly 2 more args\n-                    if (i + 2 != args.length) {\n-                        printUsageAndExit();\n-                    } else {\n-                        instanceName = args[i];\n-                        zookeepers = args[i + 1];\n-                        // skip over args to terminate loop\n-                        i += 2;\n-                    }\n-                }\n-            }\n+      } else if (i == 1) {\n+        try {\n+          DAYS_TO_GENERATE = Integer.parseInt(args[i]);\n+        } catch (NumberFormatException e) {\n+          System.out.println(\"Days to Generate argument is not an integer:\" + e.getMessage());\n+          System.exit(-2);\n         }\n-        \n-        SortedSet<Text> splits = new TreeSet<>();\n-        List<Mutation> mutations = new ArrayList<>();\n-        for (int x = 0; x < DAYS_TO_GENERATE; x++) {\n-            \n-            // Generate configured shards per day\n-            for (int i = 0; i < SHARDS; i++) {\n-                Text split = new Text(DateHelper.format(startDate) + \"_\" + i);\n-                splits.add(split);\n-                \n-                // add markers as required\n-                if (addShardMarkers || shardMarkerTypes != null) {\n-                    Date nextYear = DateUtils.addYears(startDate, 1);\n-                    Mutation m = new Mutation(split);\n-                    if (addShardMarkers) {\n-                        m.put(EMPTY_TEXT, EMPTY_TEXT, EMPTY_VIS, nextYear.getTime(), EMPTY_VALUE);\n-                    }\n-                    if (shardMarkerTypes != null) {\n-                        for (String type : shardMarkerTypes) {\n-                            type = type.trim();\n-                            if (!type.isEmpty()) {\n-                                m.put(new Text(type), EMPTY_TEXT, EMPTY_VIS, nextYear.getTime(), EMPTY_VALUE);\n-                            }\n-                        }\n-                    }\n-                    if (m.size() > 0) {\n-                        mutations.add(m);\n-                    }\n-                }\n-            }\n-            \n-            startDate = DateUtils.addDays(startDate, 1);\n+      } else if (i == 2) {\n+        try {\n+          SHARDS = Integer.parseInt(args[i]);\n+        } catch (NumberFormatException e) {\n+          System.out.println(\"Days to Generate argument is not an integer:\" + e.getMessage());\n+          System.exit(-2);\n         }\n-        \n-        if (username != null) {\n-            // Connect to accumulo\n-            ClientConfiguration zkConfig = ClientConfiguration.loadDefault().withInstance(instanceName).withZkHosts(zookeepers);\n-            Instance instance = (instanceName != null ? new ZooKeeperInstance(zkConfig) : HdfsZooInstance.getInstance());\n-            Connector connector = instance.getConnector(username, new PasswordToken(password));\n-            \n-            // add the splits\n-            if (addSplits) {\n-                connector.tableOperations().addSplits(tableName, splits);\n-            }\n-            \n-            // add the markers\n-            if (!mutations.isEmpty()) {\n-                BatchWriter w = connector.createBatchWriter(tableName, new BatchWriterConfig().setMaxLatency(1, TimeUnit.SECONDS).setMaxMemory(100000L)\n-                                .setMaxWriteThreads(4));\n-                try {\n-                    w.addMutations(mutations);\n-                } finally {\n-                    w.close();\n-                }\n-            }\n+      } else if (args[i].equals(\"-markersOnly\")) {\n+        addSplits = false;\n+      } else if (args[i].equals(\"-addShardMarkers\")) {\n+        addShardMarkers = true;\n+      } else if (args[i].equals(\"-addDataTypeMarkers\")) {\n+        shardMarkerTypes = StringUtils.split(args[i + 1], ',');\n+        // skip over cmd, for loop will skip over arg\n+        i++;\n+      } else {\n+        // need at least 3 more args\n+        if (i + 3 > args.length) {\n+          printUsageAndExit();\n         } else {\n-            if (addSplits) {\n-                for (Text t : splits) {\n-                    System.out.println(t);\n-                }\n-            }\n-            for (Mutation m : mutations) {\n-                for (ColumnUpdate update : m.getUpdates()) {\n-                    System.out.println(new String(m.getRow()) + ' ' + new String(update.getColumnFamily()) + ':' + new String(update.getColumnQualifier())\n-                                    + \" [\" + new String(update.getColumnVisibility()) + \"] \" + new Date(update.getTimestamp()) + \" -> \"\n-                                    + new String(update.getValue()));\n-                }\n+          username = args[i];\n+          password = PasswordConverter.parseArg(args[i + 1]).getBytes();\n+          tableName = args[i + 2];\n+          // skip over args\n+          i += 3;\n+        }\n+        // if we still have args\n+        if (i < args.length) {\n+          // then we need exactly 2 more args\n+          if (i + 2 != args.length) {\n+            printUsageAndExit();\n+          } else {\n+            instanceName = args[i];\n+            zookeepers = args[i + 1];\n+            // skip over args to terminate loop\n+            i += 2;\n+          }\n+        }\n+      }\n+    }\n+\n+    SortedSet<Text> splits = new TreeSet<>();\n+    List<Mutation> mutations = new ArrayList<>();\n+    for (int x = 0; x < DAYS_TO_GENERATE; x++) {\n+\n+      // Generate configured shards per day\n+      for (int i = 0; i < SHARDS; i++) {\n+        Text split = new Text(DateHelper.format(startDate) + \"_\" + i);\n+        splits.add(split);\n+\n+        // add markers as required\n+        if (addShardMarkers || shardMarkerTypes != null) {\n+          Date nextYear = DateUtils.addYears(startDate, 1);\n+          Mutation m = new Mutation(split);\n+          if (addShardMarkers) {\n+            m.put(EMPTY_TEXT, EMPTY_TEXT, EMPTY_VIS, nextYear.getTime(), EMPTY_VALUE);\n+          }\n+          if (shardMarkerTypes != null) {\n+            for (String type : shardMarkerTypes) {\n+              type = type.trim();\n+              if (!type.isEmpty()) {\n+                m.put(new Text(type), EMPTY_TEXT, EMPTY_VIS, nextYear.getTime(), EMPTY_VALUE);\n+              }\n             }\n-            \n+          }\n+          if (m.size() > 0) {\n+            mutations.add(m);\n+          }\n         }\n+      }\n+\n+      startDate = DateUtils.addDays(startDate, 1);\n+    }\n+\n+    if (username != null) {\n+      // Connect to accumulo\n+      ClientConfiguration zkConfig =\n+          ClientConfiguration.loadDefault().withInstance(instanceName).withZkHosts(zookeepers);\n+      Instance instance = (instanceName != null ? new ZooKeeperInstance(zkConfig) : HdfsZooInstance.getInstance());\n+      Connector connector = instance.getConnector(username, new PasswordToken(password));\n+\n+      // add the splits\n+      if (addSplits) {\n+        connector.tableOperations().addSplits(tableName, splits);\n+      }\n+\n+      // add the markers\n+      if (!mutations.isEmpty()) {\n+        BatchWriter w = connector.createBatchWriter(tableName,\n+            new BatchWriterConfig().setMaxLatency(1, TimeUnit.SECONDS).setMaxMemory(100000L)\n+                .setMaxWriteThreads(4));\n+        try {\n+          w.addMutations(mutations);\n+        } finally {\n+          w.close();\n+        }\n+      }\n+    } else {\n+      if (addSplits) {\n+        for (Text t : splits) {\n+          System.out.println(t);\n+        }\n+      }\n+      for (Mutation m : mutations) {\n+        for (ColumnUpdate update : m.getUpdates()) {\n+          System.out.println(new String(m.getRow()) + ' ' + new String(update.getColumnFamily()) + ':' +\n+              new String(update.getColumnQualifier())\n+              + \" [\" + new String(update.getColumnVisibility()) + \"] \" + new Date(update.getTimestamp()) + \" -> \"\n+              + new String(update.getValue()));\n+        }\n+      }\n+\n     }\n+  }\n }\n",
            "diff_size": 245
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/56/GenerateShardSplits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/56/GenerateShardSplits.java\nindex e7fffa3d3aa..000f906920c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/56/GenerateShardSplits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/56/GenerateShardSplits.java\n@@ -184,4 +184,4 @@ public class GenerateShardSplits {\n             \n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/56/GenerateShardSplits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/56/GenerateShardSplits.java\nindex e7fffa3d3aa..50eaf1453ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/56/GenerateShardSplits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/56/GenerateShardSplits.java\n@@ -17,7 +17,6 @@ import org.apache.accumulo.core.security.ColumnVisibility;\n import org.apache.accumulo.server.client.HdfsZooInstance;\n import org.apache.commons.lang.time.DateUtils;\n import org.apache.hadoop.io.Text;\n-\n import java.time.format.DateTimeParseException;\n import java.util.ArrayList;\n import java.util.Date;\n@@ -30,23 +29,23 @@ import java.util.concurrent.TimeUnit;\n  * Generates split points for the specified table and optionally adds them to the table This class creates split points of the form: yyyyMMdd_N In addition this\n  * will create maker key/values for the specified data types if requested\n  */\n+\n+\n public class GenerateShardSplits {\n-    \n     private static final ColumnVisibility EMPTY_VIS = new ColumnVisibility();\n     private static final Text EMPTY_TEXT = new Text();\n     private static final Value EMPTY_VALUE = new Value(EMPTY_TEXT.getBytes());\n-    \n     private static void printUsageAndExit() {\n         System.out.println(\"Usage: datawave.ingest.util.GenerateShardSplits <startDate (yyyyMMDD)> <daysToGenerate> <numShardsPerDay> [-markersOnly] [-addShardMarkers] [-addDataTypeMarkers <comma delim data types>] [<username> <password> <tableName> [<instanceName> <zookeepers>]]\");\n         System.exit(-1);\n     }\n-    \n+\n     public static void main(String[] args) throws Exception {\n-        \n         if (args.length < 3) {\n             printUsageAndExit();\n         }\n         // parse out the args\n+\n         Date startDate = null;\n         int DAYS_TO_GENERATE = -1;\n         int SHARDS = -1;\n@@ -73,47 +72,49 @@ public class GenerateShardSplits {\n                     System.out.println(\"Days to Generate argument is not an integer:\" + e.getMessage());\n                     System.exit(-2);\n                 }\n-            } else if (i == 2) {\n-                try {\n-                    SHARDS = Integer.parseInt(args[i]);\n-                } catch (NumberFormatException e) {\n-                    System.out.println(\"Days to Generate argument is not an integer:\" + e.getMessage());\n-                    System.exit(-2);\n-                }\n+                                              } else if (i == 2) {\n+                       try {\n+                           SHARDS = Integer.parseInt(args[i]);\n+                       } catch (NumberFormatException e) {\n+                           System.out.println(\"Days to Generate argument is not an integer:\" + e.getMessage());\n+                           System.exit(-2);\n+                       }\n             } else if (args[i].equals(\"-markersOnly\")) {\n-                addSplits = false;\n+                                                         addSplits = false;\n             } else if (args[i].equals(\"-addShardMarkers\")) {\n-                addShardMarkers = true;\n-            } else if (args[i].equals(\"-addDataTypeMarkers\")) {\n-                shardMarkerTypes = StringUtils.split(args[i + 1], ',');\n+                       addShardMarkers = true;\n+                   } else if (args[i].equals(\"-addDataTypeMarkers\")) {\n+                       shardMarkerTypes = StringUtils.split(args[i + 1], ',');\n                 // skip over cmd, for loop will skip over arg\n-                i++;\n-            } else {\n+                       i++;\n+                                                     } else {\n                 // need at least 3 more args\n-                if (i + 3 > args.length) {\n-                    printUsageAndExit();\n-                } else {\n-                    username = args[i];\n-                    password = PasswordConverter.parseArg(args[i + 1]).getBytes();\n-                    tableName = args[i + 2];\n+                       if (i + 3 > args.length) {\n+                           printUsageAndExit();\n+                       } else {\n+                           username = args[i];\n+                           password = PasswordConverter.parseArg(args[i + 1]).getBytes();\n+                           tableName = args[i + 2];\n                     // skip over args\n-                    i += 3;\n-                }\n+                           i += 3;\n+                       }\n                 // if we still have args\n-                if (i < args.length) {\n+\n+\n+                       if (i < args.length) {\n                     // then we need exactly 2 more args\n-                    if (i + 2 != args.length) {\n-                        printUsageAndExit();\n-                    } else {\n-                        instanceName = args[i];\n-                        zookeepers = args[i + 1];\n+                           if (i + 2 != args.length) {\n+                               printUsageAndExit();\n+                           } else {\n+                               instanceName = args[i];\n+                               zookeepers = args[i + 1];\n                         // skip over args to terminate loop\n-                        i += 2;\n-                    }\n-                }\n-            }\n+                               i += 2;\n+                           }\n+                       }\n+                   }\n         }\n-        \n+\n         SortedSet<Text> splits = new TreeSet<>();\n         List<Mutation> mutations = new ArrayList<>();\n         for (int x = 0; x < DAYS_TO_GENERATE; x++) {\n@@ -130,6 +131,8 @@ public class GenerateShardSplits {\n                     if (addShardMarkers) {\n                         m.put(EMPTY_TEXT, EMPTY_TEXT, EMPTY_VIS, nextYear.getTime(), EMPTY_VALUE);\n                     }\n+\n+\n                     if (shardMarkerTypes != null) {\n                         for (String type : shardMarkerTypes) {\n                             type = type.trim();\n@@ -138,15 +141,17 @@ public class GenerateShardSplits {\n                             }\n                         }\n                     }\n+\n+\n                     if (m.size() > 0) {\n                         mutations.add(m);\n                     }\n                 }\n             }\n-            \n             startDate = DateUtils.addDays(startDate, 1);\n         }\n-        \n+\n+\n         if (username != null) {\n             // Connect to accumulo\n             ClientConfiguration zkConfig = ClientConfiguration.loadDefault().withInstance(instanceName).withZkHosts(zookeepers);\n@@ -159,9 +164,10 @@ public class GenerateShardSplits {\n             }\n             \n             // add the markers\n+\n+\n             if (!mutations.isEmpty()) {\n-                BatchWriter w = connector.createBatchWriter(tableName, new BatchWriterConfig().setMaxLatency(1, TimeUnit.SECONDS).setMaxMemory(100000L)\n-                                .setMaxWriteThreads(4));\n+                BatchWriter w = connector.createBatchWriter(tableName, new BatchWriterConfig().setMaxLatency(1, TimeUnit.SECONDS).setMaxMemory(100000L).setMaxWriteThreads(4));\n                 try {\n                     w.addMutations(mutations);\n                 } finally {\n@@ -176,12 +182,9 @@ public class GenerateShardSplits {\n             }\n             for (Mutation m : mutations) {\n                 for (ColumnUpdate update : m.getUpdates()) {\n-                    System.out.println(new String(m.getRow()) + ' ' + new String(update.getColumnFamily()) + ':' + new String(update.getColumnQualifier())\n-                                    + \" [\" + new String(update.getColumnVisibility()) + \"] \" + new Date(update.getTimestamp()) + \" -> \"\n-                                    + new String(update.getValue()));\n+                    System.out.println(new String(m.getRow()) + ' ' + new String(update.getColumnFamily()) + ':' + new String(update.getColumnQualifier()) + \" [\" + new String(update.getColumnVisibility()) + \"] \" + new Date(update.getTimestamp()) + \" -> \" + new String(update.getValue()));\n                 }\n             }\n-            \n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}