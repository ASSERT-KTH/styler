{
    "project_name": "findbugsproject-findbugs",
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "511",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            }\n        } else if(qName.equals(\"Not\")) {\n        \tNotMatcher matcher = new NotMatcher();\n        \tpushCompoundMatcherAsChild(matcher);\n        }\n        nextMatchedIsDisabled = false;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "512",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/65/SAXBugCollectionHandler.java\nindex 9b6bf68d7d5..8c48db13d2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/65/SAXBugCollectionHandler.java\n@@ -508,7 +508,7 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                     addMatcher(new ClassMatcher(classMatch));\n             }\n         } else if(qName.equals(\"Not\")) {\n-        \tNotMatcher matcher = new NotMatcher();\n+        NotMatcher matcher = new NotMatcher();\n         \tpushCompoundMatcherAsChild(matcher);\n         }\n         nextMatchedIsDisabled = false;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/65/SAXBugCollectionHandler.java\nindex 9b6bf68d7d5..71bc1430f34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/65/SAXBugCollectionHandler.java\n@@ -113,14 +113,15 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n \n     private int nestingOfIgnoredElements = 0;\n \n-    private final @CheckForNull File base;\n+    private final @CheckForNull\n+    File base;\n \n     private final String topLevelName;\n \n     private String cloudPropertyKey;\n \n     private SAXBugCollectionHandler(String topLevelName, BugCollection bugCollection, Project project,\n-            @CheckForNull File base) {\n+                                    @CheckForNull File base) {\n         this.topLevelName = topLevelName;\n         this.bugCollection = bugCollection;\n         this.project = project;\n@@ -162,11 +163,13 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     }\n \n     private String memoized(String s) {\n-        if (s == null)\n+        if (s == null) {\n             return s;\n+        }\n         String result = cache.get(s);\n-        if (result != null)\n+        if (result != null) {\n             return result;\n+        }\n         cache.put(s, s);\n         return s;\n     }\n@@ -184,14 +187,16 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             // ignore it\n         } else {\n             // We should be parsing the outer BugCollection element.\n-            if (elementStack.isEmpty() && !qName.equals(topLevelName))\n+            if (elementStack.isEmpty() && !qName.equals(topLevelName)) {\n                 throw new SAXException(\"Invalid top-level element (expected \" + topLevelName + \", saw \" + qName + \")\");\n+            }\n \n             if (qName.equals(BUG_COLLECTION)) {\n                 // Read and set the sequence number.\n                 String version = getOptionalAttribute(attributes, \"version\");\n-                if (bugCollection instanceof SortedBugCollection)\n+                if (bugCollection instanceof SortedBugCollection) {\n                     bugCollection.setAnalysisVersion(version);\n+                }\n \n                 // Read and set the sequence number.\n                 String sequence = getOptionalAttribute(attributes, \"sequence\");\n@@ -225,10 +230,11 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             } else if (qName.equals(PROJECT)) {\n                 // Project element\n                 String projectName = getOptionalAttribute(attributes, Project.PROJECTNAME_ATTRIBUTE_NAME);\n-                if (projectName != null)\n+                if (projectName != null) {\n                     project.setProjectName(projectName);\n+                }\n             } else if (qName.equals(\"CloudDetails\")) {\n-                Map<String,String> map = new HashMap<String, String>();\n+                Map<String, String> map = new HashMap<String, String>();\n                 for (int i = 0; i < attributes.getLength(); i++) {\n                     map.put(attributes.getLocalName(i), attributes.getValue(i));\n                 }\n@@ -259,8 +265,9 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                             bugInstance.setLastVersion(Long.parseLong(lastVersion));\n                         }\n \n-                        if (bugInstance.isDead() && bugInstance.getFirstVersion() > bugInstance.getLastVersion())\n+                        if (bugInstance.isDead() && bugInstance.getFirstVersion() > bugInstance.getLastVersion()) {\n                             throw new IllegalStateException(\"huh\");\n+                        }\n \n                         String introducedByChange = getOptionalAttribute(attributes, \"introducedByChange\");\n                         if (introducedByChange != null) {\n@@ -271,8 +278,9 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                             bugInstance.setRemovedByChangeOfPersistingClass(Boolean.parseBoolean(removedByChange));\n                         }\n                         String oldInstanceHash = getOptionalAttribute(attributes, \"instanceHash\");\n-                        if (oldInstanceHash == null)\n+                        if (oldInstanceHash == null) {\n                             oldInstanceHash = getOptionalAttribute(attributes, \"oldInstanceHash\");\n+                        }\n                         if (oldInstanceHash != null) {\n                             bugInstance.setOldInstanceHash(oldInstanceHash);\n                         }\n@@ -288,8 +296,9 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                         }\n \n                         String isInCloud = getOptionalAttribute(attributes, \"isInCloud\");\n-                        if (isInCloud != null)\n+                        if (isInCloud != null) {\n                             bugInstance.getXmlProps().setIsInCloud(Boolean.parseBoolean(isInCloud));\n+                        }\n \n                         String reviewCount = getOptionalAttribute(attributes, \"reviews\");\n                         if (reviewCount != null) {\n@@ -305,16 +314,19 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                         String timestamp = getRequiredAttribute(attributes, \"timestamp\", qName);\n                         String vmVersion = getOptionalAttribute(attributes, \"vm_version\");\n                         String totalClasses = getOptionalAttribute(attributes, \"total_classes\");\n-                        if (totalClasses != null && totalClasses.length() > 0)\n+                        if (totalClasses != null && totalClasses.length() > 0) {\n                             bugCollection.getProjectStats().setTotalClasses(Integer.parseInt(totalClasses));\n+                        }\n \n                         String totalSize = getOptionalAttribute(attributes, \"total_size\");\n-                        if (totalSize != null && totalSize.length() > 0)\n+                        if (totalSize != null && totalSize.length() > 0) {\n                             bugCollection.getProjectStats().setTotalSize(Integer.parseInt(totalSize));\n+                        }\n \n                         String referencedClasses = getOptionalAttribute(attributes, \"referenced_classes\");\n-                        if (referencedClasses != null && referencedClasses.length() > 0)\n+                        if (referencedClasses != null && referencedClasses.length() > 0) {\n                             bugCollection.getProjectStats().setReferencedClasses(Integer.parseInt(referencedClasses));\n+                        }\n                         bugCollection.getProjectStats().setVMVersion(vmVersion);\n                         try {\n                             bugCollection.getProjectStats().setTimestamp(timestamp);\n@@ -325,7 +337,7 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                 } else if (outerElement.equals(\"BugInstance\")) {\n                     parseBugInstanceContents(qName, attributes);\n                 } else if (outerElement.equals(\"Method\") || outerElement.equals(\"Field\") || outerElement.equals(\"Class\")\n-                        || outerElement.equals(\"Type\")) {\n+                    || outerElement.equals(\"Type\")) {\n                     if (qName.equals(\"SourceLine\")) {\n                         // package member elements can contain nested SourceLine\n                         // elements.\n@@ -373,14 +385,18 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                             String codeSize = getOptionalAttribute(attributes, \"codeSize\");\n                             String numClasses = getOptionalAttribute(attributes, \"numClasses\");\n                             AppVersion appVersion = new AppVersion(Long.valueOf(sequence));\n-                            if (timestamp != null)\n+                            if (timestamp != null) {\n                                 appVersion.setTimestamp(Long.valueOf(timestamp));\n-                            if (releaseName != null)\n+                            }\n+                            if (releaseName != null) {\n                                 appVersion.setReleaseName(releaseName);\n-                            if (codeSize != null)\n+                            }\n+                            if (codeSize != null) {\n                                 appVersion.setCodeSize(Integer.parseInt(codeSize));\n-                            if (numClasses != null)\n+                            }\n+                            if (numClasses != null) {\n                                 appVersion.setNumClasses(Integer.parseInt(numClasses));\n+                            }\n \n                             bugCollection.addAppVersion(appVersion);\n                         } catch (NumberFormatException e) {\n@@ -412,7 +428,7 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     }\n \n     private boolean isCompoundElementTag(String qName) {\n-        return outerElementTags .contains(qName);\n+        return outerElementTags.contains(qName);\n     }\n \n     private boolean isTopLevelFilter(String qName) {\n@@ -420,18 +436,21 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     }\n \n     private void addMatcher(Matcher m) {\n-        if (m == null)\n+        if (m == null) {\n             throw new IllegalArgumentException(\"matcher must not be null\");\n+        }\n \n         CompoundMatcher peek = matcherStack.peek();\n-        if (peek == null)\n+        if (peek == null) {\n             throw new NullPointerException(\"Top of stack is null\");\n+        }\n         peek.addChild(m);\n         if (nextMatchedIsDisabled) {\n-            if (peek instanceof Filter)\n+            if (peek instanceof Filter) {\n                 ((Filter) peek).disable(m);\n-            else\n+            } else {\n                 assert false;\n+            }\n             nextMatchedIsDisabled = false;\n         }\n     }\n@@ -442,30 +461,33 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     }\n \n     private void pushCompoundMatcher(CompoundMatcher m) {\n-        if (m == null)\n+        if (m == null) {\n             throw new IllegalArgumentException(\"matcher must not be null\");\n+        }\n         matcherStack.push(m);\n     }\n \n     boolean nextMatchedIsDisabled;\n-    private final Set outerElementTags = unmodifiableSet(new HashSet(asList(\"And\", \"Match\", \"Or\", \"Not\")));;\n+    private final Set outerElementTags = unmodifiableSet(new HashSet(asList(\"And\", \"Match\", \"Or\", \"Not\")));\n+    ;\n \n     private void parseMatcher(String qName, Attributes attributes) throws SAXException {\n-        if (DEBUG)\n+        if (DEBUG) {\n             System.out.println(elementStack + \" \" + qName + \" \" + matcherStack);\n+        }\n         String disabled = getOptionalAttribute(attributes, \"disabled\");\n         nextMatchedIsDisabled = \"true\".equals(disabled);\n         if (qName.equals(\"Bug\")) {\n             addMatcher(new BugMatcher(getOptionalAttribute(attributes, \"code\"), getOptionalAttribute(attributes, \"pattern\"),\n-                    getOptionalAttribute(attributes, \"category\")));\n+                getOptionalAttribute(attributes, \"category\")));\n         } else if (qName.equals(\"Class\")) {\n             addMatcher(new ClassMatcher(getOptionalAttribute(attributes, \"name\")));\n         } else if (qName.equals(\"FirstVersion\")) {\n             addMatcher(new FirstVersionMatcher(getRequiredAttribute(attributes, \"value\", qName), getRequiredAttribute(attributes,\n-                    \"relOp\", qName)));\n+                \"relOp\", qName)));\n         } else if (qName.equals(\"LastVersion\")) {\n             addMatcher(new LastVersionMatcher(getRequiredAttribute(attributes, \"value\", qName), getRequiredAttribute(attributes,\n-                    \"relOp\", qName)));\n+                \"relOp\", qName)));\n         } else if (qName.equals(\"Designation\")) {\n             addMatcher(new DesignationMatcher(getRequiredAttribute(attributes, \"designation\", qName)));\n         } else if (qName.equals(\"BugCode\")) {\n@@ -502,14 +524,15 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                 String classregex = getOptionalAttribute(attributes, \"classregex\");\n                 String classMatch = getOptionalAttribute(attributes, \"class\");\n \n-                if (classregex != null)\n+                if (classregex != null) {\n                     addMatcher(new ClassMatcher(\"~\" + classregex));\n-                else if (classMatch != null)\n+                } else if (classMatch != null) {\n                     addMatcher(new ClassMatcher(classMatch));\n+                }\n             }\n-        } else if(qName.equals(\"Not\")) {\n-        \tNotMatcher matcher = new NotMatcher();\n-        \tpushCompoundMatcherAsChild(matcher);\n+        } else if (qName.equals(\"Not\")) {\n+            NotMatcher matcher = new NotMatcher();\n+            pushCompoundMatcherAsChild(matcher);\n         }\n         nextMatchedIsDisabled = false;\n     }\n@@ -525,8 +548,9 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             TypeAnnotation typeAnnotation;\n             bugAnnotation = bugAnnotationWithSourceLines = typeAnnotation = new TypeAnnotation(typeDescriptor);\n             String typeParameters = getOptionalAttribute(attributes, \"typeParameters\");\n-            if (typeParameters != null)\n+            if (typeParameters != null) {\n                 typeAnnotation.setTypeParameters(Strings.unescapeXml(typeParameters));\n+            }\n \n         } else if (qName.equals(\"Method\") || qName.equals(\"Field\")) {\n             String classname = getRequiredAttribute(attributes, \"classname\", qName);\n@@ -539,18 +563,19 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                 }\n \n                 bugAnnotation = bugAnnotationWithSourceLines = new MethodAnnotation(classname, fieldOrMethodName, signature,\n-                        Boolean.valueOf(isStatic));\n+                    Boolean.valueOf(isStatic));\n \n             } else {\n                 String isStatic = getRequiredAttribute(attributes, \"isStatic\", qName);\n                 bugAnnotation = bugAnnotationWithSourceLines = new FieldAnnotation(classname, fieldOrMethodName, signature,\n-                        Boolean.valueOf(isStatic));\n+                    Boolean.valueOf(isStatic));\n             }\n \n         } else if (qName.equals(\"SourceLine\")) {\n             SourceLineAnnotation sourceAnnotation = createSourceLineAnnotation(qName, attributes);\n-            if (!sourceAnnotation.isSynthetic())\n+            if (!sourceAnnotation.isSynthetic()) {\n                 bugAnnotation = sourceAnnotation;\n+            }\n         } else if (qName.equals(\"Int\")) {\n             try {\n                 String value = getRequiredAttribute(attributes, \"value\", qName);\n@@ -582,10 +607,11 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                 bugInstance.setUserDesignationKey(s, null);\n             }\n             s = getOptionalAttribute(attributes, \"user\"); // optional\n-            if (s != null)\n+            if (s != null) {\n                 bugInstance.setUser(s);\n+            }\n             s = getOptionalAttribute(attributes, \"timestamp\"); // optional\n-            if (s != null)\n+            if (s != null) {\n                 try {\n                     long timestamp = Long.valueOf(s);\n                     bugInstance.setUserAnnotationTimestamp(timestamp);\n@@ -594,13 +620,16 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                     // designation.\n                     // but is there anyplace to report this?\n                 }\n-        } else\n+            }\n+        } else {\n             throw new SAXException(\"Unknown bug annotation named \" + qName);\n+        }\n \n         if (bugAnnotation != null) {\n             String role = getOptionalAttribute(attributes, \"role\");\n-            if (role != null)\n+            if (role != null) {\n                 bugAnnotation.setDescription(role);\n+            }\n             setAnnotationRole(attributes, bugAnnotation);\n             bugInstance.add(bugAnnotation);\n         }\n@@ -619,10 +648,8 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     /**\n      * Extract a hash value from an element.\n      *\n-     * @param qName\n-     *            name of element containing hash value\n-     * @param attributes\n-     *            element attributes\n+     * @param qName      name of element containing hash value\n+     * @param attributes element attributes\n      * @return the decoded hash value\n      * @throws SAXException\n      */\n@@ -640,21 +667,23 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n \n     private void setAnnotationRole(Attributes attributes, BugAnnotation bugAnnotation) {\n         String role = getOptionalAttribute(attributes, \"role\");\n-        if (role != null)\n+        if (role != null) {\n             bugAnnotation.setDescription(role);\n+        }\n     }\n \n     private SourceLineAnnotation createSourceLineAnnotation(String qName, Attributes attributes) throws SAXException {\n         String classname = getRequiredAttribute(attributes, \"classname\", qName);\n         String sourceFile = getOptionalAttribute(attributes, \"sourcefile\");\n-        if (sourceFile == null)\n+        if (sourceFile == null) {\n             sourceFile = SourceLineAnnotation.UNKNOWN_SOURCE_FILE;\n+        }\n         String startLine = getOptionalAttribute(attributes, \"start\"); // \"start\"/\"end\"\n-                                                                      // are now\n-                                                                      // optional\n+        // are now\n+        // optional\n         String endLine = getOptionalAttribute(attributes, \"end\"); // (were too\n-                                                                  // many \"-1\"s\n-                                                                  // in the xml)\n+        // many \"-1\"s\n+        // in the xml)\n         String startBytecode = getOptionalAttribute(attributes, \"startBytecode\");\n         String endBytecode = getOptionalAttribute(attributes, \"endBytecode\");\n         String synthetic = getOptionalAttribute(attributes, \"synthetic\");\n@@ -666,8 +695,9 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             int eb = endBytecode != null ? Integer.parseInt(endBytecode) : -1;\n \n             SourceLineAnnotation s = new SourceLineAnnotation(classname, sourceFile, sl, el, sb, eb);\n-            if (\"true\".equals(synthetic))\n+            if (\"true\".equals(synthetic)) {\n                 s.setSynthetic(true);\n+            }\n             return s;\n         } catch (NumberFormatException e) {\n             throw new SAXException(\"Bad integer value in SourceLine element\", e);\n@@ -689,24 +719,26 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             String outerElement = elementStack.get(elementStack.size() - 2);\n \n             if (isTopLevelFilter(qName) || isCompoundElementTag(qName)) {\n-                if (DEBUG)\n+                if (DEBUG) {\n                     System.out.println(\"  ending \" + elementStack + \" \" + qName + \" \" + matcherStack);\n+                }\n \n                 matcherStack.pop();\n             } else if (outerElement.equals(BUG_COLLECTION)) {\n                 if (qName.equals(\"BugInstance\")) {\n                     bugCollection.add(bugInstance, false);\n-                    if (!bugInstance.isDead())\n+                    if (!bugInstance.isDead()) {\n                         bugCollection.getProjectStats().addBug(bugInstance);\n+                    }\n                 }\n             } else if (outerElement.equals(PROJECT)) {\n-                if (qName.equals(\"Jar\"))\n+                if (qName.equals(\"Jar\")) {\n                     project.addFile(makeAbsolute(getTextContents()));\n-                else if (qName.equals(\"SrcDir\"))\n+                } else if (qName.equals(\"SrcDir\")) {\n                     project.addSourceDir(makeAbsolute(getTextContents()));\n-                else if (qName.equals(\"AuxClasspathEntry\"))\n+                } else if (qName.equals(\"AuxClasspathEntry\")) {\n                     project.addAuxClasspathEntry(makeAbsolute(getTextContents()));\n-\n+                }\n \n \n             } else if (outerElement.equals(Project.CLOUD_ELEMENT_NAME) && qName.equals(Project.CLOUD_PROPERTY_ELEMENT_NAME)) {\n@@ -750,12 +782,15 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     }\n \n     private String makeAbsolute(String possiblyRelativePath) {\n-        if (possiblyRelativePath.contains(\"://\"))\n+        if (possiblyRelativePath.contains(\"://\")) {\n             return possiblyRelativePath;\n-        if (base == null)\n+        }\n+        if (base == null) {\n             return possiblyRelativePath;\n-        if (new File(possiblyRelativePath).isAbsolute())\n+        }\n+        if (new File(possiblyRelativePath).isAbsolute()) {\n             return possiblyRelativePath;\n+        }\n \n         return new File(base.getParentFile(), possiblyRelativePath).getAbsolutePath();\n     }\n@@ -767,8 +802,9 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n \n     private String getRequiredAttribute(Attributes attributes, String attrName, String elementName) throws SAXException {\n         String value = attributes.getValue(attrName);\n-        if (value == null)\n+        if (value == null) {\n             throw new SAXException(elementName + \" element missing \" + attrName + \" attribute\");\n+        }\n         return memoized(Strings.unescapeXml(value));\n     }\n \n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/65/SAXBugCollectionHandler.java\nindex 9b6bf68d7d5..2d499327f5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/65/SAXBugCollectionHandler.java\n@@ -34,13 +34,10 @@ import java.util.Set;\n import java.util.Stack;\n import java.util.logging.Logger;\n import java.util.regex.Pattern;\n-\n import javax.annotation.CheckForNull;\n-\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.DefaultHandler;\n-\n import edu.umd.cs.findbugs.ba.ClassHash;\n import edu.umd.cs.findbugs.filter.AndMatcher;\n import edu.umd.cs.findbugs.filter.BugMatcher;\n@@ -68,6 +65,7 @@ import edu.umd.cs.findbugs.util.Strings;\n  *\n  * @author David Hovemeyer\n  */\n+\n public class SAXBugCollectionHandler extends DefaultHandler {\n     private static final String FIND_BUGS_FILTER = \"FindBugsFilter\";\n \n@@ -82,10 +80,12 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n      * @param qName\n      * @return\n      */\n+\n     public String getOptionalAttribute(Attributes attributes, String qName) {\n         return memoized(attributes.getValue(qName));\n     }\n \n+\n     private final BugCollection bugCollection;\n \n     private final Project project;\n@@ -107,29 +107,28 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     private AnalysisError analysisError;\n \n     // private ClassHash classHash;\n+\n     private ClassFeatureSet classFeatureSet;\n \n     private final ArrayList<String> stackTrace;\n \n     private int nestingOfIgnoredElements = 0;\n \n-    private final @CheckForNull File base;\n+    private final @CheckForNull\n+    File base;\n \n     private final String topLevelName;\n \n     private String cloudPropertyKey;\n \n-    private SAXBugCollectionHandler(String topLevelName, BugCollection bugCollection, Project project,\n-            @CheckForNull File base) {\n+    private SAXBugCollectionHandler(String topLevelName, BugCollection bugCollection, Project project, @CheckForNull File base) {\n         this.topLevelName = topLevelName;\n         this.bugCollection = bugCollection;\n         this.project = project;\n-\n         this.elementStack = new ArrayList<String>();\n         this.textBuffer = new StringBuilder();\n         this.stackTrace = new ArrayList<String>();\n         this.base = base;\n-\n     }\n \n     public SAXBugCollectionHandler(BugCollection bugCollection, @CheckForNull File base) {\n@@ -154,13 +153,13 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n \n     public boolean discardedElement(String qName) {\n         return ignoredElement.matcher(qName).matches();\n-\n     }\n \n     public String getTextContents() {\n         return memoized(Strings.unescapeXml(textBuffer.toString()));\n     }\n \n+\n     private String memoized(String s) {\n         if (s == null)\n             return s;\n@@ -171,13 +170,13 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n         return s;\n     }\n \n+\n     private static boolean DEBUG = false;\n \n     @Override\n     public void startElement(String uri, String name, String qName, Attributes attributes) throws SAXException {\n         // URI should always be empty.\n         // So, qName is the name of the element.\n-\n         if (discardedElement(qName)) {\n             nestingOfIgnoredElements++;\n         } else if (nestingOfIgnoredElements > 0) {\n@@ -186,7 +185,6 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             // We should be parsing the outer BugCollection element.\n             if (elementStack.isEmpty() && !qName.equals(topLevelName))\n                 throw new SAXException(\"Invalid top-level element (expected \" + topLevelName + \", saw \" + qName + \")\");\n-\n             if (qName.equals(BUG_COLLECTION)) {\n                 // Read and set the sequence number.\n                 String version = getOptionalAttribute(attributes, \"version\");\n@@ -224,223 +222,209 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                 pushCompoundMatcher(filter);\n             } else if (qName.equals(PROJECT)) {\n                 // Project element\n-                String projectName = getOptionalAttribute(attributes, Project.PROJECTNAME_ATTRIBUTE_NAME);\n-                if (projectName != null)\n-                    project.setProjectName(projectName);\n-            } else if (qName.equals(\"CloudDetails\")) {\n-                Map<String,String> map = new HashMap<String, String>();\n-                for (int i = 0; i < attributes.getLength(); i++) {\n-                    map.put(attributes.getLocalName(i), attributes.getValue(i));\n-                }\n-                bugCollection.setXmlCloudDetails(Collections.unmodifiableMap(map));\n-            } else {\n-                String outerElement = elementStack.get(elementStack.size() - 1);\n-                if (outerElement.equals(BUG_COLLECTION)) {\n+                       String projectName = getOptionalAttribute(attributes, Project.PROJECTNAME_ATTRIBUTE_NAME);\n+                       if (projectName != null)\n+                           project.setProjectName(projectName);\n+                   } else if (qName.equals(\"CloudDetails\")) {\n+                       Map<String, String> map = new HashMap<String, String>();\n+                       for (int i = 0; i < attributes.getLength(); i++) {\n+                           map.put(attributes.getLocalName(i), attributes.getValue(i));\n+                       }\n+                       bugCollection.setXmlCloudDetails(Collections.unmodifiableMap(map));\n+                   } else {\n+                       String outerElement = elementStack.get(elementStack.size() - 1);\n+                       if (outerElement.equals(BUG_COLLECTION)) {\n                     // Parsing a top-level element of the BugCollection\n-                    if (qName.equals(\"BugInstance\")) {\n+                           if (qName.equals(\"BugInstance\")) {\n                         // BugInstance element - get required type and priority\n                         // attributes\n-                        String type = getRequiredAttribute(attributes, \"type\", qName);\n-                        String priority = getRequiredAttribute(attributes, \"priority\", qName);\n-\n-                        try {\n-                            int prio = Integer.parseInt(priority);\n-                            bugInstance = new BugInstance(type, prio);\n-                        } catch (NumberFormatException e) {\n-                            throw new SAXException(\"BugInstance with invalid priority value \\\"\" + priority + \"\\\"\", e);\n-                        }\n-\n-                        String firstVersion = getOptionalAttribute(attributes, \"first\");\n-                        if (firstVersion != null) {\n-                            bugInstance.setFirstVersion(Long.parseLong(firstVersion));\n-                        }\n-                        String lastVersion = getOptionalAttribute(attributes, \"last\");\n-                        if (lastVersion != null) {\n-                            bugInstance.setLastVersion(Long.parseLong(lastVersion));\n-                        }\n-\n-                        if (bugInstance.isDead() && bugInstance.getFirstVersion() > bugInstance.getLastVersion())\n-                            throw new IllegalStateException(\"huh\");\n-\n-                        String introducedByChange = getOptionalAttribute(attributes, \"introducedByChange\");\n-                        if (introducedByChange != null) {\n-                            bugInstance.setIntroducedByChangeOfExistingClass(Boolean.parseBoolean(introducedByChange));\n-                        }\n-                        String removedByChange = getOptionalAttribute(attributes, \"removedByChange\");\n-                        if (removedByChange != null) {\n-                            bugInstance.setRemovedByChangeOfPersistingClass(Boolean.parseBoolean(removedByChange));\n-                        }\n-                        String oldInstanceHash = getOptionalAttribute(attributes, \"instanceHash\");\n-                        if (oldInstanceHash == null)\n-                            oldInstanceHash = getOptionalAttribute(attributes, \"oldInstanceHash\");\n-                        if (oldInstanceHash != null) {\n-                            bugInstance.setOldInstanceHash(oldInstanceHash);\n-                        }\n-\n-                        String firstSeen = getOptionalAttribute(attributes, \"firstSeen\");\n-                        if (firstSeen != null) {\n-                            try {\n-                                bugInstance.getXmlProps().setFirstSeen(BugInstance.firstSeenXMLFormat().parse(firstSeen));\n-                            } catch (ParseException e) {\n-                                LOGGER.warning(\"Could not parse first seen entry: \" + firstSeen);\n+                               String type = getRequiredAttribute(attributes, \"type\", qName);\n+                               String priority = getRequiredAttribute(attributes, \"priority\", qName);\n+                               try {\n+                                   int prio = Integer.parseInt(priority);\n+                                   bugInstance = new BugInstance(type, prio);\n+                               } catch (NumberFormatException e) {\n+                                   throw new SAXException(\"BugInstance with invalid priority value \\\"\" + priority + \"\\\"\", e);\n+                               }\n+                               String firstVersion = getOptionalAttribute(attributes, \"first\");\n+                               if (firstVersion != null) {\n+                                   bugInstance.setFirstVersion(Long.parseLong(firstVersion));\n+                               }\n+                               String lastVersion = getOptionalAttribute(attributes, \"last\");\n+                               if (lastVersion != null) {\n+                                   bugInstance.setLastVersion(Long.parseLong(lastVersion));\n+                               }\n+                               if (bugInstance.isDead() && bugInstance.getFirstVersion() > bugInstance.getLastVersion())\n+                                   throw new IllegalStateException(\"huh\");\n+                               String introducedByChange = getOptionalAttribute(attributes, \"introducedByChange\");\n+                               if (introducedByChange != null) {\n+                                   bugInstance.setIntroducedByChangeOfExistingClass(Boolean.parseBoolean(introducedByChange));\n+                               }\n+                               String removedByChange = getOptionalAttribute(attributes, \"removedByChange\");\n+                               if (removedByChange != null) {\n+                                   bugInstance.setRemovedByChangeOfPersistingClass(Boolean.parseBoolean(removedByChange));\n+                               }\n+                               String oldInstanceHash = getOptionalAttribute(attributes, \"instanceHash\");\n+                               if (oldInstanceHash == null)\n+                                   oldInstanceHash = getOptionalAttribute(attributes, \"oldInstanceHash\");\n+                               if (oldInstanceHash != null) {\n+                                   bugInstance.setOldInstanceHash(oldInstanceHash);\n+                               }\n+                               String firstSeen = getOptionalAttribute(attributes, \"firstSeen\");\n+                               if (firstSeen != null) {\n+                                   try {\n+                                       bugInstance.getXmlProps().setFirstSeen(BugInstance.firstSeenXMLFormat().parse(firstSeen));\n+                                   } catch (ParseException e) {\n+                                       LOGGER.warning(\"Could not parse first seen entry: \" + firstSeen);\n                                 // ignore\n-                            }\n-                        }\n-\n-                        String isInCloud = getOptionalAttribute(attributes, \"isInCloud\");\n-                        if (isInCloud != null)\n-                            bugInstance.getXmlProps().setIsInCloud(Boolean.parseBoolean(isInCloud));\n-\n-                        String reviewCount = getOptionalAttribute(attributes, \"reviews\");\n-                        if (reviewCount != null) {\n-                            bugInstance.getXmlProps().setReviewCount(Integer.parseInt(reviewCount));\n-                        }\n-\n-                        String consensus = getOptionalAttribute(attributes, \"consensus\");\n-                        if (consensus != null) {\n-                            bugInstance.getXmlProps().setConsensus(consensus);\n-                        }\n-\n-                    } else if (qName.equals(\"FindBugsSummary\")) {\n-                        String timestamp = getRequiredAttribute(attributes, \"timestamp\", qName);\n-                        String vmVersion = getOptionalAttribute(attributes, \"vm_version\");\n-                        String totalClasses = getOptionalAttribute(attributes, \"total_classes\");\n-                        if (totalClasses != null && totalClasses.length() > 0)\n-                            bugCollection.getProjectStats().setTotalClasses(Integer.parseInt(totalClasses));\n-\n-                        String totalSize = getOptionalAttribute(attributes, \"total_size\");\n-                        if (totalSize != null && totalSize.length() > 0)\n-                            bugCollection.getProjectStats().setTotalSize(Integer.parseInt(totalSize));\n-\n-                        String referencedClasses = getOptionalAttribute(attributes, \"referenced_classes\");\n-                        if (referencedClasses != null && referencedClasses.length() > 0)\n-                            bugCollection.getProjectStats().setReferencedClasses(Integer.parseInt(referencedClasses));\n-                        bugCollection.getProjectStats().setVMVersion(vmVersion);\n-                        try {\n-                            bugCollection.getProjectStats().setTimestamp(timestamp);\n-                        } catch (java.text.ParseException e) {\n-                            throw new SAXException(\"Unparseable sequence number: '\" + timestamp + \"'\", e);\n-                        }\n-                    }\n-                } else if (outerElement.equals(\"BugInstance\")) {\n-                    parseBugInstanceContents(qName, attributes);\n-                } else if (outerElement.equals(\"Method\") || outerElement.equals(\"Field\") || outerElement.equals(\"Class\")\n-                        || outerElement.equals(\"Type\")) {\n-                    if (qName.equals(\"SourceLine\")) {\n+                                   }\n+                               }\n+                               String isInCloud = getOptionalAttribute(attributes, \"isInCloud\");\n+                               if (isInCloud != null)\n+                                   bugInstance.getXmlProps().setIsInCloud(Boolean.parseBoolean(isInCloud));\n+                               String reviewCount = getOptionalAttribute(attributes, \"reviews\");\n+                               if (reviewCount != null) {\n+                                   bugInstance.getXmlProps().setReviewCount(Integer.parseInt(reviewCount));\n+                               }\n+                               String consensus = getOptionalAttribute(attributes, \"consensus\");\n+                               if (consensus != null) {\n+                                   bugInstance.getXmlProps().setConsensus(consensus);\n+                               }\n+                           } else if (qName.equals(\"FindBugsSummary\")) {\n+                               String timestamp = getRequiredAttribute(attributes, \"timestamp\", qName);\n+                               String vmVersion = getOptionalAttribute(attributes, \"vm_version\");\n+                               String totalClasses = getOptionalAttribute(attributes, \"total_classes\");\n+                               if (totalClasses != null && totalClasses.length() > 0)\n+                                   bugCollection.getProjectStats().setTotalClasses(Integer.parseInt(totalClasses));\n+                               String totalSize = getOptionalAttribute(attributes, \"total_size\");\n+                               if (totalSize != null && totalSize.length() > 0)\n+                                   bugCollection.getProjectStats().setTotalSize(Integer.parseInt(totalSize));\n+                               String referencedClasses = getOptionalAttribute(attributes, \"referenced_classes\");\n+                               if (referencedClasses != null && referencedClasses.length() > 0)\n+                                   bugCollection.getProjectStats().setReferencedClasses(Integer.parseInt(referencedClasses));\n+                               bugCollection.getProjectStats().setVMVersion(vmVersion);\n+                               try {\n+                                   bugCollection.getProjectStats().setTimestamp(timestamp);\n+                               } catch (java.text.ParseException e) {\n+                                   throw new SAXException(\"Unparseable sequence number: '\" + timestamp + \"'\", e);\n+                               }\n+                           }\n+                       } else if (outerElement.equals(\"BugInstance\")) {\n+                           parseBugInstanceContents(qName, attributes);\n+                       } else if (outerElement.equals(\"Method\") || outerElement.equals(\"Field\")\n+                       || outerElement.equals(\"Class\") || outerElement.equals(\"Type\")) {\n+                                  if (qName.equals(\"SourceLine\")) {\n                         // package member elements can contain nested SourceLine\n                         // elements.\n-                        bugAnnotationWithSourceLines.setSourceLines(createSourceLineAnnotation(qName, attributes));\n-                    }\n-                } else if (outerElement.equals(BugCollection.ERRORS_ELEMENT_NAME)) {\n-                    if (qName.equals(BugCollection.ANALYSIS_ERROR_ELEMENT_NAME) || qName.equals(BugCollection.ERROR_ELEMENT_NAME)) {\n-                        analysisError = new AnalysisError(\"Unknown error\");\n-                        stackTrace.clear();\n-                    }\n-                } else if (outerElement.equals(\"FindBugsSummary\") && qName.equals(\"PackageStats\")) {\n-                    String packageName = getRequiredAttribute(attributes, \"package\", qName);\n-                    int numClasses = Integer.valueOf(getRequiredAttribute(attributes, \"total_types\", qName));\n-                    int size = Integer.valueOf(getRequiredAttribute(attributes, \"total_size\", qName));\n-                    bugCollection.getProjectStats().putPackageStats(packageName, numClasses, size);\n-\n-                } else if (outerElement.equals(\"PackageStats\")) {\n-                    if (qName.equals(\"ClassStats\")) {\n-                        String className = getRequiredAttribute(attributes, \"class\", qName);\n-                        Boolean isInterface = Boolean.valueOf(getRequiredAttribute(attributes, \"interface\", qName));\n-                        int size = Integer.valueOf(getRequiredAttribute(attributes, \"size\", qName));\n-                        String sourceFile = getOptionalAttribute(attributes, \"sourceFile\");\n-                        bugCollection.getProjectStats().addClass(className, sourceFile, isInterface, size);\n-                    }\n-\n-                } else if (isTopLevelFilter(outerElement) || isCompoundElementTag(outerElement)) {\n-                    parseMatcher(qName, attributes);\n-                } else if (outerElement.equals(\"ClassFeatures\")) {\n-                    if (qName.equals(ClassFeatureSet.ELEMENT_NAME)) {\n-                        String className = getRequiredAttribute(attributes, \"class\", qName);\n-                        classFeatureSet = new ClassFeatureSet();\n-                        classFeatureSet.setClassName(className);\n-                    }\n-                } else if (outerElement.equals(ClassFeatureSet.ELEMENT_NAME)) {\n-                    if (qName.equals(ClassFeatureSet.FEATURE_ELEMENT_NAME)) {\n-                        String value = getRequiredAttribute(attributes, \"value\", qName);\n-                        classFeatureSet.addFeature(value);\n-                    }\n-                } else if (outerElement.equals(BugCollection.HISTORY_ELEMENT_NAME)) {\n-                    if (qName.equals(AppVersion.ELEMENT_NAME)) {\n-                        try {\n-                            String sequence = getRequiredAttribute(attributes, \"sequence\", qName);\n-                            String timestamp = getOptionalAttribute(attributes, \"timestamp\");\n-                            String releaseName = getOptionalAttribute(attributes, \"release\");\n-                            String codeSize = getOptionalAttribute(attributes, \"codeSize\");\n-                            String numClasses = getOptionalAttribute(attributes, \"numClasses\");\n-                            AppVersion appVersion = new AppVersion(Long.valueOf(sequence));\n-                            if (timestamp != null)\n-                                appVersion.setTimestamp(Long.valueOf(timestamp));\n-                            if (releaseName != null)\n-                                appVersion.setReleaseName(releaseName);\n-                            if (codeSize != null)\n-                                appVersion.setCodeSize(Integer.parseInt(codeSize));\n-                            if (numClasses != null)\n-                                appVersion.setNumClasses(Integer.parseInt(numClasses));\n-\n-                            bugCollection.addAppVersion(appVersion);\n-                        } catch (NumberFormatException e) {\n-                            throw new SAXException(\"Invalid AppVersion element\", e);\n-                        }\n-                    }\n-                } else if (outerElement.equals(BugCollection.PROJECT_ELEMENT_NAME)) {\n-                    if (qName.equals(Project.CLOUD_ELEMENT_NAME)) {\n-                        String cloudId = getRequiredAttribute(attributes, Project.CLOUD_ID_ATTRIBUTE_NAME, qName);\n-                        project.setCloudId(cloudId);\n-                    } else if (qName.equals(Project.PLUGIN_ELEMENT_NAME)) {\n-                        String pluginId = getRequiredAttribute(attributes, Project.PLUGIN_ID_ATTRIBUTE_NAME, qName);\n-                        Boolean enabled = Boolean.valueOf(getRequiredAttribute(attributes, Project.PLUGIN_STATUS_ELEMENT_NAME, qName));\n-                        Plugin plugin = Plugin.getByPluginId(pluginId);\n-                        project.setPluginStatus(plugin, enabled);\n-                    }\n-\n-                } else if (outerElement.equals(Project.CLOUD_ELEMENT_NAME)) {\n-                    if (qName.equals(Project.CLOUD_PROPERTY_ELEMENT_NAME)) {\n-                        cloudPropertyKey = getRequiredAttribute(attributes, \"key\", qName);\n-                    }\n-\n-                }\n-            }\n+                                      bugAnnotationWithSourceLines.setSourceLines(createSourceLineAnnotation(qName, attributes));\n+                                  }\n+                              } else if (outerElement.equals(BugCollection.ERRORS_ELEMENT_NAME)) {\n+                                  if (qName.equals(BugCollection.ANALYSIS_ERROR_ELEMENT_NAME) || qName.equals(BugCollection.ERROR_ELEMENT_NAME)) {\n+                                      analysisError = new AnalysisError(\"Unknown error\");\n+                                      stackTrace.clear();\n+                                  }\n+                              } else if (outerElement.equals(\"FindBugsSummary\") && qName.equals(\"PackageStats\")) {\n+                                         String packageName = getRequiredAttribute(attributes, \"package\", qName);\n+                                         int numClasses = Integer.valueOf(getRequiredAttribute(attributes, \"total_types\", qName));\n+                                         int size = Integer.valueOf(getRequiredAttribute(attributes, \"total_size\", qName));\n+                                         bugCollection.getProjectStats().putPackageStats(packageName, numClasses, size);\n+                                     } else if (outerElement.equals(\"PackageStats\")) {\n+                                         if (qName.equals(\"ClassStats\")) {\n+                                             String className = getRequiredAttribute(attributes, \"class\", qName);\n+                                             Boolean isInterface = Boolean.valueOf(getRequiredAttribute(attributes, \"interface\", qName));\n+                                             int size = Integer.valueOf(getRequiredAttribute(attributes, \"size\", qName));\n+                                             String sourceFile = getOptionalAttribute(attributes, \"sourceFile\");\n+                                             bugCollection.getProjectStats().addClass(className, sourceFile, isInterface, size);\n+                                         }\n+                                     } else if (isTopLevelFilter(outerElement) || isCompoundElementTag(outerElement)) {\n+                                                parseMatcher(qName, attributes);\n+                                            } else if (outerElement.equals(\"ClassFeatures\")) {\n+                                                if (qName.equals(ClassFeatureSet.ELEMENT_NAME)) {\n+                                                    String className = getRequiredAttribute(attributes, \"class\", qName);\n+                                                    classFeatureSet = new ClassFeatureSet();\n+                                                    classFeatureSet.setClassName(className);\n+                                                }\n+                                            } else if (outerElement.equals(ClassFeatureSet.ELEMENT_NAME)) {\n+                                                       if (qName.equals(ClassFeatureSet.FEATURE_ELEMENT_NAME)) {\n+                                                           String value = getRequiredAttribute(attributes, \"value\", qName);\n+                                                           classFeatureSet.addFeature(value);\n+                                                       }\n+                                                   } else if (outerElement.equals(BugCollection.HISTORY_ELEMENT_NAME)) {\n+                                                       if (qName.equals(AppVersion.ELEMENT_NAME)) {\n+                                                           try {\n+                                                               String sequence = getRequiredAttribute(attributes, \"sequence\", qName);\n+                                                               String timestamp = getOptionalAttribute(attributes, \"timestamp\");\n+                                                               String releaseName = getOptionalAttribute(attributes, \"release\");\n+                                                               String codeSize = getOptionalAttribute(attributes, \"codeSize\");\n+                                                               String numClasses = getOptionalAttribute(attributes, \"numClasses\");\n+                                                               AppVersion appVersion = new AppVersion(Long.valueOf(sequence));\n+                                                               if (timestamp != null)\n+                                                                   appVersion.setTimestamp(Long.valueOf(timestamp));\n+                                                               if (releaseName != null)\n+                                                                   appVersion.setReleaseName(releaseName);\n+                                                               if (codeSize != null)\n+                                                                   appVersion.setCodeSize(Integer.parseInt(codeSize));\n+                                                               if (numClasses != null)\n+                                                                   appVersion.setNumClasses(Integer.parseInt(numClasses));\n+                                                               bugCollection.addAppVersion(appVersion);\n+                                                           } catch (NumberFormatException e) {\n+                                                               throw new SAXException(\"Invalid AppVersion element\", e);\n+                                                           }\n+                                                       }\n+                                                   } else if (outerElement.equals(BugCollection.PROJECT_ELEMENT_NAME)) {\n+                                                              if (qName.equals(Project.CLOUD_ELEMENT_NAME)) {\n+                                                                  String cloudId = getRequiredAttribute(attributes, Project.CLOUD_ID_ATTRIBUTE_NAME, qName);\n+                                                                  project.setCloudId(cloudId);\n+                                                              } else if (qName.equals(Project.PLUGIN_ELEMENT_NAME)) {\n+                                                                  String pluginId = getRequiredAttribute(attributes, Project.PLUGIN_ID_ATTRIBUTE_NAME, qName);\n+                                                                  Boolean enabled = Boolean.valueOf(getRequiredAttribute(attributes, Project.PLUGIN_STATUS_ELEMENT_NAME, qName));\n+                                                                  Plugin plugin = Plugin.getByPluginId(pluginId);\n+                                                                  project.setPluginStatus(plugin, enabled);\n+                                                              }\n+                                                          } else if (outerElement.equals(Project.CLOUD_ELEMENT_NAME)) {\n+                                                              if (qName.equals(Project.CLOUD_PROPERTY_ELEMENT_NAME)) {\n+                                                                  cloudPropertyKey = getRequiredAttribute(attributes, \"key\", qName);\n+                                                              }\n+                                                          }\n+                   }\n         }\n-\n         textBuffer.delete(0, textBuffer.length());\n         elementStack.add(qName);\n     }\n \n+\n     private boolean isCompoundElementTag(String qName) {\n-        return outerElementTags .contains(qName);\n+        return outerElementTags.contains(qName);\n     }\n \n+\n     private boolean isTopLevelFilter(String qName) {\n         return qName.equals(FIND_BUGS_FILTER) || qName.equals(\"SuppressionFilter\");\n     }\n \n+\n     private void addMatcher(Matcher m) {\n         if (m == null)\n             throw new IllegalArgumentException(\"matcher must not be null\");\n-\n         CompoundMatcher peek = matcherStack.peek();\n         if (peek == null)\n             throw new NullPointerException(\"Top of stack is null\");\n         peek.addChild(m);\n         if (nextMatchedIsDisabled) {\n-            if (peek instanceof Filter)\n-                ((Filter) peek).disable(m);\n+            if (peek instanceof Filter) ((Filter) peek).disable(m);\n             else\n                 assert false;\n             nextMatchedIsDisabled = false;\n         }\n     }\n \n+\n     private void pushCompoundMatcherAsChild(CompoundMatcher m) {\n         addMatcher(m);\n         pushCompoundMatcher(m);\n     }\n \n+\n     private void pushCompoundMatcher(CompoundMatcher m) {\n         if (m == null)\n             throw new IllegalArgumentException(\"matcher must not be null\");\n@@ -448,7 +432,11 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     }\n \n     boolean nextMatchedIsDisabled;\n-    private final Set outerElementTags = unmodifiableSet(new HashSet(asList(\"And\", \"Match\", \"Or\", \"Not\")));;\n+\n+    private final Set outerElementTags = unmodifiableSet(new HashSet(asList(\"And\", \"Match\", \"Or\", \"Not\")));\n+\n+    ;\n+\n \n     private void parseMatcher(String qName, Attributes attributes) throws SAXException {\n         if (DEBUG)\n@@ -456,64 +444,63 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n         String disabled = getOptionalAttribute(attributes, \"disabled\");\n         nextMatchedIsDisabled = \"true\".equals(disabled);\n         if (qName.equals(\"Bug\")) {\n-            addMatcher(new BugMatcher(getOptionalAttribute(attributes, \"code\"), getOptionalAttribute(attributes, \"pattern\"),\n+            addMatcher(new BugMatcher(getOptionalAttribute(attributes, \"code\"),\n+                getOptionalAttribute(attributes, \"pattern\"),\n                     getOptionalAttribute(attributes, \"category\")));\n         } else if (qName.equals(\"Class\")) {\n             addMatcher(new ClassMatcher(getOptionalAttribute(attributes, \"name\")));\n         } else if (qName.equals(\"FirstVersion\")) {\n-            addMatcher(new FirstVersionMatcher(getRequiredAttribute(attributes, \"value\", qName), getRequiredAttribute(attributes,\n-                    \"relOp\", qName)));\n-        } else if (qName.equals(\"LastVersion\")) {\n-            addMatcher(new LastVersionMatcher(getRequiredAttribute(attributes, \"value\", qName), getRequiredAttribute(attributes,\n-                    \"relOp\", qName)));\n-        } else if (qName.equals(\"Designation\")) {\n-            addMatcher(new DesignationMatcher(getRequiredAttribute(attributes, \"designation\", qName)));\n-        } else if (qName.equals(\"BugCode\")) {\n-            addMatcher(new BugMatcher(getOptionalAttribute(attributes, \"name\"), \"\", \"\"));\n-        } else if (qName.equals(\"Local\")) {\n-            addMatcher(new LocalMatcher(getOptionalAttribute(attributes, \"name\")));\n-        } else if (qName.equals(\"BugPattern\")) {\n-            addMatcher(new BugMatcher(\"\", getOptionalAttribute(attributes, \"name\"), \"\"));\n-        } else if (qName.equals(\"Priority\") || qName.equals(\"Confidence\")) {\n-            addMatcher(new PriorityMatcher(getOptionalAttribute(attributes, \"value\")));\n-        } else if (qName.equals(\"Rank\")) {\n-            addMatcher(new RankMatcher(getOptionalAttribute(attributes, \"value\")));\n-        } else if (qName.equals(\"Package\")) {\n-            String pName = getOptionalAttribute(attributes, \"name\");\n-            pName = pName.startsWith(\"~\") ? pName : \"~\" + pName.replace(\".\", \"\\\\.\");\n-            addMatcher(new ClassMatcher(pName + \"\\\\.[^.]+\"));\n-        } else if (qName.equals(\"Method\")) {\n-            String name = getOptionalAttribute(attributes, \"name\");\n-            String params = getOptionalAttribute(attributes, \"params\");\n-            String returns = getOptionalAttribute(attributes, \"returns\");\n-            String role = getOptionalAttribute(attributes, \"role\");\n-            addMatcher(new MethodMatcher(name, params, returns, role));\n-        } else if (qName.equals(\"Field\")) {\n-            String name = getOptionalAttribute(attributes, \"name\");\n-            String type = getOptionalAttribute(attributes, \"type\");\n-            addMatcher(new FieldMatcher(name, type));\n-        } else if (qName.equals(\"Or\")) {\n-            CompoundMatcher matcher = new OrMatcher();\n-            pushCompoundMatcherAsChild(matcher);\n-        } else if (qName.equals(\"And\") || qName.equals(\"Match\")) {\n-            AndMatcher matcher = new AndMatcher();\n-            pushCompoundMatcherAsChild(matcher);\n-            if (qName.equals(\"Match\")) {\n-                String classregex = getOptionalAttribute(attributes, \"classregex\");\n-                String classMatch = getOptionalAttribute(attributes, \"class\");\n-\n-                if (classregex != null)\n-                    addMatcher(new ClassMatcher(\"~\" + classregex));\n-                else if (classMatch != null)\n-                    addMatcher(new ClassMatcher(classMatch));\n-            }\n-        } else if(qName.equals(\"Not\")) {\n-        \tNotMatcher matcher = new NotMatcher();\n-        \tpushCompoundMatcherAsChild(matcher);\n-        }\n+                   addMatcher(new FirstVersionMatcher(getRequiredAttribute(attributes, \"value\", qName), getRequiredAttribute(attributes, \"relOp\", qName)));\n+               } else if (qName.equals(\"LastVersion\")) {\n+                   addMatcher(new LastVersionMatcher(getRequiredAttribute(attributes, \"value\", qName), getRequiredAttribute(attributes, \"relOp\", qName)));\n+               } else if (qName.equals(\"Designation\")) {\n+                          addMatcher(new DesignationMatcher(getRequiredAttribute(attributes, \"designation\", qName)));\n+                      } else if (qName.equals(\"BugCode\")) {\n+                          addMatcher(new BugMatcher(getOptionalAttribute(attributes, \"name\"), \"\", \"\"));\n+                      } else if (qName.equals(\"Local\")) {\n+                                 addMatcher(new LocalMatcher(getOptionalAttribute(attributes, \"name\")));\n+                             } else if (qName.equals(\"BugPattern\")) {\n+                                 addMatcher(new BugMatcher(\"\", getOptionalAttribute(attributes, \"name\"), \"\"));\n+                             } else if (qName.equals(\"Priority\") || qName.equals(\"Confidence\")) {\n+                                        addMatcher(new PriorityMatcher(getOptionalAttribute(attributes, \"value\")));\n+                                    } else if (qName.equals(\"Rank\")) {\n+                                        addMatcher(new RankMatcher(getOptionalAttribute(attributes, \"value\")));\n+                                    } else if (qName.equals(\"Package\")) {\n+                                               String pName = getOptionalAttribute(attributes, \"name\");\n+                                               pName = pName.startsWith(\"~\") ? pName : \"~\" + pName.replace(\".\", \"\\\\.\");\n+                                               addMatcher(new ClassMatcher(pName + \"\\\\.[^.]+\"));\n+                                           } else if (qName.equals(\"Method\")) {\n+                                               String name = getOptionalAttribute(attributes, \"name\");\n+                                               String params = getOptionalAttribute(attributes, \"params\");\n+                                               String returns = getOptionalAttribute(attributes, \"returns\");\n+                                               String role = getOptionalAttribute(attributes, \"role\");\n+                                               addMatcher(new MethodMatcher(name, params, returns, role));\n+                                           } else if (qName.equals(\"Field\")) {\n+                                                      String name = getOptionalAttribute(attributes, \"name\");\n+                                                      String type = getOptionalAttribute(attributes, \"type\");\n+                                                      addMatcher(new FieldMatcher(name, type));\n+                                                  } else if (qName.equals(\"Or\")) {\n+                                                      CompoundMatcher matcher = new OrMatcher();\n+                                                      pushCompoundMatcherAsChild(matcher);\n+                                                  } else if (qName.equals(\"And\") || qName.equals(\"Match\")) {\n+                                                             AndMatcher matcher = new AndMatcher();\n+                                                             pushCompoundMatcherAsChild(matcher);\n+                                                             if (qName.equals(\"Match\")) {\n+                                                                 String classregex = getOptionalAttribute(attributes, \"classregex\");\n+                                                                 String classMatch = getOptionalAttribute(attributes, \"class\");\n+                                                                 if (classregex != null)\n+                                                                     addMatcher(new ClassMatcher(\"~\" + classregex));\n+                                                                 else if (classMatch != null)\n+                                                                     addMatcher(new ClassMatcher(classMatch));\n+                                                             }\n+                                                         } else if (qName.equals(\"Not\")) {\n+                                                             NotMatcher matcher = new NotMatcher();\n+                                                             pushCompoundMatcherAsChild(matcher);\n+                                                         }\n         nextMatchedIsDisabled = false;\n     }\n \n+\n     private void parseBugInstanceContents(String qName, Attributes attributes) throws SAXException {\n         // Parsing an attribute or property of a BugInstance\n         BugAnnotation bugAnnotation = null;\n@@ -527,76 +514,70 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             String typeParameters = getOptionalAttribute(attributes, \"typeParameters\");\n             if (typeParameters != null)\n                 typeAnnotation.setTypeParameters(Strings.unescapeXml(typeParameters));\n-\n         } else if (qName.equals(\"Method\") || qName.equals(\"Field\")) {\n-            String classname = getRequiredAttribute(attributes, \"classname\", qName);\n-            String fieldOrMethodName = getRequiredAttribute(attributes, \"name\", qName);\n-            String signature = getRequiredAttribute(attributes, \"signature\", qName);\n-            if (qName.equals(\"Method\")) {\n-                String isStatic = getOptionalAttribute(attributes, \"isStatic\");\n-                if (isStatic == null) {\n-                    isStatic = \"false\"; // Hack for old data\n-                }\n-\n-                bugAnnotation = bugAnnotationWithSourceLines = new MethodAnnotation(classname, fieldOrMethodName, signature,\n-                        Boolean.valueOf(isStatic));\n-\n-            } else {\n-                String isStatic = getRequiredAttribute(attributes, \"isStatic\", qName);\n-                bugAnnotation = bugAnnotationWithSourceLines = new FieldAnnotation(classname, fieldOrMethodName, signature,\n-                        Boolean.valueOf(isStatic));\n-            }\n-\n-        } else if (qName.equals(\"SourceLine\")) {\n-            SourceLineAnnotation sourceAnnotation = createSourceLineAnnotation(qName, attributes);\n-            if (!sourceAnnotation.isSynthetic())\n-                bugAnnotation = sourceAnnotation;\n-        } else if (qName.equals(\"Int\")) {\n-            try {\n-                String value = getRequiredAttribute(attributes, \"value\", qName);\n-                bugAnnotation = new IntAnnotation(Integer.parseInt(value));\n-            } catch (NumberFormatException e) {\n-                throw new SAXException(\"Bad integer value in Int\");\n-            }\n-        } else if (qName.equals(\"String\")) {\n-            String value = getRequiredAttribute(attributes, \"value\", qName);\n-            bugAnnotation = StringAnnotation.fromXMLEscapedString(value);\n-        } else if (qName.equals(\"LocalVariable\")) {\n-            try {\n-                String varName = getRequiredAttribute(attributes, \"name\", qName);\n-                int register = Integer.parseInt(getRequiredAttribute(attributes, \"register\", qName));\n-                int pc = Integer.parseInt(getRequiredAttribute(attributes, \"pc\", qName));\n-                bugAnnotation = new LocalVariableAnnotation(varName, register, pc);\n-            } catch (NumberFormatException e) {\n-                throw new SAXException(\"Invalid integer value in attribute of LocalVariable element\");\n-            }\n-        } else if (qName.equals(\"Property\")) {\n+                   String classname = getRequiredAttribute(attributes, \"classname\", qName);\n+                   String fieldOrMethodName = getRequiredAttribute(attributes, \"name\", qName);\n+                   String signature = getRequiredAttribute(attributes, \"signature\", qName);\n+                   if (qName.equals(\"Method\")) {\n+                       String isStatic = getOptionalAttribute(attributes, \"isStatic\");\n+                       if (isStatic == null) {\n+                           isStatic = \"false\"; // Hack for old data\n+                       }\n+                       bugAnnotation = bugAnnotationWithSourceLines = new MethodAnnotation(classname, fieldOrMethodName, signature, Boolean.valueOf(isStatic));\n+                   } else {\n+                       String isStatic = getRequiredAttribute(attributes, \"isStatic\", qName);\n+                       bugAnnotation = bugAnnotationWithSourceLines = new FieldAnnotation(classname, fieldOrMethodName, signature, Boolean.valueOf(isStatic));\n+                   }\n+               } else if (qName.equals(\"SourceLine\")) {\n+                   SourceLineAnnotation sourceAnnotation = createSourceLineAnnotation(qName, attributes);\n+                   if (!sourceAnnotation.isSynthetic())\n+                       bugAnnotation = sourceAnnotation;\n+               } else if (qName.equals(\"Int\")) {\n+                          try {\n+                              String value = getRequiredAttribute(attributes, \"value\", qName);\n+                              bugAnnotation = new IntAnnotation(Integer.parseInt(value));\n+                          } catch (NumberFormatException e) {\n+                              throw new SAXException(\"Bad integer value in Int\");\n+                          }\n+                      } else if (qName.equals(\"String\")) {\n+                          String value = getRequiredAttribute(attributes, \"value\", qName);\n+                          bugAnnotation = StringAnnotation.fromXMLEscapedString(value);\n+                      } else if (qName.equals(\"LocalVariable\")) {\n+                                 try {\n+                                     String varName = getRequiredAttribute(attributes, \"name\", qName);\n+                                     int register = Integer.parseInt(getRequiredAttribute(attributes, \"register\", qName));\n+                                     int pc = Integer.parseInt(getRequiredAttribute(attributes, \"pc\", qName));\n+                                     bugAnnotation = new LocalVariableAnnotation(varName, register, pc);\n+                                 } catch (NumberFormatException e) {\n+                                     throw new SAXException(\"Invalid integer value in attribute of LocalVariable element\");\n+                                 }\n+                             } else if (qName.equals(\"Property\")) {\n             // A BugProperty.\n-            String propName = getRequiredAttribute(attributes, \"name\", qName);\n-            String propValue = getRequiredAttribute(attributes, \"value\", qName);\n-            bugInstance.setProperty(propName, propValue);\n-        } else if (qName.equals(\"UserAnnotation\")) {\n+                                 String propName = getRequiredAttribute(attributes, \"name\", qName);\n+                                 String propValue = getRequiredAttribute(attributes, \"value\", qName);\n+                                 bugInstance.setProperty(propName, propValue);\n+                             } else if (qName.equals(\"UserAnnotation\")) {\n             // ignore AnnotationText for now; will handle in endElement\n-            String s = getOptionalAttribute(attributes, \"designation\"); // optional\n-            if (s != null) {\n-                bugInstance.setUserDesignationKey(s, null);\n-            }\n-            s = getOptionalAttribute(attributes, \"user\"); // optional\n-            if (s != null)\n-                bugInstance.setUser(s);\n-            s = getOptionalAttribute(attributes, \"timestamp\"); // optional\n-            if (s != null)\n-                try {\n-                    long timestamp = Long.valueOf(s);\n-                    bugInstance.setUserAnnotationTimestamp(timestamp);\n-                } catch (NumberFormatException nfe) {\n+                                        String s = getOptionalAttribute(attributes, \"designation\"); // optional\n+                                        if (s != null) {\n+                                            bugInstance.setUserDesignationKey(s, null);\n+                                        }\n+                                        s = getOptionalAttribute(attributes, \"user\"); // optional\n+                                        if (s != null)\n+                                            bugInstance.setUser(s);\n+                                        s = getOptionalAttribute(attributes, \"timestamp\"); // optional\n+                                        if (s != null)\n+                                            try {\n+                                                long timestamp = Long.valueOf(s);\n+                                                bugInstance.setUserAnnotationTimestamp(timestamp);\n+                                            } catch (NumberFormatException nfe) {\n                     // ok to contine -- just won't set a timestamp for the user\n                     // designation.\n                     // but is there anyplace to report this?\n-                }\n-        } else\n-            throw new SAXException(\"Unknown bug annotation named \" + qName);\n \n+                                            }\n+                                    } else\n+                                          throw new SAXException(\"Unknown bug annotation named \" + qName);\n         if (bugAnnotation != null) {\n             String role = getOptionalAttribute(attributes, \"role\");\n             if (role != null)\n@@ -606,6 +587,7 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n         }\n     }\n \n+\n     private long parseLong(String s, long defaultValue) {\n         long value;\n         try {\n@@ -626,6 +608,8 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n      * @return the decoded hash value\n      * @throws SAXException\n      */\n+\n+\n     private byte[] extractHash(String qName, Attributes attributes) throws SAXException {\n         String encodedHash = getRequiredAttribute(attributes, \"value\", qName);\n         byte[] hash;\n@@ -638,12 +622,14 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n         return hash;\n     }\n \n+\n     private void setAnnotationRole(Attributes attributes, BugAnnotation bugAnnotation) {\n         String role = getOptionalAttribute(attributes, \"role\");\n         if (role != null)\n             bugAnnotation.setDescription(role);\n     }\n \n+\n     private SourceLineAnnotation createSourceLineAnnotation(String qName, Attributes attributes) throws SAXException {\n         String classname = getRequiredAttribute(attributes, \"classname\", qName);\n         String sourceFile = getOptionalAttribute(attributes, \"sourcefile\");\n@@ -658,13 +644,11 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n         String startBytecode = getOptionalAttribute(attributes, \"startBytecode\");\n         String endBytecode = getOptionalAttribute(attributes, \"endBytecode\");\n         String synthetic = getOptionalAttribute(attributes, \"synthetic\");\n-\n         try {\n             int sl = startLine != null ? Integer.parseInt(startLine) : -1;\n             int el = endLine != null ? Integer.parseInt(endLine) : -1;\n             int sb = startBytecode != null ? Integer.parseInt(startBytecode) : -1;\n             int eb = endBytecode != null ? Integer.parseInt(endBytecode) : -1;\n-\n             SourceLineAnnotation s = new SourceLineAnnotation(classname, sourceFile, sl, el, sb, eb);\n             if (\"true\".equals(synthetic))\n                 s.setSynthetic(true);\n@@ -678,77 +662,70 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n     public void endElement(String uri, String name, String qName) throws SAXException {\n         // URI should always be empty.\n         // So, qName is the name of the element.\n-\n         if (discardedElement(qName)) {\n             nestingOfIgnoredElements--;\n         } else if (nestingOfIgnoredElements > 0) {\n             // ignore it\n         } else if (qName.equals(\"Project\")) {\n-            project.resetConfiguration();\n-        } else if (elementStack.size() > 1) {\n-            String outerElement = elementStack.get(elementStack.size() - 2);\n-\n-            if (isTopLevelFilter(qName) || isCompoundElementTag(qName)) {\n-                if (DEBUG)\n-                    System.out.println(\"  ending \" + elementStack + \" \" + qName + \" \" + matcherStack);\n-\n-                matcherStack.pop();\n-            } else if (outerElement.equals(BUG_COLLECTION)) {\n-                if (qName.equals(\"BugInstance\")) {\n-                    bugCollection.add(bugInstance, false);\n-                    if (!bugInstance.isDead())\n-                        bugCollection.getProjectStats().addBug(bugInstance);\n-                }\n-            } else if (outerElement.equals(PROJECT)) {\n-                if (qName.equals(\"Jar\"))\n-                    project.addFile(makeAbsolute(getTextContents()));\n-                else if (qName.equals(\"SrcDir\"))\n-                    project.addSourceDir(makeAbsolute(getTextContents()));\n-                else if (qName.equals(\"AuxClasspathEntry\"))\n-                    project.addAuxClasspathEntry(makeAbsolute(getTextContents()));\n-\n-\n-\n-            } else if (outerElement.equals(Project.CLOUD_ELEMENT_NAME) && qName.equals(Project.CLOUD_PROPERTY_ELEMENT_NAME)) {\n-                assert cloudPropertyKey != null;\n-                project.getCloudProperties().setProperty(cloudPropertyKey, getTextContents());\n-                cloudPropertyKey = null;\n-            } else if (outerElement.equals(\"BugInstance\")) {\n-                if (qName.equals(\"UserAnnotation\")) {\n-                    bugInstance.setAnnotationText(getTextContents(), null);\n-                }\n-            } else if (outerElement.equals(BugCollection.ERRORS_ELEMENT_NAME)) {\n-                if (qName.equals(BugCollection.ANALYSIS_ERROR_ELEMENT_NAME)) {\n-                    analysisError.setMessage(getTextContents());\n-                    bugCollection.addError(analysisError);\n-                } else if (qName.equals(BugCollection.ERROR_ELEMENT_NAME)) {\n-                    if (stackTrace.size() > 0) {\n-                        analysisError.setStackTrace(stackTrace.toArray(new String[stackTrace.size()]));\n-                    }\n-                    bugCollection.addError(analysisError);\n-                } else if (qName.equals(BugCollection.MISSING_CLASS_ELEMENT_NAME)) {\n-                    bugCollection.addMissingClass(getTextContents());\n-                }\n-\n-            } else if (outerElement.equals(BugCollection.ERROR_ELEMENT_NAME)) {\n-                if (qName.equals(BugCollection.ERROR_MESSAGE_ELEMENT_NAME)) {\n-                    analysisError.setMessage(getTextContents());\n-                } else if (qName.equals(BugCollection.ERROR_EXCEPTION_ELEMENT_NAME)) {\n-                    analysisError.setExceptionMessage(getTextContents());\n-                } else if (qName.equals(BugCollection.ERROR_STACK_TRACE_ELEMENT_NAME)) {\n-                    stackTrace.add(getTextContents());\n-                }\n-            } else if (outerElement.equals(\"ClassFeatures\")) {\n-                if (qName.equals(ClassFeatureSet.ELEMENT_NAME)) {\n-                    bugCollection.setClassFeatureSet(classFeatureSet);\n-                    classFeatureSet = null;\n-                }\n-            }\n-        }\n-\n+                   project.resetConfiguration();\n+               } else if (elementStack.size() > 1) {\n+                   String outerElement = elementStack.get(elementStack.size() - 2);\n+                   if (isTopLevelFilter(qName) || isCompoundElementTag(qName)) {\n+                       if (DEBUG)\n+                           System.out.println(\"  ending \" + elementStack + \" \" + qName + \" \" + matcherStack);\n+                       matcherStack.pop();\n+                   } else if (outerElement.equals(BUG_COLLECTION)) {\n+                       if (qName.equals(\"BugInstance\")) {\n+                           bugCollection.add(bugInstance, false);\n+                           if (!bugInstance.isDead())\n+                               bugCollection.getProjectStats().addBug(bugInstance);\n+                       }\n+                   } else if (outerElement.equals(PROJECT)) {\n+                              if (qName.equals(\"Jar\"))\n+                                  project.addFile(makeAbsolute(getTextContents()));\n+                              else if (qName.equals(\"SrcDir\"))\n+                                  project.addSourceDir(makeAbsolute(getTextContents()));\n+                              else if (qName.equals(\"AuxClasspathEntry\"))\n+                                  project.addAuxClasspathEntry(makeAbsolute(getTextContents()));\n+                          } else if (outerElement.equals(Project.CLOUD_ELEMENT_NAME) && qName.equals(Project.CLOUD_PROPERTY_ELEMENT_NAME)) {\n+                              assert cloudPropertyKey != null;\n+                              project.getCloudProperties().setProperty(cloudPropertyKey, getTextContents());\n+                              cloudPropertyKey = null;\n+                          } else if (outerElement.equals(\"BugInstance\")) {\n+                                     if (qName.equals(\"UserAnnotation\")) {\n+                                         bugInstance.setAnnotationText(getTextContents(), null);\n+                                     }\n+                                 } else if (outerElement.equals(BugCollection.ERRORS_ELEMENT_NAME)) {\n+                                     if (qName.equals(BugCollection.ANALYSIS_ERROR_ELEMENT_NAME)) {\n+                                         analysisError.setMessage(getTextContents());\n+                                         bugCollection.addError(analysisError);\n+                                     } else if (qName.equals(BugCollection.ERROR_ELEMENT_NAME)) {\n+                                         if (stackTrace.size() > 0) {\n+                                             analysisError.setStackTrace(stackTrace.toArray(new String[stackTrace.size()]));\n+                                         }\n+                                         bugCollection.addError(analysisError);\n+                                     } else if (qName.equals(BugCollection.MISSING_CLASS_ELEMENT_NAME)) {\n+                                                bugCollection.addMissingClass(getTextContents());\n+                                            }\n+                                 } else if (outerElement.equals(BugCollection.ERROR_ELEMENT_NAME)) {\n+                                            if (qName.equals(BugCollection.ERROR_MESSAGE_ELEMENT_NAME)) {\n+                                                analysisError.setMessage(getTextContents());\n+                                            } else if (qName.equals(BugCollection.ERROR_EXCEPTION_ELEMENT_NAME)) {\n+                                                analysisError.setExceptionMessage(getTextContents());\n+                                            } else if (qName.equals(BugCollection.ERROR_STACK_TRACE_ELEMENT_NAME)) {\n+                                                       stackTrace.add(getTextContents());\n+                                                   }\n+                                        } else if (outerElement.equals(\"ClassFeatures\")) {\n+                                            if (qName.equals(ClassFeatureSet.ELEMENT_NAME)) {\n+                                                bugCollection.setClassFeatureSet(classFeatureSet);\n+                                                classFeatureSet = null;\n+                                            }\n+                                        }\n+               }\n         elementStack.remove(elementStack.size() - 1);\n     }\n \n+\n     private String makeAbsolute(String possiblyRelativePath) {\n         if (possiblyRelativePath.contains(\"://\"))\n             return possiblyRelativePath;\n@@ -756,7 +733,6 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n             return possiblyRelativePath;\n         if (new File(possiblyRelativePath).isAbsolute())\n             return possiblyRelativePath;\n-\n         return new File(base.getParentFile(), possiblyRelativePath).getAbsolutePath();\n     }\n \n@@ -765,13 +741,11 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n         textBuffer.append(ch, start, length);\n     }\n \n+\n     private String getRequiredAttribute(Attributes attributes, String attrName, String elementName) throws SAXException {\n         String value = attributes.getValue(attrName);\n         if (value == null)\n             throw new SAXException(elementName + \" element missing \" + attrName + \" attribute\");\n         return memoized(Strings.unescapeXml(value));\n     }\n-\n-}\n-\n-// vim:ts=4\n+}\n\\ No newline at end of file\n",
            "diff_size": 404
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "512",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/65/SAXBugCollectionHandler.java\nindex 9b6bf68d7d5..8c48db13d2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/65/SAXBugCollectionHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/65/SAXBugCollectionHandler.java\n@@ -508,7 +508,7 @@ public class SAXBugCollectionHandler extends DefaultHandler {\n                     addMatcher(new ClassMatcher(classMatch));\n             }\n         } else if(qName.equals(\"Not\")) {\n-        \tNotMatcher matcher = new NotMatcher();\n+        NotMatcher matcher = new NotMatcher();\n         \tpushCompoundMatcherAsChild(matcher);\n         }\n         nextMatchedIsDisabled = false;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}