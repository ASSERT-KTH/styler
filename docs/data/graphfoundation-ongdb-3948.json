{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3948",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3948/TransactionLogFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3948/TransactionLogFile.java\nindex b7cf32bf28a..77305bba775 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3948/TransactionLogFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3948/TransactionLogFile.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.files;\n \n import java.io.FileNotFoundException;\n@@ -42,175 +43,175 @@ import org.neo4j.kernel.lifecycle.LifecycleAdapter;\n  */\n class TransactionLogFile extends LifecycleAdapter implements LogFile\n {\n-    private final AtomicLong rotateAtSize;\n-    private final TransactionLogFiles logFiles;\n-    private final TransactionLogFilesContext context;\n-    private final LogVersionBridge readerLogVersionBridge;\n-    private PositionAwarePhysicalFlushableChannel writer;\n-    private LogVersionRepository logVersionRepository;\n+  private final AtomicLong rotateAtSize;\n+  private final TransactionLogFiles logFiles;\n+  private final TransactionLogFilesContext context;\n+  private final LogVersionBridge readerLogVersionBridge;\n+  private PositionAwarePhysicalFlushableChannel writer;\n+  private LogVersionRepository logVersionRepository;\n \n-    private volatile PhysicalLogVersionedStoreChannel channel;\n+  private volatile PhysicalLogVersionedStoreChannel channel;\n \n-    TransactionLogFile( TransactionLogFiles logFiles, TransactionLogFilesContext context )\n-    {\n-        this.rotateAtSize = context.getRotationThreshold();\n-        this.context = context;\n-        this.logFiles = logFiles;\n-        this.readerLogVersionBridge = new ReaderLogVersionBridge( logFiles );\n-    }\n+  TransactionLogFile(TransactionLogFiles logFiles, TransactionLogFilesContext context)\n+  {\n+    this.rotateAtSize = context.getRotationThreshold();\n+    this.context = context;\n+    this.logFiles = logFiles;\n+    this.readerLogVersionBridge = new ReaderLogVersionBridge(logFiles);\n+  }\n \n-    @Override\n-    public void init() throws IOException\n-    {\n-        logVersionRepository = context.getLogVersionRepository();\n-        // Make sure at least a bare bones log file is available before recovery\n-        long lastLogVersionUsed = this.logVersionRepository.getCurrentLogVersion();\n-        channel = logFiles.createLogChannelForVersion( lastLogVersionUsed, OpenMode.READ_WRITE, context::getLastCommittedTransactionId );\n-        channel.close();\n-    }\n+  @Override\n+  public void init() throws IOException\n+  {\n+    logVersionRepository = context.getLogVersionRepository();\n+    // Make sure at least a bare bones log file is available before recovery\n+    long lastLogVersionUsed = this.logVersionRepository.getCurrentLogVersion();\n+    channel = logFiles.createLogChannelForVersion(lastLogVersionUsed, OpenMode.READ_WRITE, context::getLastCommittedTransactionId);\n+    channel.close();\n+  }\n \n-    @Override\n-    public void start() throws IOException\n-    {\n-        // Recovery has taken place before this, so the log file has been truncated to last known good tx\n-        // Just read header and move to the end\n-        long lastLogVersionUsed = logVersionRepository.getCurrentLogVersion();\n-        channel = logFiles.createLogChannelForVersion( lastLogVersionUsed, OpenMode.READ_WRITE, context::getLastCommittedTransactionId );\n-        // Move to the end\n-        channel.position( channel.size() );\n-        writer = new PositionAwarePhysicalFlushableChannel( channel );\n-    }\n+  @Override\n+  public void start() throws IOException\n+  {\n+    // Recovery has taken place before this, so the log file has been truncated to last known good tx\n+    // Just read header and move to the end\n+    long lastLogVersionUsed = logVersionRepository.getCurrentLogVersion();\n+    channel = logFiles.createLogChannelForVersion(lastLogVersionUsed, OpenMode.READ_WRITE, context::getLastCommittedTransactionId);\n+    // Move to the end\n+    channel.position(channel.size());\n+    writer = new PositionAwarePhysicalFlushableChannel(channel);\n+  }\n \n-    // In order to be able to write into a logfile after life.stop during shutdown sequence\n-    // we will close channel and writer only during shutdown phase when all pending changes (like last\n-    // checkpoint) are already in\n-    @Override\n-    public void shutdown() throws IOException\n+  // In order to be able to write into a logfile after life.stop during shutdown sequence\n+  // we will close channel and writer only during shutdown phase when all pending changes (like last\n+  // checkpoint) are already in\n+  @Override\n+  public void shutdown() throws IOException\n+  {\n+    if (writer != null)\n     {\n-        if ( writer != null )\n-        {\n-            writer.close();\n-        }\n-        if ( channel != null )\n-        {\n-            channel.close();\n-        }\n+      writer.close();\n     }\n-\n-    @Override\n-    public boolean rotationNeeded()\n+    if (channel != null)\n     {\n-        /*\n-         * Whereas channel.size() should be fine, we're safer calling position() due to possibility\n-         * of this file being memory mapped or whatever.\n-         */\n-        return channel.position() >= rotateAtSize.get();\n+      channel.close();\n     }\n+  }\n \n-    @Override\n-    public synchronized void rotate() throws IOException\n-    {\n-        channel = rotate( channel );\n-        writer.setChannel( channel );\n-    }\n+  @Override\n+  public boolean rotationNeeded()\n+  {\n+    /*\n+     * Whereas channel.size() should be fine, we're safer calling position() due to possibility\n+     * of this file being memory mapped or whatever.\n+     */\n+    return channel.position() >= rotateAtSize.get();\n+  }\n \n-    /**\n-     * Rotates the current log file, continuing into next (version) log file.\n-     * This method must be recovery safe, which means a crash at any point should be recoverable.\n-     * Concurrent readers must also be able to parry for concurrent rotation.\n-     * Concurrent writes will not be an issue since rotation and writing contends on the same monitor.\n-     *\n-     * Steps during rotation are:\n-     * <ol>\n-     * <li>1: Increment log version, {@link LogVersionRepository#incrementAndGetVersion()} (also flushes the store)</li>\n-     * <li>2: Flush current log</li>\n-     * <li>3: Create new log file</li>\n-     * <li>4: Write header</li>\n-     * </ol>\n-     *\n-     * Recovery: what happens if crash between:\n-     * <ol>\n-     * <li>1-2: New log version has been set, starting the writer will create the new log file idempotently.\n-     * At this point there may have been half-written transactions in the previous log version,\n-     * although they haven't been considered committed and so they will be truncated from log during recovery</li>\n-     * <li>2-3: New log version has been set, starting the writer will create the new log file idempotently.\n-     * At this point there may be complete transactions in the previous log version which may not have been\n-     * acknowledged to be committed back to the user, but will be considered committed anyway.</li>\n-     * <li>3-4: New log version has been set, starting the writer will see that the new file exists and\n-     * will be forgiving when trying to read the header of it, so that if it isn't complete a fresh\n-     * header will be set.</li>\n-     * </ol>\n-     *\n-     * Reading: what happens when rotation is between:\n-     * <ol>\n-     * <li>1-2: Reader bridge will see that there's a new version (when asking {@link LogVersionRepository}\n-     * and try to open it. The log file doesn't exist yet though. The bridge can parry for this by catching\n-     * {@link FileNotFoundException} and tell the reader that the stream has ended</li>\n-     * <li>2-3: Same as (1-2)</li>\n-     * <li>3-4: Here the new log file exists, but the header may not be fully written yet.\n-     * the reader will fail when trying to read the header since it's reading it strictly and bridge\n-     * catches that exception, treating it the same as if the file didn't exist.</li>\n-     * </ol>\n-     *\n-     * @param currentLog current {@link LogVersionedStoreChannel channel} to flush and close.\n-     * @return the channel of the newly opened/created log file.\n-     * @throws IOException if an error regarding closing or opening log files occur.\n+  @Override\n+  public synchronized void rotate() throws IOException\n+  {\n+    channel = rotate(channel);\n+    writer.setChannel(channel);\n+  }\n+\n+  /**\n+   * Rotates the current log file, continuing into next (version) log file.\n+   * This method must be recovery safe, which means a crash at any point should be recoverable.\n+   * Concurrent readers must also be able to parry for concurrent rotation.\n+   * Concurrent writes will not be an issue since rotation and writing contends on the same monitor.\n+   * <p>\n+   * Steps during rotation are:\n+   * <ol>\n+   * <li>1: Increment log version, {@link LogVersionRepository#incrementAndGetVersion()} (also flushes the store)</li>\n+   * <li>2: Flush current log</li>\n+   * <li>3: Create new log file</li>\n+   * <li>4: Write header</li>\n+   * </ol>\n+   * <p>\n+   * Recovery: what happens if crash between:\n+   * <ol>\n+   * <li>1-2: New log version has been set, starting the writer will create the new log file idempotently.\n+   * At this point there may have been half-written transactions in the previous log version,\n+   * although they haven't been considered committed and so they will be truncated from log during recovery</li>\n+   * <li>2-3: New log version has been set, starting the writer will create the new log file idempotently.\n+   * At this point there may be complete transactions in the previous log version which may not have been\n+   * acknowledged to be committed back to the user, but will be considered committed anyway.</li>\n+   * <li>3-4: New log version has been set, starting the writer will see that the new file exists and\n+   * will be forgiving when trying to read the header of it, so that if it isn't complete a fresh\n+   * header will be set.</li>\n+   * </ol>\n+   * <p>\n+   * Reading: what happens when rotation is between:\n+   * <ol>\n+   * <li>1-2: Reader bridge will see that there's a new version (when asking {@link LogVersionRepository}\n+   * and try to open it. The log file doesn't exist yet though. The bridge can parry for this by catching\n+   * {@link FileNotFoundException} and tell the reader that the stream has ended</li>\n+   * <li>2-3: Same as (1-2)</li>\n+   * <li>3-4: Here the new log file exists, but the header may not be fully written yet.\n+   * the reader will fail when trying to read the header since it's reading it strictly and bridge\n+   * catches that exception, treating it the same as if the file didn't exist.</li>\n+   * </ol>\n+   *\n+   * @param currentLog current {@link LogVersionedStoreChannel channel} to flush and close.\n+   * @return the channel of the newly opened/created log file.\n+   * @throws IOException if an error regarding closing or opening log files occur.\n+   */\n+  private PhysicalLogVersionedStoreChannel rotate(LogVersionedStoreChannel currentLog) throws IOException\n+  {\n+    /*\n+     * The store is now flushed. If we fail now the recovery code will open the\n+     * current log file and replay everything. That's unnecessary but totally ok.\n      */\n-    private PhysicalLogVersionedStoreChannel rotate( LogVersionedStoreChannel currentLog ) throws IOException\n-    {\n-        /*\n-         * The store is now flushed. If we fail now the recovery code will open the\n-         * current log file and replay everything. That's unnecessary but totally ok.\n-         */\n-        long newLogVersion = logVersionRepository.incrementAndGetVersion();\n-        /*\n-         * Rotation can happen at any point, although not concurrently with an append,\n-         * although an append may have (most likely actually) left at least some bytes left\n-         * in the buffer for future flushing. Flushing that buffer now makes the last appended\n-         * transaction complete in the log we're rotating away. Awesome.\n-         */\n-        writer.prepareForFlush().flush();\n-        /*\n-         * The log version is now in the store, flushed and persistent. If we crash\n-         * now, on recovery we'll attempt to open the version we're about to create\n-         * (but haven't yet), discover it's not there. That will lead to creating\n-         * the file, setting the header and continuing.\n-         * We using committing transaction id as a source of last transaction id here since\n-         * we can have transactions that are not yet published as committed but were already stored\n-         * into transaction log that was just rotated.\n-         */\n-        PhysicalLogVersionedStoreChannel newLog = logFiles.createLogChannelForVersion( newLogVersion,\n-                OpenMode.READ_WRITE, context::committingTransactionId );\n-        currentLog.close();\n-        return newLog;\n-    }\n+    long newLogVersion = logVersionRepository.incrementAndGetVersion();\n+    /*\n+     * Rotation can happen at any point, although not concurrently with an append,\n+     * although an append may have (most likely actually) left at least some bytes left\n+     * in the buffer for future flushing. Flushing that buffer now makes the last appended\n+     * transaction complete in the log we're rotating away. Awesome.\n+     */\n+    writer.prepareForFlush().flush();\n+    /*\n+     * The log version is now in the store, flushed and persistent. If we crash\n+     * now, on recovery we'll attempt to open the version we're about to create\n+     * (but haven't yet), discover it's not there. That will lead to creating\n+     * the file, setting the header and continuing.\n+     * We using committing transaction id as a source of last transaction id here since\n+     * we can have transactions that are not yet published as committed but were already stored\n+     * into transaction log that was just rotated.\n+     */\n+    PhysicalLogVersionedStoreChannel newLog = logFiles.createLogChannelForVersion(newLogVersion,\n+        OpenMode.READ_WRITE, context::committingTransactionId);\n+    currentLog.close();\n+    return newLog;\n+  }\n \n-    @Override\n-    public FlushablePositionAwareChannel getWriter()\n-    {\n-        return writer;\n-    }\n+  @Override\n+  public FlushablePositionAwareChannel getWriter()\n+  {\n+    return writer;\n+  }\n \n-    @Override\n-    public ReadableLogChannel getReader( LogPosition position ) throws IOException\n-    {\n-        return getReader( position, readerLogVersionBridge );\n-    }\n+  @Override\n+  public ReadableLogChannel getReader(LogPosition position) throws IOException\n+  {\n+    return getReader(position, readerLogVersionBridge);\n+  }\n \n-    @Override\n-    public ReadableLogChannel getReader( LogPosition position, LogVersionBridge logVersionBridge ) throws IOException\n-    {\n-        PhysicalLogVersionedStoreChannel logChannel = logFiles.openForVersion( position.getLogVersion() );\n-        logChannel.position( position.getByteOffset() );\n-        return new ReadAheadLogChannel( logChannel, logVersionBridge );\n-    }\n+  @Override\n+  public ReadableLogChannel getReader(LogPosition position, LogVersionBridge logVersionBridge) throws IOException\n+  {\n+    PhysicalLogVersionedStoreChannel logChannel = logFiles.openForVersion(position.getLogVersion());\n+    logChannel.position(position.getByteOffset());\n+    return new ReadAheadLogChannel(logChannel, logVersionBridge);\n+  }\n \n-    @Override\n-    public void accept( LogFileVisitor visitor, LogPosition startingFromPosition ) throws IOException\n+  @Override\n+  public void accept(LogFileVisitor visitor, LogPosition startingFromPosition) throws IOException\n+  {\n+    try (ReadableLogChannel reader = getReader(startingFromPosition))\n     {\n-        try ( ReadableLogChannel reader = getReader( startingFromPosition ) )\n-        {\n-            visitor.visit( reader );\n-        }\n+      visitor.visit(reader);\n     }\n+  }\n }\n",
            "diff_size": 176
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}