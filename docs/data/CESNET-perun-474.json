{
    "project_name": "CESNET-perun",
    "error_id": "474",
    "information": {
        "errors": [
            {
                "line": "21",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t *\n\t * @param p Publication with properties to filter by (exact match of each, using AND between them)\n\t * \t\t\t'null' or 'new Publication()' when don't want to use it to filter\n\t * @param userId filter results also by author of publications (null if not used)\n\t * @return filtered list of PublicationForGUI\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/474/IPublicationService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/474/IPublicationService.java\nindex de3737987b8..469dfca48dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/474/IPublicationService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/474/IPublicationService.java\n@@ -8,82 +8,82 @@ import cz.metacentrum.perun.core.api.PerunSession;\n \n public interface IPublicationService {\n \n-\tint createPublication(PerunSession sess, Publication p) throws CabinetException;\n-\n-\tboolean publicationExists(Publication p);\n-\n-\tList<Publication> findPublicationsByFilter(Publication p);\n-\n-\t/**\n-\t * Return list of PublicationForGUI with all properties set filtered by params.\n-\t *\n-\t * @param p Publication with properties to filter by (exact match of each, using AND between them)\n-\t * \t\t\t'null' or 'new Publication()' when don't want to use it to filter\n-\t * @param userId filter results also by author of publications (null if not used)\n-\t * @return filtered list of PublicationForGUI\n-\t */\n-\tList<PublicationForGUI> findRichPublicationsByFilter(Publication p, Integer userId);\n-\n-\tPublication findPublicationById(Integer publicationId);\n-\n-\t/**\n-\t * Return PublicationForGUI with all properties set\n-\t * filtered by publicationId (primary key)\n-\t *\n-\t * @param publicationId filter by primary key\n-\t * @return PublicationForGUI found by ID / NULL if not found\n-\t */\n-\tPublicationForGUI findRichPublicationById(Integer publicationId);\n-\n-\tList<Publication> findAllPublications();\n-\n-\t/**\n-\t * Return list of all PublicationForGUI stored in cabinet\n-\t *\n-\t * @return list of all PublicationForGUI\n-\t */\n-\tList<PublicationForGUI> findAllRichPublications();\n-\n-\tList<Publication> findPublicationsByFilter(Publication publication, SortParam sp);\n-\n-\t/**\n-\t * List of PublicationForGUI filtered by GUI filter =>\n-\t * @see for details on filter see javadoc of same method in api layer\n-\t *\n-\t * @param publication filter by publication params ('null' or 'new Publication()' when not used)\n-\t * @param userId filter results by author\n-\t * @param yearSince year range\n-\t * @param yearTill year range\n-\t * @return Filtered list of PublicationForGUI\n-\t */\n-\tList<PublicationForGUI> findRichPublicationsByGUIFilter(Publication publication, Integer userId, int yearSince, int yearTill);\n-\n-\tint getPublicationsCount();\n-\n-\tint updatePublicationById(PerunSession sess, Publication publication) throws CabinetException;\n-\n-\t/**\n-\t * Delete Publication by provided ID.\n-\t * Only author of the record or PerunAdmin can do this.\n-\t *  - Author deletes authorships and thanks from publication.\n-\t *  - PerunAdmin also delete publication record.\n-\t *\n-\t * @param sess session\n-\t * @param id publicationId\n-\t * @return number of updated rows (1=ok / 0 not found)\n-\t * @throws CabinetException when not authorized or constraint\n-\t */\n-\tint deletePublicationById(PerunSession sess, Integer id) throws CabinetException;\n-\n-\t/**\n-\t * Lock / Unlock publications by their ids.\n-\t *\n-\t * @param sess session to verify as perunadmin\n-\t * @param lockState true=lock / false=unlock\n-\t * @param pubs publications to update\n-\t * @return number of updated rows\n-\t * @throws CabinetException when not authorized or something is wrong\n-\t */\n-\tint lockPublications(PerunSession sess, boolean lockState, List<Publication> pubs) throws CabinetException;\n+    int createPublication(PerunSession sess, Publication p) throws CabinetException;\n+\n+    boolean publicationExists(Publication p);\n+\n+    List<Publication> findPublicationsByFilter(Publication p);\n+\n+    /**\n+     * Return list of PublicationForGUI with all properties set filtered by params.\n+     *\n+     * @param p      Publication with properties to filter by (exact match of each, using AND between them)\n+     *               'null' or 'new Publication()' when don't want to use it to filter\n+     * @param userId filter results also by author of publications (null if not used)\n+     * @return filtered list of PublicationForGUI\n+     */\n+    List<PublicationForGUI> findRichPublicationsByFilter(Publication p, Integer userId);\n+\n+    Publication findPublicationById(Integer publicationId);\n+\n+    /**\n+     * Return PublicationForGUI with all properties set\n+     * filtered by publicationId (primary key)\n+     *\n+     * @param publicationId filter by primary key\n+     * @return PublicationForGUI found by ID / NULL if not found\n+     */\n+    PublicationForGUI findRichPublicationById(Integer publicationId);\n+\n+    List<Publication> findAllPublications();\n+\n+    /**\n+     * Return list of all PublicationForGUI stored in cabinet\n+     *\n+     * @return list of all PublicationForGUI\n+     */\n+    List<PublicationForGUI> findAllRichPublications();\n+\n+    List<Publication> findPublicationsByFilter(Publication publication, SortParam sp);\n+\n+    /**\n+     * List of PublicationForGUI filtered by GUI filter =>\n+     *\n+     * @param publication filter by publication params ('null' or 'new Publication()' when not used)\n+     * @param userId      filter results by author\n+     * @param yearSince   year range\n+     * @param yearTill    year range\n+     * @return Filtered list of PublicationForGUI\n+     * @see for details on filter see javadoc of same method in api layer\n+     */\n+    List<PublicationForGUI> findRichPublicationsByGUIFilter(Publication publication, Integer userId, int yearSince, int yearTill);\n+\n+    int getPublicationsCount();\n+\n+    int updatePublicationById(PerunSession sess, Publication publication) throws CabinetException;\n+\n+    /**\n+     * Delete Publication by provided ID.\n+     * Only author of the record or PerunAdmin can do this.\n+     * - Author deletes authorships and thanks from publication.\n+     * - PerunAdmin also delete publication record.\n+     *\n+     * @param sess session\n+     * @param id   publicationId\n+     * @return number of updated rows (1=ok / 0 not found)\n+     * @throws CabinetException when not authorized or constraint\n+     */\n+    int deletePublicationById(PerunSession sess, Integer id) throws CabinetException;\n+\n+    /**\n+     * Lock / Unlock publications by their ids.\n+     *\n+     * @param sess      session to verify as perunadmin\n+     * @param lockState true=lock / false=unlock\n+     * @param pubs      publications to update\n+     * @return number of updated rows\n+     * @throws CabinetException when not authorized or something is wrong\n+     */\n+    int lockPublications(PerunSession sess, boolean lockState, List<Publication> pubs) throws CabinetException;\n \n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/474/IPublicationService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/474/IPublicationService.java\nindex de3737987b8..820fcac19e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/474/IPublicationService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/474/IPublicationService.java\n@@ -1,89 +1,109 @@\n package cz.metacentrum.perun.cabinet.service;\n \n import java.util.List;\n-\n import cz.metacentrum.perun.cabinet.model.Publication;\n import cz.metacentrum.perun.cabinet.model.PublicationForGUI;\n import cz.metacentrum.perun.core.api.PerunSession;\n \n+\n public interface IPublicationService {\n \n-\tint createPublication(PerunSession sess, Publication p) throws CabinetException;\n-\n-\tboolean publicationExists(Publication p);\n-\n-\tList<Publication> findPublicationsByFilter(Publication p);\n-\n-\t/**\n-\t * Return list of PublicationForGUI with all properties set filtered by params.\n-\t *\n-\t * @param p Publication with properties to filter by (exact match of each, using AND between them)\n-\t * \t\t\t'null' or 'new Publication()' when don't want to use it to filter\n-\t * @param userId filter results also by author of publications (null if not used)\n-\t * @return filtered list of PublicationForGUI\n-\t */\n-\tList<PublicationForGUI> findRichPublicationsByFilter(Publication p, Integer userId);\n-\n-\tPublication findPublicationById(Integer publicationId);\n-\n-\t/**\n-\t * Return PublicationForGUI with all properties set\n-\t * filtered by publicationId (primary key)\n-\t *\n-\t * @param publicationId filter by primary key\n-\t * @return PublicationForGUI found by ID / NULL if not found\n-\t */\n-\tPublicationForGUI findRichPublicationById(Integer publicationId);\n-\n-\tList<Publication> findAllPublications();\n-\n-\t/**\n-\t * Return list of all PublicationForGUI stored in cabinet\n-\t *\n-\t * @return list of all PublicationForGUI\n-\t */\n-\tList<PublicationForGUI> findAllRichPublications();\n-\n-\tList<Publication> findPublicationsByFilter(Publication publication, SortParam sp);\n-\n-\t/**\n-\t * List of PublicationForGUI filtered by GUI filter =>\n-\t * @see for details on filter see javadoc of same method in api layer\n-\t *\n-\t * @param publication filter by publication params ('null' or 'new Publication()' when not used)\n-\t * @param userId filter results by author\n-\t * @param yearSince year range\n-\t * @param yearTill year range\n-\t * @return Filtered list of PublicationForGUI\n-\t */\n-\tList<PublicationForGUI> findRichPublicationsByGUIFilter(Publication publication, Integer userId, int yearSince, int yearTill);\n-\n-\tint getPublicationsCount();\n-\n-\tint updatePublicationById(PerunSession sess, Publication publication) throws CabinetException;\n-\n-\t/**\n-\t * Delete Publication by provided ID.\n-\t * Only author of the record or PerunAdmin can do this.\n-\t *  - Author deletes authorships and thanks from publication.\n-\t *  - PerunAdmin also delete publication record.\n-\t *\n-\t * @param sess session\n-\t * @param id publicationId\n-\t * @return number of updated rows (1=ok / 0 not found)\n-\t * @throws CabinetException when not authorized or constraint\n-\t */\n-\tint deletePublicationById(PerunSession sess, Integer id) throws CabinetException;\n-\n-\t/**\n-\t * Lock / Unlock publications by their ids.\n-\t *\n-\t * @param sess session to verify as perunadmin\n-\t * @param lockState true=lock / false=unlock\n-\t * @param pubs publications to update\n-\t * @return number of updated rows\n-\t * @throws CabinetException when not authorized or something is wrong\n-\t */\n-\tint lockPublications(PerunSession sess, boolean lockState, List<Publication> pubs) throws CabinetException;\n-\n-}\n+\n+ int createPublication(PerunSession sess, Publication p) throws CabinetException;\n+\n+\n+ boolean publicationExists(Publication p);\n+\n+\n+ List<Publication> findPublicationsByFilter(Publication p);\n+\n+ /**\n+  * Return list of PublicationForGUI with all properties set filtered by params.\n+  *\n+  * @param p Publication with properties to filter by (exact match of each, using AND between them)\n+  *    'null' or 'new Publication()' when don't want to use it to filter\n+  * @param userId filter results also by author of publications (null if not used)\n+  * @return filtered list of PublicationForGUI\n+  */\n+\n+\n+ List<PublicationForGUI> findRichPublicationsByFilter(Publication p, Integer userId);\n+\n+\n+ Publication findPublicationById(Integer publicationId);\n+\n+ /**\n+  * Return PublicationForGUI with all properties set\n+  * filtered by publicationId (primary key)\n+  *\n+  * @param publicationId filter by primary key\n+  * @return PublicationForGUI found by ID / NULL if not found\n+  */\n+\n+\n+ PublicationForGUI findRichPublicationById(Integer publicationId);\n+\n+\n+ List<Publication> findAllPublications();\n+\n+ /**\n+  * Return list of all PublicationForGUI stored in cabinet\n+  *\n+  * @return list of all PublicationForGUI\n+  */\n+\n+\n+ List<PublicationForGUI> findAllRichPublications();\n+\n+\n+ List<Publication> findPublicationsByFilter(Publication publication, SortParam sp);\n+\n+ /**\n+  * List of PublicationForGUI filtered by GUI filter =>\n+  * @see for details on filter see javadoc of same method in api layer\n+  *\n+  * @param publication filter by publication params ('null' or 'new Publication()' when not used)\n+  * @param userId filter results by author\n+  * @param yearSince year range\n+  * @param yearTill year range\n+  * @return Filtered list of PublicationForGUI\n+  */\n+\n+\n+ List<PublicationForGUI> findRichPublicationsByGUIFilter(Publication publication, Integer userId, int yearSince, int yearTill);\n+\n+\n+ int getPublicationsCount();\n+\n+\n+ int updatePublicationById(PerunSession sess, Publication publication) throws CabinetException;\n+\n+ /**\n+  * Delete Publication by provided ID.\n+  * Only author of the record or PerunAdmin can do this.\n+  *  - Author deletes authorships and thanks from publication.\n+  *  - PerunAdmin also delete publication record.\n+  *\n+  * @param sess session\n+  * @param id publicationId\n+  * @return number of updated rows (1=ok / 0 not found)\n+  * @throws CabinetException when not authorized or constraint\n+  */\n+\n+\n+ int deletePublicationById(PerunSession sess, Integer id) throws CabinetException;\n+\n+ /**\n+  * Lock / Unlock publications by their ids.\n+  *\n+  * @param sess session to verify as perunadmin\n+  * @param lockState true=lock / false=unlock\n+  * @param pubs publications to update\n+  * @return number of updated rows\n+  * @throws CabinetException when not authorized or something is wrong\n+  */\n+\n+\n+ int lockPublications(PerunSession sess, boolean lockState, List<Publication> pubs) throws CabinetException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 101
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}