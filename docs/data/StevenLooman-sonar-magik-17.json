{
    "project_name": "StevenLooman-sonar-magik",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "163",
                "column": "5",
                "severity": "warning",
                "message": "'}' at column 5 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "        startLineOffset = lineNumber;\n      }\n    } while (line != null);\n\n    return resultNode;\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/17/MagikParser.java\nindex f304b126140..4fc2f52843d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/17/MagikParser.java\n@@ -160,7 +160,8 @@ public class MagikParser {\n         sb.setLength(0);\n         startLineOffset = lineNumber;\n       }\n-    } while (line != null);\n+    }\n+    while (line != null);\n \n     return resultNode;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "167",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/17/MagikParser.java\nindex f304b126140..82194f8c36e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/17/MagikParser.java\n@@ -56,6 +56,7 @@ public class MagikParser {\n \n   /**\n    * Constructor.\n+   *\n    * @param charset Encoding of file to parse\n    */\n   public MagikParser(Charset charset) {\n@@ -67,6 +68,7 @@ public class MagikParser {\n \n   /**\n    * Parse a string and return the AstNode.\n+   *\n    * @param source Source to parse\n    * @return Tree\n    */\n@@ -83,6 +85,7 @@ public class MagikParser {\n \n   /**\n    * Parse a file and return the AstNode.\n+   *\n    * @param path Path to file\n    * @return Tree\n    */\n@@ -99,6 +102,7 @@ public class MagikParser {\n \n   /**\n    * Parse sources from reader.\n+   *\n    * @param reader Reader to read from.\n    * @return Parsed node.\n    * @throws IOException Exception raised.\n@@ -203,6 +207,7 @@ public class MagikParser {\n \n   /**\n    * Update token value.\n+   *\n    * @param node Node to update.\n    */\n   private void updateIdentifiersSymbolsCasing(AstNode node) {\n@@ -227,15 +232,16 @@ public class MagikParser {\n       }\n     }\n \n-    for (AstNode childNode: node.getChildren()) {\n+    for (AstNode childNode : node.getChildren()) {\n       updateIdentifiersSymbolsCasing(childNode);\n     }\n   }\n \n   /**\n    * Test if source is parsed by SSLR.\n+   *\n    * @param source Source code that should have been parsed.\n-   * @param node Resulting AstNode.\n+   * @param node   Resulting AstNode.\n    * @return True if source was parsed, false if not.\n    */\n   private boolean isNotParsed(String source, AstNode node) {\n@@ -250,6 +256,7 @@ public class MagikParser {\n \n   /**\n    * Parse a part as a message patch.\n+   *\n    * @param source Part to parse.\n    * @return Resulting AstNode.\n    */\n@@ -260,6 +267,7 @@ public class MagikParser {\n \n   /**\n    * Parse a part as Magik code.\n+   *\n    * @param source Part to parse.\n    * @return Resulting AstNode.\n    */\n@@ -269,6 +277,7 @@ public class MagikParser {\n \n   /**\n    * Test if 'read_message_patch' was parsed, indicating the start of a message patch.\n+   *\n    * @param node AstNode to test.\n    * @return True if the next part is a message patch, false if not.\n    */\n@@ -288,7 +297,8 @@ public class MagikParser {\n \n   /**\n    * Update the token lines to match the lines in the source file, instead of the parsed part.\n-   * @param tokens Tokens to update.\n+   *\n+   * @param tokens     Tokens to update.\n    * @param lineOffset Offset to add to lines.\n    */\n   private void updateTokenLines(List<Token> tokens, int lineOffset) {\n@@ -328,8 +338,9 @@ public class MagikParser {\n \n   /**\n    * Add child nodes to parent node.\n+   *\n    * @param parentNode Parent node to add to.\n-   * @param children Child nodes to add.\n+   * @param children   Child nodes to add.\n    */\n   private void addChildNodesToParent(AstNode parentNode, List<AstNode> children) {\n     for (AstNode child : children) {\n@@ -339,6 +350,7 @@ public class MagikParser {\n \n   /**\n    * Parse an identifier.\n+   *\n    * @param value Identifier to parse.\n    * @return Parsed identifier.\n    */\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "196",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "350",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "356",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 8, indentation should be the same level as line 358.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "359",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/naturalize/17/MagikParser.java\nindex f304b126140..8eea0e80f95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/naturalize/17/MagikParser.java\n@@ -160,7 +160,8 @@ public class MagikParser {\n         sb.setLength(0);\n         startLineOffset = lineNumber;\n       }\n-    } while (line != null);\n+    }\n+while (line != null);\n \n     return resultNode;\n   }\n@@ -192,11 +193,8 @@ public class MagikParser {\n         .setColumn(column)\n         .setType(UtilityTokenType.PARSER_ERROR)\n         .build();\n-\n-    AstNode dummyNode =\n-        new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", dummyToken);\n-    AstNode errorNode =\n-        new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", parserErrorToken);\n+AstNode dummyNode = new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", dummyToken);\n+    AstNode errorNode = new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", parserErrorToken);\n     dummyNode.addChild(errorNode);\n     return dummyNode;\n   }\n@@ -348,13 +346,17 @@ public class MagikParser {\n     // else read lowercase\n     StringBuilder sb = new StringBuilder(value.length());\n \n-    for (int i = 0; i < value.length(); ++i) {\n+    for (int i = 0; i < value.length();\n+++i) {\n       char chr = value.charAt(i);\n       if (chr == '|') {\n         // piped segment\n-        ++i; // skip first |\n+        ++i;\n+\n+// skip first |\n         // read until next |\n-        for (; i < value.length(); ++i) {\n+        for (; i < value.length();\n+++i) {\n           chr = value.charAt(i);\n           if (chr == '|') {\n             break;\n@@ -386,4 +388,4 @@ public class MagikParser {\n     return null;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "170",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "380",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 8, expected is 15, indentation should be the same level as line 381.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "381",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "382",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "383",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "384",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "385",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 8, expected is 15, indentation should be the same level as line 386.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "386",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "387",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/codebuff/17/MagikParser.java\nindex f304b126140..f66cf242f8d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/codebuff/17/MagikParser.java\n@@ -11,7 +11,6 @@ import org.sonar.sslr.parser.LexerlessGrammar;\n import org.sonar.sslr.parser.ParserAdapter;\n import org.stevenlooman.sw.magik.api.MagikGrammar;\n import org.stevenlooman.sw.magik.api.MessagePatchGrammar;\n-\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.io.IOException;\n@@ -27,10 +26,12 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class MagikParser {\n-\n   public enum UtilityTokenType implements TokenType {\n+\n     DUMMY,\n-    PARSER_ERROR;\n+    PARSER_ERROR\n+    ;\n+\n \n     @Override\n     public String getName() {\n@@ -50,7 +51,6 @@ public class MagikParser {\n \n   private static final String TRANSMIT = \"$\";\n   private static final String END_OF_MESSAGE_PATCH = \"$\";\n-\n   public Parser<LexerlessGrammar> magikParser;\n   public ParserAdapter<LexerlessGrammar> messagePatchParser;\n \n@@ -58,11 +58,11 @@ public class MagikParser {\n    * Constructor.\n    * @param charset Encoding of file to parse\n    */\n+\n+\n   public MagikParser(Charset charset) {\n     magikParser = new ParserAdapter<>(charset, MagikGrammar.create());\n-    messagePatchParser = new ParserAdapter<>(\n-        charset,\n-        MessagePatchGrammar.create(END_OF_MESSAGE_PATCH));\n+    messagePatchParser = new ParserAdapter<>(charset, MessagePatchGrammar.create(END_OF_MESSAGE_PATCH));\n   }\n \n   /**\n@@ -70,6 +70,8 @@ public class MagikParser {\n    * @param source Source to parse\n    * @return Tree\n    */\n+\n+\n   public AstNode parse(String source) {\n     AstNode node = null;\n     try (StringReader sr = new StringReader(source)) {\n@@ -78,6 +80,7 @@ public class MagikParser {\n       System.out.println(\"Caught exception during parsing: \" + ex);\n       ex.printStackTrace();\n     }\n+\n     return node;\n   }\n \n@@ -86,6 +89,7 @@ public class MagikParser {\n    * @param path Path to file\n    * @return Tree\n    */\n+\n   public AstNode parse(Path path) {\n     AstNode node = null;\n     try (FileReader sr = new FileReader(path.toFile())) {\n@@ -94,6 +98,7 @@ public class MagikParser {\n       System.out.println(\"Caught exception during parsing: \" + ex);\n       ex.printStackTrace();\n     }\n+\n     return node;\n   }\n \n@@ -103,26 +108,25 @@ public class MagikParser {\n    * @return Parsed node.\n    * @throws IOException Exception raised.\n    */\n+\n   private AstNode parse(Reader reader) throws IOException {\n     AstNode resultNode = new AstNode(MagikGrammar.MAGIK, \"MAGIK\", null);\n-\n     int lineNumber = 0;\n     int startLineOffset = 0;\n     StringBuilder sb = new StringBuilder();\n     boolean readMessagePatch = false;\n-\n     BufferedReader br = new BufferedReader(reader);\n     String line;\n     do {\n       line = br.readLine();\n       lineNumber++;\n-\n       if (line != null) {\n         sb.append(line);\n         sb.append('\\n');\n       }\n \n-      if (TRANSMIT.equals(line) || line == null) {\n+      if (TRANSMIT.equals(line)\n+          || line == null) {\n         // transmit to parser/compiler and reset buffer\n         String part = sb.toString();\n \n@@ -157,11 +161,13 @@ public class MagikParser {\n         }\n \n         // reset buffer\n+\n         sb.setLength(0);\n         startLineOffset = lineNumber;\n       }\n-    } while (line != null);\n+    }\n \n+while(line != null);\n     return resultNode;\n   }\n \n@@ -175,28 +181,23 @@ public class MagikParser {\n     if (!matcher.find()) {\n       throw new IllegalStateException(\"Unrecognized RecognitionException message\");\n     }\n+\n     String columnStr = matcher.group(2);\n     int column = Integer.parseInt(columnStr);\n-\n     URI uri = buildUri();\n     Token.Builder builder = Token.builder();\n-    Token dummyToken = builder.setValueAndOriginalValue(\"dummy\")\n-        .setURI(uri)\n-        .setLine(line)\n-        .setColumn(column)\n-        .setType(UtilityTokenType.DUMMY)\n-        .build();\n-    Token parserErrorToken = builder.setValueAndOriginalValue(\"error\")\n-        .setURI(uri)\n-        .setLine(line)\n-        .setColumn(column)\n-        .setType(UtilityTokenType.PARSER_ERROR)\n-        .build();\n-\n-    AstNode dummyNode =\n-        new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", dummyToken);\n-    AstNode errorNode =\n-        new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", parserErrorToken);\n+    Token dummyToken = builder.setValueAndOriginalValue(\"dummy\").setURI(uri)\n+                                                                .setLine(line)\n+                                                                .setColumn(column)\n+                                                                .setType(UtilityTokenType.DUMMY)\n+                                                                .build();\n+    Token parserErrorToken = builder.setValueAndOriginalValue(\"error\").setURI(uri)\n+                                                                      .setLine(line)\n+                                                                      .setColumn(column)\n+                                                                      .setType(UtilityTokenType.PARSER_ERROR)\n+                                                                      .build();\n+    AstNode dummyNode = new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", dummyToken);\n+    AstNode errorNode = new AstNode(MagikGrammar.PARSER_ERROR, \"PARSER_ERROR\", parserErrorToken);\n     dummyNode.addChild(errorNode);\n     return dummyNode;\n   }\n@@ -205,6 +206,7 @@ public class MagikParser {\n    * Update token value.\n    * @param node Node to update.\n    */\n+\n   private void updateIdentifiersSymbolsCasing(AstNode node) {\n     Field field = null;\n     try {\n@@ -216,7 +218,8 @@ public class MagikParser {\n     }\n \n     AstNodeType nodeType = node.getType();\n-    if (nodeType == MagikGrammar.IDENTIFIER || nodeType == MagikGrammar.SYMBOL) {\n+    if (nodeType == MagikGrammar.IDENTIFIER\n+        || nodeType == MagikGrammar.SYMBOL) {\n       Token token = node.getToken();\n       String value = parseIdentifier(token.getValue());\n       try {\n@@ -227,7 +230,8 @@ public class MagikParser {\n       }\n     }\n \n-    for (AstNode childNode: node.getChildren()) {\n+\n+    for (AstNode childNode : node.getChildren()) {\n       updateIdentifiersSymbolsCasing(childNode);\n     }\n   }\n@@ -238,6 +242,7 @@ public class MagikParser {\n    * @param node Resulting AstNode.\n    * @return True if source was parsed, false if not.\n    */\n+\n   private boolean isNotParsed(String source, AstNode node) {\n     source = source.replaceAll(\"#.*\", \"\"); // remove any comment lines\n     return node.getChildren().isEmpty() && !source.trim().isEmpty();\n@@ -253,6 +258,7 @@ public class MagikParser {\n    * @param source Part to parse.\n    * @return Resulting AstNode.\n    */\n+\n   private AstNode parsePartMessagePatch(String source) {\n     source = source.substring(0, source.length() - 1); // remove trailing \\n\n     return messagePatchParser.parse(source);\n@@ -263,6 +269,7 @@ public class MagikParser {\n    * @param source Part to parse.\n    * @return Resulting AstNode.\n    */\n+\n   public AstNode parsePartMagik(String source) {\n     return magikParser.parse(source);\n   }\n@@ -272,11 +279,13 @@ public class MagikParser {\n    * @param node AstNode to test.\n    * @return True if the next part is a message patch, false if not.\n    */\n+\n   private boolean hasReadMessagePatch(AstNode node) {\n     if (\"read_message_patch\".equalsIgnoreCase(node.getTokenValue())) {\n       return true;\n     }\n \n+\n     for (AstNode child : node.getChildren()) {\n       if (hasReadMessagePatch(child)) {\n         return true;\n@@ -291,6 +300,7 @@ public class MagikParser {\n    * @param tokens Tokens to update.\n    * @param lineOffset Offset to add to lines.\n    */\n+\n   private void updateTokenLines(List<Token> tokens, int lineOffset) {\n     Field field = null;\n     try {\n@@ -301,6 +311,7 @@ public class MagikParser {\n       ex.printStackTrace();\n     }\n \n+\n     for (Token token : tokens) {\n       // update token lines\n       int newLine = lineOffset + token.getLine();\n@@ -312,6 +323,8 @@ public class MagikParser {\n       }\n \n       // update trivia-token lines\n+\n+\n       for (Trivia trivia : token.getTrivia()) {\n         for (Token triviaToken : trivia.getTokens()) {\n           newLine = lineOffset + triviaToken.getLine();\n@@ -331,6 +344,7 @@ public class MagikParser {\n    * @param parentNode Parent node to add to.\n    * @param children Child nodes to add.\n    */\n+\n   private void addChildNodesToParent(AstNode parentNode, List<AstNode> children) {\n     for (AstNode child : children) {\n       parentNode.addChild(child);\n@@ -342,12 +356,12 @@ public class MagikParser {\n    * @param value Identifier to parse.\n    * @return Parsed identifier.\n    */\n+\n   static String parseIdentifier(String value) {\n     // if |, read until next |\n     // if \\\\., read .\n     // else read lowercase\n     StringBuilder sb = new StringBuilder(value.length());\n-\n     for (int i = 0; i < value.length(); ++i) {\n       char chr = value.charAt(i);\n       if (chr == '|') {\n@@ -359,17 +373,18 @@ public class MagikParser {\n           if (chr == '|') {\n             break;\n           }\n+\n           sb.append(chr);\n         }\n       } else if (chr == '\\\\') {\n         // escaped character\n-        ++i; // skip \\\n-        chr = value.charAt(i);\n-        sb.append(chr);\n-      } else {\n+               ++i; // skip \\\n+               chr = value.charAt(i);\n+               sb.append(chr);\n+             } else {\n         // normal character\n-        chr = Character.toLowerCase(chr);\n-        sb.append(chr);\n+               chr = Character.toLowerCase(chr);\n+               sb.append(chr);\n       }\n     }\n \n@@ -383,7 +398,7 @@ public class MagikParser {\n     } catch (URISyntaxException exception) {\n       // pass\n     }\n+\n     return null;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/17/MagikParser.java\nindex f304b126140..4fc2f52843d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/17/MagikParser.java\n@@ -160,7 +160,8 @@ public class MagikParser {\n         sb.setLength(0);\n         startLineOffset = lineNumber;\n       }\n-    } while (line != null);\n+    }\n+    while (line != null);\n \n     return resultNode;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'do..while rcurly' has incorrect indentation level 6, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "column": "7",
                    "severity": "warning",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/17/MagikParser.java\nindex f304b126140..a7512779e8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/17/MagikParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/17/MagikParser.java\n@@ -160,7 +160,8 @@ public class MagikParser {\n         sb.setLength(0);\n         startLineOffset = lineNumber;\n       }\n-    } while (line != null);\n+\n+      }while (line != null);\n \n     return resultNode;\n   }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}