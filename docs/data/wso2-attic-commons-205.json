{
    "project_name": "wso2-attic-commons",
    "error_id": "205",
    "information": {
        "errors": [
            {
                "line": "128",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      pw.print(\"xmlns:\" + nsNameExt + \"=\\\"\" + WSIConstants.NS_URI_WSI_REPORT + \"/ext/\\\"\");\n      pw.print(nsNameExt + \":\" + WSIConstants.ATTR_LINE_NUMBER + \"=\\\"\" + this.elementLocation.getLineNumber() + \"\\\" \");\n      pw.print(nsNameExt + \":\" + WSIConstants.ATTR_COLUMN_NUMBER + \"=\\\"\" + this.elementLocation.getColumnNumber() + \"\\\" \");\n    }\n    */\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/205/FailureDetailImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/205/FailureDetailImpl.java\nindex dc7dc51434e..5ee3b04e470 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/205/FailureDetailImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/205/FailureDetailImpl.java\n@@ -8,6 +8,7 @@\n  * Contributors:\n  *   IBM - Initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsi.internal.core.report.impl;\n \n import java.io.PrintWriter;\n@@ -21,12 +22,11 @@ import com.ibm.wsdl.util.xml.DOMUtils;\n \n /**\n  * This class will ...\n- * \n+ *\n  * @author Peter  Brittenham (peterbr@us.ibm.com)\n  * @version 1.0.1\n  */\n-public class FailureDetailImpl implements FailureDetail\n-{\n+public class FailureDetailImpl implements FailureDetail {\n   protected String failureMessage = null;\n   protected String referenceType = null;\n   protected String referenceID = null;\n@@ -35,89 +35,83 @@ public class FailureDetailImpl implements FailureDetail\n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#getFailureMessage()\n    */\n-  public String getFailureMessage()\n-  {\n+  public String getFailureMessage() {\n     return this.failureMessage;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#setFailureMessage(String)\n    */\n-  public void setFailureMessage(String failureMessage)\n-  {\n+  public void setFailureMessage(String failureMessage) {\n     this.failureMessage = failureMessage;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#getReferenceType()\n    */\n-  public String getReferenceType()\n-  {\n+  public String getReferenceType() {\n     return this.referenceType;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#setReferenceType(String)\n    */\n-  public void setReferenceType(String referenceType)\n-  {\n+  public void setReferenceType(String referenceType) {\n     this.referenceType = referenceType;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#getReferenceID()\n    */\n-  public String getReferenceID()\n-  {\n+  public String getReferenceID() {\n     return this.referenceID;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#setReferenceIDn(String)\n    */\n-  public void setReferenceIDn(String referenceID)\n-  {\n+  public void setReferenceIDn(String referenceID) {\n     this.referenceID = referenceID;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#getElementLocation()\n    */\n-  public ElementLocation getElementLocation()\n-  {\n+  public ElementLocation getElementLocation() {\n     return this.elementLocation;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.report.FailureDetail#setElementLocation(ElementLocation)\n    */\n-  public void setElementLocation(ElementLocation elementLocation)\n-  {\n+  public void setElementLocation(ElementLocation elementLocation) {\n     this.elementLocation = elementLocation;\n   }\n \n   /* (non-Javadoc)\n    * @see org.wsi.test.document.DocumentElement#toXMLString(String)\n    */\n-  public String toXMLString(String namespaceName)\n-  {\n+  public String toXMLString(String namespaceName) {\n     StringWriter sw = new StringWriter();\n     PrintWriter pw = new PrintWriter(sw);\n \n     String nsName = namespaceName;\n-    if ((!nsName.equals(\"\") && (!nsName.endsWith(\":\"))))\n+    if ((!nsName.equals(\"\") && (!nsName.endsWith(\":\")))) {\n       nsName += \":\";\n+    }\n \n     // Create element \n     pw.print(\"      <\" + nsName + ELEM_NAME + \" xml:lang=\\\"en\\\" \");\n \n-    if (this.referenceType != null)\n+    if (this.referenceType != null) {\n       pw.print(\n         WSIConstants.ATTR_REFERENCE_TYPE + \"=\\\"\" + this.referenceType + \"\\\" \");\n+    }\n \n-    if (this.referenceID != null)\n+    if (this.referenceID != null) {\n       pw.print(\n         WSIConstants.ATTR_REFERENCE_ID + \"=\\\"\" + this.referenceID + \"\\\" \");\n+    }\n \n     // ADD: Need to use a different namespace\n     /*\n@@ -132,11 +126,11 @@ public class FailureDetailImpl implements FailureDetail\n     // Close start element\n     pw.print(\">\");\n \n-    if (this.failureMessage != null)\n+    if (this.failureMessage != null) {\n       pw.println(DOMUtils.cleanString(this.failureMessage));\n+    }\n \n-    if (this.elementLocation != null)\n-    {\n+    if (this.elementLocation != null) {\n       pw.println(\" \");\n       pw.print(this.elementLocation.toString());\n     }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/205/FailureDetailImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/205/FailureDetailImpl.java\nindex dc7dc51434e..f4b7d1d184e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/205/FailureDetailImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/205/FailureDetailImpl.java\n@@ -148,4 +148,4 @@ public class FailureDetailImpl implements FailureDetail\n     return sw.toString();\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}