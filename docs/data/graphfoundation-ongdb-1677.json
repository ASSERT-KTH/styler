{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1677",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1677/SortingTraverserIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1677/SortingTraverserIterator.java\nindex d9f60e14f38..54bd9a8b39c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1677/SortingTraverserIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1677/SortingTraverserIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import java.util.ArrayList;\n@@ -33,84 +34,84 @@ import org.neo4j.helpers.collection.PrefetchingResourceIterator;\n \n class SortingTraverserIterator extends PrefetchingResourceIterator<Path> implements TraverserIterator\n {\n-    private final Comparator<? super Path> sortingStrategy;\n-    private final MonoDirectionalTraverserIterator source;\n-    private final Resource resource;\n-    private Iterator<Path> sortedResultIterator;\n+  private final Comparator<? super Path> sortingStrategy;\n+  private final MonoDirectionalTraverserIterator source;\n+  private final Resource resource;\n+  private Iterator<Path> sortedResultIterator;\n \n-    SortingTraverserIterator( Resource resource, Comparator<? super Path> sortingStrategy, MonoDirectionalTraverserIterator source )\n-    {\n-        this.resource = resource;\n-        this.sortingStrategy = sortingStrategy;\n-        this.source = source;\n-    }\n+  SortingTraverserIterator(Resource resource, Comparator<? super Path> sortingStrategy, MonoDirectionalTraverserIterator source)\n+  {\n+    this.resource = resource;\n+    this.sortingStrategy = sortingStrategy;\n+    this.source = source;\n+  }\n \n-    @Override\n-    public int getNumberOfPathsReturned()\n-    {\n-        return source.getNumberOfPathsReturned();\n-    }\n+  @Override\n+  public int getNumberOfPathsReturned()\n+  {\n+    return source.getNumberOfPathsReturned();\n+  }\n \n-    @Override\n-    public int getNumberOfRelationshipsTraversed()\n-    {\n-        return source.getNumberOfRelationshipsTraversed();\n-    }\n+  @Override\n+  public int getNumberOfRelationshipsTraversed()\n+  {\n+    return source.getNumberOfRelationshipsTraversed();\n+  }\n \n-    @Override\n-    public void relationshipTraversed()\n-    {\n-        source.relationshipTraversed();\n-    }\n+  @Override\n+  public void relationshipTraversed()\n+  {\n+    source.relationshipTraversed();\n+  }\n \n-    @Override\n-    public void unnecessaryRelationshipTraversed()\n-    {\n-        source.unnecessaryRelationshipTraversed();\n-    }\n+  @Override\n+  public void unnecessaryRelationshipTraversed()\n+  {\n+    source.unnecessaryRelationshipTraversed();\n+  }\n \n-    @Override\n-    public boolean isUniqueFirst( TraversalBranch branch )\n-    {\n-        return source.isUniqueFirst( branch );\n-    }\n+  @Override\n+  public boolean isUniqueFirst(TraversalBranch branch)\n+  {\n+    return source.isUniqueFirst(branch);\n+  }\n \n-    @Override\n-    public boolean isUnique( TraversalBranch branch )\n-    {\n-        return source.isUnique( branch );\n-    }\n+  @Override\n+  public boolean isUnique(TraversalBranch branch)\n+  {\n+    return source.isUnique(branch);\n+  }\n \n-    @Override\n-    public Evaluation evaluate( TraversalBranch branch, BranchState state )\n-    {\n-        return source.evaluate( branch, state );\n-    }\n+  @Override\n+  public Evaluation evaluate(TraversalBranch branch, BranchState state)\n+  {\n+    return source.evaluate(branch, state);\n+  }\n \n-    @Override\n-    protected Path fetchNextOrNull()\n+  @Override\n+  protected Path fetchNextOrNull()\n+  {\n+    if (sortedResultIterator == null)\n     {\n-        if ( sortedResultIterator == null )\n-        {\n-            sortedResultIterator = fetchAndSortResult();\n-        }\n-        return sortedResultIterator.hasNext() ? sortedResultIterator.next() : null;\n+      sortedResultIterator = fetchAndSortResult();\n     }\n+    return sortedResultIterator.hasNext() ? sortedResultIterator.next() : null;\n+  }\n \n-    private Iterator<Path> fetchAndSortResult()\n+  private Iterator<Path> fetchAndSortResult()\n+  {\n+    List<Path> result = new ArrayList<>();\n+    while (source.hasNext())\n     {\n-        List<Path> result = new ArrayList<>();\n-        while ( source.hasNext() )\n-        {\n-            result.add( source.next() );\n-        }\n-        result.sort( sortingStrategy );\n-        return result.iterator();\n+      result.add(source.next());\n     }\n+    result.sort(sortingStrategy);\n+    return result.iterator();\n+  }\n \n-    @Override\n-    public void close()\n-    {\n-        resource.close();\n-    }\n+  @Override\n+  public void close()\n+  {\n+    resource.close();\n+  }\n }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1677/SortingTraverserIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1677/SortingTraverserIterator.java\nindex d9f60e14f38..5a018c4490d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1677/SortingTraverserIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1677/SortingTraverserIterator.java\n@@ -94,7 +94,8 @@ class SortingTraverserIterator extends PrefetchingResourceIterator<Path> impleme\n         {\n             sortedResultIterator = fetchAndSortResult();\n         }\n-        return sortedResultIterator.hasNext() ? sortedResultIterator.next() : null;\n+\n+return sortedResultIterator.hasNext() ? sortedResultIterator.next() : null;\n     }\n \n     private Iterator<Path> fetchAndSortResult()\n@@ -113,4 +114,4 @@ class SortingTraverserIterator extends PrefetchingResourceIterator<Path> impleme\n     {\n         resource.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}