{
    "project_name": "wso2-attic-commons",
    "error_id": "519",
    "information": {
        "errors": [
            {
                "line": "44",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n        if (currentEvent != null) {\n            if (currentEvent instanceof ListEvent) {\n                int lastEventIndex = ((ListEvent) currentEvent).getActiveEvents() - 1;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/519/LastPerTimeOutputRateManager.java\nindex 46028c23f34..0a4857bfd48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/519/LastPerTimeOutputRateManager.java\n@@ -41,8 +41,9 @@ public class LastPerTimeOutputRateManager extends OutputRateManager {\n     }\n \n     @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-        if (currentEvent != null) {\n+    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent,\n+        String groupByKey) {\n+         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 int lastEventIndex = ((ListEvent) currentEvent).getActiveEvents() - 1;\n                 InEvent lastEvent = ((InEvent) ((ListEvent) currentEvent).getEvent(lastEventIndex));\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/519/LastPerTimeOutputRateManager.java\nindex 46028c23f34..cf33657c47e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/519/LastPerTimeOutputRateManager.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.output.ratelimit.time;\n \n import org.apache.log4j.Logger;\n@@ -27,86 +28,86 @@ import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n public class LastPerTimeOutputRateManager extends OutputRateManager {\n-    private final Long value;\n-    static final Logger log = Logger.getLogger(LastPerTimeOutputRateManager.class);\n-\n-    private volatile long timeStamp;\n-    private volatile InEvent lastCurrentEvent = null;\n-    private volatile InEvent lastExpiredEvent = null;\n-    private volatile InEvent lastAllEvent = null;\n+  private final Long value;\n+  static final Logger log = Logger.getLogger(LastPerTimeOutputRateManager.class);\n \n-    public LastPerTimeOutputRateManager(Long value, ScheduledExecutorService scheduledExecutorService) {\n-        this.value = value;\n-        scheduledExecutorService.scheduleAtFixedRate(new EventSender(), 0, value.longValue(), TimeUnit.MILLISECONDS);\n-    }\n+  private volatile long timeStamp;\n+  private volatile InEvent lastCurrentEvent = null;\n+  private volatile InEvent lastExpiredEvent = null;\n+  private volatile InEvent lastAllEvent = null;\n \n-    @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-        if (currentEvent != null) {\n-            if (currentEvent instanceof ListEvent) {\n-                int lastEventIndex = ((ListEvent) currentEvent).getActiveEvents() - 1;\n-                InEvent lastEvent = ((InEvent) ((ListEvent) currentEvent).getEvent(lastEventIndex));\n-                lastCurrentEvent = lastEvent;\n-                lastExpiredEvent = null;\n-                lastAllEvent = lastEvent;\n-                this.timeStamp = timeStamp;\n-            } else {\n-                lastCurrentEvent = ((InEvent) currentEvent);\n-                lastExpiredEvent = null;\n-                lastAllEvent = ((InEvent) currentEvent);\n-                this.timeStamp = timeStamp;\n-            }\n-        }\n-        if (expiredEvent != null) {\n-            if (expiredEvent instanceof ListEvent) {\n-                int lastEventIndex = ((ListEvent) expiredEvent).getActiveEvents() - 1;\n-                InEvent lastEvent = ((InEvent) ((ListEvent) expiredEvent).getEvent(lastEventIndex));\n-                lastCurrentEvent = null;\n-                lastExpiredEvent = lastEvent;\n-                lastAllEvent = lastEvent;\n-                this.timeStamp = timeStamp;\n-            } else {\n-                lastCurrentEvent = null;\n-                lastExpiredEvent = ((InEvent) expiredEvent);\n-                lastAllEvent = ((InEvent) expiredEvent);\n-                this.timeStamp = timeStamp;\n-            }\n-        }\n+  public LastPerTimeOutputRateManager(Long value, ScheduledExecutorService scheduledExecutorService) {\n+    this.value = value;\n+    scheduledExecutorService.scheduleAtFixedRate(new EventSender(), 0, value.longValue(), TimeUnit.MILLISECONDS);\n+  }\n \n+  @Override\n+  public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n+    if (currentEvent != null) {\n+      if (currentEvent instanceof ListEvent) {\n+        int lastEventIndex = ((ListEvent) currentEvent).getActiveEvents() - 1;\n+        InEvent lastEvent = ((InEvent) ((ListEvent) currentEvent).getEvent(lastEventIndex));\n+        lastCurrentEvent = lastEvent;\n+        lastExpiredEvent = null;\n+        lastAllEvent = lastEvent;\n+        this.timeStamp = timeStamp;\n+      } else {\n+        lastCurrentEvent = ((InEvent) currentEvent);\n+        lastExpiredEvent = null;\n+        lastAllEvent = ((InEvent) currentEvent);\n+        this.timeStamp = timeStamp;\n+      }\n     }\n+    if (expiredEvent != null) {\n+      if (expiredEvent instanceof ListEvent) {\n+        int lastEventIndex = ((ListEvent) expiredEvent).getActiveEvents() - 1;\n+        InEvent lastEvent = ((InEvent) ((ListEvent) expiredEvent).getEvent(lastEventIndex));\n+        lastCurrentEvent = null;\n+        lastExpiredEvent = lastEvent;\n+        lastAllEvent = lastEvent;\n+        this.timeStamp = timeStamp;\n+      } else {\n+        lastCurrentEvent = null;\n+        lastExpiredEvent = ((InEvent) expiredEvent);\n+        lastAllEvent = ((InEvent) expiredEvent);\n+        this.timeStamp = timeStamp;\n+      }\n+    }\n+\n+  }\n \n-    private synchronized void sendEvents() {\n-        if (lastAllEvent != null) {\n-            StreamEvent currentEvent = null;\n-            StreamEvent expiredEvent = null;\n-            StreamEvent allEvent = null;\n+  private synchronized void sendEvents() {\n+    if (lastAllEvent != null) {\n+      StreamEvent currentEvent = null;\n+      StreamEvent expiredEvent = null;\n+      StreamEvent allEvent = null;\n \n-            if (lastCurrentEvent != null) {\n-                currentEvent = new InEvent(lastCurrentEvent);\n-            }\n-            if (lastExpiredEvent != null) {\n-                expiredEvent = new InEvent(lastExpiredEvent);\n-            }\n-            if (lastAllEvent != null) {\n-                allEvent = new InEvent(lastAllEvent);\n-            }\n-            sendToCallBacks(timeStamp, currentEvent, expiredEvent, allEvent);\n-            timeStamp = 0;\n-            lastCurrentEvent = null;\n-            lastExpiredEvent = null;\n-            lastAllEvent = null;\n-        }\n+      if (lastCurrentEvent != null) {\n+        currentEvent = new InEvent(lastCurrentEvent);\n+      }\n+      if (lastExpiredEvent != null) {\n+        expiredEvent = new InEvent(lastExpiredEvent);\n+      }\n+      if (lastAllEvent != null) {\n+        allEvent = new InEvent(lastAllEvent);\n+      }\n+      sendToCallBacks(timeStamp, currentEvent, expiredEvent, allEvent);\n+      timeStamp = 0;\n+      lastCurrentEvent = null;\n+      lastExpiredEvent = null;\n+      lastAllEvent = null;\n     }\n+  }\n \n \n-    private class EventSender implements Runnable {\n-        @Override\n-        public void run() {\n-            try {\n-                sendEvents();\n-            } catch (Throwable t) {\n-                log.error(t.getMessage(), t);\n-            }\n-        }\n+  private class EventSender implements Runnable {\n+    @Override\n+    public void run() {\n+      try {\n+        sendEvents();\n+      } catch (Throwable t) {\n+        log.error(t.getMessage(), t);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/519/LastPerTimeOutputRateManager.java\nindex 46028c23f34..d56332b4b78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/519/LastPerTimeOutputRateManager.java\n@@ -109,4 +109,4 @@ public class LastPerTimeOutputRateManager extends OutputRateManager {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/519/LastPerTimeOutputRateManager.java\nindex 46028c23f34..0a4857bfd48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/519/LastPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/519/LastPerTimeOutputRateManager.java\n@@ -41,8 +41,9 @@ public class LastPerTimeOutputRateManager extends OutputRateManager {\n     }\n \n     @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-        if (currentEvent != null) {\n+    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent,\n+        String groupByKey) {\n+         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 int lastEventIndex = ((ListEvent) currentEvent).getActiveEvents() - 1;\n                 InEvent lastEvent = ((InEvent) ((ListEvent) currentEvent).getEvent(lastEventIndex));\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}