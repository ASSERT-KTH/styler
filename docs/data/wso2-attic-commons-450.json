{
    "project_name": "wso2-attic-commons",
    "error_id": "450",
    "information": {
        "errors": [
            {
                "line": "88",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .append(\"@\").append(CARBON_CLIENT_ID)\n                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                .toString();\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/450/TopicSubscriberB.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/450/TopicSubscriberB.java\nindex d7c59a93eee..87a53b968bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/450/TopicSubscriberB.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/450/TopicSubscriberB.java\n@@ -1,21 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n- \n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n import javax.jms.JMSException;\n import javax.jms.Message;\n import javax.jms.QueueSession;\n@@ -28,64 +28,65 @@ import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import java.util.Properties;\n- \n+\n public class TopicSubscriberAB {\n-    public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n-    private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n-    private static final String CF_NAME = \"qpidConnectionfactory\";\n-    String userName = \"admin\";\n-    String password = \"admin\";\n-    private static String CARBON_CLIENT_ID = \"carbon\";\n-    private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n-    private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";\n-    private static String CARBON_DEFAULT_PORT = \"5672\";\n-    String topicName = \"myTopic.asanka\";\n- \n-    public static void main(String[] args) throws NamingException, JMSException {\n-        TopicSubscriberAB topicSubscriber = new TopicSubscriberAB();\n-        topicSubscriber.subscribe();\n-    }\n-    public void subscribe() throws NamingException, JMSException {\n-        Properties properties = new Properties();\n-        properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n-        properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n-        System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n-        InitialContext ctx = new InitialContext(properties);\n-        // Lookup connection factory\n-        TopicConnectionFactory connFactory = (TopicConnectionFactory) ctx.lookup(CF_NAME);\n-        TopicConnection topicConnection = connFactory.createTopicConnection();\n-        topicConnection.start();\n-        TopicSession topicSession =\n-                topicConnection.createTopicSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n-        // Send message\n-        Topic topic = topicSession.createTopic(topicName);\n-        javax.jms.TopicSubscriber topicSubscriber = topicSession.createSubscriber(topic);\n-\tint count=0;\n-\twhile(true){\n-        Message message = topicSubscriber.receive();\n-\t\n-        if (message instanceof TextMessage) {\n-            TextMessage textMessage = (TextMessage) message;\n-\t\tSystem.out.println(textMessage.getJMSRedelivered());\n-            System.out.println(count+ \"Topic Message BBBBBBB \" + textMessage.getText());\n-\t\n-        }\n-\tcount++;\n-\t\n-\t\n-\t}\n+  public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n+  private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n+  private static final String CF_NAME = \"qpidConnectionfactory\";\n+  String userName = \"admin\";\n+  String password = \"admin\";\n+  private static String CARBON_CLIENT_ID = \"carbon\";\n+  private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n+  private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";\n+  private static String CARBON_DEFAULT_PORT = \"5672\";\n+  String topicName = \"myTopic.asanka\";\n+\n+  public static void main(String[] args) throws NamingException, JMSException {\n+    TopicSubscriberAB topicSubscriber = new TopicSubscriberAB();\n+    topicSubscriber.subscribe();\n+  }\n+\n+  public void subscribe() throws NamingException, JMSException {\n+    Properties properties = new Properties();\n+    properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n+    properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n+    System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n+    InitialContext ctx = new InitialContext(properties);\n+    // Lookup connection factory\n+    TopicConnectionFactory connFactory = (TopicConnectionFactory) ctx.lookup(CF_NAME);\n+    TopicConnection topicConnection = connFactory.createTopicConnection();\n+    topicConnection.start();\n+    TopicSession topicSession =\n+      topicConnection.createTopicSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n+    // Send message\n+    Topic topic = topicSession.createTopic(topicName);\n+    javax.jms.TopicSubscriber topicSubscriber = topicSession.createSubscriber(topic);\n+    int count = 0;\n+    while (true) {\n+      Message message = topicSubscriber.receive();\n+\n+      if (message instanceof TextMessage) {\n+        TextMessage textMessage = (TextMessage) message;\n+        System.out.println(textMessage.getJMSRedelivered());\n+        System.out.println(count + \"Topic Message BBBBBBB \" + textMessage.getText());\n+\n+      }\n+      count++;\n \n-        //topicSession.close();\n-        //topicConnection.close();\n-    }\n \n-    public String getTCPConnectionURL(String username, String password) {\n-        // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n-        return new StringBuffer()\n-                .append(\"amqp://\").append(username).append(\":\").append(password)\n-                .append(\"@\").append(CARBON_CLIENT_ID)\n-                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n-                .toString();\n     }\n+\n+    //topicSession.close();\n+    //topicConnection.close();\n+  }\n+\n+  public String getTCPConnectionURL(String username, String password) {\n+    // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n+    return new StringBuffer()\n+      .append(\"amqp://\").append(username).append(\":\").append(password)\n+      .append(\"@\").append(CARBON_CLIENT_ID)\n+      .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n+      .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+      .toString();\n+  }\n }\n",
            "diff_size": 87
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/450/TopicSubscriberB.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/450/TopicSubscriberB.java\nindex d7c59a93eee..9b0e9fdaf77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/450/TopicSubscriberB.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/450/TopicSubscriberB.java\n@@ -15,7 +15,7 @@\n * specific language governing permissions and limitations\n * under the License.\n */\n- \n+\n import javax.jms.JMSException;\n import javax.jms.Message;\n import javax.jms.QueueSession;\n@@ -28,8 +28,9 @@ import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import java.util.Properties;\n- \n+\n public class TopicSubscriberAB {\n+\n     public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n     private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n     private static final String CF_NAME = \"qpidConnectionfactory\";\n@@ -40,8 +41,7 @@ public class TopicSubscriberAB {\n     private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";\n     private static String CARBON_DEFAULT_PORT = \"5672\";\n     String topicName = \"myTopic.asanka\";\n- \n-    public static void main(String[] args) throws NamingException, JMSException {\n+public static void main(String[] args) throws NamingException, JMSException {\n         TopicSubscriberAB topicSubscriber = new TopicSubscriberAB();\n         topicSubscriber.subscribe();\n     }\n@@ -60,22 +60,18 @@ public class TopicSubscriberAB {\n         // Send message\n         Topic topic = topicSession.createTopic(topicName);\n         javax.jms.TopicSubscriber topicSubscriber = topicSession.createSubscriber(topic);\n-\tint count=0;\n-\twhile(true){\n-        Message message = topicSubscriber.receive();\n-\t\n-        if (message instanceof TextMessage) {\n+int count=0;\n+\twhile (true){\n+    Message message = topicSubscriber.receive();\n+if (message instanceof TextMessage) {\n             TextMessage textMessage = (TextMessage) message;\n-\t\tSystem.out.println(textMessage.getJMSRedelivered());\n-            System.out.println(count+ \"Topic Message BBBBBBB \" + textMessage.getText());\n-\t\n-        }\n-\tcount++;\n-\t\n-\t\n-\t}\n+System.out.println(textMessage.getJMSRedelivered());\n+System.out.println(count+ \"Topic Message BBBBBBB \" + textMessage.getText());\n+    }\n+count++;\n+    }\n \n-        //topicSession.close();\n+//topicSession.close();\n         //topicConnection.close();\n     }\n \n@@ -88,4 +84,4 @@ public class TopicSubscriberAB {\n                 .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                 .toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}