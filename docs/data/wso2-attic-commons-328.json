{
    "project_name": "wso2-attic-commons",
    "error_id": "328",
    "information": {
        "errors": [
            {
                "line": "86",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    // Axis2 >1.3 is less clever than 1.3. See ODE-509\n                    // We have to do additional work for him.\n                    Policy policy = PolicyUtil.getMergedPolicy(new ArrayList(service.getPolicySubject().getAttachedPolicyComponents()), service);\n                    if (policy != null) {\n                        if (log.isDebugEnabled()) log.debug(\"Apply policy: \" + policy.getName());\n                        messageContext.setProperty(RampartMessageData.KEY_RAMPART_POLICY, policy);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/328/ODEAxisServiceDispatcher.java\nindex 0d59b6444e1..981f45e051f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/328/ODEAxisServiceDispatcher.java\n@@ -83,8 +83,9 @@ public class ODEAxisServiceDispatcher extends AbstractDispatcher {\n \n                     // Axis2 >1.3 is less clever than 1.3. See ODE-509\n                     // We have to do additional work for him.\n-                    Policy policy = PolicyUtil.getMergedPolicy(new ArrayList(service.getPolicySubject().getAttachedPolicyComponents()), service);\n-                    if (policy != null) {\n+                    Policy policy = PolicyUtil . getMergedPolicy(new\n+                    ArrayList (service.getPolicySubject().getAttachedPolicyComponents()), service);\n+                     if (policy != null) {\n                         if (log.isDebugEnabled()) log.debug(\"Apply policy: \" + policy.getName());\n                         messageContext.setProperty(RampartMessageData.KEY_RAMPART_POLICY, policy);\n                     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/328/ODEAxisServiceDispatcher.java\nindex 0d59b6444e1..7df7c28215b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/328/ODEAxisServiceDispatcher.java\n@@ -44,85 +44,97 @@ import java.util.ArrayList;\n  */\n public class ODEAxisServiceDispatcher extends AbstractDispatcher {\n \n-    /** Field NAME */\n-    public static final String NAME = \"ODEAxisServiceDispatcher\";\n-    private static final Log log = LogFactory.getLog(ODEAxisServiceDispatcher.class);\n-    QName operationName = null;\n-\n-    public AxisOperation findOperation(AxisService service, MessageContext messageContext)\n-            throws AxisFault {\n-        // #ODEAxisOperationDispatcher will do that\n-        return null;\n-    }\n-\n-    /*\n-     *  (non-Javadoc)\n-     * @see org.apache.axis2.engine.AbstractDispatcher#findService(org.apache.axis2.context.MessageContext)\n-     */\n-    public AxisService findService(MessageContext messageContext) throws AxisFault {\n-        EndpointReference toEPR = messageContext.getTo();\n-\n-        if (toEPR != null) {\n-            if (log.isDebugEnabled())\n-                log.debug(\"Checking for Service using target endpoint address : \" + toEPR.getAddress());\n-\n-            // HACK: Redirect legacy endpoints\n-            String address = toEPR.getAddress();\n-            if (address != null) address = address.replace(\"/ode/services/\", \"/ode/processes/\");\n-\n-            // The only thing we understand if a service name that\n-            // follows /processes/ in the request URL.\n-            String path = parseRequestURLForService(address);\n-            if (path != null) {\n-                AxisConfiguration registry =\n-                        messageContext.getConfigurationContext().getAxisConfiguration();\n-                AxisService service = registry.getService(path);\n-                if (service != null) {\n-\n-                    if (log.isDebugEnabled()) log.debug(\"Found service in registry from name \" + path + \": \" + service);\n-\n-                    // Axis2 >1.3 is less clever than 1.3. See ODE-509\n-                    // We have to do additional work for him.\n-                    Policy policy = PolicyUtil.getMergedPolicy(new ArrayList(service.getPolicySubject().getAttachedPolicyComponents()), service);\n-                    if (policy != null) {\n-                        if (log.isDebugEnabled()) log.debug(\"Apply policy: \" + policy.getName());\n-                        messageContext.setProperty(RampartMessageData.KEY_RAMPART_POLICY, policy);\n-                    }\n-                    return service;\n-                }\n+  /**\n+   * Field NAME\n+   */\n+  public static final String NAME = \"ODEAxisServiceDispatcher\";\n+  private static final Log log = LogFactory.getLog(ODEAxisServiceDispatcher.class);\n+  QName operationName = null;\n+\n+  public AxisOperation findOperation(AxisService service, MessageContext messageContext)\n+    throws AxisFault {\n+    // #ODEAxisOperationDispatcher will do that\n+    return null;\n+  }\n+\n+  /*\n+   *  (non-Javadoc)\n+   * @see org.apache.axis2.engine.AbstractDispatcher#findService(org.apache.axis2.context.MessageContext)\n+   */\n+  public AxisService findService(MessageContext messageContext) throws AxisFault {\n+    EndpointReference toEPR = messageContext.getTo();\n+\n+    if (toEPR != null) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\"Checking for Service using target endpoint address : \" + toEPR.getAddress());\n+      }\n+\n+      // HACK: Redirect legacy endpoints\n+      String address = toEPR.getAddress();\n+      if (address != null) {\n+        address = address.replace(\"/ode/services/\", \"/ode/processes/\");\n+      }\n+\n+      // The only thing we understand if a service name that\n+      // follows /processes/ in the request URL.\n+      String path = parseRequestURLForService(address);\n+      if (path != null) {\n+        AxisConfiguration registry =\n+          messageContext.getConfigurationContext().getAxisConfiguration();\n+        AxisService service = registry.getService(path);\n+        if (service != null) {\n+\n+          if (log.isDebugEnabled()) {\n+            log.debug(\"Found service in registry from name \" + path + \": \" + service);\n+          }\n+\n+          // Axis2 >1.3 is less clever than 1.3. See ODE-509\n+          // We have to do additional work for him.\n+          Policy policy = PolicyUtil\n+            .getMergedPolicy(new ArrayList(service.getPolicySubject().getAttachedPolicyComponents()), service);\n+          if (policy != null) {\n+            if (log.isDebugEnabled()) {\n+              log.debug(\"Apply policy: \" + policy.getName());\n             }\n+            messageContext.setProperty(RampartMessageData.KEY_RAMPART_POLICY, policy);\n+          }\n+          return service;\n         }\n-        if (log.isWarnEnabled()) log.warn(\"No service has been found!\");\n-        return null;\n+      }\n     }\n-\n-    public void initDispatcher() {\n-        init(new HandlerDescription(NAME));\n+    if (log.isWarnEnabled()) {\n+      log.warn(\"No service has been found!\");\n     }\n-\n-    /**\n-     * Obtain the service name from the request URL. The request URL is\n-     * expected to use the path \"/processes/\" under which all processes\n-     * and their services are listed. Returns null if the path does not\n-     * contain this part.\n-     */\n-    protected String parseRequestURLForService(String path) {\n-        int index = path.indexOf(\"/processes/\");\n-        if (-1 != index) {\n-            String service;\n-\n-            int serviceStart = index + \"/processes/\".length();\n-            if (path.length() > serviceStart + 1) {\n-                service = path.substring(serviceStart);\n-                // Path may contain query string, not interesting for us.\n-                int queryIndex = service.indexOf('?');\n-                if (queryIndex > 0) {\n-                    service = service.substring(0, queryIndex);\n-                }\n-                return service;\n-            }\n+    return null;\n+  }\n+\n+  public void initDispatcher() {\n+    init(new HandlerDescription(NAME));\n+  }\n+\n+  /**\n+   * Obtain the service name from the request URL. The request URL is\n+   * expected to use the path \"/processes/\" under which all processes\n+   * and their services are listed. Returns null if the path does not\n+   * contain this part.\n+   */\n+  protected String parseRequestURLForService(String path) {\n+    int index = path.indexOf(\"/processes/\");\n+    if (-1 != index) {\n+      String service;\n+\n+      int serviceStart = index + \"/processes/\".length();\n+      if (path.length() > serviceStart + 1) {\n+        service = path.substring(serviceStart);\n+        // Path may contain query string, not interesting for us.\n+        int queryIndex = service.indexOf('?');\n+        if (queryIndex > 0) {\n+          service = service.substring(0, queryIndex);\n         }\n-        return null;\n+        return service;\n+      }\n     }\n+    return null;\n+  }\n \n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/328/ODEAxisServiceDispatcher.java\nindex 0d59b6444e1..c872a434f2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/328/ODEAxisServiceDispatcher.java\n@@ -68,7 +68,8 @@ public class ODEAxisServiceDispatcher extends AbstractDispatcher {\n \n             // HACK: Redirect legacy endpoints\n             String address = toEPR.getAddress();\n-            if (address != null) address = address.replace(\"/ode/services/\", \"/ode/processes/\");\n+            if (address != null)\n+    address = address.replace(\"/ode/services/\", \"/ode/processes/\");\n \n             // The only thing we understand if a service name that\n             // follows /processes/ in the request URL.\n@@ -125,4 +126,4 @@ public class ODEAxisServiceDispatcher extends AbstractDispatcher {\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/328/ODEAxisServiceDispatcher.java\nindex 0d59b6444e1..981f45e051f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/328/ODEAxisServiceDispatcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/328/ODEAxisServiceDispatcher.java\n@@ -83,8 +83,9 @@ public class ODEAxisServiceDispatcher extends AbstractDispatcher {\n \n                     // Axis2 >1.3 is less clever than 1.3. See ODE-509\n                     // We have to do additional work for him.\n-                    Policy policy = PolicyUtil.getMergedPolicy(new ArrayList(service.getPolicySubject().getAttachedPolicyComponents()), service);\n-                    if (policy != null) {\n+                    Policy policy = PolicyUtil . getMergedPolicy(new\n+                    ArrayList (service.getPolicySubject().getAttachedPolicyComponents()), service);\n+                     if (policy != null) {\n                         if (log.isDebugEnabled()) log.debug(\"Apply policy: \" + policy.getName());\n                         messageContext.setProperty(RampartMessageData.KEY_RAMPART_POLICY, policy);\n                     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}