{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "168",
    "information": {
        "errors": [
            {
                "line": "138",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(\n          swaggerMethod.getGenericReturnType(),\n          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(), consumerMethod.getGenericReturnType()));\n\n      SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n      op.setName(swaggerMethodName);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/168/SwaggerEnvironment.java\nindex b3a2d557863..1fb6f594f06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/168/SwaggerEnvironment.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.swagger.engine;\n \n import java.lang.reflect.Method;\n@@ -135,7 +136,8 @@ public class SwaggerEnvironment {\n           consumerArgumentsFactory.createArgumentsMapper(config);\n       ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(\n           swaggerMethod.getGenericReturnType(),\n-          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(), consumerMethod.getGenericReturnType()));\n+          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(),\n+              consumerMethod.getGenericReturnType()));\n \n       SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n       op.setName(swaggerMethodName);\n@@ -160,7 +162,7 @@ public class SwaggerEnvironment {\n   }\n \n   public SwaggerProducer createProducer(Object producerInstance, Class<?> swaggerIntf,\n-      Map<String, Operation> swaggerOperationMap) {\n+                                        Map<String, Operation> swaggerOperationMap) {\n     Class<?> producerCls = BeanUtils.getImplClassFromBean(producerInstance);\n     Map<String, Method> visibleProducerMethods = retrieveVisibleMethods(producerCls);\n \n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/168/SwaggerEnvironment.java\nindex b3a2d557863..51146c03c5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/168/SwaggerEnvironment.java\n@@ -123,7 +123,7 @@ public class SwaggerEnvironment {\n         LOGGER.warn(\"consumer method {}:{} not exist in contract.\",\n             consumerIntf.getName(),\n             consumerMethod.getName());\n-        continue;\n+continue;\n       }\n \n       ArgumentsMapperConfig config = new ArgumentsMapperConfig();\n@@ -240,4 +240,4 @@ public class SwaggerEnvironment {\n     }\n     return visibleMethods;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/168/SwaggerEnvironment.java\nindex b3a2d557863..a5847fcb9f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/168/SwaggerEnvironment.java\n@@ -21,9 +21,7 @@ import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import javax.inject.Inject;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.foundation.common.utils.BeanUtils;\n import org.apache.servicecomb.foundation.common.utils.ReflectUtils;\n@@ -44,7 +42,6 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-\n import io.swagger.annotations.ApiOperation;\n import io.swagger.models.Operation;\n \n@@ -58,20 +55,19 @@ public class SwaggerEnvironment {\n   /**\n    * default producerArgumentsFactory\n    */\n+\n   @Inject\n   private ProducerArgumentsMapperFactory producerArgumentsFactory;\n \n   @Autowired\n   private List<ProducerArgumentsMapperFactory> producerArgumentsMapperFactoryList = new ArrayList<>(0);\n \n-  private ResponseMapperFactorys<ProducerResponseMapper> producerResponseMapperFactorys =\n-      new ResponseMapperFactorys<>(ProducerResponseMapperFactory.class);\n+  private ResponseMapperFactorys<ProducerResponseMapper> producerResponseMapperFactorys = new ResponseMapperFactorys<>(ProducerResponseMapperFactory.class);\n \n   @Inject\n   private ConsumerArgumentsMapperFactory consumerArgumentsFactory;\n \n-  private ResponseMapperFactorys<ConsumerResponseMapper> consumerResponseMapperFactorys =\n-      new ResponseMapperFactorys<>(ConsumerResponseMapperFactory.class);\n+  private ResponseMapperFactorys<ConsumerResponseMapper> consumerResponseMapperFactorys = new ResponseMapperFactorys<>(ConsumerResponseMapperFactory.class);\n \n   @Inject\n   public void setConverterMgr(ConverterMgr converterMgr) {\n@@ -83,8 +79,7 @@ public class SwaggerEnvironment {\n     return compositeSwaggerGeneratorContext;\n   }\n \n-  public void setCompositeSwaggerGeneratorContext(\n-      CompositeSwaggerGeneratorContext compositeSwaggerGeneratorContext) {\n+  public void setCompositeSwaggerGeneratorContext(CompositeSwaggerGeneratorContext compositeSwaggerGeneratorContext) {\n     this.compositeSwaggerGeneratorContext = compositeSwaggerGeneratorContext;\n   }\n \n@@ -121,8 +116,8 @@ public class SwaggerEnvironment {\n         // consumer method set bigger than contract, it's invalid\n         // but we need to support consumer upgrade before producer, so only log and ignore it.\n         LOGGER.warn(\"consumer method {}:{} not exist in contract.\",\n-            consumerIntf.getName(),\n-            consumerMethod.getName());\n+consumerIntf.getName(),\n+consumerMethod.getName());\n         continue;\n       }\n \n@@ -131,22 +126,18 @@ public class SwaggerEnvironment {\n       config.setProviderMethod(consumerMethod);\n       config.setClz(consumerIntf);\n \n-      ConsumerArgumentsMapper argsMapper =\n-          consumerArgumentsFactory.createArgumentsMapper(config);\n-      ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(\n-          swaggerMethod.getGenericReturnType(),\n-          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(), consumerMethod.getGenericReturnType()));\n-\n+      ConsumerArgumentsMapper argsMapper = consumerArgumentsFactory.createArgumentsMapper(config);\n+      ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(swaggerMethod.getGenericReturnType(), ParamUtils.getGenericParameterType(consumerIntf,\n+consumerMethod.getDeclaringClass(),\n+consumerMethod.getGenericReturnType()));\n       SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n       op.setName(swaggerMethodName);\n       op.setConsumerMethod(consumerMethod);\n       op.setSwaggerMethod(swaggerMethod);\n       op.setArgumentsMapper(argsMapper);\n       op.setResponseMapper(responseMapper);\n-\n       consumer.addOperation(op);\n     }\n-\n     return consumer;\n   }\n \n@@ -155,15 +146,12 @@ public class SwaggerEnvironment {\n     if (apiOperationAnnotation == null || StringUtils.isEmpty(apiOperationAnnotation.nickname())) {\n       return consumerMethod.getName();\n     }\n-\n     return apiOperationAnnotation.nickname();\n   }\n \n-  public SwaggerProducer createProducer(Object producerInstance, Class<?> swaggerIntf,\n-      Map<String, Operation> swaggerOperationMap) {\n+  public SwaggerProducer createProducer(Object producerInstance, Class<?> swaggerIntf, Map<String, Operation> swaggerOperationMap) {\n     Class<?> producerCls = BeanUtils.getImplClassFromBean(producerInstance);\n     Map<String, Method> visibleProducerMethods = retrieveVisibleMethods(producerCls);\n-\n     SwaggerProducer producer = new SwaggerProducer();\n     producer.setProducerCls(producerCls);\n     producer.setSwaggerIntf(swaggerIntf);\n@@ -174,8 +162,8 @@ public class SwaggerEnvironment {\n       if (producerMethod == null) {\n         // producer\u672a\u5b9e\u73b0\u5951\u7ea6\uff0c\u975e\u6cd5\n         String msg = String.format(\"swagger method %s not exist in producer %s.\",\n-            methodName,\n-            producerInstance.getClass().getName());\n+methodName,\n+producerInstance.getClass().getName());\n         throw new Error(msg);\n       }\n \n@@ -188,10 +176,7 @@ public class SwaggerEnvironment {\n \n       ProducerArgumentsMapperFactory argumentsMapperFactory = selectProducerArgumentsMapperFactory(config);\n       ProducerArgumentsMapper argsMapper = argumentsMapperFactory.createArgumentsMapper(config);\n-      ProducerResponseMapper responseMapper = producerResponseMapperFactorys.createResponseMapper(\n-          swaggerMethod.getGenericReturnType(),\n-          producerMethod.getGenericReturnType());\n-\n+      ProducerResponseMapper responseMapper = producerResponseMapperFactorys.createResponseMapper(swaggerMethod.getGenericReturnType(), producerMethod.getGenericReturnType());\n       SwaggerProducerOperation op = new SwaggerProducerOperation();\n       op.setName(methodName);\n       op.setProducerClass(producerCls);\n@@ -200,10 +185,8 @@ public class SwaggerEnvironment {\n       op.setSwaggerMethod(swaggerMethod);\n       op.setArgumentsMapper(argsMapper);\n       op.setResponseMapper(responseMapper);\n-\n       producer.addOperation(op);\n     }\n-\n     return producer;\n   }\n \n@@ -215,6 +198,7 @@ public class SwaggerEnvironment {\n         break;\n       }\n     }\n+\n     if (null == argumentsMapperFactory) {\n       argumentsMapperFactory = this.producerArgumentsFactory;\n     }\n@@ -240,4 +224,4 @@ public class SwaggerEnvironment {\n     }\n     return visibleMethods;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "138",
                    "column": "59",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/168/SwaggerEnvironment.java\nindex b3a2d557863..812072dcc07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/168/SwaggerEnvironment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/168/SwaggerEnvironment.java\n@@ -135,9 +135,11 @@ public class SwaggerEnvironment {\n           consumerArgumentsFactory.createArgumentsMapper(config);\n       ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(\n           swaggerMethod.getGenericReturnType(),\n-          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(), consumerMethod.getGenericReturnType()));\n+          ParamUtils.getGenericParameterType(consumerIntf,consumerMethod\n+              .getDeclaringClass(),\n+          consumerMethod.getGenericReturnType()));\n \n-      SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n+       SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n       op.setName(swaggerMethodName);\n       op.setConsumerMethod(consumerMethod);\n       op.setSwaggerMethod(swaggerMethod);\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}