{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "370",
                "column": "28",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    public RunResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n        return (RunResponse)apiClient.deserialize(response, RunResponse.class);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/64/InsertRunRequest.java\nindex d78a0d91b99..c98873af679 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/64/InsertRunRequest.java\n@@ -367,6 +367,6 @@ public class InsertRunRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RunResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RunResponse)apiClient.deserialize(response, RunResponse.class);\n+        return (RunResponse) apiClient.deserialize(response, RunResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/64/InsertRunRequest.java\nindex d78a0d91b99..2d69d3f3cf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/64/InsertRunRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -344,8 +346,8 @@ public class InsertRunRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -367,6 +369,6 @@ public class InsertRunRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RunResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RunResponse)apiClient.deserialize(response, RunResponse.class);\n+        return (RunResponse) apiClient.deserialize(response, RunResponse.class);\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/64/InsertRunRequest.java\nindex d78a0d91b99..67eb95c7971 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/64/InsertRunRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,61 +39,84 @@ import java.util.*;\n /*\n  * Request model for insertRun operation.\n  */\n+\n+\n public class InsertRunRequest implements RequestIfc {\n     /*\n      * The filename of the input document.\n      */\n-    private String name;\n+\n+  private String name;\n \n     /*\n      * The path to the paragraph in the document tree.\n      */\n-    private String paragraphPath;\n+\n+\n+  private String paragraphPath;\n \n     /*\n      * Run data.\n      */\n-    private RunInsert run;\n+\n+\n+  private RunInsert run;\n \n     /*\n      * Original document folder.\n      */\n-    private String folder;\n+\n+\n+  private String folder;\n \n     /*\n      * Original document storage.\n      */\n-    private String storage;\n+\n+\n+  private String storage;\n \n     /*\n      * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    private String loadEncoding;\n+\n+\n+  private String loadEncoding;\n \n     /*\n      * Password for opening an encrypted document.\n      */\n-    private String password;\n+\n+\n+  private String password;\n \n     /*\n      * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    private String destFileName;\n+\n+\n+  private String destFileName;\n \n     /*\n      * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    private String revisionAuthor;\n+\n+\n+  private String revisionAuthor;\n \n     /*\n      * The date and time to use for revisions.\n      */\n-    private String revisionDateTime;\n+\n+\n+  private String revisionDateTime;\n \n     /*\n      * The index of the node. A new Run object will be inserted before the node with the specified node Id.\n      */\n-    private String insertBeforeNode;\n+\n+\n+  private String insertBeforeNode;\n \n     /*\n      * Initializes a new instance of the InsertRunRequest class.\n@@ -111,173 +133,198 @@ public class InsertRunRequest implements RequestIfc {\n      * @param String revisionDateTime The date and time to use for revisions.\n      * @param String insertBeforeNode The index of the node. A new Run object will be inserted before the node with the specified node Id.\n      */\n-    public InsertRunRequest(String name, String paragraphPath, RunInsert run, String folder, String storage, String loadEncoding, String password, String destFileName, String revisionAuthor, String revisionDateTime, String insertBeforeNode) {\n-        this.name = name;\n-        this.paragraphPath = paragraphPath;\n-        this.run = run;\n-        this.folder = folder;\n-        this.storage = storage;\n-        this.loadEncoding = loadEncoding;\n-        this.password = password;\n-        this.destFileName = destFileName;\n-        this.revisionAuthor = revisionAuthor;\n-        this.revisionDateTime = revisionDateTime;\n-        this.insertBeforeNode = insertBeforeNode;\n-    }\n+\n+\n+  public InsertRunRequest(String name,  String paragraphPath,  RunInsert run,  String folder,  String storage,  String loadEncoding,  String password,  String destFileName,  String revisionAuthor,  String revisionDateTime,  String insertBeforeNode) {\n+    this.name = name;\n+    this.paragraphPath = paragraphPath;\n+    this.run = run;\n+    this.folder = folder;\n+    this.storage = storage;\n+    this.loadEncoding = loadEncoding;\n+    this.password = password;\n+    this.destFileName = destFileName;\n+    this.revisionAuthor = revisionAuthor;\n+    this.revisionDateTime = revisionDateTime;\n+    this.insertBeforeNode = insertBeforeNode;\n+  }\n \n     /*\n      * Gets The filename of the input document.\n      */\n-    public String getName() {\n-        return this.name;\n-    }\n+\n+\n+  public String getName() {\n+    return this.name;\n+  }\n \n     /*\n      * Sets The filename of the input document.\n      */\n-    public void setName(String value) {\n-        this.name = value;\n-    }\n+\n+  public void setName(String value) {\n+    this.name = value;\n+  }\n \n     /*\n      * Gets The path to the paragraph in the document tree.\n      */\n-    public String getParagraphPath() {\n-        return this.paragraphPath;\n-    }\n+\n+  public String getParagraphPath() {\n+    return this.paragraphPath;\n+  }\n \n     /*\n      * Sets The path to the paragraph in the document tree.\n      */\n-    public void setParagraphPath(String value) {\n-        this.paragraphPath = value;\n-    }\n+\n+  public void setParagraphPath(String value) {\n+    this.paragraphPath = value;\n+  }\n \n     /*\n      * Gets Run data.\n      */\n-    public RunInsert getRun() {\n-        return this.run;\n-    }\n+\n+  public RunInsert getRun() {\n+    return this.run;\n+  }\n \n     /*\n      * Sets Run data.\n      */\n-    public void setRun(RunInsert value) {\n-        this.run = value;\n-    }\n+\n+  public void setRun(RunInsert value) {\n+    this.run = value;\n+  }\n \n     /*\n      * Gets Original document folder.\n      */\n-    public String getFolder() {\n-        return this.folder;\n-    }\n+\n+  public String getFolder() {\n+    return this.folder;\n+  }\n \n     /*\n      * Sets Original document folder.\n      */\n-    public void setFolder(String value) {\n-        this.folder = value;\n-    }\n+\n+  public void setFolder(String value) {\n+    this.folder = value;\n+  }\n \n     /*\n      * Gets Original document storage.\n      */\n-    public String getStorage() {\n-        return this.storage;\n-    }\n+\n+  public String getStorage() {\n+    return this.storage;\n+  }\n \n     /*\n      * Sets Original document storage.\n      */\n-    public void setStorage(String value) {\n-        this.storage = value;\n-    }\n+\n+  public void setStorage(String value) {\n+    this.storage = value;\n+  }\n \n     /*\n      * Gets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public String getLoadEncoding() {\n-        return this.loadEncoding;\n-    }\n+\n+  public String getLoadEncoding() {\n+    return this.loadEncoding;\n+  }\n \n     /*\n      * Sets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public void setLoadEncoding(String value) {\n-        this.loadEncoding = value;\n-    }\n+\n+  public void setLoadEncoding(String value) {\n+    this.loadEncoding = value;\n+  }\n \n     /*\n      * Gets Password for opening an encrypted document.\n      */\n-    public String getPassword() {\n-        return this.password;\n-    }\n+\n+  public String getPassword() {\n+    return this.password;\n+  }\n \n     /*\n      * Sets Password for opening an encrypted document.\n      */\n-    public void setPassword(String value) {\n-        this.password = value;\n-    }\n+\n+  public void setPassword(String value) {\n+    this.password = value;\n+  }\n \n     /*\n      * Gets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public String getDestFileName() {\n-        return this.destFileName;\n-    }\n+\n+  public String getDestFileName() {\n+    return this.destFileName;\n+  }\n \n     /*\n      * Sets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public void setDestFileName(String value) {\n-        this.destFileName = value;\n-    }\n+\n+  public void setDestFileName(String value) {\n+    this.destFileName = value;\n+  }\n \n     /*\n      * Gets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public String getRevisionAuthor() {\n-        return this.revisionAuthor;\n-    }\n+\n+  public String getRevisionAuthor() {\n+    return this.revisionAuthor;\n+  }\n \n     /*\n      * Sets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public void setRevisionAuthor(String value) {\n-        this.revisionAuthor = value;\n-    }\n+\n+  public void setRevisionAuthor(String value) {\n+    this.revisionAuthor = value;\n+  }\n \n     /*\n      * Gets The date and time to use for revisions.\n      */\n-    public String getRevisionDateTime() {\n-        return this.revisionDateTime;\n-    }\n+\n+  public String getRevisionDateTime() {\n+    return this.revisionDateTime;\n+  }\n \n     /*\n      * Sets The date and time to use for revisions.\n      */\n-    public void setRevisionDateTime(String value) {\n-        this.revisionDateTime = value;\n-    }\n+\n+  public void setRevisionDateTime(String value) {\n+    this.revisionDateTime = value;\n+  }\n \n     /*\n      * Gets The index of the node. A new Run object will be inserted before the node with the specified node Id.\n      */\n-    public String getInsertBeforeNode() {\n-        return this.insertBeforeNode;\n-    }\n+\n+  public String getInsertBeforeNode() {\n+    return this.insertBeforeNode;\n+  }\n \n     /*\n      * Sets The index of the node. A new Run object will be inserted before the node with the specified node Id.\n      */\n-    public void setInsertBeforeNode(String value) {\n-        this.insertBeforeNode = value;\n-    }\n+\n+  public void setInsertBeforeNode(String value) {\n+    this.insertBeforeNode = value;\n+  }\n \n \n     /*\n@@ -287,78 +334,76 @@ public class InsertRunRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n-        if (getName() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling insertRun\");\n-        }\n+    if (getName() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling insertRun\");\n+    }\n \n         // verify the required parameter 'ParagraphPath' is set\n-        if (getParagraphPath() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'ParagraphPath' when calling insertRun\");\n-        }\n+    if (getParagraphPath() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'ParagraphPath' when calling insertRun\");\n+    }\n \n         // verify the required parameter 'Run' is set\n-        if (getRun() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Run' when calling insertRun\");\n-        }\n+    if (getRun() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Run' when calling insertRun\");\n+    }\n \n-        Object localVarPostBody = getRun();\n+    Object localVarPostBody = getRun();\n \n         // create path and map variables\n-        String localVarPath = \"/words/{name}/{paragraphPath}/runs\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"paragraphPath\", getParagraphPath());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"insertBeforeNode\", getInsertBeforeNode());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"POST\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/{name}/{paragraphPath}/runs\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"paragraphPath\", getParagraphPath());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"insertBeforeNode\", getInsertBeforeNode());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"POST\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return RunResponse.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return RunResponse.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -366,7 +411,9 @@ public class InsertRunRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public RunResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RunResponse)apiClient.deserialize(response, RunResponse.class);\n-    }\n-}\n+\n+  public RunResponse deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    return (RunResponse) apiClient.deserialize(response, RunResponse.class);\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 208
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/64/InsertRunRequest.java\nindex d78a0d91b99..c98873af679 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/64/InsertRunRequest.java\n@@ -367,6 +367,6 @@ public class InsertRunRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RunResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RunResponse)apiClient.deserialize(response, RunResponse.class);\n+        return (RunResponse) apiClient.deserialize(response, RunResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/64/InsertRunRequest.java\nindex d78a0d91b99..ab61b89ba21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/64/InsertRunRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/64/InsertRunRequest.java\n@@ -367,6 +367,6 @@ public class InsertRunRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RunResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RunResponse)apiClient.deserialize(response, RunResponse.class);\n+        return (RunResponse)  apiClient.deserialize(response, RunResponse.class);\n     }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}