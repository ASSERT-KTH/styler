{
    "project_name": "neo4j-neo4j",
    "error_id": "929",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/929/QuerySnapshot.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/929/QuerySnapshot.java\nindex 98af802fed5..5c15938244a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/929/QuerySnapshot.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/929/QuerySnapshot.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.query;\n \n import java.util.Collections;\n@@ -41,7 +42,7 @@ public class QuerySnapshot\n     private final long cpuTimeMicros;\n     private final long waitTimeMicros;\n     private final String status;\n-    private final Map<String,Object> resourceInfo;\n+    private final Map<String, Object> resourceInfo;\n     private final List<ActiveLock> waitingLocks;\n     private final long activeLockCount;\n     private final long allocatedBytes;\n@@ -49,10 +50,10 @@ public class QuerySnapshot\n     private final Optional<String> obfuscatedQueryText;\n     private final Optional<MapValue> obfuscatedQueryParameters;\n \n-    QuerySnapshot( ExecutingQuery query, CompilerInfo compilerInfo, PageCounterValues page, long compilationTimeMicros,\n-                   long elapsedTimeMicros, long cpuTimeMicros, long waitTimeMicros, String status,\n-                   Map<String,Object> resourceInfo, List<ActiveLock> waitingLocks, long activeLockCount, long allocatedBytes,\n-                   Optional<String> obfuscatedQueryText, Optional<MapValue> obfuscatedQueryParameters )\n+    QuerySnapshot(ExecutingQuery query, CompilerInfo compilerInfo, PageCounterValues page, long compilationTimeMicros,\n+                  long elapsedTimeMicros, long cpuTimeMicros, long waitTimeMicros, String status,\n+                  Map<String, Object> resourceInfo, List<ActiveLock> waitingLocks, long activeLockCount, long allocatedBytes,\n+                  Optional<String> obfuscatedQueryText, Optional<MapValue> obfuscatedQueryParameters)\n     {\n         this.query = query;\n         this.compilerInfo = compilerInfo;\n@@ -120,7 +121,7 @@ public class QuerySnapshot\n         return query.clientConnection();\n     }\n \n-    public Map<String,Object> transactionAnnotationData()\n+    public Map<String, Object> transactionAnnotationData()\n     {\n         return query.transactionAnnotationData();\n     }\n@@ -140,15 +141,15 @@ public class QuerySnapshot\n         return compilerInfo == null ? null : compilerInfo.runtime();\n     }\n \n-    public List<Map<String,String>> indexes()\n+    public List<Map<String, String>> indexes()\n     {\n-        if ( compilerInfo == null )\n+        if (compilerInfo == null)\n         {\n             return Collections.emptyList();\n         }\n         return compilerInfo.indexes().stream()\n-                           .map( IndexUsage::asMap )\n-                           .collect( Collectors.toList() );\n+          .map(IndexUsage::asMap)\n+          .collect(Collectors.toList());\n     }\n \n     public String status()\n@@ -156,7 +157,7 @@ public class QuerySnapshot\n         return status;\n     }\n \n-    public Map<String,Object> resourceInformation()\n+    public Map<String, Object> resourceInformation()\n     {\n         return resourceInfo;\n     }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}