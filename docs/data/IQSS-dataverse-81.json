{
    "project_name": "IQSS-dataverse",
    "error_id": "81",
    "information": {
        "errors": [
            {
                "line": "21",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "// no annotations here, since permissions are dynamically decided\npublic class RevokeRoleCommand extends AbstractVoidCommand {\n\t\n\tprivate final RoleAssignment toBeRevoked;\n\n\tpublic RevokeRoleCommand(RoleAssignment toBeRevoked, DataverseRequest aRequest) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "21",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/81/RevokeRoleCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/81/RevokeRoleCommand.java\nindex 1a290df4a4a..e80e9402ef4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/81/RevokeRoleCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/81/RevokeRoleCommand.java\n@@ -14,29 +14,32 @@ import java.util.Set;\n \n /**\n  * Revokes a role for a user on a dataverse.\n+ *\n  * @author michael\n  */\n // no annotations here, since permissions are dynamically decided\n public class RevokeRoleCommand extends AbstractVoidCommand {\n-\t\n-\tprivate final RoleAssignment toBeRevoked;\n \n-\tpublic RevokeRoleCommand(RoleAssignment toBeRevoked, DataverseRequest aRequest) {\n-        // for data file check permission on owning dataset\n-        super(aRequest, toBeRevoked.getDefinitionPoint() instanceof DataFile ? toBeRevoked.getDefinitionPoint().getOwner() : toBeRevoked.getDefinitionPoint());\n-\t\tthis.toBeRevoked = toBeRevoked;\n-\t}\n-\t\n-\t@Override\n-\tprotected void executeImpl(CommandContext ctxt) throws CommandException {\n-\t\tctxt.roles().revoke(toBeRevoked);\n-\t}\n-        \n-    @Override\n-    public Map<String, Set<Permission>> getRequiredPermissions() {\n-        // for data file check permission on owning dataset\n-        return Collections.singletonMap(\"\",\n-                toBeRevoked.getDefinitionPoint() instanceof Dataverse ? Collections.singleton(Permission.ManageDataversePermissions)\n-                : Collections.singleton(Permission.ManageDatasetPermissions));\n-    }\t\n+  private final RoleAssignment toBeRevoked;\n+\n+  public RevokeRoleCommand(RoleAssignment toBeRevoked, DataverseRequest aRequest) {\n+    // for data file check permission on owning dataset\n+    super(aRequest, toBeRevoked.getDefinitionPoint() instanceof DataFile ? toBeRevoked.getDefinitionPoint().getOwner() :\n+      toBeRevoked.getDefinitionPoint());\n+    this.toBeRevoked = toBeRevoked;\n+  }\n+\n+  @Override\n+  protected void executeImpl(CommandContext ctxt) throws CommandException {\n+    ctxt.roles().revoke(toBeRevoked);\n+  }\n+\n+  @Override\n+  public Map<String, Set<Permission>> getRequiredPermissions() {\n+    // for data file check permission on owning dataset\n+    return Collections.singletonMap(\"\",\n+      toBeRevoked.getDefinitionPoint() instanceof Dataverse ?\n+        Collections.singleton(Permission.ManageDataversePermissions)\n+        : Collections.singleton(Permission.ManageDatasetPermissions));\n+  }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/81/RevokeRoleCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/81/RevokeRoleCommand.java\nindex 1a290df4a4a..a94d21e466a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/81/RevokeRoleCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/81/RevokeRoleCommand.java\n@@ -18,25 +18,26 @@ import java.util.Set;\n  */\n // no annotations here, since permissions are dynamically decided\n public class RevokeRoleCommand extends AbstractVoidCommand {\n-\t\n-\tprivate final RoleAssignment toBeRevoked;\n \n-\tpublic RevokeRoleCommand(RoleAssignment toBeRevoked, DataverseRequest aRequest) {\n-        // for data file check permission on owning dataset\n+    private final RoleAssignment toBeRevoked;\n+\n+public RevokeRoleCommand(RoleAssignment toBeRevoked, DataverseRequest aRequest) {\n+    // for data file check permission on owning dataset\n         super(aRequest, toBeRevoked.getDefinitionPoint() instanceof DataFile ? toBeRevoked.getDefinitionPoint().getOwner() : toBeRevoked.getDefinitionPoint());\n-\t\tthis.toBeRevoked = toBeRevoked;\n-\t}\n-\t\n-\t@Override\n-\tprotected void executeImpl(CommandContext ctxt) throws CommandException {\n-\t\tctxt.roles().revoke(toBeRevoked);\n-\t}\n-        \n-    @Override\n+this.toBeRevoked = toBeRevoked;\n+    }\n+\n+@Override\n+protected void executeImpl(CommandContext ctxt) throws CommandException {\n+    ctxt.roles().revoke(toBeRevoked);\n+    }\n+\n+\n+        @Override\n     public Map<String, Set<Permission>> getRequiredPermissions() {\n         // for data file check permission on owning dataset\n         return Collections.singletonMap(\"\",\n                 toBeRevoked.getDefinitionPoint() instanceof Dataverse ? Collections.singleton(Permission.ManageDataversePermissions)\n                 : Collections.singleton(Permission.ManageDatasetPermissions));\n-    }\t\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/81/RevokeRoleCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/81/RevokeRoleCommand.java\nindex 1a290df4a4a..bf742027850 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/81/RevokeRoleCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/81/RevokeRoleCommand.java\n@@ -17,26 +17,27 @@ import java.util.Set;\n  * @author michael\n  */\n // no annotations here, since permissions are dynamically decided\n+\n+\n public class RevokeRoleCommand extends AbstractVoidCommand {\n-\t\n-\tprivate final RoleAssignment toBeRevoked;\n \n-\tpublic RevokeRoleCommand(RoleAssignment toBeRevoked, DataverseRequest aRequest) {\n+    private final RoleAssignment toBeRevoked;\n+\n+    public RevokeRoleCommand(RoleAssignment toBeRevoked, DataverseRequest aRequest) {\n         // for data file check permission on owning dataset\n         super(aRequest, toBeRevoked.getDefinitionPoint() instanceof DataFile ? toBeRevoked.getDefinitionPoint().getOwner() : toBeRevoked.getDefinitionPoint());\n-\t\tthis.toBeRevoked = toBeRevoked;\n-\t}\n-\t\n-\t@Override\n-\tprotected void executeImpl(CommandContext ctxt) throws CommandException {\n-\t\tctxt.roles().revoke(toBeRevoked);\n-\t}\n-        \n+        this.toBeRevoked = toBeRevoked;\n+    }\n+\n+    @Override\n+    protected void executeImpl(CommandContext ctxt) throws CommandException {\n+        ctxt.roles().revoke(toBeRevoked);\n+    }\n+\n     @Override\n     public Map<String, Set<Permission>> getRequiredPermissions() {\n         // for data file check permission on owning dataset\n-        return Collections.singletonMap(\"\",\n-                toBeRevoked.getDefinitionPoint() instanceof Dataverse ? Collections.singleton(Permission.ManageDataversePermissions)\n-                : Collections.singleton(Permission.ManageDatasetPermissions));\n-    }\t\n-}\n+        return Collections.singletonMap(\"\", toBeRevoked.getDefinitionPoint() instanceof Dataverse ? Collections.singleton(Permission.ManageDataversePermissions) : Collections.singleton(Permission.ManageDatasetPermissions));\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "21",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "21",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}