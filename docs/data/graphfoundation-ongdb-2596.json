{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2596",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "170",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "241",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "246",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "345",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "391",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "473",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "541",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "553",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "565",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "577",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "589",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "601",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "613",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "623",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "625",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2596/PropertyStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2596/PropertyStore.java\nindex 9493c8873ad..811e87be10c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2596/PropertyStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2596/PropertyStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -143,598 +144,588 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n  *            seconds in next long block\n  * </pre>\n  */\n-public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHeader> implements StorageStatement.Properties\n+public class PropertyStore extends CommonAbstractStore<PropertyRecord, NoStoreHeader> implements StorageStatement.Properties\n {\n-    public static final String TYPE_DESCRIPTOR = \"PropertyStore\";\n-\n-    private final DynamicStringStore stringStore;\n-    private final PropertyKeyTokenStore propertyKeyTokenStore;\n-    private final DynamicArrayStore arrayStore;\n-\n-    // In 3.4 we introduced capabilities to store points and temporal data types\n-    // this variable here can be removed once the support for older store versions (that do not have these two\n-    // capabilities) has ceased, the variable can be removed.\n-    private final boolean allowStorePointsAndTemporal;\n-\n-    public PropertyStore(\n-            File fileName,\n-            Config configuration,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            DynamicStringStore stringPropertyStore,\n-            PropertyKeyTokenStore propertyKeyTokenStore,\n-            DynamicArrayStore arrayPropertyStore,\n-            RecordFormats recordFormats,\n-            OpenOption... openOptions )\n-    {\n-        super( fileName, configuration, IdType.PROPERTY, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR,\n-                recordFormats.property(), NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions );\n-        this.stringStore = stringPropertyStore;\n-        this.propertyKeyTokenStore = propertyKeyTokenStore;\n-        this.arrayStore = arrayPropertyStore;\n-        allowStorePointsAndTemporal = recordFormats.hasCapability( Capability.POINT_PROPERTIES )\n-                && recordFormats.hasCapability( Capability.TEMPORAL_PROPERTIES );\n-    }\n+  public static final String TYPE_DESCRIPTOR = \"PropertyStore\";\n+\n+  private final DynamicStringStore stringStore;\n+  private final PropertyKeyTokenStore propertyKeyTokenStore;\n+  private final DynamicArrayStore arrayStore;\n+\n+  // In 3.4 we introduced capabilities to store points and temporal data types\n+  // this variable here can be removed once the support for older store versions (that do not have these two\n+  // capabilities) has ceased, the variable can be removed.\n+  private final boolean allowStorePointsAndTemporal;\n+\n+  public PropertyStore(\n+      File fileName,\n+      Config configuration,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      DynamicStringStore stringPropertyStore,\n+      PropertyKeyTokenStore propertyKeyTokenStore,\n+      DynamicArrayStore arrayPropertyStore,\n+      RecordFormats recordFormats,\n+      OpenOption... openOptions)\n+  {\n+    super(fileName, configuration, IdType.PROPERTY, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR,\n+        recordFormats.property(), NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions);\n+    this.stringStore = stringPropertyStore;\n+    this.propertyKeyTokenStore = propertyKeyTokenStore;\n+    this.arrayStore = arrayPropertyStore;\n+    allowStorePointsAndTemporal = recordFormats.hasCapability(Capability.POINT_PROPERTIES)\n+        && recordFormats.hasCapability(Capability.TEMPORAL_PROPERTIES);\n+  }\n+\n+  @Override\n+  public <FAILURE extends Exception> void accept(RecordStore.Processor<FAILURE> processor, PropertyRecord record)\n+      throws FAILURE\n+  {\n+    processor.processProperty(this, record);\n+  }\n+\n+  public DynamicStringStore getStringStore()\n+  {\n+    return stringStore;\n+  }\n+\n+  public DynamicArrayStore getArrayStore()\n+  {\n+    return arrayStore;\n+  }\n+\n+  public PropertyKeyTokenStore getPropertyKeyTokenStore()\n+  {\n+    return propertyKeyTokenStore;\n+  }\n+\n+  @Override\n+  public void updateRecord(PropertyRecord record)\n+  {\n+    updatePropertyBlocks(record);\n+    super.updateRecord(record);\n+  }\n+\n+  private void updatePropertyBlocks(PropertyRecord record)\n+  {\n+    if (record.inUse())\n+    {\n+      // Go through the blocks\n+      for (PropertyBlock block : record)\n+      {\n+        /*\n+         * For each block we need to update its dynamic record chain if\n+         * it is just created. Deleted dynamic records are in the property\n+         * record and dynamic records are never modified. Also, they are\n+         * assigned as a whole, so just checking the first should be enough.\n+         */\n+        if (!block.isLight()\n+            && block.getValueRecords().get(0).isCreated())\n+        {\n+          updateDynamicRecords(block.getValueRecords());\n+        }\n+      }\n+    }\n+    updateDynamicRecords(record.getDeletedRecords());\n+  }\n+\n+  private void updateDynamicRecords(List<DynamicRecord> records)\n+  {\n+    for (DynamicRecord valueRecord : records)\n+    {\n+      PropertyType recordType = valueRecord.getType();\n+      if (recordType == PropertyType.STRING)\n+      {\n+        stringStore.updateRecord(valueRecord);\n+      } else if (recordType == PropertyType.ARRAY)\n+      {\n+        arrayStore.updateRecord(valueRecord);\n+      } else\n+      {\n+        throw new InvalidRecordException(\"Unknown dynamic record\"\n+            + valueRecord);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void ensureHeavy(PropertyRecord record)\n+  {\n+    for (PropertyBlock block : record)\n+    {\n+      ensureHeavy(block);\n+    }\n+  }\n+\n+  public void ensureHeavy(PropertyBlock block)\n+  {\n+    if (!block.isLight())\n+    {\n+      return;\n+    }\n+\n+    PropertyType type = block.getType();\n+    RecordStore<DynamicRecord> dynamicStore = dynamicStoreForValueType(type);\n+    if (dynamicStore == null)\n+    {\n+      return;\n+    }\n+\n+    try (Cursor<DynamicRecord> dynamicRecords = dynamicStore.newRecordCursor(dynamicStore.newRecord())\n+        .acquire(block.getSingleValueLong(), NORMAL))\n+    {\n+      while (dynamicRecords.next())\n+      {\n+        dynamicRecords.get().setType(type.intValue());\n+        block.addValueRecord(dynamicRecords.get().clone());\n+      }\n+    }\n+  }\n \n-    @Override\n-    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, PropertyRecord record )\n-            throws FAILURE\n-    {\n-        processor.processProperty( this, record );\n-    }\n-\n-    public DynamicStringStore getStringStore()\n-    {\n-        return stringStore;\n-    }\n-\n-    public DynamicArrayStore getArrayStore()\n+  private RecordStore<DynamicRecord> dynamicStoreForValueType(PropertyType type)\n+  {\n+    switch (type)\n     {\n+      case ARRAY:\n         return arrayStore;\n-    }\n+      case STRING:\n+        return stringStore;\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  public Value getValue(PropertyBlock propertyBlock)\n+  {\n+    return propertyBlock.getType().value(propertyBlock, this);\n+  }\n+\n+  public static void allocateStringRecords(Collection<DynamicRecord> target, byte[] chars,\n+                                           DynamicRecordAllocator allocator)\n+  {\n+    AbstractDynamicStore.allocateRecordsFromBytes(target, chars, allocator);\n+  }\n+\n+  public static void allocateArrayRecords(Collection<DynamicRecord> target, Object array,\n+                                          DynamicRecordAllocator allocator, boolean allowStorePoints)\n+  {\n+    DynamicArrayStore.allocateRecords(target, array, allocator, allowStorePoints);\n+  }\n+\n+  public void encodeValue(PropertyBlock block, int keyId, Value value)\n+  {\n+    encodeValue(block, keyId, value, stringStore, arrayStore, allowStorePointsAndTemporal);\n+  }\n+\n+  public static void encodeValue(PropertyBlock block, int keyId, Value value, DynamicRecordAllocator stringAllocator, DynamicRecordAllocator arrayAllocator,\n+                                 boolean allowStorePointsAndTemporal)\n+  {\n+    if (value instanceof ArrayValue)\n+    {\n+      Object asObject = value.asObject();\n+\n+      // Try short array first, i.e. inlined in the property block\n+      if (ShortArray.encode(keyId, asObject, block, PropertyType.getPayloadSize()))\n+      {\n+        return;\n+      }\n+\n+      // Fall back to dynamic array store\n+      List<DynamicRecord> arrayRecords = new ArrayList<>();\n+      allocateArrayRecords(arrayRecords, asObject, arrayAllocator, allowStorePointsAndTemporal);\n+      setSingleBlockValue(block, keyId, PropertyType.ARRAY, Iterables.first(arrayRecords).getId());\n+      for (DynamicRecord valueRecord : arrayRecords)\n+      {\n+        valueRecord.setType(PropertyType.ARRAY.intValue());\n+      }\n+      block.setValueRecords(arrayRecords);\n+    } else\n+    {\n+      value.writeTo(new PropertyBlockValueWriter(block, keyId, stringAllocator, allowStorePointsAndTemporal));\n+    }\n+  }\n+\n+  @Override\n+  public PageCursor openStringPageCursor(long reference)\n+  {\n+    return stringStore.openPageCursorForReading(reference);\n+  }\n+\n+  @Override\n+  public PageCursor openArrayPageCursor(long reference)\n+  {\n+    return arrayStore.openPageCursorForReading(reference);\n+  }\n+\n+  @Override\n+  public ByteBuffer loadString(long reference, ByteBuffer buffer, PageCursor page)\n+  {\n+    return readDynamic(stringStore, reference, buffer, page);\n+  }\n+\n+  @Override\n+  public ByteBuffer loadArray(long reference, ByteBuffer buffer, PageCursor page)\n+  {\n+    return readDynamic(arrayStore, reference, buffer, page);\n+  }\n+\n+  private static ByteBuffer readDynamic(AbstractDynamicStore store, long reference, ByteBuffer buffer,\n+                                        PageCursor page)\n+  {\n+    if (buffer == null)\n+    {\n+      buffer = ByteBuffer.allocate(512);\n+    } else\n+    {\n+      buffer.clear();\n+    }\n+    DynamicRecord record = store.newRecord();\n+    do\n+    {\n+      //We need to load forcefully here since otherwise we can have inconsistent reads\n+      //for properties across blocks, see org.neo4j.graphdb.ConsistentPropertyReadsIT\n+      store.getRecordByCursor(reference, record, RecordLoad.FORCE, page);\n+      reference = record.getNextBlock();\n+      byte[] data = record.getData();\n+      if (buffer.remaining() < data.length)\n+      {\n+        buffer = grow(buffer, data.length);\n+      }\n+      buffer.put(data, 0, data.length);\n+    }\n+    while (reference != NO_ID);\n+    return buffer;\n+  }\n+\n+  private static ByteBuffer grow(ByteBuffer buffer, int required)\n+  {\n+    buffer.flip();\n+    int capacity = buffer.capacity();\n+    do\n+    {\n+      capacity *= 2;\n+    }\n+    while (capacity - buffer.limit() < required);\n+    return ByteBuffer.allocate(capacity).order(ByteOrder.LITTLE_ENDIAN).put(buffer);\n+  }\n+\n+  private static class PropertyBlockValueWriter extends TemporalValueWriterAdapter<IllegalArgumentException>\n+  {\n+    private final PropertyBlock block;\n+    private final int keyId;\n+    private final DynamicRecordAllocator stringAllocator;\n+    private final boolean allowStorePointsAndTemporal;\n \n-    public PropertyKeyTokenStore getPropertyKeyTokenStore()\n+    PropertyBlockValueWriter(PropertyBlock block, int keyId, DynamicRecordAllocator stringAllocator, boolean allowStorePointsAndTemporal)\n     {\n-        return propertyKeyTokenStore;\n+      this.block = block;\n+      this.keyId = keyId;\n+      this.stringAllocator = stringAllocator;\n+      this.allowStorePointsAndTemporal = allowStorePointsAndTemporal;\n     }\n \n     @Override\n-    public void updateRecord( PropertyRecord record )\n+    public void writeNull() throws IllegalArgumentException\n     {\n-        updatePropertyBlocks( record );\n-        super.updateRecord( record );\n-    }\n-\n-    private void updatePropertyBlocks( PropertyRecord record )\n-    {\n-        if ( record.inUse() )\n-        {\n-            // Go through the blocks\n-            for ( PropertyBlock block : record )\n-            {\n-                /*\n-                 * For each block we need to update its dynamic record chain if\n-                 * it is just created. Deleted dynamic records are in the property\n-                 * record and dynamic records are never modified. Also, they are\n-                 * assigned as a whole, so just checking the first should be enough.\n-                 */\n-                if ( !block.isLight()\n-                        && block.getValueRecords().get( 0 ).isCreated() )\n-                {\n-                    updateDynamicRecords( block.getValueRecords() );\n-                }\n-            }\n-        }\n-        updateDynamicRecords( record.getDeletedRecords() );\n-    }\n-\n-    private void updateDynamicRecords( List<DynamicRecord> records )\n-    {\n-        for ( DynamicRecord valueRecord : records )\n-        {\n-            PropertyType recordType = valueRecord.getType();\n-            if ( recordType == PropertyType.STRING )\n-            {\n-                stringStore.updateRecord( valueRecord );\n-            }\n-            else if ( recordType == PropertyType.ARRAY )\n-            {\n-                arrayStore.updateRecord( valueRecord );\n-            }\n-            else\n-            {\n-                throw new InvalidRecordException( \"Unknown dynamic record\"\n-                        + valueRecord );\n-            }\n-        }\n+      throw new IllegalArgumentException(\"Cannot write null values to the property store\");\n     }\n \n     @Override\n-    public void ensureHeavy( PropertyRecord record )\n-    {\n-        for ( PropertyBlock block : record )\n-        {\n-            ensureHeavy( block );\n-        }\n-    }\n-\n-    public void ensureHeavy( PropertyBlock block )\n-    {\n-        if ( !block.isLight() )\n-        {\n-            return;\n-        }\n-\n-        PropertyType type = block.getType();\n-        RecordStore<DynamicRecord> dynamicStore = dynamicStoreForValueType( type );\n-        if ( dynamicStore == null )\n-        {\n-            return;\n-        }\n-\n-        try ( Cursor<DynamicRecord> dynamicRecords = dynamicStore.newRecordCursor( dynamicStore.newRecord() )\n-                .acquire( block.getSingleValueLong(), NORMAL ) )\n-        {\n-            while ( dynamicRecords.next() )\n-            {\n-                dynamicRecords.get().setType( type.intValue() );\n-                block.addValueRecord( dynamicRecords.get().clone() );\n-            }\n-        }\n-    }\n-\n-    private RecordStore<DynamicRecord> dynamicStoreForValueType( PropertyType type )\n+    public void writeBoolean(boolean value) throws IllegalArgumentException\n     {\n-        switch ( type )\n-        {\n-        case ARRAY: return arrayStore;\n-        case STRING: return stringStore;\n-        default: return null;\n-        }\n-    }\n-\n-    public Value getValue( PropertyBlock propertyBlock )\n-    {\n-        return propertyBlock.getType().value( propertyBlock, this );\n-    }\n-\n-    public static void allocateStringRecords( Collection<DynamicRecord> target, byte[] chars,\n-            DynamicRecordAllocator allocator )\n-    {\n-        AbstractDynamicStore.allocateRecordsFromBytes( target, chars, allocator );\n-    }\n-\n-    public static void allocateArrayRecords( Collection<DynamicRecord> target, Object array,\n-            DynamicRecordAllocator allocator, boolean allowStorePoints )\n-    {\n-        DynamicArrayStore.allocateRecords( target, array, allocator, allowStorePoints );\n-    }\n-\n-    public void encodeValue( PropertyBlock block, int keyId, Value value )\n-    {\n-        encodeValue( block, keyId, value, stringStore, arrayStore, allowStorePointsAndTemporal );\n-    }\n-\n-    public static void encodeValue( PropertyBlock block, int keyId, Value value, DynamicRecordAllocator stringAllocator, DynamicRecordAllocator arrayAllocator,\n-            boolean allowStorePointsAndTemporal )\n-    {\n-        if ( value instanceof ArrayValue )\n-        {\n-            Object asObject = value.asObject();\n-\n-            // Try short array first, i.e. inlined in the property block\n-            if ( ShortArray.encode( keyId, asObject, block, PropertyType.getPayloadSize() ) )\n-            {\n-                return;\n-            }\n-\n-            // Fall back to dynamic array store\n-            List<DynamicRecord> arrayRecords = new ArrayList<>();\n-            allocateArrayRecords( arrayRecords, asObject, arrayAllocator, allowStorePointsAndTemporal );\n-            setSingleBlockValue( block, keyId, PropertyType.ARRAY, Iterables.first( arrayRecords ).getId() );\n-            for ( DynamicRecord valueRecord : arrayRecords )\n-            {\n-                valueRecord.setType( PropertyType.ARRAY.intValue() );\n-            }\n-            block.setValueRecords( arrayRecords );\n-        }\n-        else\n-        {\n-            value.writeTo( new PropertyBlockValueWriter( block, keyId, stringAllocator, allowStorePointsAndTemporal ) );\n-        }\n+      setSingleBlockValue(block, keyId, PropertyType.BOOL, value ? 1L : 0L);\n     }\n \n     @Override\n-    public PageCursor openStringPageCursor( long reference )\n+    public void writeInteger(byte value) throws IllegalArgumentException\n     {\n-        return stringStore.openPageCursorForReading( reference );\n+      setSingleBlockValue(block, keyId, PropertyType.BYTE, value);\n     }\n \n     @Override\n-    public PageCursor openArrayPageCursor( long reference )\n+    public void writeInteger(short value) throws IllegalArgumentException\n     {\n-        return arrayStore.openPageCursorForReading( reference );\n+      setSingleBlockValue(block, keyId, PropertyType.SHORT, value);\n     }\n \n     @Override\n-    public ByteBuffer loadString( long reference, ByteBuffer buffer, PageCursor page )\n+    public void writeInteger(int value) throws IllegalArgumentException\n     {\n-        return readDynamic( stringStore, reference, buffer, page );\n+      setSingleBlockValue(block, keyId, PropertyType.INT, value);\n     }\n \n     @Override\n-    public ByteBuffer loadArray( long reference, ByteBuffer buffer, PageCursor page )\n-    {\n-        return readDynamic( arrayStore, reference, buffer, page );\n-    }\n-\n-    private static ByteBuffer readDynamic( AbstractDynamicStore store, long reference, ByteBuffer buffer,\n-            PageCursor page )\n-    {\n-        if ( buffer == null )\n-        {\n-            buffer = ByteBuffer.allocate( 512 );\n-        }\n-        else\n-        {\n-            buffer.clear();\n-        }\n-        DynamicRecord record = store.newRecord();\n-        do\n-        {\n-            //We need to load forcefully here since otherwise we can have inconsistent reads\n-            //for properties across blocks, see org.neo4j.graphdb.ConsistentPropertyReadsIT\n-            store.getRecordByCursor( reference, record, RecordLoad.FORCE, page );\n-            reference = record.getNextBlock();\n-            byte[] data = record.getData();\n-            if ( buffer.remaining() < data.length )\n-            {\n-                buffer = grow( buffer, data.length );\n-            }\n-            buffer.put( data, 0, data.length );\n-        }\n-        while ( reference != NO_ID );\n-        return buffer;\n-    }\n-\n-    private static ByteBuffer grow( ByteBuffer buffer, int required )\n+    public void writeInteger(long value) throws IllegalArgumentException\n     {\n-        buffer.flip();\n-        int capacity = buffer.capacity();\n-        do\n-        {\n-            capacity *= 2;\n-        }\n-        while ( capacity - buffer.limit() < required );\n-        return ByteBuffer.allocate( capacity ).order( ByteOrder.LITTLE_ENDIAN ).put( buffer );\n+      long keyAndType = keyId | (((long) PropertyType.LONG.intValue()) <<\n+          StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS);\n+      if (ShortArray.LONG.getRequiredBits(value) <= 35)\n+      {   // We only need one block for this value, special layout compared to, say, an integer\n+        block.setSingleBlock(keyAndType | (1L << 28) | (value << 29));\n+      } else\n+      {   // We need two blocks for this value\n+        block.setValueBlocks(new long[] {keyAndType, value});\n+      }\n     }\n \n-    private static class PropertyBlockValueWriter extends TemporalValueWriterAdapter<IllegalArgumentException>\n+    @Override\n+    public void writeFloatingPoint(float value) throws IllegalArgumentException\n     {\n-        private final PropertyBlock block;\n-        private final int keyId;\n-        private final DynamicRecordAllocator stringAllocator;\n-        private final boolean allowStorePointsAndTemporal;\n-\n-        PropertyBlockValueWriter( PropertyBlock block, int keyId, DynamicRecordAllocator stringAllocator, boolean allowStorePointsAndTemporal )\n-        {\n-            this.block = block;\n-            this.keyId = keyId;\n-            this.stringAllocator = stringAllocator;\n-            this.allowStorePointsAndTemporal = allowStorePointsAndTemporal;\n-        }\n-\n-        @Override\n-        public void writeNull() throws IllegalArgumentException\n-        {\n-            throw new IllegalArgumentException( \"Cannot write null values to the property store\" );\n-        }\n-\n-        @Override\n-        public void writeBoolean( boolean value ) throws IllegalArgumentException\n-        {\n-            setSingleBlockValue( block, keyId, PropertyType.BOOL, value ? 1L : 0L );\n-        }\n-\n-        @Override\n-        public void writeInteger( byte value ) throws IllegalArgumentException\n-        {\n-            setSingleBlockValue( block, keyId, PropertyType.BYTE, value );\n-        }\n-\n-        @Override\n-        public void writeInteger( short value ) throws IllegalArgumentException\n-        {\n-            setSingleBlockValue( block, keyId, PropertyType.SHORT, value );\n-        }\n-\n-        @Override\n-        public void writeInteger( int value ) throws IllegalArgumentException\n-        {\n-            setSingleBlockValue( block, keyId, PropertyType.INT, value );\n-        }\n-\n-        @Override\n-        public void writeInteger( long value ) throws IllegalArgumentException\n-        {\n-            long keyAndType = keyId | (((long) PropertyType.LONG.intValue()) <<\n-                                       StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS);\n-            if ( ShortArray.LONG.getRequiredBits( value ) <= 35 )\n-            {   // We only need one block for this value, special layout compared to, say, an integer\n-                block.setSingleBlock( keyAndType | (1L << 28) | (value << 29) );\n-            }\n-            else\n-            {   // We need two blocks for this value\n-                block.setValueBlocks( new long[]{keyAndType, value} );\n-            }\n-        }\n-\n-        @Override\n-        public void writeFloatingPoint( float value ) throws IllegalArgumentException\n-        {\n-            setSingleBlockValue( block, keyId, PropertyType.FLOAT, Float.floatToRawIntBits( value ) );\n-        }\n-\n-        @Override\n-        public void writeFloatingPoint( double value ) throws IllegalArgumentException\n-        {\n-            block.setValueBlocks( new long[]{\n-                    keyId | (((long) PropertyType.DOUBLE.intValue())\n-                             << StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS),\n-                    Double.doubleToRawLongBits( value )\n-            } );\n-        }\n-\n-        @Override\n-        public void writeString( String value ) throws IllegalArgumentException\n-        {\n-            // Try short string first, i.e. inlined in the property block\n-            if ( LongerShortString.encode( keyId, value, block, PropertyType.getPayloadSize() ) )\n-            {\n-                return;\n-            }\n-\n-            // Fall back to dynamic string store\n-            byte[] encodedString = encodeString( value );\n-            List<DynamicRecord> valueRecords = new ArrayList<>();\n-            allocateStringRecords( valueRecords, encodedString, stringAllocator );\n-            setSingleBlockValue( block, keyId, PropertyType.STRING, Iterables.first( valueRecords ).getId() );\n-            for ( DynamicRecord valueRecord : valueRecords )\n-            {\n-                valueRecord.setType( PropertyType.STRING.intValue() );\n-            }\n-            block.setValueRecords( valueRecords );\n-        }\n-\n-        @Override\n-        public void writeString( char value ) throws IllegalArgumentException\n-        {\n-            setSingleBlockValue( block, keyId, PropertyType.CHAR, value );\n-        }\n-\n-        @Override\n-        public void beginArray( int size, ArrayType arrayType ) throws IllegalArgumentException\n-        {\n-            throw new IllegalArgumentException( \"Cannot persist arrays to property store using ValueWriter\" );\n-        }\n-\n-        @Override\n-        public void endArray() throws IllegalArgumentException\n-        {\n-            throw new IllegalArgumentException( \"Cannot persist arrays to property store using ValueWriter\" );\n-        }\n-\n-        @Override\n-        public void writeByteArray( byte[] value ) throws IllegalArgumentException\n-        {\n-            throw new IllegalArgumentException( \"Cannot persist arrays to property store using ValueWriter\" );\n-        }\n-\n-        @Override\n-        public void writePoint( CoordinateReferenceSystem crs, double[] coordinate ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( GeometryType.encodePoint( keyId, crs, coordinate ) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.POINT_PROPERTIES );\n-            }\n-        }\n-\n-        @Override\n-        public void writeDuration( long months, long days, long seconds, int nanos ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( TemporalType.encodeDuration( keyId, months, days, seconds, nanos) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.TEMPORAL_PROPERTIES );\n-            }\n-        }\n-\n-        @Override\n-        public void writeDate( long epochDay ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( TemporalType.encodeDate( keyId, epochDay ) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.TEMPORAL_PROPERTIES );\n-            }\n-        }\n-\n-        @Override\n-        public void writeLocalTime( long nanoOfDay ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( TemporalType.encodeLocalTime( keyId, nanoOfDay ) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.TEMPORAL_PROPERTIES );\n-            }\n-        }\n-\n-        @Override\n-        public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( TemporalType.encodeTime( keyId, nanosOfDayUTC, offsetSeconds ) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.TEMPORAL_PROPERTIES );\n-            }\n-        }\n-\n-        @Override\n-        public void writeLocalDateTime( long epochSecond, int nano ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( TemporalType.encodeLocalDateTime( keyId, epochSecond, nano ) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.TEMPORAL_PROPERTIES );\n-            }\n-        }\n-\n-        @Override\n-        public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( TemporalType.encodeDateTime( keyId, epochSecondUTC, nano, offsetSeconds ) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.TEMPORAL_PROPERTIES );\n-            }\n-        }\n-\n-        @Override\n-        public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws IllegalArgumentException\n-        {\n-            if ( allowStorePointsAndTemporal )\n-            {\n-                block.setValueBlocks( TemporalType.encodeDateTime( keyId, epochSecondUTC, nano, zoneId ) );\n-            }\n-            else\n-            {\n-                throw new UnsupportedFormatCapabilityException( Capability.TEMPORAL_PROPERTIES );\n-            }\n-        }\n+      setSingleBlockValue(block, keyId, PropertyType.FLOAT, Float.floatToRawIntBits(value));\n     }\n \n-    public static void setSingleBlockValue( PropertyBlock block, int keyId, PropertyType type, long longValue )\n+    @Override\n+    public void writeFloatingPoint(double value) throws IllegalArgumentException\n     {\n-        block.setSingleBlock( singleBlockLongValue( keyId, type, longValue ) );\n+      block.setValueBlocks(new long[] {\n+          keyId | (((long) PropertyType.DOUBLE.intValue())\n+              << StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS),\n+          Double.doubleToRawLongBits(value)\n+      });\n     }\n \n-    public static long singleBlockLongValue( int keyId, PropertyType type, long longValue )\n-    {\n-        return keyId | (((long) type.intValue()) << StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS) |\n-               (longValue << 28);\n+    @Override\n+    public void writeString(String value) throws IllegalArgumentException\n+    {\n+      // Try short string first, i.e. inlined in the property block\n+      if (LongerShortString.encode(keyId, value, block, PropertyType.getPayloadSize()))\n+      {\n+        return;\n+      }\n+\n+      // Fall back to dynamic string store\n+      byte[] encodedString = encodeString(value);\n+      List<DynamicRecord> valueRecords = new ArrayList<>();\n+      allocateStringRecords(valueRecords, encodedString, stringAllocator);\n+      setSingleBlockValue(block, keyId, PropertyType.STRING, Iterables.first(valueRecords).getId());\n+      for (DynamicRecord valueRecord : valueRecords)\n+      {\n+        valueRecord.setType(PropertyType.STRING.intValue());\n+      }\n+      block.setValueRecords(valueRecords);\n     }\n \n-    public static byte[] encodeString( String string )\n+    @Override\n+    public void writeString(char value) throws IllegalArgumentException\n     {\n-        return UTF8.encode( string );\n+      setSingleBlockValue(block, keyId, PropertyType.CHAR, value);\n     }\n \n-    public static String decodeString( byte[] byteArray )\n+    @Override\n+    public void beginArray(int size, ArrayType arrayType) throws IllegalArgumentException\n     {\n-        return UTF8.decode( byteArray );\n+      throw new IllegalArgumentException(\"Cannot persist arrays to property store using ValueWriter\");\n     }\n \n-    public String getStringFor( PropertyBlock propertyBlock )\n+    @Override\n+    public void endArray() throws IllegalArgumentException\n     {\n-        ensureHeavy( propertyBlock );\n-        return getStringFor( propertyBlock.getValueRecords() );\n+      throw new IllegalArgumentException(\"Cannot persist arrays to property store using ValueWriter\");\n     }\n \n-    public String getStringFor( Collection<DynamicRecord> dynamicRecords )\n+    @Override\n+    public void writeByteArray(byte[] value) throws IllegalArgumentException\n     {\n-        Pair<byte[], byte[]> source = stringStore.readFullByteArray( dynamicRecords, PropertyType.STRING );\n-        // A string doesn't have a header in the data array\n-        return decodeString( source.other() );\n+      throw new IllegalArgumentException(\"Cannot persist arrays to property store using ValueWriter\");\n     }\n \n-    public Value getArrayFor( PropertyBlock propertyBlock )\n+    @Override\n+    public void writePoint(CoordinateReferenceSystem crs, double[] coordinate) throws IllegalArgumentException\n     {\n-        ensureHeavy( propertyBlock );\n-        return getArrayFor( propertyBlock.getValueRecords() );\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(GeometryType.encodePoint(keyId, crs, coordinate));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.POINT_PROPERTIES);\n+      }\n     }\n \n-    public Value getArrayFor( Iterable<DynamicRecord> records )\n+    @Override\n+    public void writeDuration(long months, long days, long seconds, int nanos) throws IllegalArgumentException\n     {\n-        return getRightArray( arrayStore.readFullByteArray( records, PropertyType.ARRAY ) );\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(TemporalType.encodeDuration(keyId, months, days, seconds, nanos));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.TEMPORAL_PROPERTIES);\n+      }\n     }\n \n     @Override\n-    public String toString()\n+    public void writeDate(long epochDay) throws IllegalArgumentException\n     {\n-        return super.toString() + \"[blocksPerRecord:\" + PropertyType.getPayloadSizeLongs() + \"]\";\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(TemporalType.encodeDate(keyId, epochDay));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.TEMPORAL_PROPERTIES);\n+      }\n     }\n \n-    public Collection<PropertyRecord> getPropertyRecordChain( long firstRecordId )\n+    @Override\n+    public void writeLocalTime(long nanoOfDay) throws IllegalArgumentException\n     {\n-        long nextProp = firstRecordId;\n-        List<PropertyRecord> toReturn = new LinkedList<>();\n-        while ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            PropertyRecord propRecord = new PropertyRecord( nextProp );\n-            getRecord( nextProp, propRecord, RecordLoad.NORMAL );\n-            toReturn.add( propRecord );\n-            nextProp = propRecord.getNextProp();\n-        }\n-        return toReturn;\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(TemporalType.encodeLocalTime(keyId, nanoOfDay));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.TEMPORAL_PROPERTIES);\n+      }\n     }\n \n-    public Collection<PropertyRecord> getPropertyRecordChain( long firstRecordId,\n-            PrimitiveLongObjectMap<PropertyRecord> propertyLookup )\n+    @Override\n+    public void writeTime(long nanosOfDayUTC, int offsetSeconds) throws IllegalArgumentException\n     {\n-        long nextProp = firstRecordId;\n-        List<PropertyRecord> toReturn = new ArrayList<>();\n-        while ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            PropertyRecord propRecord = propertyLookup.get( nextProp );\n-            if ( propRecord == null )\n-            {\n-                getRecord( nextProp, propRecord = newRecord(), RecordLoad.NORMAL );\n-            }\n-            toReturn.add( propRecord );\n-            nextProp = propRecord.getNextProp();\n-        }\n-        return toReturn;\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(TemporalType.encodeTime(keyId, nanosOfDayUTC, offsetSeconds));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.TEMPORAL_PROPERTIES);\n+      }\n     }\n \n     @Override\n-    public PropertyRecord newRecord()\n+    public void writeLocalDateTime(long epochSecond, int nano) throws IllegalArgumentException\n     {\n-        return new PropertyRecord( -1 );\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(TemporalType.encodeLocalDateTime(keyId, epochSecond, nano));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.TEMPORAL_PROPERTIES);\n+      }\n     }\n \n-    public boolean allowStorePointsAndTemporal()\n+    @Override\n+    public void writeDateTime(long epochSecondUTC, int nano, int offsetSeconds) throws IllegalArgumentException\n     {\n-        return allowStorePointsAndTemporal;\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(TemporalType.encodeDateTime(keyId, epochSecondUTC, nano, offsetSeconds));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.TEMPORAL_PROPERTIES);\n+      }\n     }\n \n-    /**\n-     * @return a calculator of property value sizes. The returned instance is designed to be used multiple times by a single thread only.\n-     */\n-    public ToIntFunction<Value[]> newValueEncodedSizeCalculator()\n-    {\n-        return new PropertyValueRecordSizeCalculator( this );\n-    }\n+    @Override\n+    public void writeDateTime(long epochSecondUTC, int nano, String zoneId) throws IllegalArgumentException\n+    {\n+      if (allowStorePointsAndTemporal)\n+      {\n+        block.setValueBlocks(TemporalType.encodeDateTime(keyId, epochSecondUTC, nano, zoneId));\n+      } else\n+      {\n+        throw new UnsupportedFormatCapabilityException(Capability.TEMPORAL_PROPERTIES);\n+      }\n+    }\n+  }\n+\n+  public static void setSingleBlockValue(PropertyBlock block, int keyId, PropertyType type, long longValue)\n+  {\n+    block.setSingleBlock(singleBlockLongValue(keyId, type, longValue));\n+  }\n+\n+  public static long singleBlockLongValue(int keyId, PropertyType type, long longValue)\n+  {\n+    return keyId | (((long) type.intValue()) << StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS) |\n+        (longValue << 28);\n+  }\n+\n+  public static byte[] encodeString(String string)\n+  {\n+    return UTF8.encode(string);\n+  }\n+\n+  public static String decodeString(byte[] byteArray)\n+  {\n+    return UTF8.decode(byteArray);\n+  }\n+\n+  public String getStringFor(PropertyBlock propertyBlock)\n+  {\n+    ensureHeavy(propertyBlock);\n+    return getStringFor(propertyBlock.getValueRecords());\n+  }\n+\n+  public String getStringFor(Collection<DynamicRecord> dynamicRecords)\n+  {\n+    Pair<byte[], byte[]> source = stringStore.readFullByteArray(dynamicRecords, PropertyType.STRING);\n+    // A string doesn't have a header in the data array\n+    return decodeString(source.other());\n+  }\n+\n+  public Value getArrayFor(PropertyBlock propertyBlock)\n+  {\n+    ensureHeavy(propertyBlock);\n+    return getArrayFor(propertyBlock.getValueRecords());\n+  }\n+\n+  public Value getArrayFor(Iterable<DynamicRecord> records)\n+  {\n+    return getRightArray(arrayStore.readFullByteArray(records, PropertyType.ARRAY));\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return super.toString() + \"[blocksPerRecord:\" + PropertyType.getPayloadSizeLongs() + \"]\";\n+  }\n+\n+  public Collection<PropertyRecord> getPropertyRecordChain(long firstRecordId)\n+  {\n+    long nextProp = firstRecordId;\n+    List<PropertyRecord> toReturn = new LinkedList<>();\n+    while (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n+    {\n+      PropertyRecord propRecord = new PropertyRecord(nextProp);\n+      getRecord(nextProp, propRecord, RecordLoad.NORMAL);\n+      toReturn.add(propRecord);\n+      nextProp = propRecord.getNextProp();\n+    }\n+    return toReturn;\n+  }\n+\n+  public Collection<PropertyRecord> getPropertyRecordChain(long firstRecordId,\n+                                                           PrimitiveLongObjectMap<PropertyRecord> propertyLookup)\n+  {\n+    long nextProp = firstRecordId;\n+    List<PropertyRecord> toReturn = new ArrayList<>();\n+    while (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n+    {\n+      PropertyRecord propRecord = propertyLookup.get(nextProp);\n+      if (propRecord == null)\n+      {\n+        getRecord(nextProp, propRecord = newRecord(), RecordLoad.NORMAL);\n+      }\n+      toReturn.add(propRecord);\n+      nextProp = propRecord.getNextProp();\n+    }\n+    return toReturn;\n+  }\n+\n+  @Override\n+  public PropertyRecord newRecord()\n+  {\n+    return new PropertyRecord(-1);\n+  }\n+\n+  public boolean allowStorePointsAndTemporal()\n+  {\n+    return allowStorePointsAndTemporal;\n+  }\n+\n+  /**\n+   * @return a calculator of property value sizes. The returned instance is designed to be used multiple times by a single thread only.\n+   */\n+  public ToIntFunction<Value[]> newValueEncodedSizeCalculator()\n+  {\n+    return new PropertyValueRecordSizeCalculator(this);\n+  }\n }\n",
            "diff_size": 921
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "174",
                    "column": "97",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "218",
                    "column": "38",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "459",
                    "column": "78",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "481",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "481",
                    "column": "94",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2596/PropertyStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2596/PropertyStore.java\nindex 9493c8873ad..1f024800751 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2596/PropertyStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2596/PropertyStore.java\n@@ -146,8 +146,7 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHeader> implements StorageStatement.Properties\n {\n     public static final String TYPE_DESCRIPTOR = \"PropertyStore\";\n-\n-    private final DynamicStringStore stringStore;\n+private final DynamicStringStore stringStore;\n     private final PropertyKeyTokenStore propertyKeyTokenStore;\n     private final DynamicArrayStore arrayStore;\n \n@@ -156,8 +155,7 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n     // capabilities) has ceased, the variable can be removed.\n     private final boolean allowStorePointsAndTemporal;\n \n-    public PropertyStore(\n-            File fileName,\n+    public PropertyStore( File fileName,\n             Config configuration,\n             IdGeneratorFactory idGeneratorFactory,\n             PageCache pageCache,\n@@ -170,17 +168,15 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n     {\n         super( fileName, configuration, IdType.PROPERTY, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR,\n                 recordFormats.property(), NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions );\n-        this.stringStore = stringPropertyStore;\n+this.stringStore = stringPropertyStore;\n         this.propertyKeyTokenStore = propertyKeyTokenStore;\n         this.arrayStore = arrayPropertyStore;\n-        allowStorePointsAndTemporal = recordFormats.hasCapability( Capability.POINT_PROPERTIES )\n-                && recordFormats.hasCapability( Capability.TEMPORAL_PROPERTIES );\n+        allowStorePointsAndTemporal = recordFormats.hasCapability( Capability.POINT_PROPERTIES )&& recordFormats.hasCapability( Capability.TEMPORAL_PROPERTIES );\n     }\n \n     @Override\n-    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, PropertyRecord record )\n-            throws FAILURE\n-    {\n+    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, PropertyRecord record ) throws FAILURE\n+{\n         processor.processProperty( this, record );\n     }\n \n@@ -219,14 +215,14 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n                  * record and dynamic records are never modified. Also, they are\n                  * assigned as a whole, so just checking the first should be enough.\n                  */\n-                if ( !block.isLight()\n-                        && block.getValueRecords().get( 0 ).isCreated() )\n+                if ( !block.isLight()&& block.getValueRecords().get( 0 ).isCreated() )\n                 {\n                     updateDynamicRecords( block.getValueRecords() );\n                 }\n             }\n         }\n-        updateDynamicRecords( record.getDeletedRecords() );\n+\n+updateDynamicRecords( record.getDeletedRecords() );\n     }\n \n     private void updateDynamicRecords( List<DynamicRecord> records )\n@@ -244,9 +240,8 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n             }\n             else\n             {\n-                throw new InvalidRecordException( \"Unknown dynamic record\"\n-                        + valueRecord );\n-            }\n+                throw new InvalidRecordException( \"Unknown dynamic record\" + valueRecord );\n+    }\n         }\n     }\n \n@@ -273,8 +268,7 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n             return;\n         }\n \n-        try ( Cursor<DynamicRecord> dynamicRecords = dynamicStore.newRecordCursor( dynamicStore.newRecord() )\n-                .acquire( block.getSingleValueLong(), NORMAL ) )\n+        try ( Cursor<DynamicRecord> dynamicRecords = dynamicStore.newRecordCursor( dynamicStore.newRecord() ).acquire( block.getSingleValueLong(), NORMAL ) )\n         {\n             while ( dynamicRecords.next() )\n             {\n@@ -288,10 +282,13 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n     {\n         switch ( type )\n         {\n-        case ARRAY: return arrayStore;\n-        case STRING: return stringStore;\n-        default: return null;\n-        }\n+        case ARRAY:\n+    return arrayStore;\n+    case STRING:\n+    return stringStore;\n+    default:\n+    return null;\n+    }\n     }\n \n     public Value getValue( PropertyBlock propertyBlock )\n@@ -380,7 +377,8 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n         {\n             buffer.clear();\n         }\n-        DynamicRecord record = store.newRecord();\n+\n+DynamicRecord record = store.newRecord();\n         do\n         {\n             //We need to load forcefully here since otherwise we can have inconsistent reads\n@@ -458,14 +456,15 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n         @Override\n         public void writeInteger( long value ) throws IllegalArgumentException\n         {\n-            long keyAndType = keyId | (((long) PropertyType.LONG.intValue()) <<\n-                                       StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS);\n-            if ( ShortArray.LONG.getRequiredBits( value ) <= 35 )\n-            {   // We only need one block for this value, special layout compared to, say, an integer\n-                block.setSingleBlock( keyAndType | (1L << 28) | (value << 29) );\n+            long keyAndType = keyId | (((long) PropertyType.LONG.intValue()) <<StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS);\n+if ( ShortArray.LONG.getRequiredBits( value ) <= 35 )\n+            {\n+    // We only need one block for this value, special layout compared to, say, an integer\n+                block.setSingleBlock( keyAndType | ( 1L << 28) | ( value << 29) );\n             }\n             else\n-            {   // We need two blocks for this value\n+            {\n+    // We need two blocks for this value\n                 block.setValueBlocks( new long[]{keyAndType, value} );\n             }\n         }\n@@ -479,11 +478,7 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n         @Override\n         public void writeFloatingPoint( double value ) throws IllegalArgumentException\n         {\n-            block.setValueBlocks( new long[]{\n-                    keyId | (((long) PropertyType.DOUBLE.intValue())\n-                             << StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS),\n-                    Double.doubleToRawLongBits( value )\n-            } );\n+            block.setValueBlocks( new long[]{keyId | (((long) PropertyType.DOUBLE.intValue())<< StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS), Double.doubleToRawLongBits( value )} );\n         }\n \n         @Override\n@@ -643,8 +638,7 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n \n     public static long singleBlockLongValue( int keyId, PropertyType type, long longValue )\n     {\n-        return keyId | (((long) type.intValue()) << StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS) |\n-               (longValue << 28);\n+        return keyId | (((long) type.intValue()) << StandardFormatSettings.PROPERTY_TOKEN_MAXIMUM_ID_BITS) | ( longValue << 28 );\n     }\n \n     public static byte[] encodeString( String string )\n@@ -698,11 +692,11 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n             toReturn.add( propRecord );\n             nextProp = propRecord.getNextProp();\n         }\n-        return toReturn;\n+\n+return toReturn;\n     }\n \n-    public Collection<PropertyRecord> getPropertyRecordChain( long firstRecordId,\n-            PrimitiveLongObjectMap<PropertyRecord> propertyLookup )\n+    public Collection<PropertyRecord> getPropertyRecordChain( long firstRecordId, PrimitiveLongObjectMap<PropertyRecord> propertyLookup )\n     {\n         long nextProp = firstRecordId;\n         List<PropertyRecord> toReturn = new ArrayList<>();\n@@ -716,7 +710,8 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n             toReturn.add( propRecord );\n             nextProp = propRecord.getNextProp();\n         }\n-        return toReturn;\n+\n+return toReturn;\n     }\n \n     @Override\n@@ -737,4 +732,4 @@ public class PropertyStore extends CommonAbstractStore<PropertyRecord,NoStoreHea\n     {\n         return new PropertyValueRecordSizeCalculator( this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}