{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "476",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docquery.entity;\n\nimport com.google.common.base.Optional;\nimport com.google.common.base.Preconditions;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/476/OutboundDocQueryOrchestrationContextBuilder.java\nindex ab204123dbd..f2f94204032 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/476/OutboundDocQueryOrchestrationContextBuilder.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.docquery.entity;\n-\n import com.google.common.base.Optional;\n import com.google.common.base.Preconditions;\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/476/OutboundDocQueryOrchestrationContextBuilder.java\nindex ab204123dbd..f9ea6377029 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/476/OutboundDocQueryOrchestrationContextBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.entity;\n \n import com.google.common.base.Optional;\n@@ -39,145 +40,144 @@ import oasis.names.tc.ebxml_regrep.xsd.query._3.AdhocQueryRequest;\n \n /**\n  * @author bhumphrey/paul\n- *\n  */\n public abstract class OutboundDocQueryOrchestrationContextBuilder implements OrchestrationContextBuilder {\n \n-    private NhinTargetSystemType target = null;\n-    private AdhocQueryRequest request = null;\n-    private AssertionType assertionType = null;\n-    private PolicyTransformer policyTransformer = null;\n-    private OutboundDelegate nhinDelegate = null;\n-    private Optional<OutboundResponseProcessor> nhinProcessor = Optional.absent();\n-    private String serviceName = \"\";\n-\n-    @Override\n-    public OrchestrationContext build() {\n-        return new OrchestrationContext(getStrategy(), getOrchestratable());\n-    }\n-\n-    /**\n-     * @return orchestratratable DocQuery message.\n-     */\n-    protected abstract OutboundDocQueryOrchestratable getOrchestratable();\n-\n-    /**\n-     * @return OutboundDocQueryStrategy based on specLevel\n-     */\n-    protected abstract OutboundDocQueryStrategy getStrategy();\n-\n-    /**\n-     * @param t NhinTarget community passed.\n-     */\n-    public void setTarget(NhinTargetSystemType t) {\n-        this.target = t;\n-    }\n-\n-    /**\n-     * @return Nhin target.\n-     */\n-    protected NhinTargetSystemType getTargetSystemType() {\n-        return this.target;\n-    }\n-\n-    /**\n-     * @param dqRequest AdhocQUery Request received.\n-     */\n-    public void setRequest(AdhocQueryRequest dqRequest) {\n-        this.request = dqRequest;\n-    }\n-\n-    /**\n-     * @return AdhocQuery request.\n-     */\n-    protected AdhocQueryRequest getRequest() {\n-        return this.request;\n-    }\n-\n-    /**\n-     * @return assertion.\n-     */\n-    protected AssertionType getAssertionType() {\n-        return assertionType;\n-    }\n-\n-    /**\n-     * @param assertionType Assertion received.\n-     */\n-    public void setAssertionType(AssertionType assertionType) {\n-        this.assertionType = assertionType;\n-    }\n-\n-    /**\n-     * @return Policytransform received.\n-     */\n-    protected PolicyTransformer getPolicyTransformer() {\n-        return policyTransformer;\n-    }\n-\n-    /**\n-     * @param policyTransformer policyTransformer received.\n-     */\n-    public void setPolicyTransformer(PolicyTransformer policyTransformer) {\n-        this.policyTransformer = policyTransformer;\n-    }\n-\n-    /**\n-     * @return nhindelegate.\n-     */\n-    protected OutboundDelegate getNhinDelegate() {\n-        return nhinDelegate;\n-    }\n-\n-    /**\n-     * @param nhinDelegate nhinDelegate received.\n-     */\n-    public void setNhinDelegate(OutboundDelegate nhinDelegate) {\n-        this.nhinDelegate = nhinDelegate;\n-    }\n-\n-    /**\n-     * @return outboundDocQueryProcessor.\n-     */\n-    protected Optional<OutboundResponseProcessor> getAggregator() {\n-        return nhinProcessor;\n-    }\n-\n-    /**\n-     * @param processor DocQueryProcessor.\n-     */\n-    public void setAggregator(Optional<OutboundResponseProcessor> processor) {\n-        Preconditions.checkNotNull(processor);\n-        nhinProcessor = processor;\n-    }\n-\n-    /**\n-     * @return outboundDocQueryProcessor.\n-     */\n-    protected Optional<OutboundResponseProcessor> getProcessor() {\n-        return nhinProcessor;\n-    }\n-\n-    /**\n-     * @param processor outboundReponseProcessor.\n-     */\n-    public void setProcessor(Optional<OutboundResponseProcessor> processor) {\n-        Preconditions.checkNotNull(processor);\n-        nhinProcessor = processor;\n-    }\n-\n-    /**\n-     * @return ServiceName DocQueryService.\n-     */\n-    protected String getServiceName() {\n-        return serviceName;\n-    }\n-\n-    /**\n-     * @param name ServiceName DocQuery.\n-     */\n-    public void setServiceName(String name) {\n-        this.serviceName = name;\n-    }\n+  private NhinTargetSystemType target = null;\n+  private AdhocQueryRequest request = null;\n+  private AssertionType assertionType = null;\n+  private PolicyTransformer policyTransformer = null;\n+  private OutboundDelegate nhinDelegate = null;\n+  private Optional<OutboundResponseProcessor> nhinProcessor = Optional.absent();\n+  private String serviceName = \"\";\n+\n+  @Override\n+  public OrchestrationContext build() {\n+    return new OrchestrationContext(getStrategy(), getOrchestratable());\n+  }\n+\n+  /**\n+   * @return orchestratratable DocQuery message.\n+   */\n+  protected abstract OutboundDocQueryOrchestratable getOrchestratable();\n+\n+  /**\n+   * @return OutboundDocQueryStrategy based on specLevel\n+   */\n+  protected abstract OutboundDocQueryStrategy getStrategy();\n+\n+  /**\n+   * @param t NhinTarget community passed.\n+   */\n+  public void setTarget(NhinTargetSystemType t) {\n+    this.target = t;\n+  }\n+\n+  /**\n+   * @return Nhin target.\n+   */\n+  protected NhinTargetSystemType getTargetSystemType() {\n+    return this.target;\n+  }\n+\n+  /**\n+   * @param dqRequest AdhocQUery Request received.\n+   */\n+  public void setRequest(AdhocQueryRequest dqRequest) {\n+    this.request = dqRequest;\n+  }\n+\n+  /**\n+   * @return AdhocQuery request.\n+   */\n+  protected AdhocQueryRequest getRequest() {\n+    return this.request;\n+  }\n+\n+  /**\n+   * @return assertion.\n+   */\n+  protected AssertionType getAssertionType() {\n+    return assertionType;\n+  }\n+\n+  /**\n+   * @param assertionType Assertion received.\n+   */\n+  public void setAssertionType(AssertionType assertionType) {\n+    this.assertionType = assertionType;\n+  }\n+\n+  /**\n+   * @return Policytransform received.\n+   */\n+  protected PolicyTransformer getPolicyTransformer() {\n+    return policyTransformer;\n+  }\n+\n+  /**\n+   * @param policyTransformer policyTransformer received.\n+   */\n+  public void setPolicyTransformer(PolicyTransformer policyTransformer) {\n+    this.policyTransformer = policyTransformer;\n+  }\n+\n+  /**\n+   * @return nhindelegate.\n+   */\n+  protected OutboundDelegate getNhinDelegate() {\n+    return nhinDelegate;\n+  }\n+\n+  /**\n+   * @param nhinDelegate nhinDelegate received.\n+   */\n+  public void setNhinDelegate(OutboundDelegate nhinDelegate) {\n+    this.nhinDelegate = nhinDelegate;\n+  }\n+\n+  /**\n+   * @return outboundDocQueryProcessor.\n+   */\n+  protected Optional<OutboundResponseProcessor> getAggregator() {\n+    return nhinProcessor;\n+  }\n+\n+  /**\n+   * @param processor DocQueryProcessor.\n+   */\n+  public void setAggregator(Optional<OutboundResponseProcessor> processor) {\n+    Preconditions.checkNotNull(processor);\n+    nhinProcessor = processor;\n+  }\n+\n+  /**\n+   * @return outboundDocQueryProcessor.\n+   */\n+  protected Optional<OutboundResponseProcessor> getProcessor() {\n+    return nhinProcessor;\n+  }\n+\n+  /**\n+   * @param processor outboundReponseProcessor.\n+   */\n+  public void setProcessor(Optional<OutboundResponseProcessor> processor) {\n+    Preconditions.checkNotNull(processor);\n+    nhinProcessor = processor;\n+  }\n+\n+  /**\n+   * @return ServiceName DocQueryService.\n+   */\n+  protected String getServiceName() {\n+    return serviceName;\n+  }\n+\n+  /**\n+   * @param name ServiceName DocQuery.\n+   */\n+  public void setServiceName(String name) {\n+    this.serviceName = name;\n+  }\n \n }\n",
            "diff_size": 138
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/476/OutboundDocQueryOrchestrationContextBuilder.java\nindex ab204123dbd..fcc8c4cde00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/476/OutboundDocQueryOrchestrationContextBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.entity;\n \n import com.google.common.base.Optional;\n@@ -180,4 +181,4 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n         this.serviceName = name;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/476/OutboundDocQueryOrchestrationContextBuilder.java\nindex ab204123dbd..4b5aba2eda8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/476/OutboundDocQueryOrchestrationContextBuilder.java\n@@ -41,6 +41,8 @@ import oasis.names.tc.ebxml_regrep.xsd.query._3.AdhocQueryRequest;\n  * @author bhumphrey/paul\n  *\n  */\n+\n+\n public abstract class OutboundDocQueryOrchestrationContextBuilder implements OrchestrationContextBuilder {\n \n     private NhinTargetSystemType target = null;\n@@ -51,6 +53,7 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     private Optional<OutboundResponseProcessor> nhinProcessor = Optional.absent();\n     private String serviceName = \"\";\n \n+\n     @Override\n     public OrchestrationContext build() {\n         return new OrchestrationContext(getStrategy(), getOrchestratable());\n@@ -59,16 +62,22 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return orchestratratable DocQuery message.\n      */\n+\n+\n     protected abstract OutboundDocQueryOrchestratable getOrchestratable();\n \n     /**\n      * @return OutboundDocQueryStrategy based on specLevel\n      */\n+\n+\n     protected abstract OutboundDocQueryStrategy getStrategy();\n \n     /**\n      * @param t NhinTarget community passed.\n      */\n+\n+\n     public void setTarget(NhinTargetSystemType t) {\n         this.target = t;\n     }\n@@ -76,6 +85,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return Nhin target.\n      */\n+\n+\n     protected NhinTargetSystemType getTargetSystemType() {\n         return this.target;\n     }\n@@ -83,6 +94,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @param dqRequest AdhocQUery Request received.\n      */\n+\n+\n     public void setRequest(AdhocQueryRequest dqRequest) {\n         this.request = dqRequest;\n     }\n@@ -90,6 +103,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return AdhocQuery request.\n      */\n+\n+\n     protected AdhocQueryRequest getRequest() {\n         return this.request;\n     }\n@@ -97,6 +112,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return assertion.\n      */\n+\n+\n     protected AssertionType getAssertionType() {\n         return assertionType;\n     }\n@@ -104,6 +121,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @param assertionType Assertion received.\n      */\n+\n+\n     public void setAssertionType(AssertionType assertionType) {\n         this.assertionType = assertionType;\n     }\n@@ -111,6 +130,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return Policytransform received.\n      */\n+\n+\n     protected PolicyTransformer getPolicyTransformer() {\n         return policyTransformer;\n     }\n@@ -118,6 +139,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @param policyTransformer policyTransformer received.\n      */\n+\n+\n     public void setPolicyTransformer(PolicyTransformer policyTransformer) {\n         this.policyTransformer = policyTransformer;\n     }\n@@ -125,6 +148,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return nhindelegate.\n      */\n+\n+\n     protected OutboundDelegate getNhinDelegate() {\n         return nhinDelegate;\n     }\n@@ -132,6 +157,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @param nhinDelegate nhinDelegate received.\n      */\n+\n+\n     public void setNhinDelegate(OutboundDelegate nhinDelegate) {\n         this.nhinDelegate = nhinDelegate;\n     }\n@@ -139,6 +166,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return outboundDocQueryProcessor.\n      */\n+\n+\n     protected Optional<OutboundResponseProcessor> getAggregator() {\n         return nhinProcessor;\n     }\n@@ -146,6 +175,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @param processor DocQueryProcessor.\n      */\n+\n+\n     public void setAggregator(Optional<OutboundResponseProcessor> processor) {\n         Preconditions.checkNotNull(processor);\n         nhinProcessor = processor;\n@@ -154,6 +185,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return outboundDocQueryProcessor.\n      */\n+\n+\n     protected Optional<OutboundResponseProcessor> getProcessor() {\n         return nhinProcessor;\n     }\n@@ -161,6 +194,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @param processor outboundReponseProcessor.\n      */\n+\n+\n     public void setProcessor(Optional<OutboundResponseProcessor> processor) {\n         Preconditions.checkNotNull(processor);\n         nhinProcessor = processor;\n@@ -169,6 +204,8 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @return ServiceName DocQueryService.\n      */\n+\n+\n     protected String getServiceName() {\n         return serviceName;\n     }\n@@ -176,8 +213,10 @@ public abstract class OutboundDocQueryOrchestrationContextBuilder implements Orc\n     /**\n      * @param name ServiceName DocQuery.\n      */\n+\n+\n     public void setServiceName(String name) {\n         this.serviceName = name;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/476/OutboundDocQueryOrchestrationContextBuilder.java\nindex ab204123dbd..f2f94204032 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/476/OutboundDocQueryOrchestrationContextBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/476/OutboundDocQueryOrchestrationContextBuilder.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.docquery.entity;\n-\n import com.google.common.base.Optional;\n import com.google.common.base.Preconditions;\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}