{
    "project_name": "opencb-opencga",
    "error_id": "258",
    "information": {
        "errors": [
            {
                "line": "117",
                "column": "16",
                "severity": "error",
                "message": "'catch' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        try {\n            storageManager.exportData(tpedFile.getAbsolutePath(), TPED, null, query, QueryOptions.empty(), token);\n        } catch(CatalogException | IOException | StorageEngineException e) {\n            throw new ToolException(e);\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/258/GeneticChecksUtils.java\nindex 7c11fb453f1..9c377c8fdfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/258/GeneticChecksUtils.java\n@@ -114,7 +114,7 @@ public class GeneticChecksUtils {\n                                    String token) throws ToolException {\n         try {\n             storageManager.exportData(tpedFile.getAbsolutePath(), TPED, null, query, QueryOptions.empty(), token);\n-        } catch(CatalogException | IOException | StorageEngineException e) {\n+        } catch (CatalogException | IOException | StorageEngineException e) {\n             throw new ToolException(e);\n         }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/258/GeneticChecksUtils.java\nindex 7c11fb453f1..30d2fd2cc87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/258/GeneticChecksUtils.java\n@@ -30,257 +30,257 @@ import static org.opencb.opencga.storage.core.variant.io.VariantWriterFactory.Va\n \n public class GeneticChecksUtils {\n \n-    public static void selectMarkers(String basename, String study, List<String> samples, String maf, Path outDir,\n-                                     VariantStorageManager storageManager, String token) throws ToolException {\n-        AbstractMap.SimpleEntry<String, String> outputBinding = new AbstractMap.SimpleEntry<>(outDir.toAbsolutePath().toString(),\n-                \"/data/output\");\n-\n-        // MAF parameter:\n-        //    - For annotated population studies, e.g.: 1kG_phase3:CEU>0.3\n-        //    - For cohort, e.g.: cohort:ALL>0.3\n-\n-        // Apply filter: biallelic variants\n-        Query query = new Query()\n-                .append(VariantQueryParam.STUDY.key(), study)\n-                .append(VariantQueryParam.TYPE.key(), \"SNV\");\n-\n-        String gt = samples.stream().map(s -> s + \":0/0,0/1,1/1\").collect(Collectors.joining(\";\"));\n-        query.put(VariantQueryParam.GENOTYPE.key(), gt);\n-        //.append(VariantQueryParam.FILTER.key(), \"PASS\")\n-\n-        // Export variants in format .tped and .tfam to run PLINK (only autosomal chromosomes)\n-        File tpedFile = outDir.resolve(basename + \".tped\").toFile();\n-        File tfamFile = outDir.resolve(basename + \".tfam\").toFile();\n-        query.put(VariantQueryParam.REGION.key(), Arrays.asList(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\".split(\",\")));\n-        if (maf.startsWith(\"cohort:\")) {\n-            query.put(VariantQueryParam.STATS_MAF.key(), maf.substring(7));\n-        } else {\n-            query.put(VariantQueryParam.ANNOT_POPULATION_MINOR_ALLELE_FREQUENCY.key(), maf);\n-        }\n-        System.out.println(\">>>>>> QUERY:\\n\" + query.toJson());\n-        exportData(tpedFile, tfamFile, query, storageManager, token);\n-        if (tpedFile.exists() && tpedFile.length() > 0) {\n-            pruneVariants(basename, outputBinding);\n-        }\n-\n-        if (!tpedFile.exists() || tpedFile.length() == 0) {\n-            throw new ToolException(\"No variants found when exporting data to TPED/TFAM format\");\n-        }\n+  public static void selectMarkers(String basename, String study, List<String> samples, String maf, Path outDir,\n+                                   VariantStorageManager storageManager, String token) throws ToolException {\n+    AbstractMap.SimpleEntry<String, String> outputBinding = new AbstractMap.SimpleEntry<>(outDir.toAbsolutePath().toString(),\n+        \"/data/output\");\n+\n+    // MAF parameter:\n+    //    - For annotated population studies, e.g.: 1kG_phase3:CEU>0.3\n+    //    - For cohort, e.g.: cohort:ALL>0.3\n+\n+    // Apply filter: biallelic variants\n+    Query query = new Query()\n+        .append(VariantQueryParam.STUDY.key(), study)\n+        .append(VariantQueryParam.TYPE.key(), \"SNV\");\n+\n+    String gt = samples.stream().map(s -> s + \":0/0,0/1,1/1\").collect(Collectors.joining(\";\"));\n+    query.put(VariantQueryParam.GENOTYPE.key(), gt);\n+    //.append(VariantQueryParam.FILTER.key(), \"PASS\")\n+\n+    // Export variants in format .tped and .tfam to run PLINK (only autosomal chromosomes)\n+    File tpedFile = outDir.resolve(basename + \".tped\").toFile();\n+    File tfamFile = outDir.resolve(basename + \".tfam\").toFile();\n+    query.put(VariantQueryParam.REGION.key(), Arrays.asList(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\".split(\",\")));\n+    if (maf.startsWith(\"cohort:\")) {\n+      query.put(VariantQueryParam.STATS_MAF.key(), maf.substring(7));\n+    } else {\n+      query.put(VariantQueryParam.ANNOT_POPULATION_MINOR_ALLELE_FREQUENCY.key(), maf);\n+    }\n+    System.out.println(\">>>>>> QUERY:\\n\" + query.toJson());\n+    exportData(tpedFile, tfamFile, query, storageManager, token);\n+    if (tpedFile.exists() && tpedFile.length() > 0) {\n+      pruneVariants(basename, outputBinding);\n     }\n \n-    public static List<String> getSamples(String study, String familyId, CatalogManager catalogManager, String token)\n-            throws ToolException {\n-        Set<String> sampleSet = new HashSet<>();\n+    if (!tpedFile.exists() || tpedFile.length() == 0) {\n+      throw new ToolException(\"No variants found when exporting data to TPED/TFAM format\");\n+    }\n+  }\n \n-        // Sanity check\n-        if (StringUtils.isEmpty(familyId)) {\n-            throw new ToolException(\"Missing family ID\");\n-        }\n+  public static List<String> getSamples(String study, String familyId, CatalogManager catalogManager, String token)\n+      throws ToolException {\n+    Set<String> sampleSet = new HashSet<>();\n \n-        try {\n-            OpenCGAResult<Family> familyResult = catalogManager.getFamilyManager().get(study, familyId, QueryOptions.empty(), token);\n-\n-            // Check family result\n-            if (familyResult.getResults().size() == 0) {\n-                throw new ToolException(\"Family not found for family ID '\" + familyId + \"'\");\n-            }\n-            if (familyResult.getResults().size() > 1) {\n-                throw new ToolException(\"More than one family result for family ID '\" + familyId + \"'\");\n-            }\n-\n-            // Get list of individual IDs\n-            List<String> individualIds = familyResult.first().getMembers().stream().map(m -> m.getId()).collect(Collectors.toList());\n-\n-            // Populate individual (and sample IDs) from individual IDs\n-            Query query = new Query(IndividualDBAdaptor.QueryParams.ID.key(), individualIds);\n-            QueryOptions queryOptions = new QueryOptions(QueryOptions.INCLUDE, \"samples.id\");\n-\n-            OpenCGAResult<Individual> individualResult = catalogManager.getIndividualManager().search(study, query, queryOptions, token);\n-            for (Individual individual : individualResult.getResults()) {\n-                sampleSet.addAll(individual.getSamples().stream().map(s -> s.getId()).collect(Collectors.toList()));\n-            }\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n+    // Sanity check\n+    if (StringUtils.isEmpty(familyId)) {\n+      throw new ToolException(\"Missing family ID\");\n+    }\n \n-        return sampleSet.stream().collect(Collectors.toList());\n+    try {\n+      OpenCGAResult<Family> familyResult = catalogManager.getFamilyManager().get(study, familyId, QueryOptions.empty(), token);\n+\n+      // Check family result\n+      if (familyResult.getResults().size() == 0) {\n+        throw new ToolException(\"Family not found for family ID '\" + familyId + \"'\");\n+      }\n+      if (familyResult.getResults().size() > 1) {\n+        throw new ToolException(\"More than one family result for family ID '\" + familyId + \"'\");\n+      }\n+\n+      // Get list of individual IDs\n+      List<String> individualIds = familyResult.first().getMembers().stream().map(m -> m.getId()).collect(Collectors.toList());\n+\n+      // Populate individual (and sample IDs) from individual IDs\n+      Query query = new Query(IndividualDBAdaptor.QueryParams.ID.key(), individualIds);\n+      QueryOptions queryOptions = new QueryOptions(QueryOptions.INCLUDE, \"samples.id\");\n+\n+      OpenCGAResult<Individual> individualResult = catalogManager.getIndividualManager().search(study, query, queryOptions, token);\n+      for (Individual individual : individualResult.getResults()) {\n+        sampleSet.addAll(individual.getSamples().stream().map(s -> s.getId()).collect(Collectors.toList()));\n+      }\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n     }\n \n-    //-------------------------------------------------------------------------\n-    // P R I V A T E     M E T H O D S\n-    //-------------------------------------------------------------------------\n+    return sampleSet.stream().collect(Collectors.toList());\n+  }\n \n-    private static void exportData(File tpedFile, File tfamFile, Query query, VariantStorageManager storageManager,\n-                                   String token) throws ToolException {\n-        try {\n-            storageManager.exportData(tpedFile.getAbsolutePath(), TPED, null, query, QueryOptions.empty(), token);\n-        } catch(CatalogException | IOException | StorageEngineException e) {\n-            throw new ToolException(e);\n-        }\n+  //-------------------------------------------------------------------------\n+  // P R I V A T E     M E T H O D S\n+  //-------------------------------------------------------------------------\n \n-        if (!tpedFile.exists() || !tfamFile.exists()) {\n-            throw new ToolException(\"Something wrong exporting data to TPED/TFAM format\");\n-        }\n+  private static void exportData(File tpedFile, File tfamFile, Query query, VariantStorageManager storageManager,\n+                                 String token) throws ToolException {\n+    try {\n+      storageManager.exportData(tpedFile.getAbsolutePath(), TPED, null, query, QueryOptions.empty(), token);\n+    } catch (CatalogException | IOException | StorageEngineException e) {\n+      throw new ToolException(e);\n     }\n \n-    private static void pruneVariants(String basename, AbstractMap.SimpleEntry<String, String> outputBinding) throws ToolException {\n-        // Variant pruning using PLINK in docker\n-        String plinkParams = \"plink --tfile /data/output/\" + basename + \" --indep 50 5 2 --out /data/output/\" + basename;\n-        try {\n-            DockerUtils.run(PlinkWrapperAnalysis.PLINK_DOCKER_IMAGE, null, outputBinding, plinkParams, null);\n-        } catch (IOException e) {\n-            throw new ToolException(e);\n-        }\n+    if (!tpedFile.exists() || !tfamFile.exists()) {\n+      throw new ToolException(\"Something wrong exporting data to TPED/TFAM format\");\n+    }\n+  }\n+\n+  private static void pruneVariants(String basename, AbstractMap.SimpleEntry<String, String> outputBinding) throws ToolException {\n+    // Variant pruning using PLINK in docker\n+    String plinkParams = \"plink --tfile /data/output/\" + basename + \" --indep 50 5 2 --out /data/output/\" + basename;\n+    try {\n+      DockerUtils.run(PlinkWrapperAnalysis.PLINK_DOCKER_IMAGE, null, outputBinding, plinkParams, null);\n+    } catch (IOException e) {\n+      throw new ToolException(e);\n+    }\n+  }\n+\n+  public static RelatednessReport buildRelatednessReport(File file) throws ToolException {\n+    RelatednessReport relatednessReport = new RelatednessReport();\n+\n+    // Set method\n+    relatednessReport.setMethod(\"IBD\");\n+\n+    BufferedReader reader;\n+    try {\n+      reader = new BufferedReader(new FileReader(file));\n+      // First line is the header\n+      // FID1         IID1 FID2         IID2 RT    EZ      Z0      Z1      Z2  PI_HAT PHE       DST     PPC   RATIO\n+      String line = reader.readLine();\n+\n+      while ((line = reader.readLine()) != null) {\n+        String[] splits = line.trim().split(\"\\\\s+\");\n+\n+        // Create relatedness score\n+        RelatednessReport.RelatednessScore score = new RelatednessReport.RelatednessScore();\n+        score.setSampleId1(splits[1]);\n+        score.setSampleId2(splits[3]);\n+        score.setZ0(Double.parseDouble(splits[6]));\n+        score.setZ1(Double.parseDouble(splits[7]));\n+        score.setZ2(Double.parseDouble(splits[8]));\n+        score.setPiHat(Double.parseDouble(splits[9]));\n+        score.setReportedRelation(splits[4]);\n+\n+        // Add relatedness score to the report\n+        relatednessReport.getScores().add(score);\n+      }\n+      reader.close();\n+    } catch (IOException e) {\n+      throw new ToolException(e);\n     }\n \n-    public static RelatednessReport buildRelatednessReport(File file) throws ToolException {\n-        RelatednessReport relatednessReport = new RelatednessReport();\n-\n-        // Set method\n-        relatednessReport.setMethod(\"IBD\");\n-\n-        BufferedReader reader;\n-        try {\n-            reader = new BufferedReader(new FileReader(file));\n-            // First line is the header\n-            // FID1         IID1 FID2         IID2 RT    EZ      Z0      Z1      Z2  PI_HAT PHE       DST     PPC   RATIO\n-            String line = reader.readLine();\n-\n-            while ((line = reader.readLine()) != null) {\n-                String[] splits = line.trim().split(\"\\\\s+\");\n-\n-                // Create relatedness score\n-                RelatednessReport.RelatednessScore score = new RelatednessReport.RelatednessScore();\n-                score.setSampleId1(splits[1]);\n-                score.setSampleId2(splits[3]);\n-                score.setZ0(Double.parseDouble(splits[6]));\n-                score.setZ1(Double.parseDouble(splits[7]));\n-                score.setZ2(Double.parseDouble(splits[8]));\n-                score.setPiHat(Double.parseDouble(splits[9]));\n-                score.setReportedRelation(splits[4]);\n-\n-                // Add relatedness score to the report\n-                relatednessReport.getScores().add(score);\n-            }\n-            reader.close();\n-        } catch (IOException e) {\n-            throw new ToolException(e);\n-        }\n+    return relatednessReport;\n+  }\n \n-        return relatednessReport;\n+  public static MendelianErrorsReport buildMendelianErrorsReport(String family, Path outDir) throws ToolException {\n+\n+    // Number of mendelian errors\n+    int numME;\n+\n+    BufferedReader reader;\n+\n+    // Family mendel file management: .fmendel file\n+    File file = outDir.resolve(family + \".fmendel\").toFile();\n+    if (!file.exists()) {\n+      throw new ToolException(\"Missing family mendel file for family '\" + family + \"'\");\n     }\n \n-    public static MendelianErrorsReport buildMendelianErrorsReport(String family, Path outDir) throws ToolException {\n+    try {\n+      reader = new BufferedReader(new FileReader(file));\n+      // First line is the header\n+      // FID           PAT           MAT   CHLD    N\n+      String line = reader.readLine();\n+\n+      line = reader.readLine();\n+      if (line == null) {\n+        throw new ToolException(\"Error reading family mendel file for family '\" + family + \"'\");\n+      }\n+      numME = Integer.parseInt(line.split(\"\\t\")[4]);\n+    } catch (IOException e) {\n+      throw new ToolException(e);\n+    }\n \n-        // Number of mendelian errors\n-        int numME;\n+    // Mendel file management: .mendel file\n+    file = outDir.resolve(family + \".mendel\").toFile();\n+    if (!file.exists()) {\n+      throw new ToolException(\"Missing mendel file for family '\" + family + \"'\");\n+    }\n \n-        BufferedReader reader;\n+    // Map <sample, Map <chromosome, Map <code, in>>>\n+    Map<String, Map<String, Map<String, Integer>>> counter = new HashMap<>();\n \n-        // Family mendel file management: .fmendel file\n-        File file = outDir.resolve(family + \".fmendel\").toFile();\n-        if (!file.exists()) {\n-            throw new ToolException(\"Missing family mendel file for family '\" + family + \"'\");\n-        }\n+    try {\n+      reader = new BufferedReader(new FileReader(file));\n+      // First line is the header\n+      // FID   KID    CHR    SNP      CODE      ERROR\n+      String line = reader.readLine();\n \n-        try {\n-            reader = new BufferedReader(new FileReader(file));\n-            // First line is the header\n-            // FID           PAT           MAT   CHLD    N\n-            String line = reader.readLine();\n-\n-            line = reader.readLine();\n-            if (line == null) {\n-                throw new ToolException(\"Error reading family mendel file for family '\" + family + \"'\");\n-            }\n-            numME = Integer.parseInt(line.split(\"\\t\")[4]);\n-        } catch (IOException e) {\n-            throw new ToolException(e);\n-        }\n+      while ((line = reader.readLine()) != null) {\n+        String[] splits = line.split(\"\\t\");\n \n-        // Mendel file management: .mendel file\n-        file = outDir.resolve(family + \".mendel\").toFile();\n-        if (!file.exists()) {\n-            throw new ToolException(\"Missing mendel file for family '\" + family + \"'\");\n-        }\n+        String sample = splits[1];\n+        String chrom = splits[2];\n+        String errorCode = splits[4];\n \n-        // Map <sample, Map <chromosome, Map <code, in>>>\n-        Map<String, Map<String, Map<String, Integer>>> counter = new HashMap<>();\n-\n-        try {\n-            reader = new BufferedReader(new FileReader(file));\n-            // First line is the header\n-            // FID   KID    CHR    SNP      CODE      ERROR\n-            String line = reader.readLine();\n-\n-            while ((line = reader.readLine()) != null) {\n-                String[] splits = line.split(\"\\t\");\n-\n-                String sample = splits[1];\n-                String chrom = splits[2];\n-                String errorCode = splits[4];\n-\n-                // Check sample\n-                if (!counter.containsKey(sample)) {\n-                    counter.put(sample, new HashMap<>());\n-                }\n-                // Check chrom\n-                if (!counter.get(sample).containsKey(chrom)) {\n-                    counter.get(sample).put(chrom, new HashMap<>());\n-                }\n-                // Check error code\n-                if (!counter.get(sample).get(chrom).containsKey(errorCode)) {\n-                    counter.get(sample).get(chrom).put(errorCode, 0);\n-                }\n-\n-                // Increment error counter\n-                counter.get(sample).get(chrom).put(errorCode, 1 + counter.get(sample).get(chrom).get(errorCode));\n-            }\n-        } catch (IOException e) {\n-            throw new ToolException(e);\n+        // Check sample\n+        if (!counter.containsKey(sample)) {\n+          counter.put(sample, new HashMap<>());\n+        }\n+        // Check chrom\n+        if (!counter.get(sample).containsKey(chrom)) {\n+          counter.get(sample).put(chrom, new HashMap<>());\n+        }\n+        // Check error code\n+        if (!counter.get(sample).get(chrom).containsKey(errorCode)) {\n+          counter.get(sample).get(chrom).put(errorCode, 0);\n         }\n \n+        // Increment error counter\n+        counter.get(sample).get(chrom).put(errorCode, 1 + counter.get(sample).get(chrom).get(errorCode));\n+      }\n+    } catch (IOException e) {\n+      throw new ToolException(e);\n+    }\n \n-        // Update sample aggregation list from the previous maps\n-        List<SampleAggregation> sampleAggregationList = new ArrayList<>();\n-        int numVariants = getNumLines(outDir.resolve(family + \".lmendel\").toFile());\n \n-        for (String sample : counter.keySet()) {\n-            int sampleErrors = 0;\n-            SampleAggregation sampleAggregation = new SampleAggregation();\n-            sampleAggregation.setSample(sample);\n+    // Update sample aggregation list from the previous maps\n+    List<SampleAggregation> sampleAggregationList = new ArrayList<>();\n+    int numVariants = getNumLines(outDir.resolve(family + \".lmendel\").toFile());\n \n-            for (String chrom : counter.get(sample).keySet()) {\n+    for (String sample : counter.keySet()) {\n+      int sampleErrors = 0;\n+      SampleAggregation sampleAggregation = new SampleAggregation();\n+      sampleAggregation.setSample(sample);\n \n-                // Compute num. errors per chromosome\n-                int chromErrors = counter.get(sample).get(chrom).values().stream().reduce(0, Integer::sum);\n+      for (String chrom : counter.get(sample).keySet()) {\n \n-                ChromosomeAggregation chromAggregation = new ChromosomeAggregation(chrom, chromErrors, counter.get(sample).get(chrom));\n+        // Compute num. errors per chromosome\n+        int chromErrors = counter.get(sample).get(chrom).values().stream().reduce(0, Integer::sum);\n \n-                // Unpdate num. errors and sample aggregation\n-                sampleErrors += chromErrors;\n-                sampleAggregation.getChromAggregation().add(chromAggregation);\n-            }\n+        ChromosomeAggregation chromAggregation = new ChromosomeAggregation(chrom, chromErrors, counter.get(sample).get(chrom));\n \n-            // Set num. errors and ratio for that sample\n-            sampleAggregation.setNumErrors(sampleErrors);\n-            sampleAggregation.setRatio(1.0d * sampleErrors / numVariants);\n+        // Unpdate num. errors and sample aggregation\n+        sampleErrors += chromErrors;\n+        sampleAggregation.getChromAggregation().add(chromAggregation);\n+      }\n \n-            // Add sample aggregation to the mendelian error report\n-            sampleAggregationList.add(sampleAggregation);\n-        }\n+      // Set num. errors and ratio for that sample\n+      sampleAggregation.setNumErrors(sampleErrors);\n+      sampleAggregation.setRatio(1.0d * sampleErrors / numVariants);\n \n-        return new MendelianErrorsReport(numME, sampleAggregationList);\n+      // Add sample aggregation to the mendelian error report\n+      sampleAggregationList.add(sampleAggregation);\n     }\n \n-    private static int getNumLines(File file) throws ToolException {\n-        Command cmd = new Command(file.getAbsolutePath() + \" -wl\");\n-        cmd.run();\n-        String output = cmd.getOutput();\n-        if (StringUtils.isEmpty(output)) {\n-            throw new ToolException(\"Error reading number of lines: \" + file.getAbsolutePath());\n-        }\n+    return new MendelianErrorsReport(numME, sampleAggregationList);\n+  }\n \n-        return (Integer.parseInt(output.split(\"\\t\")[0]) - 1);\n+  private static int getNumLines(File file) throws ToolException {\n+    Command cmd = new Command(file.getAbsolutePath() + \" -wl\");\n+    cmd.run();\n+    String output = cmd.getOutput();\n+    if (StringUtils.isEmpty(output)) {\n+      throw new ToolException(\"Error reading number of lines: \" + file.getAbsolutePath());\n     }\n+\n+    return (Integer.parseInt(output.split(\"\\t\")[0]) - 1);\n+  }\n }\n",
            "diff_size": 329
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/258/GeneticChecksUtils.java\nindex 7c11fb453f1..141668d8862 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/258/GeneticChecksUtils.java\n@@ -112,9 +112,9 @@ public class GeneticChecksUtils {\n \n     private static void exportData(File tpedFile, File tfamFile, Query query, VariantStorageManager storageManager,\n                                    String token) throws ToolException {\n-        try {\n+    try {\n             storageManager.exportData(tpedFile.getAbsolutePath(), TPED, null, query, QueryOptions.empty(), token);\n-        } catch(CatalogException | IOException | StorageEngineException e) {\n+        } catch (CatalogException | IOException | StorageEngineException e) {\n             throw new ToolException(e);\n         }\n \n@@ -283,4 +283,4 @@ public class GeneticChecksUtils {\n \n         return (Integer.parseInt(output.split(\"\\t\")[0]) - 1);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/258/GeneticChecksUtils.java\nindex 7c11fb453f1..9c377c8fdfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/258/GeneticChecksUtils.java\n@@ -114,7 +114,7 @@ public class GeneticChecksUtils {\n                                    String token) throws ToolException {\n         try {\n             storageManager.exportData(tpedFile.getAbsolutePath(), TPED, null, query, QueryOptions.empty(), token);\n-        } catch(CatalogException | IOException | StorageEngineException e) {\n+        } catch (CatalogException | IOException | StorageEngineException e) {\n             throw new ToolException(e);\n         }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/258/GeneticChecksUtils.java\nindex 7c11fb453f1..9c377c8fdfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/258/GeneticChecksUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/258/GeneticChecksUtils.java\n@@ -114,7 +114,7 @@ public class GeneticChecksUtils {\n                                    String token) throws ToolException {\n         try {\n             storageManager.exportData(tpedFile.getAbsolutePath(), TPED, null, query, QueryOptions.empty(), token);\n-        } catch(CatalogException | IOException | StorageEngineException e) {\n+        } catch (CatalogException | IOException | StorageEngineException e) {\n             throw new ToolException(e);\n         }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}