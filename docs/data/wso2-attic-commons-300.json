{
    "project_name": "wso2-attic-commons",
    "error_id": "300",
    "information": {
        "errors": [
            {
                "line": "36",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 216).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * @see org.eclipse.wst.wsdl.validation.internal.resolver.IExtensibleURIResolver#resolve(java.lang.String, java.lang.String, java.lang.String, org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult)\n   */\n  public void resolve(String baseLocation, String publicId, String systemId, IURIResolutionResult result)\n  {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/300/URIResolverWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/300/URIResolverWrapper.java\nindex 31a6bb7700a..ea469730c9d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/300/URIResolverWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/300/URIResolverWrapper.java\n@@ -4,7 +4,7 @@\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n@@ -23,69 +23,56 @@ import org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult;\n  * An wrapper URI resolver that wraps the Web Standard Tools URI resolver\n  * in a WSDL validator URI resolver.\n  */\n-public class URIResolverWrapper implements IExtensibleURIResolver\n-{\n+public class URIResolverWrapper implements IExtensibleURIResolver {\n   /**\n    * Constructor.\n    */\n-  public URIResolverWrapper()\n-  {\n+  public URIResolverWrapper() {\n   }\n \n   /**\n    * @see org.eclipse.wst.wsdl.validation.internal.resolver.IExtensibleURIResolver#resolve(java.lang.String, java.lang.String, java.lang.String, org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult)\n    */\n-  public void resolve(String baseLocation, String publicId, String systemId, IURIResolutionResult result)\n-  {\n+  public void resolve(String baseLocation, String publicId, String systemId, IURIResolutionResult result) {\n     URIResolver resolver = URIResolverPlugin.createResolver();\n     String resolvedSystemId = resolvePlatformURL(systemId);\n     String location = null;\n-    if (publicId != null || resolvedSystemId != null)\n-    {  \n+    if (publicId != null || resolvedSystemId != null) {\n       location = resolver.resolve(baseLocation, publicId, resolvedSystemId);\n-    }  \n-    \n-    if (location != null)\n-    {       \n+    }\n+\n+    if (location != null) {\n       result.setLogicalLocation(location);\n       String physical = resolver.resolvePhysicalLocation(baseLocation, publicId, location);\n-      if(physical != null)\n-      {\n+      if (physical != null) {\n         result.setPhysicalLocation(physical);\n-      }\n-      else\n-      {\n+      } else {\n         result.setPhysicalLocation(location);\n       }\n     }\n   }\n-  \n+\n   /**\n    * Resolve platform URLs to standard URLs. This method has the\n    * practical effect of transforming a URL such as\n    * platform:/resource/test/test.wsdl\n    * into\n    * file:/c:/wtp/workspace/test/test.wsdl\n-   * \n+   *\n    * @param url The URL that may contain the platform scheme.\n    * @return A resolved URL that does not contain the platform scheme.\n    */\n-  protected String resolvePlatformURL(String url)\n-  {\n-\t  String result = url;\n-\t  if(url != null && url.startsWith(\"platform:\"))\n-      {\n-    \t  try\n-    \t  {\n-    \t\t  URL fileURL = FileLocator.toFileURL(new URL(url));\n-    \t\t  result = fileURL.toExternalForm();\n-    \t  }\n-    \t  catch(Exception e)\n-    \t  {\n-    \t\t  // Can't resolve using the FileLocator in this\n-    \t\t  // case so do nothing.\n-    \t  }\n+  protected String resolvePlatformURL(String url) {\n+    String result = url;\n+    if (url != null && url.startsWith(\"platform:\")) {\n+      try {\n+        URL fileURL = FileLocator.toFileURL(new URL(url));\n+        result = fileURL.toExternalForm();\n+      } catch (Exception e) {\n+        // Can't resolve using the FileLocator in this\n+        // case so do nothing.\n       }\n-\t  return result;\n+    }\n+    return result;\n   }\n }\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/300/URIResolverWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/300/URIResolverWrapper.java\nindex 31a6bb7700a..0417b1005bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/300/URIResolverWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/300/URIResolverWrapper.java\n@@ -43,12 +43,10 @@ public class URIResolverWrapper implements IExtensibleURIResolver\n     if (publicId != null || resolvedSystemId != null)\n     {  \n       location = resolver.resolve(baseLocation, publicId, resolvedSystemId);\n-    }  \n-    \n-    if (location != null)\n-    {       \n-      result.setLogicalLocation(location);\n-      String physical = resolver.resolvePhysicalLocation(baseLocation, publicId, location);\n+    }\n+if (location != null) {\n+  result.setLogicalLocation(location);\n+String physical = resolver.resolvePhysicalLocation(baseLocation, publicId, location);\n       if(physical != null)\n       {\n         result.setPhysicalLocation(physical);\n@@ -74,8 +72,8 @@ public class URIResolverWrapper implements IExtensibleURIResolver\n   {\n \t  String result = url;\n \t  if(url != null && url.startsWith(\"platform:\"))\n-      {\n-    \t  try\n+{\n+  try\n     \t  {\n     \t\t  URL fileURL = FileLocator.toFileURL(new URL(url));\n     \t\t  result = fileURL.toExternalForm();\n@@ -86,6 +84,6 @@ public class URIResolverWrapper implements IExtensibleURIResolver\n     \t\t  // case so do nothing.\n     \t  }\n       }\n-\t  return result;\n+return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}