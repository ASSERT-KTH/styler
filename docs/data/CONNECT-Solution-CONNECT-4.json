{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.mpi.adapter.component;\n\nimport gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\nimport gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201306;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/4/PatientChecker.java\nindex 7d937758293..a347f2a7332 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/4/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/4/PatientChecker.java\nindex 7d937758293..e45d48d66b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/4/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n@@ -42,105 +43,103 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author Jon Hoppesch\n  */\n public class PatientChecker implements AdapterComponentMpiChecker {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(PatientChecker.class);\n-\n-    /**\n-     * Find matching patients from mpi.\n-     *\n-     * @param query request\n-     * @return response\n-     */\n-    @Override\n-    public PRPAIN201306UV02 findPatient(PRPAIN201305UV02 query) {\n-        LOG.trace(\"Entering PatientChecker.FindPatient method...\");\n-        PRPAIN201306UV02 result;\n-\n-        PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n-\n-        Patients filteredPatients = new Patients();\n-\n-        if (queryParams == null) {\n-            LOG.error(\"no query parameters were supplied\");\n-        } else {\n-            Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-            LOG.info(\"perform patient lookup in mpi\");\n-\n-            LOG.info(\"source patient check 1 [\" + sourcePatient.toString() + \"]\");\n-            Patients searchResults = MpiDataAccess.lookupPatients(sourcePatient);\n-            if (searchResults != null) {\n-                LOG.debug(\"searchResults.size(): \" + searchResults.size());\n-            } else {\n-                LOG.debug(\"No matching patient found\");\n-            }\n-\n-            List<String> dupOrgIds = new ArrayList<>();\n-            for (Patient patient : searchResults) {\n-                if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n-                    && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n-\n-                    for (Patient tempPatient : filteredPatients) {\n-                        if (tempPatient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(patient\n-                            .getIdentifiers().get(0).getOrganizationId())) {\n-                            dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n-                        }\n-                    }\n-                    filteredPatients.add(patient);\n-                }\n+  private static final Logger LOG = LoggerFactory.getLogger(PatientChecker.class);\n+\n+  /**\n+   * Find matching patients from mpi.\n+   *\n+   * @param query request\n+   * @return response\n+   */\n+  @Override\n+  public PRPAIN201306UV02 findPatient(PRPAIN201305UV02 query) {\n+    LOG.trace(\"Entering PatientChecker.FindPatient method...\");\n+    PRPAIN201306UV02 result;\n+\n+    PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n+\n+    Patients filteredPatients = new Patients();\n+\n+    if (queryParams == null) {\n+      LOG.error(\"no query parameters were supplied\");\n+    } else {\n+      Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n+      LOG.info(\"perform patient lookup in mpi\");\n+\n+      LOG.info(\"source patient check 1 [\" + sourcePatient.toString() + \"]\");\n+      Patients searchResults = MpiDataAccess.lookupPatients(sourcePatient);\n+      if (searchResults != null) {\n+        LOG.debug(\"searchResults.size(): \" + searchResults.size());\n+      } else {\n+        LOG.debug(\"No matching patient found\");\n+      }\n+\n+      List<String> dupOrgIds = new ArrayList<>();\n+      for (Patient patient : searchResults) {\n+        if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n+            && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n+\n+          for (Patient tempPatient : filteredPatients) {\n+            if (tempPatient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(patient\n+                .getIdentifiers().get(0).getOrganizationId())) {\n+              dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n             }\n-\n-            if (CollectionUtils.isNotEmpty(dupOrgIds)) {\n-                HashSet hashSet = new HashSet(dupOrgIds);\n-                dupOrgIds = new ArrayList(hashSet);\n-                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n-                    + dupOrgIds.size());\n-            }\n-\n-            for (Patient patient : searchResults) {\n-                if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n-                    && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n-\n-                    for (String str : dupOrgIds) {\n-                        if (patient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(str)) {\n-                            filteredPatients.remove(patient);\n-                        }\n-                    }\n-                }\n+          }\n+          filteredPatients.add(patient);\n+        }\n+      }\n+\n+      if (CollectionUtils.isNotEmpty(dupOrgIds)) {\n+        HashSet hashSet = new HashSet(dupOrgIds);\n+        dupOrgIds = new ArrayList(hashSet);\n+        LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n+            + dupOrgIds.size());\n+      }\n+\n+      for (Patient patient : searchResults) {\n+        if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n+            && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n+\n+          for (String str : dupOrgIds) {\n+            if (patient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(str)) {\n+              filteredPatients.remove(patient);\n             }\n-\n-            LOG.debug(\"After duplicates removed - filteredPatients.size(): \" + filteredPatients.size());\n+          }\n         }\n+      }\n \n-        result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n-\n-        LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n-        return result;\n+      LOG.debug(\"After duplicates removed - filteredPatients.size(): \" + filteredPatients.size());\n     }\n \n-    /**\n-     *\n-     * @param query the PRPAIN201305UV02\n-     * @return true - minimum params found; false - not found\n-     */\n-    @Override\n-    public boolean isNhinRequiredParamsFound(PRPAIN201305UV02 query) {\n-        boolean result = false;\n-\n-        PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n-        Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-\n-        if (sourcePatient != null && CollectionUtils.isNotEmpty(sourcePatient.getNames())\n-            && sourcePatient.getNames().get(0) != null\n-            && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n-            && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n-            && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n-            result = true;\n-        }\n-\n-        return result;\n+    result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n+\n+    LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n+    return result;\n+  }\n+\n+  /**\n+   * @param query the PRPAIN201305UV02\n+   * @return true - minimum params found; false - not found\n+   */\n+  @Override\n+  public boolean isNhinRequiredParamsFound(PRPAIN201305UV02 query) {\n+    boolean result = false;\n+\n+    PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n+    Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n+\n+    if (sourcePatient != null && CollectionUtils.isNotEmpty(sourcePatient.getNames())\n+        && sourcePatient.getNames().get(0) != null\n+        && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n+        && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n+        && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n+      result = true;\n     }\n+\n+    return result;\n+  }\n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 375).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/4/PatientChecker.java\nindex 7d937758293..43c074cd114 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/4/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n@@ -63,8 +64,7 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n \n         Patients filteredPatients = new Patients();\n-\n-        if (queryParams == null) {\n+if (queryParams == null) {\n             LOG.error(\"no query parameters were supplied\");\n         } else {\n             Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n@@ -80,31 +80,24 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n \n             List<String> dupOrgIds = new ArrayList<>();\n             for (Patient patient : searchResults) {\n-                if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n-                    && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n-\n-                    for (Patient tempPatient : filteredPatients) {\n-                        if (tempPatient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(patient\n-                            .getIdentifiers().get(0).getOrganizationId())) {\n-                            dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n+                if (CollectionUtils.isNotEmpty(patient.getIdentifiers()) && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n+    for (Patient tempPatient : filteredPatients) {\n+                        if (tempPatient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(patient.getIdentifiers().get(0).getOrganizationId())) {\n+    dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n                         }\n                     }\n                     filteredPatients.add(patient);\n                 }\n             }\n-\n-            if (CollectionUtils.isNotEmpty(dupOrgIds)) {\n+if (CollectionUtils.isNotEmpty(dupOrgIds)) {\n                 HashSet hashSet = new HashSet(dupOrgIds);\n                 dupOrgIds = new ArrayList(hashSet);\n-                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n-                    + dupOrgIds.size());\n-            }\n+                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \" + dupOrgIds.size());\n+    }\n \n             for (Patient patient : searchResults) {\n-                if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n-                    && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n-\n-                    for (String str : dupOrgIds) {\n+                if (CollectionUtils.isNotEmpty(patient.getIdentifiers()) && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n+    for (String str : dupOrgIds) {\n                         if (patient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(str)) {\n                             filteredPatients.remove(patient);\n                         }\n@@ -118,7 +111,8 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n         result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n \n         LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -132,15 +126,10 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n \n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n         Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-\n-        if (sourcePatient != null && CollectionUtils.isNotEmpty(sourcePatient.getNames())\n-            && sourcePatient.getNames().get(0) != null\n-            && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n-            && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n-            && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n-            result = true;\n+if (sourcePatient != null && CollectionUtils.isNotEmpty(sourcePatient.getNames()) && sourcePatient.getNames().get(0) != null && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName()) && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName()) && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n+    result = true;\n         }\n \n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "68",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 378).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "column": "90",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "132",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "207",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "281",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "335",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/4/PatientChecker.java\nindex 7d937758293..895d2aa7e9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/4/PatientChecker.java\n@@ -45,6 +45,8 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Jon Hoppesch\n  */\n+\n+\n public class PatientChecker implements AdapterComponentMpiChecker {\n \n     private static final Logger LOG = LoggerFactory.getLogger(PatientChecker.class);\n@@ -55,55 +57,50 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n      * @param query request\n      * @return response\n      */\n+\n+\n     @Override\n     public PRPAIN201306UV02 findPatient(PRPAIN201305UV02 query) {\n         LOG.trace(\"Entering PatientChecker.FindPatient method...\");\n         PRPAIN201306UV02 result;\n-\n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n-\n         Patients filteredPatients = new Patients();\n-\n-        if (queryParams == null) {\n+        if(queryParams == null) {\n             LOG.error(\"no query parameters were supplied\");\n-        } else {\n+        }\n+\n+\n+else {\n             Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n             LOG.info(\"perform patient lookup in mpi\");\n-\n             LOG.info(\"source patient check 1 [\" + sourcePatient.toString() + \"]\");\n             Patients searchResults = MpiDataAccess.lookupPatients(sourcePatient);\n-            if (searchResults != null) {\n+            if(searchResults != null) {\n                 LOG.debug(\"searchResults.size(): \" + searchResults.size());\n-            } else {\n-                LOG.debug(\"No matching patient found\");\n             }\n \n+\n+else {\n+                LOG.debug(\"No matching patient found\");\n+            }\n             List<String> dupOrgIds = new ArrayList<>();\n             for (Patient patient : searchResults) {\n-                if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n-                    && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n-\n+                if (CollectionUtils.isNotEmpty(patient.getIdentifiers()) && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n                     for (Patient tempPatient : filteredPatients) {\n-                        if (tempPatient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(patient\n-                            .getIdentifiers().get(0).getOrganizationId())) {\n+                        if (tempPatient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(patient.getIdentifiers().get(0).getOrganizationId())) {\n                             dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n                         }\n                     }\n                     filteredPatients.add(patient);\n                 }\n             }\n-\n             if (CollectionUtils.isNotEmpty(dupOrgIds)) {\n                 HashSet hashSet = new HashSet(dupOrgIds);\n                 dupOrgIds = new ArrayList(hashSet);\n-                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n-                    + dupOrgIds.size());\n+                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \" + dupOrgIds.size());\n             }\n-\n             for (Patient patient : searchResults) {\n-                if (CollectionUtils.isNotEmpty(patient.getIdentifiers())\n-                    && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n-\n+                if (CollectionUtils.isNotEmpty(patient.getIdentifiers()) && patient.getIdentifiers().get(0).getOrganizationId() != null) {\n                     for (String str : dupOrgIds) {\n                         if (patient.getIdentifiers().get(0).getOrganizationId().equalsIgnoreCase(str)) {\n                             filteredPatients.remove(patient);\n@@ -111,12 +108,9 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n                     }\n                 }\n             }\n-\n             LOG.debug(\"After duplicates removed - filteredPatients.size(): \" + filteredPatients.size());\n         }\n-\n         result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n-\n         LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n         return result;\n     }\n@@ -126,21 +120,17 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n      * @param query the PRPAIN201305UV02\n      * @return true - minimum params found; false - not found\n      */\n+\n+\n     @Override\n     public boolean isNhinRequiredParamsFound(PRPAIN201305UV02 query) {\n         boolean result = false;\n-\n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n         Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-\n-        if (sourcePatient != null && CollectionUtils.isNotEmpty(sourcePatient.getNames())\n-            && sourcePatient.getNames().get(0) != null\n-            && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n-            && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n-            && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n+        if (sourcePatient != null && CollectionUtils.isNotEmpty(sourcePatient.getNames())&& sourcePatient.getNames().get(0) != null&& NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())&& NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())&& NullChecker.isNotNullish(sourcePatient.getGender())&& sourcePatient.getDateOfBirth() != null) {\n             result = true;\n         }\n-\n         return result;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/4/PatientChecker.java\nindex 7d937758293..438ebabfe61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/4/PatientChecker.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n-\n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201306;\n import gov.hhs.fha.nhinc.mpilib.Patient;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/4/PatientChecker.java\nindex 7d937758293..a347f2a7332 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/4/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/4/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}