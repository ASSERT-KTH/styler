{
    "project_name": "GluuFederation-oxCore",
    "error_id": "158",
    "information": {
        "errors": [
            {
                "line": "127",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        String applicationBaseDn = buildDn(null, null, applicationType);\n        if (!containsBranch(applicationBaseDn)) {\n        \t// Create ou=appliance_inum branch if needed\n        \tString applianceBaseDn = buildDn(null, null, null);\n        \tif (!containsBranch(applianceBaseDn)) {\n        \t\tcreateBranch(applianceBaseDn, applianceInum());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/158/MetricService.java\nindex 93b8b471ac8..28d9d4954fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/158/MetricService.java\n@@ -124,8 +124,8 @@ public abstract class MetricService implements Serializable {\n         // Create ou=application_type branch if needed\n         String applicationBaseDn = buildDn(null, null, applicationType);\n         if (!containsBranch(applicationBaseDn)) {\n-        \t// Create ou=appliance_inum branch if needed\n-        \tString applianceBaseDn = buildDn(null, null, null);\n+        // Create ou=appliance_inum branch if needed\n+         String applianceBaseDn = buildDn(null, null, null);\n         \tif (!containsBranch(applianceBaseDn)) {\n         \t\tcreateBranch(applianceBaseDn, applianceInum());\n         \t}\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/158/MetricService.java\nindex 93b8b471ac8..11fc7498da2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/158/MetricService.java\n@@ -124,12 +124,12 @@ public abstract class MetricService implements Serializable {\n         // Create ou=application_type branch if needed\n         String applicationBaseDn = buildDn(null, null, applicationType);\n         if (!containsBranch(applicationBaseDn)) {\n-        \t// Create ou=appliance_inum branch if needed\n-        \tString applianceBaseDn = buildDn(null, null, null);\n-        \tif (!containsBranch(applianceBaseDn)) {\n-        \t\tcreateBranch(applianceBaseDn, applianceInum());\n-        \t}\n-        \tcreateBranch(applicationBaseDn, applicationType.getValue());\n+            // Create ou=appliance_inum branch if needed\n+            String applianceBaseDn = buildDn(null, null, null);\n+            if (!containsBranch(applianceBaseDn)) {\n+                createBranch(applianceBaseDn, applianceInum());\n+            }\n+            createBranch(applicationBaseDn, applicationType.getValue());\n         }\n     }\n \n@@ -168,7 +168,8 @@ public abstract class MetricService implements Serializable {\n     }\n \n     public Map<MetricType, List<? extends MetricEntry>> findMetricEntry(ApplicationType applicationType, String applianceInum,\n-            List<MetricType> metricTypes, Date startDate, Date endDate, String... returnAttributes) {\n+                                                                        List<MetricType> metricTypes, Date startDate, Date endDate,\n+                                                                        String... returnAttributes) {\n         prepareBranch(null, applicationType);\n \n         Map<MetricType, List<? extends MetricEntry>> result = new HashMap<MetricType, List<? extends MetricEntry>>();\n@@ -202,7 +203,7 @@ public abstract class MetricService implements Serializable {\n                 Filter filter = Filter.createANDFilter(metricTypeFilters);\n \n                 List<? extends MetricEntry> metricTypeMonthResult = (List<? extends MetricEntry>) getEntryManager().findEntries(metricDn,\n-                        metricType.getMetricEntryType(), filter, returnAttributes);\n+                    metricType.getMetricEntryType(), filter, returnAttributes);\n                 metricTypeResult.addAll(metricTypeMonthResult);\n             }\n             // Sort entries to avoid calculation errors\n@@ -215,26 +216,26 @@ public abstract class MetricService implements Serializable {\n     }\n \n     public List<MetricEntry> getExpiredMetricEntries(DefaultBatchOperation<MetricEntry> batchOperation, String baseDnForPeriod, Date expirationDate,\n-            int count, int chunkSize) {\n+                                                     int count, int chunkSize) {\n         Filter expiratioFilter = Filter.createLessOrEqualFilter(\"oxStartDate\", getEntryManager().encodeTime(expirationDate));\n \n         List<MetricEntry> metricEntries = getEntryManager().findEntries(baseDnForPeriod, MetricEntry.class, expiratioFilter, SearchScope.SUB,\n-                new String[] { \"uniqueIdentifier\" }, batchOperation, 0, count, chunkSize);\n+            new String[] {\"uniqueIdentifier\"}, batchOperation, 0, count, chunkSize);\n \n         return metricEntries;\n     }\n \n     public List<SimpleBranch> findAllPeriodBranches(DefaultBatchOperation<SimpleBranch> batchOperation, ApplicationType applicationType,\n-            String applianceInum, int count, int chunkSize) {\n+                                                    String applianceInum, int count, int chunkSize) {\n         String baseDn = buildDn(null, null, applicationType, applianceInum);\n \n         Filter skipRootDnFilter = Filter.createNOTFilter(Filter.createEqualityFilter(\"ou\", applicationType.getValue()));\n-        return getEntryManager().findEntries(baseDn, SimpleBranch.class, skipRootDnFilter, SearchScope.SUB, new String[] { \"ou\" }, batchOperation, 0,\n-                count, chunkSize);\n+        return getEntryManager().findEntries(baseDn, SimpleBranch.class, skipRootDnFilter, SearchScope.SUB, new String[] {\"ou\"}, batchOperation, 0,\n+            count, chunkSize);\n     }\n \n     public void removeExpiredMetricEntries(final Date expirationDate, final ApplicationType applicationType, final String applianceInum, int count,\n-            int chunkSize) {\n+                                           int chunkSize) {\n         createApplicationBaseBranch(getApplicationType());\n \n         final Set<String> keepBaseDnForPeriod = getBaseDnForPeriod(applicationType, applianceInum, expirationDate, new Date());\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/158/MetricService.java\nindex 93b8b471ac8..a18a2dd5eb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/158/MetricService.java\n@@ -124,13 +124,13 @@ public abstract class MetricService implements Serializable {\n         // Create ou=application_type branch if needed\n         String applicationBaseDn = buildDn(null, null, applicationType);\n         if (!containsBranch(applicationBaseDn)) {\n-        \t// Create ou=appliance_inum branch if needed\n+    // Create ou=appliance_inum branch if needed\n         \tString applianceBaseDn = buildDn(null, null, null);\n         \tif (!containsBranch(applianceBaseDn)) {\n-        \t\tcreateBranch(applianceBaseDn, applianceInum());\n-        \t}\n+    createBranch(applianceBaseDn, applianceInum());\n+    }\n         \tcreateBranch(applicationBaseDn, applicationType.getValue());\n-        }\n+    }\n     }\n \n     public void add(List<MetricEntry> metricEntries, Date creationTime) {\n@@ -395,4 +395,4 @@ public abstract class MetricService implements Serializable {\n     public abstract ApplicationType getApplicationType();\n \n     public abstract PersistenceEntryManager getEntryManager();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/158/MetricService.java\nindex 93b8b471ac8..ef32c8d44b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/158/MetricService.java\n@@ -20,10 +20,8 @@ import java.util.TimeZone;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n-\n import javax.enterprise.event.Observes;\n import javax.inject.Inject;\n-\n import org.gluu.persist.PersistenceEntryManager;\n import org.gluu.persist.exception.EntryPersistenceException;\n import org.gluu.persist.model.DefaultBatchOperation;\n@@ -38,7 +36,6 @@ import org.xdi.model.metric.ldap.MetricReport;\n import org.xdi.service.cdi.async.Asynchronous;\n import org.xdi.service.metric.inject.ReportMetric;\n import org.xdi.util.StringHelper;\n-\n import com.codahale.metrics.Counter;\n import com.codahale.metrics.MetricRegistry;\n import com.codahale.metrics.Timer;\n@@ -48,20 +45,16 @@ import com.codahale.metrics.Timer;\n  *\n  * @author Yuriy Movchan Date: 07/27/2015\n  */\n+\n+\n public abstract class MetricService implements Serializable {\n \n     private static final long serialVersionUID = -3393618600428448743L;\n-\n     private static final String EVENT_TYPE = \"MetricServiceTimerEvent\";\n-\n     private static final int DEFAULT_METRIC_REPORTER_INTERVAL = 60;\n-\n     private static final SimpleDateFormat PERIOD_DATE_FORMAT = new SimpleDateFormat(\"yyyyMM\");\n-\n     private static final AtomicLong INITIAL_ID = new AtomicLong(System.currentTimeMillis());\n-\n     private MetricRegistry metricRegistry;\n-\n     private Set<MetricType> registeredMetricTypes;\n \n     @Inject\n@@ -72,11 +65,11 @@ public abstract class MetricService implements Serializable {\n         this.registeredMetricTypes = new HashSet<MetricType>();\n \n         LdapEntryReporter ldapEntryReporter = LdapEntryReporter.forRegistry(this.metricRegistry, getMetricServiceInstance()).build();\n-\n         int metricReporterInterval = metricInterval;\n         if (metricReporterInterval <= 0) {\n             metricReporterInterval = DEFAULT_METRIC_REPORTER_INTERVAL;\n         }\n+\n         ldapEntryReporter.start(metricReporterInterval, TimeUnit.SECONDS);\n     }\n \n@@ -89,7 +82,6 @@ public abstract class MetricService implements Serializable {\n         SimpleBranch branch = new SimpleBranch();\n         branch.setOrganizationalUnitName(ou);\n         branch.setDn(branchDn);\n-\n         getEntryManager().persist(branch);\n     }\n \n@@ -113,7 +105,6 @@ public abstract class MetricService implements Serializable {\n         // Create ou=YYYY-MM branch if needed\n         if (!containsBranch(baseDn)) {\n             createApplicationBaseBranch(applicationType);\n-\n             if (creationDate != null) {\n                 createBranch(baseDn, PERIOD_DATE_FORMAT.format(creationDate));\n             }\n@@ -124,18 +115,18 @@ public abstract class MetricService implements Serializable {\n         // Create ou=application_type branch if needed\n         String applicationBaseDn = buildDn(null, null, applicationType);\n         if (!containsBranch(applicationBaseDn)) {\n-        \t// Create ou=appliance_inum branch if needed\n-        \tString applianceBaseDn = buildDn(null, null, null);\n-        \tif (!containsBranch(applianceBaseDn)) {\n-        \t\tcreateBranch(applianceBaseDn, applianceInum());\n-        \t}\n-        \tcreateBranch(applicationBaseDn, applicationType.getValue());\n+            // Create ou=appliance_inum branch if needed\n+            String applianceBaseDn = buildDn(null, null, null);\n+            if (!containsBranch(applianceBaseDn)) {\n+                createBranch(applianceBaseDn, applianceInum());\n+            }\n+\n+            createBranch(applicationBaseDn, applicationType.getValue());\n         }\n     }\n \n     public void add(List<MetricEntry> metricEntries, Date creationTime) {\n         prepareBranch(creationTime, getApplicationType());\n-\n         for (MetricEntry metricEntry : metricEntries) {\n             getEntryManager().persist(metricEntry);\n         }\n@@ -143,19 +134,16 @@ public abstract class MetricService implements Serializable {\n \n     public void add(MetricEntry metricEntry) {\n         prepareBranch(metricEntry.getCreationDate(), metricEntry.getApplicationType());\n-\n         getEntryManager().persist(metricEntry);\n     }\n \n     public void update(MetricEntry metricEntry) {\n         prepareBranch(metricEntry.getCreationDate(), metricEntry.getApplicationType());\n-\n         getEntryManager().merge(metricEntry);\n     }\n \n     public void remove(MetricEntry metricEntry) {\n         prepareBranch(metricEntry.getCreationDate(), metricEntry.getApplicationType());\n-\n         getEntryManager().remove(metricEntry);\n     }\n \n@@ -167,19 +155,17 @@ public abstract class MetricService implements Serializable {\n         return getEntryManager().find(metricType.getMetricEntryType(), metricEventDn);\n     }\n \n-    public Map<MetricType, List<? extends MetricEntry>> findMetricEntry(ApplicationType applicationType, String applianceInum,\n-            List<MetricType> metricTypes, Date startDate, Date endDate, String... returnAttributes) {\n+    public Map<MetricType, List<? extends MetricEntry>> findMetricEntry(ApplicationType applicationType, String applianceInum, List<MetricType> metricTypes, Date startDate, Date endDate, String... returnAttributes) {\n         prepareBranch(null, applicationType);\n \n         Map<MetricType, List<? extends MetricEntry>> result = new HashMap<MetricType, List<? extends MetricEntry>>();\n-\n         if ((metricTypes == null) || (metricTypes.size() == 0)) {\n             return result;\n         }\n \n         // Prepare list of DNs\n-        Set<String> metricDns = getBaseDnForPeriod(applicationType, applianceInum, startDate, endDate);\n \n+        Set<String> metricDns = getBaseDnForPeriod(applicationType, applianceInum, startDate, endDate);\n         if (metricDns.size() == 0) {\n             return result;\n         }\n@@ -188,59 +174,50 @@ public abstract class MetricService implements Serializable {\n             List<MetricEntry> metricTypeResult = new LinkedList<MetricEntry>();\n             for (String metricDn : metricDns) {\n                 List<Filter> metricTypeFilters = new ArrayList<Filter>();\n-\n                 Filter applicationTypeFilter = Filter.createEqualityFilter(\"oxApplicationType\", applicationType.getValue());\n                 Filter eventTypeTypeFilter = Filter.createEqualityFilter(\"oxMetricType\", metricType.getValue());\n                 Filter startDateFilter = Filter.createGreaterOrEqualFilter(\"oxStartDate\", getEntryManager().encodeTime((startDate)));\n                 Filter endDateFilter = Filter.createLessOrEqualFilter(\"oxEndDate\", getEntryManager().encodeTime(endDate));\n-\n                 metricTypeFilters.add(applicationTypeFilter);\n                 metricTypeFilters.add(eventTypeTypeFilter);\n                 metricTypeFilters.add(startDateFilter);\n                 metricTypeFilters.add(endDateFilter);\n \n                 Filter filter = Filter.createANDFilter(metricTypeFilters);\n-\n-                List<? extends MetricEntry> metricTypeMonthResult = (List<? extends MetricEntry>) getEntryManager().findEntries(metricDn,\n-                        metricType.getMetricEntryType(), filter, returnAttributes);\n+                List<? extends MetricEntry> metricTypeMonthResult = (List<? extends MetricEntry>) getEntryManager().findEntries(metricDn, metricType.getMetricEntryType(), filter, returnAttributes);\n                 metricTypeResult.addAll(metricTypeMonthResult);\n             }\n             // Sort entries to avoid calculation errors\n-            getEntryManager().sortListByProperties(MetricEntry.class, metricTypeResult, false, \"creationDate\");\n \n+            getEntryManager().sortListByProperties(MetricEntry.class, metricTypeResult, false, \"creationDate\");\n             result.put(metricType, metricTypeResult);\n         }\n \n         return result;\n     }\n \n-    public List<MetricEntry> getExpiredMetricEntries(DefaultBatchOperation<MetricEntry> batchOperation, String baseDnForPeriod, Date expirationDate,\n-            int count, int chunkSize) {\n+    public List<MetricEntry> getExpiredMetricEntries(DefaultBatchOperation<MetricEntry> batchOperation, String baseDnForPeriod, Date expirationDate, int count, int chunkSize) {\n         Filter expiratioFilter = Filter.createLessOrEqualFilter(\"oxStartDate\", getEntryManager().encodeTime(expirationDate));\n-\n-        List<MetricEntry> metricEntries = getEntryManager().findEntries(baseDnForPeriod, MetricEntry.class, expiratioFilter, SearchScope.SUB,\n-                new String[] { \"uniqueIdentifier\" }, batchOperation, 0, count, chunkSize);\n+        List<MetricEntry> metricEntries = getEntryManager().findEntries(baseDnForPeriod, MetricEntry.class, expiratioFilter, SearchScope.SUB, new String[] {\"uniqueIdentifier\"}, batchOperation, 0, count, chunkSize);\n \n         return metricEntries;\n     }\n \n-    public List<SimpleBranch> findAllPeriodBranches(DefaultBatchOperation<SimpleBranch> batchOperation, ApplicationType applicationType,\n-            String applianceInum, int count, int chunkSize) {\n+    public List<SimpleBranch> findAllPeriodBranches(DefaultBatchOperation<SimpleBranch> batchOperation, ApplicationType applicationType, String applianceInum, int count, int chunkSize) {\n         String baseDn = buildDn(null, null, applicationType, applianceInum);\n-\n         Filter skipRootDnFilter = Filter.createNOTFilter(Filter.createEqualityFilter(\"ou\", applicationType.getValue()));\n-        return getEntryManager().findEntries(baseDn, SimpleBranch.class, skipRootDnFilter, SearchScope.SUB, new String[] { \"ou\" }, batchOperation, 0,\n-                count, chunkSize);\n+\n+        return getEntryManager().findEntries(baseDn, SimpleBranch.class, skipRootDnFilter, SearchScope.SUB, new String[] {\"ou\"}, batchOperation, 0, count, chunkSize);\n     }\n \n-    public void removeExpiredMetricEntries(final Date expirationDate, final ApplicationType applicationType, final String applianceInum, int count,\n-            int chunkSize) {\n+    public void removeExpiredMetricEntries(final Date expirationDate, final ApplicationType applicationType, final String applianceInum, int count, int chunkSize) {\n         createApplicationBaseBranch(getApplicationType());\n \n         final Set<String> keepBaseDnForPeriod = getBaseDnForPeriod(applicationType, applianceInum, expirationDate, new Date());\n         // Remove expired entries\n         for (final String baseDnForPeriod : keepBaseDnForPeriod) {\n             DefaultBatchOperation<MetricEntry> metricEntryBatchOperation = new DefaultBatchOperation<MetricEntry>() {\n+\n                 @Override\n                 public boolean collectSearchResult(int size) {\n                     return false;\n@@ -257,6 +234,7 @@ public abstract class MetricService implements Serializable {\n         }\n \n         DefaultBatchOperation<SimpleBranch> batchOperation = new DefaultBatchOperation<SimpleBranch>() {\n+\n             @Override\n             public boolean collectSearchResult(int size) {\n                 return false;\n@@ -271,6 +249,7 @@ public abstract class MetricService implements Serializable {\n                         periodBranchesStrings.add(periodBranch.getDn());\n                     }\n                 }\n+\n                 periodBranchesStrings.removeAll(keepBaseDnForPeriod);\n \n                 // Remove expired months\n@@ -291,15 +270,12 @@ public abstract class MetricService implements Serializable {\n         calEndMonth.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n         calEndMonth.setTime(endDate);\n         int endMonth = calEndMonth.get(Calendar.MONTH);\n-\n         Set<String> metricDns = new HashSet<String>();\n-\n         boolean stopCondition = cal.getTime().equals(endDate);\n         cal.setTime(startDate);\n         while (true) { // Add at least one month if the data exists\n             int currentMonth = cal.get(Calendar.MONTH);\n             Date currentStartDate = cal.getTime();\n-\n             String baseDn = buildDn(null, currentStartDate, applicationType, applianceInum);\n             if (containsBranch(baseDn)) {\n                 metricDns.add(baseDn);\n@@ -309,7 +285,6 @@ public abstract class MetricService implements Serializable {\n                 break;\n             } else {\n                 cal.add(Calendar.MONTH, 1);\n-\n                 if (cal.getTime().after(endDate)) { // Stop condition which allows to add DN for end of the period\n                     stopCondition = true;\n                     if (currentMonth == endMonth) {\n@@ -356,14 +331,19 @@ public abstract class MetricService implements Serializable {\n      * uniqueIdentifier=id,ou=YYYY-MM,ou=application_type,ou=appliance_inum,ou=\n      * metric,ou=organization_name,o=gluu\n      */\n-    public String buildDn(String uniqueIdentifier, Date creationDate, ApplicationType applicationType, String currentApplianceInum) {\n+\n+    public String buildDn(String uniqueIdentifier,\n+        Date creationDate,\n+            ApplicationType applicationType, String currentApplianceInum) {\n         final StringBuilder dn = new StringBuilder();\n         if (StringHelper.isNotEmpty(uniqueIdentifier) && (creationDate != null) && (applicationType != null)) {\n             dn.append(String.format(\"uniqueIdentifier=%s,\", uniqueIdentifier));\n         }\n+\n         if ((creationDate != null) && (applicationType != null)) {\n             dn.append(String.format(\"ou=%s,\", PERIOD_DATE_FORMAT.format(creationDate)));\n         }\n+\n         if (applicationType != null) {\n             dn.append(String.format(\"ou=%s,\", applicationType.getValue()));\n         }\n@@ -373,8 +353,8 @@ public abstract class MetricService implements Serializable {\n         } else {\n             dn.append(String.format(\"ou=%s,\", currentApplianceInum));\n         }\n-        dn.append(baseDn());\n \n+        dn.append(baseDn());\n         return dn.toString();\n     }\n \n@@ -383,9 +363,11 @@ public abstract class MetricService implements Serializable {\n     }\n \n     // Should return ou=metric,o=gluu\n+\n     public abstract String baseDn();\n \n     // Should return appliance Inum\n+\n     public abstract String applianceInum();\n \n     public abstract MetricService getMetricServiceInstance();\n@@ -395,4 +377,5 @@ public abstract class MetricService implements Serializable {\n     public abstract ApplicationType getApplicationType();\n \n     public abstract PersistenceEntryManager getEntryManager();\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/158/MetricService.java\nindex 93b8b471ac8..28d9d4954fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/158/MetricService.java\n@@ -124,8 +124,8 @@ public abstract class MetricService implements Serializable {\n         // Create ou=application_type branch if needed\n         String applicationBaseDn = buildDn(null, null, applicationType);\n         if (!containsBranch(applicationBaseDn)) {\n-        \t// Create ou=appliance_inum branch if needed\n-        \tString applianceBaseDn = buildDn(null, null, null);\n+        // Create ou=appliance_inum branch if needed\n+         String applianceBaseDn = buildDn(null, null, null);\n         \tif (!containsBranch(applianceBaseDn)) {\n         \t\tcreateBranch(applianceBaseDn, applianceInum());\n         \t}\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "128",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/158/MetricService.java\nindex 93b8b471ac8..c278fdc0878 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/158/MetricService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/158/MetricService.java\n@@ -124,8 +124,8 @@ public abstract class MetricService implements Serializable {\n         // Create ou=application_type branch if needed\n         String applicationBaseDn = buildDn(null, null, applicationType);\n         if (!containsBranch(applicationBaseDn)) {\n-        \t// Create ou=appliance_inum branch if needed\n-        \tString applianceBaseDn = buildDn(null, null, null);\n+            // Create ou=appliance_inum branch if needed String applianceBaseDn = buildDn(null, null, null);\n+\t\t\t\t\t\t\t\t\tString applianceBaseDn = buildDn(null, null, null);\n         \tif (!containsBranch(applianceBaseDn)) {\n         \t\tcreateBranch(applianceBaseDn, applianceInum());\n         \t}\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}