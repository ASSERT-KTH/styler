{
    "project_name": "Angel-ML-angel",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/16/SparseDoubleMatrixTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/16/SparseDoubleMatrixTest.java\nindex 0ce393593c5..f6a8a2e3a89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/16/SparseDoubleMatrixTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/16/SparseDoubleMatrixTest.java\n@@ -44,9 +44,9 @@ public class SparseDoubleMatrixTest {\n     assertEquals(matrix.get(1, 1), 0.0);\n \n     matrix.clear();\n-    int [] rowIndexes = {0, 1};\n-    int [] colIndexes = {0, 1};\n-    double [] values = {1.0, 1.0};\n+    int[] rowIndexes = {0, 1};\n+    int[] colIndexes = {0, 1};\n+    double[] values = {1.0, 1.0};\n     matrix.plusBy(rowIndexes, colIndexes, values);\n     assertEquals(matrix.get(0, 0), 1.0);\n     assertEquals(matrix.get(0, 1), 0.0);\n@@ -75,15 +75,15 @@ public class SparseDoubleMatrixTest {\n     assertEquals(matrix.get(0, 1), 0.0);\n     assertEquals(matrix.get(1, 0), 0.0);\n     assertEquals(matrix.get(1, 1), 2.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(0)).get(0), 2.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(0)).get(1), 0.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(1)).get(0), 0.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(1)).get(1), 2.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(0)).get(0), 2.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(0)).get(1), 0.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(1)).get(0), 0.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(1)).get(1), 2.0);\n   }\n \n   @Test\n   public void testSizeSparsity() {\n-    SparseDoubleMatrix matrix= new SparseDoubleMatrix(2, 2);\n+    SparseDoubleMatrix matrix = new SparseDoubleMatrix(2, 2);\n     matrix.plusBy(0, 0, 1.0);\n     matrix.plusBy(1, 1, 1.0);\n     assertEquals(matrix.size(), 4);\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/16/SparseDoubleMatrixTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/16/SparseDoubleMatrixTest.java\nindex 0ce393593c5..aef7fdb2cfa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/16/SparseDoubleMatrixTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/16/SparseDoubleMatrixTest.java\n@@ -44,8 +44,8 @@ public class SparseDoubleMatrixTest {\n     assertEquals(matrix.get(1, 1), 0.0);\n \n     matrix.clear();\n-    int [] rowIndexes = {0, 1};\n-    int [] colIndexes = {0, 1};\n+    int[] rowIndexes = {0, 1};\n+    int[] colIndexes = {0, 1};\n     double [] values = {1.0, 1.0};\n     matrix.plusBy(rowIndexes, colIndexes, values);\n     assertEquals(matrix.get(0, 0), 1.0);\n@@ -83,10 +83,10 @@ public class SparseDoubleMatrixTest {\n \n   @Test\n   public void testSizeSparsity() {\n-    SparseDoubleMatrix matrix= new SparseDoubleMatrix(2, 2);\n+    SparseDoubleMatrix matrix = new SparseDoubleMatrix(2, 2);\n     matrix.plusBy(0, 0, 1.0);\n     matrix.plusBy(1, 1, 1.0);\n     assertEquals(matrix.size(), 4);\n     assertEquals(matrix.sparsity(), 0.5);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/16/SparseDoubleMatrixTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/16/SparseDoubleMatrixTest.java\nindex 0ce393593c5..3e36c197707 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/16/SparseDoubleMatrixTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/16/SparseDoubleMatrixTest.java\n@@ -18,10 +18,11 @@ package com.tencent.angel.ml.math.matrix;\n \n import com.tencent.angel.ml.math.vector.SparseDoubleVector;\n import org.junit.Test;\n-\n import static junit.framework.Assert.assertEquals;\n \n public class SparseDoubleMatrixTest {\n+\n+\n   @Test\n   public void testPlusByGet() {\n     SparseDoubleMatrix matrix = new SparseDoubleMatrix(2, 2);\n@@ -31,7 +32,6 @@ public class SparseDoubleMatrixTest {\n     assertEquals(matrix.get(0, 1), 0.0);\n     assertEquals(matrix.get(1, 0), 0.0);\n     assertEquals(matrix.get(1, 1), 1.0);\n-\n     matrix.clear();\n     SparseDoubleVector incVec = new SparseDoubleVector(2);\n     incVec.set(0, 1);\n@@ -42,17 +42,16 @@ public class SparseDoubleMatrixTest {\n     assertEquals(matrix.get(0, 1), 1.0);\n     assertEquals(matrix.get(1, 0), 0.0);\n     assertEquals(matrix.get(1, 1), 0.0);\n-\n     matrix.clear();\n-    int [] rowIndexes = {0, 1};\n-    int [] colIndexes = {0, 1};\n-    double [] values = {1.0, 1.0};\n+\n+    int[] rowIndexes = {0, 1};\n+    int[] colIndexes = {0, 1};\n+    double[] values = {1.0, 1.0};\n     matrix.plusBy(rowIndexes, colIndexes, values);\n     assertEquals(matrix.get(0, 0), 1.0);\n     assertEquals(matrix.get(0, 1), 0.0);\n     assertEquals(matrix.get(1, 0), 0.0);\n     assertEquals(matrix.get(1, 1), 1.0);\n-\n     matrix.clear();\n     colIndexes[0] = 0;\n     colIndexes[1] = 1;\n@@ -63,7 +62,6 @@ public class SparseDoubleMatrixTest {\n     assertEquals(matrix.get(0, 1), 1.0);\n     assertEquals(matrix.get(1, 0), 0.0);\n     assertEquals(matrix.get(1, 1), 0.0);\n-\n     SparseDoubleMatrix matrix1 = new SparseDoubleMatrix(2, 2);\n     matrix.clear();\n     matrix.plusBy(0, 0, 1.0);\n@@ -75,18 +73,18 @@ public class SparseDoubleMatrixTest {\n     assertEquals(matrix.get(0, 1), 0.0);\n     assertEquals(matrix.get(1, 0), 0.0);\n     assertEquals(matrix.get(1, 1), 2.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(0)).get(0), 2.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(0)).get(1), 0.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(1)).get(0), 0.0);\n-    assertEquals(((SparseDoubleVector)matrix.getTVector(1)).get(1), 2.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(0)).get(0), 2.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(0)).get(1), 0.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(1)).get(0), 0.0);\n+    assertEquals(((SparseDoubleVector) matrix.getTVector(1)).get(1), 2.0);\n   }\n \n   @Test\n   public void testSizeSparsity() {\n-    SparseDoubleMatrix matrix= new SparseDoubleMatrix(2, 2);\n+    SparseDoubleMatrix matrix = new SparseDoubleMatrix(2, 2);\n     matrix.plusBy(0, 0, 1.0);\n     matrix.plusBy(1, 1, 1.0);\n     assertEquals(matrix.size(), 4);\n     assertEquals(matrix.sparsity(), 0.5);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}