{
    "project_name": "Angel-ML-angel",
    "error_id": "551",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/551/SampleNeighbor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/551/SampleNeighbor.java\nindex 36229862f58..2e8be295de5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/551/SampleNeighbor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/551/SampleNeighbor.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.sampleneighbor4;\n \n import com.tencent.angel.ml.matrix.psf.aggr.enhance.ScalarAggrResult;\n@@ -35,8 +36,8 @@ public class SampleNeighbor extends GetFunc {\n   private LongArrayList types;\n \n   public SampleNeighbor(SampleNeighborParam param, Long2IntOpenHashMap index,\n-      LongArrayList srcs, LongArrayList dsts,\n-      LongArrayList types) {\n+                        LongArrayList srcs, LongArrayList dsts,\n+                        LongArrayList types) {\n     super(param);\n     this.index = index;\n     this.srcs = srcs;\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/551/SampleNeighbor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/551/SampleNeighbor.java\nindex 36229862f58..f7e55ca0ef0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/551/SampleNeighbor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/551/SampleNeighbor.java\n@@ -75,8 +75,7 @@ public class SampleNeighbor extends GetFunc {\n       SampleNeighborPartParam param0 = (SampleNeighborPartParam) partParam;\n       int start = param0.getStartIndex();\n       int end = param0.getEndIndex();\n-      SampleNeighborPartResult result = (SampleNeighborPartResult) partIdToResult\n-          .get(param0.getPartKey().getPartitionId());\n+      SampleNeighborPartResult result = (SampleNeighborPartResult) partIdToResult.get(param0.getPartKey().getPartitionId());\n       int[] indptr = result.getIndptr();\n       long[] neighbors = result.getNeighbors();\n       int[] sampleTypes = result.getTypes();\n@@ -104,4 +103,4 @@ public class SampleNeighbor extends GetFunc {\n     return new ScalarAggrResult(0);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/551/SampleNeighbor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/551/SampleNeighbor.java\nindex 36229862f58..63288175bfe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/551/SampleNeighbor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/551/SampleNeighbor.java\n@@ -34,9 +34,10 @@ public class SampleNeighbor extends GetFunc {\n   private LongArrayList dsts;\n   private LongArrayList types;\n \n-  public SampleNeighbor(SampleNeighborParam param, Long2IntOpenHashMap index,\n-      LongArrayList srcs, LongArrayList dsts,\n-      LongArrayList types) {\n+  public SampleNeighbor(SampleNeighborParam param,\n+                        Long2IntOpenHashMap index,\n+                        LongArrayList srcs,\n+                        LongArrayList dsts, LongArrayList types) {\n     super(param);\n     this.index = index;\n     this.srcs = srcs;\n@@ -55,17 +56,14 @@ public class SampleNeighbor extends GetFunc {\n   @Override\n   public PartitionGetResult partitionGet(PartitionGetParam partParam) {\n     SampleNeighborPartParam param = (SampleNeighborPartParam) partParam;\n-    ServerLongAnyRow row = (ServerLongAnyRow) psContext.getMatrixStorageManager()\n-        .getRow(param.getPartKey(), 0);\n-    return new SampleNeighborPartResult(param.getPartKey().getPartitionId(),\n-        row, param.getKeys(), param.getNumSample(), param.getSampleTypes());\n+    ServerLongAnyRow row = (ServerLongAnyRow) psContext.getMatrixStorageManager().getRow(param.getPartKey(), 0);\n+    return new SampleNeighborPartResult(param.getPartKey().getPartitionId(), row, param.getKeys(), param.getNumSample(), param.getSampleTypes());\n   }\n \n   @Override\n   public GetResult merge(List<PartitionGetResult> partResults) {\n     SampleNeighborParam param = (SampleNeighborParam) getParam();\n     long[] keys = param.getKeys();\n-\n     Int2ObjectArrayMap<PartitionGetResult> partIdToResult = new Int2ObjectArrayMap<>();\n     for (PartitionGetResult result : partResults) {\n       partIdToResult.put(((SampleNeighborPartResult) result).getPartId(), result);\n@@ -75,12 +73,10 @@ public class SampleNeighbor extends GetFunc {\n       SampleNeighborPartParam param0 = (SampleNeighborPartParam) partParam;\n       int start = param0.getStartIndex();\n       int end = param0.getEndIndex();\n-      SampleNeighborPartResult result = (SampleNeighborPartResult) partIdToResult\n-          .get(param0.getPartKey().getPartitionId());\n+      SampleNeighborPartResult result = (SampleNeighborPartResult) partIdToResult.get(param0.getPartKey().getPartitionId());\n       int[] indptr = result.getIndptr();\n       long[] neighbors = result.getNeighbors();\n       int[] sampleTypes = result.getTypes();\n-\n       assert indptr.length == (end - start) + 1;\n       for (int i = start; i < end; i++) {\n         int keyIndex = index.get(keys[i]);\n@@ -100,8 +96,6 @@ public class SampleNeighbor extends GetFunc {\n         }\n       }\n     }\n-\n     return new ScalarAggrResult(0);\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}