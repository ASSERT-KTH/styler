{
    "project_name": "neo4j-neo4j",
    "error_id": "667",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/667/TokenStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/667/TokenStore.java\nindex c6d6d06ee7c..ca9813039f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/667/TokenStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/667/TokenStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -49,28 +50,28 @@ import static org.neo4j.kernel.impl.store.PropertyStore.decodeString;\n import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n public abstract class TokenStore<RECORD extends TokenRecord>\n-        extends CommonAbstractStore<RECORD,NoStoreHeader>\n+  extends CommonAbstractStore<RECORD, NoStoreHeader>\n {\n     public static final int NAME_STORE_BLOCK_SIZE = 30;\n \n     private final DynamicStringStore nameStore;\n \n     public TokenStore(\n-            Path path,\n-            Path idFile,\n-            Config configuration,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            DynamicStringStore nameStore,\n-            String typeDescriptor,\n-            RecordFormat<RECORD> recordFormat,\n-            String storeVersion,\n-            ImmutableSet<OpenOption> openOptions )\n+      Path path,\n+      Path idFile,\n+      Config configuration,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      DynamicStringStore nameStore,\n+      String typeDescriptor,\n+      RecordFormat<RECORD> recordFormat,\n+      String storeVersion,\n+      ImmutableSet<OpenOption> openOptions)\n     {\n-        super( path, idFile, configuration, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n-                recordFormat, NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n+        super(path, idFile, configuration, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n+          recordFormat, NO_STORE_HEADER_FORMAT, storeVersion, openOptions);\n         this.nameStore = nameStore;\n     }\n \n@@ -79,44 +80,44 @@ public abstract class TokenStore<RECORD extends TokenRecord>\n         return nameStore;\n     }\n \n-    public List<NamedToken> getTokens( PageCursorTracer cursorTracer )\n+    public List<NamedToken> getTokens(PageCursorTracer cursorTracer)\n     {\n-        return readAllTokens( false, cursorTracer );\n+        return readAllTokens(false, cursorTracer);\n     }\n \n     /**\n      * Same as {@link #getTokens(PageCursorTracer)}, except tokens that cannot be read due to inconsistencies will just be ignored,\n      * while {@link #getTokens(PageCursorTracer)} would throw an exception in such cases.\n+     *\n      * @return All tokens that could be read without any apparent problems.\n      */\n-    public List<NamedToken> getAllReadableTokens( PageCursorTracer cursorTracer )\n+    public List<NamedToken> getAllReadableTokens(PageCursorTracer cursorTracer)\n     {\n-        return readAllTokens( true, cursorTracer );\n+        return readAllTokens(true, cursorTracer);\n     }\n \n-    private List<NamedToken> readAllTokens( boolean ignoreInconsistentTokens, PageCursorTracer cursorTracer )\n+    private List<NamedToken> readAllTokens(boolean ignoreInconsistentTokens, PageCursorTracer cursorTracer)\n     {\n         long highId = getHighId();\n         ArrayList<NamedToken> records = new ArrayList<>();\n-        records.ensureCapacity( Math.toIntExact( highId ) );\n+        records.ensureCapacity(Math.toIntExact(highId));\n         RECORD record = newRecord();\n-        for ( int i = 0; i < highId; i++ )\n+        for (int i = 0; i < highId; i++)\n         {\n-            if ( !getRecord( i, record, RecordLoad.LENIENT_CHECK, cursorTracer ).inUse() )\n+            if (!getRecord(i, record, RecordLoad.LENIENT_CHECK, cursorTracer).inUse())\n             {\n                 continue;\n             }\n \n-            if ( record.getNameId() != Record.RESERVED.intValue() )\n+            if (record.getNameId() != Record.RESERVED.intValue())\n             {\n                 try\n                 {\n-                    String name = getStringFor( record, cursorTracer );\n-                    records.add( new NamedToken( name, i, record.isInternal() ) );\n-                }\n-                catch ( Exception e )\n+                    String name = getStringFor(record, cursorTracer);\n+                    records.add(new NamedToken(name, i, record.isInternal()));\n+                } catch (Exception e)\n                 {\n-                    if ( !ignoreInconsistentTokens )\n+                    if (!ignoreInconsistentTokens)\n                     {\n                         throw e;\n                     }\n@@ -126,61 +127,61 @@ public abstract class TokenStore<RECORD extends TokenRecord>\n         return records;\n     }\n \n-    public NamedToken getToken( int id, PageCursorTracer cursorTracer )\n+    public NamedToken getToken(int id, PageCursorTracer cursorTracer)\n     {\n-        RECORD record = getRecord( id, newRecord(), NORMAL, cursorTracer );\n-        return new NamedToken( getStringFor( record, cursorTracer ), record.getIntId(), record.isInternal() );\n+        RECORD record = getRecord(id, newRecord(), NORMAL, cursorTracer);\n+        return new NamedToken(getStringFor(record, cursorTracer), record.getIntId(), record.isInternal());\n     }\n \n-    public Collection<DynamicRecord> allocateNameRecords( byte[] chars, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public Collection<DynamicRecord> allocateNameRecords(byte[] chars, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        Collection<DynamicRecord> records = HeapTrackingCollections.newArrayList( memoryTracker );\n-        nameStore.allocateRecordsFromBytes( records, chars, cursorTracer, memoryTracker );\n+        Collection<DynamicRecord> records = HeapTrackingCollections.newArrayList(memoryTracker);\n+        nameStore.allocateRecordsFromBytes(records, chars, cursorTracer, memoryTracker);\n         return records;\n     }\n \n     @Override\n-    public void updateRecord( RECORD record, IdUpdateListener idUpdateListener, PageCursor cursor, PageCursorTracer cursorTracer )\n+    public void updateRecord(RECORD record, IdUpdateListener idUpdateListener, PageCursor cursor, PageCursorTracer cursorTracer)\n     {\n-        super.updateRecord( record, idUpdateListener, cursor, cursorTracer );\n-        if ( !record.isLight() )\n+        super.updateRecord(record, idUpdateListener, cursor, cursorTracer);\n+        if (!record.isLight())\n         {\n-            for ( DynamicRecord keyRecord : record.getNameRecords() )\n+            for (DynamicRecord keyRecord : record.getNameRecords())\n             {\n-                nameStore.updateRecord( keyRecord, idUpdateListener, cursorTracer );\n+                nameStore.updateRecord(keyRecord, idUpdateListener, cursorTracer);\n             }\n         }\n     }\n \n     @Override\n-    public void ensureHeavy( RECORD record, PageCursorTracer cursorTracer )\n+    public void ensureHeavy(RECORD record, PageCursorTracer cursorTracer)\n     {\n-        if ( !record.isLight() )\n+        if (!record.isLight())\n         {\n             return;\n         }\n \n         // Guard for cycles in the name chain, since this might be called by the consistency checker on an inconsistent store.\n         // This will throw an exception if there's a cycle, and we'll just ignore those tokens at this point.\n-        record.addNameRecords( nameStore.getRecords( record.getNameId(), NORMAL, true, cursorTracer ) );\n+        record.addNameRecords(nameStore.getRecords(record.getNameId(), NORMAL, true, cursorTracer));\n     }\n \n-    public String getStringFor( RECORD nameRecord, PageCursorTracer cursorTracer )\n+    public String getStringFor(RECORD nameRecord, PageCursorTracer cursorTracer)\n     {\n-        ensureHeavy( nameRecord, cursorTracer );\n+        ensureHeavy(nameRecord, cursorTracer);\n         int recordToFind = nameRecord.getNameId();\n         Iterator<DynamicRecord> records = nameRecord.getNameRecords().iterator();\n         Collection<DynamicRecord> relevantRecords = new ArrayList<>();\n-        while ( recordToFind != Record.NO_NEXT_BLOCK.intValue() &&  records.hasNext() )\n+        while (recordToFind != Record.NO_NEXT_BLOCK.intValue() && records.hasNext())\n         {\n             DynamicRecord record = records.next();\n-            if ( record.inUse() && record.getId() == recordToFind )\n+            if (record.inUse() && record.getId() == recordToFind)\n             {\n                 recordToFind = (int) record.getNextBlock();\n-                relevantRecords.add( record );\n+                relevantRecords.add(record);\n                 records = nameRecord.getNameRecords().iterator();\n             }\n         }\n-        return decodeString( nameStore.readFullByteArray( relevantRecords, PropertyType.STRING, cursorTracer ).other() );\n+        return decodeString(nameStore.readFullByteArray(relevantRecords, PropertyType.STRING, cursorTracer).other());\n     }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/667/TokenStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/667/TokenStore.java\nindex c6d6d06ee7c..4a8ee0eb415 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/667/TokenStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/667/TokenStore.java\n@@ -183,4 +183,4 @@ public abstract class TokenStore<RECORD extends TokenRecord>\n         }\n         return decodeString( nameStore.readFullByteArray( relevantRecords, PropertyType.STRING, cursorTracer ).other() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}