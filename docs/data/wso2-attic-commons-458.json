{
    "project_name": "wso2-attic-commons",
    "error_id": "458",
    "information": {
        "errors": [
            {
                "line": "172",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .append(\"@\").append(CARBON_CLIENT_ID)\n                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                .toString();\n    }\n ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/458/QueueSenderMessage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/458/QueueSenderMessage.java\nindex d9abdc8ae97..5596d3b2102 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/458/QueueSenderMessage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/458/QueueSenderMessage.java\n@@ -1,22 +1,22 @@\n package messageTypes;\n \n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n \n \n import javax.jms.BytesMessage;\n@@ -37,141 +37,137 @@ import java.awt.Image;\n import java.io.Serializable;\n import java.util.Properties;\n \n-class Employee implements java.io.Serializable\n-{\n-   public String name;\n-   public String address;\n-   public transient int SSN;\n-   public int number;\n-   public void mailCheck()\n-   {\n-      System.out.println(\"Mailing a check to \" + name\n-                           + \" \" + address);\n-   }\n+class Employee implements java.io.Serializable {\n+  public String name;\n+  public String address;\n+  public transient int SSN;\n+  public int number;\n+\n+  public void mailCheck() {\n+    System.out.println(\"Mailing a check to \" + name\n+      + \" \" + address);\n+  }\n }\n \n public class QueueSenderMessage implements java.io.Serializable {\n-    public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n-    private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n-    private static final String QUEUE_NAME_PREFIX = \"queue.\";\n-    private static final String CF_NAME = \"qpidConnectionfactory\";\n-    String userName = \"admin\";\n-    String password = \"admin\";\n-    private static String CARBON_CLIENT_ID = \"carbon\";\n-    private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n-    private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//localhost\n-    private static String CARBON_DEFAULT_PORT = \"5672\";\n-    String queueName = \"lanka\";\n- \n- \n-    public static void main(String[] args) throws NamingException, JMSException {\n-        QueueSenderMessage queueSender = new QueueSenderMessage();\n-        queueSender.sendMessages();\n-    }\n-    public void sendMessages() throws NamingException, JMSException {\n-\n-        Properties properties = new Properties();\n-        properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n-        properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n-        properties.put(QUEUE_NAME_PREFIX + queueName, queueName);\n-        \n-        \n-\n-        System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n-\n-        InitialContext ctx = new InitialContext(properties);\n-\n-        // Lookup connection factory\n-        QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n-        QueueConnection queueConnection = connFactory.createQueueConnection();\n-        queueConnection.start();\n-\n-        QueueSession queueSession =\n-                queueConnection.createQueueSession(true, QueueSession.AUTO_ACKNOWLEDGE);\n-        \n-        \n-\n-        // Send message\n-        Queue queue = (Queue)ctx.lookup(queueName);\n-        \n-        // create the message to send\n-\n-\tjavax.jms.QueueSender queueSender = queueSession.createSender(queue);\n-\t\t\n-\t\t\n-\n-\tfor(int i=1;i<=10;i=i+1){\n-       \n-\t\tString myMessage = \"sri lanka matha\";\n-\t\t\n-\t\tbyte[] data = myMessage.getBytes();\n-\t\t\n-\t\tDestination dst=queue;\n-\t\t\n-\t\tObjectMessage message=queueSession.createObjectMessage();\n-\t\t\tSerializable abc=new Employee();\n-\t\t     message.setObject(abc);\n-\t\t\n-\t\t\n-\t\tmessage.setJMSCorrelationID(\"a\");\n-\t\t\n-\t\tmessage.setJMSCorrelationIDAsBytes(data);\n-\t\t\n-\t\tmessage.setJMSDeliveryMode(20);//aaaaaaaaa\n-\t\t\n-\t\tmessage.setJMSDestination(dst);\n-\t\t\n-\t\tmessage.setJMSExpiration(10000);//aaaaaaaaa\n-\t\t\n-\t\tmessage.setJMSMessageID(\"message ID\");//aaaaaaaaa\n-\t\t\n-\t\tmessage.setJMSPriority(8);//aaaaaaaaa\n-\t\t\n-\t\tmessage.setJMSRedelivered(true);//aaaaaaaaa\n-\t\t\n-\t\tmessage.setJMSReplyTo(dst);\n-\t\t\n-\t\tmessage.setJMSTimestamp(9000);//aaaaaaaaa\n-\t\t\n-\t\tmessage.setJMSType(\"JMSType\");\n-\t\t\n-\t\t/**\n-\t\tqueueSender.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n-\t\tqueueSender.setPriority(1);\n-\t\tqueueSender.setTimeToLive(900000000);\n-\t\tqueueSender.setDisableMessageID(true);\n-\t\tqueueSender.setDisableMessageTimestamp(true);\n-\t\t*/\n-\t\t\n-\t\t/**\n-\t\t String myMessage = \"asaaaaa\";\n-\t\tbyte[] arg0 = myMessage.getBytes();\n-\t\tmessage.setJMSCorrelationIDAsBytes(arg0);\n-\t    */\n-\t\t\n-\t\t\n-\t   \n-\t\t\n-        queueSender.send(message);\n-        \n-\n-\t}\n-\n-        queueSender.close();\n-        queueSession.close();\n-        queueConnection.close();\n+  public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n+  private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n+  private static final String QUEUE_NAME_PREFIX = \"queue.\";\n+  private static final String CF_NAME = \"qpidConnectionfactory\";\n+  String userName = \"admin\";\n+  String password = \"admin\";\n+  private static String CARBON_CLIENT_ID = \"carbon\";\n+  private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n+  private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//localhost\n+  private static String CARBON_DEFAULT_PORT = \"5672\";\n+  String queueName = \"lanka\";\n+\n+\n+  public static void main(String[] args) throws NamingException, JMSException {\n+    QueueSenderMessage queueSender = new QueueSenderMessage();\n+    queueSender.sendMessages();\n+  }\n+\n+  public void sendMessages() throws NamingException, JMSException {\n+\n+    Properties properties = new Properties();\n+    properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n+    properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n+    properties.put(QUEUE_NAME_PREFIX + queueName, queueName);\n+\n+\n+    System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n+\n+    InitialContext ctx = new InitialContext(properties);\n+\n+    // Lookup connection factory\n+    QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n+    QueueConnection queueConnection = connFactory.createQueueConnection();\n+    queueConnection.start();\n+\n+    QueueSession queueSession =\n+      queueConnection.createQueueSession(true, QueueSession.AUTO_ACKNOWLEDGE);\n+\n+\n+    // Send message\n+    Queue queue = (Queue) ctx.lookup(queueName);\n+\n+    // create the message to send\n+\n+    javax.jms.QueueSender queueSender = queueSession.createSender(queue);\n+\n+\n+    for (int i = 1; i <= 10; i = i + 1) {\n+\n+      String myMessage = \"sri lanka matha\";\n+\n+      byte[] data = myMessage.getBytes();\n+\n+      Destination dst = queue;\n+\n+      ObjectMessage message = queueSession.createObjectMessage();\n+      Serializable abc = new Employee();\n+      message.setObject(abc);\n+\n+\n+      message.setJMSCorrelationID(\"a\");\n+\n+      message.setJMSCorrelationIDAsBytes(data);\n+\n+      message.setJMSDeliveryMode(20);//aaaaaaaaa\n+\n+      message.setJMSDestination(dst);\n+\n+      message.setJMSExpiration(10000);//aaaaaaaaa\n+\n+      message.setJMSMessageID(\"message ID\");//aaaaaaaaa\n+\n+      message.setJMSPriority(8);//aaaaaaaaa\n+\n+      message.setJMSRedelivered(true);//aaaaaaaaa\n+\n+      message.setJMSReplyTo(dst);\n+\n+      message.setJMSTimestamp(9000);//aaaaaaaaa\n+\n+      message.setJMSType(\"JMSType\");\n+\n+      /**\n+       queueSender.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n+       queueSender.setPriority(1);\n+       queueSender.setTimeToLive(900000000);\n+       queueSender.setDisableMessageID(true);\n+       queueSender.setDisableMessageTimestamp(true);\n+       */\n+\n+      /**\n+       String myMessage = \"asaaaaa\";\n+       byte[] arg0 = myMessage.getBytes();\n+       message.setJMSCorrelationIDAsBytes(arg0);\n+       */\n+\n+\n+      queueSender.send(message);\n \n \n     }\n-    public String getTCPConnectionURL(String username, String password) {\n-        // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n-        return new StringBuffer()\n-                .append(\"amqp://\").append(username).append(\":\").append(password)\n-                .append(\"@\").append(CARBON_CLIENT_ID)\n-                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n-                .toString();\n-    }\n- \n+\n+    queueSender.close();\n+    queueSession.close();\n+    queueConnection.close();\n+\n+\n+  }\n+\n+  public String getTCPConnectionURL(String username, String password) {\n+    // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n+    return new StringBuffer()\n+      .append(\"amqp://\").append(username).append(\":\").append(password)\n+      .append(\"@\").append(CARBON_CLIENT_ID)\n+      .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n+      .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+      .toString();\n+  }\n+\n }\n \n",
            "diff_size": 154
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}