{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "580",
    "information": {
        "errors": [
            {
                "line": "163",
                "column": "94",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n    return\n        Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n        Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/580/MetafileRenderingOptionsData.java\nindex b42eb23a94b..e41af261b9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/580/MetafileRenderingOptionsData.java\n@@ -160,7 +160,7 @@ public class MetafileRenderingOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n     return\n         Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/580/MetafileRenderingOptionsData.java\nindex b42eb23a94b..34b5fa3b0ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/580/MetafileRenderingOptionsData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -61,6 +64,7 @@ public class MetafileRenderingOptionsData {\n \n     @SerializedName(\"UseEmfEmbeddedToWmf\")\n     private Boolean useEmfEmbeddedToWmf = null;\n+\n     public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n         this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n         return this;\n@@ -68,8 +72,9 @@ public class MetafileRenderingOptionsData {\n \n     /**\n      * Gets or sets determines how EMF+ Dual metafiles should be rendered.\n-    * @return emfPlusDualRenderingMode\n-    **/\n+     *\n+     * @return emfPlusDualRenderingMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets determines how EMF+ Dual metafiles should be rendered.\")\n     public String getEmfPlusDualRenderingMode() {\n         return emfPlusDualRenderingMode;\n@@ -86,8 +91,9 @@ public class MetafileRenderingOptionsData {\n \n     /**\n      * Gets or sets a value determining whether or not the raster operations should be emulated.\n-    * @return emulateRasterOperations\n-    **/\n+     *\n+     * @return emulateRasterOperations\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a value determining whether or not the raster operations should be emulated.\")\n     public Boolean getEmulateRasterOperations() {\n         return emulateRasterOperations;\n@@ -104,8 +110,9 @@ public class MetafileRenderingOptionsData {\n \n     /**\n      * Gets or sets determines how metafile images should be rendered.\n-    * @return renderingMode\n-    **/\n+     *\n+     * @return renderingMode\n+     **/\n     @ApiModelProperty(value = \"Gets or sets determines how metafile images should be rendered.\")\n     public String getRenderingMode() {\n         return renderingMode;\n@@ -123,8 +130,9 @@ public class MetafileRenderingOptionsData {\n     /**\n      * Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page.\n      * The default value is true.\n-    * @return scaleWmfFontsToMetafileSize\n-    **/\n+     *\n+     * @return scaleWmfFontsToMetafileSize\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page. The default value is true.\")\n     public Boolean getScaleWmfFontsToMetafileSize() {\n         return scaleWmfFontsToMetafileSize;\n@@ -141,8 +149,9 @@ public class MetafileRenderingOptionsData {\n \n     /**\n      * Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\n-    * @return useEmfEmbeddedToWmf\n-    **/\n+     *\n+     * @return useEmfEmbeddedToWmf\n+     **/\n     @ApiModelProperty(value = \"Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\")\n     public Boolean getUseEmfEmbeddedToWmf() {\n         return useEmfEmbeddedToWmf;\n@@ -160,41 +169,41 @@ public class MetafileRenderingOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n-    return\n-        Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n-        Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n-        Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n-        Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n-        Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(emfPlusDualRenderingMode, emulateRasterOperations, renderingMode, scaleWmfFontsToMetafileSize, useEmfEmbeddedToWmf);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class MetafileRenderingOptionsData {\\n\");\n-    sb.append(\"    emfPlusDualRenderingMode: \").append(toIndentedString(emfPlusDualRenderingMode)).append(\"\\n\");\n-    sb.append(\"    emulateRasterOperations: \").append(toIndentedString(emulateRasterOperations)).append(\"\\n\");\n-    sb.append(\"    renderingMode: \").append(toIndentedString(renderingMode)).append(\"\\n\");\n-    sb.append(\"    scaleWmfFontsToMetafileSize: \").append(toIndentedString(scaleWmfFontsToMetafileSize)).append(\"\\n\");\n-    sb.append(\"    useEmfEmbeddedToWmf: \").append(toIndentedString(useEmfEmbeddedToWmf)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n+        return\n+            Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n+                Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n+                Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n+                Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n+                Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(emfPlusDualRenderingMode, emulateRasterOperations, renderingMode, scaleWmfFontsToMetafileSize, useEmfEmbeddedToWmf);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class MetafileRenderingOptionsData {\\n\");\n+        sb.append(\"    emfPlusDualRenderingMode: \").append(toIndentedString(emfPlusDualRenderingMode)).append(\"\\n\");\n+        sb.append(\"    emulateRasterOperations: \").append(toIndentedString(emulateRasterOperations)).append(\"\\n\");\n+        sb.append(\"    renderingMode: \").append(toIndentedString(renderingMode)).append(\"\\n\");\n+        sb.append(\"    scaleWmfFontsToMetafileSize: \").append(toIndentedString(scaleWmfFontsToMetafileSize)).append(\"\\n\");\n+        sb.append(\"    useEmfEmbeddedToWmf: \").append(toIndentedString(useEmfEmbeddedToWmf)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/580/MetafileRenderingOptionsData.java\nindex b42eb23a94b..52b88f598d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/580/MetafileRenderingOptionsData.java\n@@ -45,135 +45,152 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * container class for options of metafile rendering.\n  */\n+\n+\n @ApiModel(description = \"container class for options of metafile rendering.\")\n+\n public class MetafileRenderingOptionsData {\n-    @SerializedName(\"EmfPlusDualRenderingMode\")\n-    private String emfPlusDualRenderingMode = null;\n+  @SerializedName(\"EmfPlusDualRenderingMode\")\n+  private String emfPlusDualRenderingMode = null;\n \n-    @SerializedName(\"EmulateRasterOperations\")\n-    private Boolean emulateRasterOperations = null;\n+  @SerializedName(\"EmulateRasterOperations\")\n+  private Boolean emulateRasterOperations = null;\n \n-    @SerializedName(\"RenderingMode\")\n-    private String renderingMode = null;\n+  @SerializedName(\"RenderingMode\")\n+  private String renderingMode = null;\n \n-    @SerializedName(\"ScaleWmfFontsToMetafileSize\")\n-    private Boolean scaleWmfFontsToMetafileSize = null;\n+  @SerializedName(\"ScaleWmfFontsToMetafileSize\")\n+  private Boolean scaleWmfFontsToMetafileSize = null;\n \n-    @SerializedName(\"UseEmfEmbeddedToWmf\")\n-    private Boolean useEmfEmbeddedToWmf = null;\n-    public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n-        this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n-        return this;\n-    }\n+  @SerializedName(\"UseEmfEmbeddedToWmf\")\n+  private Boolean useEmfEmbeddedToWmf = null;\n+\n+  public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n+    this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets determines how EMF+ Dual metafiles should be rendered.\n     * @return emfPlusDualRenderingMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets determines how EMF+ Dual metafiles should be rendered.\")\n-    public String getEmfPlusDualRenderingMode() {\n-        return emfPlusDualRenderingMode;\n-    }\n \n-    public void setEmfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n-        this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n-    }\n \n-    public MetafileRenderingOptionsData emulateRasterOperations(Boolean emulateRasterOperations) {\n-        this.emulateRasterOperations = emulateRasterOperations;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets determines how EMF+ Dual metafiles should be rendered.\")\n+  public String getEmfPlusDualRenderingMode() {\n+    return emfPlusDualRenderingMode;\n+  }\n+\n+  public void setEmfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n+    this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n+  }\n+\n+  public MetafileRenderingOptionsData emulateRasterOperations(Boolean emulateRasterOperations) {\n+    this.emulateRasterOperations = emulateRasterOperations;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a value determining whether or not the raster operations should be emulated.\n     * @return emulateRasterOperations\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a value determining whether or not the raster operations should be emulated.\")\n-    public Boolean getEmulateRasterOperations() {\n-        return emulateRasterOperations;\n-    }\n \n-    public void setEmulateRasterOperations(Boolean emulateRasterOperations) {\n-        this.emulateRasterOperations = emulateRasterOperations;\n-    }\n \n-    public MetafileRenderingOptionsData renderingMode(String renderingMode) {\n-        this.renderingMode = renderingMode;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a value determining whether or not the raster operations should be emulated.\")\n+  public Boolean getEmulateRasterOperations() {\n+    return emulateRasterOperations;\n+  }\n+\n+  public void setEmulateRasterOperations(Boolean emulateRasterOperations) {\n+    this.emulateRasterOperations = emulateRasterOperations;\n+  }\n+\n+  public MetafileRenderingOptionsData renderingMode(String renderingMode) {\n+    this.renderingMode = renderingMode;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets determines how metafile images should be rendered.\n     * @return renderingMode\n     **/\n-    @ApiModelProperty(value = \"Gets or sets determines how metafile images should be rendered.\")\n-    public String getRenderingMode() {\n-        return renderingMode;\n-    }\n \n-    public void setRenderingMode(String renderingMode) {\n-        this.renderingMode = renderingMode;\n-    }\n \n-    public MetafileRenderingOptionsData scaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n-        this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets determines how metafile images should be rendered.\")\n+  public String getRenderingMode() {\n+    return renderingMode;\n+  }\n+\n+  public void setRenderingMode(String renderingMode) {\n+    this.renderingMode = renderingMode;\n+  }\n+\n+  public MetafileRenderingOptionsData scaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n+    this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page.\n      * The default value is true.\n     * @return scaleWmfFontsToMetafileSize\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page. The default value is true.\")\n-    public Boolean getScaleWmfFontsToMetafileSize() {\n-        return scaleWmfFontsToMetafileSize;\n-    }\n \n-    public void setScaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n-        this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n-    }\n \n-    public MetafileRenderingOptionsData useEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n-        this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page. The default value is true.\")\n+  public Boolean getScaleWmfFontsToMetafileSize() {\n+    return scaleWmfFontsToMetafileSize;\n+  }\n+\n+  public void setScaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n+    this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n+  }\n+\n+  public MetafileRenderingOptionsData useEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n+    this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\n     * @return useEmfEmbeddedToWmf\n     **/\n-    @ApiModelProperty(value = \"Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\")\n-    public Boolean getUseEmfEmbeddedToWmf() {\n-        return useEmfEmbeddedToWmf;\n-    }\n \n-    public void setUseEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n-        this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n+\n+  @ApiModelProperty(value = \"Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\")\n+  public Boolean getUseEmfEmbeddedToWmf() {\n+    return useEmfEmbeddedToWmf;\n+  }\n+\n+  public void setUseEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n+    this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n-    return\n-        Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n-        Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n-        Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n-        Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n-        Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n+    return Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n+    Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n+    Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n+    Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n+    Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(emfPlusDualRenderingMode, emulateRasterOperations, renderingMode, scaleWmfFontsToMetafileSize, useEmfEmbeddedToWmf);\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -191,10 +208,12 @@ public class MetafileRenderingOptionsData {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 140
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/580/MetafileRenderingOptionsData.java\nindex b42eb23a94b..e41af261b9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/580/MetafileRenderingOptionsData.java\n@@ -160,7 +160,7 @@ public class MetafileRenderingOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n     return\n         Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/580/MetafileRenderingOptionsData.java\nindex b42eb23a94b..e41af261b9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/580/MetafileRenderingOptionsData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/580/MetafileRenderingOptionsData.java\n@@ -160,7 +160,7 @@ public class MetafileRenderingOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n     return\n         Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}