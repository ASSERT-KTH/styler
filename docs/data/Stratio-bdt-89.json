{
    "project_name": "Stratio-bdt",
    "error_id": "89",
    "information": {
        "errors": [
            {
                "line": "128",
                "severity": "error",
                "message": "'CTOR_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @throws IOException\n     */\n    public CucumberReporter(String url, String cClass, String additional) throws IOException {\n        this.url = url;\n        this.cClass = cClass;\n        this.additional = additional;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/89/CucumberReporter.java\nindex 8ebc57f0e27..6bae7264096 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/89/CucumberReporter.java\n@@ -125,6 +125,7 @@ public class CucumberReporter implements Formatter, Reporter {\n      * @param cClass\n      * @throws IOException\n      */\n+\n     public CucumberReporter(String url, String cClass, String additional) throws IOException {\n         this.url = url;\n         this.cClass = cClass;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/89/CucumberReporter.java\nindex 8ebc57f0e27..0204dd7df6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/89/CucumberReporter.java\n@@ -62,7 +62,8 @@ public class CucumberReporter implements Formatter, Reporter {\n \n     public static final int DEFAULT_MAX_LENGTH = 140;\n \n-    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n+    private static final SimpleDateFormat DATE_FORMAT =\n+        new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n \n     private static final String STATUS = \"status\";\n \n@@ -84,7 +85,7 @@ public class CucumberReporter implements Formatter, Reporter {\n \n     private Writer writer;\n \n-    private Writer  writerJunit;\n+    private Writer writerJunit;\n \n     private Element clazz;\n \n@@ -117,7 +118,8 @@ public class CucumberReporter implements Formatter, Reporter {\n     private String additional;\n \n     private final Logger logger = LoggerFactory.getLogger(this.getClass()\n-            .getCanonicalName());\n+        .getCanonicalName());\n+\n     /**\n      * Constructor of cucumberReporter.\n      *\n@@ -150,7 +152,8 @@ public class CucumberReporter implements Formatter, Reporter {\n     }\n \n     @Override\n-    public void syntaxError(String state, String event, List<String> legalEvents, String uri, Integer line) {\n+    public void syntaxError(String state, String event, List<String> legalEvents, String uri,\n+                            Integer line) {\n     }\n \n     @Override\n@@ -209,7 +212,7 @@ public class CucumberReporter implements Formatter, Reporter {\n     public void step(Step step) {\n         boolean bgstep = false;\n         if (background != null && (background.getLineRange().getLast() <= step.getLine())\n-                && (step.getLine() >= background.getLineRange().getFirst())) {\n+            && (step.getLine() >= background.getLineRange().getFirst())) {\n             tmpStepsBG.add(step);\n             bgstep = true;\n         }\n@@ -225,8 +228,9 @@ public class CucumberReporter implements Formatter, Reporter {\n     public void endOfScenarioLifeCycle(Scenario scenario) {\n \n         try {\n-            testMethod.finish(document, root, this.position, scenario.getTags(), jUnitDocument, jUnitRoot);\n-        } catch (ExecutionException  | InterruptedException  | IOException e) {\n+            testMethod.finish(document, root, this.position, scenario.getTags(), jUnitDocument,\n+                jUnitRoot);\n+        } catch (ExecutionException | InterruptedException | IOException e) {\n             e.printStackTrace();\n         }\n \n@@ -248,16 +252,20 @@ public class CucumberReporter implements Formatter, Reporter {\n     @Override\n     public void done() {\n         try {\n-            results.setAttribute(\"total\", String.valueOf(getElementsCountByAttribute(suite, STATUS, \".*\")));\n-            results.setAttribute(\"passed\", String.valueOf(getElementsCountByAttribute(suite, STATUS, \"PASS\")));\n-            results.setAttribute(\"failed\", String.valueOf(getElementsCountByAttribute(suite, STATUS, \"FAIL\")));\n-            results.setAttribute(\"skipped\", String.valueOf(getElementsCountByAttribute(suite, STATUS, \"SKIP\")));\n+            results.setAttribute(\"total\",\n+                String.valueOf(getElementsCountByAttribute(suite, STATUS, \".*\")));\n+            results.setAttribute(\"passed\",\n+                String.valueOf(getElementsCountByAttribute(suite, STATUS, \"PASS\")));\n+            results.setAttribute(\"failed\",\n+                String.valueOf(getElementsCountByAttribute(suite, STATUS, \"FAIL\")));\n+            results.setAttribute(\"skipped\",\n+                String.valueOf(getElementsCountByAttribute(suite, STATUS, \"SKIP\")));\n             suite.setAttribute(\"name\", CucumberReporter.class.getName());\n             suite.setAttribute(\"duration-ms\",\n-                    String.valueOf(getTotalDuration(suite.getElementsByTagName(\"test-method\"))));\n+                String.valueOf(getTotalDuration(suite.getElementsByTagName(\"test-method\"))));\n             test.setAttribute(\"name\", CucumberReporter.class.getName());\n             test.setAttribute(\"duration-ms\",\n-                    String.valueOf(getTotalDuration(suite.getElementsByTagName(\"test-method\"))));\n+                String.valueOf(getTotalDuration(suite.getElementsByTagName(\"test-method\"))));\n             Transformer transformer = TransformerFactory.newInstance().newTransformer();\n             transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n \n@@ -273,12 +281,15 @@ public class CucumberReporter implements Formatter, Reporter {\n             DOMSource domSource = new DOMSource(document);\n             transformer.transform(domSource, streamResult);\n             jUnitSuite.setAttribute(\"name\", callerClass + \".\" + featureName);\n-            jUnitSuite.setAttribute(\"tests\", String.valueOf(getElementsCountByAttribute(suite, STATUS, \".*\")));\n-            jUnitSuite.setAttribute(\"failures\", String.valueOf(getElementsCountByAttribute(suite, STATUS, \"FAIL\")));\n-            jUnitSuite.setAttribute(\"skipped\", String.valueOf(getElementsCountByAttribute(suite, STATUS, \"SKIP\")));\n+            jUnitSuite.setAttribute(\"tests\",\n+                String.valueOf(getElementsCountByAttribute(suite, STATUS, \".*\")));\n+            jUnitSuite.setAttribute(\"failures\",\n+                String.valueOf(getElementsCountByAttribute(suite, STATUS, \"FAIL\")));\n+            jUnitSuite.setAttribute(\"skipped\",\n+                String.valueOf(getElementsCountByAttribute(suite, STATUS, \"SKIP\")));\n             jUnitSuite.setAttribute(\"timestamp\", new java.util.Date().toString());\n             jUnitSuite.setAttribute(\"time\",\n-                    String.valueOf(getTotalDurationMs(suite.getElementsByTagName(\"test-method\"))));\n+                String.valueOf(getTotalDurationMs(suite.getElementsByTagName(\"test-method\"))));\n             Transformer transformerJunit = TransformerFactory.newInstance().newTransformer();\n             transformerJunit.setOutputProperty(OutputKeys.INDENT, \"yes\");\n \n@@ -330,11 +341,13 @@ public class CucumberReporter implements Formatter, Reporter {\n         testMethod.hooks.add(result);\n     }\n \n-    private int getElementsCountByAttribute(Node node, String attributeName, String attributeValue) {\n+    private int getElementsCountByAttribute(Node node, String attributeName,\n+                                            String attributeValue) {\n         int count = 0;\n \n         for (int i = 0; i < node.getChildNodes().getLength(); i++) {\n-            count += getElementsCountByAttribute(node.getChildNodes().item(i), attributeName, attributeValue);\n+            count += getElementsCountByAttribute(node.getChildNodes().item(i), attributeName,\n+                attributeValue);\n         }\n \n         NamedNodeMap attributes = node.getAttributes();\n@@ -405,7 +418,8 @@ public class CucumberReporter implements Formatter, Reporter {\n                 JunitElement.setAttribute(\"name\", name);\n                 ThreadProperty.set(\"dataSet\", \"\");\n             } else {\n-                String data = obtainOutlineScenariosExamples(examplesData.getRows().get(iteration).getCells().toString());\n+                String data = obtainOutlineScenariosExamples(\n+                    examplesData.getRows().get(iteration).getCells().toString());\n                 element.setAttribute(\"name\", name + \" \" + data);\n                 JunitElement.setAttribute(\"name\", name + \" \" + data);\n                 ThreadProperty.set(\"dataSet\", data);\n@@ -422,14 +436,13 @@ public class CucumberReporter implements Formatter, Reporter {\n          * Checks the passed by ticket parameter validity against a Attlasian Jira account\n          *\n          * @param ticket\n-\n          */\n-        private boolean isValidJiraTicket (String ticket) {\n+        private boolean isValidJiraTicket(String ticket) {\n             String userJira = System.getProperty(\"usernamejira\");\n             String passJira = System.getProperty(\"passwordjira\");\n             Boolean validTicket = false;\n \n-            if ((userJira != null) || (passJira != null)  || \"\".equals(ticket)) {\n+            if ((userJira != null) || (passJira != null) || \"\".equals(ticket)) {\n                 CommonG comm = new CommonG();\n                 AsyncHttpClient client = new AsyncHttpClient();\n                 Future<Response> response = null;\n@@ -441,10 +454,12 @@ public class CucumberReporter implements Formatter, Reporter {\n                 comm.setClient(client);\n                 String endpoint = \"/rest/api/2/issue/\" + ticket;\n                 try {\n-                    response = comm.generateRequest(\"GET\", true, userJira, passJira, endpoint, \"\", \"json\");\n+                    response =\n+                        comm.generateRequest(\"GET\", true, userJira, passJira, endpoint, \"\", \"json\");\n                     comm.setResponse(endpoint, response.get());\n                 } catch (Exception e) {\n-                    logger.error(\"Rest API Jira connection error \" + String.valueOf(comm.getResponse().getStatusCode()));\n+                    logger.error(\"Rest API Jira connection error \" +\n+                        String.valueOf(comm.getResponse().getStatusCode()));\n                     return false;\n                 }\n \n@@ -475,8 +490,10 @@ public class CucumberReporter implements Formatter, Reporter {\n          * @param position\n          * @param tags\n          */\n-        public void finish(Document doc, Element element, Integer position, List<Tag> tags, Document docJunit,\n-                           Element Junit) throws ExecutionException, InterruptedException, IOException {\n+        public void finish(Document doc, Element element, Integer position, List<Tag> tags,\n+                           Document docJunit,\n+                           Element Junit)\n+            throws ExecutionException, InterruptedException, IOException {\n \n             Junit.setAttribute(\"time\", String.valueOf(calculateTotalDurationString() / 1000));\n \n@@ -508,13 +525,15 @@ public class CucumberReporter implements Formatter, Reporter {\n \n             if (tagList.contains(\"@ignore\")) {\n                 ignored = true;\n-                for (String tag: tagList) {\n+                for (String tag : tagList) {\n                     Pattern pattern = Pattern.compile(\"@tillfixed\\\\((.*?)\\\\)\");\n                     Matcher matcher = pattern.matcher(tag);\n                     if (matcher.find()) {\n                         ticket = matcher.group(1);\n                         if (isValidJiraTicket(ticket)) {\n-                            exceptionmsg = \"This scenario was skipped because of a pending Jira ticket: \" + ticket;\n+                            exceptionmsg =\n+                                \"This scenario was skipped because of a pending Jira ticket: \" +\n+                                    ticket;\n                             ignoreReason = true;\n                         }\n                         break;\n@@ -545,16 +564,21 @@ public class CucumberReporter implements Formatter, Reporter {\n             String msg2 = \"\";\n \n             if (ignoreRun) {\n-                docJunit.getDocumentElement().getLastChild().removeChild(docJunit.getDocumentElement().getLastChild().getLastChild());\n+                docJunit.getDocumentElement().getLastChild()\n+                    .removeChild(docJunit.getDocumentElement().getLastChild().getLastChild());\n                 return;\n-            } else if (ignored && (!ignoreReason || (ignoreReason && isJiraTicketDone) || (ignoreReason && isWrongTicket))) {\n+            } else if (ignored && (!ignoreReason || (ignoreReason && isJiraTicketDone) ||\n+                (ignoreReason && isWrongTicket))) {\n                 element.setAttribute(STATUS, \"FAIL\");\n                 if (isJiraTicketDone) {\n-                    msg1 = \"The scenario was ignored due an already done (or in progress) ticket. \" + \"https://stratio.atlassian.net/browse/\" + ticket;\n+                    msg1 =\n+                        \"The scenario was ignored due an already done (or in progress) ticket. \" +\n+                            \"https://stratio.atlassian.net/browse/\" + ticket;\n                 } else if (isWrongTicket) {\n                     msg1 = \"The scenario was ignored due to unexistant ticket \" + ticket;\n                 } else {\n-                    msg1 = \"The scenario has no valid reason for being ignored. \\n Valid values: @tillfixed(ISSUE-007) @unimplemented @manual @toocomplex\";\n+                    msg1 =\n+                        \"The scenario has no valid reason for being ignored. \\n Valid values: @tillfixed(ISSUE-007) @unimplemented @manual @toocomplex\";\n                 }\n \n                 Element exception = createException(doc, msg1, msg1, msg2);\n@@ -565,19 +589,22 @@ public class CucumberReporter implements Formatter, Reporter {\n             } else if (ignored && ignoreReason) {\n                 element.setAttribute(STATUS, \"SKIP\");\n                 Element exception = createException(doc, \"skipped\",\n-                        exceptionmsg, \" \");\n+                    exceptionmsg, \" \");\n                 element.appendChild(exception);\n                 Element skippedElementJunit = docJunit.createElement(\"skipped\");\n                 Junit.appendChild(skippedElementJunit);\n                 Element systemOut = systemOutPrintJunit(docJunit, exceptionmsg);\n                 Junit.appendChild(systemOut);\n \n-            } else if ((stringBuilder.toString().contains(\"${\")) || (stringBuilder.toString().contains(\"!{\")) || (stringBuilder.toString().contains(\"@{\"))) {\n+            } else if ((stringBuilder.toString().contains(\"${\")) ||\n+                (stringBuilder.toString().contains(\"!{\")) ||\n+                (stringBuilder.toString().contains(\"@{\"))) {\n                 element.setAttribute(STATUS, \"FAIL\");\n                 Element exception = createException(doc, \"The scenario has unreplaced variables.\",\n-                        \"The scenario has unreplaced variables.\", \" \");\n+                    \"The scenario has unreplaced variables.\", \" \");\n                 element.appendChild(exception);\n-                Element exceptionJunit = createExceptionJunit(docJunit, \"The scenario has unreplaced variables.\",\n+                Element exceptionJunit =\n+                    createExceptionJunit(docJunit, \"The scenario has unreplaced variables.\",\n                         \"The scenario has unreplaced variables.\", \" \");\n                 Junit.appendChild(exceptionJunit);\n                 Element systemOut = systemOutPrintJunit(docJunit, stringBuilder.toString());\n@@ -586,7 +613,8 @@ public class CucumberReporter implements Formatter, Reporter {\n                 for (Result result : results) {\n                     if (\"failed\".equals(result.getStatus())) {\n                         failed = result;\n-                    } else if (\"undefined\".equals(result.getStatus()) || \"pending\".equals(result.getStatus())) {\n+                    } else if (\"undefined\".equals(result.getStatus()) ||\n+                        \"pending\".equals(result.getStatus())) {\n                         skipped = result;\n                     }\n                 }\n@@ -600,20 +628,24 @@ public class CucumberReporter implements Formatter, Reporter {\n                     StringWriter stringWriter = new StringWriter();\n                     failed.getError().printStackTrace(new PrintWriter(stringWriter));\n                     Element exception = createException(doc, failed.getError().getClass().getName(),\n-                            stringBuilder.toString(), stringWriter.toString());\n+                        stringBuilder.toString(), stringWriter.toString());\n                     element.appendChild(exception);\n-                    Element exceptionJunit = createExceptionJunit(docJunit, failed.getError().getClass().getName(),\n+                    Element exceptionJunit =\n+                        createExceptionJunit(docJunit, failed.getError().getClass().getName(),\n                             stringBuilder.toString(), stringWriter.toString());\n                     Junit.appendChild(exceptionJunit);\n                 } else if (skipped != null) {\n                     if (treatSkippedAsFailure) {\n                         element.setAttribute(STATUS, \"FAIL\");\n-                        Element exception = createException(doc, \"The scenario has pending or undefined step(s)\",\n-                                stringBuilder.toString(), \"The scenario has pending or undefined step(s)\");\n+                        Element exception =\n+                            createException(doc, \"The scenario has pending or undefined step(s)\",\n+                                stringBuilder.toString(),\n+                                \"The scenario has pending or undefined step(s)\");\n                         element.appendChild(exception);\n                         Element exceptionJunit = createExceptionJunit(docJunit,\n-                                \"The scenario has pending or undefined step(s)\", stringBuilder.toString(),\n-                                \"The scenario has pending or undefined step(s)\");\n+                            \"The scenario has pending or undefined step(s)\",\n+                            stringBuilder.toString(),\n+                            \"The scenario has pending or undefined step(s)\");\n                         Junit.appendChild(exceptionJunit);\n                     } else {\n                         element.setAttribute(STATUS, \"SKIP\");\n@@ -625,7 +657,8 @@ public class CucumberReporter implements Formatter, Reporter {\n \n                 } else {\n                     element.setAttribute(STATUS, \"PASS\");\n-                    Element exception = createException(doc, \"NonRealException\", stringBuilder.toString(), \" \");\n+                    Element exception =\n+                        createException(doc, \"NonRealException\", stringBuilder.toString(), \" \");\n                     element.appendChild(exception);\n                     Element systemOut = systemOutPrintJunit(docJunit, stringBuilder.toString());\n                     Junit.appendChild(systemOut);\n@@ -652,13 +685,15 @@ public class CucumberReporter implements Formatter, Reporter {\n                 String resultStatusWarn = \"*\";\n                 if (i < results.size()) {\n                     resultStatus = results.get(i).getStatus();\n-                    resultStatusWarn = ((results.get(i).getError() != null) && (results.get(i).getStatus()\n+                    resultStatusWarn =\n+                        ((results.get(i).getError() != null) && (results.get(i).getStatus()\n                             .equals(\"passed\"))) ? \"(W)\" : \"\";\n                 }\n                 sb.append(mergedsteps.get(i).getKeyword());\n                 sb.append(mergedsteps.get(i).getName());\n                 int len = 0;\n-                len = mergedsteps.get(i).getKeyword().length() + mergedsteps.get(i).getName().length();\n+                len = mergedsteps.get(i).getKeyword().length() +\n+                    mergedsteps.get(i).getName().length();\n                 if (mergedsteps.get(i).getRows() != null) {\n                     for (DataTableRow row : mergedsteps.get(i).getRows()) {\n                         StringBuilder strrowBuilder = new StringBuilder();\n@@ -682,7 +717,9 @@ public class CucumberReporter implements Formatter, Reporter {\n             }\n             String cap = \"\";\n             if (!(\"\".equals(cap = hasCapture(featureName, scenario.getName())))) {\n-                sb.append(\"evidence @ \" + System.getProperty(\"BUILD_URL\", \"\") + \"/artifact/testsAT/\" + cap.replaceAll(\"\", \"\"));\n+                sb.append(\n+                    \"evidence @ \" + System.getProperty(\"BUILD_URL\", \"\") + \"/artifact/testsAT/\" +\n+                        cap.replaceAll(\"\", \"\"));\n             }\n         }\n \n@@ -698,21 +735,24 @@ public class CucumberReporter implements Formatter, Reporter {\n             Collection<File> files = FileUtils.listFiles(dir, imgext, true);\n \n             for (File file : files) {\n-                if (file.getPath().contains(featureName.replaceAll(\" \", \"_\") + \".\" + scenario.getName().replaceAll(\" \", \"_\")) &&\n-                        file.getName().contains(\"assert\")) {\n+                if (file.getPath().contains(featureName.replaceAll(\" \", \"_\") + \".\" +\n+                    scenario.getName().replaceAll(\" \", \"_\")) &&\n+                    file.getName().contains(\"assert\")) {\n                     return file.toString();\n                 }\n             }\n             return \"\";\n         }\n \n-        private Element createException(Document doc, String clazz, String message, String stacktrace) {\n+        private Element createException(Document doc, String clazz, String message,\n+                                        String stacktrace) {\n             Element exceptionElement = doc.createElement(\"exception\");\n             exceptionElement.setAttribute(\"class\", clazz);\n \n             if (message != null) {\n                 Element messageElement = doc.createElement(\"message\");\n-                messageElement.appendChild(doc.createCDATASection(\"\\r\\n<pre>\\r\\n\" + message + \"\\r\\n</pre>\\r\\n\"));\n+                messageElement.appendChild(\n+                    doc.createCDATASection(\"\\r\\n<pre>\\r\\n\" + message + \"\\r\\n</pre>\\r\\n\"));\n                 exceptionElement.appendChild(messageElement);\n             }\n \n@@ -723,7 +763,8 @@ public class CucumberReporter implements Formatter, Reporter {\n             return exceptionElement;\n         }\n \n-        private Element createExceptionJunit(Document doc, String clazz, String message, String stacktrace) {\n+        private Element createExceptionJunit(Document doc, String clazz, String message,\n+                                             String stacktrace) {\n             Element exceptionElement = doc.createElement(\"failure\");\n             if (message != null) {\n                 exceptionElement.setAttribute(\"message\", \"\\r\\n\" + message + \"\\r\\n\");\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "233",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "479",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "698",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/89/CucumberReporter.java\nindex 8ebc57f0e27..b07b5624666 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/89/CucumberReporter.java\n@@ -84,7 +84,7 @@ public class CucumberReporter implements Formatter, Reporter {\n \n     private Writer writer;\n \n-    private Writer  writerJunit;\n+    private Writer writerJunit;\n \n     private Element clazz;\n \n@@ -118,7 +118,8 @@ public class CucumberReporter implements Formatter, Reporter {\n \n     private final Logger logger = LoggerFactory.getLogger(this.getClass()\n             .getCanonicalName());\n-    /**\n+\n+/**\n      * Constructor of cucumberReporter.\n      *\n      * @param url\n@@ -226,11 +227,10 @@ public class CucumberReporter implements Formatter, Reporter {\n \n         try {\n             testMethod.finish(document, root, this.position, scenario.getTags(), jUnitDocument, jUnitRoot);\n-        } catch (ExecutionException  | InterruptedException  | IOException e) {\n+        } catch (ExecutionException | InterruptedException | IOException e) {\n             e.printStackTrace();\n         }\n-\n-        this.position++;\n+this.position++;\n         if ((tmpExamples != null) && (iteration >= tmpExamples.getRows().size())) {\n             tmpExamples = null;\n         }\n@@ -424,12 +424,12 @@ public class CucumberReporter implements Formatter, Reporter {\n          * @param ticket\n \n          */\n-        private boolean isValidJiraTicket (String ticket) {\n+        private boolean isValidJiraTicket(String ticket) {\n             String userJira = System.getProperty(\"usernamejira\");\n             String passJira = System.getProperty(\"passwordjira\");\n             Boolean validTicket = false;\n \n-            if ((userJira != null) || (passJira != null)  || \"\".equals(ticket)) {\n+            if ((userJira != null) || (passJira != null) || \"\".equals(ticket)) {\n                 CommonG comm = new CommonG();\n                 AsyncHttpClient client = new AsyncHttpClient();\n                 Future<Response> response = null;\n@@ -475,10 +475,8 @@ public class CucumberReporter implements Formatter, Reporter {\n          * @param position\n          * @param tags\n          */\n-        public void finish(Document doc, Element element, Integer position, List<Tag> tags, Document docJunit,\n-                           Element Junit) throws ExecutionException, InterruptedException, IOException {\n-\n-            Junit.setAttribute(\"time\", String.valueOf(calculateTotalDurationString() / 1000));\n+        public void finish(Document doc, Element element, Integer position, List<Tag> tags, Document docJunit, Element Junit) throws ExecutionException, InterruptedException, IOException {\n+    Junit.setAttribute(\"time\", String.valueOf(calculateTotalDurationString() / 1000));\n \n             element.setAttribute(\"duration-ms\", String.valueOf(calculateTotalDurationString()));\n             element.setAttribute(\"finished-at\", DATE_FORMAT.format(new Date()));\n@@ -611,9 +609,7 @@ public class CucumberReporter implements Formatter, Reporter {\n                         Element exception = createException(doc, \"The scenario has pending or undefined step(s)\",\n                                 stringBuilder.toString(), \"The scenario has pending or undefined step(s)\");\n                         element.appendChild(exception);\n-                        Element exceptionJunit = createExceptionJunit(docJunit,\n-                                \"The scenario has pending or undefined step(s)\", stringBuilder.toString(),\n-                                \"The scenario has pending or undefined step(s)\");\n+                        Element exceptionJunit = createExceptionJunit(docJunit, \"The scenario has pending or undefined step(s)\", stringBuilder.toString(), \"The scenario has pending or undefined step(s)\");\n                         Junit.appendChild(exceptionJunit);\n                     } else {\n                         element.setAttribute(STATUS, \"SKIP\");\n@@ -698,9 +694,8 @@ public class CucumberReporter implements Formatter, Reporter {\n             Collection<File> files = FileUtils.listFiles(dir, imgext, true);\n \n             for (File file : files) {\n-                if (file.getPath().contains(featureName.replaceAll(\" \", \"_\") + \".\" + scenario.getName().replaceAll(\" \", \"_\")) &&\n-                        file.getName().contains(\"assert\")) {\n-                    return file.toString();\n+                if (file.getPath().contains(featureName.replaceAll(\" \", \"_\") + \".\" + scenario.getName().replaceAll(\" \", \"_\")) && file.getName().contains(\"assert\")) {\n+    return file.toString();\n                 }\n             }\n             return \"\";\n@@ -738,4 +733,4 @@ public class CucumberReporter implements Formatter, Reporter {\n             return systemOut;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/89/CucumberReporter.java\nindex 8ebc57f0e27..6bae7264096 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/89/CucumberReporter.java\n@@ -125,6 +125,7 @@ public class CucumberReporter implements Formatter, Reporter {\n      * @param cClass\n      * @throws IOException\n      */\n+\n     public CucumberReporter(String url, String cClass, String additional) throws IOException {\n         this.url = url;\n         this.cClass = cClass;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "129",
                    "column": "20",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/89/CucumberReporter.java\nindex 8ebc57f0e27..88f27f8297a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/89/CucumberReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/89/CucumberReporter.java\n@@ -125,8 +125,9 @@ public class CucumberReporter implements Formatter, Reporter {\n      * @param cClass\n      * @throws IOException\n      */\n-    public CucumberReporter(String url, String cClass, String additional) throws IOException {\n-        this.url = url;\n+    public CucumberReporter(String url, String cClass, String additional) throws\n+        IOException{\n+         this.url = url;\n         this.cClass = cClass;\n         this.additional = additional;\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}