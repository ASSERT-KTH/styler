{
    "project_name": "Activiti-Activiti",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.deployer;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.ArrayList;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/30/ParsedDeploymentBuilder.java\nindex d416e398325..088660325b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/30/ParsedDeploymentBuilder.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.io.ByteArrayInputStream;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/30/ParsedDeploymentBuilder.java\nindex d416e398325..77b1085c49e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/30/ParsedDeploymentBuilder.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.io.ByteArrayInputStream;\n@@ -29,82 +30,82 @@ import org.slf4j.LoggerFactory;\n \n public class ParsedDeploymentBuilder {\n \n-  private static final Logger log = LoggerFactory.getLogger(ParsedDeploymentBuilder.class);\n-\n-  protected DeploymentEntity deployment;\n-  protected BpmnParser bpmnParser;\n-  protected Map<String, Object> deploymentSettings;\n-\n-  public ParsedDeploymentBuilder(DeploymentEntity deployment, \n-      BpmnParser bpmnParser, Map<String, Object> deploymentSettings) {\n-    this.deployment = deployment;\n-    this.bpmnParser = bpmnParser;\n-    this.deploymentSettings = deploymentSettings;\n-  }\n-\n-  public ParsedDeployment build() {\n-    List<ProcessDefinitionEntity> processDefinitions = new ArrayList<ProcessDefinitionEntity>();\n-    Map<ProcessDefinitionEntity, BpmnParse> processDefinitionsToBpmnParseMap \n-      = new LinkedHashMap<ProcessDefinitionEntity, BpmnParse>();\n-    Map<ProcessDefinitionEntity, ResourceEntity> processDefinitionsToResourceMap \n-      = new LinkedHashMap<ProcessDefinitionEntity, ResourceEntity>();\n-\n-    for (ResourceEntity resource : deployment.getResources().values()) {\n-      if (isBpmnResource(resource.getName())) {\n-        log.debug(\"Processing BPMN resource {}\", resource.getName());\n-        BpmnParse parse = createBpmnParseFromResource(resource);\n-        for (ProcessDefinitionEntity processDefinition : parse.getProcessDefinitions()) {\n-          processDefinitions.add(processDefinition);\n-          processDefinitionsToBpmnParseMap.put(processDefinition, parse);\n-          processDefinitionsToResourceMap.put(processDefinition, resource);\n+    private static final Logger log = LoggerFactory.getLogger(ParsedDeploymentBuilder.class);\n+\n+    protected DeploymentEntity deployment;\n+    protected BpmnParser bpmnParser;\n+    protected Map<String, Object> deploymentSettings;\n+\n+    public ParsedDeploymentBuilder(DeploymentEntity deployment,\n+                                   BpmnParser bpmnParser, Map<String, Object> deploymentSettings) {\n+        this.deployment = deployment;\n+        this.bpmnParser = bpmnParser;\n+        this.deploymentSettings = deploymentSettings;\n+    }\n+\n+    public ParsedDeployment build() {\n+        List<ProcessDefinitionEntity> processDefinitions = new ArrayList<ProcessDefinitionEntity>();\n+        Map<ProcessDefinitionEntity, BpmnParse> processDefinitionsToBpmnParseMap\n+                = new LinkedHashMap<ProcessDefinitionEntity, BpmnParse>();\n+        Map<ProcessDefinitionEntity, ResourceEntity> processDefinitionsToResourceMap\n+                = new LinkedHashMap<ProcessDefinitionEntity, ResourceEntity>();\n+\n+        for (ResourceEntity resource : deployment.getResources().values()) {\n+            if (isBpmnResource(resource.getName())) {\n+                log.debug(\"Processing BPMN resource {}\", resource.getName());\n+                BpmnParse parse = createBpmnParseFromResource(resource);\n+                for (ProcessDefinitionEntity processDefinition : parse.getProcessDefinitions()) {\n+                    processDefinitions.add(processDefinition);\n+                    processDefinitionsToBpmnParseMap.put(processDefinition, parse);\n+                    processDefinitionsToResourceMap.put(processDefinition, resource);\n+                }\n+            }\n         }\n-      }\n+\n+        return new ParsedDeployment(deployment, processDefinitions,\n+                processDefinitionsToBpmnParseMap, processDefinitionsToResourceMap);\n     }\n \n-    return new ParsedDeployment(deployment, processDefinitions, \n-        processDefinitionsToBpmnParseMap, processDefinitionsToResourceMap);\n-  }\n+    protected BpmnParse createBpmnParseFromResource(ResourceEntity resource) {\n+        String resourceName = resource.getName();\n+        ByteArrayInputStream inputStream = new ByteArrayInputStream(resource.getBytes());\n \n-  protected BpmnParse createBpmnParseFromResource(ResourceEntity resource) {\n-    String resourceName = resource.getName();\n-    ByteArrayInputStream inputStream = new ByteArrayInputStream(resource.getBytes());\n+        BpmnParse bpmnParse = bpmnParser.createParse()\n+                .sourceInputStream(inputStream)\n+                .setSourceSystemId(resourceName)\n+                .deployment(deployment)\n+                .name(resourceName);\n \n-    BpmnParse bpmnParse = bpmnParser.createParse()\n-        .sourceInputStream(inputStream)\n-        .setSourceSystemId(resourceName)\n-        .deployment(deployment)\n-        .name(resourceName);\n+        if (deploymentSettings != null) {\n \n-    if (deploymentSettings != null) {\n+            // Schema validation if needed\n+            if (deploymentSettings.containsKey(DeploymentSettings.IS_BPMN20_XSD_VALIDATION_ENABLED)) {\n+                bpmnParse.setValidateSchema((Boolean) deploymentSettings.get(DeploymentSettings.IS_BPMN20_XSD_VALIDATION_ENABLED));\n+            }\n \n-      // Schema validation if needed\n-      if (deploymentSettings.containsKey(DeploymentSettings.IS_BPMN20_XSD_VALIDATION_ENABLED)) {\n-        bpmnParse.setValidateSchema((Boolean) deploymentSettings.get(DeploymentSettings.IS_BPMN20_XSD_VALIDATION_ENABLED));\n-      }\n+            // Process validation if needed\n+            if (deploymentSettings.containsKey(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED)) {\n+                bpmnParse.setValidateProcess((Boolean) deploymentSettings.get(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED));\n+            }\n \n-      // Process validation if needed\n-      if (deploymentSettings.containsKey(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED)) {\n-        bpmnParse.setValidateProcess((Boolean) deploymentSettings.get(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED));\n-      }\n+        } else {\n+            // On redeploy, we assume it is validated at the first deploy\n+            bpmnParse.setValidateSchema(false);\n+            bpmnParse.setValidateProcess(false);\n+        }\n \n-    } else {\n-      // On redeploy, we assume it is validated at the first deploy\n-      bpmnParse.setValidateSchema(false);\n-      bpmnParse.setValidateProcess(false);\n-    }\n-    \n-    bpmnParse.execute();\n-    return bpmnParse;\n-  }\n-\n-  protected boolean isBpmnResource(String resourceName) {\n-    for (String suffix : ResourceNameUtil.BPMN_RESOURCE_SUFFIXES) {\n-      if (resourceName.endsWith(suffix)) {\n-        return true;\n-      }\n+        bpmnParse.execute();\n+        return bpmnParse;\n     }\n \n-    return false;\n-  }\n+    protected boolean isBpmnResource(String resourceName) {\n+        for (String suffix : ResourceNameUtil.BPMN_RESOURCE_SUFFIXES) {\n+            if (resourceName.endsWith(suffix)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n \n }\n\\ No newline at end of file\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/30/ParsedDeploymentBuilder.java\nindex d416e398325..4d3ea15c4fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/30/ParsedDeploymentBuilder.java\n@@ -17,7 +17,6 @@ import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.activiti.engine.impl.bpmn.parser.BpmnParse;\n import org.activiti.engine.impl.bpmn.parser.BpmnParser;\n import org.activiti.engine.impl.cmd.DeploymentSettings;\n@@ -27,16 +26,15 @@ import org.activiti.engine.impl.persistence.entity.ResourceEntity;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public class ParsedDeploymentBuilder {\n \n   private static final Logger log = LoggerFactory.getLogger(ParsedDeploymentBuilder.class);\n-\n   protected DeploymentEntity deployment;\n   protected BpmnParser bpmnParser;\n   protected Map<String, Object> deploymentSettings;\n \n-  public ParsedDeploymentBuilder(DeploymentEntity deployment, \n-      BpmnParser bpmnParser, Map<String, Object> deploymentSettings) {\n+  public ParsedDeploymentBuilder(DeploymentEntity deployment, BpmnParser bpmnParser, Map<String, Object> deploymentSettings) {\n     this.deployment = deployment;\n     this.bpmnParser = bpmnParser;\n     this.deploymentSettings = deploymentSettings;\n@@ -44,37 +42,28 @@ public class ParsedDeploymentBuilder {\n \n   public ParsedDeployment build() {\n     List<ProcessDefinitionEntity> processDefinitions = new ArrayList<ProcessDefinitionEntity>();\n-    Map<ProcessDefinitionEntity, BpmnParse> processDefinitionsToBpmnParseMap \n-      = new LinkedHashMap<ProcessDefinitionEntity, BpmnParse>();\n-    Map<ProcessDefinitionEntity, ResourceEntity> processDefinitionsToResourceMap \n-      = new LinkedHashMap<ProcessDefinitionEntity, ResourceEntity>();\n-\n+    Map<ProcessDefinitionEntity, BpmnParse> processDefinitionsToBpmnParseMap = new LinkedHashMap<ProcessDefinitionEntity, BpmnParse>();\n+    Map<ProcessDefinitionEntity, ResourceEntity> processDefinitionsToResourceMap = new LinkedHashMap<ProcessDefinitionEntity, ResourceEntity>();\n     for (ResourceEntity resource : deployment.getResources().values()) {\n       if (isBpmnResource(resource.getName())) {\n-        log.debug(\"Processing BPMN resource {}\", resource.getName());\n+        log.debug(\"Processing BPMN resource {}\",\n+                  resource.getName());\n+\n         BpmnParse parse = createBpmnParseFromResource(resource);\n         for (ProcessDefinitionEntity processDefinition : parse.getProcessDefinitions()) {\n-          processDefinitions.add(processDefinition);\n-          processDefinitionsToBpmnParseMap.put(processDefinition, parse);\n-          processDefinitionsToResourceMap.put(processDefinition, resource);\n+            processDefinitions.add(processDefinition);\n+            processDefinitionsToBpmnParseMap.put(processDefinition, parse);\n+            processDefinitionsToResourceMap.put(processDefinition, resource);\n         }\n       }\n     }\n-\n-    return new ParsedDeployment(deployment, processDefinitions, \n-        processDefinitionsToBpmnParseMap, processDefinitionsToResourceMap);\n+    return new ParsedDeployment(deployment, processDefinitions, processDefinitionsToBpmnParseMap, processDefinitionsToResourceMap);\n   }\n \n   protected BpmnParse createBpmnParseFromResource(ResourceEntity resource) {\n     String resourceName = resource.getName();\n     ByteArrayInputStream inputStream = new ByteArrayInputStream(resource.getBytes());\n-\n-    BpmnParse bpmnParse = bpmnParser.createParse()\n-        .sourceInputStream(inputStream)\n-        .setSourceSystemId(resourceName)\n-        .deployment(deployment)\n-        .name(resourceName);\n-\n+    BpmnParse bpmnParse = bpmnParser.createParse().sourceInputStream(inputStream).setSourceSystemId(resourceName).deployment(deployment).name(resourceName);\n     if (deploymentSettings != null) {\n \n       // Schema validation if needed\n@@ -86,13 +75,11 @@ public class ParsedDeploymentBuilder {\n       if (deploymentSettings.containsKey(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED)) {\n         bpmnParse.setValidateProcess((Boolean) deploymentSettings.get(DeploymentSettings.IS_PROCESS_VALIDATION_ENABLED));\n       }\n-\n     } else {\n       // On redeploy, we assume it is validated at the first deploy\n       bpmnParse.setValidateSchema(false);\n       bpmnParse.setValidateProcess(false);\n     }\n-    \n     bpmnParse.execute();\n     return bpmnParse;\n   }\n@@ -103,8 +90,6 @@ public class ParsedDeploymentBuilder {\n         return true;\n       }\n     }\n-\n     return false;\n   }\n-\n }\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/30/ParsedDeploymentBuilder.java\nindex d416e398325..088660325b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/30/ParsedDeploymentBuilder.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.io.ByteArrayInputStream;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/30/ParsedDeploymentBuilder.java\nindex d416e398325..088660325b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/30/ParsedDeploymentBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/30/ParsedDeploymentBuilder.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.io.ByteArrayInputStream;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}