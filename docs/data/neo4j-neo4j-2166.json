{
    "project_name": "neo4j-neo4j",
    "error_id": "2166",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2166/LegacyCredential.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2166/LegacyCredential.java\nindex a08cabd90f9..fdb11edd065 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2166/LegacyCredential.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2166/LegacyCredential.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.auth;\n \n import java.security.MessageDigest;\n@@ -37,26 +38,26 @@ public class LegacyCredential implements Credential\n     static final String DIGEST_ALGO = \"SHA-256\";\n     static final int ITERATIONS = 1;\n \n-    public static final LegacyCredential INACCESSIBLE = new LegacyCredential( new byte[]{}, new byte[]{} );\n+    public static final LegacyCredential INACCESSIBLE = new LegacyCredential(new byte[] {}, new byte[] {});\n \n     private static final SecureRandom random = new SecureRandom();\n \n     private final byte[] salt;\n     private final byte[] passwordHash;\n \n-    public static LegacyCredential forPassword( byte[] password )\n+    public static LegacyCredential forPassword(byte[] password)\n     {\n         byte[] salt = randomSalt();\n-        return new LegacyCredential( salt, hash( salt, password ) );\n+        return new LegacyCredential(salt, hash(salt, password));\n     }\n \n     // For testing purposes only!\n-    public static LegacyCredential forPassword( String password )\n+    public static LegacyCredential forPassword(String password)\n     {\n-        return forPassword( UTF8.encode( password ) );\n+        return forPassword(UTF8.encode(password));\n     }\n \n-    public LegacyCredential( byte[] salt, byte[] passwordHash )\n+    public LegacyCredential(byte[] salt, byte[] passwordHash)\n     {\n         this.salt = salt;\n         this.passwordHash = passwordHash;\n@@ -73,24 +74,24 @@ public class LegacyCredential implements Credential\n     }\n \n     @Override\n-    public boolean matchesPassword( byte[] password )\n+    public boolean matchesPassword(byte[] password)\n     {\n-        return byteEquals( passwordHash, hash( salt, password ) );\n+        return byteEquals(passwordHash, hash(salt, password));\n     }\n \n     // For testing purposes only!\n     @Override\n-    public boolean matchesPassword( String password )\n+    public boolean matchesPassword(String password)\n     {\n-        return byteEquals( passwordHash, hash( salt, UTF8.encode( password ) ) );\n+        return byteEquals(passwordHash, hash(salt, UTF8.encode(password)));\n     }\n \n     @Override\n     public String serialize()\n     {\n-        String encodedSalt = HexString.encodeHexString( this.salt() );\n-        String encodedPassword = HexString.encodeHexString( this.passwordHash() );\n-        return String.join( CREDENTIAL_SEPARATOR, LegacyCredential.DIGEST_ALGO, encodedPassword, encodedSalt, String.valueOf( ITERATIONS ) );\n+        String encodedSalt = HexString.encodeHexString(this.salt());\n+        String encodedPassword = HexString.encodeHexString(this.passwordHash());\n+        return String.join(CREDENTIAL_SEPARATOR, LegacyCredential.DIGEST_ALGO, encodedPassword, encodedSalt, String.valueOf(ITERATIONS));\n     }\n \n     /**\n@@ -99,16 +100,16 @@ public class LegacyCredential implements Credential\n      * Remember {@link #INACCESSIBLE} credentials should still execute loop for the length of given password.</p>\n      *\n      * @param actual the actual password\n-     * @param given password given by the user\n+     * @param given  password given by the user\n      * @return whether the two byte arrays are equal\n      */\n-    private static boolean byteEquals( byte[] actual, byte[] given )\n+    private static boolean byteEquals(byte[] actual, byte[] given)\n     {\n-        if ( actual == given )\n+        if (actual == given)\n         {\n             return true;\n         }\n-        if ( actual == null || given == null )\n+        if (actual == null || given == null)\n         {\n             return false;\n         }\n@@ -117,9 +118,9 @@ public class LegacyCredential implements Credential\n         int givenLength = given.length;\n         boolean result = true;\n \n-        for ( int i = 0; i < givenLength; ++i )\n+        for (int i = 0; i < givenLength; ++i)\n         {\n-            if ( actualLength > 0 )\n+            if (actualLength > 0)\n             {\n                 result &= actual[i % actualLength] == given[i];\n             }\n@@ -131,58 +132,57 @@ public class LegacyCredential implements Credential\n      * <p>Equality to always check for both salt and password hash as a safeguard against timing attack.</p>\n      */\n     @Override\n-    public boolean equals( Object o )\n+    public boolean equals(Object o)\n     {\n-        if ( this == o )\n+        if (this == o)\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+        if (o == null || getClass() != o.getClass())\n         {\n             return false;\n         }\n \n         LegacyCredential that = (LegacyCredential) o;\n \n-        boolean saltEquals = byteEquals( this.salt, that.salt );\n-        boolean passwordEquals = byteEquals( this.passwordHash, that.passwordHash );\n+        boolean saltEquals = byteEquals(this.salt, that.salt);\n+        boolean passwordEquals = byteEquals(this.passwordHash, that.passwordHash);\n         return saltEquals && passwordEquals;\n     }\n \n     @Override\n     public int hashCode()\n     {\n-        return 31 * Arrays.hashCode( salt ) + Arrays.hashCode( passwordHash );\n+        return 31 * Arrays.hashCode(salt) + Arrays.hashCode(passwordHash);\n     }\n \n     @Override\n     public String toString()\n     {\n         return \"Credential{\" +\n-               \"salt=0x\" + HexString.encodeHexString( salt ) +\n-               \", passwordHash=0x\" + HexString.encodeHexString( passwordHash ) +\n-               '}';\n+          \"salt=0x\" + HexString.encodeHexString(salt) +\n+          \", passwordHash=0x\" + HexString.encodeHexString(passwordHash) +\n+          '}';\n     }\n \n-    private static byte[] hash( byte[] salt, byte[] password )\n+    private static byte[] hash(byte[] salt, byte[] password)\n     {\n         try\n         {\n-            MessageDigest m = MessageDigest.getInstance( DIGEST_ALGO );\n-            m.update( salt, 0, salt.length );\n-            m.update( password, 0, password.length );\n+            MessageDigest m = MessageDigest.getInstance(DIGEST_ALGO);\n+            m.update(salt, 0, salt.length);\n+            m.update(password, 0, password.length);\n             return m.digest();\n-        }\n-        catch ( NoSuchAlgorithmException e )\n+        } catch (NoSuchAlgorithmException e)\n         {\n-            throw new RuntimeException( \"Hash algorithm is not available on this platform: \" + e.getMessage(), e );\n+            throw new RuntimeException(\"Hash algorithm is not available on this platform: \" + e.getMessage(), e);\n         }\n     }\n \n     private static byte[] randomSalt()\n     {\n         byte[] salt = new byte[32];\n-        random.nextBytes( salt );\n+        random.nextBytes(salt);\n         return salt;\n     }\n }\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}