{
    "project_name": "opencb-opencga",
    "error_id": "164",
    "information": {
        "errors": [
            {
                "line": "75",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 147).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    ANNOTATOR_CELLBASE_INCLUDE(\"annotator.cellbase.include\"),\n    ANNOTATOR_CELLBASE_EXCLUDE(\"annotator.cellbase.exclude\"),\n    ANNOTATOR_CELLBASE_VARIANT_LENGTH_THRESHOLD(\"annotator.cellbase.variantLengthThreshold\", Integer.MAX_VALUE), // by default, undefined, no limit\n    ANNOTATOR_CELLBASE_IMPRECISE_VARIANTS(\"annotator.cellbase.impreciseVariants\", true),\n    ANNOTATOR_CELLBASE_STAR_ALTERNATE(\"annotator.cellbase.starAlternate\", false),\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/164/VariantStorageOptions.java\nindex d60e13b1733..ad8a1b9f3f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/164/VariantStorageOptions.java\n@@ -72,7 +72,8 @@ public enum VariantStorageOptions implements ConfigurationOption {\n     ANNOTATOR_CELLBASE_USE_CACHE(\"annotator.cellbase.useCache\"),\n     ANNOTATOR_CELLBASE_INCLUDE(\"annotator.cellbase.include\"),\n     ANNOTATOR_CELLBASE_EXCLUDE(\"annotator.cellbase.exclude\"),\n-    ANNOTATOR_CELLBASE_VARIANT_LENGTH_THRESHOLD(\"annotator.cellbase.variantLengthThreshold\", Integer.MAX_VALUE), // by default, undefined, no limit\n+    ANNOTATOR_CELLBASE_VARIANT_LENGTH_THRESHOLD(\"annotator.cellbase.variantLengthThreshold\", Integer.MAX_VALUE\n+    ), // by default, undefined, no limit\n     ANNOTATOR_CELLBASE_IMPRECISE_VARIANTS(\"annotator.cellbase.impreciseVariants\", true),\n     ANNOTATOR_CELLBASE_STAR_ALTERNATE(\"annotator.cellbase.starAlternate\", false),\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/164/VariantStorageOptions.java\nindex d60e13b1733..e21dd7a6104 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/164/VariantStorageOptions.java\n@@ -7,134 +7,135 @@ import org.opencb.opencga.core.config.ConfigurationOption;\n \n public enum VariantStorageOptions implements ConfigurationOption {\n \n-    STUDY(\"study\"),\n-    SPECIES(\"species\"),\n-    ASSEMBLY(\"assembly\"),\n-    GVCF(\"gvcf\", false),\n-\n-    RESUME(\"resume\", false), // Resume step.\n-    FORCE(\"force\", false), // Force execute step.\n-\n-    STDIN(\"stdin\", false),\n-    STDOUT(\"stdout\", false),\n-\n-    TRANSFORM_BATCH_SIZE(\"transform.batchSize\", 200),\n-    TRANSFORM_THREADS(\"transform.numThreads\", 4),\n-    TRANSFORM_FORMAT(\"transform.format\", \"avro\"),\n-    TRANSFORM_FAIL_ON_MALFORMED_VARIANT(\"transform.failOnMalformed\", true),\n-    TRANSFORM_COMPRESSION(\"transform.compression\", \"gzip\"),\n-    TRANSFORM_ISOLATE(\"transform.isolate\", false), // Do not store file in metadata\n-    NORMALIZATION_SKIP(\"normalization.skip\", false), // Do not run normalization\n-    NORMALIZATION_REFERENCE_GENOME(\"normalization.referenceGenome\"),\n-    NORMALIZATION_EXTENSIONS(\"normalization.extensions\", ParamConstants.NONE),\n-\n-    DEDUPLICATION_POLICY(\"deduplication.policy\", \"maxQual\"),\n-    DEDUPLICATION_BUFFER_SIZE(\"deduplication.bufferSize\", 100),\n-\n-    FAMILY(\"family\", false),\n-    SOMATIC(\"somatic\", false),\n-\n-    LOAD_BATCH_SIZE(\"load.batchSize\", 100),\n-    LOAD_THREADS(\"load.numThreads\", 6),\n-    LOAD_SPLIT_DATA(\"load.splitData\"),\n-    LOAD_MULTI_FILE_DATA(\"load.multiFileData\", false),\n-    LOAD_SAMPLE_INDEX(\"load.sampleIndex\", YesNoAuto.AUTO),\n-    LOAD_ARCHIVE(\"load.archive\", YesNoAuto.AUTO),\n-    LOAD_HOM_REF(\"load.homRef\", YesNoAuto.AUTO),\n-    POST_LOAD_CHECK(\"load.postLoadCheck\", YesNoAuto.AUTO),\n-\n-    STATS_DEFAULT_GENOTYPE(\"stats.defaultGenotype\", \"0/0\"), // Default genotype to be used for calculating stats.\n-    STATS_MULTI_ALLELIC(\"stats.multiAllelic\", false),  // Include secondary alternates in the variant stats calculation\n-    STATS_CALCULATE(\"stats.calculate\", false),          //Calculate stats on the postLoad step\n-    STATS_CALCULATE_BATCH_SIZE(\"stats.calculate.batchSize\", 100),\n-    STATS_CALCULATE_THREADS(\"stats.calculate.numThreads\", 6),\n-    STATS_LOAD_THREADS(\"stats.load.numThreads\", 4),\n-    STATS_LOAD_BATCH_SIZE(\"stats.load.batchSize\", 100),\n-    STATS_OVERWRITE(\"stats.overwrite\", false),          //Overwrite stats already present\n-    @Deprecated\n-    STATS_UPDATE(\"stats.update\", false),                //Calculate missing stats\n-    STATS_AGGREGATION(\"stats.aggregation.type\", Aggregation.NONE),\n-    STATS_AGGREGATION_MAPPING_FILE(\"stats.aggregation.mappingFile\"),\n-\n-    ANNOTATE(\"annotate\", false), // Do annotate after step.\n-    ANNOTATION_CHECKPOINT_SIZE(\"annotation.checkpointSize\", 1000000),\n-    ANNOTATION_BATCH_SIZE(\"annotation.batchSize\", 100),\n-    ANNOTATION_FILE_FORMAT(\"annotation.file.format\", \"json\"),\n-    ANNOTATION_THREADS(\"annotation.numThreads\", 8),\n-    ANNOTATION_TIMEOUT(\"annotation.timeout\", 600000), // millis,\n-    ANNOTATION_LOAD_BATCH_SIZE(\"annotation.load.batchSize\", 100),\n-    ANNOTATION_LOAD_THREADS(\"annotation.load.numThreads\", 4),\n-    ANNOTATION_OVERWEITE(\"annotation.overwrite\"),\n-    ANNOTATION_SAMPLE_INDEX(\"annotation.sampleIndex\", YesNoAuto.YES),\n-\n-    ANNOTATOR(\"annotator\"),\n-    ANNOTATOR_CLASS(\"annotator.class\"),\n-    ANNOTATOR_CELLBASE_USE_CACHE(\"annotator.cellbase.useCache\"),\n-    ANNOTATOR_CELLBASE_INCLUDE(\"annotator.cellbase.include\"),\n-    ANNOTATOR_CELLBASE_EXCLUDE(\"annotator.cellbase.exclude\"),\n-    ANNOTATOR_CELLBASE_VARIANT_LENGTH_THRESHOLD(\"annotator.cellbase.variantLengthThreshold\", Integer.MAX_VALUE), // by default, undefined, no limit\n-    ANNOTATOR_CELLBASE_IMPRECISE_VARIANTS(\"annotator.cellbase.impreciseVariants\", true),\n-    ANNOTATOR_CELLBASE_STAR_ALTERNATE(\"annotator.cellbase.starAlternate\", false),\n-\n-    INDEX_SEARCH(\"indexSearch\", false), // Build secondary indexes using search engine.\n-\n-    METADATA_LOCK_DURATION(\"metadata.lock.duration\", 5000),\n-    METADATA_LOCK_TIMEOUT(\"metadata.lock.timeout\", 60000),\n-\n-    QUERY_DEFAULT_TIMEOUT(\"query.timeout.default\", 10000), // Default timeout for DBAdaptor operations. Only used if none is provided.\n-    QUERY_MAX_TIMEOUT(\"query.timeout.max\", 30000),         // Max allowed timeout for DBAdaptor operations\n-    QUERY_LIMIT_DEFAULT(\"query.limit.default\", 1000),\n-    QUERY_LIMIT_MAX(\"query.limit.max\", 5000),\n-    QUERY_SAMPLE_LIMIT_DEFAULT(\"query.sample.limit.default\", 100),\n-    QUERY_SAMPLE_LIMIT_MAX(\"query.sample.limit.max\", 1000),\n-\n-    // Search intersect options\n-    INTERSECT_ACTIVE(\"search.intersect.active\", true),                       // Allow intersect queries with the SearchEngine (Solr)\n-    INTERSECT_ALWAYS(\"search.intersect.always\", false),                      // Force intersect queries\n-    INTERSECT_PARAMS_THRESHOLD(\"search.intersect.params.threshold\", 3),      // Minimum number of QueryParams in the query to intersect\n-\n-    APPROXIMATE_COUNT_SAMPLING_SIZE(\"approximateCountSamplingSize\", 1000),\n-    @Deprecated\n-    APPROXIMATE_COUNT(\"approximateCount\", false),\n-\n-    // Do not store genotypes from the current file.\n-    // Not stored anymore in StudyMetadata\n-    EXCLUDE_GENOTYPES(\"exclude.genotypes\", false),\n-\n-    /////////////\n-    // These params are stored in {@link org.opencb.opencga.storage.core.metadata.models.StudyMetadata#getAttributes}.\n-    // Need migration when renaming them\n-    /////////////\n-\n-    LOADED_GENOTYPES(\"loadedGenotypes\", null), // List of loaded genotypes.\n-    EXTRA_FORMAT_FIELDS(\"include.extra-fields\", \"\"),  //Include other sample information (like DP, GQ, ...)\n-    EXTRA_FORMAT_FIELDS_TYPE(\"include.extra-fields-format\", \"\"),  //Other sample information format (String, Integer, Float)\n-\n-    RELEASE(\"release\", 1),\n-\n-    MERGE_MODE(\"merge.mode\", VariantStorageEngine.MergeMode.ADVANCED),\n-    SEARCH_INDEX_LAST_TIMESTAMP(\"search.index.last.timestamp\", 0);\n-\n-    private final String key;\n-    private final Object value;\n-\n-    VariantStorageOptions(String key) {\n-        this.key = key;\n-        this.value = null;\n-    }\n-\n-    VariantStorageOptions(String key, Object value) {\n-        this.key = key;\n-        this.value = value;\n-    }\n-\n-    public String key() {\n-        return key;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T defaultValue() {\n-        return (T) value;\n-    }\n+  STUDY(\"study\"),\n+  SPECIES(\"species\"),\n+  ASSEMBLY(\"assembly\"),\n+  GVCF(\"gvcf\", false),\n+\n+  RESUME(\"resume\", false), // Resume step.\n+  FORCE(\"force\", false), // Force execute step.\n+\n+  STDIN(\"stdin\", false),\n+  STDOUT(\"stdout\", false),\n+\n+  TRANSFORM_BATCH_SIZE(\"transform.batchSize\", 200),\n+  TRANSFORM_THREADS(\"transform.numThreads\", 4),\n+  TRANSFORM_FORMAT(\"transform.format\", \"avro\"),\n+  TRANSFORM_FAIL_ON_MALFORMED_VARIANT(\"transform.failOnMalformed\", true),\n+  TRANSFORM_COMPRESSION(\"transform.compression\", \"gzip\"),\n+  TRANSFORM_ISOLATE(\"transform.isolate\", false), // Do not store file in metadata\n+  NORMALIZATION_SKIP(\"normalization.skip\", false), // Do not run normalization\n+  NORMALIZATION_REFERENCE_GENOME(\"normalization.referenceGenome\"),\n+  NORMALIZATION_EXTENSIONS(\"normalization.extensions\", ParamConstants.NONE),\n+\n+  DEDUPLICATION_POLICY(\"deduplication.policy\", \"maxQual\"),\n+  DEDUPLICATION_BUFFER_SIZE(\"deduplication.bufferSize\", 100),\n+\n+  FAMILY(\"family\", false),\n+  SOMATIC(\"somatic\", false),\n+\n+  LOAD_BATCH_SIZE(\"load.batchSize\", 100),\n+  LOAD_THREADS(\"load.numThreads\", 6),\n+  LOAD_SPLIT_DATA(\"load.splitData\"),\n+  LOAD_MULTI_FILE_DATA(\"load.multiFileData\", false),\n+  LOAD_SAMPLE_INDEX(\"load.sampleIndex\", YesNoAuto.AUTO),\n+  LOAD_ARCHIVE(\"load.archive\", YesNoAuto.AUTO),\n+  LOAD_HOM_REF(\"load.homRef\", YesNoAuto.AUTO),\n+  POST_LOAD_CHECK(\"load.postLoadCheck\", YesNoAuto.AUTO),\n+\n+  STATS_DEFAULT_GENOTYPE(\"stats.defaultGenotype\", \"0/0\"), // Default genotype to be used for calculating stats.\n+  STATS_MULTI_ALLELIC(\"stats.multiAllelic\", false),  // Include secondary alternates in the variant stats calculation\n+  STATS_CALCULATE(\"stats.calculate\", false),          //Calculate stats on the postLoad step\n+  STATS_CALCULATE_BATCH_SIZE(\"stats.calculate.batchSize\", 100),\n+  STATS_CALCULATE_THREADS(\"stats.calculate.numThreads\", 6),\n+  STATS_LOAD_THREADS(\"stats.load.numThreads\", 4),\n+  STATS_LOAD_BATCH_SIZE(\"stats.load.batchSize\", 100),\n+  STATS_OVERWRITE(\"stats.overwrite\", false),          //Overwrite stats already present\n+  @Deprecated\n+  STATS_UPDATE(\"stats.update\", false),                //Calculate missing stats\n+  STATS_AGGREGATION(\"stats.aggregation.type\", Aggregation.NONE),\n+  STATS_AGGREGATION_MAPPING_FILE(\"stats.aggregation.mappingFile\"),\n+\n+  ANNOTATE(\"annotate\", false), // Do annotate after step.\n+  ANNOTATION_CHECKPOINT_SIZE(\"annotation.checkpointSize\", 1000000),\n+  ANNOTATION_BATCH_SIZE(\"annotation.batchSize\", 100),\n+  ANNOTATION_FILE_FORMAT(\"annotation.file.format\", \"json\"),\n+  ANNOTATION_THREADS(\"annotation.numThreads\", 8),\n+  ANNOTATION_TIMEOUT(\"annotation.timeout\", 600000), // millis,\n+  ANNOTATION_LOAD_BATCH_SIZE(\"annotation.load.batchSize\", 100),\n+  ANNOTATION_LOAD_THREADS(\"annotation.load.numThreads\", 4),\n+  ANNOTATION_OVERWEITE(\"annotation.overwrite\"),\n+  ANNOTATION_SAMPLE_INDEX(\"annotation.sampleIndex\", YesNoAuto.YES),\n+\n+  ANNOTATOR(\"annotator\"),\n+  ANNOTATOR_CLASS(\"annotator.class\"),\n+  ANNOTATOR_CELLBASE_USE_CACHE(\"annotator.cellbase.useCache\"),\n+  ANNOTATOR_CELLBASE_INCLUDE(\"annotator.cellbase.include\"),\n+  ANNOTATOR_CELLBASE_EXCLUDE(\"annotator.cellbase.exclude\"),\n+  ANNOTATOR_CELLBASE_VARIANT_LENGTH_THRESHOLD(\"annotator.cellbase.variantLengthThreshold\",\n+      Integer.MAX_VALUE), // by default, undefined, no limit\n+  ANNOTATOR_CELLBASE_IMPRECISE_VARIANTS(\"annotator.cellbase.impreciseVariants\", true),\n+  ANNOTATOR_CELLBASE_STAR_ALTERNATE(\"annotator.cellbase.starAlternate\", false),\n+\n+  INDEX_SEARCH(\"indexSearch\", false), // Build secondary indexes using search engine.\n+\n+  METADATA_LOCK_DURATION(\"metadata.lock.duration\", 5000),\n+  METADATA_LOCK_TIMEOUT(\"metadata.lock.timeout\", 60000),\n+\n+  QUERY_DEFAULT_TIMEOUT(\"query.timeout.default\", 10000), // Default timeout for DBAdaptor operations. Only used if none is provided.\n+  QUERY_MAX_TIMEOUT(\"query.timeout.max\", 30000),         // Max allowed timeout for DBAdaptor operations\n+  QUERY_LIMIT_DEFAULT(\"query.limit.default\", 1000),\n+  QUERY_LIMIT_MAX(\"query.limit.max\", 5000),\n+  QUERY_SAMPLE_LIMIT_DEFAULT(\"query.sample.limit.default\", 100),\n+  QUERY_SAMPLE_LIMIT_MAX(\"query.sample.limit.max\", 1000),\n+\n+  // Search intersect options\n+  INTERSECT_ACTIVE(\"search.intersect.active\", true),                       // Allow intersect queries with the SearchEngine (Solr)\n+  INTERSECT_ALWAYS(\"search.intersect.always\", false),                      // Force intersect queries\n+  INTERSECT_PARAMS_THRESHOLD(\"search.intersect.params.threshold\", 3),      // Minimum number of QueryParams in the query to intersect\n+\n+  APPROXIMATE_COUNT_SAMPLING_SIZE(\"approximateCountSamplingSize\", 1000),\n+  @Deprecated\n+  APPROXIMATE_COUNT(\"approximateCount\", false),\n+\n+  // Do not store genotypes from the current file.\n+  // Not stored anymore in StudyMetadata\n+  EXCLUDE_GENOTYPES(\"exclude.genotypes\", false),\n+\n+  /////////////\n+  // These params are stored in {@link org.opencb.opencga.storage.core.metadata.models.StudyMetadata#getAttributes}.\n+  // Need migration when renaming them\n+  /////////////\n+\n+  LOADED_GENOTYPES(\"loadedGenotypes\", null), // List of loaded genotypes.\n+  EXTRA_FORMAT_FIELDS(\"include.extra-fields\", \"\"),  //Include other sample information (like DP, GQ, ...)\n+  EXTRA_FORMAT_FIELDS_TYPE(\"include.extra-fields-format\", \"\"),  //Other sample information format (String, Integer, Float)\n+\n+  RELEASE(\"release\", 1),\n+\n+  MERGE_MODE(\"merge.mode\", VariantStorageEngine.MergeMode.ADVANCED),\n+  SEARCH_INDEX_LAST_TIMESTAMP(\"search.index.last.timestamp\", 0);\n+\n+  private final String key;\n+  private final Object value;\n+\n+  VariantStorageOptions(String key) {\n+    this.key = key;\n+    this.value = null;\n+  }\n+\n+  VariantStorageOptions(String key, Object value) {\n+    this.key = key;\n+    this.value = value;\n+  }\n+\n+  public String key() {\n+    return key;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T defaultValue() {\n+    return (T) value;\n+  }\n \n }\n",
            "diff_size": 130
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/164/VariantStorageOptions.java\nindex d60e13b1733..bac0ee71790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/164/VariantStorageOptions.java\n@@ -52,7 +52,7 @@ public enum VariantStorageOptions implements ConfigurationOption {\n     STATS_LOAD_BATCH_SIZE(\"stats.load.batchSize\", 100),\n     STATS_OVERWRITE(\"stats.overwrite\", false),          //Overwrite stats already present\n     @Deprecated\n-    STATS_UPDATE(\"stats.update\", false),                //Calculate missing stats\n+    STATS_UPDATE(\"stats.update\", false), //Calculate missing stats\n     STATS_AGGREGATION(\"stats.aggregation.type\", Aggregation.NONE),\n     STATS_AGGREGATION_MAPPING_FILE(\"stats.aggregation.mappingFile\"),\n \n@@ -82,14 +82,14 @@ public enum VariantStorageOptions implements ConfigurationOption {\n     METADATA_LOCK_TIMEOUT(\"metadata.lock.timeout\", 60000),\n \n     QUERY_DEFAULT_TIMEOUT(\"query.timeout.default\", 10000), // Default timeout for DBAdaptor operations. Only used if none is provided.\n-    QUERY_MAX_TIMEOUT(\"query.timeout.max\", 30000),         // Max allowed timeout for DBAdaptor operations\n+    QUERY_MAX_TIMEOUT(\"query.timeout.max\", 30000), // Max allowed timeout for DBAdaptor operations\n     QUERY_LIMIT_DEFAULT(\"query.limit.default\", 1000),\n     QUERY_LIMIT_MAX(\"query.limit.max\", 5000),\n     QUERY_SAMPLE_LIMIT_DEFAULT(\"query.sample.limit.default\", 100),\n     QUERY_SAMPLE_LIMIT_MAX(\"query.sample.limit.max\", 1000),\n \n     // Search intersect options\n-    INTERSECT_ACTIVE(\"search.intersect.active\", true),                       // Allow intersect queries with the SearchEngine (Solr)\n+    INTERSECT_ACTIVE(\"search.intersect.active\", true), // Allow intersect queries with the SearchEngine (Solr)\n     INTERSECT_ALWAYS(\"search.intersect.always\", false),                      // Force intersect queries\n     INTERSECT_PARAMS_THRESHOLD(\"search.intersect.params.threshold\", 3),      // Minimum number of QueryParams in the query to intersect\n \n@@ -137,4 +137,4 @@ public enum VariantStorageOptions implements ConfigurationOption {\n         return (T) value;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/164/VariantStorageOptions.java\nindex d60e13b1733..ad8a1b9f3f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/164/VariantStorageOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/164/VariantStorageOptions.java\n@@ -72,7 +72,8 @@ public enum VariantStorageOptions implements ConfigurationOption {\n     ANNOTATOR_CELLBASE_USE_CACHE(\"annotator.cellbase.useCache\"),\n     ANNOTATOR_CELLBASE_INCLUDE(\"annotator.cellbase.include\"),\n     ANNOTATOR_CELLBASE_EXCLUDE(\"annotator.cellbase.exclude\"),\n-    ANNOTATOR_CELLBASE_VARIANT_LENGTH_THRESHOLD(\"annotator.cellbase.variantLengthThreshold\", Integer.MAX_VALUE), // by default, undefined, no limit\n+    ANNOTATOR_CELLBASE_VARIANT_LENGTH_THRESHOLD(\"annotator.cellbase.variantLengthThreshold\", Integer.MAX_VALUE\n+    ), // by default, undefined, no limit\n     ANNOTATOR_CELLBASE_IMPRECISE_VARIANTS(\"annotator.cellbase.impreciseVariants\", true),\n     ANNOTATOR_CELLBASE_STAR_ALTERNATE(\"annotator.cellbase.starAlternate\", false),\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}