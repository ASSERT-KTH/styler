{
    "project_name": "neo4j-neo4j",
    "error_id": "3158",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "89",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3158/HeapTrackingListValueBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3158/HeapTrackingListValueBuilder.java\nindex 458b37a0342..7045608ddab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3158/HeapTrackingListValueBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3158/HeapTrackingListValueBuilder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.virtual;\n \n import java.util.Collections;\n@@ -39,7 +40,7 @@ public class HeapTrackingListValueBuilder implements AutoCloseable\n     /**\n      * Start building a list of unknown size with heap tracking\n      * Values added to the list will have their heap usage estimated and tracked in the give memory tracker.\n-     *\n+     * <p>\n      * Caveat: When calling build() the ownership of the internal heap-tracking list will be transferred\n      * to the returned ListValue, and it will carry the heap usage accumulated by the builder as its payload size.\n      * But to be accounted for, this ListValue will need to be measured and allocated in a memory tracker.\n@@ -50,34 +51,34 @@ public class HeapTrackingListValueBuilder implements AutoCloseable\n      *\n      * @return a new heap tracking builder\n      */\n-    public static HeapTrackingListValueBuilder newHeapTrackingListBuilder( MemoryTracker memoryTracker )\n+    public static HeapTrackingListValueBuilder newHeapTrackingListBuilder(MemoryTracker memoryTracker)\n     {\n-        return new HeapTrackingListValueBuilder( memoryTracker );\n+        return new HeapTrackingListValueBuilder(memoryTracker);\n     }\n \n-    private static final long SHALLOW_SIZE = shallowSizeOfInstance( HeapTrackingListValueBuilder.class );\n+    private static final long SHALLOW_SIZE = shallowSizeOfInstance(HeapTrackingListValueBuilder.class);\n \n     private final HeapTrackingArrayList<AnyValue> values;\n     private final MemoryTracker scopedMemoryTracker;\n \n-    public HeapTrackingListValueBuilder( MemoryTracker memoryTracker )\n+    public HeapTrackingListValueBuilder(MemoryTracker memoryTracker)\n     {\n         // To be in control of the heap usage of both the added values and the internal array list holding them,\n         // we use a scoped memory tracker\n         scopedMemoryTracker = memoryTracker.getScopedMemoryTracker();\n-        scopedMemoryTracker.allocateHeap( SHALLOW_SIZE + SCOPED_MEMORY_TRACKER_SHALLOW_SIZE );\n-        values = HeapTrackingArrayList.newArrayList( 16, scopedMemoryTracker );\n+        scopedMemoryTracker.allocateHeap(SHALLOW_SIZE + SCOPED_MEMORY_TRACKER_SHALLOW_SIZE);\n+        values = HeapTrackingArrayList.newArrayList(16, scopedMemoryTracker);\n     }\n \n-    public void add( AnyValue value )\n+    public void add(AnyValue value)\n     {\n-        scopedMemoryTracker.allocateHeap( value.estimatedHeapUsage() );\n-        values.add( value );\n+        scopedMemoryTracker.allocateHeap(value.estimatedHeapUsage());\n+        values.add(value);\n     }\n \n     public ListValue build()\n     {\n-        return new ListValue.JavaListListValue( values, payloadSize() );\n+        return new ListValue.JavaListListValue(values, payloadSize());\n     }\n \n     public ListValue buildAndClose()\n@@ -87,10 +88,10 @@ public class HeapTrackingListValueBuilder implements AutoCloseable\n         return value;\n     }\n \n-    public HeapTrackingListValueBuilder combine( HeapTrackingListValueBuilder rhs )\n+    public HeapTrackingListValueBuilder combine(HeapTrackingListValueBuilder rhs)\n     {\n-        values.addAll( rhs.values );\n-        scopedMemoryTracker.allocateHeap( rhs.payloadSize() );\n+        values.addAll(rhs.values);\n+        scopedMemoryTracker.allocateHeap(rhs.payloadSize());\n         return this;\n     }\n \n@@ -109,18 +110,18 @@ public class HeapTrackingListValueBuilder implements AutoCloseable\n     /**\n      * @return a collector for {@link ListValue}s\n      */\n-    public static Collector<AnyValue,HeapTrackingListValueBuilder,ListValue> collector( MemoryTracker memoryTracker )\n+    public static Collector<AnyValue, HeapTrackingListValueBuilder, ListValue> collector(MemoryTracker memoryTracker)\n     {\n         return new Collector<>()\n         {\n             @Override\n             public Supplier<HeapTrackingListValueBuilder> supplier()\n             {\n-                return () -> newHeapTrackingListBuilder( memoryTracker );\n+                return () -> newHeapTrackingListBuilder(memoryTracker);\n             }\n \n             @Override\n-            public BiConsumer<HeapTrackingListValueBuilder,AnyValue> accumulator()\n+            public BiConsumer<HeapTrackingListValueBuilder, AnyValue> accumulator()\n             {\n                 return org.neo4j.values.virtual.HeapTrackingListValueBuilder::add;\n             }\n@@ -132,7 +133,7 @@ public class HeapTrackingListValueBuilder implements AutoCloseable\n             }\n \n             @Override\n-            public Function<HeapTrackingListValueBuilder,ListValue> finisher()\n+            public Function<HeapTrackingListValueBuilder, ListValue> finisher()\n             {\n                 return HeapTrackingListValueBuilder::buildAndClose;\n             }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}