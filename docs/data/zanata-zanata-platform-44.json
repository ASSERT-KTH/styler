{
    "project_name": "zanata-zanata-platform",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "102",
                "column": "47",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        }\n        transactionActive = isActiveOrMarkedRollback(transaction)\n                || isRolledBack(transaction); // TODO: temp workaround,\n        // what should we really do\n        // in this case??\n        newTransactionRequired = isNewTransactionRequired(transactionActive);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/44/TransactionUtilImpl.java\nindex dfea67bdf6e..a67082742ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/44/TransactionUtilImpl.java\n@@ -99,8 +99,9 @@ public class TransactionUtilImpl implements TransactionUtil {\n                     \"Nested transactions not supported. @Async may help.\");\n         }\n         transactionActive = isActiveOrMarkedRollback(transaction)\n-                || isRolledBack(transaction); // TODO: temp workaround,\n-        // what should we really do\n+                || isRolledBack(transaction);\n+                // TODO: temp workaroundwhat should we really do\n+                 // what should we really do\n         // in this case??\n         newTransactionRequired = isNewTransactionRequired(transactionActive);\n         userTransaction = newTransactionRequired ? transaction : null;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "100",
                    "column": "37",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/44/TransactionUtilImpl.java\nindex dfea67bdf6e..3eba6eefa01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/44/TransactionUtilImpl.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.transaction;\n \n import java.util.concurrent.Callable;\n@@ -48,190 +49,185 @@ import static javax.transaction.Status.STATUS_ROLLEDBACK;\n  * org.jboss.seam.util.Work and org.jboss.seam.transaction.*.\n  *\n  * @author Carlos Munoz\n- *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n+ * <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  * @author Sean Flanigan\n- *         <a href=\"mailto:sflaniga@redhat.com\">sflaniga@redhat.com</a>\n+ * <a href=\"mailto:sflaniga@redhat.com\">sflaniga@redhat.com</a>\n  */\n @ApplicationScoped\n public class TransactionUtilImpl implements TransactionUtil {\n-    private static final long serialVersionUID = 6994028912066823356L;\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(TransactionUtilImpl.class);\n-\n-    public static TransactionUtilImpl get() {\n-        return ServiceLocator.instance().getInstance(TransactionUtilImpl.class);\n-    }\n-\n-    @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n-    @Inject\n-    private EntityManager entityManager;\n-    @Inject\n-    private IServiceLocator serviceLocator;\n-\n-    /**\n-     * Runs the provided function (in the shape of a Callable) in its own\n-     * transaction.\n-     *\n-     * @param function\n-     *            the function to call\n-     * @param <R>\n-     *            Return type expected. The provided function must return this\n-     *            type.\n-     * @return Whatever the function returns.\n-     * @throws Exception\n-     *             Exception (if any) thrown by the given function.\n-     */\n-    public static <R> R runInTransaction(Callable<R> function)\n-            throws Exception {\n-        return get().call(function);\n+  private static final long serialVersionUID = 6994028912066823356L;\n+  private static final org.slf4j.Logger log =\n+    org.slf4j.LoggerFactory.getLogger(TransactionUtilImpl.class);\n+\n+  public static TransactionUtilImpl get() {\n+    return ServiceLocator.instance().getInstance(TransactionUtilImpl.class);\n+  }\n+\n+  @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n+  @Inject\n+  private EntityManager entityManager;\n+  @Inject\n+  private IServiceLocator serviceLocator;\n+\n+  /**\n+   * Runs the provided function (in the shape of a Callable) in its own\n+   * transaction.\n+   *\n+   * @param function the function to call\n+   * @param <R>      Return type expected. The provided function must return this\n+   *                 type.\n+   * @return Whatever the function returns.\n+   * @throws Exception Exception (if any) thrown by the given function.\n+   */\n+  public static <R> R runInTransaction(Callable<R> function)\n+    throws Exception {\n+    return get().call(function);\n+  }\n+\n+  @Override\n+  public <R> R call(Callable<R> function) throws Exception {\n+    UserTransaction transaction = null;\n+    // these values used to come from Seam's Transactional annotation\n+    boolean transactionActive = false;\n+    boolean newTransactionRequired = false;\n+    UserTransaction userTransaction = null;\n+    transaction = getUserTransaction();\n+    if (transaction.getStatus() == Status.STATUS_COMMITTED) {\n+      throw new RuntimeException(\n+        \"Nested transactions not supported. @Async may help.\");\n     }\n-\n-    @Override\n-    public <R> R call(Callable<R> function) throws Exception {\n-        UserTransaction transaction = null;\n-        // these values used to come from Seam's Transactional annotation\n-        boolean transactionActive = false;\n-        boolean newTransactionRequired = false;\n-        UserTransaction userTransaction = null;\n-        transaction = getUserTransaction();\n-        if (transaction.getStatus() == Status.STATUS_COMMITTED) {\n-            throw new RuntimeException(\n-                    \"Nested transactions not supported. @Async may help.\");\n+    transactionActive = isActiveOrMarkedRollback(transaction)\n+      || isRolledBack(transaction); // TODO: temp workaround,\n+    // what should we really do\n+    // in this case??\n+    newTransactionRequired = isNewTransactionRequired(transactionActive);\n+    userTransaction = newTransactionRequired ? transaction : null;\n+    try {\n+      if (newTransactionRequired) {\n+        log.debug(\"beginning transaction\");\n+        userTransaction.begin();\n+      }\n+      entityManager.joinTransaction();\n+      R result = function.call();\n+      if (newTransactionRequired) {\n+        if (isMarkedRollback(transaction)) {\n+          log.debug(\"rolling back transaction\");\n+          userTransaction.rollback();\n+        } else {\n+          log.debug(\"committing transaction\");\n+          userTransaction.commit();\n         }\n-        transactionActive = isActiveOrMarkedRollback(transaction)\n-                || isRolledBack(transaction); // TODO: temp workaround,\n-        // what should we really do\n-        // in this case??\n-        newTransactionRequired = isNewTransactionRequired(transactionActive);\n-        userTransaction = newTransactionRequired ? transaction : null;\n-        try {\n-            if (newTransactionRequired) {\n-                log.debug(\"beginning transaction\");\n-                userTransaction.begin();\n-            }\n-            entityManager.joinTransaction();\n-            R result = function.call();\n-            if (newTransactionRequired) {\n-                if (isMarkedRollback(transaction)) {\n-                    log.debug(\"rolling back transaction\");\n-                    userTransaction.rollback();\n-                } else {\n-                    log.debug(\"committing transaction\");\n-                    userTransaction.commit();\n-                }\n-            }\n-            return result;\n-        } catch (IllegalStateException | NotSupportedException\n-                | SystemException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            if (newTransactionRequired && userTransaction\n-                    .getStatus() != Status.STATUS_NO_TRANSACTION) {\n-                if (isRollbackRequired(e, true)) {\n-                    log.debug(\"rolling back transaction\");\n-                    userTransaction.rollback();\n-                } else {\n-                    log.debug(\n-                            \"committing transaction after ApplicationException(rollback=false): {}\",\n-                                    e.getMessage());\n-                    userTransaction.commit();\n-                }\n-            }\n-            throw e;\n+      }\n+      return result;\n+    } catch (IllegalStateException | NotSupportedException\n+      | SystemException e) {\n+      throw e;\n+    } catch (Exception e) {\n+      if (newTransactionRequired && userTransaction\n+        .getStatus() != Status.STATUS_NO_TRANSACTION) {\n+        if (isRollbackRequired(e, true)) {\n+          log.debug(\"rolling back transaction\");\n+          userTransaction.rollback();\n+        } else {\n+          log.debug(\n+            \"committing transaction after ApplicationException(rollback=false): {}\",\n+            e.getMessage());\n+          userTransaction.commit();\n         }\n+      }\n+      throw e;\n     }\n-\n-    /**\n-     * Same as {@link TransactionUtilImpl#runInTransaction(Callable)} but for\n-     * Runnables (functions that don't return anything)\n-     *\n-     * @param runnable\n-     *            The function (in the form of a Runnable) to execute.\n-     * @throws Exception\n-     *             Exception (if any) thrown by the given function.\n-     * @see TransactionUtilImpl#runInTransaction(Callable)\n-     */\n-    public static void runInTransaction(Runnable runnable) throws Exception {\n-        get().run(runnable);\n-    }\n-\n-    @Override\n-    public void run(Runnable runnable) throws Exception {\n-        runInTransaction(() -> {\n-            runnable.run();\n-            return null;\n-        });\n-    }\n-\n-    @Override\n-    public void runEx(RunnableEx runnable) throws Exception {\n-        runInTransaction(() -> {\n-            runnable.run();\n-            return null;\n-        });\n-    }\n-    // Adapted from org.jboss.seam.transaction.Transaction.getUserTransaction()\n-\n-    private UserTransaction getUserTransaction() throws NamingException {\n-        return serviceLocator.getJndiComponent(\"java:jboss/UserTransaction\",\n-                UserTransaction.class);\n-        // try {\n-        // return serviceLocator.getJndiComponent(\"java:comp/UserTransaction\",\n-        // UserTransaction.class);\n-        // } catch (NamingException ne) {\n-        // try {\n-        // // Embedded JBoss has no java:comp/UserTransaction\n-        // UserTransaction ut = serviceLocator.getJndiComponent(\n-        // \"UserTransaction\", UserTransaction.class);\n-        // ut.getStatus(); // for glassfish, which can return an unusable\n-        // // UT\n-        // return ut;\n-        // } catch (NamingException nnfe2) {\n-        // // Try the other JBoss location in JBoss AS7\n-        // return serviceLocator.getJndiComponent(\n-        // \"java:jboss/UserTransaction\",\n-        // UserTransaction.class);\n-        // } catch (Exception e) {\n-        // throw ne;\n-        // }\n-        // }\n-    }\n-\n-    private static boolean isActiveOrMarkedRollback(UserTransaction transaction)\n-            throws SystemException {\n-        int status = transaction.getStatus();\n-        return status == STATUS_ACTIVE || status == STATUS_MARKED_ROLLBACK;\n-    }\n-\n-    private static boolean isMarkedRollback(UserTransaction transaction)\n-            throws SystemException {\n-        return transaction.getStatus() == STATUS_MARKED_ROLLBACK;\n-    }\n-\n-    private static boolean isRolledBack(UserTransaction transaction)\n-            throws SystemException {\n-        return transaction.getStatus() == STATUS_ROLLEDBACK;\n-    }\n-\n-    private static boolean isNewTransactionRequired(boolean transactionActive) {\n-        return !transactionActive;\n-    }\n-\n-    private static boolean isRollbackRequired(Exception e, boolean isJavaBean) {\n-        Class<? extends Exception> clazz = e.getClass();\n-        return (isSystemException(e, isJavaBean, clazz)) || (clazz\n-                .isAnnotationPresent(ApplicationException.class)\n-                && clazz.getAnnotation(ApplicationException.class).rollback());\n-    }\n-\n-    private static boolean isSystemException(Exception e, boolean isJavaBean,\n-            Class<? extends Exception> clazz) {\n-        return\n-        // TODO: this is hackish, maybe just turn off RollbackInterceptor\n-        // for @Converter/@Validator components\n-        isJavaBean && (e instanceof RuntimeException)\n-                && !clazz.isAnnotationPresent(ApplicationException.class)\n-                && !(e instanceof ValidatorException)\n-                && !(e instanceof ConverterException);\n-    }\n+  }\n+\n+  /**\n+   * Same as {@link TransactionUtilImpl#runInTransaction(Callable)} but for\n+   * Runnables (functions that don't return anything)\n+   *\n+   * @param runnable The function (in the form of a Runnable) to execute.\n+   * @throws Exception Exception (if any) thrown by the given function.\n+   * @see TransactionUtilImpl#runInTransaction(Callable)\n+   */\n+  public static void runInTransaction(Runnable runnable) throws Exception {\n+    get().run(runnable);\n+  }\n+\n+  @Override\n+  public void run(Runnable runnable) throws Exception {\n+    runInTransaction(() -> {\n+      runnable.run();\n+      return null;\n+    });\n+  }\n+\n+  @Override\n+  public void runEx(RunnableEx runnable) throws Exception {\n+    runInTransaction(() -> {\n+      runnable.run();\n+      return null;\n+    });\n+  }\n+  // Adapted from org.jboss.seam.transaction.Transaction.getUserTransaction()\n+\n+  private UserTransaction getUserTransaction() throws NamingException {\n+    return serviceLocator.getJndiComponent(\"java:jboss/UserTransaction\",\n+      UserTransaction.class);\n+    // try {\n+    // return serviceLocator.getJndiComponent(\"java:comp/UserTransaction\",\n+    // UserTransaction.class);\n+    // } catch (NamingException ne) {\n+    // try {\n+    // // Embedded JBoss has no java:comp/UserTransaction\n+    // UserTransaction ut = serviceLocator.getJndiComponent(\n+    // \"UserTransaction\", UserTransaction.class);\n+    // ut.getStatus(); // for glassfish, which can return an unusable\n+    // // UT\n+    // return ut;\n+    // } catch (NamingException nnfe2) {\n+    // // Try the other JBoss location in JBoss AS7\n+    // return serviceLocator.getJndiComponent(\n+    // \"java:jboss/UserTransaction\",\n+    // UserTransaction.class);\n+    // } catch (Exception e) {\n+    // throw ne;\n+    // }\n+    // }\n+  }\n+\n+  private static boolean isActiveOrMarkedRollback(UserTransaction transaction)\n+    throws SystemException {\n+    int status = transaction.getStatus();\n+    return status == STATUS_ACTIVE || status == STATUS_MARKED_ROLLBACK;\n+  }\n+\n+  private static boolean isMarkedRollback(UserTransaction transaction)\n+    throws SystemException {\n+    return transaction.getStatus() == STATUS_MARKED_ROLLBACK;\n+  }\n+\n+  private static boolean isRolledBack(UserTransaction transaction)\n+    throws SystemException {\n+    return transaction.getStatus() == STATUS_ROLLEDBACK;\n+  }\n+\n+  private static boolean isNewTransactionRequired(boolean transactionActive) {\n+    return !transactionActive;\n+  }\n+\n+  private static boolean isRollbackRequired(Exception e, boolean isJavaBean) {\n+    Class<? extends Exception> clazz = e.getClass();\n+    return (isSystemException(e, isJavaBean, clazz)) || (clazz\n+      .isAnnotationPresent(ApplicationException.class)\n+      && clazz.getAnnotation(ApplicationException.class).rollback());\n+  }\n+\n+  private static boolean isSystemException(Exception e, boolean isJavaBean,\n+                                           Class<? extends Exception> clazz) {\n+    return\n+      // TODO: this is hackish, maybe just turn off RollbackInterceptor\n+      // for @Converter/@Validator components\n+      isJavaBean && (e instanceof RuntimeException)\n+        && !clazz.isAnnotationPresent(ApplicationException.class)\n+        && !(e instanceof ValidatorException)\n+        && !(e instanceof ConverterException);\n+  }\n }\n",
            "diff_size": 199
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/44/TransactionUtilImpl.java\nindex dfea67bdf6e..2d64ec15178 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/44/TransactionUtilImpl.java\n@@ -99,7 +99,8 @@ public class TransactionUtilImpl implements TransactionUtil {\n                     \"Nested transactions not supported. @Async may help.\");\n         }\n         transactionActive = isActiveOrMarkedRollback(transaction)\n-                || isRolledBack(transaction); // TODO: temp workaround,\n+                || isRolledBack(transaction);\n+// TODO: temp workaround,\n         // what should we really do\n         // in this case??\n         newTransactionRequired = isNewTransactionRequired(transactionActive);\n@@ -226,7 +227,7 @@ public class TransactionUtilImpl implements TransactionUtil {\n \n     private static boolean isSystemException(Exception e, boolean isJavaBean,\n             Class<? extends Exception> clazz) {\n-        return\n+    return\n         // TODO: this is hackish, maybe just turn off RollbackInterceptor\n         // for @Converter/@Validator components\n         isJavaBean && (e instanceof RuntimeException)\n@@ -234,4 +235,4 @@ public class TransactionUtilImpl implements TransactionUtil {\n                 && !(e instanceof ValidatorException)\n                 && !(e instanceof ConverterException);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "99",
                    "column": "97",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/44/TransactionUtilImpl.java\nindex dfea67bdf6e..75a54841579 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/44/TransactionUtilImpl.java\n@@ -32,11 +32,11 @@ import javax.transaction.NotSupportedException;\n import javax.transaction.Status;\n import javax.transaction.SystemException;\n import javax.transaction.UserTransaction;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.zanata.util.IServiceLocator;\n import org.zanata.util.RunnableEx;\n import org.zanata.util.ServiceLocator;\n+\n import static javax.transaction.Status.STATUS_ACTIVE;\n import static javax.transaction.Status.STATUS_MARKED_ROLLBACK;\n import static javax.transaction.Status.STATUS_ROLLEDBACK;\n@@ -52,12 +52,12 @@ import static javax.transaction.Status.STATUS_ROLLEDBACK;\n  * @author Sean Flanigan\n  *         <a href=\"mailto:sflaniga@redhat.com\">sflaniga@redhat.com</a>\n  */\n+\n+\n @ApplicationScoped\n public class TransactionUtilImpl implements TransactionUtil {\n     private static final long serialVersionUID = 6994028912066823356L;\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(TransactionUtilImpl.class);\n-\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(TransactionUtilImpl.class);\n     public static TransactionUtilImpl get() {\n         return ServiceLocator.instance().getInstance(TransactionUtilImpl.class);\n     }\n@@ -81,8 +81,7 @@ public class TransactionUtilImpl implements TransactionUtil {\n      * @throws Exception\n      *             Exception (if any) thrown by the given function.\n      */\n-    public static <R> R runInTransaction(Callable<R> function)\n-            throws Exception {\n+    public static <R> R runInTransaction(Callable<R> function) throws Exception {\n         return get().call(function);\n     }\n \n@@ -95,11 +94,9 @@ public class TransactionUtilImpl implements TransactionUtil {\n         UserTransaction userTransaction = null;\n         transaction = getUserTransaction();\n         if (transaction.getStatus() == Status.STATUS_COMMITTED) {\n-            throw new RuntimeException(\n-                    \"Nested transactions not supported. @Async may help.\");\n+            throw new RuntimeException(\"Nested transactions not supported. @Async may help.\");\n         }\n-        transactionActive = isActiveOrMarkedRollback(transaction)\n-                || isRolledBack(transaction); // TODO: temp workaround,\n+        transactionActive = isActiveOrMarkedRollback(transaction) || isRolledBack(transaction); // TODO: temp workaround,\n         // what should we really do\n         // in this case??\n         newTransactionRequired = isNewTransactionRequired(transactionActive);\n@@ -121,19 +118,15 @@ public class TransactionUtilImpl implements TransactionUtil {\n                 }\n             }\n             return result;\n-        } catch (IllegalStateException | NotSupportedException\n-                | SystemException e) {\n+        } catch (IllegalStateException | NotSupportedException | SystemException e) {\n             throw e;\n         } catch (Exception e) {\n-            if (newTransactionRequired && userTransaction\n-                    .getStatus() != Status.STATUS_NO_TRANSACTION) {\n+            if (newTransactionRequired && userTransaction.getStatus() != Status.STATUS_NO_TRANSACTION) {\n                 if (isRollbackRequired(e, true)) {\n                     log.debug(\"rolling back transaction\");\n                     userTransaction.rollback();\n                 } else {\n-                    log.debug(\n-                            \"committing transaction after ApplicationException(rollback=false): {}\",\n-                                    e.getMessage());\n+                    log.debug(\"committing transaction after ApplicationException(rollback=false): {}\", e.getMessage());\n                     userTransaction.commit();\n                 }\n             }\n@@ -151,6 +144,7 @@ public class TransactionUtilImpl implements TransactionUtil {\n      *             Exception (if any) thrown by the given function.\n      * @see TransactionUtilImpl#runInTransaction(Callable)\n      */\n+\n     public static void runInTransaction(Runnable runnable) throws Exception {\n         get().run(runnable);\n     }\n@@ -173,8 +167,7 @@ public class TransactionUtilImpl implements TransactionUtil {\n     // Adapted from org.jboss.seam.transaction.Transaction.getUserTransaction()\n \n     private UserTransaction getUserTransaction() throws NamingException {\n-        return serviceLocator.getJndiComponent(\"java:jboss/UserTransaction\",\n-                UserTransaction.class);\n+        return serviceLocator.getJndiComponent(\"java:jboss/UserTransaction\", UserTransaction.class);\n         // try {\n         // return serviceLocator.getJndiComponent(\"java:comp/UserTransaction\",\n         // UserTransaction.class);\n@@ -197,19 +190,17 @@ public class TransactionUtilImpl implements TransactionUtil {\n         // }\n     }\n \n-    private static boolean isActiveOrMarkedRollback(UserTransaction transaction)\n-            throws SystemException {\n+    private static boolean isActiveOrMarkedRollback(UserTransaction transaction) throws SystemException {\n         int status = transaction.getStatus();\n-        return status == STATUS_ACTIVE || status == STATUS_MARKED_ROLLBACK;\n+        return status == STATUS_ACTIVE\n+                || status == STATUS_MARKED_ROLLBACK;\n     }\n \n-    private static boolean isMarkedRollback(UserTransaction transaction)\n-            throws SystemException {\n+    private static boolean isMarkedRollback(UserTransaction transaction) throws SystemException {\n         return transaction.getStatus() == STATUS_MARKED_ROLLBACK;\n     }\n \n-    private static boolean isRolledBack(UserTransaction transaction)\n-            throws SystemException {\n+    private static boolean isRolledBack(UserTransaction transaction) throws SystemException {\n         return transaction.getStatus() == STATUS_ROLLEDBACK;\n     }\n \n@@ -219,19 +210,17 @@ public class TransactionUtilImpl implements TransactionUtil {\n \n     private static boolean isRollbackRequired(Exception e, boolean isJavaBean) {\n         Class<? extends Exception> clazz = e.getClass();\n-        return (isSystemException(e, isJavaBean, clazz)) || (clazz\n-                .isAnnotationPresent(ApplicationException.class)\n-                && clazz.getAnnotation(ApplicationException.class).rollback());\n+        return (isSystemException(e, isJavaBean, clazz)) ||\n+                   (clazz.isAnnotationPresent(ApplicationException.class) && clazz.getAnnotation(ApplicationException.class).rollback());\n     }\n \n-    private static boolean isSystemException(Exception e, boolean isJavaBean,\n-            Class<? extends Exception> clazz) {\n+    private static boolean isSystemException(Exception e, boolean isJavaBean, Class<? extends Exception> clazz) {\n         return\n         // TODO: this is hackish, maybe just turn off RollbackInterceptor\n-        // for @Converter/@Validator components\n-        isJavaBean && (e instanceof RuntimeException)\n-                && !clazz.isAnnotationPresent(ApplicationException.class)\n-                && !(e instanceof ValidatorException)\n-                && !(e instanceof ConverterException);\n+        // for @Converter/@Validator components isJavaBean &&\n+        (e instanceof RuntimeException)\n+        && !clazz.isAnnotationPresent(ApplicationException.class)\n+        && !(e instanceof ValidatorException)\n+        && !(e instanceof ConverterException);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "102",
                    "column": "45",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "102",
                    "column": "46",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/44/TransactionUtilImpl.java\nindex dfea67bdf6e..eaa36cf4f36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/44/TransactionUtilImpl.java\n@@ -99,7 +99,7 @@ public class TransactionUtilImpl implements TransactionUtil {\n                     \"Nested transactions not supported. @Async may help.\");\n         }\n         transactionActive = isActiveOrMarkedRollback(transaction)\n-                || isRolledBack(transaction); // TODO: temp workaround,\n+                || isRolledBack(transaction);// TODO: temp workaround,\n         // what should we really do\n         // in this case??\n         newTransactionRequired = isNewTransactionRequired(transactionActive);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/44/TransactionUtilImpl.java\nindex dfea67bdf6e..a67082742ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/44/TransactionUtilImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/44/TransactionUtilImpl.java\n@@ -99,8 +99,9 @@ public class TransactionUtilImpl implements TransactionUtil {\n                     \"Nested transactions not supported. @Async may help.\");\n         }\n         transactionActive = isActiveOrMarkedRollback(transaction)\n-                || isRolledBack(transaction); // TODO: temp workaround,\n-        // what should we really do\n+                || isRolledBack(transaction);\n+                // TODO: temp workaroundwhat should we really do\n+                 // what should we really do\n         // in this case??\n         newTransactionRequired = isNewTransactionRequired(transactionActive);\n         userTransaction = newTransactionRequired ? transaction : null;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff",
        "styler_random"
    ]
}