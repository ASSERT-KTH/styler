{
    "project_name": "wso2-attic-commons",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "29",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n/**\n * BPEL process data access objects. Contains references to active process instances ({@link ProcessInstanceDAO} and messages bound\n * for instances yet to be created or not yet correlated..\n */\npublic interface ProcessDAO {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/27/ProcessDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/27/ProcessDAO.java\nindex c15a69f7211..c236ac21ed3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/27/ProcessDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/27/ProcessDAO.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.dao;\n \n import org.apache.ode.bpel.common.CorrelationKey;\n@@ -30,100 +31,95 @@ import java.util.Set;\n  * for instances yet to be created or not yet correlated..\n  */\n public interface ProcessDAO {\n-    /**\n-     * Get the unique process identifier.\n-     *\n-     * @return process identifier\n-     */\n-    QName getProcessId();\n-\n-    /**\n-     * Get the BPEL process name.\n-     *\n-     * @return qualified BPEL process name.\n-     */\n-    QName getType();\n-\n-    /**\n-     * Get the process version\n-     *\n-     * @return version\n-     */\n-    long getVersion();\n-\n-    /**\n-     * Get a message correlator instance.\n-     *\n-     * @param correlatorId\n-     *            correlator identifier\n-     * @return correlator corresponding to the given identifier\n-     */\n-    CorrelatorDAO getCorrelator(String correlatorId);\n-\n-    /**\n-     * Returns a list of correlators for the process\n-     *\n-     * @return correlatorset for the process\n-     */\n-    Set<String> getCorrelatorsSet();\n-\n-    /**\n-     * Create a new process instance object.\n-     *\n-     * @param instantiatingCorrelator\n-     *            instantiating {@link CorrelatorDAO}\n-     * @return newly generated instance DAO\n-     */\n-    ProcessInstanceDAO createInstance(CorrelatorDAO instantiatingCorrelator);\n-\n-    /**\n-     * Get a process instance (by identifier).\n-     *\n-     * @param iid\n-     *            unique instance identifier.\n-     * @return DAO corresponding to the process instance\n-     */\n-    ProcessInstanceDAO getInstance(Long iid);\n-\n-    /**\n-     * Locates a process instance based on a correlation key.\n-     *\n-     * @param cckey\n-     *            correlation key\n-     * @return collection of {@link ProcessInstanceDAO} that match correlation key, ordered by date\n-     */\n-    Collection<ProcessInstanceDAO> findInstance(CorrelationKey cckey);\n-\n-    /**\n-     * Remove the routes with the given Id for all the correlators in the process.\n-     *\n-     * @todo remove this method.\n-     * @param routeId\n-     */\n-    void removeRoutes(String routeId, ProcessInstanceDAO target);\n-\n-    /**\n-     * Callback indicating that a process instance has completed its duties.\n-     *\n-     * @param instance\n-     *            the completed {@link ProcessInstanceDAO}\n-     */\n-    void instanceCompleted(ProcessInstanceDAO instance);\n-\n-    /**\n-     * Deletes only the process and routes without instances. This also deletes any static data to\n-     * the process: correlators.\n-     */\n-    void deleteProcessAndRoutes();\n-\n-    CorrelatorDAO addCorrelator(String correlator);\n-\n-    String getGuid();\n-\n-    int getNumInstances();\n-\n-    /**\n-     * @return all instances that haven't completed, use with care as there could be a lot of them\n-     */\n-    Collection<ProcessInstanceDAO> getActiveInstances();\n+  /**\n+   * Get the unique process identifier.\n+   *\n+   * @return process identifier\n+   */\n+  QName getProcessId();\n+\n+  /**\n+   * Get the BPEL process name.\n+   *\n+   * @return qualified BPEL process name.\n+   */\n+  QName getType();\n+\n+  /**\n+   * Get the process version\n+   *\n+   * @return version\n+   */\n+  long getVersion();\n+\n+  /**\n+   * Get a message correlator instance.\n+   *\n+   * @param correlatorId correlator identifier\n+   * @return correlator corresponding to the given identifier\n+   */\n+  CorrelatorDAO getCorrelator(String correlatorId);\n+\n+  /**\n+   * Returns a list of correlators for the process\n+   *\n+   * @return correlatorset for the process\n+   */\n+  Set<String> getCorrelatorsSet();\n+\n+  /**\n+   * Create a new process instance object.\n+   *\n+   * @param instantiatingCorrelator instantiating {@link CorrelatorDAO}\n+   * @return newly generated instance DAO\n+   */\n+  ProcessInstanceDAO createInstance(CorrelatorDAO instantiatingCorrelator);\n+\n+  /**\n+   * Get a process instance (by identifier).\n+   *\n+   * @param iid unique instance identifier.\n+   * @return DAO corresponding to the process instance\n+   */\n+  ProcessInstanceDAO getInstance(Long iid);\n+\n+  /**\n+   * Locates a process instance based on a correlation key.\n+   *\n+   * @param cckey correlation key\n+   * @return collection of {@link ProcessInstanceDAO} that match correlation key, ordered by date\n+   */\n+  Collection<ProcessInstanceDAO> findInstance(CorrelationKey cckey);\n+\n+  /**\n+   * Remove the routes with the given Id for all the correlators in the process.\n+   *\n+   * @param routeId\n+   * @todo remove this method.\n+   */\n+  void removeRoutes(String routeId, ProcessInstanceDAO target);\n+\n+  /**\n+   * Callback indicating that a process instance has completed its duties.\n+   *\n+   * @param instance the completed {@link ProcessInstanceDAO}\n+   */\n+  void instanceCompleted(ProcessInstanceDAO instance);\n+\n+  /**\n+   * Deletes only the process and routes without instances. This also deletes any static data to\n+   * the process: correlators.\n+   */\n+  void deleteProcessAndRoutes();\n+\n+  CorrelatorDAO addCorrelator(String correlator);\n+\n+  String getGuid();\n+\n+  int getNumInstances();\n+\n+  /**\n+   * @return all instances that haven't completed, use with care as there could be a lot of them\n+   */\n+  Collection<ProcessInstanceDAO> getActiveInstances();\n }\n",
            "diff_size": 97
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/27/ProcessDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/27/ProcessDAO.java\nindex c15a69f7211..5f2d05b6565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/27/ProcessDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/27/ProcessDAO.java\n@@ -126,4 +126,4 @@ public interface ProcessDAO {\n      * @return all instances that haven't completed, use with care as there could be a lot of them\n      */\n     Collection<ProcessInstanceDAO> getActiveInstances();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}