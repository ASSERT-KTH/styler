{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3256",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3256/ClassHandle.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3256/ClassHandle.java\nindex 842d500c3d6..16a24b8547e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3256/ClassHandle.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3256/ClassHandle.java\n@@ -17,48 +17,49 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Modifier;\n \n public class ClassHandle extends TypeReference\n {\n-    private final TypeReference parent;\n-    final CodeGenerator generator;\n-    private final long generation;\n+  private final TypeReference parent;\n+  final CodeGenerator generator;\n+  private final long generation;\n \n-    ClassHandle( String packageName, String name, TypeReference parent, CodeGenerator generator, long generation )\n-    {\n-        super( packageName, name, parent.isPrimitive(), parent.isArray(), false, \"\", Modifier.PUBLIC );\n-        this.parent = parent;\n-        this.generator = generator;\n-        this.generation = generation;\n-    }\n+  ClassHandle(String packageName, String name, TypeReference parent, CodeGenerator generator, long generation)\n+  {\n+    super(packageName, name, parent.isPrimitive(), parent.isArray(), false, \"\", Modifier.PUBLIC);\n+    this.parent = parent;\n+    this.generator = generator;\n+    this.generation = generation;\n+  }\n \n-    @Override\n-    public boolean equals( Object obj )\n-    {\n-        return obj == this;\n-    }\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    return obj == this;\n+  }\n \n-    @Override\n-    public int hashCode()\n-    {\n-        return simpleName().hashCode();\n-    }\n+  @Override\n+  public int hashCode()\n+  {\n+    return simpleName().hashCode();\n+  }\n \n-    public Object newInstance() throws CompilationFailureException, IllegalAccessException, InstantiationException\n-    {\n-        return loadClass().newInstance();\n-    }\n+  public Object newInstance() throws CompilationFailureException, IllegalAccessException, InstantiationException\n+  {\n+    return loadClass().newInstance();\n+  }\n \n-    public Class<?> loadClass() throws CompilationFailureException\n-    {\n-        return generator.loadClass( fullName(), generation );\n-    }\n+  public Class<?> loadClass() throws CompilationFailureException\n+  {\n+    return generator.loadClass(fullName(), generation);\n+  }\n \n-    public TypeReference parent()\n-    {\n-        return parent;\n-    }\n+  public TypeReference parent()\n+  {\n+    return parent;\n+  }\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3256/ClassHandle.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3256/ClassHandle.java\nindex 842d500c3d6..7b6e1171631 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3256/ClassHandle.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3256/ClassHandle.java\n@@ -61,4 +61,4 @@ public class ClassHandle extends TypeReference\n     {\n         return parent;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}