{
    "project_name": "apache-metron",
    "error_id": "87",
    "information": {
        "errors": [
            {
                "line": "36",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " */\npublic class LazzyLoggerImplPerfTest {\n  private static final LazyLogger LOG = LazyLoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n  private static final double NANO_TO_MILLIS = 1e6;\n  private static final String PATH = \"/foo/bar/baz\";\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/87/LazzyLoggerImplPerfTest.java\nindex 53c8f99ddc8..caed4a2bf24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/87/LazzyLoggerImplPerfTest.java\n@@ -8,15 +8,16 @@ package org.apache.metron.common.utils;\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n import java.lang.invoke.MethodHandles;\n import java.util.HashMap;\n import java.util.Map;\n@@ -33,7 +34,8 @@ import org.junit.Test;\n  * comment out the ignore attribute to allow test to run\n  */\n public class LazzyLoggerImplPerfTest {\n-  private static final LazyLogger LOG = LazyLoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private static final LazyLogger LOG =\n+      LazyLoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private static final double NANO_TO_MILLIS = 1e6;\n   private static final String PATH = \"/foo/bar/baz\";\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/87/LazzyLoggerImplPerfTest.java\nindex 53c8f99ddc8..4cc0161c650 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/87/LazzyLoggerImplPerfTest.java\n@@ -45,11 +45,15 @@ public class LazzyLoggerImplPerfTest {\n   @Ignore\n   public void calcTimes() {\n     Map<String, Object> smallMap = new HashMap<>();\n-    for (int i = 0; i < 10; i++) {\n+    for (int i = 0;\n+i < 10;\n+i++) {\n       smallMap.put(\"key\" + i, RandomStringUtils.randomAlphabetic(10));\n     }\n     Map<String, Object> largeMap = new HashMap<>();\n-    for (int i = 0; i < 500; i++) {\n+    for (int i = 0;\n+i < 500;\n+i++) {\n       largeMap.put(\"key\" + i, RandomStringUtils.randomAlphabetic(1000));\n     }\n     JSONObject largeObject = new JSONObject(largeMap);\n@@ -65,9 +69,7 @@ public class LazzyLoggerImplPerfTest {\n       LOG.trace(\"Writing message {} to path: {}\", () -> smallObject.toJSONString(), () -> PATH);\n     });\n     printSummary(String.format(\"Small object %s times using lazy logging\", reps), summary);\n-\n-\n-    summary = runTrial(reps, () -> {\n+summary = runTrial(reps, () -> {\n       LOG.trace(\"Writing message {} to path: {}\", largeObject.toJSONString(), PATH);\n     });\n     printSummary(String.format(\"Large object %s times\", reps), summary);\n@@ -88,11 +90,12 @@ public class LazzyLoggerImplPerfTest {\n     printSummary(String.format(\"Simple string %s times using lazy logging\", reps), summary);\n   }\n \n-\n-  private StatisticalSummary runTrial(int reps, Operation operation) {\n+private StatisticalSummary runTrial(int reps, Operation operation) {\n     DescriptiveStatistics stats = new DescriptiveStatistics();\n     long trialTime = timeOperation(() -> {\n-      for (int i = 0; i < reps; i++) {\n+      for (int i = 0;\n+i < reps;\n+i++) {\n         long time = timeOperation(operation);\n         stats.addValue(time / NANO_TO_MILLIS);\n       }\n@@ -115,4 +118,4 @@ public class LazzyLoggerImplPerfTest {\n     System.out.println(summary.toString());\n     System.out.println(border);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "column": "8",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 35, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 33, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 16, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'smallObject' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'PATH' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 14, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 16, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 14, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 16, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'largeObject' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'PATH' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 14, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 16, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 14, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 16, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'\"hello\"' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'PATH' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 14, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 23, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "column": "27",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'i' has incorrect indentation level 23, expected level should be 27.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 25, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 25, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 23, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 21, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/87/LazzyLoggerImplPerfTest.java\nindex 53c8f99ddc8..19260b13ba4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/87/LazzyLoggerImplPerfTest.java\n@@ -17,6 +17,7 @@ package org.apache.metron.common.utils;\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n import java.lang.invoke.MethodHandles;\n import java.util.HashMap;\n import java.util.Map;\n@@ -32,7 +33,9 @@ import org.junit.Test;\n  * By default the test is disabled due to it taking too much time to run during normal unit testing.\n  * comment out the ignore attribute to allow test to run\n  */\n+\n public class LazzyLoggerImplPerfTest {\n+\n   private static final LazyLogger LOG = LazyLoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private static final double NANO_TO_MILLIS = 1e6;\n   private static final String PATH = \"/foo/bar/baz\";\n@@ -45,58 +48,62 @@ public class LazzyLoggerImplPerfTest {\n   @Ignore\n   public void calcTimes() {\n     Map<String, Object> smallMap = new HashMap<>();\n-    for (int i = 0; i < 10; i++) {\n+    for(int i = 0;i < 10;\n+    i++) {\n       smallMap.put(\"key\" + i, RandomStringUtils.randomAlphabetic(10));\n     }\n     Map<String, Object> largeMap = new HashMap<>();\n-    for (int i = 0; i < 500; i++) {\n+    for(int i = 0;i < 500;\n+    i++) {\n       largeMap.put(\"key\" + i, RandomStringUtils.randomAlphabetic(1000));\n     }\n     JSONObject largeObject = new JSONObject(largeMap);\n     JSONObject smallObject = new JSONObject(smallMap);\n     int reps = 1000;\n-\n     StatisticalSummary summary = runTrial(reps, () -> {\n-      LOG.trace(\"Writing message {} to path: {}\", smallObject.toJSONString(), PATH);\n-    });\n+                                   LOG.trace(\"Writing message {} to path: {}\", smallObject.toJSONString(), PATH);\n+                                 });\n     printSummary(String.format(\"Small object %s times\", reps), summary);\n-\n     summary = runTrial(reps, () -> {\n-      LOG.trace(\"Writing message {} to path: {}\", () -> smallObject.toJSONString(), () -> PATH);\n-    });\n-    printSummary(String.format(\"Small object %s times using lazy logging\", reps), summary);\n-\n-\n+                LOG.trace(\"Writing message {} to path: {}\", () ->\n+smallObject.toJSONString(), () ->\n+PATH);\n+              });\n+    printSummary(String.format(\"Small object %s times using lazy logging\", reps),\n+summary);\n     summary = runTrial(reps, () -> {\n-      LOG.trace(\"Writing message {} to path: {}\", largeObject.toJSONString(), PATH);\n-    });\n+                LOG.trace(\"Writing message {} to path: {}\", largeObject.toJSONString(), PATH);\n+              });\n     printSummary(String.format(\"Large object %s times\", reps), summary);\n-\n     summary = runTrial(reps, () -> {\n-      LOG.trace(\"Writing message {} to path: {}\", () -> largeObject.toJSONString(), () -> PATH);\n-    });\n-    printSummary(String.format(\"Large object %s times using lazy logging\", reps), summary);\n-\n+                LOG.trace(\"Writing message {} to path: {}\", () ->\n+largeObject.toJSONString(), () ->\n+PATH);\n+              });\n+    printSummary(String.format(\"Large object %s times using lazy logging\", reps),\n+summary);\n     summary = runTrial(reps, () -> {\n-      LOG.trace(\"Writing message {} to path: {}\", \"hello\", PATH);\n-    });\n+                LOG.trace(\"Writing message {} to path: {}\",\"hello\", PATH);\n+              });\n     printSummary(String.format(\"Simple string %s times\", reps), summary);\n-\n     summary = runTrial(reps, () -> {\n-      LOG.trace(\"Writing message {} to path: {}\", () -> \"hello\", () -> PATH);\n-    });\n-    printSummary(String.format(\"Simple string %s times using lazy logging\", reps), summary);\n+                LOG.trace(\"Writing message {} to path: {}\", () ->\n+\"hello\", () ->\n+PATH);\n+              });\n+    printSummary(String.format(\"Simple string %s times using lazy logging\", reps),\n+summary);\n   }\n \n-\n   private StatisticalSummary runTrial(int reps, Operation operation) {\n     DescriptiveStatistics stats = new DescriptiveStatistics();\n     long trialTime = timeOperation(() -> {\n-      for (int i = 0; i < reps; i++) {\n-        long time = timeOperation(operation);\n-        stats.addValue(time / NANO_TO_MILLIS);\n-      }\n-    });\n+                       for(int i = 0;i < reps;\n+                       i++) {\n+                         long time = timeOperation(operation);\n+                         stats.addValue(time / NANO_TO_MILLIS);\n+                       }\n+                     });\n     System.out.println(\"Total trial time (ms): \" + (trialTime / NANO_TO_MILLIS));\n     return stats;\n   }\n@@ -115,4 +122,4 @@ public class LazzyLoggerImplPerfTest {\n     System.out.println(summary.toString());\n     System.out.println(border);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'static' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 1, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/87/LazzyLoggerImplPerfTest.java\nindex 53c8f99ddc8..d9474ccb72f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/87/LazzyLoggerImplPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/87/LazzyLoggerImplPerfTest.java\n@@ -32,9 +32,9 @@ import org.junit.Test;\n  * By default the test is disabled due to it taking too much time to run during normal unit testing.\n  * comment out the ignore attribute to allow test to run\n  */\n-public class LazzyLoggerImplPerfTest {\n-  private static final LazyLogger LOG = LazyLoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-  private static final double NANO_TO_MILLIS = 1e6;\n+public class LazzyLoggerImplPerfTest {private\n+static final LazyLogger LOG = LazyLoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+ private static final double NANO_TO_MILLIS = 1e6;\n   private static final String PATH = \"/foo/bar/baz\";\n \n   public interface Operation {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}