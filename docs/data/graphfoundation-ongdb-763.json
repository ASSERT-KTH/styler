{
    "project_name": "graphfoundation-ongdb",
    "error_id": "763",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/763/DefaultTraverser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/763/DefaultTraverser.java\nindex 0c42eef6bd7..3f1b3c20fef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/763/DefaultTraverser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/763/DefaultTraverser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import org.neo4j.function.Factory;\n@@ -31,117 +32,117 @@ import org.neo4j.helpers.collection.PrefetchingResourceIterator;\n \n public class DefaultTraverser implements Traverser\n {\n-    private final Factory<TraverserIterator> traverserIteratorFactory;\n+  private final Factory<TraverserIterator> traverserIteratorFactory;\n \n-    private TraversalMetadata lastIterator;\n+  private TraversalMetadata lastIterator;\n \n-    DefaultTraverser( Factory<TraverserIterator> traverserIteratorFactory )\n-    {\n-        this.traverserIteratorFactory = traverserIteratorFactory;\n-    }\n+  DefaultTraverser(Factory<TraverserIterator> traverserIteratorFactory)\n+  {\n+    this.traverserIteratorFactory = traverserIteratorFactory;\n+  }\n \n-    @Override\n-    public ResourceIterable<Node> nodes()\n+  @Override\n+  public ResourceIterable<Node> nodes()\n+  {\n+    return new ResourcePathIterableWrapper<Node>(this)\n     {\n-        return new ResourcePathIterableWrapper<Node>( this )\n-        {\n-            @Override\n-            protected Node convert( Path path )\n-            {\n-                return path.endNode();\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public ResourceIterable<Relationship> relationships()\n+      @Override\n+      protected Node convert(Path path)\n+      {\n+        return path.endNode();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public ResourceIterable<Relationship> relationships()\n+  {\n+    return new ResourcePathIterableWrapper<Relationship>(this)\n     {\n-        return new ResourcePathIterableWrapper<Relationship>( this )\n+      @Override\n+      public ResourceIterator<Relationship> iterator()\n+      {\n+        final ResourceIterator<Path> pathIterator = pathIterator();\n+        return new PrefetchingResourceIterator<Relationship>()\n         {\n-            @Override\n-            public ResourceIterator<Relationship> iterator()\n-            {\n-                final ResourceIterator<Path> pathIterator = pathIterator();\n-                return new PrefetchingResourceIterator<Relationship>()\n-                {\n-                    @Override\n-                    public void close()\n-                    {\n-                        pathIterator.close();\n-                    }\n-\n-                    @Override\n-                    protected Relationship fetchNextOrNull()\n-                    {\n-                        while ( pathIterator.hasNext() )\n-                        {\n-                            Path path = pathIterator.next();\n-                            if ( path.length() > 0 )\n-                            {\n-                                return path.lastRelationship();\n-                            }\n-                        }\n-                        return null;\n-                    }\n-                };\n-            }\n-\n-            @Override\n-            protected Relationship convert( Path path )\n+          @Override\n+          public void close()\n+          {\n+            pathIterator.close();\n+          }\n+\n+          @Override\n+          protected Relationship fetchNextOrNull()\n+          {\n+            while (pathIterator.hasNext())\n             {\n+              Path path = pathIterator.next();\n+              if (path.length() > 0)\n+              {\n                 return path.lastRelationship();\n+              }\n             }\n+            return null;\n+          }\n         };\n-    }\n-\n-    @Override\n-    public ResourceIterator<Path> iterator()\n+      }\n+\n+      @Override\n+      protected Relationship convert(Path path)\n+      {\n+        return path.lastRelationship();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public ResourceIterator<Path> iterator()\n+  {\n+    TraverserIterator traverserIterator = traverserIteratorFactory.newInstance();\n+    lastIterator = traverserIterator;\n+    return traverserIterator;\n+  }\n+\n+  @Override\n+  public TraversalMetadata metadata()\n+  {\n+    return lastIterator;\n+  }\n+\n+  private abstract static class ResourcePathIterableWrapper<T> implements ResourceIterable<T>\n+  {\n+    private final ResourceIterable<Path> iterableToWrap;\n+\n+    protected ResourcePathIterableWrapper(ResourceIterable<Path> iterableToWrap)\n     {\n-        TraverserIterator traverserIterator = traverserIteratorFactory.newInstance();\n-        lastIterator = traverserIterator;\n-        return traverserIterator;\n+      this.iterableToWrap = iterableToWrap;\n     }\n \n-    @Override\n-    public TraversalMetadata metadata()\n+    protected ResourceIterator<Path> pathIterator()\n     {\n-        return lastIterator;\n+      return iterableToWrap.iterator();\n     }\n \n-    private abstract static class ResourcePathIterableWrapper<T> implements ResourceIterable<T>\n+    @Override\n+    public ResourceIterator<T> iterator()\n     {\n-        private final ResourceIterable<Path> iterableToWrap;\n-\n-        protected ResourcePathIterableWrapper( ResourceIterable<Path> iterableToWrap )\n-        {\n-            this.iterableToWrap = iterableToWrap;\n-        }\n-\n-        protected ResourceIterator<Path> pathIterator()\n+      final ResourceIterator<Path> iterator = pathIterator();\n+      return new PrefetchingResourceIterator<T>()\n+      {\n+        @Override\n+        public void close()\n         {\n-            return iterableToWrap.iterator();\n+          iterator.close();\n         }\n \n         @Override\n-        public ResourceIterator<T> iterator()\n+        protected T fetchNextOrNull()\n         {\n-            final ResourceIterator<Path> iterator = pathIterator();\n-            return new PrefetchingResourceIterator<T>()\n-            {\n-                @Override\n-                public void close()\n-                {\n-                    iterator.close();\n-                }\n-\n-                @Override\n-                protected T fetchNextOrNull()\n-                {\n-                    return iterator.hasNext() ? convert( iterator.next() ) : null;\n-                }\n-            };\n+          return iterator.hasNext() ? convert(iterator.next()) : null;\n         }\n-\n-        protected abstract T convert( Path path );\n+      };\n     }\n+\n+    protected abstract T convert(Path path);\n+  }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/763/DefaultTraverser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/763/DefaultTraverser.java\nindex 0c42eef6bd7..56031b342b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/763/DefaultTraverser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/763/DefaultTraverser.java\n@@ -144,4 +144,4 @@ public class DefaultTraverser implements Traverser\n \n         protected abstract T convert( Path path );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}