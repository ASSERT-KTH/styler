{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "32",
    "information": {
        "errors": [
            {
                "line": "235",
                "column": "34",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    public RangeTextResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n        return (RangeTextResponse)apiClient.deserialize(response, RangeTextResponse.class);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/32/GetRangeTextOnlineRequest.java\nindex a0f0d1c8ab4..a31045971bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/32/GetRangeTextOnlineRequest.java\n@@ -232,6 +232,6 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RangeTextResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RangeTextResponse)apiClient.deserialize(response, RangeTextResponse.class);\n+        return (RangeTextResponse) apiClient.deserialize(response, RangeTextResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/32/GetRangeTextOnlineRequest.java\nindex a0f0d1c8ab4..47427fd3e49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/32/GetRangeTextOnlineRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -188,8 +190,9 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n         Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n \n         Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n+        if (getDocument() != null) {\n             localVarFormParams.put(\"Document\", getDocument());\n+        }\n \n         final String[] localVarAccepts = {\n             \"application/xml\", \"application/json\"\n@@ -209,8 +212,8 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -232,6 +235,6 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RangeTextResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RangeTextResponse)apiClient.deserialize(response, RangeTextResponse.class);\n+        return (RangeTextResponse) apiClient.deserialize(response, RangeTextResponse.class);\n     }\n }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/32/GetRangeTextOnlineRequest.java\nindex a0f0d1c8ab4..01421f64743 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/32/GetRangeTextOnlineRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,31 +39,42 @@ import java.util.*;\n /*\n  * Request model for getRangeTextOnline operation.\n  */\n+\n+\n public class GetRangeTextOnlineRequest implements RequestIfc {\n     /*\n      * The document.\n      */\n-    private byte[] document;\n+\n+  private byte[] document;\n \n     /*\n      * The range start identifier.\n      */\n-    private String rangeStartIdentifier;\n+\n+\n+  private String rangeStartIdentifier;\n \n     /*\n      * The range end identifier.\n      */\n-    private String rangeEndIdentifier;\n+\n+\n+  private String rangeEndIdentifier;\n \n     /*\n      * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    private String loadEncoding;\n+\n+\n+  private String loadEncoding;\n \n     /*\n      * Password for opening an encrypted document.\n      */\n-    private String password;\n+\n+\n+  private String password;\n \n     /*\n      * Initializes a new instance of the GetRangeTextOnlineRequest class.\n@@ -75,83 +85,96 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n      * @param String loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      * @param String password Password for opening an encrypted document.\n      */\n-    public GetRangeTextOnlineRequest(byte[] document, String rangeStartIdentifier, String rangeEndIdentifier, String loadEncoding, String password) {\n-        this.document = document;\n-        this.rangeStartIdentifier = rangeStartIdentifier;\n-        this.rangeEndIdentifier = rangeEndIdentifier;\n-        this.loadEncoding = loadEncoding;\n-        this.password = password;\n-    }\n+\n+\n+  public GetRangeTextOnlineRequest(byte[] document,  String rangeStartIdentifier,  String rangeEndIdentifier,  String loadEncoding,  String password) {\n+    this.document = document;\n+    this.rangeStartIdentifier = rangeStartIdentifier;\n+    this.rangeEndIdentifier = rangeEndIdentifier;\n+    this.loadEncoding = loadEncoding;\n+    this.password = password;\n+  }\n \n     /*\n      * Gets The document.\n      */\n-    public byte[] getDocument() {\n-        return this.document;\n-    }\n+\n+\n+  public byte[] getDocument() {\n+    return this.document;\n+  }\n \n     /*\n      * Sets The document.\n      */\n-    public void setDocument(byte[] value) {\n-        this.document = value;\n-    }\n+\n+  public void setDocument(byte[] value) {\n+    this.document = value;\n+  }\n \n     /*\n      * Gets The range start identifier.\n      */\n-    public String getRangeStartIdentifier() {\n-        return this.rangeStartIdentifier;\n-    }\n+\n+  public String getRangeStartIdentifier() {\n+    return this.rangeStartIdentifier;\n+  }\n \n     /*\n      * Sets The range start identifier.\n      */\n-    public void setRangeStartIdentifier(String value) {\n-        this.rangeStartIdentifier = value;\n-    }\n+\n+  public void setRangeStartIdentifier(String value) {\n+    this.rangeStartIdentifier = value;\n+  }\n \n     /*\n      * Gets The range end identifier.\n      */\n-    public String getRangeEndIdentifier() {\n-        return this.rangeEndIdentifier;\n-    }\n+\n+  public String getRangeEndIdentifier() {\n+    return this.rangeEndIdentifier;\n+  }\n \n     /*\n      * Sets The range end identifier.\n      */\n-    public void setRangeEndIdentifier(String value) {\n-        this.rangeEndIdentifier = value;\n-    }\n+\n+  public void setRangeEndIdentifier(String value) {\n+    this.rangeEndIdentifier = value;\n+  }\n \n     /*\n      * Gets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public String getLoadEncoding() {\n-        return this.loadEncoding;\n-    }\n+\n+  public String getLoadEncoding() {\n+    return this.loadEncoding;\n+  }\n \n     /*\n      * Sets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public void setLoadEncoding(String value) {\n-        this.loadEncoding = value;\n-    }\n+\n+  public void setLoadEncoding(String value) {\n+    this.loadEncoding = value;\n+  }\n \n     /*\n      * Gets Password for opening an encrypted document.\n      */\n-    public String getPassword() {\n-        return this.password;\n-    }\n+\n+  public String getPassword() {\n+    return this.password;\n+  }\n \n     /*\n      * Sets Password for opening an encrypted document.\n      */\n-    public void setPassword(String value) {\n-        this.password = value;\n-    }\n+\n+  public void setPassword(String value) {\n+    this.password = value;\n+  }\n \n \n     /*\n@@ -161,69 +184,67 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n-        if (getDocument() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling getRangeTextOnline\");\n-        }\n+    if (getDocument() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling getRangeTextOnline\");\n+    }\n \n         // verify the required parameter 'RangeStartIdentifier' is set\n-        if (getRangeStartIdentifier() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'RangeStartIdentifier' when calling getRangeTextOnline\");\n-        }\n+    if (getRangeStartIdentifier() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'RangeStartIdentifier' when calling getRangeTextOnline\");\n+    }\n \n-        Object localVarPostBody = null;\n+    Object localVarPostBody = null;\n \n         // create path and map variables\n-        String localVarPath = \"/words/online/get/range/{rangeStartIdentifier}/{rangeEndIdentifier}\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"rangeStartIdentifier\", getRangeStartIdentifier());\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"rangeEndIdentifier\", getRangeEndIdentifier());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n-            localVarFormParams.put(\"Document\", getDocument());\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"multipart/form-data\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/online/get/range/{rangeStartIdentifier}/{rangeEndIdentifier}\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"rangeStartIdentifier\", getRangeStartIdentifier());\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"rangeEndIdentifier\", getRangeEndIdentifier());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    if (getDocument() != null) localVarFormParams.put(\"Document\", getDocument());\n+\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"multipart/form-data\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return RangeTextResponse.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return RangeTextResponse.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -231,7 +252,8 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public RangeTextResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RangeTextResponse)apiClient.deserialize(response, RangeTextResponse.class);\n-    }\n-}\n+\n+  public RangeTextResponse deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    return (RangeTextResponse) apiClient.deserialize(response, RangeTextResponse.class);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 128
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/32/GetRangeTextOnlineRequest.java\nindex a0f0d1c8ab4..a31045971bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/32/GetRangeTextOnlineRequest.java\n@@ -232,6 +232,6 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RangeTextResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RangeTextResponse)apiClient.deserialize(response, RangeTextResponse.class);\n+        return (RangeTextResponse) apiClient.deserialize(response, RangeTextResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/32/GetRangeTextOnlineRequest.java\nindex a0f0d1c8ab4..3ee739807da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/32/GetRangeTextOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/32/GetRangeTextOnlineRequest.java\n@@ -232,6 +232,6 @@ public class GetRangeTextOnlineRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public RangeTextResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (RangeTextResponse)apiClient.deserialize(response, RangeTextResponse.class);\n+        return (RangeTextResponse)  apiClient.deserialize(response, RangeTextResponse.class);\n     }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}