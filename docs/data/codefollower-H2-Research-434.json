{
    "project_name": "codefollower-H2-Research",
    "error_id": "434",
    "information": {
        "errors": [
            {
                "line": "104",
                "column": "43",
                "severity": "warning",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            VersionedValue oldValue = null;\n            if (buff.get() == 1) {\n                oldValue = (VersionedValue)map.getValueType().read(buff);\n            }\n            return new Record(mapId, key, oldValue);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/434/Record.java\nindex 603d43f3110..6a6f34a01fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/434/Record.java\n@@ -101,7 +101,7 @@ final class Record\n             Object key = map.getKeyType().read(buff);\n             VersionedValue oldValue = null;\n             if (buff.get() == 1) {\n-                oldValue = (VersionedValue)map.getValueType().read(buff);\n+                oldValue = (VersionedValue) map.getValueType().read(buff);\n             }\n             return new Record(mapId, key, oldValue);\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/434/Record.java\nindex 603d43f3110..a865c117578 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/434/Record.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.mvstore.tx;\n \n import org.h2.engine.Constants;\n@@ -11,6 +12,7 @@ import org.h2.mvstore.MVMap;\n import org.h2.mvstore.WriteBuffer;\n import org.h2.mvstore.type.BasicDataType;\n import org.h2.value.VersionedValue;\n+\n import java.nio.ByteBuffer;\n \n /**\n@@ -19,96 +21,94 @@ import java.nio.ByteBuffer;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-final class Record\n-{\n-    /**\n-     * Map id for this change is related to\n-     */\n-    final int mapId;\n+final class Record {\n+  /**\n+   * Map id for this change is related to\n+   */\n+  final int mapId;\n \n-    /**\n-     * Key of the changed map entry key\n-     */\n-    final Object key;\n+  /**\n+   * Key of the changed map entry key\n+   */\n+  final Object key;\n \n-    /**\n-     * Value of the entry before change.\n-     * It is null if entry did not exist before the change (addition).\n-     */\n-    final VersionedValue oldValue;\n+  /**\n+   * Value of the entry before change.\n+   * It is null if entry did not exist before the change (addition).\n+   */\n+  final VersionedValue oldValue;\n \n-    Record(int mapId, Object key, VersionedValue oldValue) {\n-        this.mapId = mapId;\n-        this.key = key;\n-        this.oldValue = oldValue;\n-    }\n+  Record(int mapId, Object key, VersionedValue oldValue) {\n+    this.mapId = mapId;\n+    this.key = key;\n+    this.oldValue = oldValue;\n+  }\n \n-    @Override\n-    public String toString() {\n-        return \"mapId=\" + mapId + \", key=\" + key + \", value=\" + oldValue;\n-    }\n+  @Override\n+  public String toString() {\n+    return \"mapId=\" + mapId + \", key=\" + key + \", value=\" + oldValue;\n+  }\n \n-    /**\n-     * A data type for undo log values\n-     */\n-    static final class Type extends BasicDataType<Record>\n-    {\n-        private final TransactionStore transactionStore;\n+  /**\n+   * A data type for undo log values\n+   */\n+  static final class Type extends BasicDataType<Record> {\n+    private final TransactionStore transactionStore;\n \n-        Type(TransactionStore transactionStore) {\n-            this.transactionStore = transactionStore;\n-        }\n+    Type(TransactionStore transactionStore) {\n+      this.transactionStore = transactionStore;\n+    }\n \n-        @Override\n-        public int getMemory(Record record) {\n-            int result = Constants.MEMORY_OBJECT + 4 + 3 * Constants.MEMORY_POINTER;\n-            if (record.mapId >= 0) {\n-                MVMap<Object, VersionedValue> map = transactionStore.getMap(record.mapId);\n-                result += map.getKeyType().getMemory(record.key) +\n-                        map.getValueType().getMemory(record.oldValue);\n-            }\n-            return result;\n-        }\n+    @Override\n+    public int getMemory(Record record) {\n+      int result = Constants.MEMORY_OBJECT + 4 + 3 * Constants.MEMORY_POINTER;\n+      if (record.mapId >= 0) {\n+        MVMap<Object, VersionedValue> map = transactionStore.getMap(record.mapId);\n+        result += map.getKeyType().getMemory(record.key) +\n+            map.getValueType().getMemory(record.oldValue);\n+      }\n+      return result;\n+    }\n \n-        @Override\n-        public int compare(Record aObj, Record bObj) {\n-            throw new UnsupportedOperationException();\n-        }\n+    @Override\n+    public int compare(Record aObj, Record bObj) {\n+      throw new UnsupportedOperationException();\n+    }\n \n-        @Override\n-        public void write(WriteBuffer buff, Record record) {\n-            buff.putVarInt(record.mapId);\n-            if (record.mapId >= 0) {\n-                MVMap<Object, VersionedValue> map = transactionStore.getMap(record.mapId);\n-                map.getKeyType().write(buff, record.key);\n-                VersionedValue oldValue = record.oldValue;\n-                if (oldValue == null) {\n-                    buff.put((byte) 0);\n-                } else {\n-                    buff.put((byte) 1);\n-                    map.getValueType().write(buff, oldValue);\n-                }\n-            }\n+    @Override\n+    public void write(WriteBuffer buff, Record record) {\n+      buff.putVarInt(record.mapId);\n+      if (record.mapId >= 0) {\n+        MVMap<Object, VersionedValue> map = transactionStore.getMap(record.mapId);\n+        map.getKeyType().write(buff, record.key);\n+        VersionedValue oldValue = record.oldValue;\n+        if (oldValue == null) {\n+          buff.put((byte) 0);\n+        } else {\n+          buff.put((byte) 1);\n+          map.getValueType().write(buff, oldValue);\n         }\n+      }\n+    }\n \n-        @Override\n-        public Record read(ByteBuffer buff) {\n-            int mapId = DataUtils.readVarInt(buff);\n-            if (mapId < 0) {\n-                return new Record(-1, null, null);\n-            }\n-            MVMap<Object, VersionedValue> map = transactionStore.getMap(mapId);\n-            Object key = map.getKeyType().read(buff);\n-            VersionedValue oldValue = null;\n-            if (buff.get() == 1) {\n-                oldValue = (VersionedValue)map.getValueType().read(buff);\n-            }\n-            return new Record(mapId, key, oldValue);\n-        }\n+    @Override\n+    public Record read(ByteBuffer buff) {\n+      int mapId = DataUtils.readVarInt(buff);\n+      if (mapId < 0) {\n+        return new Record(-1, null, null);\n+      }\n+      MVMap<Object, VersionedValue> map = transactionStore.getMap(mapId);\n+      Object key = map.getKeyType().read(buff);\n+      VersionedValue oldValue = null;\n+      if (buff.get() == 1) {\n+        oldValue = (VersionedValue) map.getValueType().read(buff);\n+      }\n+      return new Record(mapId, key, oldValue);\n+    }\n \n-        @Override\n-        public Record[] createStorage(int size) {\n-            return new Record[size];\n-        }\n+    @Override\n+    public Record[] createStorage(int size) {\n+      return new Record[size];\n     }\n+  }\n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "103",
                    "column": "43",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/434/Record.java\nindex 603d43f3110..6d08034267c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/434/Record.java\n@@ -19,8 +19,8 @@ import java.nio.ByteBuffer;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-final class Record\n-{\n+final class Record {\n+\n     /**\n      * Map id for this change is related to\n      */\n@@ -51,8 +51,7 @@ final class Record\n     /**\n      * A data type for undo log values\n      */\n-    static final class Type extends BasicDataType<Record>\n-    {\n+    static final class Type extends BasicDataType<Record> {\n         private final TransactionStore transactionStore;\n \n         Type(TransactionStore transactionStore) {\n@@ -111,4 +110,4 @@ final class Record\n             return new Record[size];\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/434/Record.java\nindex 603d43f3110..eb009dd7556 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/434/Record.java\n@@ -19,22 +19,29 @@ import java.nio.ByteBuffer;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-final class Record\n-{\n+\n+\n+final class Record {\n     /**\n      * Map id for this change is related to\n      */\n+\n+\n     final int mapId;\n \n     /**\n      * Key of the changed map entry key\n      */\n+\n+\n     final Object key;\n \n     /**\n      * Value of the entry before change.\n      * It is null if entry did not exist before the change (addition).\n      */\n+\n+\n     final VersionedValue oldValue;\n \n     Record(int mapId, Object key, VersionedValue oldValue) {\n@@ -45,14 +52,17 @@ final class Record\n \n     @Override\n     public String toString() {\n-        return \"mapId=\" + mapId + \", key=\" + key + \", value=\" + oldValue;\n+        return \"mapId=\" + mapId + \", key=\"\n+        + key + \", value=\" + oldValue;\n     }\n \n     /**\n      * A data type for undo log values\n      */\n-    static final class Type extends BasicDataType<Record>\n-    {\n+\n+\n+    static final class Type extends BasicDataType<Record> {\n+\n         private final TransactionStore transactionStore;\n \n         Type(TransactionStore transactionStore) {\n@@ -64,8 +74,7 @@ final class Record\n             int result = Constants.MEMORY_OBJECT + 4 + 3 * Constants.MEMORY_POINTER;\n             if (record.mapId >= 0) {\n                 MVMap<Object, VersionedValue> map = transactionStore.getMap(record.mapId);\n-                result += map.getKeyType().getMemory(record.key) +\n-                        map.getValueType().getMemory(record.oldValue);\n+                result += map.getKeyType().getMemory(record.key) + map.getValueType().getMemory(record.oldValue);\n             }\n             return result;\n         }\n@@ -101,7 +110,7 @@ final class Record\n             Object key = map.getKeyType().read(buff);\n             VersionedValue oldValue = null;\n             if (buff.get() == 1) {\n-                oldValue = (VersionedValue)map.getValueType().read(buff);\n+                oldValue = (VersionedValue) map.getValueType().read(buff);\n             }\n             return new Record(mapId, key, oldValue);\n         }\n@@ -110,5 +119,7 @@ final class Record\n         public Record[] createStorage(int size) {\n             return new Record[size];\n         }\n+\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/434/Record.java\nindex 603d43f3110..6a6f34a01fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/434/Record.java\n@@ -101,7 +101,7 @@ final class Record\n             Object key = map.getKeyType().read(buff);\n             VersionedValue oldValue = null;\n             if (buff.get() == 1) {\n-                oldValue = (VersionedValue)map.getValueType().read(buff);\n+                oldValue = (VersionedValue) map.getValueType().read(buff);\n             }\n             return new Record(mapId, key, oldValue);\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/434/Record.java\nindex 603d43f3110..6a6f34a01fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/434/Record.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/434/Record.java\n@@ -101,7 +101,7 @@ final class Record\n             Object key = map.getKeyType().read(buff);\n             VersionedValue oldValue = null;\n             if (buff.get() == 1) {\n-                oldValue = (VersionedValue)map.getValueType().read(buff);\n+                oldValue = (VersionedValue) map.getValueType().read(buff);\n             }\n             return new Record(mapId, key, oldValue);\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}