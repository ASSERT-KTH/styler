{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3707",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "54",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3707/DynamicRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3707/DynamicRecordCheck.java\nindex 7421cf589f6..f35f2cf0241 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3707/DynamicRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3707/DynamicRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import org.neo4j.consistency.report.ConsistencyReport;\n@@ -26,67 +27,64 @@ import org.neo4j.kernel.impl.store.record.DynamicRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n public class DynamicRecordCheck\n-        implements RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport>,\n-        ComparativeRecordChecker<DynamicRecord, DynamicRecord, ConsistencyReport.DynamicConsistencyReport>\n+    implements RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport>,\n+    ComparativeRecordChecker<DynamicRecord, DynamicRecord, ConsistencyReport.DynamicConsistencyReport>\n {\n-    private final int blockSize;\n-    private final DynamicStore dereference;\n+  private final int blockSize;\n+  private final DynamicStore dereference;\n+\n+  public DynamicRecordCheck(RecordStore<DynamicRecord> store, DynamicStore dereference)\n+  {\n+    this.blockSize = store.getRecordDataSize();\n+    this.dereference = dereference;\n+  }\n \n-    public DynamicRecordCheck( RecordStore<DynamicRecord> store, DynamicStore dereference )\n+  @Override\n+  public void check(DynamicRecord record,\n+                    CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n+                    RecordAccess records)\n+  {\n+    if (!record.inUse())\n     {\n-        this.blockSize = store.getRecordDataSize();\n-        this.dereference = dereference;\n+      return;\n     }\n-\n-    @Override\n-    public void check( DynamicRecord record,\n-                       CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n-                       RecordAccess records )\n+    if (record.getLength() == 0)\n+    {\n+      engine.report().emptyBlock();\n+    } else if (record.getLength() < 0)\n     {\n-        if ( !record.inUse() )\n-        {\n-            return;\n-        }\n-        if ( record.getLength() == 0 )\n-        {\n-            engine.report().emptyBlock();\n-        }\n-        else if ( record.getLength() < 0 )\n-        {\n-            engine.report().invalidLength();\n-        }\n-        if ( !Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n-        {\n-            if ( record.getNextBlock() == record.getId() )\n-            {\n-                engine.report().selfReferentialNext();\n-            }\n-            else\n-            {\n-                engine.comparativeCheck( dereference.lookup( records, record.getNextBlock() ), this );\n-            }\n-            if ( record.getLength() < blockSize )\n-            {\n-                engine.report().recordNotFullReferencesNext();\n-            }\n-        }\n+      engine.report().invalidLength();\n     }\n+    if (!Record.NO_NEXT_BLOCK.is(record.getNextBlock()))\n+    {\n+      if (record.getNextBlock() == record.getId())\n+      {\n+        engine.report().selfReferentialNext();\n+      } else\n+      {\n+        engine.comparativeCheck(dereference.lookup(records, record.getNextBlock()), this);\n+      }\n+      if (record.getLength() < blockSize)\n+      {\n+        engine.report().recordNotFullReferencesNext();\n+      }\n+    }\n+  }\n \n-    @Override\n-    public void checkReference( DynamicRecord record, DynamicRecord next,\n-                                CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n-                                RecordAccess records )\n+  @Override\n+  public void checkReference(DynamicRecord record, DynamicRecord next,\n+                             CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n+                             RecordAccess records)\n+  {\n+    if (!next.inUse())\n+    {\n+      engine.report().nextNotInUse(next);\n+    } else\n     {\n-        if ( !next.inUse() )\n-        {\n-            engine.report().nextNotInUse( next );\n-        }\n-        else\n-        {\n-            if ( next.getLength() <= 0 )\n-            {\n-                engine.report().emptyNextBlock( next );\n-            }\n-        }\n+      if (next.getLength() <= 0)\n+      {\n+        engine.report().emptyNextBlock(next);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 87
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3707/DynamicRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3707/DynamicRecordCheck.java\nindex 7421cf589f6..90aefdb4bc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3707/DynamicRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3707/DynamicRecordCheck.java\n@@ -25,9 +25,7 @@ import org.neo4j.kernel.impl.store.RecordStore;\n import org.neo4j.kernel.impl.store.record.DynamicRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n-public class DynamicRecordCheck\n-        implements RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport>,\n-        ComparativeRecordChecker<DynamicRecord, DynamicRecord, ConsistencyReport.DynamicConsistencyReport>\n+public class DynamicRecordCheck implements RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport>, ComparativeRecordChecker<DynamicRecord, DynamicRecord, ConsistencyReport.DynamicConsistencyReport>\n {\n     private final int blockSize;\n     private final DynamicStore dereference;\n@@ -39,15 +37,15 @@ public class DynamicRecordCheck\n     }\n \n     @Override\n-    public void check( DynamicRecord record,\n-                       CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n+    public void check( DynamicRecord record, CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n                        RecordAccess records )\n-    {\n+{\n         if ( !record.inUse() )\n         {\n             return;\n         }\n-        if ( record.getLength() == 0 )\n+\n+if ( record.getLength() == 0 )\n         {\n             engine.report().emptyBlock();\n         }\n@@ -55,7 +53,8 @@ public class DynamicRecordCheck\n         {\n             engine.report().invalidLength();\n         }\n-        if ( !Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n+\n+if ( !Record.NO_NEXT_BLOCK.is( record.getNextBlock() ) )\n         {\n             if ( record.getNextBlock() == record.getId() )\n             {\n@@ -65,7 +64,8 @@ public class DynamicRecordCheck\n             {\n                 engine.comparativeCheck( dereference.lookup( records, record.getNextBlock() ), this );\n             }\n-            if ( record.getLength() < blockSize )\n+\n+if ( record.getLength() < blockSize )\n             {\n                 engine.report().recordNotFullReferencesNext();\n             }\n@@ -73,10 +73,9 @@ public class DynamicRecordCheck\n     }\n \n     @Override\n-    public void checkReference( DynamicRecord record, DynamicRecord next,\n-                                CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n+    public void checkReference( DynamicRecord record, DynamicRecord next, CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n                                 RecordAccess records )\n-    {\n+{\n         if ( !next.inUse() )\n         {\n             engine.report().nextNotInUse( next );\n@@ -89,4 +88,4 @@ public class DynamicRecordCheck\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}