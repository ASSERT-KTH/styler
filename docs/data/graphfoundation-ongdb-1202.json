{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1202",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "122",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1202/ForsetiLockManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1202/ForsetiLockManager.java\nindex 28a7cfe1daa..b6e8e73727c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1202/ForsetiLockManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1202/ForsetiLockManager.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.enterprise.lock.forseti;\n \n import java.time.Clock;\n@@ -109,218 +110,231 @@ import org.neo4j.storageengine.api.lock.WaitStrategy;\n  */\n public class ForsetiLockManager implements Locks\n {\n-    /** This is Forsetis internal lock API, which it uses to do deadlock detection. */\n-    interface Lock\n-    {\n-        /**\n-         * For each client currently holding this lock, copy their wait list into the given bitset.\n-         * This is how information on who is waiting for whom is propagated.\n-         */\n-        void copyHolderWaitListsInto( SimpleBitSet waitList );\n+  /**\n+   * This is Forsetis internal lock API, which it uses to do deadlock detection.\n+   */\n+  interface Lock\n+  {\n+    /**\n+     * For each client currently holding this lock, copy their wait list into the given bitset.\n+     * This is how information on who is waiting for whom is propagated.\n+     */\n+    void copyHolderWaitListsInto(SimpleBitSet waitList);\n \n-        /**\n-         * Check if anyone holding this lock is currently waiting for the specified client. This\n-         * check is performed continuously while a client waits for a lock - if the check ever\n-         * comes back positive, it means we've deadlocked, because we are waiting for someone\n-         * (the holder of the lock) who in turn is waiting for us (so they won't release the lock).\n-         *\n-         * @param client the client id that is waiting to grab this lock\n-         * @return the id of a client we've deadlocked with, or -1 if there is not currently a deadlock\n-         */\n-        int detectDeadlock( int client );\n+    /**\n+     * Check if anyone holding this lock is currently waiting for the specified client. This\n+     * check is performed continuously while a client waits for a lock - if the check ever\n+     * comes back positive, it means we've deadlocked, because we are waiting for someone\n+     * (the holder of the lock) who in turn is waiting for us (so they won't release the lock).\n+     *\n+     * @param client the client id that is waiting to grab this lock\n+     * @return the id of a client we've deadlocked with, or -1 if there is not currently a deadlock\n+     */\n+    int detectDeadlock(int client);\n \n-        /**\n-         * For introspection and error messages, this gives a (somewhat) human-readable description of who is waiting\n-         * for the lock.\n-         */\n-        String describeWaitList();\n+    /**\n+     * For introspection and error messages, this gives a (somewhat) human-readable description of who is waiting\n+     * for the lock.\n+     */\n+    String describeWaitList();\n \n-        /**\n-         * Collect the current owners of this lock into the given set. This is used for verifying that apparent\n-         * deadlocks really do involve circular wait dependencies.\n-         *\n-         * Note that the owner set may change while this method is running, and thus it is not guaranteed to reflect any\n-         * particular snapshot of the set of lock owners. Furthermore, the set may change arbitrarily after the method\n-         * returns, immediately rendering the result outdated.\n-         * @param owners The set into which to collect the current owners of this lock.\n-         */\n-        void collectOwners( Set<ForsetiClient> owners );\n-    }\n+    /**\n+     * Collect the current owners of this lock into the given set. This is used for verifying that apparent\n+     * deadlocks really do involve circular wait dependencies.\n+     * <p>\n+     * Note that the owner set may change while this method is running, and thus it is not guaranteed to reflect any\n+     * particular snapshot of the set of lock owners. Furthermore, the set may change arbitrarily after the method\n+     * returns, immediately rendering the result outdated.\n+     *\n+     * @param owners The set into which to collect the current owners of this lock.\n+     */\n+    void collectOwners(Set<ForsetiClient> owners);\n+  }\n \n+  /**\n+   * Deadlocks always involve at least two participants - and they can be resolved by either or both participants\n+   * \"aborting\", meaning they release their locks and give up, perhaps to try again later. However, this is extremely\n+   * expensive, since the client may be acting on behalf of a big expensive (or small but important) transaction.\n+   * <p/>\n+   * Hence, we want to minimize aborts, and we want to ensure that whichever client does abort is the most sensible\n+   * one. This interface abstracts multiple different approaches for choosing who should abort.\n+   */\n+  interface DeadlockResolutionStrategy\n+  {\n     /**\n-     * Deadlocks always involve at least two participants - and they can be resolved by either or both participants\n-     * \"aborting\", meaning they release their locks and give up, perhaps to try again later. However, this is extremely\n-     * expensive, since the client may be acting on behalf of a big expensive (or small but important) transaction.\n+     * This gets called when a deadlock has been detected by a client - it realizes it's in a deadlock\n+     * situation with at least one other client. In many cases, both (or more!) clients involved in the\n+     * deadlock will discover this fact at the same time, and thus this method will get called from different\n+     * clients asking about the same deadlock.\n+     * <p/>\n+     * In fact, this method is guaranteed to keep getting called, eventually from every client involved in\n+     * a deadlock, assuming the method keeps returning false.\n+     * <p/>\n+     * The goal of whoever implements this method should be that for each unique deadlock, independent of how\n+     * many clients discover it, exactly one client should abort, and no more. Which client is chosen to abort\n+     * is up to the strategy to decide, but should generally be based on something sensible relating to the\n+     * value or importance of letting one client continue to the detriment of another.\n      * <p/>\n-     * Hence, we want to minimize aborts, and we want to ensure that whichever client does abort is the most sensible\n-     * one. This interface abstracts multiple different approaches for choosing who should abort.\n+     * IMPORTANT: For every unique deadlock, this method MUST abort at least one client involved, eventually.\n+     * If it does not guarantee this, the deadlock will not be resolved, and the database will\n+     * actually deadlock, causing a fatal system outage.\n+     *\n+     * @param clientThatsAsking        this is the client that has discovered a deadlock\n+     * @param clientWereDeadlockedWith this is the client we've realized we are deadlocking with, meaning\n+     *                                 this method will eventually be invoked from this clients perspective\n+     *                                 as well (eg. with inverted arguments), assuming we return false here.\n+     * @return true to make {@code clientThatsAsking} abort, false to take no action, but wait to be called again\n+     * from the perspective of the other client.\n      */\n-    interface DeadlockResolutionStrategy\n-    {\n-        /**\n-         * This gets called when a deadlock has been detected by a client - it realizes it's in a deadlock\n-         * situation with at least one other client. In many cases, both (or more!) clients involved in the\n-         * deadlock will discover this fact at the same time, and thus this method will get called from different\n-         * clients asking about the same deadlock.\n-         * <p/>\n-         * In fact, this method is guaranteed to keep getting called, eventually from every client involved in\n-         * a deadlock, assuming the method keeps returning false.\n-         * <p/>\n-         * The goal of whoever implements this method should be that for each unique deadlock, independent of how\n-         * many clients discover it, exactly one client should abort, and no more. Which client is chosen to abort\n-         * is up to the strategy to decide, but should generally be based on something sensible relating to the\n-         * value or importance of letting one client continue to the detriment of another.\n-         * <p/>\n-         * IMPORTANT: For every unique deadlock, this method MUST abort at least one client involved, eventually.\n-         * If it does not guarantee this, the deadlock will not be resolved, and the database will\n-         * actually deadlock, causing a fatal system outage.\n-         *\n-         * @param clientThatsAsking this is the client that has discovered a deadlock\n-         * @param clientWereDeadlockedWith this is the client we've realized we are deadlocking with, meaning\n-         * this method will eventually be invoked from this clients perspective\n-         * as well (eg. with inverted arguments), assuming we return false here.\n-         * @return true to make {@code clientThatsAsking} abort, false to take no action, but wait to be called again\n-         * from the perspective of the other client.\n-         */\n-        boolean shouldAbort( ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith );\n-    }\n-\n-    /** Pointers to lock maps, one array per resource type. */\n-    private final ConcurrentMap<Long,ForsetiLockManager.Lock>[] lockMaps;\n+    boolean shouldAbort(ForsetiClient clientThatsAsking, ForsetiClient clientWereDeadlockedWith);\n+  }\n \n-    /** Reverse lookup resource types by id, used for introspection */\n-    private final ResourceType[] resourceTypes;\n+  /**\n+   * Pointers to lock maps, one array per resource type.\n+   */\n+  private final ConcurrentMap<Long, ForsetiLockManager.Lock>[] lockMaps;\n \n-    /** Pool forseti clients. */\n-    private final Pool<ForsetiClient> clientPool;\n+  /**\n+   * Reverse lookup resource types by id, used for introspection\n+   */\n+  private final ResourceType[] resourceTypes;\n \n-    private volatile boolean closed;\n+  /**\n+   * Pool forseti clients.\n+   */\n+  private final Pool<ForsetiClient> clientPool;\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public ForsetiLockManager( Config config, Clock clock, ResourceType... resourceTypes )\n-    {\n-        int maxResourceId = findMaxResourceId( resourceTypes );\n-        this.lockMaps = new ConcurrentMap[maxResourceId];\n-        this.resourceTypes = new ResourceType[maxResourceId];\n+  private volatile boolean closed;\n \n-        /* Wait strategies per resource type */\n-        WaitStrategy<AcquireLockTimeoutException>[] waitStrategies = new WaitStrategy[maxResourceId];\n+  @SuppressWarnings(\"unchecked\")\n+  public ForsetiLockManager(Config config, Clock clock, ResourceType... resourceTypes)\n+  {\n+    int maxResourceId = findMaxResourceId(resourceTypes);\n+    this.lockMaps = new ConcurrentMap[maxResourceId];\n+    this.resourceTypes = new ResourceType[maxResourceId];\n \n-        for ( ResourceType type : resourceTypes )\n-        {\n-            this.lockMaps[type.typeId()] = new ConcurrentHashMap<>( 16, 0.6f, 512 );\n-            waitStrategies[type.typeId()] = type.waitStrategy();\n-            this.resourceTypes[type.typeId()] = type;\n-        }\n-        // TODO Using a FlyweightPool here might still be more than what we actually need.\n-        // TODO We should investigate if a simple concurrent stack (aka. free-list) would\n-        // TODO be good enough. In fact, we could add the required fields for such a stack\n-        // TODO to the ForsetiClient objects themselves, making the stack garbage-free in\n-        // TODO the (presumably) common case of client re-use.\n-        clientPool = new ForsetiClientFlyweightPool( config, clock, lockMaps, waitStrategies );\n-    }\n+    /* Wait strategies per resource type */\n+    WaitStrategy<AcquireLockTimeoutException>[] waitStrategies = new WaitStrategy[maxResourceId];\n \n-    /**\n-     * Create a new client to use to grab and release locks.\n-     */\n-    @Override\n-    public Client newClient()\n+    for (ResourceType type : resourceTypes)\n     {\n-        // We check this volatile closed flag here, which may seem like a contention overhead, but as the time\n-        // of writing we apply pooling of transactions and in extension pooling of lock clients,\n-        // so this method is called very rarely.\n-        if ( closed )\n-        {\n-            throw new IllegalStateException( this + \" already closed\" );\n-        }\n-\n-        ForsetiClient forsetiClient = clientPool.acquire();\n-        forsetiClient.reset();\n-        return forsetiClient;\n+      this.lockMaps[type.typeId()] = new ConcurrentHashMap<>(16, 0.6f, 512);\n+      waitStrategies[type.typeId()] = type.waitStrategy();\n+      this.resourceTypes[type.typeId()] = type;\n     }\n+    // TODO Using a FlyweightPool here might still be more than what we actually need.\n+    // TODO We should investigate if a simple concurrent stack (aka. free-list) would\n+    // TODO be good enough. In fact, we could add the required fields for such a stack\n+    // TODO to the ForsetiClient objects themselves, making the stack garbage-free in\n+    // TODO the (presumably) common case of client re-use.\n+    clientPool = new ForsetiClientFlyweightPool(config, clock, lockMaps, waitStrategies);\n+  }\n \n-    @Override\n-    public void accept( Visitor out )\n+  /**\n+   * Create a new client to use to grab and release locks.\n+   */\n+  @Override\n+  public Client newClient()\n+  {\n+    // We check this volatile closed flag here, which may seem like a contention overhead, but as the time\n+    // of writing we apply pooling of transactions and in extension pooling of lock clients,\n+    // so this method is called very rarely.\n+    if (closed)\n     {\n-        for ( int i = 0; i < lockMaps.length; i++ )\n-        {\n-            if ( lockMaps[i] != null )\n-            {\n-                ResourceType type = resourceTypes[i];\n-                for ( Map.Entry<Long,Lock> entry : lockMaps[i].entrySet() )\n-                {\n-                    Lock lock = entry.getValue();\n-                    out.visit( type, entry.getKey(), lock.describeWaitList(), 0, System.identityHashCode( lock ) );\n-                }\n-            }\n-        }\n+      throw new IllegalStateException(this + \" already closed\");\n     }\n \n-    private int findMaxResourceId( ResourceType[] resourceTypes )\n+    ForsetiClient forsetiClient = clientPool.acquire();\n+    forsetiClient.reset();\n+    return forsetiClient;\n+  }\n+\n+  @Override\n+  public void accept(Visitor out)\n+  {\n+    for (int i = 0; i < lockMaps.length; i++)\n     {\n-        int max = 0;\n-        for ( ResourceType resourceType : resourceTypes )\n+      if (lockMaps[i] != null)\n+      {\n+        ResourceType type = resourceTypes[i];\n+        for (Map.Entry<Long, Lock> entry : lockMaps[i].entrySet())\n         {\n-            max = Math.max( resourceType.typeId(), max );\n+          Lock lock = entry.getValue();\n+          out.visit(type, entry.getKey(), lock.describeWaitList(), 0, System.identityHashCode(lock));\n         }\n-        return max + 1;\n+      }\n     }\n+  }\n \n-    @Override\n-    public void close()\n+  private int findMaxResourceId(ResourceType[] resourceTypes)\n+  {\n+    int max = 0;\n+    for (ResourceType resourceType : resourceTypes)\n     {\n-        this.closed = true;\n+      max = Math.max(resourceType.typeId(), max);\n     }\n+    return max + 1;\n+  }\n \n-    private static class ForsetiClientFlyweightPool extends LinkedQueuePool<ForsetiClient>\n-    {\n-        /** Client id counter **/\n-        private final AtomicInteger clientIds = new AtomicInteger( 0 );\n+  @Override\n+  public void close()\n+  {\n+    this.closed = true;\n+  }\n \n-        /** Re-use ids, forseti uses these in arrays, so we want to keep them low and not loose them. */\n-        private final Queue<Integer> unusedIds = new ConcurrentLinkedQueue<>();\n-        private final ConcurrentMap<Integer,ForsetiClient> clientsById = new ConcurrentHashMap<>();\n-        private final Config config;\n-        private final Clock clock;\n-        private final ConcurrentMap<Long,ForsetiLockManager.Lock>[] lockMaps;\n-        private final WaitStrategy<AcquireLockTimeoutException>[] waitStrategies;\n-        private final DeadlockResolutionStrategy deadlockResolutionStrategy = DeadlockStrategies.DEFAULT;\n+  private static class ForsetiClientFlyweightPool extends LinkedQueuePool<ForsetiClient>\n+  {\n+    /**\n+     * Client id counter\n+     **/\n+    private final AtomicInteger clientIds = new AtomicInteger(0);\n \n-        ForsetiClientFlyweightPool( Config config, Clock clock, ConcurrentMap<Long,Lock>[] lockMaps,\n-                WaitStrategy<AcquireLockTimeoutException>[] waitStrategies )\n-        {\n-            super( 128, null );\n-            this.config = config;\n-            this.clock = clock;\n-            this.lockMaps = lockMaps;\n-            this.waitStrategies = waitStrategies;\n-        }\n+    /**\n+     * Re-use ids, forseti uses these in arrays, so we want to keep them low and not loose them.\n+     */\n+    private final Queue<Integer> unusedIds = new ConcurrentLinkedQueue<>();\n+    private final ConcurrentMap<Integer, ForsetiClient> clientsById = new ConcurrentHashMap<>();\n+    private final Config config;\n+    private final Clock clock;\n+    private final ConcurrentMap<Long, ForsetiLockManager.Lock>[] lockMaps;\n+    private final WaitStrategy<AcquireLockTimeoutException>[] waitStrategies;\n+    private final DeadlockResolutionStrategy deadlockResolutionStrategy = DeadlockStrategies.DEFAULT;\n \n-        @Override\n-        protected ForsetiClient create()\n-        {\n-            Integer id = unusedIds.poll();\n-            if ( id == null )\n-            {\n-                id = clientIds.getAndIncrement();\n-            }\n-            long lockAcquisitionTimeoutMillis = config.get( GraphDatabaseSettings.lock_acquisition_timeout ).toMillis();\n-            ForsetiClient client = new ForsetiClient( id, lockMaps, waitStrategies, this,\n-                    deadlockResolutionStrategy, clientsById::get, lockAcquisitionTimeoutMillis, clock );\n-            clientsById.put( id, client );\n-            return client;\n-        }\n+    ForsetiClientFlyweightPool(Config config, Clock clock, ConcurrentMap<Long, Lock>[] lockMaps,\n+                               WaitStrategy<AcquireLockTimeoutException>[] waitStrategies)\n+    {\n+      super(128, null);\n+      this.config = config;\n+      this.clock = clock;\n+      this.lockMaps = lockMaps;\n+      this.waitStrategies = waitStrategies;\n+    }\n \n-        @Override\n-        protected void dispose( ForsetiClient resource )\n-        {\n-            super.dispose( resource );\n-            clientsById.remove( resource.id() );\n-            if ( resource.id() < 1024 )\n-            {\n-                // Re-use all ids < 1024\n-                unusedIds.offer( resource.id() );\n-            }\n-        }\n+    @Override\n+    protected ForsetiClient create()\n+    {\n+      Integer id = unusedIds.poll();\n+      if (id == null)\n+      {\n+        id = clientIds.getAndIncrement();\n+      }\n+      long lockAcquisitionTimeoutMillis = config.get(GraphDatabaseSettings.lock_acquisition_timeout).toMillis();\n+      ForsetiClient client = new ForsetiClient(id, lockMaps, waitStrategies, this,\n+          deadlockResolutionStrategy, clientsById::get, lockAcquisitionTimeoutMillis, clock);\n+      clientsById.put(id, client);\n+      return client;\n+    }\n+\n+    @Override\n+    protected void dispose(ForsetiClient resource)\n+    {\n+      super.dispose(resource);\n+      clientsById.remove(resource.id());\n+      if (resource.id() < 1024)\n+      {\n+        // Re-use all ids < 1024\n+        unusedIds.offer(resource.id());\n+      }\n     }\n+  }\n }\n",
            "diff_size": 271
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "289",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1202/ForsetiLockManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1202/ForsetiLockManager.java\nindex 28a7cfe1daa..dea7a1fefb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1202/ForsetiLockManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1202/ForsetiLockManager.java\n@@ -205,8 +205,7 @@ public class ForsetiLockManager implements Locks\n \n         /* Wait strategies per resource type */\n         WaitStrategy<AcquireLockTimeoutException>[] waitStrategies = new WaitStrategy[maxResourceId];\n-\n-        for ( ResourceType type : resourceTypes )\n+for ( ResourceType type : resourceTypes )\n         {\n             this.lockMaps[type.typeId()] = new ConcurrentHashMap<>( 16, 0.6f, 512 );\n             waitStrategies[type.typeId()] = type.waitStrategy();\n@@ -263,7 +262,8 @@ public class ForsetiLockManager implements Locks\n         {\n             max = Math.max( resourceType.typeId(), max );\n         }\n-        return max + 1;\n+\n+return max + 1;\n     }\n \n     @Override\n@@ -286,8 +286,7 @@ public class ForsetiLockManager implements Locks\n         private final WaitStrategy<AcquireLockTimeoutException>[] waitStrategies;\n         private final DeadlockResolutionStrategy deadlockResolutionStrategy = DeadlockStrategies.DEFAULT;\n \n-        ForsetiClientFlyweightPool( Config config, Clock clock, ConcurrentMap<Long,Lock>[] lockMaps,\n-                WaitStrategy<AcquireLockTimeoutException>[] waitStrategies )\n+        ForsetiClientFlyweightPool( Config config, Clock clock, ConcurrentMap<Long,Lock>[] lockMaps, WaitStrategy<AcquireLockTimeoutException>[] waitStrategies )\n         {\n             super( 128, null );\n             this.config = config;\n@@ -307,7 +306,7 @@ public class ForsetiLockManager implements Locks\n             long lockAcquisitionTimeoutMillis = config.get( GraphDatabaseSettings.lock_acquisition_timeout ).toMillis();\n             ForsetiClient client = new ForsetiClient( id, lockMaps, waitStrategies, this,\n                     deadlockResolutionStrategy, clientsById::get, lockAcquisitionTimeoutMillis, clock );\n-            clientsById.put( id, client );\n+clientsById.put( id, client );\n             return client;\n         }\n \n@@ -323,4 +322,4 @@ public class ForsetiLockManager implements Locks\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}