{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4103",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "29",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "29",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4103/UpdateLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4103/UpdateLock.java\nindex 66d6be889ba..549538303d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4103/UpdateLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4103/UpdateLock.java\n@@ -17,27 +17,28 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.kvstore;\n \n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n class UpdateLock extends ReentrantReadWriteLock\n {\n-    UpdateLock()\n-    {\n-        super( true /* always fair */ );\n-    }\n+  UpdateLock()\n+  {\n+    super(true /* always fair */);\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return \"AbstractKeyValyeStore-UpdateLock[owner = \" + getOwner() +\n-                \", is write locked = \" + isWriteLocked() +\n-                \", writer holds count = \" + getWriteHoldCount() +\n-                \", read holds count = \" + getReadHoldCount() +\n-                \", readers count = \" + getReadLockCount() +\n-                \", threads waiting for write lock = \" + getQueuedWriterThreads() +\n-                \", threads waiting for read lock = \" + getQueuedReaderThreads() +\n-                \"] \" + super.toString();\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return \"AbstractKeyValyeStore-UpdateLock[owner = \" + getOwner() +\n+        \", is write locked = \" + isWriteLocked() +\n+        \", writer holds count = \" + getWriteHoldCount() +\n+        \", read holds count = \" + getReadHoldCount() +\n+        \", readers count = \" + getReadLockCount() +\n+        \", threads waiting for write lock = \" + getQueuedWriterThreads() +\n+        \", threads waiting for read lock = \" + getQueuedReaderThreads() +\n+        \"] \" + super.toString();\n+  }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 415).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4103/UpdateLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4103/UpdateLock.java\nindex 66d6be889ba..922ff03c927 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4103/UpdateLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4103/UpdateLock.java\n@@ -31,13 +31,6 @@ class UpdateLock extends ReentrantReadWriteLock\n     @Override\n     public String toString()\n     {\n-        return \"AbstractKeyValyeStore-UpdateLock[owner = \" + getOwner() +\n-                \", is write locked = \" + isWriteLocked() +\n-                \", writer holds count = \" + getWriteHoldCount() +\n-                \", read holds count = \" + getReadHoldCount() +\n-                \", readers count = \" + getReadLockCount() +\n-                \", threads waiting for write lock = \" + getQueuedWriterThreads() +\n-                \", threads waiting for read lock = \" + getQueuedReaderThreads() +\n-                \"] \" + super.toString();\n+        return \"AbstractKeyValyeStore-UpdateLock[owner = \" + getOwner() + \", is write locked = \" + isWriteLocked() + \", writer holds count = \" + getWriteHoldCount() + \", read holds count = \" + getReadHoldCount() + \", readers count = \" + getReadLockCount() + \", threads waiting for write lock = \" + getQueuedWriterThreads() + \", threads waiting for read lock = \" + getQueuedReaderThreads() + \"] \" + super.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}