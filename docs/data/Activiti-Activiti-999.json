{
    "project_name": "Activiti-Activiti",
    "error_id": "999",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.spring.boot;\n\nimport org.activiti.api.process.model.events.ProcessDeployedEvent;\nimport org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/999/ProcessEngineAutoConfiguration.java\nindex 04725aae1d6..63ac9100ba8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/999/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import org.activiti.api.process.model.events.ProcessDeployedEvent;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/999/ProcessEngineAutoConfiguration.java\nindex 04725aae1d6..8082d213aa8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/999/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import org.activiti.api.process.model.events.ProcessDeployedEvent;\n@@ -78,7 +79,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n         SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration(projectModelService);\n         conf.setConfigurators(processEngineConfigurators);\n         configureProcessDefinitionResources(processDefinitionResourceFinder,\n-                                            conf);\n+                conf);\n         conf.setDataSource(dataSource);\n         conf.setTransactionManager(transactionManager);\n \n@@ -89,7 +90,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n         conf.setDbHistoryUsed(activitiProperties.isDbHistoryUsed());\n         conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());\n         addAsyncPropertyValidator(activitiProperties,\n-                                  conf);\n+                conf);\n         conf.setMailServerHost(activitiProperties.getMailServerHost());\n         conf.setMailServerPort(activitiProperties.getMailServerPort());\n         conf.setMailServerUsername(activitiProperties.getMailServerUserName());\n@@ -137,7 +138,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n     }\n \n     protected void addAsyncPropertyValidator(ActivitiProperties activitiProperties,\n-                                           SpringProcessEngineConfiguration conf) {\n+                                             SpringProcessEngineConfiguration conf) {\n         if (!activitiProperties.isAsyncExecutorActivate()) {\n             ValidatorSet springBootStarterValidatorSet = new ValidatorSet(\"activiti-spring-boot-starter\");\n             springBootStarterValidatorSet.addValidator(new AsyncPropertyValidator());\n@@ -164,7 +165,7 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n     public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties,\n                                                                            ResourcePatternResolver resourcePatternResolver) {\n         return new ProcessDefinitionResourceFinder(activitiProperties,\n-                                                   resourcePatternResolver);\n+                resourcePatternResolver);\n     }\n \n     @Bean\n@@ -174,22 +175,22 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n                                                                      @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners,\n                                                                      ApplicationEventPublisher eventPublisher) {\n         return new ProcessDeployedEventProducer(repositoryService,\n-                                                converter,\n-                                                Optional.ofNullable(listeners)\n-                                                        .orElse(Collections.emptyList()),\n-                                                eventPublisher);\n+                converter,\n+                Optional.ofNullable(listeners)\n+                        .orElse(Collections.emptyList()),\n+                eventPublisher);\n     }\n \n     @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    @ConditionalOnMissingBean (name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n+    @ConditionalOnMissingBean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n     public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider,\n                                                                                                            ProcessVariablesInitiator processVariablesInitiator,\n                                                                                                            EventSubscriptionPayloadMappingProvider eventSubscriptionPayloadMappingProvider) {\n         return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,\n-                                                                   processVariablesInitiator,\n-                                                                   eventSubscriptionPayloadMappingProvider);\n+                processVariablesInitiator,\n+                eventSubscriptionPayloadMappingProvider);\n     }\n-    \n+\n     @Bean\n     @Order(Ordered.HIGHEST_PRECEDENCE)\n     public ProcessEngineConfigurationConfigurer asyncExecutorPropertiesConfigurer(AsyncExecutorProperties properties) {\n@@ -202,11 +203,11 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n             configuration.setAsyncExecutorDefaultAsyncJobAcquireWaitTime(properties.getDefaultAsyncJobAcquireWaitTimeInMillis());\n             configuration.setAsyncExecutorDefaultTimerJobAcquireWaitTime(properties.getDefaultTimerJobAcquireWaitTimeInMillis());\n             configuration.setAsyncExecutorDefaultQueueSizeFullWaitTime(properties.getDefaultQueueSizeFullWaitTime());\n-            \n+\n             configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n             configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n             configuration.setAsyncExecutorMaxPoolSize(properties.getMaxPoolSize());\n-            \n+\n             configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n             configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n \n@@ -218,6 +219,6 @@ public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoCon\n             configuration.setAsyncFailedJobWaitTime(properties.getRetryWaitTimeInMillis());\n         };\n     }\n-    \n+\n }\n \n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "52",
                    "column": "26",
                    "severity": "error",
                    "message": "WhitespaceAround: '=' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 441).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/999/ProcessEngineAutoConfiguration.java\nindex 04725aae1d6..43b15477cb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/999/ProcessEngineAutoConfiguration.java\n@@ -41,183 +41,145 @@ import org.springframework.core.annotation.Order;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.transaction.PlatformTransactionManager;\n-\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-\n import javax.sql.DataSource;\n \n @Configuration\n-@AutoConfigureAfter(name = {\"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\",\n-        \"org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration\"})\n+@AutoConfigureAfter(name ={\"org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\", \"org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration\"})\n @EnableConfigurationProperties({ActivitiProperties.class, AsyncExecutorProperties.class})\n public class ProcessEngineAutoConfiguration extends AbstractProcessEngineAutoConfiguration {\n \n-    public static final String BEHAVIOR_FACTORY_MAPPING_CONFIGURER = \"behaviorFactoryMappingConfigurer\";\n-    private final UserGroupManager userGroupManager;\n-\n-    public ProcessEngineAutoConfiguration(UserGroupManager userGroupManager) {\n-        this.userGroupManager = userGroupManager;\n+  public static final String BEHAVIOR_FACTORY_MAPPING_CONFIGURER = \"behaviorFactoryMappingConfigurer\";\n+\n+  private final UserGroupManager userGroupManager;\n+\n+  public ProcessEngineAutoConfiguration(UserGroupManager userGroupManager) {\n+    this.userGroupManager = userGroupManager;\n+  }\n+\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public SpringProcessEngineConfiguration springProcessEngineConfiguration(DataSource dataSource, PlatformTransactionManager transactionManager, SpringAsyncExecutor springAsyncExecutor, ActivitiProperties activitiProperties, ProcessDefinitionResourceFinder processDefinitionResourceFinder, ProjectModelService projectModelService, @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,\n+                                                                           @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {\n+    SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration(projectModelService);\n+    conf.setConfigurators(processEngineConfigurators);\n+    configureProcessDefinitionResources(processDefinitionResourceFinder, conf);\n+    conf.setDataSource(dataSource);\n+    conf.setTransactionManager(transactionManager);\n+    conf.setAsyncExecutor(springAsyncExecutor);\n+    conf.setDeploymentName(activitiProperties.getDeploymentName());\n+    conf.setDatabaseSchema(activitiProperties.getDatabaseSchema());\n+    conf.setDatabaseSchemaUpdate(activitiProperties.getDatabaseSchemaUpdate());\n+    conf.setDbHistoryUsed(activitiProperties.isDbHistoryUsed());\n+    conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());\n+    addAsyncPropertyValidator(activitiProperties, conf);\n+    conf.setMailServerHost(activitiProperties.getMailServerHost());\n+    conf.setMailServerPort(activitiProperties.getMailServerPort());\n+    conf.setMailServerUsername(activitiProperties.getMailServerUserName());\n+    conf.setMailServerPassword(activitiProperties.getMailServerPassword());\n+    conf.setMailServerDefaultFrom(activitiProperties.getMailServerDefaultFrom());\n+    conf.setMailServerUseSSL(activitiProperties.isMailServerUseSsl());\n+    conf.setMailServerUseTLS(activitiProperties.isMailServerUseTls());\n+    if (userGroupManager != null) {\n+      conf.setUserGroupManager(userGroupManager);\n     }\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public SpringProcessEngineConfiguration springProcessEngineConfiguration(\n-            DataSource dataSource,\n-            PlatformTransactionManager transactionManager,\n-            SpringAsyncExecutor springAsyncExecutor,\n-            ActivitiProperties activitiProperties,\n-            ProcessDefinitionResourceFinder processDefinitionResourceFinder,\n-            ProjectModelService projectModelService,\n-            @Autowired(required = false) List<ProcessEngineConfigurationConfigurer> processEngineConfigurationConfigurers,\n-            @Autowired(required = false) List<ProcessEngineConfigurator> processEngineConfigurators) throws IOException {\n-\n-        SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration(projectModelService);\n-        conf.setConfigurators(processEngineConfigurators);\n-        configureProcessDefinitionResources(processDefinitionResourceFinder,\n-                                            conf);\n-        conf.setDataSource(dataSource);\n-        conf.setTransactionManager(transactionManager);\n-\n-        conf.setAsyncExecutor(springAsyncExecutor);\n-        conf.setDeploymentName(activitiProperties.getDeploymentName());\n-        conf.setDatabaseSchema(activitiProperties.getDatabaseSchema());\n-        conf.setDatabaseSchemaUpdate(activitiProperties.getDatabaseSchemaUpdate());\n-        conf.setDbHistoryUsed(activitiProperties.isDbHistoryUsed());\n-        conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());\n-        addAsyncPropertyValidator(activitiProperties,\n-                                  conf);\n-        conf.setMailServerHost(activitiProperties.getMailServerHost());\n-        conf.setMailServerPort(activitiProperties.getMailServerPort());\n-        conf.setMailServerUsername(activitiProperties.getMailServerUserName());\n-        conf.setMailServerPassword(activitiProperties.getMailServerPassword());\n-        conf.setMailServerDefaultFrom(activitiProperties.getMailServerDefaultFrom());\n-        conf.setMailServerUseSSL(activitiProperties.isMailServerUseSsl());\n-        conf.setMailServerUseTLS(activitiProperties.isMailServerUseTls());\n-\n-        if (userGroupManager != null) {\n-            conf.setUserGroupManager(userGroupManager);\n-        }\n-\n-        conf.setHistoryLevel(activitiProperties.getHistoryLevel());\n-        conf.setCopyVariablesToLocalForTasks(activitiProperties.isCopyVariablesToLocalForTasks());\n-        conf.setSerializePOJOsInVariablesToJson(activitiProperties.isSerializePOJOsInVariablesToJson());\n-        conf.setJavaClassFieldForJackson(activitiProperties.getJavaClassFieldForJackson());\n-\n-        if (activitiProperties.getCustomMybatisMappers() != null) {\n-            conf.setCustomMybatisMappers(getCustomMybatisMapperClasses(activitiProperties.getCustomMybatisMappers()));\n-        }\n-\n-        if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n-            conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n-        }\n-\n-        if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n-            conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n-        }\n-\n-        if (activitiProperties.isUseStrongUuids()) {\n-            conf.setIdGenerator(new StrongUuidGenerator());\n-        }\n-\n-        if (activitiProperties.getDeploymentMode() != null) {\n-            conf.setDeploymentMode(activitiProperties.getDeploymentMode());\n-        }\n-\n-        if (processEngineConfigurationConfigurers != null) {\n-            for (ProcessEngineConfigurationConfigurer processEngineConfigurationConfigurer : processEngineConfigurationConfigurers) {\n-                processEngineConfigurationConfigurer.configure(conf);\n-            }\n-        }\n-        springAsyncExecutor.applyConfig(conf);\n-        return conf;\n+    conf.setHistoryLevel(activitiProperties.getHistoryLevel());\n+    conf.setCopyVariablesToLocalForTasks(activitiProperties.isCopyVariablesToLocalForTasks());\n+    conf.setSerializePOJOsInVariablesToJson(activitiProperties.isSerializePOJOsInVariablesToJson());\n+    conf.setJavaClassFieldForJackson(activitiProperties.getJavaClassFieldForJackson());\n+    if (activitiProperties.getCustomMybatisMappers() != null) {\n+      conf.setCustomMybatisMappers(getCustomMybatisMapperClasses(activitiProperties.getCustomMybatisMappers()));\n     }\n-\n-    protected void addAsyncPropertyValidator(ActivitiProperties activitiProperties,\n-                                           SpringProcessEngineConfiguration conf) {\n-        if (!activitiProperties.isAsyncExecutorActivate()) {\n-            ValidatorSet springBootStarterValidatorSet = new ValidatorSet(\"activiti-spring-boot-starter\");\n-            springBootStarterValidatorSet.addValidator(new AsyncPropertyValidator());\n-            if (conf.getProcessValidator() == null) {\n-                ProcessValidatorImpl processValidator = new ProcessValidatorImpl();\n-                processValidator.addValidatorSet(springBootStarterValidatorSet);\n-                conf.setProcessValidator(processValidator);\n-            } else {\n-                conf.getProcessValidator().getValidatorSets().add(springBootStarterValidatorSet);\n-            }\n-        }\n+    if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n+      conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n     }\n-\n-    private void configureProcessDefinitionResources(ProcessDefinitionResourceFinder processDefinitionResourceFinder,\n-                                                     SpringProcessEngineConfiguration conf) throws IOException {\n-        List<Resource> procDefResources = processDefinitionResourceFinder.discoverProcessDefinitionResources();\n-        if (!procDefResources.isEmpty()) {\n-            conf.setDeploymentResources(procDefResources.toArray(new Resource[0]));\n-        }\n+    if (activitiProperties.getCustomMybatisXMLMappers() != null) {\n+      conf.setCustomMybatisXMLMappers(new HashSet<>(activitiProperties.getCustomMybatisXMLMappers()));\n     }\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties,\n-                                                                           ResourcePatternResolver resourcePatternResolver) {\n-        return new ProcessDefinitionResourceFinder(activitiProperties,\n-                                                   resourcePatternResolver);\n+    if (activitiProperties.isUseStrongUuids()) {\n+      conf.setIdGenerator(new StrongUuidGenerator());\n     }\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ProcessDeployedEventProducer processDeployedEventProducer(RepositoryService repositoryService,\n-                                                                     APIProcessDefinitionConverter converter,\n-                                                                     @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners,\n-                                                                     ApplicationEventPublisher eventPublisher) {\n-        return new ProcessDeployedEventProducer(repositoryService,\n-                                                converter,\n-                                                Optional.ofNullable(listeners)\n-                                                        .orElse(Collections.emptyList()),\n-                                                eventPublisher);\n+    if (activitiProperties.getDeploymentMode() != null) {\n+      conf.setDeploymentMode(activitiProperties.getDeploymentMode());\n     }\n-\n-    @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    @ConditionalOnMissingBean (name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n-    public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider,\n-                                                                                                           ProcessVariablesInitiator processVariablesInitiator,\n-                                                                                                           EventSubscriptionPayloadMappingProvider eventSubscriptionPayloadMappingProvider) {\n-        return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider,\n-                                                                   processVariablesInitiator,\n-                                                                   eventSubscriptionPayloadMappingProvider);\n+    if (processEngineConfigurationConfigurers != null) {\n+        for (ProcessEngineConfigurationConfigurer processEngineConfigurationConfigurer : processEngineConfigurationConfigurers) {\n+            processEngineConfigurationConfigurer.configure(conf);\n+        }\n     }\n-    \n-    @Bean\n-    @Order(Ordered.HIGHEST_PRECEDENCE)\n-    public ProcessEngineConfigurationConfigurer asyncExecutorPropertiesConfigurer(AsyncExecutorProperties properties) {\n-        return (configuration) -> {\n-            configuration.setAsyncExecutorMessageQueueMode(properties.isMessageQueueMode());\n-            configuration.setAsyncExecutorCorePoolSize(properties.getCorePoolSize());\n-            configuration.setAsyncExecutorAsyncJobLockTimeInMillis(properties.getAsyncJobLockTimeInMillis());\n-            configuration.setAsyncExecutorNumberOfRetries(properties.getNumberOfRetries());\n-\n-            configuration.setAsyncExecutorDefaultAsyncJobAcquireWaitTime(properties.getDefaultAsyncJobAcquireWaitTimeInMillis());\n-            configuration.setAsyncExecutorDefaultTimerJobAcquireWaitTime(properties.getDefaultTimerJobAcquireWaitTimeInMillis());\n-            configuration.setAsyncExecutorDefaultQueueSizeFullWaitTime(properties.getDefaultQueueSizeFullWaitTime());\n-            \n-            configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n-            configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n-            configuration.setAsyncExecutorMaxPoolSize(properties.getMaxPoolSize());\n-            \n-            configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n-            configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n-\n-            configuration.setAsyncExecutorSecondsToWaitOnShutdown(properties.getSecondsToWaitOnShutdown());\n-            configuration.setAsyncExecutorThreadKeepAliveTime(properties.getKeepAliveTime());\n-            configuration.setAsyncExecutorTimerLockTimeInMillis(properties.getTimerLockTimeInMillis());\n-            configuration.setAsyncExecutorThreadPoolQueueSize(properties.getQueueSize());\n-\n-            configuration.setAsyncFailedJobWaitTime(properties.getRetryWaitTimeInMillis());\n-        };\n+    springAsyncExecutor.applyConfig(conf);\n+    return conf;\n+  }\n+\n+  protected void addAsyncPropertyValidator(ActivitiProperties activitiProperties, SpringProcessEngineConfiguration conf) {\n+    if (!activitiProperties.isAsyncExecutorActivate()) {\n+      ValidatorSet springBootStarterValidatorSet = new ValidatorSet(\"activiti-spring-boot-starter\");\n+      springBootStarterValidatorSet.addValidator(new AsyncPropertyValidator());\n+      if (conf.getProcessValidator() == null) {\n+        ProcessValidatorImpl processValidator = new ProcessValidatorImpl();\n+        processValidator.addValidatorSet(springBootStarterValidatorSet);\n+        conf.setProcessValidator(processValidator);\n+      } else {\n+        conf.getProcessValidator().getValidatorSets().add(springBootStarterValidatorSet);\n+      }\n     }\n-    \n-}\n+  }\n \n+  private void configureProcessDefinitionResources(ProcessDefinitionResourceFinder processDefinitionResourceFinder, SpringProcessEngineConfiguration conf) throws IOException {\n+    List<Resource> procDefResources = processDefinitionResourceFinder.discoverProcessDefinitionResources();\n+    if (!procDefResources.isEmpty()) {\n+      conf.setDeploymentResources(procDefResources.toArray(new Resource[0]));\n+    }\n+  }\n+\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public ProcessDefinitionResourceFinder processDefinitionResourceFinder(ActivitiProperties activitiProperties, ResourcePatternResolver resourcePatternResolver) {\n+    return new ProcessDefinitionResourceFinder(activitiProperties,\n+                                               resourcePatternResolver);\n+  }\n+\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public ProcessDeployedEventProducer processDeployedEventProducer(RepositoryService repositoryService,\n+                                                                   APIProcessDefinitionConverter converter,\n+                                                                   @Autowired(required = false) List<ProcessRuntimeEventListener<ProcessDeployedEvent>> listeners, ApplicationEventPublisher eventPublisher) {\n+    return new ProcessDeployedEventProducer(repositoryService, converter, Optional.ofNullable(listeners).orElse(Collections.emptyList()), eventPublisher);\n+  }\n+\n+  @Bean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n+  @ConditionalOnMissingBean(name = BEHAVIOR_FACTORY_MAPPING_CONFIGURER)\n+  public DefaultActivityBehaviorFactoryMappingConfigurer defaultActivityBehaviorFactoryMappingConfigurer(VariablesMappingProvider variablesMappingProvider,\n+                                                                                                         ProcessVariablesInitiator processVariablesInitiator, EventSubscriptionPayloadMappingProvider eventSubscriptionPayloadMappingProvider) {\n+    return new DefaultActivityBehaviorFactoryMappingConfigurer(variablesMappingProvider, processVariablesInitiator, eventSubscriptionPayloadMappingProvider);\n+  }\n+\n+  @Bean\n+  @Order(Ordered.HIGHEST_PRECEDENCE)\n+  public ProcessEngineConfigurationConfigurer asyncExecutorPropertiesConfigurer(AsyncExecutorProperties properties) {\n+    return (configuration) -> {\n+      configuration.setAsyncExecutorMessageQueueMode(properties.isMessageQueueMode());\n+      configuration.setAsyncExecutorCorePoolSize(properties.getCorePoolSize());\n+      configuration.setAsyncExecutorAsyncJobLockTimeInMillis(properties.getAsyncJobLockTimeInMillis());\n+      configuration.setAsyncExecutorNumberOfRetries(properties.getNumberOfRetries());\n+      configuration.setAsyncExecutorDefaultAsyncJobAcquireWaitTime(properties.getDefaultAsyncJobAcquireWaitTimeInMillis());\n+      configuration.setAsyncExecutorDefaultTimerJobAcquireWaitTime(properties.getDefaultTimerJobAcquireWaitTimeInMillis());\n+      configuration.setAsyncExecutorDefaultQueueSizeFullWaitTime(properties.getDefaultQueueSizeFullWaitTime());\n+      configuration.setAsyncExecutorMaxAsyncJobsDuePerAcquisition(properties.getMaxAsyncJobsDuePerAcquisition());\n+      configuration.setAsyncExecutorMaxTimerJobsPerAcquisition(properties.getMaxTimerJobsPerAcquisition());\n+      configuration.setAsyncExecutorMaxPoolSize(properties.getMaxPoolSize());\n+      configuration.setAsyncExecutorResetExpiredJobsInterval(properties.getResetExpiredJobsInterval());\n+      configuration.setAsyncExecutorResetExpiredJobsPageSize(properties.getResetExpiredJobsPageSize());\n+      configuration.setAsyncExecutorSecondsToWaitOnShutdown(properties.getSecondsToWaitOnShutdown());\n+      configuration.setAsyncExecutorThreadKeepAliveTime(properties.getKeepAliveTime());\n+      configuration.setAsyncExecutorTimerLockTimeInMillis(properties.getTimerLockTimeInMillis());\n+      configuration.setAsyncExecutorThreadPoolQueueSize(properties.getQueueSize());\n+      configuration.setAsyncFailedJobWaitTime(properties.getRetryWaitTimeInMillis());\n+};\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 242
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/999/ProcessEngineAutoConfiguration.java\nindex 04725aae1d6..63ac9100ba8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/999/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import org.activiti.api.process.model.events.ProcessDeployedEvent;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/999/ProcessEngineAutoConfiguration.java\nindex 04725aae1d6..63ac9100ba8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/999/ProcessEngineAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/999/ProcessEngineAutoConfiguration.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.boot;\n \n import org.activiti.api.process.model.events.ProcessDeployedEvent;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}