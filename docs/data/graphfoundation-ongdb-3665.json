{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3665",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "124",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "273",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "309",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3665/NativeLabelScanWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3665/NativeLabelScanWriter.java\nindex ef0fc19bd02..fb26dabc6f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3665/NativeLabelScanWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3665/NativeLabelScanWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.labelscan;\n \n import java.io.IOException;\n@@ -53,290 +54,287 @@ import static org.neo4j.kernel.impl.index.labelscan.LabelScanValue.RANGE_SIZE;\n  */\n class NativeLabelScanWriter implements LabelScanWriter\n {\n-    /**\n-     * {@link Comparator} for sorting the node id ranges, used in batches to apply updates in sorted order.\n-     */\n-    private static final Comparator<NodeLabelUpdate> UPDATE_SORTER =\n-            Comparator.comparingLong( NodeLabelUpdate::getNodeId );\n-\n-    /**\n-     * {@link ValueMerger} used for adding label->node mappings, see {@link LabelScanValue#add(LabelScanValue)}.\n-     */\n-    private final ValueMerger<LabelScanKey,LabelScanValue> addMerger;\n-\n-    /**\n-     * {@link ValueMerger} used for removing label->node mappings, see {@link LabelScanValue#remove(LabelScanValue)}.\n-     */\n-    private final ValueMerger<LabelScanKey,LabelScanValue> removeMerger;\n-\n-    private final WriteMonitor monitor;\n-\n-    /**\n-     * {@link Writer} acquired when acquiring this {@link NativeLabelScanWriter},\n-     * acquired from {@link GBPTree#writer()}.\n-     */\n-    private Writer<LabelScanKey,LabelScanValue> writer;\n-\n-    /**\n-     * Instance of {@link LabelScanKey} acting as place to read keys into and also to set for each applied update.\n-     */\n-    private final LabelScanKey key = new LabelScanKey();\n-\n-    /**\n-     * Instance of {@link LabelScanValue} acting as place to read values into and also to update\n-     * for each applied update.\n-     */\n-    private final LabelScanValue value = new LabelScanValue();\n-\n-    /**\n-     * Batch currently building up as {@link #write(NodeLabelUpdate) updates} come in. Cursor for where\n-     * to place new updates is {@link #pendingUpdatesCursor}. Length of this queue is decided in constructor\n-     * and defines the maximum batch size.\n-     */\n-    private final NodeLabelUpdate[] pendingUpdates;\n-\n-    /**\n-     * Cursor into {@link #pendingUpdates}, where to place new {@link #write(NodeLabelUpdate) updates}.\n-     * When full the batch is applied and this cursor reset to {@code 0}.\n-     */\n-    private int pendingUpdatesCursor;\n-\n-    /**\n-     * There are two levels of batching, one for {@link NodeLabelUpdate updates} and one when applying.\n-     * This variable helps keeping track of the second level where updates to the actual {@link GBPTree}\n-     * are batched per node id range, i.e. to add several labelId->nodeId mappings falling into the same\n-     * range, all of those updates are made into one {@link LabelScanValue} and then issues as one update\n-     * to the tree. There are additions and removals, this variable keeps track of which.\n-     */\n-    private boolean addition;\n-\n-    /**\n-     * When applying {@link NodeLabelUpdate updates} (when batch full or in {@link #close()}), updates are\n-     * applied labelId by labelId. All updates are scanned through multiple times, with one label in mind at a time.\n-     * For each round the current round tries to figure out which is the closest higher labelId to apply\n-     * in the next round. This variable keeps track of that next labelId.\n-     */\n-    private long lowestLabelId;\n-\n-    interface WriteMonitor\n+  /**\n+   * {@link Comparator} for sorting the node id ranges, used in batches to apply updates in sorted order.\n+   */\n+  private static final Comparator<NodeLabelUpdate> UPDATE_SORTER =\n+      Comparator.comparingLong(NodeLabelUpdate::getNodeId);\n+\n+  /**\n+   * {@link ValueMerger} used for adding label->node mappings, see {@link LabelScanValue#add(LabelScanValue)}.\n+   */\n+  private final ValueMerger<LabelScanKey, LabelScanValue> addMerger;\n+\n+  /**\n+   * {@link ValueMerger} used for removing label->node mappings, see {@link LabelScanValue#remove(LabelScanValue)}.\n+   */\n+  private final ValueMerger<LabelScanKey, LabelScanValue> removeMerger;\n+\n+  private final WriteMonitor monitor;\n+\n+  /**\n+   * {@link Writer} acquired when acquiring this {@link NativeLabelScanWriter},\n+   * acquired from {@link GBPTree#writer()}.\n+   */\n+  private Writer<LabelScanKey, LabelScanValue> writer;\n+\n+  /**\n+   * Instance of {@link LabelScanKey} acting as place to read keys into and also to set for each applied update.\n+   */\n+  private final LabelScanKey key = new LabelScanKey();\n+\n+  /**\n+   * Instance of {@link LabelScanValue} acting as place to read values into and also to update\n+   * for each applied update.\n+   */\n+  private final LabelScanValue value = new LabelScanValue();\n+\n+  /**\n+   * Batch currently building up as {@link #write(NodeLabelUpdate) updates} come in. Cursor for where\n+   * to place new updates is {@link #pendingUpdatesCursor}. Length of this queue is decided in constructor\n+   * and defines the maximum batch size.\n+   */\n+  private final NodeLabelUpdate[] pendingUpdates;\n+\n+  /**\n+   * Cursor into {@link #pendingUpdates}, where to place new {@link #write(NodeLabelUpdate) updates}.\n+   * When full the batch is applied and this cursor reset to {@code 0}.\n+   */\n+  private int pendingUpdatesCursor;\n+\n+  /**\n+   * There are two levels of batching, one for {@link NodeLabelUpdate updates} and one when applying.\n+   * This variable helps keeping track of the second level where updates to the actual {@link GBPTree}\n+   * are batched per node id range, i.e. to add several labelId->nodeId mappings falling into the same\n+   * range, all of those updates are made into one {@link LabelScanValue} and then issues as one update\n+   * to the tree. There are additions and removals, this variable keeps track of which.\n+   */\n+  private boolean addition;\n+\n+  /**\n+   * When applying {@link NodeLabelUpdate updates} (when batch full or in {@link #close()}), updates are\n+   * applied labelId by labelId. All updates are scanned through multiple times, with one label in mind at a time.\n+   * For each round the current round tries to figure out which is the closest higher labelId to apply\n+   * in the next round. This variable keeps track of that next labelId.\n+   */\n+  private long lowestLabelId;\n+\n+  interface WriteMonitor\n+  {\n+    default void range(long range, int labelId)\n     {\n-        default void range( long range, int labelId )\n-        {\n-        }\n-\n-        default void prepareAdd( long txId, int offset )\n-        {\n-        }\n-\n-        default void prepareRemove( long txId, int offset )\n-        {\n-        }\n-\n-        default void mergeAdd( LabelScanValue existingValue, LabelScanValue newValue )\n-        {\n-        }\n-\n-        default void mergeRemove( LabelScanValue existingValue, LabelScanValue newValue )\n-        {\n-        }\n-\n-        default void flushPendingUpdates()\n-        {\n-        }\n-\n-        default void writeSessionEnded()\n-        {\n-        }\n-\n-        default void force()\n-        {\n-        }\n-\n-        default void close()\n-        {\n-        }\n     }\n \n-    static WriteMonitor EMPTY = new WriteMonitor()\n+    default void prepareAdd(long txId, int offset)\n     {\n-    };\n+    }\n \n-    NativeLabelScanWriter( int batchSize, WriteMonitor monitor )\n+    default void prepareRemove(long txId, int offset)\n     {\n-        this.pendingUpdates = new NodeLabelUpdate[batchSize];\n-        this.addMerger = ( existingKey, newKey, existingValue, newValue ) ->\n-        {\n-            monitor.mergeAdd( existingValue, newValue );\n-            return existingValue.add( newValue );\n-        };\n-        this.removeMerger = ( existingKey, newKey, existingValue, newValue ) ->\n-        {\n-            monitor.mergeRemove( existingValue, newValue );\n-            return existingValue.remove( newValue );\n-        };\n-        this.monitor = monitor;\n     }\n \n-    NativeLabelScanWriter initialize( Writer<LabelScanKey,LabelScanValue> writer )\n+    default void mergeAdd(LabelScanValue existingValue, LabelScanValue newValue)\n     {\n-        this.writer = writer;\n-        this.pendingUpdatesCursor = 0;\n-        this.addition = false;\n-        this.lowestLabelId = Long.MAX_VALUE;\n-        return this;\n     }\n \n-    /**\n-     * Queues a {@link NodeLabelUpdate} to this writer for applying when batch gets full,\n-     * or when {@link #close() closing}.\n-     */\n-    @Override\n-    public void write( NodeLabelUpdate update ) throws IOException\n+    default void mergeRemove(LabelScanValue existingValue, LabelScanValue newValue)\n     {\n-        if ( pendingUpdatesCursor == pendingUpdates.length )\n-        {\n-            flushPendingChanges();\n-        }\n-\n-        pendingUpdates[pendingUpdatesCursor++] = update;\n-        PhysicalToLogicalLabelChanges.convertToAdditionsAndRemovals( update );\n-        checkNextLabelId( update.getLabelsBefore() );\n-        checkNextLabelId( update.getLabelsAfter() );\n     }\n \n-    private void checkNextLabelId( long[] labels )\n+    default void flushPendingUpdates()\n     {\n-        if ( labels.length > 0 && labels[0] != -1 )\n-        {\n-            lowestLabelId = min( lowestLabelId, labels[0] );\n-        }\n     }\n \n-    private void flushPendingChanges() throws IOException\n+    default void writeSessionEnded()\n     {\n-        Arrays.sort( pendingUpdates, 0, pendingUpdatesCursor, UPDATE_SORTER );\n-        monitor.flushPendingUpdates();\n-        long currentLabelId = lowestLabelId;\n-        value.clear();\n-        key.clear();\n-        while ( currentLabelId != Long.MAX_VALUE )\n-        {\n-            long nextLabelId = Long.MAX_VALUE;\n-            for ( int i = 0; i < pendingUpdatesCursor; i++ )\n-            {\n-                NodeLabelUpdate update = pendingUpdates[i];\n-                long nodeId = update.getNodeId();\n-                nextLabelId = extractChange( update.getLabelsAfter(), currentLabelId, nodeId, nextLabelId, true, update.getTxId() );\n-                nextLabelId = extractChange( update.getLabelsBefore(), currentLabelId, nodeId, nextLabelId, false, update.getTxId() );\n-            }\n-            currentLabelId = nextLabelId;\n-        }\n-        flushPendingRange();\n-        pendingUpdatesCursor = 0;\n     }\n \n-    private long extractChange( long[] labels, long currentLabelId, long nodeId, long nextLabelId, boolean addition, long txId )\n-            throws IOException\n+    default void force()\n     {\n-        long foundNextLabelId = nextLabelId;\n-        for ( int li = 0; li < labels.length; li++ )\n-        {\n-            long labelId = labels[li];\n-            if ( labelId == -1 )\n-            {\n-                break;\n-            }\n-\n-            // Have this check here so that we can pick up the next labelId in our change set\n-            if ( labelId == currentLabelId )\n-            {\n-                change( currentLabelId, nodeId, addition, txId );\n-\n-                // We can do a little shorter check for next labelId here straight away,\n-                // we just check the next if it's less than what we currently think is next labelId\n-                // and then break right after\n-                if ( li + 1 < labels.length && labels[li + 1] != -1 )\n-                {\n-                    long nextLabelCandidate = labels[li + 1];\n-                    if ( nextLabelCandidate < currentLabelId )\n-                    {\n-                        throw new IllegalArgumentException(\n-                                \"The node label update contained unsorted label ids \" + Arrays.toString( labels ) );\n-                    }\n-                    if ( nextLabelCandidate > currentLabelId )\n-                    {\n-                        foundNextLabelId = min( foundNextLabelId, nextLabelCandidate );\n-                    }\n-                }\n-                break;\n-            }\n-            else if ( labelId > currentLabelId )\n-            {\n-                foundNextLabelId = min( foundNextLabelId, labelId );\n-            }\n-        }\n-        return foundNextLabelId;\n     }\n \n-    private void change( long currentLabelId, long nodeId, boolean add, long txId ) throws IOException\n+    default void close()\n     {\n-        int labelId = toIntExact( currentLabelId );\n-        long idRange = rangeOf( nodeId );\n-        if ( labelId != key.labelId || idRange != key.idRange || addition != add )\n-        {\n-            flushPendingRange();\n+    }\n+  }\n \n-            // Set key to current and reset value\n-            key.labelId = labelId;\n-            key.idRange = idRange;\n-            addition = add;\n-            monitor.range( idRange, labelId );\n-        }\n+  static WriteMonitor EMPTY = new WriteMonitor()\n+  {\n+  };\n \n-        int offset = toIntExact( nodeId % RANGE_SIZE );\n-        value.set( offset );\n-        if ( addition )\n-        {\n-            monitor.prepareAdd( txId, offset );\n-        }\n-        else\n-        {\n-            monitor.prepareRemove( txId, offset );\n-        }\n+  NativeLabelScanWriter(int batchSize, WriteMonitor monitor)\n+  {\n+    this.pendingUpdates = new NodeLabelUpdate[batchSize];\n+    this.addMerger = (existingKey, newKey, existingValue, newValue) ->\n+    {\n+      monitor.mergeAdd(existingValue, newValue);\n+      return existingValue.add(newValue);\n+    };\n+    this.removeMerger = (existingKey, newKey, existingValue, newValue) ->\n+    {\n+      monitor.mergeRemove(existingValue, newValue);\n+      return existingValue.remove(newValue);\n+    };\n+    this.monitor = monitor;\n+  }\n+\n+  NativeLabelScanWriter initialize(Writer<LabelScanKey, LabelScanValue> writer)\n+  {\n+    this.writer = writer;\n+    this.pendingUpdatesCursor = 0;\n+    this.addition = false;\n+    this.lowestLabelId = Long.MAX_VALUE;\n+    return this;\n+  }\n+\n+  /**\n+   * Queues a {@link NodeLabelUpdate} to this writer for applying when batch gets full,\n+   * or when {@link #close() closing}.\n+   */\n+  @Override\n+  public void write(NodeLabelUpdate update) throws IOException\n+  {\n+    if (pendingUpdatesCursor == pendingUpdates.length)\n+    {\n+      flushPendingChanges();\n     }\n \n-    private void flushPendingRange() throws IOException\n+    pendingUpdates[pendingUpdatesCursor++] = update;\n+    PhysicalToLogicalLabelChanges.convertToAdditionsAndRemovals(update);\n+    checkNextLabelId(update.getLabelsBefore());\n+    checkNextLabelId(update.getLabelsAfter());\n+  }\n+\n+  private void checkNextLabelId(long[] labels)\n+  {\n+    if (labels.length > 0 && labels[0] != -1)\n     {\n-        if ( value.bits != 0 )\n+      lowestLabelId = min(lowestLabelId, labels[0]);\n+    }\n+  }\n+\n+  private void flushPendingChanges() throws IOException\n+  {\n+    Arrays.sort(pendingUpdates, 0, pendingUpdatesCursor, UPDATE_SORTER);\n+    monitor.flushPendingUpdates();\n+    long currentLabelId = lowestLabelId;\n+    value.clear();\n+    key.clear();\n+    while (currentLabelId != Long.MAX_VALUE)\n+    {\n+      long nextLabelId = Long.MAX_VALUE;\n+      for (int i = 0; i < pendingUpdatesCursor; i++)\n+      {\n+        NodeLabelUpdate update = pendingUpdates[i];\n+        long nodeId = update.getNodeId();\n+        nextLabelId = extractChange(update.getLabelsAfter(), currentLabelId, nodeId, nextLabelId, true, update.getTxId());\n+        nextLabelId = extractChange(update.getLabelsBefore(), currentLabelId, nodeId, nextLabelId, false, update.getTxId());\n+      }\n+      currentLabelId = nextLabelId;\n+    }\n+    flushPendingRange();\n+    pendingUpdatesCursor = 0;\n+  }\n+\n+  private long extractChange(long[] labels, long currentLabelId, long nodeId, long nextLabelId, boolean addition, long txId)\n+      throws IOException\n+  {\n+    long foundNextLabelId = nextLabelId;\n+    for (int li = 0; li < labels.length; li++)\n+    {\n+      long labelId = labels[li];\n+      if (labelId == -1)\n+      {\n+        break;\n+      }\n+\n+      // Have this check here so that we can pick up the next labelId in our change set\n+      if (labelId == currentLabelId)\n+      {\n+        change(currentLabelId, nodeId, addition, txId);\n+\n+        // We can do a little shorter check for next labelId here straight away,\n+        // we just check the next if it's less than what we currently think is next labelId\n+        // and then break right after\n+        if (li + 1 < labels.length && labels[li + 1] != -1)\n         {\n-            // There are changes in the current range, flush them\n-            writer.merge( key, value, addition ? addMerger : removeMerger );\n-            // TODO: after a remove we could check if the tree value is empty and if so remove it from the index\n-            // hmm, or perhaps that could be a feature of ValueAmender?\n-            value.clear();\n+          long nextLabelCandidate = labels[li + 1];\n+          if (nextLabelCandidate < currentLabelId)\n+          {\n+            throw new IllegalArgumentException(\n+                \"The node label update contained unsorted label ids \" + Arrays.toString(labels));\n+          }\n+          if (nextLabelCandidate > currentLabelId)\n+          {\n+            foundNextLabelId = min(foundNextLabelId, nextLabelCandidate);\n+          }\n         }\n+        break;\n+      } else if (labelId > currentLabelId)\n+      {\n+        foundNextLabelId = min(foundNextLabelId, labelId);\n+      }\n+    }\n+    return foundNextLabelId;\n+  }\n+\n+  private void change(long currentLabelId, long nodeId, boolean add, long txId) throws IOException\n+  {\n+    int labelId = toIntExact(currentLabelId);\n+    long idRange = rangeOf(nodeId);\n+    if (labelId != key.labelId || idRange != key.idRange || addition != add)\n+    {\n+      flushPendingRange();\n+\n+      // Set key to current and reset value\n+      key.labelId = labelId;\n+      key.idRange = idRange;\n+      addition = add;\n+      monitor.range(idRange, labelId);\n     }\n \n-    private static long rangeOf( long nodeId )\n+    int offset = toIntExact(nodeId % RANGE_SIZE);\n+    value.set(offset);\n+    if (addition)\n     {\n-        return nodeId / RANGE_SIZE;\n+      monitor.prepareAdd(txId, offset);\n+    } else\n+    {\n+      monitor.prepareRemove(txId, offset);\n     }\n+  }\n \n-    /**\n-     * Applies {@link #write(NodeLabelUpdate) queued updates} which has not not yet been applied.\n-     * After this call no more {@link #write(NodeLabelUpdate)} can be applied.\n-     */\n-    @Override\n-    public void close() throws IOException\n+  private void flushPendingRange() throws IOException\n+  {\n+    if (value.bits != 0)\n     {\n-        try\n-        {\n-            flushPendingChanges();\n-            monitor.writeSessionEnded();\n-        }\n-        finally\n-        {\n-            writer.close();\n-        }\n+      // There are changes in the current range, flush them\n+      writer.merge(key, value, addition ? addMerger : removeMerger);\n+      // TODO: after a remove we could check if the tree value is empty and if so remove it from the index\n+      // hmm, or perhaps that could be a feature of ValueAmender?\n+      value.clear();\n+    }\n+  }\n+\n+  private static long rangeOf(long nodeId)\n+  {\n+    return nodeId / RANGE_SIZE;\n+  }\n+\n+  /**\n+   * Applies {@link #write(NodeLabelUpdate) queued updates} which has not not yet been applied.\n+   * After this call no more {@link #write(NodeLabelUpdate)} can be applied.\n+   */\n+  @Override\n+  public void close() throws IOException\n+  {\n+    try\n+    {\n+      flushPendingChanges();\n+      monitor.writeSessionEnded();\n+    } finally\n+    {\n+      writer.close();\n     }\n+  }\n }\n",
            "diff_size": 383
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "208",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "266",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "273",
                    "column": "30",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3665/NativeLabelScanWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3665/NativeLabelScanWriter.java\nindex ef0fc19bd02..56ba48c2f6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3665/NativeLabelScanWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3665/NativeLabelScanWriter.java\n@@ -56,10 +56,9 @@ class NativeLabelScanWriter implements LabelScanWriter\n     /**\n      * {@link Comparator} for sorting the node id ranges, used in batches to apply updates in sorted order.\n      */\n-    private static final Comparator<NodeLabelUpdate> UPDATE_SORTER =\n-            Comparator.comparingLong( NodeLabelUpdate::getNodeId );\n+    private static final Comparator<NodeLabelUpdate> UPDATE_SORTER = Comparator.comparingLong( NodeLabelUpdate::getNodeId );\n \n-    /**\n+/**\n      * {@link ValueMerger} used for adding label->node mappings, see {@link LabelScanValue#add(LabelScanValue)}.\n      */\n     private final ValueMerger<LabelScanKey,LabelScanValue> addMerger;\n@@ -206,7 +205,7 @@ class NativeLabelScanWriter implements LabelScanWriter\n \n     private void checkNextLabelId( long[] labels )\n     {\n-        if ( labels.length > 0 && labels[0] != -1 )\n+        if ( labels.length> 0 && labels[0] != -1 )\n         {\n             lowestLabelId = min( lowestLabelId, labels[0] );\n         }\n@@ -229,15 +228,16 @@ class NativeLabelScanWriter implements LabelScanWriter\n                 nextLabelId = extractChange( update.getLabelsAfter(), currentLabelId, nodeId, nextLabelId, true, update.getTxId() );\n                 nextLabelId = extractChange( update.getLabelsBefore(), currentLabelId, nodeId, nextLabelId, false, update.getTxId() );\n             }\n-            currentLabelId = nextLabelId;\n+\n+currentLabelId = nextLabelId;\n         }\n-        flushPendingRange();\n+\n+flushPendingRange();\n         pendingUpdatesCursor = 0;\n     }\n \n-    private long extractChange( long[] labels, long currentLabelId, long nodeId, long nextLabelId, boolean addition, long txId )\n-            throws IOException\n-    {\n+    private long extractChange( long[] labels, long currentLabelId, long nodeId, long nextLabelId, boolean addition, long txId ) throws IOException\n+{\n         long foundNextLabelId = nextLabelId;\n         for ( int li = 0; li < labels.length; li++ )\n         {\n@@ -260,17 +260,17 @@ class NativeLabelScanWriter implements LabelScanWriter\n                     long nextLabelCandidate = labels[li + 1];\n                     if ( nextLabelCandidate < currentLabelId )\n                     {\n-                        throw new IllegalArgumentException(\n-                                \"The node label update contained unsorted label ids \" + Arrays.toString( labels ) );\n+                        throw new IllegalArgumentException( \"The node label update contained unsorted label ids \" + Arrays.toString( labels ) );\n                     }\n-                    if ( nextLabelCandidate > currentLabelId )\n+\n+if ( nextLabelCandidate> currentLabelId )\n                     {\n                         foundNextLabelId = min( foundNextLabelId, nextLabelCandidate );\n                     }\n                 }\n                 break;\n             }\n-            else if ( labelId > currentLabelId )\n+            else if ( labelId> currentLabelId )\n             {\n                 foundNextLabelId = min( foundNextLabelId, labelId );\n             }\n@@ -339,4 +339,4 @@ class NativeLabelScanWriter implements LabelScanWriter\n             writer.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}