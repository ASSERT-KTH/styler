{
    "project_name": "opencb-opencga",
    "error_id": "262",
    "information": {
        "errors": [
            {
                "line": "302",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 149).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private List<String> getCohortSamples(String cohort, Query samplesQuery, String cohortType, boolean observedPhenotype) throws AnalysisException {\n        boolean validSampleQuery = samplesQuery != null && !samplesQuery.isEmpty();\n        boolean validCohort = StringUtils.isNotEmpty(cohort);\n        boolean validPhenotype = StringUtils.isNotEmpty(phenotype);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "302",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/262/GwasAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/262/GwasAnalysis.java\nindex e8c1d4683b3..e9649e14c41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/262/GwasAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/262/GwasAnalysis.java\n@@ -42,339 +42,342 @@ import java.util.*;\n import java.util.stream.Collectors;\n \n @Analysis(id = GwasAnalysis.ID, data = AnalysisData.VARIANT,\n-        description = \"Run a Genome Wide Association Study between two cohorts.\")\n+    description = \"Run a Genome Wide Association Study between two cohorts.\")\n public class GwasAnalysis extends OpenCgaAnalysis {\n \n-    public static final String ID = \"gwas\";\n-\n-    private GwasConfiguration gwasConfiguration;\n-    private String study;\n-    private String phenotype;\n-    private String caseCohort;\n-    private String controlCohort;\n-    private Query caseCohortSamplesQuery;\n-    private Query controlCohortSamplesQuery;\n-    private List<String> caseCohortSamples;\n-    private List<String> controlCohortSamples;\n-    private String scoreName;\n-    private boolean index;\n-\n-    public GwasAnalysis() {\n+  public static final String ID = \"gwas\";\n+\n+  private GwasConfiguration gwasConfiguration;\n+  private String study;\n+  private String phenotype;\n+  private String caseCohort;\n+  private String controlCohort;\n+  private Query caseCohortSamplesQuery;\n+  private Query controlCohortSamplesQuery;\n+  private List<String> caseCohortSamples;\n+  private List<String> controlCohortSamples;\n+  private String scoreName;\n+  private boolean index;\n+\n+  public GwasAnalysis() {\n+  }\n+\n+  /**\n+   * Provide the GWAS analysis configuration.\n+   *\n+   * @param gwasConfiguration configuration\n+   * @return this\n+   */\n+  public GwasAnalysis setGwasConfiguration(GwasConfiguration gwasConfiguration) {\n+    this.gwasConfiguration = gwasConfiguration;\n+    return this;\n+  }\n+\n+  /**\n+   * Study of the samples.\n+   *\n+   * @param study Study id\n+   * @return this\n+   */\n+  public GwasAnalysis setStudy(String study) {\n+    this.study = study;\n+    return this;\n+  }\n+\n+  /**\n+   * Use this phenotype to divide all the samples from the study.\n+   * Samples with the phenotype will be used as Case Cohort. Rest will be used as Control Cohort.\n+   * <p>\n+   * This parameter can not be mixed with other parameters to define the cohorts.\n+   *\n+   * @param phenotype phenotype\n+   * @return this\n+   */\n+  public GwasAnalysis setPhenotype(String phenotype) {\n+    this.phenotype = phenotype;\n+    return this;\n+  }\n+\n+  /**\n+   * Samples query selecting samples of the case cohort.\n+   * This parameter is an alternative to {@link #setCaseCohort}\n+   *\n+   * @param caseCohortSamplesQuery sample query\n+   * @return this\n+   */\n+  public GwasAnalysis setCaseCohortSamplesQuery(Query caseCohortSamplesQuery) {\n+    this.caseCohortSamplesQuery = caseCohortSamplesQuery;\n+    return this;\n+  }\n+\n+  /**\n+   * Samples query selecting samples of the control cohort.\n+   * This parameter is an alternative to {@link #setControlCohort}\n+   *\n+   * @param controlCohortSamplesQuery sample query\n+   * @return this\n+   */\n+  public GwasAnalysis setControlCohortSamplesQuery(Query controlCohortSamplesQuery) {\n+    this.controlCohortSamplesQuery = controlCohortSamplesQuery;\n+    return this;\n+  }\n+\n+  /**\n+   * Cohort from catalog to be used as case cohort.\n+   * This parameter is an alternative to {@link #setCaseCohortSamplesQuery}\n+   *\n+   * @param caseCohort cohort name\n+   * @return this\n+   */\n+  public GwasAnalysis setCaseCohort(String caseCohort) {\n+    this.caseCohort = caseCohort;\n+    return this;\n+  }\n+\n+  /**\n+   * Cohort from catalog to be used as control cohort.\n+   * This parameter is an alternative to {@link #setControlCohortSamplesQuery}\n+   *\n+   * @param controlCohort cohort name\n+   * @return this\n+   */\n+  public GwasAnalysis setControlCohort(String controlCohort) {\n+    this.controlCohort = controlCohort;\n+    return this;\n+  }\n+\n+  /**\n+   * Name to be used to index que score in the variant storage.\n+   * Must be unique in the study. If provided, the control/case cohorts must be registered in catalog.\n+   *\n+   * @param scoreName score name\n+   * @return this\n+   */\n+  public GwasAnalysis setScoreName(String scoreName) {\n+    this.scoreName = scoreName;\n+    return this;\n+  }\n+\n+  @Override\n+  protected void check() throws AnalysisException {\n+    super.check();\n+    setUpStorageEngineExecutor(study);\n+\n+    if (gwasConfiguration == null) {\n+      gwasConfiguration = new GwasConfiguration()\n+          .setMethod(GwasConfiguration.Method.FISHER_TEST)\n+          .setFisherMode(GwasConfiguration.FisherMode.TWO_SIDED);\n     }\n \n-    /**\n-     * Provide the GWAS analysis configuration.\n-     * @param gwasConfiguration configuration\n-     * @return this\n-     */\n-    public GwasAnalysis setGwasConfiguration(GwasConfiguration gwasConfiguration) {\n-        this.gwasConfiguration = gwasConfiguration;\n-        return this;\n+    if (StringUtils.isEmpty(study)) {\n+      throw new AnalysisException(\"Missing study!\");\n     }\n \n-    /**\n-     * Study of the samples.\n-     * @param study Study id\n-     * @return this\n-     */\n-    public GwasAnalysis setStudy(String study) {\n-        this.study = study;\n-        return this;\n+    try {\n+      study = catalogManager.getStudyManager().get(study, null, sessionId).first().getFqn();\n+    } catch (CatalogException e) {\n+      throw new AnalysisException(e);\n     }\n \n-    /**\n-     * Use this phenotype to divide all the samples from the study.\n-     * Samples with the phenotype will be used as Case Cohort. Rest will be used as Control Cohort.\n-     *\n-     * This parameter can not be mixed with other parameters to define the cohorts.\n-     *\n-     * @param phenotype phenotype\n-     * @return this\n-     */\n-    public GwasAnalysis setPhenotype(String phenotype) {\n-        this.phenotype = phenotype;\n-        return this;\n-    }\n-\n-    /**\n-     * Samples query selecting samples of the case cohort.\n-     * This parameter is an alternative to {@link #setCaseCohort}\n-     *\n-     * @param caseCohortSamplesQuery sample query\n-     * @return this\n-     */\n-    public GwasAnalysis setCaseCohortSamplesQuery(Query caseCohortSamplesQuery) {\n-        this.caseCohortSamplesQuery = caseCohortSamplesQuery;\n-        return this;\n-    }\n-\n-    /**\n-     * Samples query selecting samples of the control cohort.\n-     * This parameter is an alternative to {@link #setControlCohort}\n-     *\n-     * @param controlCohortSamplesQuery sample query\n-     * @return this\n-     */\n-    public GwasAnalysis setControlCohortSamplesQuery(Query controlCohortSamplesQuery) {\n-        this.controlCohortSamplesQuery = controlCohortSamplesQuery;\n-        return this;\n-    }\n-\n-    /**\n-     * Cohort from catalog to be used as case cohort.\n-     * This parameter is an alternative to {@link #setCaseCohortSamplesQuery}\n-     *\n-     * @param caseCohort cohort name\n-     * @return this\n-     */\n-    public GwasAnalysis setCaseCohort(String caseCohort) {\n-        this.caseCohort = caseCohort;\n-        return this;\n-    }\n+    caseCohortSamples = getCohortSamples(caseCohort, caseCohortSamplesQuery, \"case\", true);\n+    controlCohortSamples = getCohortSamples(controlCohort, controlCohortSamplesQuery, \"control\", false);\n \n-    /**\n-     * Cohort from catalog to be used as control cohort.\n-     * This parameter is an alternative to {@link #setControlCohortSamplesQuery}\n-     *\n-     * @param controlCohort cohort name\n-     * @return this\n-     */\n-    public GwasAnalysis setControlCohort(String controlCohort) {\n-        this.controlCohort = controlCohort;\n-        return this;\n+    if (!Collections.disjoint(caseCohortSamples, controlCohortSamples)) {\n+      List<String> overlapping = new ArrayList<>();\n+      for (String caseCohortSample : caseCohortSamples) {\n+        if (controlCohortSamples.contains(caseCohortSample)) {\n+          overlapping.add(caseCohortSample);\n+        }\n+      }\n+      throw new AnalysisException(\"Unable to run Gwas analysis with overlapping cohorts. \"\n+          + (overlapping.size() < 10\n+          ? \"Samples \" + overlapping + \" are shared between both cohorts.\"\n+          : \"There are \" + overlapping.size() + \" overlapping samples between the cohorts.\"));\n     }\n \n-    /**\n-     * Name to be used to index que score in the variant storage.\n-     * Must be unique in the study. If provided, the control/case cohorts must be registered in catalog.\n-     *\n-     * @param scoreName score name\n-     * @return this\n-     */\n-    public GwasAnalysis setScoreName(String scoreName) {\n-        this.scoreName = scoreName;\n-        return this;\n+    // check read permission\n+    try {\n+      List<String> allSamples = new ArrayList<>();\n+      allSamples.addAll(caseCohortSamples);\n+      allSamples.addAll(controlCohortSamples);\n+      variantStorageManager.checkQueryPermissions(\n+          new Query()\n+              .append(VariantQueryParam.STUDY.key(), study)\n+              .append(VariantQueryParam.INCLUDE_SAMPLE.key(), allSamples),\n+          new QueryOptions(),\n+          sessionId);\n+    } catch (CatalogException | StorageEngineException e) {\n+      throw new AnalysisException(e);\n     }\n \n-    @Override\n-    protected void check() throws AnalysisException {\n-        super.check();\n-        setUpStorageEngineExecutor(study);\n-\n-        if (gwasConfiguration == null) {\n-            gwasConfiguration = new GwasConfiguration()\n-                    .setMethod(GwasConfiguration.Method.FISHER_TEST)\n-                    .setFisherMode(GwasConfiguration.FisherMode.TWO_SIDED);\n-        }\n-\n-        if (StringUtils.isEmpty(study)) {\n-            throw new AnalysisException(\"Missing study!\");\n-        }\n-\n-        try {\n-            study = catalogManager.getStudyManager().get(study, null, sessionId).first().getFqn();\n-        } catch (CatalogException e) {\n-            throw new AnalysisException(e);\n-        }\n-\n-        caseCohortSamples = getCohortSamples(caseCohort, caseCohortSamplesQuery, \"case\", true);\n-        controlCohortSamples = getCohortSamples(controlCohort, controlCohortSamplesQuery, \"control\", false);\n-\n-        if (!Collections.disjoint(caseCohortSamples, controlCohortSamples)) {\n-            List<String> overlapping = new ArrayList<>();\n-            for (String caseCohortSample : caseCohortSamples) {\n-                if (controlCohortSamples.contains(caseCohortSample)) {\n-                    overlapping.add(caseCohortSample);\n-                }\n+    if (StringUtils.isNotEmpty(scoreName)) {\n+      if (StringUtils.isEmpty(caseCohort) || StringUtils.isEmpty(controlCohort)) {\n+        throw new AnalysisException(\"Unable to index gwas result as VariantScore if the cohorts are not defined in catalog\");\n+      }\n+\n+      // check score is not already indexed\n+      try {\n+        List<VariantScoreMetadata> scores = variantStorageManager.listVariantScores(study, sessionId);\n+        for (VariantScoreMetadata score : scores) {\n+          if (score.getName().equals(scoreName)) {\n+            if (score.getIndexStatus().equals(TaskMetadata.Status.READY)) {\n+              throw new AnalysisException(\"Score name '\" + scoreName + \"' already exists in the database. \"\n+                  + \"The score name must be unique.\");\n             }\n-            throw new AnalysisException(\"Unable to run Gwas analysis with overlapping cohorts. \"\n-                    + (overlapping.size() < 10\n-                        ? \"Samples \" + overlapping + \" are shared between both cohorts.\"\n-                        : \"There are \" + overlapping.size() + \" overlapping samples between the cohorts.\"));\n-        }\n-\n-        // check read permission\n-        try {\n-            List<String> allSamples = new ArrayList<>();\n-            allSamples.addAll(caseCohortSamples);\n-            allSamples.addAll(controlCohortSamples);\n-            variantStorageManager.checkQueryPermissions(\n-                    new Query()\n-                            .append(VariantQueryParam.STUDY.key(), study)\n-                            .append(VariantQueryParam.INCLUDE_SAMPLE.key(), allSamples),\n-                    new QueryOptions(),\n-                    sessionId);\n-        } catch (CatalogException | StorageEngineException e) {\n-            throw new AnalysisException(e);\n+          }\n         }\n+      } catch (CatalogException | StorageEngineException e) {\n+        throw new AnalysisException(e);\n+      }\n \n-        if (StringUtils.isNotEmpty(scoreName)) {\n-            if (StringUtils.isEmpty(caseCohort) || StringUtils.isEmpty(controlCohort)) {\n-                throw new AnalysisException(\"Unable to index gwas result as VariantScore if the cohorts are not defined in catalog\");\n-            }\n-\n-            // check score is not already indexed\n-            try {\n-                List<VariantScoreMetadata> scores = variantStorageManager.listVariantScores(study, sessionId);\n-                for (VariantScoreMetadata score : scores) {\n-                    if (score.getName().equals(scoreName)) {\n-                        if (score.getIndexStatus().equals(TaskMetadata.Status.READY)) {\n-                            throw new AnalysisException(\"Score name '\" + scoreName + \"' already exists in the database. \"\n-                                    + \"The score name must be unique.\");\n-                        }\n-                    }\n-                }\n-            } catch (CatalogException | StorageEngineException e) {\n-                throw new AnalysisException(e);\n-            }\n-\n-            // TODO: Check score index permissions\n+      // TODO: Check score index permissions\n \n-            index = true;\n-        }\n-\n-        executorParams.append(\"index\", index)\n-                .append(\"phenotype\", phenotype)\n-                .append(\"scoreName\", scoreName)\n-                .append(\"caseCohort\", caseCohort)\n-                .append(\"caseCohortSamples\", caseCohortSamples)\n-                .append(\"controlCohort\", controlCohort)\n-                .append(\"controlCohortSamples\", controlCohortSamples);\n-        arm.updateResult(analysisResult ->\n-                analysisResult.getExecutorParams().putAll(executorParams)\n-        );\n+      index = true;\n     }\n \n-    @Override\n-    protected void exec() throws AnalysisException {\n-\n-        arm.startStep(\"gwas\");\n-        GwasAnalysisExecutor gwasExecutor = getAnalysisExecutor(GwasAnalysisExecutor.class);\n-\n-        Path outputFile = outDir.resolve(buildOutputFilename());\n-        gwasExecutor.setConfiguration(gwasConfiguration)\n-                .setStudy(study)\n-                .setSampleList1(caseCohortSamples)\n-                .setSampleList2(controlCohortSamples)\n-                .setOutputFile(outputFile)\n-                .exec();\n-\n-        arm.endStep(70);\n+    executorParams.append(\"index\", index)\n+        .append(\"phenotype\", phenotype)\n+        .append(\"scoreName\", scoreName)\n+        .append(\"caseCohort\", caseCohort)\n+        .append(\"caseCohortSamples\", caseCohortSamples)\n+        .append(\"controlCohort\", controlCohort)\n+        .append(\"controlCohortSamples\", controlCohortSamples);\n+    arm.updateResult(analysisResult ->\n+        analysisResult.getExecutorParams().putAll(executorParams)\n+    );\n+  }\n+\n+  @Override\n+  protected void exec() throws AnalysisException {\n+\n+    arm.startStep(\"gwas\");\n+    GwasAnalysisExecutor gwasExecutor = getAnalysisExecutor(GwasAnalysisExecutor.class);\n+\n+    Path outputFile = outDir.resolve(buildOutputFilename());\n+    gwasExecutor.setConfiguration(gwasConfiguration)\n+        .setStudy(study)\n+        .setSampleList1(caseCohortSamples)\n+        .setSampleList2(controlCohortSamples)\n+        .setOutputFile(outputFile)\n+        .exec();\n+\n+    arm.endStep(70);\n+\n+    arm.startStep(\"manhattan-plot\");\n+    createManhattanPlot();\n+    arm.endStep(100);\n+\n+    if (outputFile.toFile().exists()) {\n+      arm.addFile(outputFile, FileResult.FileType.TAB_SEPARATED);\n+    }\n \n-        arm.startStep(\"manhattan-plot\");\n-        createManhattanPlot();\n-        arm.endStep(100);\n+    if (index) {\n+      arm.startStep(\"index-score\", 80f);\n+\n+      try {\n+        Path file = outDir.resolve(Paths.get(arm.read().getOutputFiles().get(0).getPath()));\n+        VariantScoreFormatDescriptor formatDescriptor = new VariantScoreFormatDescriptor(1, 16, 15);\n+        variantStorageManager.loadVariantScore(study, file.toUri(), scoreName, caseCohort, controlCohort, formatDescriptor,\n+            executorParams, sessionId);\n+      } catch (CatalogException | StorageEngineException e) {\n+        throw new AnalysisException(e);\n+      }\n+    }\n+    arm.endStep(100);\n+  }\n \n-        if (outputFile.toFile().exists()) {\n-            arm.addFile(outputFile, FileResult.FileType.TAB_SEPARATED);\n-        }\n+  private void createManhattanPlot() {\n \n-        if (index) {\n-            arm.startStep(\"index-score\", 80f);\n+  }\n \n-            try {\n-                Path file = outDir.resolve(Paths.get(arm.read().getOutputFiles().get(0).getPath()));\n-                VariantScoreFormatDescriptor formatDescriptor = new VariantScoreFormatDescriptor(1, 16, 15);\n-                variantStorageManager.loadVariantScore(study, file.toUri(), scoreName, caseCohort, controlCohort, formatDescriptor,\n-                        executorParams, sessionId);\n-            } catch (CatalogException | StorageEngineException e) {\n-                throw new AnalysisException(e);\n-            }\n-        }\n-        arm.endStep(100);\n+  protected String buildOutputFilename() throws AnalysisException {\n+    GwasConfiguration.Method method = gwasConfiguration.getMethod();\n+    switch (method) {\n+      case CHI_SQUARE_TEST:\n+      case FISHER_TEST:\n+        return method.label + \".tsv\";\n+      default:\n+        throw new AnalysisException(\"Unknown GWAS method: \" + method);\n     }\n-\n-    private void createManhattanPlot() {\n-\n+  }\n+\n+  private List<String> getCohortSamples(String cohort, Query samplesQuery, String cohortType, boolean observedPhenotype)\n+      throws AnalysisException {\n+    boolean validSampleQuery = samplesQuery != null && !samplesQuery.isEmpty();\n+    boolean validCohort = StringUtils.isNotEmpty(cohort);\n+    boolean validPhenotype = StringUtils.isNotEmpty(phenotype);\n+    if (validPhenotype) {\n+      if (validSampleQuery || validCohort) {\n+        throw new AnalysisException(\"Unable to mix phenotype parameter with \" + cohortType + \" cohort definition.\");\n+      }\n+    } else {\n+      if (!validSampleQuery && !validCohort) {\n+        throw new AnalysisException(\"Missing \" + cohortType + \" cohort!\");\n+      }\n     }\n-\n-    protected String buildOutputFilename() throws AnalysisException {\n-        GwasConfiguration.Method method = gwasConfiguration.getMethod();\n-        switch (method) {\n-            case CHI_SQUARE_TEST:\n-            case FISHER_TEST:\n-                return method.label + \".tsv\";\n-            default:\n-                throw new AnalysisException(\"Unknown GWAS method: \" + method);\n-        }\n+    if (validSampleQuery && validCohort) {\n+      throw new AnalysisException(\"Provide either \" + cohortType + \" cohort name or \" + cohortType + \" cohort samples query,\"\n+          + \" but not both.\");\n     }\n-\n-    private List<String> getCohortSamples(String cohort, Query samplesQuery, String cohortType, boolean observedPhenotype) throws AnalysisException {\n-        boolean validSampleQuery = samplesQuery != null && !samplesQuery.isEmpty();\n-        boolean validCohort = StringUtils.isNotEmpty(cohort);\n-        boolean validPhenotype = StringUtils.isNotEmpty(phenotype);\n-        if (validPhenotype) {\n-            if (validSampleQuery || validCohort) {\n-                throw new AnalysisException(\"Unable to mix phenotype parameter with \" + cohortType + \" cohort definition.\");\n-            }\n+    List<String> samples;\n+    try {\n+      if (validPhenotype) {\n+        Set<Phenotype.Status> expectedStatus = observedPhenotype\n+            ? Collections.singleton(Phenotype.Status.OBSERVED)\n+            : new HashSet<>(Arrays.asList(null, Phenotype.Status.NOT_OBSERVED));\n+        Query query;\n+        if (observedPhenotype) {\n+          query = new Query(SampleDBAdaptor.QueryParams.PHENOTYPES_NAME.key(), phenotype);\n         } else {\n-            if (!validSampleQuery && !validCohort) {\n-                throw new AnalysisException(\"Missing \" + cohortType + \" cohort!\");\n-            }\n-        }\n-        if (validSampleQuery && validCohort) {\n-            throw new AnalysisException(\"Provide either \" + cohortType + \" cohort name or \" + cohortType + \" cohort samples query,\"\n-                    + \" but not both.\");\n+          // If not observed, fetch all samples, and filter manually.\n+          query = new Query();\n         }\n-        List<String> samples;\n-        try {\n-            if (validPhenotype) {\n-                Set<Phenotype.Status> expectedStatus = observedPhenotype\n-                        ? Collections.singleton(Phenotype.Status.OBSERVED)\n-                        : new HashSet<>(Arrays.asList(null, Phenotype.Status.NOT_OBSERVED));\n-                Query query;\n-                if (observedPhenotype) {\n-                    query = new Query(SampleDBAdaptor.QueryParams.PHENOTYPES_NAME.key(), phenotype);\n-                } else {\n-                    // If not observed, fetch all samples, and filter manually.\n-                    query = new Query();\n+        QueryOptions options = new QueryOptions(\n+            QueryOptions.INCLUDE, Arrays.asList(\n+            SampleDBAdaptor.QueryParams.ID.key(),\n+            SampleDBAdaptor.QueryParams.PHENOTYPES.key()));\n+\n+        samples = new ArrayList<>();\n+        catalogManager.getSampleManager()\n+            .iterator(study, query, options, sessionId)\n+            .forEachRemaining(sample -> {\n+              Phenotype.Status status = null;\n+              for (Phenotype p : sample.getPhenotypes()) {\n+                if (p.getId().equals(phenotype) || p.getName().equals(phenotype)) {\n+                  status = p.getStatus();\n                 }\n-                QueryOptions options = new QueryOptions(\n-                        QueryOptions.INCLUDE, Arrays.asList(\n-                                SampleDBAdaptor.QueryParams.ID.key(),\n-                        SampleDBAdaptor.QueryParams.PHENOTYPES.key()));\n-\n-                samples = new ArrayList<>();\n-                catalogManager.getSampleManager()\n-                        .iterator(study, query, options, sessionId)\n-                        .forEachRemaining(sample -> {\n-                            Phenotype.Status status = null;\n-                            for (Phenotype p : sample.getPhenotypes()) {\n-                                if (p.getId().equals(phenotype) || p.getName().equals(phenotype)) {\n-                                    status = p.getStatus();\n-                                }\n-                            }\n-                            if (expectedStatus.contains(status)) {\n-                                samples.add(sample.getId());\n-                            }\n-                        });\n-            } else if (validCohort) {\n-                samples = catalogManager.getCohortManager()\n-                        .get(study, cohort, new QueryOptions(), sessionId)\n-                        .first()\n-                        .getSamples()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .collect(Collectors.toList());\n-            } else {\n-                samples = catalogManager.getSampleManager()\n-                        .search(study, samplesQuery, new QueryOptions(QueryOptions.INCLUDE, \"id\"), sessionId)\n-                        .getResults()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .collect(Collectors.toList());\n-            }\n-\n-            // Remove non-indexed samples\n-            Set<String> indexedSamples = variantStorageManager.getIndexedSamples(study, sessionId);\n-            samples.removeIf(s -> !indexedSamples.contains(s));\n-        } catch (CatalogException e) {\n-            throw new AnalysisException(e);\n-        }\n-        if (samples.size() <= 1) {\n-            throw new AnalysisException(\"Unable to run GWAS analysis with \" + cohortType + \" cohort of size \" + samples.size());\n-        }\n-        return samples;\n+              }\n+              if (expectedStatus.contains(status)) {\n+                samples.add(sample.getId());\n+              }\n+            });\n+      } else if (validCohort) {\n+        samples = catalogManager.getCohortManager()\n+            .get(study, cohort, new QueryOptions(), sessionId)\n+            .first()\n+            .getSamples()\n+            .stream()\n+            .map(Sample::getId)\n+            .collect(Collectors.toList());\n+      } else {\n+        samples = catalogManager.getSampleManager()\n+            .search(study, samplesQuery, new QueryOptions(QueryOptions.INCLUDE, \"id\"), sessionId)\n+            .getResults()\n+            .stream()\n+            .map(Sample::getId)\n+            .collect(Collectors.toList());\n+      }\n+\n+      // Remove non-indexed samples\n+      Set<String> indexedSamples = variantStorageManager.getIndexedSamples(study, sessionId);\n+      samples.removeIf(s -> !indexedSamples.contains(s));\n+    } catch (CatalogException e) {\n+      throw new AnalysisException(e);\n+    }\n+    if (samples.size() <= 1) {\n+      throw new AnalysisException(\"Unable to run GWAS analysis with \" + cohortType + \" cohort of size \" + samples.size());\n     }\n+    return samples;\n+  }\n \n }\n",
            "diff_size": 464
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "302",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "302",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "31",
                    "severity": "error",
                    "message": "'{' at column 31 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/262/GwasAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/262/GwasAnalysis.java\nindex e8c1d4683b3..a153605030d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/262/GwasAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/262/GwasAnalysis.java\n@@ -299,8 +299,10 @@ public class GwasAnalysis extends OpenCgaAnalysis {\n         }\n     }\n \n-    private List<String> getCohortSamples(String cohort, Query samplesQuery, String cohortType, boolean observedPhenotype) throws AnalysisException {\n-        boolean validSampleQuery = samplesQuery != null && !samplesQuery.isEmpty();\n+    private List<String> getCohortSamples( String cohort, Query samplesQuery, String cohortType,\n+            boolean observedPhenotype )throws\n+            AnalysisException { boolean\n+validSampleQuery = samplesQuery != null && !samplesQuery.isEmpty();\n         boolean validCohort = StringUtils.isNotEmpty(cohort);\n         boolean validPhenotype = StringUtils.isNotEmpty(phenotype);\n         if (validPhenotype) {\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}