{
    "project_name": "graphfoundation-ongdb",
    "error_id": "581",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "63",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/581/SnapshotState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/581/SnapshotState.java\nindex 89060121f95..dffbd16d2bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/581/SnapshotState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/581/SnapshotState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.snapshot;\n \n import org.neo4j.cluster.InstanceId;\n@@ -29,143 +30,139 @@ import org.neo4j.cluster.statemachine.State;\n  * State machine for the snapshot API\n  */\n public enum SnapshotState\n-        implements State<SnapshotContext, SnapshotMessage>\n+    implements State<SnapshotContext, SnapshotMessage>\n {\n-    start\n+  start\n+      {\n+        @Override\n+        public SnapshotState handle(SnapshotContext context,\n+                                    Message<SnapshotMessage> message,\n+                                    MessageHolder outgoing\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case setSnapshotProvider:\n+            {\n+              SnapshotProvider snapshotProvider = message.getPayload();\n+              context.setSnapshotProvider(snapshotProvider);\n+              break;\n+            }\n+\n+            case refreshSnapshot:\n             {\n-                @Override\n-                public SnapshotState handle( SnapshotContext context,\n-                                           Message<SnapshotMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+              if (context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||\n+                  context.getSnapshotProvider() == null)\n+              {\n+                // we are the only instance or there are no snapshots\n+                return start;\n+              } else\n+              {\n+                InstanceId coordinator = context.getClusterContext().getConfiguration().getElected(\n+                    ClusterConfiguration.COORDINATOR);\n+                if (coordinator != null)\n+                {\n+                  // there is a coordinator - ask from that\n+                  outgoing.offer(Message.to(SnapshotMessage.sendSnapshot,\n+                      context.getClusterContext().getConfiguration().getUriForId(\n+                          coordinator)));\n+                  return refreshing;\n+                } else\n                 {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case setSnapshotProvider:\n-                        {\n-                            SnapshotProvider snapshotProvider = message.getPayload();\n-                            context.setSnapshotProvider( snapshotProvider );\n-                            break;\n-                        }\n+                  return start;\n+                }\n+              }\n+            }\n \n-                        case refreshSnapshot:\n-                        {\n-                            if ( context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||\n-                                    context.getSnapshotProvider() == null )\n-                            {\n-                                // we are the only instance or there are no snapshots\n-                                return start;\n-                            }\n-                            else\n-                            {\n-                                InstanceId coordinator = context.getClusterContext().getConfiguration().getElected(\n-                                        ClusterConfiguration.COORDINATOR );\n-                                if ( coordinator != null )\n-                                {\n-                                    // there is a coordinator - ask from that\n-                                    outgoing.offer( Message.to( SnapshotMessage.sendSnapshot,\n-                                            context.getClusterContext().getConfiguration().getUriForId(\n-                                                    coordinator ) ) );\n-                                    return refreshing;\n-                                }\n-                                else\n-                                {\n-                                    return start;\n-                                }\n-                            }\n-                        }\n+            case join:\n+            {\n+              // go to ready state, if someone needs snapshots they should ask for it explicitly.\n+              return ready;\n+            }\n \n-                        case join:\n-                        {\n-                            // go to ready state, if someone needs snapshots they should ask for it explicitly.\n-                            return ready;\n-                        }\n+            default:\n+              break;\n+          }\n+          return this;\n+        }\n+      },\n \n-                        default:\n-                            break;\n-                    }\n-                    return this;\n-                }\n-            },\n+  refreshing\n+      {\n+        @Override\n+        public SnapshotState handle(SnapshotContext context,\n+                                    Message<SnapshotMessage> message,\n+                                    MessageHolder outgoing\n+        )\n+        {\n+          if (message.getMessageType() == SnapshotMessage.snapshot)\n+          {\n+            SnapshotMessage.SnapshotState state = message.getPayload();\n+            state.setState(context.getSnapshotProvider(),\n+                context.getClusterContext().getObjectInputStreamFactory());\n+            return ready;\n+          }\n+\n+          return this;\n+        }\n+      },\n \n-    refreshing\n+  ready\n+      {\n+        @Override\n+        public SnapshotState handle(SnapshotContext context,\n+                                    Message<SnapshotMessage> message,\n+                                    MessageHolder outgoing\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case refreshSnapshot:\n             {\n-                @Override\n-                public SnapshotState handle( SnapshotContext context,\n-                                           Message<SnapshotMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+              if (context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||\n+                  context.getSnapshotProvider() == null)\n+              {\n+                // we are the only instance in the cluster or snapshots are not meaningful\n+                return ready;\n+              } else\n+              {\n+                InstanceId coordinator = context.getClusterContext().getConfiguration().getElected(\n+                    ClusterConfiguration.COORDINATOR);\n+                if (coordinator != null && !coordinator.equals(context.getClusterContext().getMyId()))\n                 {\n-                    if ( message.getMessageType() == SnapshotMessage.snapshot )\n-                    {\n-                        SnapshotMessage.SnapshotState state = message.getPayload();\n-                        state.setState( context.getSnapshotProvider(),\n-                                context.getClusterContext().getObjectInputStreamFactory() );\n-                        return ready;\n-                    }\n-\n-                    return this;\n+                  // coordinator exists, ask for the snapshot\n+                  outgoing.offer(Message.to(SnapshotMessage.sendSnapshot,\n+                      context.getClusterContext().getConfiguration().getUriForId(\n+                          coordinator)));\n+                  return refreshing;\n+                } else\n+                {\n+                  // coordinator is unknown, can't do much\n+                  return ready;\n                 }\n-            },\n+              }\n+            }\n \n-    ready\n+            case sendSnapshot:\n             {\n-                @Override\n-                public SnapshotState handle( SnapshotContext context,\n-                                           Message<SnapshotMessage> message,\n-                                           MessageHolder outgoing\n-                )\n-                {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case refreshSnapshot:\n-                         {\n-                             if ( context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||\n-                                     context.getSnapshotProvider() == null )\n-                             {\n-                                 // we are the only instance in the cluster or snapshots are not meaningful\n-                                 return ready;\n-                             }\n-                             else\n-                             {\n-                                 InstanceId coordinator = context.getClusterContext().getConfiguration().getElected(\n-                                         ClusterConfiguration.COORDINATOR );\n-                                 if ( coordinator != null && !coordinator.equals( context.getClusterContext().getMyId() ) )\n-                                 {\n-                                     // coordinator exists, ask for the snapshot\n-                                     outgoing.offer( Message.to( SnapshotMessage.sendSnapshot,\n-                                             context.getClusterContext().getConfiguration().getUriForId(\n-                                                     coordinator )  ) );\n-                                     return refreshing;\n-                                 }\n-                                 else\n-                                 {\n-                                     // coordinator is unknown, can't do much\n-                                     return ready;\n-                                 }\n-                             }\n-                         }\n-\n-                        case sendSnapshot:\n-                        {\n-                            outgoing.offer( Message.respond( SnapshotMessage.snapshot, message,\n-                                    new SnapshotMessage.SnapshotState(\n-                                            context.getLearnerContext().getLastDeliveredInstanceId(),\n-                                            context.getSnapshotProvider(),\n-                                            context.getClusterContext().getObjectOutputStreamFactory() ) ) );\n-                            break;\n-                        }\n+              outgoing.offer(Message.respond(SnapshotMessage.snapshot, message,\n+                  new SnapshotMessage.SnapshotState(\n+                      context.getLearnerContext().getLastDeliveredInstanceId(),\n+                      context.getSnapshotProvider(),\n+                      context.getClusterContext().getObjectOutputStreamFactory())));\n+              break;\n+            }\n \n-                        case leave:\n-                        {\n-                            return start;\n-                        }\n+            case leave:\n+            {\n+              return start;\n+            }\n \n-                        default:\n-                            break;\n-                    }\n+            default:\n+              break;\n+          }\n \n-                    return this;\n-                }\n-            }\n+          return this;\n+        }\n+      }\n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "106",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "106",
                    "column": "107",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 285).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/581/SnapshotState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/581/SnapshotState.java\nindex 89060121f95..a09183c6627 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/581/SnapshotState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/581/SnapshotState.java\n@@ -28,45 +28,38 @@ import org.neo4j.cluster.statemachine.State;\n /**\n  * State machine for the snapshot API\n  */\n-public enum SnapshotState\n-        implements State<SnapshotContext, SnapshotMessage>\n+public enum SnapshotState implements State<SnapshotContext, SnapshotMessage>\n {\n     start\n-            {\n+{\n                 @Override\n-                public SnapshotState handle( SnapshotContext context,\n-                                           Message<SnapshotMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+                public SnapshotState handle( SnapshotContext context, Message<SnapshotMessage> message,\n+                                           MessageHolder outgoing )\n                 {\n                     switch ( message.getMessageType() )\n                     {\n-                        case setSnapshotProvider:\n+case setSnapshotProvider:\n                         {\n                             SnapshotProvider snapshotProvider = message.getPayload();\n                             context.setSnapshotProvider( snapshotProvider );\n                             break;\n                         }\n-\n-                        case refreshSnapshot:\n+    case refreshSnapshot:\n                         {\n-                            if ( context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||\n-                                    context.getSnapshotProvider() == null )\n-                            {\n+                            if ( context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||context.getSnapshotProvider() == null )\n+{\n                                 // we are the only instance or there are no snapshots\n                                 return start;\n                             }\n                             else\n                             {\n-                                InstanceId coordinator = context.getClusterContext().getConfiguration().getElected(\n-                                        ClusterConfiguration.COORDINATOR );\n-                                if ( coordinator != null )\n+                                InstanceId coordinator = context.getClusterContext().getConfiguration().getElected( ClusterConfiguration.COORDINATOR );\n+if ( coordinator != null )\n                                 {\n                                     // there is a coordinator - ask from that\n                                     outgoing.offer( Message.to( SnapshotMessage.sendSnapshot,\n-                                            context.getClusterContext().getConfiguration().getUriForId(\n-                                                    coordinator ) ) );\n-                                    return refreshing;\n+                                            context.getClusterContext().getConfiguration().getUriForId( coordinator ) ) );\n+return refreshing;\n                                 }\n                                 else\n                                 {\n@@ -80,63 +73,50 @@ public enum SnapshotState\n                             // go to ready state, if someone needs snapshots they should ask for it explicitly.\n                             return ready;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n                     return this;\n                 }\n-            },\n-\n-    refreshing\n-            {\n+            }, refreshing\n+{\n                 @Override\n-                public SnapshotState handle( SnapshotContext context,\n-                                           Message<SnapshotMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+                public SnapshotState handle( SnapshotContext context, Message<SnapshotMessage> message,\n+                                           MessageHolder outgoing )\n                 {\n                     if ( message.getMessageType() == SnapshotMessage.snapshot )\n                     {\n                         SnapshotMessage.SnapshotState state = message.getPayload();\n-                        state.setState( context.getSnapshotProvider(),\n-                                context.getClusterContext().getObjectInputStreamFactory() );\n-                        return ready;\n+                        state.setState( context.getSnapshotProvider(), context.getClusterContext().getObjectInputStreamFactory() );\n+return ready;\n                     }\n \n                     return this;\n                 }\n-            },\n-\n-    ready\n-            {\n+            }, ready\n+{\n                 @Override\n-                public SnapshotState handle( SnapshotContext context,\n-                                           Message<SnapshotMessage> message,\n-                                           MessageHolder outgoing\n-                )\n+                public SnapshotState handle( SnapshotContext context, Message<SnapshotMessage> message,\n+                                           MessageHolder outgoing )\n                 {\n                     switch ( message.getMessageType() )\n                     {\n-                        case refreshSnapshot:\n-                         {\n-                             if ( context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||\n-                                     context.getSnapshotProvider() == null )\n-                             {\n+case refreshSnapshot:\n+    {\n+                             if ( context.getClusterContext().getConfiguration().getMembers().size() <= 1 ||context.getSnapshotProvider() == null )\n+{\n                                  // we are the only instance in the cluster or snapshots are not meaningful\n                                  return ready;\n                              }\n                              else\n                              {\n-                                 InstanceId coordinator = context.getClusterContext().getConfiguration().getElected(\n-                                         ClusterConfiguration.COORDINATOR );\n-                                 if ( coordinator != null && !coordinator.equals( context.getClusterContext().getMyId() ) )\n+                                 InstanceId coordinator = context.getClusterContext().getConfiguration().getElected( ClusterConfiguration.COORDINATOR );\n+if ( coordinator != null && !coordinator.equals( context.getClusterContext().getMyId() ) )\n                                  {\n                                      // coordinator exists, ask for the snapshot\n                                      outgoing.offer( Message.to( SnapshotMessage.sendSnapshot,\n-                                             context.getClusterContext().getConfiguration().getUriForId(\n-                                                     coordinator )  ) );\n-                                     return refreshing;\n+                                             context.getClusterContext().getConfiguration().getUriForId( coordinator ) ) );\n+return refreshing;\n                                  }\n                                  else\n                                  {\n@@ -145,27 +125,20 @@ public enum SnapshotState\n                                  }\n                              }\n                          }\n-\n-                        case sendSnapshot:\n+    case sendSnapshot:\n                         {\n-                            outgoing.offer( Message.respond( SnapshotMessage.snapshot, message,\n-                                    new SnapshotMessage.SnapshotState(\n-                                            context.getLearnerContext().getLastDeliveredInstanceId(),\n-                                            context.getSnapshotProvider(),\n-                                            context.getClusterContext().getObjectOutputStreamFactory() ) ) );\n-                            break;\n+                            outgoing.offer( Message.respond( SnapshotMessage.snapshot, message, new SnapshotMessage.SnapshotState( context.getLearnerContext().getLastDeliveredInstanceId(), context.getSnapshotProvider(), context.getClusterContext().getObjectOutputStreamFactory() ) ) );\n+break;\n                         }\n-\n-                        case leave:\n+    case leave:\n                         {\n                             return start;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n             }\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}