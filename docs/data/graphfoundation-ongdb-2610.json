{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2610",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2610/ParallelRecordScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2610/ParallelRecordScanner.java\nindex f07f5838fe2..3bf69bb2919 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2610/ParallelRecordScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2610/ParallelRecordScanner.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import org.neo4j.consistency.checking.cache.CacheAccess;\n@@ -30,27 +31,27 @@ import static org.neo4j.consistency.checking.full.RecordDistributor.distributeRe\n \n public class ParallelRecordScanner<RECORD> extends RecordScanner<RECORD>\n {\n-    private final CacheAccess cacheAccess;\n-    private final QueueDistribution distribution;\n+  private final CacheAccess cacheAccess;\n+  private final QueueDistribution distribution;\n \n-    public ParallelRecordScanner( String name, Statistics statistics, int threads, BoundedIterable<RECORD> store,\n-            MultiPartBuilder builder, RecordProcessor<RECORD> processor, CacheAccess cacheAccess,\n-            QueueDistribution distribution,\n-            IterableStore... warmUpStores )\n-    {\n-        super( name, statistics, threads, store, builder, processor, warmUpStores );\n-        this.cacheAccess = cacheAccess;\n-        this.distribution = distribution;\n-    }\n+  public ParallelRecordScanner(String name, Statistics statistics, int threads, BoundedIterable<RECORD> store,\n+                               MultiPartBuilder builder, RecordProcessor<RECORD> processor, CacheAccess cacheAccess,\n+                               QueueDistribution distribution,\n+                               IterableStore... warmUpStores)\n+  {\n+    super(name, statistics, threads, store, builder, processor, warmUpStores);\n+    this.cacheAccess = cacheAccess;\n+    this.distribution = distribution;\n+  }\n \n-    @Override\n-    protected void scan()\n-    {\n-        long recordsPerCPU = RecordDistributor.calculateRecodsPerCpu( store.maxCount(), numberOfThreads );\n-        cacheAccess.prepareForProcessingOfSingleStore( recordsPerCPU );\n+  @Override\n+  protected void scan()\n+  {\n+    long recordsPerCPU = RecordDistributor.calculateRecodsPerCpu(store.maxCount(), numberOfThreads);\n+    cacheAccess.prepareForProcessingOfSingleStore(recordsPerCPU);\n \n-        QueueDistributor<RECORD> distributor = distribution.distributor( recordsPerCPU, numberOfThreads );\n-        distributeRecords( numberOfThreads, getClass().getSimpleName() + \"-\" + name,\n-                DEFAULT_QUEUE_SIZE, store.iterator(), progress, processor, distributor );\n-    }\n+    QueueDistributor<RECORD> distributor = distribution.distributor(recordsPerCPU, numberOfThreads);\n+    distributeRecords(numberOfThreads, getClass().getSimpleName() + \"-\" + name,\n+        DEFAULT_QUEUE_SIZE, store.iterator(), progress, processor, distributor);\n+  }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2610/ParallelRecordScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2610/ParallelRecordScanner.java\nindex f07f5838fe2..0cd086ac971 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2610/ParallelRecordScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2610/ParallelRecordScanner.java\n@@ -53,4 +53,4 @@ public class ParallelRecordScanner<RECORD> extends RecordScanner<RECORD>\n         distributeRecords( numberOfThreads, getClass().getSimpleName() + \"-\" + name,\n                 DEFAULT_QUEUE_SIZE, store.iterator(), progress, processor, distributor );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}