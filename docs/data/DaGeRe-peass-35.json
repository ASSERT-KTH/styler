{
    "project_name": "DaGeRe-peass",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "70",
                "column": "99",
                "severity": "error",
                "message": "'{' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t\twriter.write(new FileWriter(pomFile), model);\n\n\t\t\t\t\tfinal ProcessBuilder pb = new ProcessBuilder(new String[] { \"mvn\", \"compile\", \"test-compile\" });\n\t\t\t\t\tpb.directory(projectFolder);\n\n\t\t\t\t\tpb.start().waitFor();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "column": "99",
                    "severity": "error",
                    "message": "'{' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "81",
                    "column": "110",
                    "severity": "error",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/35/InfinitestEvaluator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/35/InfinitestEvaluator.java\nindex 77cf0daf844..ab900c68eea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/35/InfinitestEvaluator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/35/InfinitestEvaluator.java\n@@ -28,102 +28,102 @@ import de.peran.evaluation.base.Evaluator;\n \n /**\n  * Runs all the tests of all versions with infinitest in order to determine the count of tests infinitest would run\n- * @author reichelt\n  *\n+ * @author reichelt\n  */\n public class InfinitestEvaluator extends Evaluator {\n \n-\tprivate static final Logger LOG = LogManager.getLogger(InfinitestEvaluator.class);\n-\n-\tpublic InfinitestEvaluator(final File projectFolder) {\n-\t\tsuper(projectFolder, \"infinitest\");\n-\t}\n-\n-\t@Override\n-\tpublic void evaluate() {\n-\t\tfinal List<File> classPath = Arrays.asList(new File(projectFolder, \"target/classes\"), new File(projectFolder, \"target/test-classes\"));\n-\t\tfinal File pomFile = new File(projectFolder, \"pom.xml\");\n-\t\tfinal StandaloneClasspath classpath = new StandaloneClasspath(classPath, classPath);\n-\t\tfinal FileChangeDetector changeDetector = new FileChangeDetector();\n-\t\tfinal File resultFile = new File(resultFolder, \"evaluation_\" + projectFolder.getName() + \"_infinitest.json\");\n-\n-\t\tchangeDetector.setClasspathProvider(classpath);\n-\n-\t\tfinal ClassFileIndex index = new ClassFileIndex(classpath);\n-\t\tfinal MavenXpp3Reader reader = new MavenXpp3Reader();\n-\t\tint i = 0;\n-\t\twhile (iterator.hasNextCommit()) {\n-\t\t\titerator.goToNextCommit();\n-\n-\t\t\tif (pomFile.exists()) {\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal Model model = reader.read(new FileInputStream(pomFile));\n-\t\t\t\t\tif (model.getBuild() == null) {\n-\t\t\t\t\t\tmodel.setBuild(new Build());\n-\t\t\t\t\t}\n-\t\t\t\t\tfinal Plugin compiler = MavenPomUtil.findPlugin(model, MavenKiekerTestExecutor.COMPILER_ARTIFACTID, MavenKiekerTestExecutor.ORG_APACHE_MAVEN_PLUGINS);\n-\t\t\t\t\tMavenPomUtil.setIncrementalBuild(compiler, false);\n-\n-\t\t\t\t\tfinal MavenXpp3Writer writer = new MavenXpp3Writer();\n-\t\t\t\t\twriter.write(new FileWriter(pomFile), model);\n-\n-\t\t\t\t\tfinal ProcessBuilder pb = new ProcessBuilder(new String[] { \"mvn\", \"compile\", \"test-compile\" });\n-\t\t\t\t\tpb.directory(projectFolder);\n-\n-\t\t\t\t\tpb.start().waitFor();\n-\n-\t\t\t\t\tfinal Set<JavaClass> changedClasses = getChangedClasses(changeDetector, index);\n-\n-\t\t\t\t\tSystem.out.println(\"All changes: \" + changedClasses);\n-\n-\t\t\t\t\tString testname = \"\";\n-\t\t\t\t\tfinal EvaluationVersion currentVersion = new EvaluationVersion();\n-\t\t\t\t\tfor (final Iterator<JavaClass> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext();) {\n-\t\t\t\t\t\tfinal JavaClass clazz = clazzIterator.next();\n-\t\t\t\t\t\tif (!clazz.isATest()) {\n-\t\t\t\t\t\t\tclazzIterator.remove();\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tcurrentVersion.getTestcaseExecutions().put(clazz.getName(), 0);\n-\t\t\t\t\t\t\ttestname += clazz.getName() + \",\";\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (currentVersion.getTestcaseExecutions().size() > 0) {\n-\t\t\t\t\t\ttestname = testname.substring(0, testname.length() - 1);\n-\t\t\t\t\t\tfinal File currentFile = new File(debugFolder, \"myResult\" + i + \"_\" + iterator.getTag() + \".txt\");\n-\n-\t\t\t\t\t\texecutor.executeTests(currentFile, testname);\n-\n-\t\t\t\t\t\tfinal EvaluationVersion adjustedVersion = getTestsFromFile(currentFile);\n-\t\t\t\t\t\tevaluation.getVersions().put(iterator.getTag(), adjustedVersion);\n-\t\t\t\t\t\tOBJECTMAPPER.writeValue(resultFile, evaluation);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tSystem.out.println(\"Tests 2: \" + changedClasses);\n-\t\t\t\t} catch (final Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\ti++;\n-\t\t}\n-\n-\t}\n-\n-\tprivate Set<JavaClass> getChangedClasses(final FileChangeDetector changeDetector, final ClassFileIndex index) throws IOException {\n-\t\tfinal Set<File> changedFiles = changeDetector.findChangedFiles();\n-\t\tSystem.out.println(\"Changes: \" + changedFiles);\n-\t\tfinal Set<JavaClass> changedClasses = index.findClasses(changedFiles);\n-\t\tfinal Set<JavaClass> changedParents = index.findChangedParents(changedClasses);\n-\n-\t\t// combine two sets\n-\t\tchangedClasses.addAll(changedParents);\n-\t\treturn changedClasses;\n-\t}\n-\t\n-\tpublic static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException {\n-\t\tfinal InfinitestEvaluator evaluator = new InfinitestEvaluator(new File(args[0]));\n-\t\tevaluator.evaluate();\n-\t}\n+  private static final Logger LOG = LogManager.getLogger(InfinitestEvaluator.class);\n+\n+  public InfinitestEvaluator(final File projectFolder) {\n+    super(projectFolder, \"infinitest\");\n+  }\n+\n+  @Override\n+  public void evaluate() {\n+    final List<File> classPath = Arrays.asList(new File(projectFolder, \"target/classes\"), new File(projectFolder, \"target/test-classes\"));\n+    final File pomFile = new File(projectFolder, \"pom.xml\");\n+    final StandaloneClasspath classpath = new StandaloneClasspath(classPath, classPath);\n+    final FileChangeDetector changeDetector = new FileChangeDetector();\n+    final File resultFile = new File(resultFolder, \"evaluation_\" + projectFolder.getName() + \"_infinitest.json\");\n+\n+    changeDetector.setClasspathProvider(classpath);\n+\n+    final ClassFileIndex index = new ClassFileIndex(classpath);\n+    final MavenXpp3Reader reader = new MavenXpp3Reader();\n+    int i = 0;\n+    while (iterator.hasNextCommit()) {\n+      iterator.goToNextCommit();\n+\n+      if (pomFile.exists()) {\n+        try {\n+          final Model model = reader.read(new FileInputStream(pomFile));\n+          if (model.getBuild() == null) {\n+            model.setBuild(new Build());\n+          }\n+          final Plugin compiler = MavenPomUtil.findPlugin(model, MavenKiekerTestExecutor.COMPILER_ARTIFACTID, MavenKiekerTestExecutor.ORG_APACHE_MAVEN_PLUGINS);\n+          MavenPomUtil.setIncrementalBuild(compiler, false);\n+\n+          final MavenXpp3Writer writer = new MavenXpp3Writer();\n+          writer.write(new FileWriter(pomFile), model);\n+\n+          final ProcessBuilder pb = new ProcessBuilder(new String[] {\"mvn\", \"compile\", \"test-compile\"});\n+          pb.directory(projectFolder);\n+\n+          pb.start().waitFor();\n+\n+          final Set<JavaClass> changedClasses = getChangedClasses(changeDetector, index);\n+\n+          System.out.println(\"All changes: \" + changedClasses);\n+\n+          String testname = \"\";\n+          final EvaluationVersion currentVersion = new EvaluationVersion();\n+          for (final Iterator<JavaClass> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext(); ) {\n+            final JavaClass clazz = clazzIterator.next();\n+            if (!clazz.isATest()) {\n+              clazzIterator.remove();\n+            } else {\n+              currentVersion.getTestcaseExecutions().put(clazz.getName(), 0);\n+              testname += clazz.getName() + \",\";\n+            }\n+          }\n+\n+          if (currentVersion.getTestcaseExecutions().size() > 0) {\n+            testname = testname.substring(0, testname.length() - 1);\n+            final File currentFile = new File(debugFolder, \"myResult\" + i + \"_\" + iterator.getTag() + \".txt\");\n+\n+            executor.executeTests(currentFile, testname);\n+\n+            final EvaluationVersion adjustedVersion = getTestsFromFile(currentFile);\n+            evaluation.getVersions().put(iterator.getTag(), adjustedVersion);\n+            OBJECTMAPPER.writeValue(resultFile, evaluation);\n+          }\n+\n+          System.out.println(\"Tests 2: \" + changedClasses);\n+        } catch (final Exception e) {\n+          e.printStackTrace();\n+        }\n+\n+      }\n+      i++;\n+    }\n+\n+  }\n+\n+  private Set<JavaClass> getChangedClasses(final FileChangeDetector changeDetector, final ClassFileIndex index) throws IOException {\n+    final Set<File> changedFiles = changeDetector.findChangedFiles();\n+    System.out.println(\"Changes: \" + changedFiles);\n+    final Set<JavaClass> changedClasses = index.findClasses(changedFiles);\n+    final Set<JavaClass> changedParents = index.findChangedParents(changedClasses);\n+\n+    // combine two sets\n+    changedClasses.addAll(changedParents);\n+    return changedClasses;\n+  }\n+\n+  public static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException {\n+    final InfinitestEvaluator evaluator = new InfinitestEvaluator(new File(args[0]));\n+    evaluator.evaluate();\n+  }\n \n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "column": "99",
                    "severity": "error",
                    "message": "'{' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/35/InfinitestEvaluator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/35/InfinitestEvaluator.java\nindex 77cf0daf844..6d9a7311a2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/35/InfinitestEvaluator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/35/InfinitestEvaluator.java\n@@ -122,8 +122,8 @@ public class InfinitestEvaluator extends Evaluator {\n \t}\n \t\n \tpublic static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException {\n-\t\tfinal InfinitestEvaluator evaluator = new InfinitestEvaluator(new File(args[0]));\n+\tfinal InfinitestEvaluator evaluator = new InfinitestEvaluator(new File(args[0]));\n \t\tevaluator.evaluate();\n \t}\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/35/InfinitestEvaluator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/35/InfinitestEvaluator.java\nindex 77cf0daf844..8a8ff5c8bcf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/35/InfinitestEvaluator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/35/InfinitestEvaluator.java\n@@ -8,7 +8,6 @@ import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.maven.model.Build;\n@@ -20,7 +19,6 @@ import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n import org.infinitest.changedetect.FileChangeDetector;\n import org.infinitest.parser.ClassFileIndex;\n import org.infinitest.parser.JavaClass;\n-\n import de.peran.dependency.execution.MavenKiekerTestExecutor;\n import de.peran.dependency.execution.MavenPomUtil;\n import de.peran.evaluation.base.EvaluationVersion;\n@@ -31,99 +29,93 @@ import de.peran.evaluation.base.Evaluator;\n  * @author reichelt\n  *\n  */\n-public class InfinitestEvaluator extends Evaluator {\n \n-\tprivate static final Logger LOG = LogManager.getLogger(InfinitestEvaluator.class);\n-\n-\tpublic InfinitestEvaluator(final File projectFolder) {\n-\t\tsuper(projectFolder, \"infinitest\");\n-\t}\n-\n-\t@Override\n-\tpublic void evaluate() {\n-\t\tfinal List<File> classPath = Arrays.asList(new File(projectFolder, \"target/classes\"), new File(projectFolder, \"target/test-classes\"));\n-\t\tfinal File pomFile = new File(projectFolder, \"pom.xml\");\n-\t\tfinal StandaloneClasspath classpath = new StandaloneClasspath(classPath, classPath);\n-\t\tfinal FileChangeDetector changeDetector = new FileChangeDetector();\n-\t\tfinal File resultFile = new File(resultFolder, \"evaluation_\" + projectFolder.getName() + \"_infinitest.json\");\n-\n-\t\tchangeDetector.setClasspathProvider(classpath);\n-\n-\t\tfinal ClassFileIndex index = new ClassFileIndex(classpath);\n-\t\tfinal MavenXpp3Reader reader = new MavenXpp3Reader();\n-\t\tint i = 0;\n-\t\twhile (iterator.hasNextCommit()) {\n-\t\t\titerator.goToNextCommit();\n-\n-\t\t\tif (pomFile.exists()) {\n-\t\t\t\ttry {\n-\t\t\t\t\tfinal Model model = reader.read(new FileInputStream(pomFile));\n-\t\t\t\t\tif (model.getBuild() == null) {\n-\t\t\t\t\t\tmodel.setBuild(new Build());\n-\t\t\t\t\t}\n-\t\t\t\t\tfinal Plugin compiler = MavenPomUtil.findPlugin(model, MavenKiekerTestExecutor.COMPILER_ARTIFACTID, MavenKiekerTestExecutor.ORG_APACHE_MAVEN_PLUGINS);\n-\t\t\t\t\tMavenPomUtil.setIncrementalBuild(compiler, false);\n-\n-\t\t\t\t\tfinal MavenXpp3Writer writer = new MavenXpp3Writer();\n-\t\t\t\t\twriter.write(new FileWriter(pomFile), model);\n-\n-\t\t\t\t\tfinal ProcessBuilder pb = new ProcessBuilder(new String[] { \"mvn\", \"compile\", \"test-compile\" });\n-\t\t\t\t\tpb.directory(projectFolder);\n-\n-\t\t\t\t\tpb.start().waitFor();\n-\n-\t\t\t\t\tfinal Set<JavaClass> changedClasses = getChangedClasses(changeDetector, index);\n-\n-\t\t\t\t\tSystem.out.println(\"All changes: \" + changedClasses);\n-\n-\t\t\t\t\tString testname = \"\";\n-\t\t\t\t\tfinal EvaluationVersion currentVersion = new EvaluationVersion();\n-\t\t\t\t\tfor (final Iterator<JavaClass> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext();) {\n-\t\t\t\t\t\tfinal JavaClass clazz = clazzIterator.next();\n-\t\t\t\t\t\tif (!clazz.isATest()) {\n-\t\t\t\t\t\t\tclazzIterator.remove();\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tcurrentVersion.getTestcaseExecutions().put(clazz.getName(), 0);\n-\t\t\t\t\t\t\ttestname += clazz.getName() + \",\";\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (currentVersion.getTestcaseExecutions().size() > 0) {\n-\t\t\t\t\t\ttestname = testname.substring(0, testname.length() - 1);\n-\t\t\t\t\t\tfinal File currentFile = new File(debugFolder, \"myResult\" + i + \"_\" + iterator.getTag() + \".txt\");\n-\n-\t\t\t\t\t\texecutor.executeTests(currentFile, testname);\n-\n-\t\t\t\t\t\tfinal EvaluationVersion adjustedVersion = getTestsFromFile(currentFile);\n-\t\t\t\t\t\tevaluation.getVersions().put(iterator.getTag(), adjustedVersion);\n-\t\t\t\t\t\tOBJECTMAPPER.writeValue(resultFile, evaluation);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tSystem.out.println(\"Tests 2: \" + changedClasses);\n-\t\t\t\t} catch (final Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\ti++;\n-\t\t}\n-\n-\t}\n-\n-\tprivate Set<JavaClass> getChangedClasses(final FileChangeDetector changeDetector, final ClassFileIndex index) throws IOException {\n-\t\tfinal Set<File> changedFiles = changeDetector.findChangedFiles();\n-\t\tSystem.out.println(\"Changes: \" + changedFiles);\n-\t\tfinal Set<JavaClass> changedClasses = index.findClasses(changedFiles);\n-\t\tfinal Set<JavaClass> changedParents = index.findChangedParents(changedClasses);\n-\n-\t\t// combine two sets\n-\t\tchangedClasses.addAll(changedParents);\n-\t\treturn changedClasses;\n-\t}\n-\t\n-\tpublic static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException {\n-\t\tfinal InfinitestEvaluator evaluator = new InfinitestEvaluator(new File(args[0]));\n-\t\tevaluator.evaluate();\n-\t}\n-\n-}\n+\n+public class InfinitestEvaluator extends Evaluator {\n+ private static final Logger LOG = LogManager.getLogger(InfinitestEvaluator.class);\n+\n+ public InfinitestEvaluator(final File projectFolder) {\n+  super(projectFolder, \"infinitest\");\n+ }\n+\n+ @Override\n+ public void evaluate() {\n+  final List<File> classPath = Arrays.asList(new File(projectFolder, \"target/classes\"), new File(projectFolder, \"target/test-classes\"));\n+  final File pomFile = new File(projectFolder, \"pom.xml\");\n+  final StandaloneClasspath classpath = new StandaloneClasspath(classPath, classPath);\n+  final FileChangeDetector changeDetector = new FileChangeDetector();\n+  final File resultFile = new File(resultFolder, \"evaluation_\" + projectFolder.getName() + \"_infinitest.json\");\n+  changeDetector.setClasspathProvider(classpath);\n+\n+  final ClassFileIndex index = new ClassFileIndex(classpath);\n+  final MavenXpp3Reader reader = new MavenXpp3Reader();\n+  int i = 0;\n+  while (iterator.hasNextCommit()) {\n+   iterator.goToNextCommit();\n+   if (pomFile.exists()) {\n+    try {\n+     final Model model = reader.read(new FileInputStream(pomFile));\n+     if (model.getBuild() == null) {\n+      model.setBuild(new Build());\n+     }\n+\n+     final Plugin compiler = MavenPomUtil.findPlugin(model, MavenKiekerTestExecutor.COMPILER_ARTIFACTID, MavenKiekerTestExecutor.ORG_APACHE_MAVEN_PLUGINS);\n+     MavenPomUtil.setIncrementalBuild(compiler, false);\n+\n+     final MavenXpp3Writer writer = new MavenXpp3Writer();\n+     writer.write(new FileWriter(pomFile), model);\n+\n+     final ProcessBuilder pb = new ProcessBuilder(new String[]{\"mvn\", \"compile\", \"test-compile\"});\n+     pb.directory(projectFolder);\n+     pb.start().waitFor();\n+\n+     final Set<JavaClass> changedClasses = getChangedClasses(changeDetector, index);\n+     System.out.println(\"All changes: \" + changedClasses);\n+\n+     String testname = \"\";\n+     final EvaluationVersion currentVersion = new EvaluationVersion();\n+     for (final Iterator<JavaClass> clazzIterator = changedClasses.iterator(); clazzIterator.hasNext();) {\n+      final JavaClass clazz = clazzIterator.next();\n+      if (!clazz.isATest()) {\n+       clazzIterator.remove();\n+      } else {\n+       currentVersion.getTestcaseExecutions().put(clazz.getName(), 0);\n+       testname += clazz.getName() + \",\";\n+      }\n+     }\n+     if (currentVersion.getTestcaseExecutions().size() > 0) {\n+      testname = testname.substring(0, testname.length() - 1);\n+\n+      final File currentFile = new File(debugFolder, \"myResult\" + i + \"_\" + iterator.getTag() + \".txt\");\n+      executor.executeTests(currentFile, testname);\n+\n+      final EvaluationVersion adjustedVersion = getTestsFromFile(currentFile);\n+      evaluation.getVersions().put(iterator.getTag(), adjustedVersion);\n+      OBJECTMAPPER.writeValue(resultFile, evaluation);\n+     }\n+     System.out.println(\"Tests 2: \" + changedClasses);\n+    } catch (final Exception e) {\n+     e.printStackTrace();\n+    }\n+   }\n+   i++;\n+  }\n+ }\n+\n+ private Set<JavaClass> getChangedClasses(final FileChangeDetector changeDetector, final ClassFileIndex index) throws IOException {\n+  final Set<File> changedFiles = changeDetector.findChangedFiles();\n+  System.out.println(\"Changes: \" + changedFiles);\n+\n+  final Set<JavaClass> changedClasses = index.findClasses(changedFiles);\n+  final Set<JavaClass> changedParents = index.findChangedParents(changedClasses);\n+\n+  // combine two sets\n+  changedClasses.addAll(changedParents);\n+  return changedClasses;\n+ }\n+\n+ public static void main(final String[] args) throws IOException, XmlPullParserException, InterruptedException {\n+  final InfinitestEvaluator evaluator = new InfinitestEvaluator(new File(args[0]));\n+  evaluator.evaluate();\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "column": "99",
                    "severity": "error",
                    "message": "'{' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "70",
                    "column": "99",
                    "severity": "error",
                    "message": "'{' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}