{
    "project_name": "neo4j-neo4j",
    "error_id": "1950",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1950/Neo4jTransactionalContextFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1950/Neo4jTransactionalContextFactory.java\nindex cbf24fa6a41..7c5c6fc3ce7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1950/Neo4jTransactionalContextFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1950/Neo4jTransactionalContextFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.query;\n \n import java.util.function.Supplier;\n@@ -34,56 +35,56 @@ public class Neo4jTransactionalContextFactory implements TransactionalContextFac\n {\n     private final Neo4jTransactionalContext.Creator contextCreator;\n \n-    public static TransactionalContextFactory create( Supplier<GraphDatabaseQueryService> queryServiceSupplier,\n-            KernelTransactionFactory transactionFactory )\n+    public static TransactionalContextFactory create(Supplier<GraphDatabaseQueryService> queryServiceSupplier,\n+                                                     KernelTransactionFactory transactionFactory)\n     {\n-        Supplier<GraphDatabaseQueryService> queryService = lazySingleton( queryServiceSupplier );\n+        Supplier<GraphDatabaseQueryService> queryService = lazySingleton(queryServiceSupplier);\n         Neo4jTransactionalContext.Creator contextCreator =\n-                ( tx, initialStatement, executingQuery ) -> new Neo4jTransactionalContext(\n-                        queryService.get(),\n-                        tx,\n-                        initialStatement,\n-                        executingQuery,\n-                        transactionFactory );\n-        return new Neo4jTransactionalContextFactory( contextCreator );\n+          (tx, initialStatement, executingQuery) -> new Neo4jTransactionalContext(\n+            queryService.get(),\n+            tx,\n+            initialStatement,\n+            executingQuery,\n+            transactionFactory);\n+        return new Neo4jTransactionalContextFactory(contextCreator);\n     }\n \n     @Deprecated\n-    public static TransactionalContextFactory create( GraphDatabaseQueryService queryService )\n+    public static TransactionalContextFactory create(GraphDatabaseQueryService queryService)\n     {\n         var resolver = queryService.getDependencyResolver();\n-        var transactionFactory = resolver.resolveDependency( KernelTransactionFactory.class );\n+        var transactionFactory = resolver.resolveDependency(KernelTransactionFactory.class);\n         Neo4jTransactionalContext.Creator contextCreator =\n-                ( tx, initialStatement, executingQuery ) ->\n-                        new Neo4jTransactionalContext(\n-                                queryService,\n-                                tx,\n-                                initialStatement,\n-                                executingQuery,\n-                                transactionFactory\n-                        );\n-        return new Neo4jTransactionalContextFactory( contextCreator );\n+          (tx, initialStatement, executingQuery) ->\n+            new Neo4jTransactionalContext(\n+              queryService,\n+              tx,\n+              initialStatement,\n+              executingQuery,\n+              transactionFactory\n+            );\n+        return new Neo4jTransactionalContextFactory(contextCreator);\n     }\n \n     // Please use the factory methods above to actually construct an instance\n-    private Neo4jTransactionalContextFactory( Neo4jTransactionalContext.Creator contextCreator )\n+    private Neo4jTransactionalContextFactory(Neo4jTransactionalContext.Creator contextCreator)\n     {\n         this.contextCreator = contextCreator;\n     }\n \n     @Override\n-    public final Neo4jTransactionalContext newContext( InternalTransaction tx, String queryText, MapValue queryParameters )\n+    public final Neo4jTransactionalContext newContext(InternalTransaction tx, String queryText, MapValue queryParameters)\n     {\n         KernelStatement initialStatement = (KernelStatement) tx.kernelTransaction().acquireStatement();\n-        var executingQuery = initialStatement.queryRegistration().startQueryExecution( queryText, queryParameters );\n-        return contextCreator.create( tx, initialStatement, executingQuery );\n+        var executingQuery = initialStatement.queryRegistration().startQueryExecution(queryText, queryParameters);\n+        return contextCreator.create(tx, initialStatement, executingQuery);\n     }\n \n     @Override\n-    public TransactionalContext newContextForQuery( InternalTransaction tx, ExecutingQuery executingQuery )\n+    public TransactionalContext newContextForQuery(InternalTransaction tx, ExecutingQuery executingQuery)\n     {\n         KernelStatement initialStatement = (KernelStatement) tx.kernelTransaction().acquireStatement();\n-        initialStatement.queryRegistration().startQueryExecution( executingQuery );\n-        return contextCreator.create( tx, initialStatement, executingQuery );\n+        initialStatement.queryRegistration().startQueryExecution(executingQuery);\n+        return contextCreator.create(tx, initialStatement, executingQuery);\n     }\n }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1950/Neo4jTransactionalContextFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1950/Neo4jTransactionalContextFactory.java\nindex cbf24fa6a41..0dbd916ae2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1950/Neo4jTransactionalContextFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1950/Neo4jTransactionalContextFactory.java\n@@ -86,4 +86,4 @@ public class Neo4jTransactionalContextFactory implements TransactionalContextFac\n         initialStatement.queryRegistration().startQueryExecution( executingQuery );\n         return contextCreator.create( tx, initialStatement, executingQuery );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}