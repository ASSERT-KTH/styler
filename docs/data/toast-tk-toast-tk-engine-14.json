{
    "project_name": "toast-tk-toast-tk-engine",
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "14",
                "severity": "info",
                "message": "La ligne correspond au motif ill\u00e9gal 'more than one blank line'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "import com.synaptix.toast.core.runtime.ISwingElement;\nimport com.synaptix.toast.dao.domain.api.test.ITestResult;\nimport com.synaptix.toast.dao.domain.api.test.ITestResult.ResultKind;\n\n\npublic class SwingTableElement extends SwingAutoElement implements HasClickAction {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/styler/14/SwingTableElement.java\nindex a333b26b85b..a1706dded81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/styler/14/SwingTableElement.java\n@@ -13,7 +13,6 @@ import com.synaptix.toast.core.runtime.ISwingElement;\n import com.synaptix.toast.dao.domain.api.test.ITestResult;\n import com.synaptix.toast.dao.domain.api.test.ITestResult.ResultKind;\n \n-\n public class SwingTableElement extends SwingAutoElement implements HasClickAction {\n \n \tpublic SwingTableElement(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "14",
                    "severity": "info",
                    "message": "La ligne correspond au motif ill\u00e9gal 'more than one blank line'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/intellij/14/SwingTableElement.java\nindex a333b26b85b..7309e2f9661 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/intellij/14/SwingTableElement.java\n@@ -16,96 +16,96 @@ import com.synaptix.toast.dao.domain.api.test.ITestResult.ResultKind;\n \n public class SwingTableElement extends SwingAutoElement implements HasClickAction {\n \n-\tpublic SwingTableElement(\n-\t\tISwingElement element,\n-\t\tIRemoteSwingAgentDriver driver) {\n-\t\tsuper(element, driver);\n-\t}\n+    public SwingTableElement(\n+        ISwingElement element,\n+        IRemoteSwingAgentDriver driver) {\n+        super(element, driver);\n+    }\n \n-\tpublic SwingTableElement(\n-\t\tISwingElement element) {\n-\t\tsuper(element);\n-\t}\n+    public SwingTableElement(\n+        ISwingElement element) {\n+        super(element);\n+    }\n \n-\tpublic ITestResult find(\n-\t\tList<TableCommandRequestQueryCriteria> criteria)\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.find(criteria)\n-\t\t\t.with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n+    public ITestResult find(\n+        List<TableCommandRequestQueryCriteria> criteria)\n+        throws Exception {\n+        exists();\n+        final String requestId = UUID.randomUUID().toString();\n+        CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n+            .find(criteria)\n+            .with(wrappedElement.getLocator())\n+            .ofType(wrappedElement.getType().name()).build();\n+        return frontEndDriver.processAndWaitForValue(request);\n+    }\n \n-\tpublic ITestResult find(\n-\t\tString lookUpColumn,\n-\t\tString lookUpValue,\n-\t\tString outputColumn)\n-\t\tthrows Exception {\n-\t\toutputColumn = outputColumn == null ? lookUpColumn : outputColumn;\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.find(lookUpColumn, lookUpValue, outputColumn)\n-\t\t\t.with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\tfrontEndDriver.process(request);\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n+    public ITestResult find(\n+        String lookUpColumn,\n+        String lookUpValue,\n+        String outputColumn)\n+        throws Exception {\n+        outputColumn = outputColumn == null ? lookUpColumn : outputColumn;\n+        exists();\n+        final String requestId = UUID.randomUUID().toString();\n+        CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n+            .find(lookUpColumn, lookUpValue, outputColumn)\n+            .with(wrappedElement.getLocator())\n+            .ofType(wrappedElement.getType().name()).build();\n+        frontEndDriver.process(request);\n+        return frontEndDriver.processAndWaitForValue(request);\n+    }\n \n-\tpublic ITestResult count()\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.count().with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\tfrontEndDriver.process(request);\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n+    public ITestResult count()\n+        throws Exception {\n+        exists();\n+        final String requestId = UUID.randomUUID().toString();\n+        CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n+            .count().with(wrappedElement.getLocator())\n+            .ofType(wrappedElement.getType().name()).build();\n+        frontEndDriver.process(request);\n+        return frontEndDriver.processAndWaitForValue(request);\n+    }\n \n-\t@Override\n-\tpublic ITestResult click()\n-\t\tthrows Exception {\n-\t\tboolean res = exists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tITestResult result = frontEndDriver.processAndWaitForValue(new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name())\n-\t\t\t.click().build());\n-\t\tresult.setResultKind(res && result.getMessage().equals(ResultKind.SUCCESS.name()) ? ResultKind.SUCCESS : ResultKind.ERROR);\n-\t\treturn result;\n-\t}\n+    @Override\n+    public ITestResult click()\n+        throws Exception {\n+        boolean res = exists();\n+        final String requestId = UUID.randomUUID().toString();\n+        ITestResult result = frontEndDriver.processAndWaitForValue(new TableCommandRequest.TableCommandRequestBuilder(requestId)\n+            .with(wrappedElement.getLocator())\n+            .ofType(wrappedElement.getType().name())\n+            .click().build());\n+        result.setResultKind(res && result.getMessage().equals(ResultKind.SUCCESS.name()) ? ResultKind.SUCCESS : ResultKind.ERROR);\n+        return result;\n+    }\n \n-\t@Override\n-\tpublic void dbClick() {\n-\t\tthrow new IllegalAccessError(\"Method not implemented !\");\n-\t}\n+    @Override\n+    public void dbClick() {\n+        throw new IllegalAccessError(\"Method not implemented !\");\n+    }\n \n-\tpublic String doubleClick(\n-\t\tString column,\n-\t\tString value)\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tfrontEndDriver.process(new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.doubleClick(column, value).with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build());\n-\t\treturn null;\n-\t}\n+    public String doubleClick(\n+        String column,\n+        String value)\n+        throws Exception {\n+        exists();\n+        final String requestId = UUID.randomUUID().toString();\n+        frontEndDriver.process(new TableCommandRequest.TableCommandRequestBuilder(requestId)\n+            .doubleClick(column, value).with(wrappedElement.getLocator())\n+            .ofType(wrappedElement.getType().name()).build());\n+        return null;\n+    }\n \n-\tpublic ITestResult selectMenu(\n-\t\tString menu,\n-\t\tString column,\n-\t\tString value)\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.selectMenu(menu, column, value).with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n+    public ITestResult selectMenu(\n+        String menu,\n+        String column,\n+        String value)\n+        throws Exception {\n+        exists();\n+        final String requestId = UUID.randomUUID().toString();\n+        CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n+            .selectMenu(menu, column, value).with(wrappedElement.getLocator())\n+            .ofType(wrappedElement.getType().name()).build();\n+        return frontEndDriver.processAndWaitForValue(request);\n+    }\n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/naturalize/14/SwingTableElement.java\nindex a333b26b85b..6ff0816c9bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/naturalize/14/SwingTableElement.java\n@@ -13,7 +13,6 @@ import com.synaptix.toast.core.runtime.ISwingElement;\n import com.synaptix.toast.dao.domain.api.test.ITestResult;\n import com.synaptix.toast.dao.domain.api.test.ITestResult.ResultKind;\n \n-\n public class SwingTableElement extends SwingAutoElement implements HasClickAction {\n \n \tpublic SwingTableElement(\n@@ -108,4 +107,4 @@ public class SwingTableElement extends SwingAutoElement implements HasClickActio\n \t\t\t.ofType(wrappedElement.getType().name()).build();\n \t\treturn frontEndDriver.processAndWaitForValue(request);\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/codebuff/14/SwingTableElement.java\nindex a333b26b85b..eac12ec9198 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/codebuff/14/SwingTableElement.java\n@@ -2,7 +2,6 @@ package com.synaptix.toast.adapter.swing.component;\n \n import java.util.List;\n import java.util.UUID;\n-\n import com.synaptix.toast.adapter.swing.SwingAutoElement;\n import com.synaptix.toast.adapter.web.HasClickAction;\n import com.synaptix.toast.core.driver.IRemoteSwingAgentDriver;\n@@ -13,99 +12,81 @@ import com.synaptix.toast.core.runtime.ISwingElement;\n import com.synaptix.toast.dao.domain.api.test.ITestResult;\n import com.synaptix.toast.dao.domain.api.test.ITestResult.ResultKind;\n \n-\n public class SwingTableElement extends SwingAutoElement implements HasClickAction {\n \n-\tpublic SwingTableElement(\n-\t\tISwingElement element,\n-\t\tIRemoteSwingAgentDriver driver) {\n-\t\tsuper(element, driver);\n-\t}\n+ public SwingTableElement(\n+  ISwingElement element,\n+  IRemoteSwingAgentDriver driver) {\n+  super(element, driver);\n+ }\n \n-\tpublic SwingTableElement(\n-\t\tISwingElement element) {\n-\t\tsuper(element);\n-\t}\n+ public SwingTableElement(\n+  ISwingElement element) {\n+  super(element);\n+ }\n \n-\tpublic ITestResult find(\n-\t\tList<TableCommandRequestQueryCriteria> criteria)\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.find(criteria)\n-\t\t\t.with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n+ public ITestResult find(\n+  List<TableCommandRequestQueryCriteria> criteria)\n+  throws Exception {\n+  exists();\n+  final String requestId = UUID.randomUUID().toString();\n+  CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId).find(criteria).with(wrappedElement.getLocator()).ofType(wrappedElement.getType().name()).build();\n+  return frontEndDriver.processAndWaitForValue(request);\n+ }\n \n-\tpublic ITestResult find(\n-\t\tString lookUpColumn,\n-\t\tString lookUpValue,\n-\t\tString outputColumn)\n-\t\tthrows Exception {\n-\t\toutputColumn = outputColumn == null ? lookUpColumn : outputColumn;\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.find(lookUpColumn, lookUpValue, outputColumn)\n-\t\t\t.with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\tfrontEndDriver.process(request);\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n+ public ITestResult find(\n+  String lookUpColumn,\n+  String lookUpValue,\n+  String outputColumn)\n+  throws Exception {\n+  outputColumn = outputColumn == null ? lookUpColumn : outputColumn;\n+  exists();\n+  final String requestId = UUID.randomUUID().toString();\n+  CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId).find(lookUpColumn, lookUpValue, outputColumn).with(wrappedElement.getLocator()).ofType(wrappedElement.getType().name()).build();\n+  frontEndDriver.process(request);\n+  return frontEndDriver.processAndWaitForValue(request);\n+ }\n \n-\tpublic ITestResult count()\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.count().with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\tfrontEndDriver.process(request);\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n+ public ITestResult count()\n+ throws Exception {\n+ exists();\n+ final String requestId = UUID.randomUUID().toString();\n+ CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId).count().with(wrappedElement.getLocator()).ofType(wrappedElement.getType().name()).build();\n+ frontEndDriver.process(request);\n+ return frontEndDriver.processAndWaitForValue(request);\n+ }\n \n-\t@Override\n-\tpublic ITestResult click()\n-\t\tthrows Exception {\n-\t\tboolean res = exists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tITestResult result = frontEndDriver.processAndWaitForValue(new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name())\n-\t\t\t.click().build());\n-\t\tresult.setResultKind(res && result.getMessage().equals(ResultKind.SUCCESS.name()) ? ResultKind.SUCCESS : ResultKind.ERROR);\n-\t\treturn result;\n-\t}\n+ @Override\n+ public ITestResult click()\n+ throws Exception {\n+ boolean res = exists();\n+ final String requestId = UUID.randomUUID().toString();\n+ ITestResult result = frontEndDriver.processAndWaitForValue(new TableCommandRequest.TableCommandRequestBuilder(requestId).with(wrappedElement.getLocator()).ofType(wrappedElement.getType().name()).click().build());\n+ result.setResultKind(res && result.getMessage().equals(ResultKind.SUCCESS.name()) ? ResultKind.SUCCESS : ResultKind.ERROR);\n+ return result;\n+ }\n \n-\t@Override\n-\tpublic void dbClick() {\n-\t\tthrow new IllegalAccessError(\"Method not implemented !\");\n-\t}\n+ @Override\n+ public void dbClick() {\n+ throw new IllegalAccessError(\"Method not implemented !\");\n+ }\n \n-\tpublic String doubleClick(\n-\t\tString column,\n-\t\tString value)\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tfrontEndDriver.process(new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.doubleClick(column, value).with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build());\n-\t\treturn null;\n-\t}\n+ public String doubleClick(\n+  String column,\n+  String value)\n+  throws Exception {\n+  exists();\n+  final String requestId = UUID.randomUUID().toString();\n+  frontEndDriver.process(new TableCommandRequest.TableCommandRequestBuilder(requestId).doubleClick(column, value).with(wrappedElement.getLocator()).ofType(wrappedElement.getType().name()).build());\n+  return null;\n+ }\n \n-\tpublic ITestResult selectMenu(\n-\t\tString menu,\n-\t\tString column,\n-\t\tString value)\n-\t\tthrows Exception {\n-\t\texists();\n-\t\tfinal String requestId = UUID.randomUUID().toString();\n-\t\tCommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId)\n-\t\t\t.selectMenu(menu, column, value).with(wrappedElement.getLocator())\n-\t\t\t.ofType(wrappedElement.getType().name()).build();\n-\t\treturn frontEndDriver.processAndWaitForValue(request);\n-\t}\n-}\n+ public ITestResult selectMenu(String menu, String column,\n+                               String value)\n+                               throws Exception {\n+                               exists();\n+                               final String requestId = UUID.randomUUID().toString();\n+                               CommandRequest request = new TableCommandRequest.TableCommandRequestBuilder(requestId).selectMenu(menu, column, value).with(wrappedElement.getLocator()).ofType(wrappedElement.getType().name()).build();\n+                               return frontEndDriver.processAndWaitForValue(request);\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 87
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/styler_random/14/SwingTableElement.java\nindex a333b26b85b..a1706dded81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/errored/1/14/SwingTableElement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/toast-tk-toast-tk-engine/styler_random/14/SwingTableElement.java\n@@ -13,7 +13,6 @@ import com.synaptix.toast.core.runtime.ISwingElement;\n import com.synaptix.toast.dao.domain.api.test.ITestResult;\n import com.synaptix.toast.dao.domain.api.test.ITestResult.ResultKind;\n \n-\n public class SwingTableElement extends SwingAutoElement implements HasClickAction {\n \n \tpublic SwingTableElement(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "styler_three_grams"
    ]
}