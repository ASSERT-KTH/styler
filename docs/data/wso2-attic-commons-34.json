{
    "project_name": "wso2-attic-commons",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    static Logger                    logger   = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\n    ResourceBundle                   resource = ResourceBundle\n                                                      .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\n\n    private ManagedConnectionFactory mcf;\n    private ConnectionManager        cm;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/34/JavaMailConnectionFactoryImpl.java\nindex 15864b2c349..ad1509d2e03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/34/JavaMailConnectionFactoryImpl.java\n@@ -57,9 +57,9 @@ public class JavaMailConnectionFactoryImpl implements\n         JavaMailConnectionFactory, Serializable, Referenceable {\r\n     static Logger                    logger   = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\r\n     ResourceBundle                   resource = ResourceBundle\r\n-                                                      .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n+            .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n \r\n-    private ManagedConnectionFactory mcf;\r\n+private ManagedConnectionFactory mcf;\r\n     private ConnectionManager        cm;\r\n \r\n     // Local variables\r\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/34/JavaMailConnectionFactoryImpl.java\nindex 15864b2c349..7579317083d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/34/JavaMailConnectionFactoryImpl.java\n@@ -1,8 +1,8 @@\n /*\r\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\r\n- * \r\n+ *\r\n  * Copyright (c) 1997-2013 Oracle and/or its affiliates. All rights reserved.\r\n- * \r\n+ *\r\n  * The contents of this file are subject to the terms of either the GNU General\r\n  * Public License Version 2 only (\"GPL\") or the Common Development and\r\n  * Distribution License(\"CDDL\") (collectively, the \"License\"). You may not use\r\n@@ -10,18 +10,18 @@\n  * License at https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html or\r\n  * packager/legal/LICENSE.txt. See the License for the specific language\r\n  * governing permissions and limitations under the License.\r\n- * \r\n+ *\r\n  * When distributing the software, include this License Header Notice in each\r\n  * file and include the License file at packager/legal/LICENSE.txt.\r\n- * \r\n+ *\r\n  * GPL Classpath Exception: Oracle designates this particular file as subject to\r\n  * the \"Classpath\" exception as provided by Oracle in the GPL Version 2 section\r\n  * of the License file that accompanied this code.\r\n- * \r\n+ *\r\n  * Modifications: If applicable, add the following below the License Header,\r\n  * with the fields enclosed by brackets [] replaced by your own identifying\r\n  * information: \"Portions Copyright [year] [name of copyright owner]\"\r\n- * \r\n+ *\r\n  * Contributor(s): If you wish your version of this file to be governed by only\r\n  * the CDDL or only the GPL Version 2, indicate your decision by adding\r\n  * \"[Contributor] elects to include this software in this distribution under the\r\n@@ -54,172 +54,166 @@ import samples.connectors.mailconnector.share.*;\n  */\r\n \r\n public class JavaMailConnectionFactoryImpl implements\r\n-        JavaMailConnectionFactory, Serializable, Referenceable {\r\n-    static Logger                    logger   = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\r\n-    ResourceBundle                   resource = ResourceBundle\r\n-                                                      .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n-\r\n-    private ManagedConnectionFactory mcf;\r\n-    private ConnectionManager        cm;\r\n-\r\n-    // Local variables\r\n-\r\n-    private Reference                reference;\r\n-    private transient PrintWriter    out;\r\n-    private transient int            milliseconds;\r\n-\r\n-    /**\r\n-     * JavaMailConnectionFactoryImpl constructor (no arguments).\r\n-     */\r\n-\r\n-    public JavaMailConnectionFactoryImpl() {\r\n-    }\r\n-\r\n-    /**\r\n-     * JavaMailConnectionFactoryImpl constructor.\r\n-     * \r\n-     * @param mcf\r\n-     *            the ManagedConnectionFactory that created this\r\n-     *            JavaMailConnectionFactory instance\r\n-     * @param cm\r\n-     *            the ConnectionManager\r\n-     */\r\n-\r\n-    public JavaMailConnectionFactoryImpl(ManagedConnectionFactory mcf,\r\n-            ConnectionManager cm) {\r\n-        logger.fine(\" 3. JavaMailConnectionFactoryImpl::Constructor\");\r\n-        this.mcf = mcf;\r\n-        if (cm == null) {\r\n-            this.cm = new ConnectionManagerImpl();\r\n-        } else {\r\n-            this.cm = cm;\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets a connection to the Mail Server. Passes along mail server and user\r\n-     * info.\r\n-     * \r\n-     * @return Connection Connection instance\r\n-     */\r\n-\r\n-    public JavaMailConnection createConnection() throws ResourceException {\r\n-        JavaMailConnection con = null;\r\n-\r\n-        logger.fine(\" 3.- JMCFI::createConnection -- Client requested a connection. Get it from Connection Manager\");\r\n-\r\n-        // Use the default values of the Managed connection factory\r\n-\r\n-        con = (JavaMailConnection) cm.allocateConnection(mcf, null);\r\n-\r\n-        logger.fine(\" 6.- JMCFI::createConnection -- Returning Connection to Client\");\r\n-\r\n-        return con;\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets a connection to a Mail Server instance. A component should use the\r\n-     * getConnection variant with a javax.resource.cci.ConnectionSpec parameter\r\n-     * if it needs to pass any resource-adapter-specific security information\r\n-     * and connection parameters.\r\n-     * \r\n-     * @param properties\r\n-     *            connection parameters and security information specified as\r\n-     *            ConnectionSpec instance\r\n-     * @return a JavaMailConnection instance\r\n-     */\r\n-\r\n-    public JavaMailConnection createConnection(ConnectionSpec properties)\r\n-            throws ResourceException {\r\n-        JavaMailConnection con = null;\r\n-\r\n-        logger.fine(\" 3.- JMCFI::createConnection -- Client requested a connection. Get it from Connection Manager\");\r\n-\r\n-        ConnectionRequestInfoImpl info = new ConnectionRequestInfoImpl(\r\n-                ((ConnectionSpecImpl) properties).getUserName(),\r\n-                ((ConnectionSpecImpl) properties).getPassword(),\r\n-                ((ConnectionSpecImpl) properties).getFolderName(),\r\n-                ((ConnectionSpecImpl) properties).getServerName(),\r\n-                ((ConnectionSpecImpl) properties).getProtocol());\r\n-\r\n-        con = (JavaMailConnection) cm.allocateConnection(mcf, info);\r\n-\r\n-        logger.fine(\" 6.- JMCFI::createConnection -- Returning Connection to user\");\r\n-\r\n-        return con;\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the log writer for the ConnectionFactory instance. The log writer is\r\n-     * a character output stream to which all logging and tracing messages for\r\n-     * the Connectionfactory instance will be printed.\r\n-     * \r\n-     * @param out\r\n-     *            log writer associated with the ConnectionFactory\r\n-     */\r\n-\r\n-    public void setLogWriter(PrintWriter out) throws ResourceException {\r\n-        this.out = out;\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the log writer for the ConnectionFactory instance.\r\n-     * \r\n-     * @return PrintWriter log writer associated with the ConnectionFactory\r\n-     */\r\n-\r\n-    public PrintWriter getLogWriter() throws ResourceException {\r\n-        return out;\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the maximum time in milliseconds that this connection factory will\r\n-     * wait while attempting to connect to a Mail Server. A value of zero\r\n-     * specifies that the timeout is the default system timeout if there is one;\r\n-     * otherwise it specifies that there is no timeout. When a ConnectionFactory\r\n-     * object is created, the timeout is initially zero.\r\n-     * \r\n-     * @param milliseconds\r\n-     *            connection establishment timeout in milliseconds\r\n-     */\r\n-\r\n-    public void setTimeout(int milliseconds) throws ResourceException {\r\n-        this.milliseconds = milliseconds;\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the maximum time in milliseconds that this connection factory can\r\n-     * wait while attempting to connect to a Mail Server.\r\n-     * \r\n-     * @return connection establishment timeout in milliseconds\r\n-     */\r\n-\r\n-    public int getTimeout() throws ResourceException {\r\n-        return milliseconds;\r\n-    }\r\n-\r\n-    /**\r\n-     * This method is declared in the javax.resource.Referenceable interface and\r\n-     * should be implemented in order to support JNDI registration.\r\n-     * \r\n-     * @param reference\r\n-     *            a Reference instance\r\n-     */\r\n-\r\n-    public void setReference(Reference reference) {\r\n-        logger.fine(\"In JavaMailConnectionFactoryImpl::setReference\");\r\n-        this.reference = reference;\r\n-    }\r\n-\r\n-    /**\r\n-     * This method is declared in the javax.naming.Referenceable interface and\r\n-     * should be implemented in order to support JNDI registration.\r\n-     * \r\n-     * @return a Reference instance\r\n-     */\r\n-\r\n-    public Reference getReference() {\r\n-        logger.fine(\"In JavaMailConnectionFactoryImpl::getReference\");\r\n-        return reference;\r\n+  JavaMailConnectionFactory, Serializable, Referenceable {\r\n+  static Logger logger = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\r\n+  ResourceBundle resource = ResourceBundle\r\n+    .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n+\r\n+  private ManagedConnectionFactory mcf;\r\n+  private ConnectionManager cm;\r\n+\r\n+  // Local variables\r\n+\r\n+  private Reference reference;\r\n+  private transient PrintWriter out;\r\n+  private transient int milliseconds;\r\n+\r\n+  /**\r\n+   * JavaMailConnectionFactoryImpl constructor (no arguments).\r\n+   */\r\n+\r\n+  public JavaMailConnectionFactoryImpl() {\r\n+  }\r\n+\r\n+  /**\r\n+   * JavaMailConnectionFactoryImpl constructor.\r\n+   *\r\n+   * @param mcf the ManagedConnectionFactory that created this\r\n+   *            JavaMailConnectionFactory instance\r\n+   * @param cm  the ConnectionManager\r\n+   */\r\n+\r\n+  public JavaMailConnectionFactoryImpl(ManagedConnectionFactory mcf,\r\n+                                       ConnectionManager cm) {\r\n+    logger.fine(\" 3. JavaMailConnectionFactoryImpl::Constructor\");\r\n+    this.mcf = mcf;\r\n+    if (cm == null) {\r\n+      this.cm = new ConnectionManagerImpl();\r\n+    } else {\r\n+      this.cm = cm;\r\n     }\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets a connection to the Mail Server. Passes along mail server and user\r\n+   * info.\r\n+   *\r\n+   * @return Connection Connection instance\r\n+   */\r\n+\r\n+  public JavaMailConnection createConnection() throws ResourceException {\r\n+    JavaMailConnection con = null;\r\n+\r\n+    logger.fine(\" 3.- JMCFI::createConnection -- Client requested a connection. Get it from Connection Manager\");\r\n+\r\n+    // Use the default values of the Managed connection factory\r\n+\r\n+    con = (JavaMailConnection) cm.allocateConnection(mcf, null);\r\n+\r\n+    logger.fine(\" 6.- JMCFI::createConnection -- Returning Connection to Client\");\r\n+\r\n+    return con;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets a connection to a Mail Server instance. A component should use the\r\n+   * getConnection variant with a javax.resource.cci.ConnectionSpec parameter\r\n+   * if it needs to pass any resource-adapter-specific security information\r\n+   * and connection parameters.\r\n+   *\r\n+   * @param properties connection parameters and security information specified as\r\n+   *                   ConnectionSpec instance\r\n+   * @return a JavaMailConnection instance\r\n+   */\r\n+\r\n+  public JavaMailConnection createConnection(ConnectionSpec properties)\r\n+    throws ResourceException {\r\n+    JavaMailConnection con = null;\r\n+\r\n+    logger.fine(\" 3.- JMCFI::createConnection -- Client requested a connection. Get it from Connection Manager\");\r\n+\r\n+    ConnectionRequestInfoImpl info = new ConnectionRequestInfoImpl(\r\n+      ((ConnectionSpecImpl) properties).getUserName(),\r\n+      ((ConnectionSpecImpl) properties).getPassword(),\r\n+      ((ConnectionSpecImpl) properties).getFolderName(),\r\n+      ((ConnectionSpecImpl) properties).getServerName(),\r\n+      ((ConnectionSpecImpl) properties).getProtocol());\r\n+\r\n+    con = (JavaMailConnection) cm.allocateConnection(mcf, info);\r\n+\r\n+    logger.fine(\" 6.- JMCFI::createConnection -- Returning Connection to user\");\r\n+\r\n+    return con;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the log writer for the ConnectionFactory instance. The log writer is\r\n+   * a character output stream to which all logging and tracing messages for\r\n+   * the Connectionfactory instance will be printed.\r\n+   *\r\n+   * @param out log writer associated with the ConnectionFactory\r\n+   */\r\n+\r\n+  public void setLogWriter(PrintWriter out) throws ResourceException {\r\n+    this.out = out;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the log writer for the ConnectionFactory instance.\r\n+   *\r\n+   * @return PrintWriter log writer associated with the ConnectionFactory\r\n+   */\r\n+\r\n+  public PrintWriter getLogWriter() throws ResourceException {\r\n+    return out;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the maximum time in milliseconds that this connection factory will\r\n+   * wait while attempting to connect to a Mail Server. A value of zero\r\n+   * specifies that the timeout is the default system timeout if there is one;\r\n+   * otherwise it specifies that there is no timeout. When a ConnectionFactory\r\n+   * object is created, the timeout is initially zero.\r\n+   *\r\n+   * @param milliseconds connection establishment timeout in milliseconds\r\n+   */\r\n+\r\n+  public void setTimeout(int milliseconds) throws ResourceException {\r\n+    this.milliseconds = milliseconds;\r\n+  }\r\n+\r\n+  /**\r\n+   * Gets the maximum time in milliseconds that this connection factory can\r\n+   * wait while attempting to connect to a Mail Server.\r\n+   *\r\n+   * @return connection establishment timeout in milliseconds\r\n+   */\r\n+\r\n+  public int getTimeout() throws ResourceException {\r\n+    return milliseconds;\r\n+  }\r\n+\r\n+  /**\r\n+   * This method is declared in the javax.resource.Referenceable interface and\r\n+   * should be implemented in order to support JNDI registration.\r\n+   *\r\n+   * @param reference a Reference instance\r\n+   */\r\n+\r\n+  public void setReference(Reference reference) {\r\n+    logger.fine(\"In JavaMailConnectionFactoryImpl::setReference\");\r\n+    this.reference = reference;\r\n+  }\r\n+\r\n+  /**\r\n+   * This method is declared in the javax.naming.Referenceable interface and\r\n+   * should be implemented in order to support JNDI registration.\r\n+   *\r\n+   * @return a Reference instance\r\n+   */\r\n+\r\n+  public Reference getReference() {\r\n+    logger.fine(\"In JavaMailConnectionFactoryImpl::getReference\");\r\n+    return reference;\r\n+  }\r\n }\r\n",
            "diff_size": 297
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/34/JavaMailConnectionFactoryImpl.java\nindex 15864b2c349..230a53c5a7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/34/JavaMailConnectionFactoryImpl.java\n@@ -54,19 +54,17 @@ import samples.connectors.mailconnector.share.*;\n  */\r\n \r\n public class JavaMailConnectionFactoryImpl implements\r\n-        JavaMailConnectionFactory, Serializable, Referenceable {\r\n-    static Logger                    logger   = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\r\n-    ResourceBundle                   resource = ResourceBundle\r\n-                                                      .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n-\r\n-    private ManagedConnectionFactory mcf;\r\n-    private ConnectionManager        cm;\r\n+        JavaMailConnectionFactory, Serializable, Referenceable {\n+    static Logger logger = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\r\n+    ResourceBundle resource = ResourceBundle.getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\n+private ManagedConnectionFactory mcf;\r\n+    private ConnectionManager cm;\r\n \r\n     // Local variables\r\n \r\n-    private Reference                reference;\r\n-    private transient PrintWriter    out;\r\n-    private transient int            milliseconds;\r\n+    private Reference reference;\r\n+    private transient PrintWriter out;\r\n+    private transient int milliseconds;\r\n \r\n     /**\r\n      * JavaMailConnectionFactoryImpl constructor (no arguments).\r\n@@ -83,9 +81,8 @@ public class JavaMailConnectionFactoryImpl implements\n      *            JavaMailConnectionFactory instance\r\n      * @param cm\r\n      *            the ConnectionManager\r\n-     */\r\n-\r\n-    public JavaMailConnectionFactoryImpl(ManagedConnectionFactory mcf,\r\n+     */\n+public JavaMailConnectionFactoryImpl(ManagedConnectionFactory mcf,\r\n             ConnectionManager cm) {\r\n         logger.fine(\" 3. JavaMailConnectionFactoryImpl::Constructor\");\r\n         this.mcf = mcf;\r\n@@ -101,9 +98,8 @@ public class JavaMailConnectionFactoryImpl implements\n      * info.\r\n      * \r\n      * @return Connection Connection instance\r\n-     */\r\n-\r\n-    public JavaMailConnection createConnection() throws ResourceException {\r\n+     */\n+public JavaMailConnection createConnection() throws ResourceException {\r\n         JavaMailConnection con = null;\r\n \r\n         logger.fine(\" 3.- JMCFI::createConnection -- Client requested a connection. Get it from Connection Manager\");\r\n@@ -127,9 +123,8 @@ public class JavaMailConnectionFactoryImpl implements\n      *            connection parameters and security information specified as\r\n      *            ConnectionSpec instance\r\n      * @return a JavaMailConnection instance\r\n-     */\r\n-\r\n-    public JavaMailConnection createConnection(ConnectionSpec properties)\r\n+     */\n+public JavaMailConnection createConnection(ConnectionSpec properties)\r\n             throws ResourceException {\r\n         JavaMailConnection con = null;\r\n \r\n@@ -156,9 +151,8 @@ public class JavaMailConnectionFactoryImpl implements\n      * \r\n      * @param out\r\n      *            log writer associated with the ConnectionFactory\r\n-     */\r\n-\r\n-    public void setLogWriter(PrintWriter out) throws ResourceException {\r\n+     */\n+public void setLogWriter(PrintWriter out) throws ResourceException {\r\n         this.out = out;\r\n     }\r\n \r\n@@ -166,9 +160,8 @@ public class JavaMailConnectionFactoryImpl implements\n      * Gets the log writer for the ConnectionFactory instance.\r\n      * \r\n      * @return PrintWriter log writer associated with the ConnectionFactory\r\n-     */\r\n-\r\n-    public PrintWriter getLogWriter() throws ResourceException {\r\n+     */\n+public PrintWriter getLogWriter() throws ResourceException {\r\n         return out;\r\n     }\r\n \r\n@@ -181,9 +174,8 @@ public class JavaMailConnectionFactoryImpl implements\n      * \r\n      * @param milliseconds\r\n      *            connection establishment timeout in milliseconds\r\n-     */\r\n-\r\n-    public void setTimeout(int milliseconds) throws ResourceException {\r\n+     */\n+public void setTimeout(int milliseconds) throws ResourceException {\r\n         this.milliseconds = milliseconds;\r\n     }\r\n \r\n@@ -204,9 +196,8 @@ public class JavaMailConnectionFactoryImpl implements\n      * \r\n      * @param reference\r\n      *            a Reference instance\r\n-     */\r\n-\r\n-    public void setReference(Reference reference) {\r\n+     */\n+public void setReference(Reference reference) {\r\n         logger.fine(\"In JavaMailConnectionFactoryImpl::setReference\");\r\n         this.reference = reference;\r\n     }\r\n@@ -216,10 +207,9 @@ public class JavaMailConnectionFactoryImpl implements\n      * should be implemented in order to support JNDI registration.\r\n      * \r\n      * @return a Reference instance\r\n-     */\r\n-\r\n-    public Reference getReference() {\r\n+     */\n+public Reference getReference() {\r\n         logger.fine(\"In JavaMailConnectionFactoryImpl::getReference\");\r\n         return reference;\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/34/JavaMailConnectionFactoryImpl.java\nindex 15864b2c349..ad1509d2e03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/34/JavaMailConnectionFactoryImpl.java\n@@ -57,9 +57,9 @@ public class JavaMailConnectionFactoryImpl implements\n         JavaMailConnectionFactory, Serializable, Referenceable {\r\n     static Logger                    logger   = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\r\n     ResourceBundle                   resource = ResourceBundle\r\n-                                                      .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n+            .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n \r\n-    private ManagedConnectionFactory mcf;\r\n+private ManagedConnectionFactory mcf;\r\n     private ConnectionManager        cm;\r\n \r\n     // Local variables\r\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/34/JavaMailConnectionFactoryImpl.java\nindex 15864b2c349..7b50b090d80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/34/JavaMailConnectionFactoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/34/JavaMailConnectionFactoryImpl.java\n@@ -56,8 +56,7 @@ import samples.connectors.mailconnector.share.*;\n public class JavaMailConnectionFactoryImpl implements\r\n         JavaMailConnectionFactory, Serializable, Referenceable {\r\n     static Logger                    logger   = Logger.getLogger(\"samples.connectors.mailconnector.ra.outbound\");\r\n-    ResourceBundle                   resource = ResourceBundle\r\n-                                                      .getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n+    ResourceBundle                   resource = ResourceBundle.getBundle(\"samples.connectors.mailconnector.ra.outbound.ConnectionFactory\");\r\n \r\n     private ManagedConnectionFactory mcf;\r\n     private ConnectionManager        cm;\r\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}