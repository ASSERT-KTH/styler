{
    "project_name": "wso2-attic-commons",
    "error_id": "359",
    "information": {
        "errors": [
            {
                "line": "248",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 140).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * recovery actions.\n     */\n    void createActivityRecovery(String channel, long activityId, String reason, Date dateTime, Element data, String[] actions, int retries);\n\n    /**\n     * Delete previously registered activity recovery.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/359/ProcessInstanceDAO.java\nindex bcedd8585c7..246b5323619 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/359/ProcessInstanceDAO.java\n@@ -245,12 +245,13 @@ public interface ProcessInstanceDAO {\n      * Date/time failure occurred, and the recovery channel and available\n      * recovery actions.\n      */\n-    void createActivityRecovery(String channel, long activityId, String reason, Date dateTime, Element data, String[] actions, int retries);\n+    void createActivityRecovery(String channel, long activityId, String reason,\n+        Date dateTime, Element data, String[] actions, int retries);\n \n-    /**\n+     /**\n      * Delete previously registered activity recovery.\n      */\n-    void deleteActivityRecovery(String channel);\n+     void deleteActivityRecovery(String channel);\n \n     /**\n      * Transport object holding the date of the first and last instance event\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/359/ProcessInstanceDAO.java\nindex bcedd8585c7..26cd4424a3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/359/ProcessInstanceDAO.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.dao;\n \n import org.apache.ode.bpel.evt.ProcessInstanceEvent;\n@@ -37,236 +38,255 @@ import javax.xml.namespace.QName;\n  */\n public interface ProcessInstanceDAO {\n \n-    /**\n-     * Get the time when the process instance was created.\n-     * @return time of instance creation\n-     */\n-    public Date getCreateTime();\n-\n-    /**\n-     * Get the time when the process instance was last active (re-hydrated).\n-     * @return time of activity\n-     */\n-    public Date getLastActiveTime();\n-\n-    /**\n-     * Set last activity time for the process instance\n-     * @param dt tiem of activity\n-     */\n-    void setLastActiveTime(Date dt);\n-\n-    /**\n-     * The un-caught fault associated with the process. This will be\n-     * <code>null</code> if no fault occurred or if all faults are caught and\n-     * processed.\n-     * @param fault the fault\n-     */\n-    void setFault(FaultDAO fault);\n-\n-    void setFault(QName faultName, String explanation, int faultLineNo, int activityId, Element faultMessage);\n-\n-    /**\n-     * The un-caught fault associated with the process. This will be\n-     * <code>null</code> if no fault occurred or if all faults are caught and\n-     * processed.\n-     *\n-     * @return the fault\n-     */\n-    FaultDAO getFault();\n-\n-    /**\n-     * Get the (opaque) instance execution state.\n-     * @return opaque execution state\n-     */\n-    byte[] getExecutionState();\n-\n-    /**\n-     * Set the (opaque) instance execution state.\n-     * @param execState execuction state\n-     */\n-    void setExecutionState(byte[] execState);\n-\n-    /**\n-     * Get the process.\n-     *\n-     * @return process reference.\n-     */\n-    ProcessDAO getProcess();\n-\n-    /**\n-     * Get the root (global) scope for the process.\n-     *\n-     * @return the root scope\n-     */\n-    ScopeDAO getRootScope();\n-\n-    /**\n-     * Set the state of the process instance; one of the <code>STATE_XXX</code>\n-     * constants defined in ProcessState.\n-     *\n-     * This should automatically populate the previous state.\n-     *\n-     * @param state new state of the process instance\n-     */\n-    void setState(short state);\n-\n-    /**\n-     * Get the state of the process instance; one of the <code>STATE_XXX</code>\n-     * constants defined in ProcessState.\n-     *\n-     * @return state of process instance\n-     */\n-    short getState();\n-\n-    /**\n-     * Returns the next to last state.\n-     * @return\n-     */\n-    short getPreviousState();\n-\n-    /**\n-     * Creates a new scope.\n-     *\n-     * @param parentScope parent scope of the new scope, or null if this is the\n-     *        root scope.\n-     * @param name scope name\n-     *\n-     * @return the newly created scope\n-     */\n-    ScopeDAO createScope(ScopeDAO parentScope, String name, int scopeModelId);\n-\n-    /**\n-     * Get the instance identifier.\n-     * @return the instance identifier\n-     */\n-    Long getInstanceId();\n-\n-    /**\n-     * Returns a scope using its instance id.\n-     * @param scopeInstanceId\n-     * @return\n-     */\n-    ScopeDAO getScope(Long scopeInstanceId);\n-\n-    /**\n-     * Returns all the scopes with the associated name.\n-     * @param scopeName\n-     * @return\n-     */\n-    Collection<ScopeDAO> getScopes(String scopeName);\n-\n-    /**\n-     * Returns all the scopes belonging to this isntance.\n-     * @param scopeName\n-     * @return\n-     */\n-    Collection<ScopeDAO> getScopes();\n-\n-    /**\n-     * Return the correlator which results in the instantiation of the process instance.\n-     * @return\n-     */\n-    CorrelatorDAO getInstantiatingCorrelator();\n-\n-    /**\n-     * Returns all variable instances matching the variable name for a specified scope.\n-     */\n-    XmlDataDAO[] getVariables(String variableName, int scopeModelId);\n-\n-    /**\n-     * Get all the correlation sets for this process.\n-     * @return {@link Set} of {@link CorrelationSetDAO} objects\n-     */\n-    Set<CorrelationSetDAO> getCorrelationSets();\n-\n-    /**\n-     * Get a correlation set by its name from this process\n-     * @param name\n-     * @return a {@link CorrelationSetDAO} object\n-     */\n-    CorrelationSetDAO getCorrelationSet(String name);\n-\n-    /**\n-     * A simple callback to allow the ProcessInstance to perform post-completion duties.\n-     * The DAO's state indicates whether any fault has occured.\n-     */\n-    void finishCompletion();\n-\n-    /**\n-     * Delete the process instance object from the database.\n-     */\n-    void delete(Set<CLEANUP_CATEGORY> cleanupCategories);\n-\n-    /**\n-     * Delete the process instance object from the database.\n-     * @param cleanupCategories the categories of entities to delete\n-     * @param deleteMessageExchanges will clean up the message exchanges if set to true\n-     */\n-    void delete(Set<CLEANUP_CATEGORY> cleanupCategories, boolean deleteMessageExchanges);\n-\n-    /**\n-     * Insert a BPEL event to the database (associating with this process).\n-     * @param event BPEL event\n-     */\n-    void insertBpelEvent(ProcessInstanceEvent event);\n-\n-    /**\n-     * Get a triple containing the first\n-     * @return\n-     */\n-    EventsFirstLastCountTuple getEventsFirstLastCount();\n-\n-    /**\n-     * Get the next number from a monotonically increasing sequence.\n-     * @return next number in seqeunce\n-     */\n-    public long genMonotonic();\n-\n-    public BpelDAOConnection getConnection();\n-\n-    /**\n-     * Get number of activities in the failure state.\n-     */\n-    int getActivityFailureCount();\n-\n-    /**\n-     * Get date/time of last activity failure.\n-     */\n-    Date getActivityFailureDateTime();\n-\n-    /**\n-     * Returns all activity recovery objects for this process instance.\n-     */\n-    Collection<ActivityRecoveryDAO> getActivityRecoveries();\n-\n-    /**\n-     * Create an activity recovery object for a given activity instance.\n-     * Specify the reason and optional data associated with the failure.\n-     * Date/time failure occurred, and the recovery channel and available\n-     * recovery actions.\n-     */\n-    void createActivityRecovery(String channel, long activityId, String reason, Date dateTime, Element data, String[] actions, int retries);\n-\n-    /**\n-     * Delete previously registered activity recovery.\n-     */\n-    void deleteActivityRecovery(String channel);\n-\n-    /**\n-     * Transport object holding the date of the first and last instance event\n-     * along with the number events.\n-     */\n-    public class EventsFirstLastCountTuple {\n-        public Date first;\n-        public Date last;\n-        public int count;\n-    }\n-\n-    Collection<String> getMessageExchangeIds();\n-\n-    /**\n-     * In-cooperates a message exchange with an process instance if it's not already in-cooperated.\n-     * @param dao message exchange DAO reference\n-     */\n-    void addMessageExchange(MessageExchangeDAO dao);\n+  /**\n+   * Get the time when the process instance was created.\n+   *\n+   * @return time of instance creation\n+   */\n+  public Date getCreateTime();\n+\n+  /**\n+   * Get the time when the process instance was last active (re-hydrated).\n+   *\n+   * @return time of activity\n+   */\n+  public Date getLastActiveTime();\n+\n+  /**\n+   * Set last activity time for the process instance\n+   *\n+   * @param dt tiem of activity\n+   */\n+  void setLastActiveTime(Date dt);\n+\n+  /**\n+   * The un-caught fault associated with the process. This will be\n+   * <code>null</code> if no fault occurred or if all faults are caught and\n+   * processed.\n+   *\n+   * @param fault the fault\n+   */\n+  void setFault(FaultDAO fault);\n+\n+  void setFault(QName faultName, String explanation, int faultLineNo, int activityId, Element faultMessage);\n+\n+  /**\n+   * The un-caught fault associated with the process. This will be\n+   * <code>null</code> if no fault occurred or if all faults are caught and\n+   * processed.\n+   *\n+   * @return the fault\n+   */\n+  FaultDAO getFault();\n+\n+  /**\n+   * Get the (opaque) instance execution state.\n+   *\n+   * @return opaque execution state\n+   */\n+  byte[] getExecutionState();\n+\n+  /**\n+   * Set the (opaque) instance execution state.\n+   *\n+   * @param execState execuction state\n+   */\n+  void setExecutionState(byte[] execState);\n+\n+  /**\n+   * Get the process.\n+   *\n+   * @return process reference.\n+   */\n+  ProcessDAO getProcess();\n+\n+  /**\n+   * Get the root (global) scope for the process.\n+   *\n+   * @return the root scope\n+   */\n+  ScopeDAO getRootScope();\n+\n+  /**\n+   * Set the state of the process instance; one of the <code>STATE_XXX</code>\n+   * constants defined in ProcessState.\n+   * <p>\n+   * This should automatically populate the previous state.\n+   *\n+   * @param state new state of the process instance\n+   */\n+  void setState(short state);\n+\n+  /**\n+   * Get the state of the process instance; one of the <code>STATE_XXX</code>\n+   * constants defined in ProcessState.\n+   *\n+   * @return state of process instance\n+   */\n+  short getState();\n+\n+  /**\n+   * Returns the next to last state.\n+   *\n+   * @return\n+   */\n+  short getPreviousState();\n+\n+  /**\n+   * Creates a new scope.\n+   *\n+   * @param parentScope parent scope of the new scope, or null if this is the\n+   *                    root scope.\n+   * @param name        scope name\n+   * @return the newly created scope\n+   */\n+  ScopeDAO createScope(ScopeDAO parentScope, String name, int scopeModelId);\n+\n+  /**\n+   * Get the instance identifier.\n+   *\n+   * @return the instance identifier\n+   */\n+  Long getInstanceId();\n+\n+  /**\n+   * Returns a scope using its instance id.\n+   *\n+   * @param scopeInstanceId\n+   * @return\n+   */\n+  ScopeDAO getScope(Long scopeInstanceId);\n+\n+  /**\n+   * Returns all the scopes with the associated name.\n+   *\n+   * @param scopeName\n+   * @return\n+   */\n+  Collection<ScopeDAO> getScopes(String scopeName);\n+\n+  /**\n+   * Returns all the scopes belonging to this isntance.\n+   *\n+   * @param scopeName\n+   * @return\n+   */\n+  Collection<ScopeDAO> getScopes();\n+\n+  /**\n+   * Return the correlator which results in the instantiation of the process instance.\n+   *\n+   * @return\n+   */\n+  CorrelatorDAO getInstantiatingCorrelator();\n+\n+  /**\n+   * Returns all variable instances matching the variable name for a specified scope.\n+   */\n+  XmlDataDAO[] getVariables(String variableName, int scopeModelId);\n+\n+  /**\n+   * Get all the correlation sets for this process.\n+   *\n+   * @return {@link Set} of {@link CorrelationSetDAO} objects\n+   */\n+  Set<CorrelationSetDAO> getCorrelationSets();\n+\n+  /**\n+   * Get a correlation set by its name from this process\n+   *\n+   * @param name\n+   * @return a {@link CorrelationSetDAO} object\n+   */\n+  CorrelationSetDAO getCorrelationSet(String name);\n+\n+  /**\n+   * A simple callback to allow the ProcessInstance to perform post-completion duties.\n+   * The DAO's state indicates whether any fault has occured.\n+   */\n+  void finishCompletion();\n+\n+  /**\n+   * Delete the process instance object from the database.\n+   */\n+  void delete(Set<CLEANUP_CATEGORY> cleanupCategories);\n+\n+  /**\n+   * Delete the process instance object from the database.\n+   *\n+   * @param cleanupCategories      the categories of entities to delete\n+   * @param deleteMessageExchanges will clean up the message exchanges if set to true\n+   */\n+  void delete(Set<CLEANUP_CATEGORY> cleanupCategories, boolean deleteMessageExchanges);\n+\n+  /**\n+   * Insert a BPEL event to the database (associating with this process).\n+   *\n+   * @param event BPEL event\n+   */\n+  void insertBpelEvent(ProcessInstanceEvent event);\n+\n+  /**\n+   * Get a triple containing the first\n+   *\n+   * @return\n+   */\n+  EventsFirstLastCountTuple getEventsFirstLastCount();\n+\n+  /**\n+   * Get the next number from a monotonically increasing sequence.\n+   *\n+   * @return next number in seqeunce\n+   */\n+  public long genMonotonic();\n+\n+  public BpelDAOConnection getConnection();\n+\n+  /**\n+   * Get number of activities in the failure state.\n+   */\n+  int getActivityFailureCount();\n+\n+  /**\n+   * Get date/time of last activity failure.\n+   */\n+  Date getActivityFailureDateTime();\n+\n+  /**\n+   * Returns all activity recovery objects for this process instance.\n+   */\n+  Collection<ActivityRecoveryDAO> getActivityRecoveries();\n+\n+  /**\n+   * Create an activity recovery object for a given activity instance.\n+   * Specify the reason and optional data associated with the failure.\n+   * Date/time failure occurred, and the recovery channel and available\n+   * recovery actions.\n+   */\n+  void createActivityRecovery(String channel, long activityId, String reason, Date dateTime, Element data,\n+                              String[] actions, int retries);\n+\n+  /**\n+   * Delete previously registered activity recovery.\n+   */\n+  void deleteActivityRecovery(String channel);\n+\n+  /**\n+   * Transport object holding the date of the first and last instance event\n+   * along with the number events.\n+   */\n+  public class EventsFirstLastCountTuple {\n+    public Date first;\n+    public Date last;\n+    public int count;\n+  }\n+\n+  Collection<String> getMessageExchangeIds();\n+\n+  /**\n+   * In-cooperates a message exchange with an process instance if it's not already in-cooperated.\n+   *\n+   * @param dao message exchange DAO reference\n+   */\n+  void addMessageExchange(MessageExchangeDAO dao);\n }\n",
            "diff_size": 252
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/359/ProcessInstanceDAO.java\nindex bcedd8585c7..3d499a2cd9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/359/ProcessInstanceDAO.java\n@@ -269,4 +269,4 @@ public interface ProcessInstanceDAO {\n      * @param dao message exchange DAO reference\n      */\n     void addMessageExchange(MessageExchangeDAO dao);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/359/ProcessInstanceDAO.java\nindex bcedd8585c7..246b5323619 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/359/ProcessInstanceDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/359/ProcessInstanceDAO.java\n@@ -245,12 +245,13 @@ public interface ProcessInstanceDAO {\n      * Date/time failure occurred, and the recovery channel and available\n      * recovery actions.\n      */\n-    void createActivityRecovery(String channel, long activityId, String reason, Date dateTime, Element data, String[] actions, int retries);\n+    void createActivityRecovery(String channel, long activityId, String reason,\n+        Date dateTime, Element data, String[] actions, int retries);\n \n-    /**\n+     /**\n      * Delete previously registered activity recovery.\n      */\n-    void deleteActivityRecovery(String channel);\n+     void deleteActivityRecovery(String channel);\n \n     /**\n      * Transport object holding the date of the first and last instance event\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}