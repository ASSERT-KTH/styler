{
    "project_name": "wso2-attic-commons",
    "error_id": "169",
    "information": {
        "errors": [
            {
                "line": "78",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 138).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * @see org.apache.ode.bpel.compiler.v1.api.ExpressionCompiler#setCompilerContext(org.apache.ode.bpel.compiler.v1.api.CompilerContext)\n     */\n    public void setCompilerContext(CompilerContext compilerContext) {\n        _compilerContext = compilerContext;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/169/XPath10ExpressionCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/169/XPath10ExpressionCompilerImpl.java\nindex 6c75ac2aaa1..f6085105935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/169/XPath10ExpressionCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/169/XPath10ExpressionCompilerImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.compiler.v1.xpath10;\n \n import java.util.HashMap;\n@@ -42,98 +43,99 @@ import org.w3c.dom.Node;\n  */\n public abstract class XPath10ExpressionCompilerImpl implements ExpressionCompiler {\n \n-    private static final XPathMessages __msgs = MessageBundle.getMessages(XPathMessages.class);\n-\n-    // private HashMap<String,Function> _extensionFunctions = new\n-    // HashMap<String,Function>();\n-    protected CompilerContext _compilerContext;\n-\n-    /** Namespace of the BPEL functions (for v2 to v1 compatibility) . */\n-    private String _bpelNsURI;\n-\n-    protected QName _qnFnGetVariableData;\n-\n-    protected QName _qnFnGetVariableProperty;\n-\n-    protected QName _qnFnGetLinkStatus;\n-\n-    protected Map<String, String> _properties = new HashMap<String, String>();\n-\n-    /**\n-     * Construtor.\n-     * \n-     * @param bpelNsURI\n-     *            the BPEL extension function namespace; varies depending on\n-     *            BPEL version.\n-     */\n-    public XPath10ExpressionCompilerImpl(String bpelNsURI) {\n-        _bpelNsURI = bpelNsURI;\n-        _qnFnGetVariableData = new QName(_bpelNsURI, \"getVariableData\");\n-        _qnFnGetVariableProperty = new QName(_bpelNsURI, \"getVariableProperty\");\n-        _qnFnGetLinkStatus = new QName(_bpelNsURI, \"getLinkStatus\");\n-        _properties.put(\"runtime-class\", \"org.apache.ode.bpel.rtrep.v1.xpath10.XPath10ExpressionRuntime\");\n-    }\n-\n-    /**\n-     * @see org.apache.ode.bpel.compiler.v1.api.ExpressionCompiler#setCompilerContext(org.apache.ode.bpel.compiler.v1.api.CompilerContext)\n-     */\n-    public void setCompilerContext(CompilerContext compilerContext) {\n-        _compilerContext = compilerContext;\n+  private static final XPathMessages __msgs = MessageBundle.getMessages(XPathMessages.class);\n+\n+  // private HashMap<String,Function> _extensionFunctions = new\n+  // HashMap<String,Function>();\n+  protected CompilerContext _compilerContext;\n+\n+  /**\n+   * Namespace of the BPEL functions (for v2 to v1 compatibility) .\n+   */\n+  private String _bpelNsURI;\n+\n+  protected QName _qnFnGetVariableData;\n+\n+  protected QName _qnFnGetVariableProperty;\n+\n+  protected QName _qnFnGetLinkStatus;\n+\n+  protected Map<String, String> _properties = new HashMap<String, String>();\n+\n+  /**\n+   * Construtor.\n+   *\n+   * @param bpelNsURI the BPEL extension function namespace; varies depending on\n+   *                  BPEL version.\n+   */\n+  public XPath10ExpressionCompilerImpl(String bpelNsURI) {\n+    _bpelNsURI = bpelNsURI;\n+    _qnFnGetVariableData = new QName(_bpelNsURI, \"getVariableData\");\n+    _qnFnGetVariableProperty = new QName(_bpelNsURI, \"getVariableProperty\");\n+    _qnFnGetLinkStatus = new QName(_bpelNsURI, \"getLinkStatus\");\n+    _properties.put(\"runtime-class\", \"org.apache.ode.bpel.rtrep.v1.xpath10.XPath10ExpressionRuntime\");\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.compiler.v1.api.ExpressionCompiler#setCompilerContext(org.apache.ode.bpel.compiler.v1.api.CompilerContext)\n+   */\n+  public void setCompilerContext(CompilerContext compilerContext) {\n+    _compilerContext = compilerContext;\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.compiler.v1.api.ExpressionCompiler#getProperties()\n+   */\n+  public Map<String, String> getProperties() {\n+    return _properties;\n+  }\n+\n+  // Dead code\n+  /*\n+   * private void registerExtensionFunction(String name, Class function) { try {\n+   * Function jaxenFunction = (Function)function.newInstance();\n+   * _extensionFunctions.put(name, jaxenFunction); } catch\n+   * (InstantiationException e) { throw new RuntimeException(\"unexpected error\n+   * creating extension function: \" + name, e); } catch\n+   * (IllegalAccessException e) { throw new RuntimeException(\"unexpected error\n+   * creating extension function: \" + name, e); } catch (ClassCastException e) {\n+   * throw new RuntimeException(\"expected extension function of type \" +\n+   * Function.class.getName()); } }\n+   */\n+\n+  /**\n+   * Verifies validity of a xpath expression.\n+   */\n+  protected void doJaxenCompile(OXPath10Expression out, Expression source) throws CompilationException {\n+    String xpathStr;\n+    Node node = source.getExpression();\n+    if (node == null) {\n+      throw new IllegalStateException(\"XPath string and xpath node are both null\");\n     }\n \n-    /**\n-     * @see org.apache.ode.bpel.compiler.v1.api.ExpressionCompiler#getProperties()\n-     */\n-    public Map<String, String> getProperties() {\n-        return _properties;\n+    xpathStr = node.getNodeValue();\n+    xpathStr = xpathStr.trim();\n+    if (xpathStr.length() == 0) {\n+      throw new CompilationException(__msgs.errXPathSyntax(xpathStr));\n     }\n \n-    // Dead code\n-    /*\n-     * private void registerExtensionFunction(String name, Class function) { try {\n-     * Function jaxenFunction = (Function)function.newInstance();\n-     * _extensionFunctions.put(name, jaxenFunction); } catch\n-     * (InstantiationException e) { throw new RuntimeException(\"unexpected error\n-     * creating extension function: \" + name, e); } catch\n-     * (IllegalAccessException e) { throw new RuntimeException(\"unexpected error\n-     * creating extension function: \" + name, e); } catch (ClassCastException e) {\n-     * throw new RuntimeException(\"expected extension function of type \" +\n-     * Function.class.getName()); } }\n-     */\n-\n-    /**\n-     * Verifies validity of a xpath expression.\n-     */\n-    protected void doJaxenCompile(OXPath10Expression out, Expression source) throws CompilationException {\n-        String xpathStr;\n-        Node node = source.getExpression();\n-        if (node == null) {\n-            throw new IllegalStateException(\"XPath string and xpath node are both null\");\n-        }\n-\n-        xpathStr = node.getNodeValue();\n-        xpathStr = xpathStr.trim();\n-        if (xpathStr.length() == 0) {\n-        \tthrow new CompilationException(__msgs.errXPathSyntax(xpathStr));\n-        }\n-\n-        try {\n-            XPathReader reader = XPathReaderFactory.createReader();\n-            JaxenBpelHandler handler = new JaxenBpelHandler(_bpelNsURI, out, source.getNamespaceContext(),\n-                    _compilerContext);\n-            reader.setXPathHandler(handler);\n-\n-            reader.parse(xpathStr);\n-            out.xpath = xpathStr;\n-        } catch (CompilationExceptionWrapper e) {\n-            CompilationException ce = e.getCompilationException();\n-            if (ce == null) {\n-                ce = new CompilationException(__msgs.errUnexpectedCompilationError(e.getMessage()), e);\n-            }\n-            throw ce;\n-        } catch (SAXPathException e) {\n-            throw new CompilationException(__msgs.errXPathSyntax(xpathStr));\n-        }\n+    try {\n+      XPathReader reader = XPathReaderFactory.createReader();\n+      JaxenBpelHandler handler = new JaxenBpelHandler(_bpelNsURI, out, source.getNamespaceContext(),\n+        _compilerContext);\n+      reader.setXPathHandler(handler);\n+\n+      reader.parse(xpathStr);\n+      out.xpath = xpathStr;\n+    } catch (CompilationExceptionWrapper e) {\n+      CompilationException ce = e.getCompilationException();\n+      if (ce == null) {\n+        ce = new CompilationException(__msgs.errUnexpectedCompilationError(e.getMessage()), e);\n+      }\n+      throw ce;\n+    } catch (SAXPathException e) {\n+      throw new CompilationException(__msgs.errXPathSyntax(xpathStr));\n     }\n+  }\n \n }\n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/169/XPath10ExpressionCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/169/XPath10ExpressionCompilerImpl.java\nindex 6c75ac2aaa1..39263203ef4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/169/XPath10ExpressionCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/169/XPath10ExpressionCompilerImpl.java\n@@ -136,4 +136,4 @@ public abstract class XPath10ExpressionCompilerImpl implements ExpressionCompile\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}