{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2988",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2988/ClusterClientModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2988/ClusterClientModule.java\nindex 1964b1a31be..58485df7d2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2988/ClusterClientModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2988/ClusterClientModule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.client;\n \n import org.jboss.netty.logging.InternalLoggerFactory;\n@@ -76,195 +77,195 @@ import static org.neo4j.helpers.NamedThreadFactory.daemon;\n  */\n public class ClusterClientModule\n {\n-    public final ClusterClient clusterClient;\n-    private final ProtocolServer server;\n-\n-    public ClusterClientModule( LifeSupport life, Dependencies dependencies, final Monitors monitors,\n-            final Config config, LogService logService, ElectionCredentialsProvider electionCredentialsProvider )\n-    {\n-        final LogProvider logging = AsyncLogging.provider( life, logService.getInternalLogProvider() );\n-        InternalLoggerFactory.setDefaultFactory( new NettyLoggerFactory( logging ) );\n-\n-        TimeoutStrategy timeoutStrategy = new MessageTimeoutStrategy(\n-                new FixedTimeoutStrategy( config.get( ClusterSettings.default_timeout ).toMillis() ) )\n-                .timeout( HeartbeatMessage.sendHeartbeat, config.get( ClusterSettings.heartbeat_interval ).toMillis() )\n-                .timeout( HeartbeatMessage.timed_out, config.get( ClusterSettings.heartbeat_timeout ).toMillis() )\n-                .timeout( AtomicBroadcastMessage.broadcastTimeout, config.get( ClusterSettings.broadcast_timeout ).toMillis() )\n-                .timeout( LearnerMessage.learnTimedout, config.get( ClusterSettings.learn_timeout ).toMillis() )\n-                .timeout( ProposerMessage.phase1Timeout, config.get( ClusterSettings.phase1_timeout ).toMillis() )\n-                .timeout( ProposerMessage.phase2Timeout, config.get( ClusterSettings.phase2_timeout ).toMillis() )\n-                .timeout( ClusterMessage.joiningTimeout, config.get( ClusterSettings.join_timeout ).toMillis() )\n-                .timeout( ClusterMessage.configurationTimeout, config.get( ClusterSettings.configuration_timeout ).toMillis() )\n-                .timeout( ClusterMessage.leaveTimedout, config.get( ClusterSettings.leave_timeout ).toMillis() )\n-                .timeout( ElectionMessage.electionTimeout, config.get( ClusterSettings.election_timeout ).toMillis() );\n-\n-        MultiPaxosServerFactory protocolServerFactory = new MultiPaxosServerFactory(\n-                new ClusterConfiguration( config.get( ClusterSettings.cluster_name ), logging ),\n-                logging, monitors.newMonitor( StateMachines.Monitor.class ) );\n-\n-        NetworkReceiver receiver = dependencies.satisfyDependency(\n-                new NetworkReceiver( monitors.newMonitor( NetworkReceiver.Monitor.class ),\n-                new NetworkReceiver.Configuration()\n-        {\n-            @Override\n-            public HostnamePort clusterServer()\n-            {\n-                return config.get( ClusterSettings.cluster_server );\n-            }\n-\n-            @Override\n-            public int defaultPort()\n+  public final ClusterClient clusterClient;\n+  private final ProtocolServer server;\n+\n+  public ClusterClientModule(LifeSupport life, Dependencies dependencies, final Monitors monitors,\n+                             final Config config, LogService logService, ElectionCredentialsProvider electionCredentialsProvider)\n+  {\n+    final LogProvider logging = AsyncLogging.provider(life, logService.getInternalLogProvider());\n+    InternalLoggerFactory.setDefaultFactory(new NettyLoggerFactory(logging));\n+\n+    TimeoutStrategy timeoutStrategy = new MessageTimeoutStrategy(\n+        new FixedTimeoutStrategy(config.get(ClusterSettings.default_timeout).toMillis()))\n+        .timeout(HeartbeatMessage.sendHeartbeat, config.get(ClusterSettings.heartbeat_interval).toMillis())\n+        .timeout(HeartbeatMessage.timed_out, config.get(ClusterSettings.heartbeat_timeout).toMillis())\n+        .timeout(AtomicBroadcastMessage.broadcastTimeout, config.get(ClusterSettings.broadcast_timeout).toMillis())\n+        .timeout(LearnerMessage.learnTimedout, config.get(ClusterSettings.learn_timeout).toMillis())\n+        .timeout(ProposerMessage.phase1Timeout, config.get(ClusterSettings.phase1_timeout).toMillis())\n+        .timeout(ProposerMessage.phase2Timeout, config.get(ClusterSettings.phase2_timeout).toMillis())\n+        .timeout(ClusterMessage.joiningTimeout, config.get(ClusterSettings.join_timeout).toMillis())\n+        .timeout(ClusterMessage.configurationTimeout, config.get(ClusterSettings.configuration_timeout).toMillis())\n+        .timeout(ClusterMessage.leaveTimedout, config.get(ClusterSettings.leave_timeout).toMillis())\n+        .timeout(ElectionMessage.electionTimeout, config.get(ClusterSettings.election_timeout).toMillis());\n+\n+    MultiPaxosServerFactory protocolServerFactory = new MultiPaxosServerFactory(\n+        new ClusterConfiguration(config.get(ClusterSettings.cluster_name), logging),\n+        logging, monitors.newMonitor(StateMachines.Monitor.class));\n+\n+    NetworkReceiver receiver = dependencies.satisfyDependency(\n+        new NetworkReceiver(monitors.newMonitor(NetworkReceiver.Monitor.class),\n+            new NetworkReceiver.Configuration()\n             {\n+              @Override\n+              public HostnamePort clusterServer()\n+              {\n+                return config.get(ClusterSettings.cluster_server);\n+              }\n+\n+              @Override\n+              public int defaultPort()\n+              {\n                 return 5001;\n-            }\n+              }\n \n-            @Override\n-            public String name()\n-            {\n-                return config.get( ClusterSettings.instance_name );\n-            }\n-        }, logging ));\n-\n-        final ObjectInputStreamFactory objectInputStreamFactory = new ObjectStreamFactory();\n-        final ObjectOutputStreamFactory objectOutputStreamFactory = new ObjectStreamFactory();\n-\n-        receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n-        {\n-            private volatile StateTransitionLogger logger;\n+              @Override\n+              public String name()\n+              {\n+                return config.get(ClusterSettings.instance_name);\n+              }\n+            }, logging));\n \n-            @Override\n-            public void listeningAt( URI me )\n-            {\n-                server.listeningAt( me );\n-                if ( logger == null )\n-                {\n-                    logger = new StateTransitionLogger( logging,\n-                            new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n-                    server.addStateTransitionListener( logger );\n-                }\n-            }\n-\n-            @Override\n-            public void channelOpened( URI to )\n-            {\n-                logging.getLog( NetworkReceiver.class ).info( to + \" connected to me at \" + server.boundAt() );\n-            }\n+    final ObjectInputStreamFactory objectInputStreamFactory = new ObjectStreamFactory();\n+    final ObjectOutputStreamFactory objectOutputStreamFactory = new ObjectStreamFactory();\n \n-            @Override\n-            public void channelClosed( URI to )\n-            {\n-                logging.getLog( NetworkReceiver.class ).info( to + \" disconnected from me at \" + server\n-                        .boundAt() );\n-            }\n-        } );\n+    receiver.addNetworkChannelsListener(new NetworkReceiver.NetworkChannelsListener()\n+    {\n+      private volatile StateTransitionLogger logger;\n \n-        NetworkSender sender = dependencies.satisfyDependency(new NetworkSender( monitors.newMonitor( NetworkSender.Monitor.class ),\n-                new NetworkSender.Configuration()\n+      @Override\n+      public void listeningAt(URI me)\n+      {\n+        server.listeningAt(me);\n+        if (logger == null)\n         {\n-            @Override\n-            public int defaultPort()\n-            {\n-                return 5001;\n-            }\n-\n-            @Override\n-            public int port()\n-            {\n-                return config.get( ClusterSettings.cluster_server ).getPort();\n-            }\n-        }, receiver, logging ));\n-\n-        ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter(\n-                () -> Executors.newSingleThreadExecutor( new NamedThreadFactory( \"State machine\", monitors\n-                        .newMonitor( NamedThreadFactory.Monitor.class ) ) ) );\n+          logger = new StateTransitionLogger(logging,\n+              new AtomicBroadcastSerializer(objectInputStreamFactory, objectOutputStreamFactory));\n+          server.addStateTransitionListener(logger);\n+        }\n+      }\n+\n+      @Override\n+      public void channelOpened(URI to)\n+      {\n+        logging.getLog(NetworkReceiver.class).info(to + \" connected to me at \" + server.boundAt());\n+      }\n+\n+      @Override\n+      public void channelClosed(URI to)\n+      {\n+        logging.getLog(NetworkReceiver.class).info(to + \" disconnected from me at \" + server\n+            .boundAt());\n+      }\n+    });\n+\n+    NetworkSender sender = dependencies.satisfyDependency(new NetworkSender(monitors.newMonitor(NetworkSender.Monitor.class),\n+        new NetworkSender.Configuration()\n+        {\n+          @Override\n+          public int defaultPort()\n+          {\n+            return 5001;\n+          }\n \n-        AcceptorInstanceStore acceptorInstanceStore = new InMemoryAcceptorInstanceStore();\n+          @Override\n+          public int port()\n+          {\n+            return config.get(ClusterSettings.cluster_server).getPort();\n+          }\n+        }, receiver, logging));\n \n-        server = protocolServerFactory.newProtocolServer( config.get( ClusterSettings.server_id ),timeoutStrategy,\n-                receiver, sender, acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor,\n-                objectInputStreamFactory, objectOutputStreamFactory, config );\n+    ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter(\n+        () -> Executors.newSingleThreadExecutor(new NamedThreadFactory(\"State machine\", monitors\n+            .newMonitor(NamedThreadFactory.Monitor.class))));\n \n-        life.add( sender );\n-        life.add( stateMachineExecutor );\n-        life.add( receiver );\n+    AcceptorInstanceStore acceptorInstanceStore = new InMemoryAcceptorInstanceStore();\n \n-        // Timeout timer - triggers every 10 ms\n-        life.add( new TimeoutTrigger( server, monitors ) );\n+    server = protocolServerFactory.newProtocolServer(config.get(ClusterSettings.server_id), timeoutStrategy,\n+        receiver, sender, acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor,\n+        objectInputStreamFactory, objectOutputStreamFactory, config);\n \n-        life.add( new ClusterJoin( new ClusterJoin.Configuration()\n-        {\n-            @Override\n-            public List<HostnamePort> getInitialHosts()\n-            {\n-                return config.get( ClusterSettings.initial_hosts );\n-            }\n+    life.add(sender);\n+    life.add(stateMachineExecutor);\n+    life.add(receiver);\n \n-            @Override\n-            public String getClusterName()\n-            {\n-                return config.get( ClusterSettings.cluster_name );\n-            }\n+    // Timeout timer - triggers every 10 ms\n+    life.add(new TimeoutTrigger(server, monitors));\n \n-            @Override\n-            public boolean isAllowedToCreateCluster()\n-            {\n-                return config.get( ClusterSettings.allow_init_cluster );\n-            }\n+    life.add(new ClusterJoin(new ClusterJoin.Configuration()\n+    {\n+      @Override\n+      public List<HostnamePort> getInitialHosts()\n+      {\n+        return config.get(ClusterSettings.initial_hosts);\n+      }\n+\n+      @Override\n+      public String getClusterName()\n+      {\n+        return config.get(ClusterSettings.cluster_name);\n+      }\n+\n+      @Override\n+      public boolean isAllowedToCreateCluster()\n+      {\n+        return config.get(ClusterSettings.allow_init_cluster);\n+      }\n+\n+      @Override\n+      public long getClusterJoinTimeout()\n+      {\n+        return config.get(ClusterSettings.join_timeout).toMillis();\n+      }\n+    }, server, logService));\n+\n+    clusterClient = dependencies.satisfyDependency(new ClusterClient(life, server));\n+  }\n+\n+  private static class TimeoutTrigger implements Lifecycle\n+  {\n+    private final ProtocolServer server;\n+    private final Monitors monitors;\n \n-            @Override\n-            public long getClusterJoinTimeout()\n-            {\n-                return config.get( ClusterSettings.join_timeout ).toMillis();\n-            }\n-        }, server, logService ) );\n+    private ScheduledExecutorService scheduler;\n+    private ScheduledFuture<?> tickFuture;\n \n-        clusterClient =  dependencies.satisfyDependency(new ClusterClient( life, server ));\n+    TimeoutTrigger(ProtocolServer server, Monitors monitors)\n+    {\n+      this.server = server;\n+      this.monitors = monitors;\n     }\n \n-    private static class TimeoutTrigger implements Lifecycle\n+    @Override\n+    public void init()\n     {\n-        private final ProtocolServer server;\n-        private final Monitors monitors;\n-\n-        private ScheduledExecutorService scheduler;\n-        private ScheduledFuture<?> tickFuture;\n-\n-        TimeoutTrigger( ProtocolServer server, Monitors monitors )\n-        {\n-            this.server = server;\n-            this.monitors = monitors;\n-        }\n-\n-        @Override\n-        public void init()\n-        {\n-            server.getTimeouts().tick( System.currentTimeMillis() );\n-        }\n+      server.getTimeouts().tick(System.currentTimeMillis());\n+    }\n \n-        @Override\n-        public void start()\n-        {\n-            scheduler = Executors.newSingleThreadScheduledExecutor(\n-                    daemon( \"timeout-clusterClient\", monitors.newMonitor( NamedThreadFactory.Monitor.class ) ) );\n+    @Override\n+    public void start()\n+    {\n+      scheduler = Executors.newSingleThreadScheduledExecutor(\n+          daemon(\"timeout-clusterClient\", monitors.newMonitor(NamedThreadFactory.Monitor.class)));\n \n-            tickFuture = scheduler.scheduleWithFixedDelay( () ->\n-            {\n-                long now = System.currentTimeMillis();\n+      tickFuture = scheduler.scheduleWithFixedDelay(() ->\n+      {\n+        long now = System.currentTimeMillis();\n \n-                server.getTimeouts().tick( now );\n-            }, 0, 10, TimeUnit.MILLISECONDS );\n-        }\n+        server.getTimeouts().tick(now);\n+      }, 0, 10, TimeUnit.MILLISECONDS);\n+    }\n \n-        @Override\n-        public void stop()\n-        {\n-            tickFuture.cancel( true );\n-            scheduler.shutdownNow();\n-        }\n+    @Override\n+    public void stop()\n+    {\n+      tickFuture.cancel(true);\n+      scheduler.shutdownNow();\n+    }\n \n-        @Override\n-        public void shutdown()\n-        {\n-        }\n+    @Override\n+    public void shutdown()\n+    {\n     }\n+  }\n }\n",
            "diff_size": 231
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 220).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2988/ClusterClientModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2988/ClusterClientModule.java\nindex 1964b1a31be..528c9ebfadb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2988/ClusterClientModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2988/ClusterClientModule.java\n@@ -79,33 +79,14 @@ public class ClusterClientModule\n     public final ClusterClient clusterClient;\n     private final ProtocolServer server;\n \n-    public ClusterClientModule( LifeSupport life, Dependencies dependencies, final Monitors monitors,\n-            final Config config, LogService logService, ElectionCredentialsProvider electionCredentialsProvider )\n+    public ClusterClientModule( LifeSupport life, Dependencies dependencies, final Monitors monitors, final Config config, LogService logService, ElectionCredentialsProvider electionCredentialsProvider )\n     {\n         final LogProvider logging = AsyncLogging.provider( life, logService.getInternalLogProvider() );\n         InternalLoggerFactory.setDefaultFactory( new NettyLoggerFactory( logging ) );\n-\n-        TimeoutStrategy timeoutStrategy = new MessageTimeoutStrategy(\n-                new FixedTimeoutStrategy( config.get( ClusterSettings.default_timeout ).toMillis() ) )\n-                .timeout( HeartbeatMessage.sendHeartbeat, config.get( ClusterSettings.heartbeat_interval ).toMillis() )\n-                .timeout( HeartbeatMessage.timed_out, config.get( ClusterSettings.heartbeat_timeout ).toMillis() )\n-                .timeout( AtomicBroadcastMessage.broadcastTimeout, config.get( ClusterSettings.broadcast_timeout ).toMillis() )\n-                .timeout( LearnerMessage.learnTimedout, config.get( ClusterSettings.learn_timeout ).toMillis() )\n-                .timeout( ProposerMessage.phase1Timeout, config.get( ClusterSettings.phase1_timeout ).toMillis() )\n-                .timeout( ProposerMessage.phase2Timeout, config.get( ClusterSettings.phase2_timeout ).toMillis() )\n-                .timeout( ClusterMessage.joiningTimeout, config.get( ClusterSettings.join_timeout ).toMillis() )\n-                .timeout( ClusterMessage.configurationTimeout, config.get( ClusterSettings.configuration_timeout ).toMillis() )\n-                .timeout( ClusterMessage.leaveTimedout, config.get( ClusterSettings.leave_timeout ).toMillis() )\n-                .timeout( ElectionMessage.electionTimeout, config.get( ClusterSettings.election_timeout ).toMillis() );\n-\n-        MultiPaxosServerFactory protocolServerFactory = new MultiPaxosServerFactory(\n-                new ClusterConfiguration( config.get( ClusterSettings.cluster_name ), logging ),\n-                logging, monitors.newMonitor( StateMachines.Monitor.class ) );\n-\n-        NetworkReceiver receiver = dependencies.satisfyDependency(\n-                new NetworkReceiver( monitors.newMonitor( NetworkReceiver.Monitor.class ),\n-                new NetworkReceiver.Configuration()\n-        {\n+TimeoutStrategy timeoutStrategy = new MessageTimeoutStrategy( new FixedTimeoutStrategy( config.get( ClusterSettings.default_timeout ).toMillis() ) ).timeout( HeartbeatMessage.sendHeartbeat, config.get( ClusterSettings.heartbeat_interval ).toMillis() ).timeout( HeartbeatMessage.timed_out, config.get( ClusterSettings.heartbeat_timeout ).toMillis() ).timeout( AtomicBroadcastMessage.broadcastTimeout, config.get( ClusterSettings.broadcast_timeout ).toMillis() ).timeout( LearnerMessage.learnTimedout, config.get( ClusterSettings.learn_timeout ).toMillis() ).timeout( ProposerMessage.phase1Timeout, config.get( ClusterSettings.phase1_timeout ).toMillis() ).timeout( ProposerMessage.phase2Timeout, config.get( ClusterSettings.phase2_timeout ).toMillis() ).timeout( ClusterMessage.joiningTimeout, config.get( ClusterSettings.join_timeout ).toMillis() ).timeout( ClusterMessage.configurationTimeout, config.get( ClusterSettings.configuration_timeout ).toMillis() ).timeout( ClusterMessage.leaveTimedout, config.get( ClusterSettings.leave_timeout ).toMillis() ).timeout( ElectionMessage.electionTimeout, config.get( ClusterSettings.election_timeout ).toMillis() );\n+MultiPaxosServerFactory protocolServerFactory = new MultiPaxosServerFactory( new ClusterConfiguration( config.get( ClusterSettings.cluster_name ), logging ), logging, monitors.newMonitor( StateMachines.Monitor.class ) );\n+NetworkReceiver receiver = dependencies.satisfyDependency( new NetworkReceiver( monitors.newMonitor( NetworkReceiver.Monitor.class ), new NetworkReceiver.Configuration()\n+{\n             @Override\n             public HostnamePort clusterServer()\n             {\n@@ -127,8 +108,7 @@ public class ClusterClientModule\n \n         final ObjectInputStreamFactory objectInputStreamFactory = new ObjectStreamFactory();\n         final ObjectOutputStreamFactory objectOutputStreamFactory = new ObjectStreamFactory();\n-\n-        receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n+receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n         {\n             private volatile StateTransitionLogger logger;\n \n@@ -138,9 +118,8 @@ public class ClusterClientModule\n                 server.listeningAt( me );\n                 if ( logger == null )\n                 {\n-                    logger = new StateTransitionLogger( logging,\n-                            new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n-                    server.addStateTransitionListener( logger );\n+                    logger = new StateTransitionLogger( logging, new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n+server.addStateTransitionListener( logger );\n                 }\n             }\n \n@@ -153,14 +132,11 @@ public class ClusterClientModule\n             @Override\n             public void channelClosed( URI to )\n             {\n-                logging.getLog( NetworkReceiver.class ).info( to + \" disconnected from me at \" + server\n-                        .boundAt() );\n-            }\n+                logging.getLog( NetworkReceiver.class ).info( to + \" disconnected from me at \" + server.boundAt() );\n+    }\n         } );\n-\n-        NetworkSender sender = dependencies.satisfyDependency(new NetworkSender( monitors.newMonitor( NetworkSender.Monitor.class ),\n-                new NetworkSender.Configuration()\n-        {\n+NetworkSender sender = dependencies.satisfyDependency(new NetworkSender( monitors.newMonitor( NetworkSender.Monitor.class ), new NetworkSender.Configuration()\n+{\n             @Override\n             public int defaultPort()\n             {\n@@ -173,25 +149,18 @@ public class ClusterClientModule\n                 return config.get( ClusterSettings.cluster_server ).getPort();\n             }\n         }, receiver, logging ));\n+ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter(() -> Executors.newSingleThreadExecutor( new NamedThreadFactory( \"State machine\", monitors.newMonitor( NamedThreadFactory.Monitor.class ) ) ) );\n+AcceptorInstanceStore acceptorInstanceStore = new InMemoryAcceptorInstanceStore();\n \n-        ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter(\n-                () -> Executors.newSingleThreadExecutor( new NamedThreadFactory( \"State machine\", monitors\n-                        .newMonitor( NamedThreadFactory.Monitor.class ) ) ) );\n-\n-        AcceptorInstanceStore acceptorInstanceStore = new InMemoryAcceptorInstanceStore();\n-\n-        server = protocolServerFactory.newProtocolServer( config.get( ClusterSettings.server_id ),timeoutStrategy,\n-                receiver, sender, acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor,\n-                objectInputStreamFactory, objectOutputStreamFactory, config );\n-\n-        life.add( sender );\n+        server = protocolServerFactory.newProtocolServer( config.get( ClusterSettings.server_id ), timeoutStrategy,\n+                receiver, sender, acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor, objectInputStreamFactory, objectOutputStreamFactory, config );\n+life.add( sender );\n         life.add( stateMachineExecutor );\n         life.add( receiver );\n \n         // Timeout timer - triggers every 10 ms\n         life.add( new TimeoutTrigger( server, monitors ) );\n-\n-        life.add( new ClusterJoin( new ClusterJoin.Configuration()\n+life.add( new ClusterJoin( new ClusterJoin.Configuration()\n         {\n             @Override\n             public List<HostnamePort> getInitialHosts()\n@@ -217,8 +186,7 @@ public class ClusterClientModule\n                 return config.get( ClusterSettings.join_timeout ).toMillis();\n             }\n         }, server, logService ) );\n-\n-        clusterClient =  dependencies.satisfyDependency(new ClusterClient( life, server ));\n+clusterClient = dependencies.satisfyDependency(new ClusterClient( life, server ));\n     }\n \n     private static class TimeoutTrigger implements Lifecycle\n@@ -244,14 +212,11 @@ public class ClusterClientModule\n         @Override\n         public void start()\n         {\n-            scheduler = Executors.newSingleThreadScheduledExecutor(\n-                    daemon( \"timeout-clusterClient\", monitors.newMonitor( NamedThreadFactory.Monitor.class ) ) );\n-\n-            tickFuture = scheduler.scheduleWithFixedDelay( () ->\n+            scheduler = Executors.newSingleThreadScheduledExecutor( daemon( \"timeout-clusterClient\", monitors.newMonitor( NamedThreadFactory.Monitor.class ) ) );\n+tickFuture = scheduler.scheduleWithFixedDelay( () ->\n             {\n                 long now = System.currentTimeMillis();\n-\n-                server.getTimeouts().tick( now );\n+server.getTimeouts().tick( now );\n             }, 0, 10, TimeUnit.MILLISECONDS );\n         }\n \n@@ -267,4 +232,4 @@ public class ClusterClientModule\n         {\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}