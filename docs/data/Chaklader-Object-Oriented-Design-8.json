{
    "project_name": "Chaklader-Object-Oriented-Design",
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "34",
                "column": "11",
                "severity": "error",
                "message": "Line contains a tab character.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "//        Iterator<String> stringIterator = iterator(tabOfString);\n//        while(stringIterator.hasNext()){\n//        \tSystem.out.println(stringIterator.next());\n//        }\n//    }\n//",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "column": "11",
                    "severity": "error",
                    "message": "Line contains a tab character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "34",
                    "column": "11",
                    "severity": "error",
                    "message": "Line contains a tab character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/8/MyClass.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/8/MyClass.java\nindex e0e59f242c2..f6e7529a3f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/8/MyClass.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/8/MyClass.java\n@@ -9,114 +9,4 @@\n //public class MyClass {\n //\n //    public static void main(String [] args){\n-//        List<Integer> list = new ArrayList<Integer>();\n-//        Collections.addAll(list, 1, 2, 3);\n-//\n-//        //java.util.ConcurrentModificationException\n-////        for (Integer integer : list) {\n-////            list.remove(0);\n-////            list.add(integer);\n-////        }\n-//        //Solution:\n-//        Iterator<Integer> iterator = list.iterator();\n-//        while(iterator.hasNext()){\n-//            iterator.next();    //Mandatory\n-//            iterator.remove();\n-//        }\n-//        System.out.println(list.size());\n-//        //Unmodifiable returned list (or Set, Map)\n-//        List<Object> emptyList = Collections.emptyList();\n-//        Collections.frequency(list, new Integer(2));\n-//\n-//        String [] tabOfString = {\"hhhh\", \"aaaa\", \"dddd\", \"fffff\"};\n-//        Iterator<String> stringIterator = iterator(tabOfString);\n-//        while(stringIterator.hasNext()){\n-//        \tSystem.out.println(stringIterator.next());\n-//        }\n-//    }\n-//\n-//    public static Iterator<String> iterator(final String [] string){\n-//        return new Iterator<String>() {\n-//            int index = 0;\n-//            @Override\n-//            public boolean hasNext() {\n-//                return index < string.length;\n-//            }\n-//\n-//            @Override\n-//            public String next() {\n-//                return string[index++];\n-//            }\n-//\n-//            @Override\n-//            public void remove() {\n-//                throw new UnsupportedOperationException();\n-//            }\n-//        };\n-//    }\n-//\n-//    public static boolean isPalindrom(String string) {\n-//\n-//        for (int i = 0, j = string.length() -1 ; i <= j ; i++, j--) {\n-//            if(string.charAt(i) != string.charAt(j))\n-//                return false;\n-//        }\n-//        return true;\n-//    }\n-//\n-//    public static long extractDigits(String word){\n-//        return Long.parseLong(word.replaceAll(\"\\\\D+\", \"\"));\n-//    }\n-//\n-//    public static String firstLetterToUpperCase(String statement){\n-//        StringBuilder builder = new StringBuilder(statement);\n-//        boolean newSpace = true;\n-//        for (int i = 0; i < builder.length(); i++) {\n-//            if(builder.charAt(i) ==  ' '){\n-//                newSpace = true;\n-//            }else if(newSpace){\n-//                builder.setCharAt(i, ((Character.toUpperCase(builder.charAt(i)))));\n-//                newSpace = false;\n-//            }\n-//        }\n-//        return builder.toString();\n-//    }\n-//\n-//    public static String firstLetterToUpperCaseSplit(String statement, String seperator){\n-//        String [] listWords = statement.split(seperator+\"+\");\n-//        System.out.println(\"listWords.length : \"+listWords.length);\n-//        StringBuilder builder = new StringBuilder();\n-//        for (String word : listWords) {\n-//            builder.append(Character.toUpperCase(word.charAt(0)) + word.substring(1));\n-//        }\n-//        return builder.toString();\n-//\n-//    }\n-//    public static String firstLetterToUpperCaseWithSeperator(String statement, char seperator) {\n-//        StringBuilder builder = new StringBuilder(statement);\n-//        boolean newSeperatorOccurence = true;\n-//        for (int i = 0; i < builder.length(); i++) {\n-//            if(builder.charAt(i) ==  seperator){\n-//                newSeperatorOccurence = true;\n-//            }else if(newSeperatorOccurence){\n-//                builder.setCharAt(i, ((Character.toUpperCase(builder.charAt(i)))));\n-//                newSeperatorOccurence = false;\n-//            }\n-//        }\n-//        return builder.toString();\n-//    }\n-//\n-//    public static String getBiggestHeterogeneousSubString(String string){\n-//        StringBuilder biggestSubString = new StringBuilder();\n-//        StringBuilder buffer = new StringBuilder();\n-//        for (int i = 0; i < string.length(); i++) {\n-//            if(buffer.toString().contains(string.charAt(i)+\"\")){\n-//                buffer.append(string.charAt(i));\n-//            }else if(buffer.length() > biggestSubString.length()){\n-//                biggestSubString = new StringBuilder(buffer.toString());\n-//                buffer.setLength(0);\n-//            }\n-//        }\n-//        return biggestSubString.toString();\n-//    }\n-//}\n+//   \n\\ No newline at end of file\n",
            "diff_size": 111
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/8/MyClass.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/8/MyClass.java\nindex e0e59f242c2..21199362e43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/8/MyClass.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/8/MyClass.java\n@@ -31,7 +31,7 @@\n //        String [] tabOfString = {\"hhhh\", \"aaaa\", \"dddd\", \"fffff\"};\n //        Iterator<String> stringIterator = iterator(tabOfString);\n //        while(stringIterator.hasNext()){\n-//        \tSystem.out.println(stringIterator.next());\n+//          System.out.println(stringIterator.next());\n //        }\n //    }\n //\n",
            "diff_size": 1
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "column": "11",
                    "severity": "error",
                    "message": "Line contains a tab character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "column": "11",
                    "severity": "error",
                    "message": "Line contains a tab character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ]
}