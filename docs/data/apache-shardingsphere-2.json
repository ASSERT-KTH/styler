{
    "project_name": "apache-shardingsphere",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "91",
                "column": "5",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n    \n    /**\n     * Find index of column.\n     *\n     * @param columnName column name",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/2/TableMetaData.java\nindex 089424a3b60..32748c8f6cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/2/TableMetaData.java\n@@ -86,8 +86,6 @@ public final class TableMetaData {\n         return columns.get(columnNames.get(columnIndex));\n     }\n \n-\n-    \n     /**\n      * Find index of column.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "90",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/2/TableMetaData.java\nindex 089424a3b60..87f177e20b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/2/TableMetaData.java\n@@ -36,25 +36,25 @@ import java.util.Map;\n @EqualsAndHashCode\n @ToString\n public final class TableMetaData {\n-    \n+\n     private final Map<String, ColumnMetaData> columns;\n-    \n+\n     private final Map<String, IndexMetaData> indexes;\n-    \n+\n     @Getter(AccessLevel.NONE)\n     private final List<String> columnNames = new ArrayList<>();\n \n     private final List<String> primaryKeyColumns = new ArrayList<>();\n-    \n+\n     public TableMetaData() {\n         this(Collections.emptyList(), Collections.emptyList());\n     }\n-    \n+\n     public TableMetaData(final Collection<ColumnMetaData> columnMetaDataList, final Collection<IndexMetaData> indexMetaDataList) {\n         columns = getColumns(columnMetaDataList);\n         indexes = getIndexes(indexMetaDataList);\n     }\n-    \n+\n     private Map<String, ColumnMetaData> getColumns(final Collection<ColumnMetaData> columnMetaDataList) {\n         Map<String, ColumnMetaData> result = new LinkedHashMap<>(columnMetaDataList.size(), 1);\n         for (ColumnMetaData each : columnMetaDataList) {\n@@ -67,7 +67,7 @@ public final class TableMetaData {\n         }\n         return Collections.synchronizedMap(result);\n     }\n-    \n+\n     private Map<String, IndexMetaData> getIndexes(final Collection<IndexMetaData> indexMetaDataList) {\n         Map<String, IndexMetaData> result = new LinkedHashMap<>(indexMetaDataList.size(), 1);\n         for (IndexMetaData each : indexMetaDataList) {\n@@ -75,7 +75,7 @@ public final class TableMetaData {\n         }\n         return Collections.synchronizedMap(result);\n     }\n-    \n+\n     /**\n      * Get column meta data.\n      *\n@@ -87,7 +87,6 @@ public final class TableMetaData {\n     }\n \n \n-    \n     /**\n      * Find index of column.\n      *\n@@ -102,7 +101,7 @@ public final class TableMetaData {\n         }\n         return -1;\n     }\n-    \n+\n     /**\n      * Judge column whether primary key.\n      *\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/2/TableMetaData.java\nindex 089424a3b60..d3725885db9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/2/TableMetaData.java\n@@ -86,8 +86,6 @@ public final class TableMetaData {\n         return columns.get(columnNames.get(columnIndex));\n     }\n \n-\n-    \n     /**\n      * Find index of column.\n      *\n@@ -112,4 +110,4 @@ public final class TableMetaData {\n     public boolean isPrimaryKey(final int columnIndex) {\n         return columnIndex < columnNames.size() && columns.get(columnNames.get(columnIndex)).isPrimaryKey();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "94",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/2/TableMetaData.java\nindex 089424a3b60..74916254240 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/2/TableMetaData.java\n@@ -21,7 +21,6 @@ import lombok.AccessLevel;\n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.ToString;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -32,29 +31,31 @@ import java.util.Map;\n /**\n  * Table meta data.\n  */\n+\n+\n @Getter\n @EqualsAndHashCode\n @ToString\n public final class TableMetaData {\n-    \n+\n     private final Map<String, ColumnMetaData> columns;\n-    \n+\n     private final Map<String, IndexMetaData> indexes;\n-    \n+\n     @Getter(AccessLevel.NONE)\n     private final List<String> columnNames = new ArrayList<>();\n \n     private final List<String> primaryKeyColumns = new ArrayList<>();\n-    \n+\n     public TableMetaData() {\n         this(Collections.emptyList(), Collections.emptyList());\n     }\n-    \n+\n     public TableMetaData(final Collection<ColumnMetaData> columnMetaDataList, final Collection<IndexMetaData> indexMetaDataList) {\n         columns = getColumns(columnMetaDataList);\n         indexes = getIndexes(indexMetaDataList);\n     }\n-    \n+\n     private Map<String, ColumnMetaData> getColumns(final Collection<ColumnMetaData> columnMetaDataList) {\n         Map<String, ColumnMetaData> result = new LinkedHashMap<>(columnMetaDataList.size(), 1);\n         for (ColumnMetaData each : columnMetaDataList) {\n@@ -67,7 +68,7 @@ public final class TableMetaData {\n         }\n         return Collections.synchronizedMap(result);\n     }\n-    \n+\n     private Map<String, IndexMetaData> getIndexes(final Collection<IndexMetaData> indexMetaDataList) {\n         Map<String, IndexMetaData> result = new LinkedHashMap<>(indexMetaDataList.size(), 1);\n         for (IndexMetaData each : indexMetaDataList) {\n@@ -82,6 +83,8 @@ public final class TableMetaData {\n      * @param columnIndex column index\n      * @return column meta data\n      */\n+\n+\n     public ColumnMetaData getColumnMetaData(final int columnIndex) {\n         return columns.get(columnNames.get(columnIndex));\n     }\n@@ -94,6 +97,8 @@ public final class TableMetaData {\n      * @param columnName column name\n      * @return index of column if found, otherwise -1\n      */\n+\n+\n     public int findColumnIndex(final String columnName) {\n         for (int i = 0; i < columnNames.size(); i++) {\n             if (columnNames.get(i).equals(columnName)) {\n@@ -109,7 +114,9 @@ public final class TableMetaData {\n      * @param columnIndex column index\n      * @return true if the column is primary key, otherwise false\n      */\n+\n+\n     public boolean isPrimaryKey(final int columnIndex) {\n         return columnIndex < columnNames.size() && columns.get(columnNames.get(columnIndex)).isPrimaryKey();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/2/TableMetaData.java\nindex 089424a3b60..32748c8f6cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/2/TableMetaData.java\n@@ -86,8 +86,6 @@ public final class TableMetaData {\n         return columns.get(columnNames.get(columnIndex));\n     }\n \n-\n-    \n     /**\n      * Find index of column.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/2/TableMetaData.java\nindex 089424a3b60..32748c8f6cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/2/TableMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/2/TableMetaData.java\n@@ -86,8 +86,6 @@ public final class TableMetaData {\n         return columns.get(columnNames.get(columnIndex));\n     }\n \n-\n-    \n     /**\n      * Find index of column.\n      *\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}