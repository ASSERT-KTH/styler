{
    "project_name": "EMResearch-EMB",
    "error_id": "52",
    "information": {
        "errors": [
            {
                "line": "63",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * @since 2.1\n   */\n  HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword, int requestLimit, int requestLimitPeriodInSeconds) {\n    super(serverPort, verbose);\n    this.keystore = keystore;\n    this.keyStorePassword = keyStorePassword;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/52/HTTPSServerConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/52/HTTPSServerConfig.java\nindex a35c0447387..bef819c9f79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/52/HTTPSServerConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/52/HTTPSServerConfig.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.server;\n \n import java.io.File;\n@@ -28,78 +29,79 @@ import java.util.Properties;\n  */\n public class HTTPSServerConfig extends HTTPServerConfig {\n \n-  private final File keystore;\n-  private final String keyStorePassword;\n-  \n-  /**\n-   * @param keystore a Java keystore file as created with the <tt>keytool</tt> command\n-   * @param keyStorePassword the password for the keystore\n-   */\n-  public HTTPSServerConfig(File keystore, String keyStorePassword) {\n-    super(DEFAULT_PORT, false);\n-    this.keystore = keystore;\n-    this.keyStorePassword = keyStorePassword;\n-  }\n-\n-  /**\n-   * @param serverPort the port to bind to\n-   * @param verbose when set to <tt>true</tt>, the input text will be logged in case there is an exception\n-   * @param keystore a Java keystore file as created with the <tt>keytool</tt> command\n-   * @param keyStorePassword the password for the keystore\n-   */\n-  public HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword) {\n-    super(serverPort, verbose);\n-    this.keystore = keystore;\n-    this.keyStorePassword = keyStorePassword;\n-  }\n+    private final File keystore;\n+    private final String keyStorePassword;\n \n-  /**\n-   * @param serverPort the port to bind to\n-   * @param verbose when set to <tt>true</tt>, the input text will be logged in case there is an exception\n-   * @param keystore a Java keystore file as created with the <tt>keytool</tt> command\n-   * @param keyStorePassword the password for the keystore\n-   * @since 2.1\n-   */\n-  HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword, int requestLimit, int requestLimitPeriodInSeconds) {\n-    super(serverPort, verbose);\n-    this.keystore = keystore;\n-    this.keyStorePassword = keyStorePassword;\n-    this.requestLimit = requestLimit;\n-    this.requestLimitPeriodInSeconds = requestLimitPeriodInSeconds;\n-  }\n+    /**\n+     * @param keystore         a Java keystore file as created with the <tt>keytool</tt> command\n+     * @param keyStorePassword the password for the keystore\n+     */\n+    public HTTPSServerConfig(File keystore, String keyStorePassword) {\n+        super(DEFAULT_PORT, false);\n+        this.keystore = keystore;\n+        this.keyStorePassword = keyStorePassword;\n+    }\n \n-  /**\n-   * Parse command line options and load settings from property file.\n-   */\n-  HTTPSServerConfig(String[] args) {\n-    super(args);\n-    File config = null;\n-    for (int i = 0; i < args.length; i++) {\n-      if (\"--config\".equals(args[i])) {\n-        config = new File(args[++i]);\n-      }\n+    /**\n+     * @param serverPort       the port to bind to\n+     * @param verbose          when set to <tt>true</tt>, the input text will be logged in case there is an exception\n+     * @param keystore         a Java keystore file as created with the <tt>keytool</tt> command\n+     * @param keyStorePassword the password for the keystore\n+     */\n+    public HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword) {\n+        super(serverPort, verbose);\n+        this.keystore = keystore;\n+        this.keyStorePassword = keyStorePassword;\n     }\n-    if (config == null) {\n-      throw new IllegalConfigurationException(\"Parameter --config must be set and point to a property file\");\n+\n+    /**\n+     * @param serverPort       the port to bind to\n+     * @param verbose          when set to <tt>true</tt>, the input text will be logged in case there is an exception\n+     * @param keystore         a Java keystore file as created with the <tt>keytool</tt> command\n+     * @param keyStorePassword the password for the keystore\n+     * @since 2.1\n+     */\n+    HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword, int requestLimit,\n+                      int requestLimitPeriodInSeconds) {\n+        super(serverPort, verbose);\n+        this.keystore = keystore;\n+        this.keyStorePassword = keyStorePassword;\n+        this.requestLimit = requestLimit;\n+        this.requestLimitPeriodInSeconds = requestLimitPeriodInSeconds;\n     }\n-    try {\n-      Properties props = new Properties();\n-      try (FileInputStream fis = new FileInputStream(config)) {\n-        props.load(fis);\n-        keystore = new File(getProperty(props, \"keystore\", config));\n-        keyStorePassword = getProperty(props, \"password\", config);\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(\"Could not load properties from '\" + config + \"'\", e);\n+\n+    /**\n+     * Parse command line options and load settings from property file.\n+     */\n+    HTTPSServerConfig(String[] args) {\n+        super(args);\n+        File config = null;\n+        for (int i = 0; i < args.length; i++) {\n+            if (\"--config\".equals(args[i])) {\n+                config = new File(args[++i]);\n+            }\n+        }\n+        if (config == null) {\n+            throw new IllegalConfigurationException(\"Parameter --config must be set and point to a property file\");\n+        }\n+        try {\n+            Properties props = new Properties();\n+            try (FileInputStream fis = new FileInputStream(config)) {\n+                props.load(fis);\n+                keystore = new File(getProperty(props, \"keystore\", config));\n+                keyStorePassword = getProperty(props, \"password\", config);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Could not load properties from '\" + config + \"'\", e);\n+        }\n     }\n-  }\n \n-  File getKeystore() {\n-    return keystore;\n-  }\n+    File getKeystore() {\n+        return keystore;\n+    }\n \n-  String getKeyStorePassword() {\n-    return keyStorePassword;\n-  }\n+    String getKeyStorePassword() {\n+        return keyStorePassword;\n+    }\n \n }\n",
            "diff_size": 96
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/52/HTTPSServerConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/52/HTTPSServerConfig.java\nindex a35c0447387..4d73d3faa18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/52/HTTPSServerConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/52/HTTPSServerConfig.java\n@@ -102,4 +102,4 @@ public class HTTPSServerConfig extends HTTPServerConfig {\n     return keyStorePassword;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/52/HTTPSServerConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/52/HTTPSServerConfig.java\nindex a35c0447387..658ad875d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/52/HTTPSServerConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/52/HTTPSServerConfig.java\n@@ -26,20 +26,23 @@ import java.util.Properties;\n /**\n  * @since 2.0\n  */\n+\n+\n public class HTTPSServerConfig extends HTTPServerConfig {\n \n-  private final File keystore;\n-  private final String keyStorePassword;\n+    private final File keystore;\n+    private final String keyStorePassword;\n   \n   /**\n    * @param keystore a Java keystore file as created with the <tt>keytool</tt> command\n    * @param keyStorePassword the password for the keystore\n    */\n-  public HTTPSServerConfig(File keystore, String keyStorePassword) {\n-    super(DEFAULT_PORT, false);\n-    this.keystore = keystore;\n-    this.keyStorePassword = keyStorePassword;\n-  }\n+\n+    public HTTPSServerConfig(File keystore, String keyStorePassword) {\n+        super(DEFAULT_PORT, false);\n+        this.keystore = keystore;\n+        this.keyStorePassword = keyStorePassword;\n+    }\n \n   /**\n    * @param serverPort the port to bind to\n@@ -47,11 +50,12 @@ public class HTTPSServerConfig extends HTTPServerConfig {\n    * @param keystore a Java keystore file as created with the <tt>keytool</tt> command\n    * @param keyStorePassword the password for the keystore\n    */\n-  public HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword) {\n-    super(serverPort, verbose);\n-    this.keystore = keystore;\n-    this.keyStorePassword = keyStorePassword;\n-  }\n+\n+    public HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword) {\n+        super(serverPort, verbose);\n+        this.keystore = keystore;\n+        this.keyStorePassword = keyStorePassword;\n+    }\n \n   /**\n    * @param serverPort the port to bind to\n@@ -60,46 +64,51 @@ public class HTTPSServerConfig extends HTTPServerConfig {\n    * @param keyStorePassword the password for the keystore\n    * @since 2.1\n    */\n-  HTTPSServerConfig(int serverPort, boolean verbose, File keystore, String keyStorePassword, int requestLimit, int requestLimitPeriodInSeconds) {\n+\n+    HTTPSServerConfig(int serverPort,\n+                      boolean verbose,\n+                      File keystore,\n+                      String keyStorePassword,\n+                      int requestLimit, int requestLimitPeriodInSeconds) {\n     super(serverPort, verbose);\n     this.keystore = keystore;\n     this.keyStorePassword = keyStorePassword;\n     this.requestLimit = requestLimit;\n     this.requestLimitPeriodInSeconds = requestLimitPeriodInSeconds;\n-  }\n+    }\n \n   /**\n    * Parse command line options and load settings from property file.\n    */\n-  HTTPSServerConfig(String[] args) {\n+\n+    HTTPSServerConfig(String[] args) {\n     super(args);\n     File config = null;\n     for (int i = 0; i < args.length; i++) {\n-      if (\"--config\".equals(args[i])) {\n-        config = new File(args[++i]);\n-      }\n+        if (\"--config\".equals(args[i])) {\n+            config = new File(args[++i]);\n+        }\n     }\n     if (config == null) {\n-      throw new IllegalConfigurationException(\"Parameter --config must be set and point to a property file\");\n+        throw new IllegalConfigurationException(\"Parameter --config must be set and point to a property file\");\n     }\n     try {\n-      Properties props = new Properties();\n-      try (FileInputStream fis = new FileInputStream(config)) {\n+        Properties props = new Properties();\n+        try (FileInputStream fis = new FileInputStream(config)) {\n         props.load(fis);\n         keystore = new File(getProperty(props, \"keystore\", config));\n         keyStorePassword = getProperty(props, \"password\", config);\n-      }\n+        }\n     } catch (IOException e) {\n       throw new RuntimeException(\"Could not load properties from '\" + config + \"'\", e);\n     }\n-  }\n+    }\n \n-  File getKeystore() {\n+    File getKeystore() {\n     return keystore;\n-  }\n+    }\n \n-  String getKeyStorePassword() {\n+    String getKeyStorePassword() {\n     return keyStorePassword;\n-  }\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}