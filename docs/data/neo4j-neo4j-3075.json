{
    "project_name": "neo4j-neo4j",
    "error_id": "3075",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3075/SpmcLongQueue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3075/SpmcLongQueue.java\nindex a717af57c63..cb28f8c70c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3075/SpmcLongQueue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3075/SpmcLongQueue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.id.indexed;\n \n import java.util.concurrent.atomic.AtomicLong;\n@@ -36,31 +37,31 @@ class SpmcLongQueue implements ConcurrentLongQueue\n     private final AtomicLong readSeq = new AtomicLong();\n     private final AtomicLong writeSeq = new AtomicLong();\n \n-    SpmcLongQueue( int capacity )\n+    SpmcLongQueue(int capacity)\n     {\n-        requirePowerOfTwo( capacity );\n+        requirePowerOfTwo(capacity);\n         this.idxMask = capacity - 1;\n-        this.array = new AtomicLongArray( capacity );\n+        this.array = new AtomicLongArray(capacity);\n     }\n \n     @Override\n-    public boolean offer( long value )\n+    public boolean offer(long value)\n     {\n         final long currentWriteSeq = writeSeq.get();\n         final long currentReadSeq = readSeq.get();\n-        final int writeIdx = idx( currentWriteSeq );\n-        final int readIdx = idx( currentReadSeq );\n-        if ( writeIdx == readIdx && currentWriteSeq != currentReadSeq )\n+        final int writeIdx = idx(currentWriteSeq);\n+        final int readIdx = idx(currentReadSeq);\n+        if (writeIdx == readIdx && currentWriteSeq != currentReadSeq)\n         {\n             return false;\n         }\n-        array.set( writeIdx, value );\n+        array.set(writeIdx, value);\n         writeSeq.incrementAndGet();\n         return true;\n     }\n \n     @Override\n-    public long takeOrDefault( long defaultValue )\n+    public long takeOrDefault(long defaultValue)\n     {\n         long currentReadSeq;\n         long currentWriteSeq;\n@@ -69,13 +70,13 @@ class SpmcLongQueue implements ConcurrentLongQueue\n         {\n             currentReadSeq = readSeq.get();\n             currentWriteSeq = writeSeq.get();\n-            if ( currentReadSeq == currentWriteSeq )\n+            if (currentReadSeq == currentWriteSeq)\n             {\n                 return defaultValue;\n             }\n-            value = array.get( idx( currentReadSeq ) );\n+            value = array.get(idx(currentReadSeq));\n         }\n-        while ( !readSeq.compareAndSet( currentReadSeq, currentReadSeq + 1 ) );\n+        while (!readSeq.compareAndSet(currentReadSeq, currentReadSeq + 1));\n         return value;\n     }\n \n@@ -91,7 +92,7 @@ class SpmcLongQueue implements ConcurrentLongQueue\n         // Why do we need max on this value? Well the size being returned is a rough estimate since we're reading two atomic longs un-atomically.\n         // We may end up in a scenario where writeSeq is read and then both writeSeq as well as readSeq moves along so that when later\n         // reading readSeq it will be bigger than writeSeq. This is fine, but would look strange on the receiving end, so let it be 0 instead.\n-        return toIntExact( max( 0, writeSeq.get() - readSeq.get() ) );\n+        return toIntExact(max(0, writeSeq.get() - readSeq.get()));\n     }\n \n     /**\n@@ -100,11 +101,11 @@ class SpmcLongQueue implements ConcurrentLongQueue\n     @Override\n     public void clear()\n     {\n-        readSeq.set( writeSeq.get() );\n+        readSeq.set(writeSeq.get());\n     }\n \n-    private int idx( long seq )\n+    private int idx(long seq)\n     {\n-        return toIntExact( seq & idxMask );\n+        return toIntExact(seq & idxMask);\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}