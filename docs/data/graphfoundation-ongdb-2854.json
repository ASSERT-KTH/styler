{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2854",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2854/RightmostInChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2854/RightmostInChain.java\nindex 01591bb5666..a553fa3aedd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2854/RightmostInChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2854/RightmostInChain.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -33,82 +34,82 @@ import static org.neo4j.index.internal.gbptree.TreeNode.NO_NODE_FLAG;\n  */\n class RightmostInChain\n {\n-    private long currentRightmostNode = TreeNode.NO_NODE_FLAG;\n-    private long currentRightmostRightSiblingPointer = TreeNode.NO_NODE_FLAG;\n-    private long currentRightmostRightSiblingPointerGeneration;\n-    private long currentRightmostNodeGeneration;\n-\n-    void assertNext( PageCursor cursor, long newRightmostNodeGeneration,\n-            long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration,\n-            long newRightmostRightSiblingPointer, long newRightmostRightSiblingPointerGeneration )\n-    {\n-        long newRightmostNode = cursor.getCurrentPageId();\n-\n-        // Assert we have reached expected node and that we agree about being siblings\n-        StringBuilder errorMessageBuilder = new StringBuilder();\n-        if ( newRightmostLeftSiblingPointer != currentRightmostNode )\n-        {\n-            errorMessageBuilder.append( format( \"Sibling pointer does align with tree structure%n\" ) );\n-        }\n-        if ( currentRightmostNodeGeneration > newRightmostLeftSiblingPointerGeneration && currentRightmostNode != NO_NODE_FLAG )\n-        {\n-            errorMessageBuilder.append( format( \"Sibling pointer generation differs from expected%n\" ) );\n-        }\n-        if ( newRightmostNode != currentRightmostRightSiblingPointer &&\n-                (currentRightmostRightSiblingPointer != NO_NODE_FLAG || currentRightmostNode != NO_NODE_FLAG) )\n-        {\n-            errorMessageBuilder.append( format( \"Sibling pointer does not align with tree structure%n\" ) );\n-        }\n-        if ( currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration &&\n-                currentRightmostRightSiblingPointer != NO_NODE_FLAG )\n-        {\n-            errorMessageBuilder.append( format( \"Sibling pointer generation differs from expected%n\" ) );\n-        }\n+  private long currentRightmostNode = TreeNode.NO_NODE_FLAG;\n+  private long currentRightmostRightSiblingPointer = TreeNode.NO_NODE_FLAG;\n+  private long currentRightmostRightSiblingPointerGeneration;\n+  private long currentRightmostNodeGeneration;\n \n-        String errorMessage = errorMessageBuilder.toString();\n-        if ( !errorMessage.equals( \"\" ) )\n-        {\n-            errorMessage = addPatternToExceptionMessage( newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n-                    newRightmostLeftSiblingPointerGeneration, newRightmostNode, errorMessage );\n-            throw new TreeInconsistencyException( errorMessage );\n-        }\n+  void assertNext(PageCursor cursor, long newRightmostNodeGeneration,\n+                  long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration,\n+                  long newRightmostRightSiblingPointer, long newRightmostRightSiblingPointerGeneration)\n+  {\n+    long newRightmostNode = cursor.getCurrentPageId();\n \n-        // Update currentRightmostNode = newRightmostNode;\n-        currentRightmostNode = newRightmostNode;\n-        currentRightmostNodeGeneration = newRightmostNodeGeneration;\n-        currentRightmostRightSiblingPointer = newRightmostRightSiblingPointer;\n-        currentRightmostRightSiblingPointerGeneration = newRightmostRightSiblingPointerGeneration;\n+    // Assert we have reached expected node and that we agree about being siblings\n+    StringBuilder errorMessageBuilder = new StringBuilder();\n+    if (newRightmostLeftSiblingPointer != currentRightmostNode)\n+    {\n+      errorMessageBuilder.append(format(\"Sibling pointer does align with tree structure%n\"));\n     }\n-\n-    private String addPatternToExceptionMessage( long newRightmostGeneration, long leftSibling,\n-            long leftSiblingGeneration, long newRightmost, String errorMessage )\n+    if (currentRightmostNodeGeneration > newRightmostLeftSiblingPointerGeneration && currentRightmostNode != NO_NODE_FLAG)\n     {\n-        return format( \"%s\" +\n-                        \"  Left siblings view:  %s%n\" +\n-                        \"  Right siblings view: %s%n\", errorMessage,\n-                leftPattern( currentRightmostNode, currentRightmostNodeGeneration,\n-                        currentRightmostRightSiblingPointerGeneration,\n-                        currentRightmostRightSiblingPointer ),\n-                rightPattern( newRightmost, newRightmostGeneration, leftSiblingGeneration, leftSibling ) );\n+      errorMessageBuilder.append(format(\"Sibling pointer generation differs from expected%n\"));\n     }\n-\n-    private String leftPattern( long actualLeftSibling, long actualLeftSiblingGeneration,\n-            long expectedRightSiblingGeneration, long expectedRightSibling )\n+    if (newRightmostNode != currentRightmostRightSiblingPointer &&\n+        (currentRightmostRightSiblingPointer != NO_NODE_FLAG || currentRightmostNode != NO_NODE_FLAG))\n     {\n-        return format( \"{%d(%d)}-(%d)->{%d}\", actualLeftSibling, actualLeftSiblingGeneration, expectedRightSiblingGeneration,\n-                expectedRightSibling );\n+      errorMessageBuilder.append(format(\"Sibling pointer does not align with tree structure%n\"));\n     }\n-\n-    private String rightPattern( long actualRightSibling, long actualRightSiblingGeneration,\n-            long expectedLeftSiblingGeneration, long expectedLeftSibling )\n+    if (currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration &&\n+        currentRightmostRightSiblingPointer != NO_NODE_FLAG)\n     {\n-        return format( \"{%d}<-(%d)-{%d(%d)}\", expectedLeftSibling, expectedLeftSiblingGeneration, actualRightSibling,\n-                actualRightSiblingGeneration );\n+      errorMessageBuilder.append(format(\"Sibling pointer generation differs from expected%n\"));\n     }\n \n-    void assertLast()\n+    String errorMessage = errorMessageBuilder.toString();\n+    if (!errorMessage.equals(\"\"))\n     {\n-        assert currentRightmostRightSiblingPointer == NO_NODE_FLAG : \"Expected rightmost right sibling to be \" + NO_NODE_FLAG\n-                + \" but was \" + currentRightmostRightSiblingPointer;\n+      errorMessage = addPatternToExceptionMessage(newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n+          newRightmostLeftSiblingPointerGeneration, newRightmostNode, errorMessage);\n+      throw new TreeInconsistencyException(errorMessage);\n     }\n+\n+    // Update currentRightmostNode = newRightmostNode;\n+    currentRightmostNode = newRightmostNode;\n+    currentRightmostNodeGeneration = newRightmostNodeGeneration;\n+    currentRightmostRightSiblingPointer = newRightmostRightSiblingPointer;\n+    currentRightmostRightSiblingPointerGeneration = newRightmostRightSiblingPointerGeneration;\n+  }\n+\n+  private String addPatternToExceptionMessage(long newRightmostGeneration, long leftSibling,\n+                                              long leftSiblingGeneration, long newRightmost, String errorMessage)\n+  {\n+    return format(\"%s\" +\n+            \"  Left siblings view:  %s%n\" +\n+            \"  Right siblings view: %s%n\", errorMessage,\n+        leftPattern(currentRightmostNode, currentRightmostNodeGeneration,\n+            currentRightmostRightSiblingPointerGeneration,\n+            currentRightmostRightSiblingPointer),\n+        rightPattern(newRightmost, newRightmostGeneration, leftSiblingGeneration, leftSibling));\n+  }\n+\n+  private String leftPattern(long actualLeftSibling, long actualLeftSiblingGeneration,\n+                             long expectedRightSiblingGeneration, long expectedRightSibling)\n+  {\n+    return format(\"{%d(%d)}-(%d)->{%d}\", actualLeftSibling, actualLeftSiblingGeneration, expectedRightSiblingGeneration,\n+        expectedRightSibling);\n+  }\n+\n+  private String rightPattern(long actualRightSibling, long actualRightSiblingGeneration,\n+                              long expectedLeftSiblingGeneration, long expectedLeftSibling)\n+  {\n+    return format(\"{%d}<-(%d)-{%d(%d)}\", expectedLeftSibling, expectedLeftSiblingGeneration, actualRightSibling,\n+        actualRightSiblingGeneration);\n+  }\n+\n+  void assertLast()\n+  {\n+    assert currentRightmostRightSiblingPointer == NO_NODE_FLAG : \"Expected rightmost right sibling to be \" + NO_NODE_FLAG\n+        + \" but was \" + currentRightmostRightSiblingPointer;\n+  }\n }\n",
            "diff_size": 108
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "36",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2854/RightmostInChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2854/RightmostInChain.java\nindex 01591bb5666..77137b9a41b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2854/RightmostInChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2854/RightmostInChain.java\n@@ -50,16 +50,18 @@ class RightmostInChain\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer does align with tree structure%n\" ) );\n         }\n-        if ( currentRightmostNodeGeneration > newRightmostLeftSiblingPointerGeneration && currentRightmostNode != NO_NODE_FLAG )\n+\n+if ( currentRightmostNodeGeneration> newRightmostLeftSiblingPointerGeneration && currentRightmostNode != NO_NODE_FLAG )\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer generation differs from expected%n\" ) );\n         }\n-        if ( newRightmostNode != currentRightmostRightSiblingPointer &&\n-                (currentRightmostRightSiblingPointer != NO_NODE_FLAG || currentRightmostNode != NO_NODE_FLAG) )\n+\n+if ( newRightmostNode != currentRightmostRightSiblingPointer && ( currentRightmostRightSiblingPointer != NO_NODE_FLAG || currentRightmostNode != NO_NODE_FLAG) )\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer does not align with tree structure%n\" ) );\n         }\n-        if ( currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration &&\n+\n+if ( currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration &&\n                 currentRightmostRightSiblingPointer != NO_NODE_FLAG )\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer generation differs from expected%n\" ) );\n@@ -70,7 +72,7 @@ class RightmostInChain\n         {\n             errorMessage = addPatternToExceptionMessage( newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n                     newRightmostLeftSiblingPointerGeneration, newRightmostNode, errorMessage );\n-            throw new TreeInconsistencyException( errorMessage );\n+    throw new TreeInconsistencyException( errorMessage );\n         }\n \n         // Update currentRightmostNode = newRightmostNode;\n@@ -83,13 +85,8 @@ class RightmostInChain\n     private String addPatternToExceptionMessage( long newRightmostGeneration, long leftSibling,\n             long leftSiblingGeneration, long newRightmost, String errorMessage )\n     {\n-        return format( \"%s\" +\n-                        \"  Left siblings view:  %s%n\" +\n-                        \"  Right siblings view: %s%n\", errorMessage,\n-                leftPattern( currentRightmostNode, currentRightmostNodeGeneration,\n-                        currentRightmostRightSiblingPointerGeneration,\n-                        currentRightmostRightSiblingPointer ),\n-                rightPattern( newRightmost, newRightmostGeneration, leftSiblingGeneration, leftSibling ) );\n+        return format( \"%s\" + \"  Left siblings view:  %s%n\" + \"  Right siblings view: %s%n\", errorMessage, leftPattern( currentRightmostNode, currentRightmostNodeGeneration,\n+                        currentRightmostRightSiblingPointerGeneration, currentRightmostRightSiblingPointer ), rightPattern( newRightmost, newRightmostGeneration, leftSiblingGeneration, leftSibling ) );\n     }\n \n     private String leftPattern( long actualLeftSibling, long actualLeftSiblingGeneration,\n@@ -108,7 +105,6 @@ class RightmostInChain\n \n     void assertLast()\n     {\n-        assert currentRightmostRightSiblingPointer == NO_NODE_FLAG : \"Expected rightmost right sibling to be \" + NO_NODE_FLAG\n-                + \" but was \" + currentRightmostRightSiblingPointer;\n+        assert currentRightmostRightSiblingPointer == NO_NODE_FLAG : \"Expected rightmost right sibling to be \" + NO_NODE_FLAG + \" but was \" + currentRightmostRightSiblingPointer;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "column": "87",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "column": "69",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "125",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "62",
                    "column": "88",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 351).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "column": "67",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "99",
                    "column": "125",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2854/RightmostInChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2854/RightmostInChain.java\nindex 01591bb5666..c8980a3e605 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2854/RightmostInChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2854/RightmostInChain.java\n@@ -20,8 +20,8 @@\n package org.neo4j.index.internal.gbptree;\n \n import org.neo4j.io.pagecache.PageCursor;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.index.internal.gbptree.TreeNode.NO_NODE_FLAG;\n \n /**\n@@ -31,16 +31,14 @@ import static org.neo4j.index.internal.gbptree.TreeNode.NO_NODE_FLAG;\n  * <p>\n  * When assertNext has been called on node that is expected to be last in chain, use {@link #assertLast()} to verify.\n  */\n+\n class RightmostInChain\n {\n     private long currentRightmostNode = TreeNode.NO_NODE_FLAG;\n     private long currentRightmostRightSiblingPointer = TreeNode.NO_NODE_FLAG;\n     private long currentRightmostRightSiblingPointerGeneration;\n     private long currentRightmostNodeGeneration;\n-\n-    void assertNext( PageCursor cursor, long newRightmostNodeGeneration,\n-            long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration,\n-            long newRightmostRightSiblingPointer, long newRightmostRightSiblingPointerGeneration )\n+    void assertNext( PageCursor cursor, long newRightmostNodeGeneration, long newRightmostLeftSiblingPointer, long newRightmostLeftSiblingPointerGeneration, long newRightmostRightSiblingPointer, long newRightmostRightSiblingPointerGeneration )\n     {\n         long newRightmostNode = cursor.getCurrentPageId();\n \n@@ -50,65 +48,54 @@ class RightmostInChain\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer does align with tree structure%n\" ) );\n         }\n-        if ( currentRightmostNodeGeneration > newRightmostLeftSiblingPointerGeneration && currentRightmostNode != NO_NODE_FLAG )\n+\n+        if ( currentRightmostNodeGeneration > newRightmostLeftSiblingPointerGeneration&& currentRightmostNode != NO_NODE_FLAG )\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer generation differs from expected%n\" ) );\n         }\n-        if ( newRightmostNode != currentRightmostRightSiblingPointer &&\n-                (currentRightmostRightSiblingPointer != NO_NODE_FLAG || currentRightmostNode != NO_NODE_FLAG) )\n+\n+        if ( newRightmostNode != currentRightmostRightSiblingPointer&& ( currentRightmostRightSiblingPointer != NO_NODE_FLAG|| currentRightmostNode != NO_NODE_FLAG) )\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer does not align with tree structure%n\" ) );\n         }\n-        if ( currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration &&\n-                currentRightmostRightSiblingPointer != NO_NODE_FLAG )\n+\n+        if ( currentRightmostRightSiblingPointerGeneration < newRightmostNodeGeneration&& currentRightmostRightSiblingPointer != NO_NODE_FLAG )\n         {\n             errorMessageBuilder.append( format( \"Sibling pointer generation differs from expected%n\" ) );\n         }\n \n         String errorMessage = errorMessageBuilder.toString();\n-        if ( !errorMessage.equals( \"\" ) )\n+        if ( ! errorMessage.equals( \"\" ) )\n         {\n-            errorMessage = addPatternToExceptionMessage( newRightmostNodeGeneration, newRightmostLeftSiblingPointer,\n-                    newRightmostLeftSiblingPointerGeneration, newRightmostNode, errorMessage );\n+            errorMessage = addPatternToExceptionMessage( newRightmostNodeGeneration, newRightmostLeftSiblingPointer, newRightmostLeftSiblingPointerGeneration, newRightmostNode, errorMessage );\n             throw new TreeInconsistencyException( errorMessage );\n         }\n \n         // Update currentRightmostNode = newRightmostNode;\n+\n         currentRightmostNode = newRightmostNode;\n         currentRightmostNodeGeneration = newRightmostNodeGeneration;\n         currentRightmostRightSiblingPointer = newRightmostRightSiblingPointer;\n         currentRightmostRightSiblingPointerGeneration = newRightmostRightSiblingPointerGeneration;\n     }\n \n-    private String addPatternToExceptionMessage( long newRightmostGeneration, long leftSibling,\n-            long leftSiblingGeneration, long newRightmost, String errorMessage )\n+    private String addPatternToExceptionMessage( long newRightmostGeneration, long leftSibling, long leftSiblingGeneration, long newRightmost, String errorMessage )\n     {\n-        return format( \"%s\" +\n-                        \"  Left siblings view:  %s%n\" +\n-                        \"  Right siblings view: %s%n\", errorMessage,\n-                leftPattern( currentRightmostNode, currentRightmostNodeGeneration,\n-                        currentRightmostRightSiblingPointerGeneration,\n-                        currentRightmostRightSiblingPointer ),\n-                rightPattern( newRightmost, newRightmostGeneration, leftSiblingGeneration, leftSibling ) );\n+        return format( \"%s\" + \"  Left siblings view:  %s%n\" + \"  Right siblings view: %s%n\", errorMessage, leftPattern( currentRightmostNode, currentRightmostNodeGeneration, currentRightmostRightSiblingPointerGeneration, currentRightmostRightSiblingPointer ), rightPattern( newRightmost, newRightmostGeneration, leftSiblingGeneration, leftSibling ) );\n     }\n \n-    private String leftPattern( long actualLeftSibling, long actualLeftSiblingGeneration,\n-            long expectedRightSiblingGeneration, long expectedRightSibling )\n+    private String leftPattern( long actualLeftSibling, long actualLeftSiblingGeneration, long expectedRightSiblingGeneration, long expectedRightSibling )\n     {\n-        return format( \"{%d(%d)}-(%d)->{%d}\", actualLeftSibling, actualLeftSiblingGeneration, expectedRightSiblingGeneration,\n-                expectedRightSibling );\n+        return format( \"{%d(%d)}-(%d)->{%d}\", actualLeftSibling, actualLeftSiblingGeneration, expectedRightSiblingGeneration, expectedRightSibling );\n     }\n \n-    private String rightPattern( long actualRightSibling, long actualRightSiblingGeneration,\n-            long expectedLeftSiblingGeneration, long expectedLeftSibling )\n+    private String rightPattern( long actualRightSibling, long actualRightSiblingGeneration, long expectedLeftSiblingGeneration, long expectedLeftSibling )\n     {\n-        return format( \"{%d}<-(%d)-{%d(%d)}\", expectedLeftSibling, expectedLeftSiblingGeneration, actualRightSibling,\n-                actualRightSiblingGeneration );\n+        return format( \"{%d}<-(%d)-{%d(%d)}\", expectedLeftSibling, expectedLeftSiblingGeneration, actualRightSibling, actualRightSiblingGeneration );\n     }\n \n     void assertLast()\n     {\n-        assert currentRightmostRightSiblingPointer == NO_NODE_FLAG : \"Expected rightmost right sibling to be \" + NO_NODE_FLAG\n-                + \" but was \" + currentRightmostRightSiblingPointer;\n+        assert currentRightmostRightSiblingPointer == NO_NODE_FLAG: \"Expected rightmost right sibling to be \" + NO_NODE_FLAG+ \" but was \" + currentRightmostRightSiblingPointer;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}