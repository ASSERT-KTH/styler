{
    "project_name": "agentsoz-jill",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "111",
                "column": "5",
                "severity": "warning",
                "message": "'}' at column 5 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "        }\n      }\n    } while (true);\n    logger.debug(\"Pool {} is exiting\", poolid);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler/2/IntentionSelector.java\nindex fcc92fdf1bb..6b876bf5c3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler/2/IntentionSelector.java\n@@ -108,7 +108,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+    while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "111",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/intellij/2/IntentionSelector.java\nindex fcc92fdf1bb..23acd138eab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/intellij/2/IntentionSelector.java\n@@ -5,11 +5,11 @@ package io.github.agentsoz.jill.core;\n  * %% This program is free software: you can redistribute it and/or modify it under the terms of the\n  * GNU Lesser General Public License as published by the Free Software Foundation, either version 3\n  * of the License, or (at your option) any later version.\n- * \n+ *\n  * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n  * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n  * General Lesser Public License for more details.\n- * \n+ *\n  * You should have received a copy of the GNU General Lesser Public License along with this program.\n  * If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>. #L%\n  */\n@@ -53,9 +53,9 @@ public class IntentionSelector implements Runnable {\n \n   /**\n    * Constructs a new intention selector to manage a set of agents.\n-   * \n+   *\n    * @param poolid ID of this pool (must follow the sequence 0,1,2,3,...).\n-   * @param seed to initialise the random number generator\n+   * @param seed   to initialise the random number generator\n    */\n   public IntentionSelector(int poolid, long seed) {\n     this.poolid = poolid;\n@@ -115,8 +115,8 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Checks if this agent's execution stack is valid. The stack is valid if it is not null or empty\n    * and has not exceeded the maximum size limit of 255.\n-   * \n-   * @param agent the agent whose stack is to be checked\n+   *\n+   * @param agent               the agent whose stack is to be checked\n    * @param agentExecutionStack that agent's execution stack\n    * @return true if stack is valid, false otherwise\n    */\n@@ -139,7 +139,7 @@ public class IntentionSelector implements Runnable {\n \n   /**\n    * Removes the given list of agents from the list of active agents.\n-   * \n+   *\n    * @param toRemove the list of agent IDs to remove\n    */\n   private void removeFinishedAgents(Set<Integer> toRemove) {\n@@ -155,11 +155,11 @@ public class IntentionSelector implements Runnable {\n    * Manages the goal at the top of the execution stack of an agent. All relevant plans are\n    * evaluated to see if their context conditions hold. Plans deemed applicable are then added to\n    * the list of bindings from which a plan instane will be eventually selected.\n-   * \n-   * @param agentIndex the agent's index\n-   * @param agent the agent in question\n+   *\n+   * @param agentIndex          the agent's index\n+   * @param agent               the agent in question\n    * @param agentExecutionStack the agent's execution stack\n-   * @param node the goal at the top of the xecution stack\n+   * @param node                the goal at the top of the xecution stack\n    * @return false if something went wrong, true otherwise\n    */\n   private boolean manageGoal(int agentIndex, Agent agent, Stack255 agentExecutionStack, Goal node) {\n@@ -216,14 +216,14 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Manages the plan at the top of this agent's execution stack. If the plan has finished it is\n    * removed, else it is progresses by a single {@link PlanStep}.\n-   * \n-   * @param agentIndex the agent in question\n+   *\n+   * @param agentIndex          the agent in question\n    * @param agentExecutionStack this agent's execution stack\n-   * @param node the plan at the top of the execution stack\n-   * @param toRemove the remove list to which this agent should be added if the plan has finished\n+   * @param node                the plan at the top of the execution stack\n+   * @param toRemove            the remove list to which this agent should be added if the plan has finished\n    */\n   private void managePlan(int agentIndex, Stack255 agentExecutionStack, Plan node,\n-      Set<Integer> toRemove) {\n+                          Set<Integer> toRemove) {\n     // If done then pop this plan/goal\n     if (node.hasfinished()) {\n       logger.debug(Log.logPrefix(agentIndex) + \" finished executing plan \"\n@@ -312,7 +312,7 @@ public class IntentionSelector implements Runnable {\n \n   /**\n    * Checks if this intention selector is idle.\n-   * \n+   *\n    * @return true if idle, false otherwise\n    */\n   public boolean isIdle() {\n@@ -333,10 +333,9 @@ public class IntentionSelector implements Runnable {\n \n   /**\n    * Sets the idle status of the given agent managed by this intention selector.\n-   * \n-   * \n+   *\n    * @param agentId ID of the agent whose idle status is being set\n-   * @param idle the new idle status of this agent\n+   * @param idle    the new idle status of this agent\n    */\n   // FIXME: Threading issue when external threads changes activeagents\n   // and this thread is still iterating over activeagents\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 8, indentation should be the same level as line 181.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "208",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "209",
                    "severity": "warning",
                    "message": "'synchronized' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "230",
                    "severity": "warning",
                    "message": "'synchronized' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "244",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/naturalize/2/IntentionSelector.java\nindex fcc92fdf1bb..6aa781a7015 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/naturalize/2/IntentionSelector.java\n@@ -108,7 +108,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n@@ -171,14 +172,12 @@ public class IntentionSelector implements Runnable {\n     bindings.clear();\n     for (int p = 0; p < ptypes.length; p++) {\n       PlanType ptype = (PlanType) GlobalState.planTypes.get(ptypes[p]);\n-\n-      try {\n+try {\n         // Create an object of this Plan type, so we can\n         // access its context condition\n-        Plan planInstance =\n-            (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class)\n-                .newInstance(GlobalState.agents.get(agentIndex), node, \"p\"));\n-        // Clear previously buffered context results if any\n+        Plan planInstance = (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class).newInstance(GlobalState.agents.get(agentIndex), node, \"p\"));\n+\n+// Clear previously buffered context results if any\n         agent.clearLastResults();\n         // Evaluate the context condition\n         if (planInstance.context()) {\n@@ -206,9 +205,8 @@ public class IntentionSelector implements Runnable {\n     // Now push the plan on to the intention stack\n     synchronized (agentExecutionStack) {\n       logger.debug(Log.logPrefix(agent.getId()) + \" choose an instance of plan \"\n-          + planInstance.getClass().getSimpleName() + \" to handle goal \"\n-          + gtype.getClass().getSimpleName());\n-      agentExecutionStack.push(planInstance);\n+          + planInstance.getClass().getSimpleName() + \" to handle goal \" + gtype.getClass().getSimpleName());\n+agentExecutionStack.push(planInstance);\n     }\n     return true;\n   }\n@@ -228,7 +226,8 @@ public class IntentionSelector implements Runnable {\n     if (node.hasfinished()) {\n       logger.debug(Log.logPrefix(agentIndex) + \" finished executing plan \"\n           + node.getClass().getSimpleName());\n-      synchronized (agentExecutionStack) {\n+\n+synchronized (agentExecutionStack) {\n         // Pop the plan off the stack\n         agentExecutionStack.pop();\n         // Pop the goal off the stack\n@@ -242,7 +241,7 @@ public class IntentionSelector implements Runnable {\n     } else {\n       logger.debug(Log.logPrefix(agentIndex) + \" is executing a step of plan \"\n           + node.getClass().getSimpleName());\n-      node.step();\n+node.step();\n     }\n   }\n \n@@ -354,4 +353,4 @@ public class IntentionSelector implements Runnable {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 10, expected is 17, indentation should be the same level as line 100.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'Agent' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "column": "37",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "38",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "55",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "79",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "103",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "129",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "199",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "208",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "225",
                    "severity": "warning",
                    "message": "'Stack255' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "229",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/codebuff/2/IntentionSelector.java\nindex fcc92fdf1bb..1ae5cee8da6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/codebuff/2/IntentionSelector.java\n@@ -14,6 +14,8 @@ package io.github.agentsoz.jill.core;\n  * If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>. #L%\n  */\n \n+\n+\n import io.github.agentsoz.jill.Main;\n import io.github.agentsoz.jill.config.GlobalConstant;\n import io.github.agentsoz.jill.core.beliefbase.Belief;\n@@ -26,10 +28,8 @@ import io.github.agentsoz.jill.struct.GoalType;\n import io.github.agentsoz.jill.struct.PlanType;\n import io.github.agentsoz.jill.util.Log;\n import io.github.agentsoz.jill.util.Stack255;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.lang.reflect.InvocationTargetException;\n import java.util.HashSet;\n import java.util.LinkedHashSet;\n@@ -39,12 +39,10 @@ import java.util.Set;\n public class IntentionSelector implements Runnable {\n \n   private final Logger logger = LoggerFactory.getLogger(Main.LOGGER_NAME);\n-\n   private final int poolid;\n   private final Set<Integer> activeAgents;\n   Set<Integer> extToRemove;\n   Set<Integer> extToAdd;\n-\n   private final Object lock;\n   private boolean hasMessage;\n   private boolean isIdle;\n@@ -57,6 +55,7 @@ public class IntentionSelector implements Runnable {\n    * @param poolid ID of this pool (must follow the sequence 0,1,2,3,...).\n    * @param seed to initialise the random number generator\n    */\n+\n   public IntentionSelector(int poolid, long seed) {\n     this.poolid = poolid;\n     this.lock = new Object();\n@@ -72,6 +71,7 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Runs this intentions selction thread.\n    */\n+\n   public void run() {\n     Set<Integer> toRemove = new HashSet<Integer>();\n     do {\n@@ -97,8 +97,8 @@ public class IntentionSelector implements Runnable {\n           managePlan(i, agentExecutionStack, (Plan) node, toRemove);\n         } else if (node instanceof Goal) {\n           // If it is a goal then find a plan for it and put it on the stack\n-          manageGoal(i, agent, agentExecutionStack, (Goal) node);\n-        }\n+                 manageGoal(i, agent, agentExecutionStack, (Goal) node);\n+               }\n       }\n       // remove agents that have finished executing plans and have gone idle in this cycle\n       removeFinishedAgents(toRemove);\n@@ -108,7 +108,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+while(true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n@@ -120,6 +121,7 @@ public class IntentionSelector implements Runnable {\n    * @param agentExecutionStack that agent's execution stack\n    * @return true if stack is valid, false otherwise\n    */\n+\n   private boolean isStackValid(Agent agent, Stack255 agentExecutionStack) {\n     if (agentExecutionStack == null) {\n       return false;\n@@ -130,8 +132,7 @@ public class IntentionSelector implements Runnable {\n       return false;\n     }\n     if (esSize >= 255) {\n-      logger.error(\"{} execution stack reached size limit of 255. Cannot continue.\",\n-          Log.logPrefix(agent.getId()));\n+      logger.error(\"{} execution stack reached size limit of 255. Cannot continue.\", Log.logPrefix(agent.getId()));\n       return false;\n     }\n     return true;\n@@ -142,6 +143,7 @@ public class IntentionSelector implements Runnable {\n    * \n    * @param toRemove the list of agent IDs to remove\n    */\n+\n   private void removeFinishedAgents(Set<Integer> toRemove) {\n     if (!toRemove.isEmpty()) {\n       for (int i : toRemove) {\n@@ -162,7 +164,10 @@ public class IntentionSelector implements Runnable {\n    * @param node the goal at the top of the xecution stack\n    * @return false if something went wrong, true otherwise\n    */\n-  private boolean manageGoal(int agentIndex, Agent agent, Stack255 agentExecutionStack, Goal node) {\n+\n+  private boolean manageGoal(int agentIndex,\n+    Agent agent,\n+      Stack255 agentExecutionStack, Goal node) {\n     // Get the goal type for this goal\n     GoalType gtype = (GoalType) GlobalState.goalTypes.find(node.getClass().getName());\n     byte[] ptypes = gtype.getChildren();\n@@ -171,13 +176,10 @@ public class IntentionSelector implements Runnable {\n     bindings.clear();\n     for (int p = 0; p < ptypes.length; p++) {\n       PlanType ptype = (PlanType) GlobalState.planTypes.get(ptypes[p]);\n-\n       try {\n         // Create an object of this Plan type, so we can\n         // access its context condition\n-        Plan planInstance =\n-            (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class)\n-                .newInstance(GlobalState.agents.get(agentIndex), node, \"p\"));\n+        Plan planInstance = (Plan) (ptype.getPlanClass().getConstructor(Agent.class, Goal.class, String.class).newInstance(GlobalState.agents.get(agentIndex), node, \"p\"));\n         // Clear previously buffered context results if any\n         agent.clearLastResults();\n         // Evaluate the context condition\n@@ -187,16 +189,14 @@ public class IntentionSelector implements Runnable {\n           // Add the results to the bindings\n           bindings.add(planInstance, (results == null) ? null : new LinkedHashSet<Belief>(results));\n         }\n-      } catch (NoSuchMethodException | SecurityException | InstantiationException\n-          | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+      } catch (NoSuchMethodException|SecurityException| InstantiationException| IllegalAccessException| IllegalArgumentException| InvocationTargetException e) {\n         logger.error(\"Could not create plan object of type \" + ptype.getClass().getName(), e);\n       }\n     }\n     int numBindings = bindings.size();\n     if (numBindings == 0) {\n       // No plan options for this goal at this point in time, so move to the next agent\n-      logger.debug(Log.logPrefix(agent.getId()) + \" has no applicable plans for goal \" + gtype\n-          + \" and will continue to wait indefinitely\");\n+      logger.debug(Log.logPrefix(agent.getId()) + \" has no applicable plans for goal \" + gtype + \" and will continue to wait indefinitely\");\n       return false;\n     }\n     // Call the meta-level planning prior to plan selection\n@@ -205,9 +205,7 @@ public class IntentionSelector implements Runnable {\n     Plan planInstance = bindings.selectPlan(GlobalConstant.PLAN_SELECTION_POLICY);\n     // Now push the plan on to the intention stack\n     synchronized (agentExecutionStack) {\n-      logger.debug(Log.logPrefix(agent.getId()) + \" choose an instance of plan \"\n-          + planInstance.getClass().getSimpleName() + \" to handle goal \"\n-          + gtype.getClass().getSimpleName());\n+      logger.debug(Log.logPrefix(agent.getId()) + \" choose an instance of plan \" + planInstance.getClass().getSimpleName() + \" to handle goal \" + gtype.getClass().getSimpleName());\n       agentExecutionStack.push(planInstance);\n     }\n     return true;\n@@ -222,12 +220,13 @@ public class IntentionSelector implements Runnable {\n    * @param node the plan at the top of the execution stack\n    * @param toRemove the remove list to which this agent should be added if the plan has finished\n    */\n-  private void managePlan(int agentIndex, Stack255 agentExecutionStack, Plan node,\n-      Set<Integer> toRemove) {\n+\n+  private void managePlan(int agentIndex,\n+    Stack255 agentExecutionStack,\n+      Plan node, Set<Integer> toRemove) {\n     // If done then pop this plan/goal\n     if (node.hasfinished()) {\n-      logger.debug(Log.logPrefix(agentIndex) + \" finished executing plan \"\n-          + node.getClass().getSimpleName());\n+      logger.debug(Log.logPrefix(agentIndex) + \" finished executing plan \" + node.getClass().getSimpleName());\n       synchronized (agentExecutionStack) {\n         // Pop the plan off the stack\n         agentExecutionStack.pop();\n@@ -240,8 +239,7 @@ public class IntentionSelector implements Runnable {\n         }\n       }\n     } else {\n-      logger.debug(Log.logPrefix(agentIndex) + \" is executing a step of plan \"\n-          + node.getClass().getSimpleName());\n+      logger.debug(Log.logPrefix(agentIndex) + \" is executing a step of plan \" + node.getClass().getSimpleName());\n       node.step();\n     }\n   }\n@@ -250,6 +248,7 @@ public class IntentionSelector implements Runnable {\n    * Removes from {@link #activeAgents} all agents flagged by external events as having become\n    * inactive.\n    */\n+\n   private void removeInactiveAgents() {\n     synchronized (extToRemove) {\n       if (!extToRemove.isEmpty()) {\n@@ -264,6 +263,7 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Adds to {@link #activeAgents} all agents flagged by external events as having become active.\n    */\n+\n   private void addActiveAgents() {\n     synchronized (extToAdd) {\n       if (!extToAdd.isEmpty()) {\n@@ -278,6 +278,7 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Waits on {@link IntentionSelector#lock} until woken up by an external message.\n    */\n+\n   private void waitOnExternalMessage() {\n     synchronized (lock) {\n       while (!hasMessage) {\n@@ -302,6 +303,8 @@ public class IntentionSelector implements Runnable {\n    * Flags to this intention selection thread that an external message, to an agent managed by this\n    * thread, is waiting to be processed.\n    */\n+\n+\n   public void flagMessage() {\n     synchronized (lock) {\n       logger.debug(\"Pool {} received a new message\", poolid);\n@@ -315,6 +318,8 @@ public class IntentionSelector implements Runnable {\n    * \n    * @return true if idle, false otherwise\n    */\n+\n+\n   public boolean isIdle() {\n     return isIdle && !hasMessage;\n   }\n@@ -322,6 +327,8 @@ public class IntentionSelector implements Runnable {\n   /**\n    * Terminates this intention selector thread.\n    */\n+\n+\n   public void shutdown() {\n     synchronized (lock) {\n       logger.debug(\"Pool {} received shutdown message\", poolid);\n@@ -340,6 +347,8 @@ public class IntentionSelector implements Runnable {\n    */\n   // FIXME: Threading issue when external threads changes activeagents\n   // and this thread is still iterating over activeagents\n+\n+\n   public void setAgentIdle(int agentId, boolean idle) {\n     // If agent is becoming active, and not already active\n     if (!idle /* && !activeAgents.contains(agentId) */) {\n@@ -354,4 +363,4 @@ public class IntentionSelector implements Runnable {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_random/2/IntentionSelector.java\nindex fcc92fdf1bb..6b876bf5c3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_random/2/IntentionSelector.java\n@@ -108,7 +108,8 @@ public class IntentionSelector implements Runnable {\n           break;\n         }\n       }\n-    } while (true);\n+    }\n+    while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "110",
                    "column": "7",
                    "severity": "warning",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "10",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "110",
                    "column": "10",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_three_grams/2/IntentionSelector.java\nindex fcc92fdf1bb..df6c0551528 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/errored/1/2/IntentionSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/agentsoz-jill/styler_three_grams/2/IntentionSelector.java\n@@ -107,8 +107,7 @@ public class IntentionSelector implements Runnable {\n         if (shutdown) {\n           break;\n         }\n-      }\n-    } while (true);\n+      } }while (true);\n     logger.debug(\"Pool {} is exiting\", poolid);\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}