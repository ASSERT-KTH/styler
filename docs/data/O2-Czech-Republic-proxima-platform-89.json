{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "89",
    "information": {
        "errors": [
            {
                "line": "95",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 95).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Override\n  public BoundedReader<StreamElement> createReader(PipelineOptions options) {\n    log.debug(\"Creating reader reading from position {} on partition {}\", position, partition);\n    return BeamCommitLogReader.bounded(this, name, reader(), position, limit, partition);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/89/DirectBoundedSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/89/DirectBoundedSource.java\nindex 2570a984e79..4341cdaee04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/89/DirectBoundedSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/89/DirectBoundedSource.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.beam.direct.io;\n \n import cz.o2.proxima.direct.commitlog.CommitLogReader;\n@@ -92,7 +93,8 @@ class DirectBoundedSource extends AbstractDirectBoundedSource {\n \n   @Override\n   public BoundedReader<StreamElement> createReader(PipelineOptions options) {\n-    log.debug(\"Creating reader reading from position {} on partition {}\", position, partition);\n+    log.debug(\"Creating reader reading from position {} on partition {}\", position,\n+        partition);\n     return BeamCommitLogReader.bounded(this, name, reader(), position, limit, partition);\n   }\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/89/DirectBoundedSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/89/DirectBoundedSource.java\nindex 2570a984e79..fa05625a316 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/89/DirectBoundedSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/89/DirectBoundedSource.java\n@@ -78,15 +78,11 @@ class DirectBoundedSource extends AbstractDirectBoundedSource {\n     }\n     List<Partition> partitions = reader().getPartitions();\n     int numPartitions = partitions.size();\n-    List<BoundedSource<StreamElement>> ret =\n-        partitions\n-            .stream()\n+    List<BoundedSource<StreamElement>> ret = partitions.stream()\n             .map(\n-                p ->\n-                    new DirectBoundedSource(\n-                        factory, name, reader(), position, limit / numPartitions, p))\n-            .collect(Collectors.toList());\n-    log.debug(\"Split source {} into {}\", this, ret);\n+                p -> new DirectBoundedSource(\n+                        factory, name, reader(), position, limit / numPartitions, p)).collect(Collectors.toList());\n+log.debug(\"Split source {} into {}\", this, ret);\n     return ret;\n   }\n \n@@ -102,4 +98,4 @@ class DirectBoundedSource extends AbstractDirectBoundedSource {\n     }\n     return reader;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'RepositoryFactory' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'CommitLogReader' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "'Position' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "'RepositoryFactory' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "'CommitLogReader' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "'Position' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "'long' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/89/DirectBoundedSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/89/DirectBoundedSource.java\nindex 2570a984e79..3d5d1774ec3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/89/DirectBoundedSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/89/DirectBoundedSource.java\n@@ -30,18 +30,18 @@ import org.apache.beam.sdk.io.BoundedSource;\n import org.apache.beam.sdk.options.PipelineOptions;\n \n /** An {@link BoundedSource} created from direct operator's {@link CommitLogReader}. */\n+\n+\n @Slf4j\n class DirectBoundedSource extends AbstractDirectBoundedSource {\n \n   private static final long serialVersionUID = 1L;\n \n   static DirectBoundedSource of(\n-      RepositoryFactory factory,\n-      String name,\n-      CommitLogReader reader,\n-      Position position,\n-      long limit) {\n-\n+    RepositoryFactory factory,\n+    String name,\n+    CommitLogReader reader,\n+    Position position, long limit) {\n     return new DirectBoundedSource(factory, name, reader, position, limit, null);\n   }\n \n@@ -53,13 +53,11 @@ class DirectBoundedSource extends AbstractDirectBoundedSource {\n   private transient CommitLogReader reader;\n \n   DirectBoundedSource(\n-      RepositoryFactory factory,\n-      String name,\n-      CommitLogReader reader,\n-      Position position,\n-      long limit,\n-      @Nullable Partition partition) {\n-\n+    RepositoryFactory factory,\n+    String name,\n+    CommitLogReader reader,\n+    Position position,\n+    long limit, @Nullable Partition partition) {\n     super(factory);\n     this.name = name;\n     this.readerFactory = Objects.requireNonNull(reader).asFactory();\n@@ -70,22 +68,14 @@ class DirectBoundedSource extends AbstractDirectBoundedSource {\n   }\n \n   @Override\n-  public List<BoundedSource<StreamElement>> split(\n-      long desiredBundleSizeBytes, PipelineOptions opts) {\n-\n+  public List<BoundedSource<StreamElement>> split(long desiredBundleSizeBytes, PipelineOptions opts) {\n     if (partition != null) {\n       return Collections.singletonList(this);\n     }\n     List<Partition> partitions = reader().getPartitions();\n     int numPartitions = partitions.size();\n-    List<BoundedSource<StreamElement>> ret =\n-        partitions\n-            .stream()\n-            .map(\n-                p ->\n-                    new DirectBoundedSource(\n-                        factory, name, reader(), position, limit / numPartitions, p))\n-            .collect(Collectors.toList());\n+    List<BoundedSource<StreamElement>> ret = partitions.stream().map(p -> new DirectBoundedSource(factory, name, reader(), position, limit / numPartitions, p))\n+                                                                .collect(Collectors.toList());\n     log.debug(\"Split source {} into {}\", this, ret);\n     return ret;\n   }\n@@ -102,4 +92,4 @@ class DirectBoundedSource extends AbstractDirectBoundedSource {\n     }\n     return reader;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}