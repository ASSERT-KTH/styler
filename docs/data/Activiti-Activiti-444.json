{
    "project_name": "Activiti-Activiti",
    "error_id": "444",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl;\n\nimport java.io.Serializable;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/444/QueryVariableValue.java\nindex bf78ac586e0..93a4bdd84a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/444/QueryVariableValue.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/444/QueryVariableValue.java\nindex bf78ac586e0..797cfa94866 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/444/QueryVariableValue.java\n@@ -30,88 +30,86 @@ import org.activiti.engine.impl.variable.VariableTypes;\n \n /**\n  * Represents a variable value used in queries.\n- *\n-\n  */\n public class QueryVariableValue implements Serializable {\n-  private static final long serialVersionUID = 1L;\n-  private String name;\n-  private Object value;\n-  private QueryOperator operator;\n-\n-  private VariableInstanceEntity variableInstanceEntity;\n-  private boolean local;\n-\n-  public QueryVariableValue(String name, Object value, QueryOperator operator, boolean local) {\n-    this.name = name;\n-    this.value = value;\n-    this.operator = operator;\n-    this.local = local;\n-  }\n-\n-  public void initialize(VariableTypes types) {\n-    if (variableInstanceEntity == null) {\n-      VariableType type = types.findVariableType(value);\n-      if (type instanceof ByteArrayType) {\n-        throw new ActivitiIllegalArgumentException(\"Variables of type ByteArray cannot be used to query\");\n-      } else if (type instanceof JPAEntityVariableType && operator != QueryOperator.EQUALS) {\n-        throw new ActivitiIllegalArgumentException(\"JPA entity variables can only be used in 'variableValueEquals'\");\n-      } else if (type instanceof JPAEntityListVariableType) {\n-        throw new ActivitiIllegalArgumentException(\"Variables containing a list of JPA entities cannot be used to query\");\n-      } else {\n-        // Type implementation determines which fields are set on the entity\n-        variableInstanceEntity = Context.getCommandContext().getVariableInstanceEntityManager().create(name, type, value);\n-      }\n+    private static final long serialVersionUID = 1L;\n+    private String name;\n+    private Object value;\n+    private QueryOperator operator;\n+\n+    private VariableInstanceEntity variableInstanceEntity;\n+    private boolean local;\n+\n+    public QueryVariableValue(String name, Object value, QueryOperator operator, boolean local) {\n+        this.name = name;\n+        this.value = value;\n+        this.operator = operator;\n+        this.local = local;\n+    }\n+\n+    public void initialize(VariableTypes types) {\n+        if (variableInstanceEntity == null) {\n+            VariableType type = types.findVariableType(value);\n+            if (type instanceof ByteArrayType) {\n+                throw new ActivitiIllegalArgumentException(\"Variables of type ByteArray cannot be used to query\");\n+            } else if (type instanceof JPAEntityVariableType && operator != QueryOperator.EQUALS) {\n+                throw new ActivitiIllegalArgumentException(\"JPA entity variables can only be used in 'variableValueEquals'\");\n+            } else if (type instanceof JPAEntityListVariableType) {\n+                throw new ActivitiIllegalArgumentException(\"Variables containing a list of JPA entities cannot be used to query\");\n+            } else {\n+                // Type implementation determines which fields are set on the entity\n+                variableInstanceEntity = Context.getCommandContext().getVariableInstanceEntityManager().create(name, type, value);\n+            }\n+        }\n     }\n-  }\n \n-  public String getName() {\n-    return name;\n-  }\n+    public String getName() {\n+        return name;\n+    }\n \n-  public String getOperator() {\n-    if (operator != null) {\n-      return operator.toString();\n+    public String getOperator() {\n+        if (operator != null) {\n+            return operator.toString();\n+        }\n+        return QueryOperator.EQUALS.toString();\n     }\n-    return QueryOperator.EQUALS.toString();\n-  }\n \n-  public String getTextValue() {\n-    if (variableInstanceEntity != null) {\n-      return variableInstanceEntity.getTextValue();\n+    public String getTextValue() {\n+        if (variableInstanceEntity != null) {\n+            return variableInstanceEntity.getTextValue();\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n-  public Long getLongValue() {\n-    if (variableInstanceEntity != null) {\n-      return variableInstanceEntity.getLongValue();\n+    public Long getLongValue() {\n+        if (variableInstanceEntity != null) {\n+            return variableInstanceEntity.getLongValue();\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n-  public Double getDoubleValue() {\n-    if (variableInstanceEntity != null) {\n-      return variableInstanceEntity.getDoubleValue();\n+    public Double getDoubleValue() {\n+        if (variableInstanceEntity != null) {\n+            return variableInstanceEntity.getDoubleValue();\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n-  public String getTextValue2() {\n-    if (variableInstanceEntity != null) {\n-      return variableInstanceEntity.getTextValue2();\n+    public String getTextValue2() {\n+        if (variableInstanceEntity != null) {\n+            return variableInstanceEntity.getTextValue2();\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n-  public String getType() {\n-    if (variableInstanceEntity != null) {\n-      return variableInstanceEntity.getType().getTypeName();\n+    public String getType() {\n+        if (variableInstanceEntity != null) {\n+            return variableInstanceEntity.getType().getTypeName();\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n-  public boolean isLocal() {\n-    return local;\n-  }\n+    public boolean isLocal() {\n+        return local;\n+    }\n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 15, indentation should be the same level as line 69.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/444/QueryVariableValue.java\nindex bf78ac586e0..67ba9c33b5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/444/QueryVariableValue.java\n@@ -18,7 +18,6 @@\n package org.activiti.engine.impl;\n \n import java.io.Serializable;\n-\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.impl.context.Context;\n import org.activiti.engine.impl.persistence.entity.VariableInstanceEntity;\n@@ -33,13 +32,20 @@ import org.activiti.engine.impl.variable.VariableTypes;\n  *\n \n  */\n+\n+\n public class QueryVariableValue implements Serializable {\n+\n   private static final long serialVersionUID = 1L;\n+\n   private String name;\n+\n   private Object value;\n+\n   private QueryOperator operator;\n \n   private VariableInstanceEntity variableInstanceEntity;\n+\n   private boolean local;\n \n   public QueryVariableValue(String name, Object value, QueryOperator operator, boolean local) {\n@@ -57,11 +63,11 @@ public class QueryVariableValue implements Serializable {\n       } else if (type instanceof JPAEntityVariableType && operator != QueryOperator.EQUALS) {\n         throw new ActivitiIllegalArgumentException(\"JPA entity variables can only be used in 'variableValueEquals'\");\n       } else if (type instanceof JPAEntityListVariableType) {\n-        throw new ActivitiIllegalArgumentException(\"Variables containing a list of JPA entities cannot be used to query\");\n-      } else {\n+               throw new ActivitiIllegalArgumentException(\"Variables containing a list of JPA entities cannot be used to query\");\n+             } else {\n         // Type implementation determines which fields are set on the entity\n-        variableInstanceEntity = Context.getCommandContext().getVariableInstanceEntityManager().create(name, type, value);\n-      }\n+               variableInstanceEntity = Context.getCommandContext().getVariableInstanceEntityManager().create(name, type, value);\n+             }\n     }\n   }\n \n@@ -114,4 +120,4 @@ public class QueryVariableValue implements Serializable {\n   public boolean isLocal() {\n     return local;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/444/QueryVariableValue.java\nindex bf78ac586e0..93a4bdd84a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/444/QueryVariableValue.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/444/QueryVariableValue.java\nindex bf78ac586e0..93a4bdd84a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/444/QueryVariableValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/444/QueryVariableValue.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}