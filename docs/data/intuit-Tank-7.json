{
    "project_name": "intuit-Tank",
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "123",
                "column": "9",
                "severity": "warning",
                "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "                setRowHeaderView(null);\n            }\n        }\n        else {\n            if (getRowHeader() == null || getRowHeader().getView() == null) {\n                setRowHeaderView(gutter);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/7/RTextScrollPane.java\nindex dd9897e80d3..51e23c79a5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/7/RTextScrollPane.java\n@@ -120,8 +120,7 @@ public class RTextScrollPane extends JScrollPane {\n             if (getRowHeader() != null && getRowHeader().getView() == gutter) {\n                 setRowHeaderView(null);\n             }\n-        }\n-        else {\n+        } else {\n             if (getRowHeader() == null || getRowHeader().getView() == null) {\n                 setRowHeaderView(gutter);\n             }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/7/RTextScrollPane.java\nindex dd9897e80d3..7a74a8ecb94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/7/RTextScrollPane.java\n@@ -21,6 +21,7 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.\n  */\n+\n package org.fife.ui.rtextarea;\n \n import java.awt.Color;\n@@ -33,180 +34,170 @@ import javax.swing.JScrollPane;\n  * class has the ability to show line numbers for its text component view, as well as per-line icons (for bookmarks,\n  * debugging breakpoints, error markers, etc.).\n  * <p>\n- * \n+ * <p>\n  * The actual \"meat\" of these extras is contained in the {@link Gutter} class. Each <code>RTextScrollPane</code> has a\n  * <code>Gutter</code> instance that it uses as its row header. The gutter is only made visible when one of its features\n  * is being used (line numbering and/or icons).\n- * \n+ *\n  * @author Robert Futrell\n  * @version 0.9\n  */\n public class RTextScrollPane extends JScrollPane {\n \n-    private RTextArea textArea;\n-    private Gutter gutter;\n-\n-    /**\n-     * Constructor. If you use this constructor, you must call {@link #setViewportView(Component)} and pass in an\n-     * {@link RTextArea} for this scroll pane to render line numbers properly.\n-     */\n-    public RTextScrollPane() {\n-        this(null, true);\n+  private RTextArea textArea;\n+  private Gutter gutter;\n+\n+  /**\n+   * Constructor. If you use this constructor, you must call {@link #setViewportView(Component)} and pass in an\n+   * {@link RTextArea} for this scroll pane to render line numbers properly.\n+   */\n+  public RTextScrollPane() {\n+    this(null, true);\n+  }\n+\n+  /**\n+   * Creates a scroll pane. A default value will be used for line number color (gray), and the current line's line\n+   * number will be highlighted.\n+   *\n+   * @param textArea The text area this scroll pane will contain.\n+   */\n+  public RTextScrollPane(RTextArea textArea) {\n+    this(textArea, true);\n+  }\n+\n+  /**\n+   * Creates a scroll pane. A default value will be used for line number color (gray), and the current line's line\n+   * number will be highlighted.\n+   *\n+   * @param textArea    The text area this scroll pane will contain. If this is <code>null</code>, you must call\n+   *                    {@link #setViewportView(Component)}, passing in an {@link RTextArea}.\n+   * @param lineNumbers Whether line numbers should be enabled.\n+   */\n+  public RTextScrollPane(RTextArea textArea, boolean lineNumbers) {\n+    this(textArea, lineNumbers, Color.GRAY);\n+  }\n+\n+  /**\n+   * Creates a scroll pane with preferred size (width, height).\n+   *\n+   * @param area            The text area this scroll pane will contain. If this is <code>null</code>, you must call\n+   *                        {@link #setViewportView(Component)}, passing in an {@link RTextArea}.\n+   * @param lineNumbers     Whether line numbers are initially enabled.\n+   * @param lineNumberColor The color to use for line numbers.\n+   */\n+  public RTextScrollPane(RTextArea area, boolean lineNumbers,\n+                         Color lineNumberColor) {\n+\n+    super(area);\n+\n+    // Create the text area and set it inside this scroll bar area.\n+    textArea = area;\n+\n+    // Create the gutter for this document.\n+    Font defaultFont = new Font(\"Monospaced\", Font.PLAIN, 12);\n+    gutter = new Gutter(textArea);\n+    gutter.setLineNumberFont(defaultFont);\n+    gutter.setLineNumberColor(lineNumberColor);\n+    setLineNumbersEnabled(lineNumbers);\n+\n+    // Set miscellaneous properties.\n+    setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);\n+    setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_AS_NEEDED);\n+\n+  }\n+\n+  /**\n+   * Ensures the gutter is visible if it's showing anything.\n+   */\n+  private void checkGutterVisibility() {\n+    int count = gutter.getComponentCount();\n+    if (count == 0) {\n+      if (getRowHeader() != null && getRowHeader().getView() == gutter) {\n+        setRowHeaderView(null);\n+      }\n+    } else {\n+      if (getRowHeader() == null || getRowHeader().getView() == null) {\n+        setRowHeaderView(gutter);\n+      }\n     }\n-\n-    /**\n-     * Creates a scroll pane. A default value will be used for line number color (gray), and the current line's line\n-     * number will be highlighted.\n-     * \n-     * @param textArea\n-     *            The text area this scroll pane will contain.\n-     */\n-    public RTextScrollPane(RTextArea textArea) {\n-        this(textArea, true);\n-    }\n-\n-    /**\n-     * Creates a scroll pane. A default value will be used for line number color (gray), and the current line's line\n-     * number will be highlighted.\n-     * \n-     * @param textArea\n-     *            The text area this scroll pane will contain. If this is <code>null</code>, you must call\n-     *            {@link #setViewportView(Component)}, passing in an {@link RTextArea}.\n-     * @param lineNumbers\n-     *            Whether line numbers should be enabled.\n-     */\n-    public RTextScrollPane(RTextArea textArea, boolean lineNumbers) {\n-        this(textArea, lineNumbers, Color.GRAY);\n+  }\n+\n+  /**\n+   * Returns the gutter.\n+   *\n+   * @return The gutter.\n+   */\n+  public Gutter getGutter() {\n+    return gutter;\n+  }\n+\n+  /**\n+   * Returns <code>true</code> if the line numbers are enabled and visible.\n+   *\n+   * @return Whether or not line numbers are visible.\n+   * @see #setLineNumbersEnabled(boolean)\n+   */\n+  public boolean getLineNumbersEnabled() {\n+    return gutter.getLineNumbersEnabled();\n+  }\n+\n+  /**\n+   * Returns the text area being displayed.\n+   *\n+   * @return The text area.\n+   * @see #setViewportView(Component)\n+   */\n+  public RTextArea getTextArea() {\n+    return (RTextArea) getViewport().getView();\n+  }\n+\n+  /**\n+   * Returns whether the icon row header is enabled.\n+   *\n+   * @return Whether the icon row header is enabled.\n+   * @see #setIconRowHeaderEnabled(boolean)\n+   */\n+  public boolean isIconRowHeaderEnabled() {\n+    return gutter.isIconRowHeaderEnabled();\n+  }\n+\n+  /**\n+   * Toggles whether the icon row header (used for breakpoints, bookmarks, etc.) is enabled.\n+   *\n+   * @param enabled Whether the icon row header is enabled.\n+   * @see #isIconRowHeaderEnabled()\n+   */\n+  public void setIconRowHeaderEnabled(boolean enabled) {\n+    gutter.setIconRowHeaderEnabled(enabled);\n+    checkGutterVisibility();\n+  }\n+\n+  /**\n+   * Toggles whether or not line numbers are visible.\n+   *\n+   * @param enabled Whether or not line numbers should be visible.\n+   * @see #getLineNumbersEnabled()\n+   */\n+  public void setLineNumbersEnabled(boolean enabled) {\n+    gutter.setLineNumbersEnabled(enabled);\n+    checkGutterVisibility();\n+  }\n+\n+  /**\n+   * Sets the view for this scroll pane. This must be an {@link RTextArea}.\n+   *\n+   * @param view The new view.\n+   * @see #getTextArea()\n+   */\n+  public void setViewportView(Component view) {\n+    if (!(view instanceof RTextArea)) {\n+      throw new IllegalArgumentException(\"view must be an RTextArea\");\n     }\n-\n-    /**\n-     * Creates a scroll pane with preferred size (width, height).\n-     * \n-     * @param area\n-     *            The text area this scroll pane will contain. If this is <code>null</code>, you must call\n-     *            {@link #setViewportView(Component)}, passing in an {@link RTextArea}.\n-     * @param lineNumbers\n-     *            Whether line numbers are initially enabled.\n-     * @param lineNumberColor\n-     *            The color to use for line numbers.\n-     */\n-    public RTextScrollPane(RTextArea area, boolean lineNumbers,\n-            Color lineNumberColor) {\n-\n-        super(area);\n-\n-        // Create the text area and set it inside this scroll bar area.\n-        textArea = area;\n-\n-        // Create the gutter for this document.\n-        Font defaultFont = new Font(\"Monospaced\", Font.PLAIN, 12);\n-        gutter = new Gutter(textArea);\n-        gutter.setLineNumberFont(defaultFont);\n-        gutter.setLineNumberColor(lineNumberColor);\n-        setLineNumbersEnabled(lineNumbers);\n-\n-        // Set miscellaneous properties.\n-        setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);\n-        setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_AS_NEEDED);\n-\n-    }\n-\n-    /**\n-     * Ensures the gutter is visible if it's showing anything.\n-     */\n-    private void checkGutterVisibility() {\n-        int count = gutter.getComponentCount();\n-        if (count == 0) {\n-            if (getRowHeader() != null && getRowHeader().getView() == gutter) {\n-                setRowHeaderView(null);\n-            }\n-        }\n-        else {\n-            if (getRowHeader() == null || getRowHeader().getView() == null) {\n-                setRowHeaderView(gutter);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Returns the gutter.\n-     * \n-     * @return The gutter.\n-     */\n-    public Gutter getGutter() {\n-        return gutter;\n-    }\n-\n-    /**\n-     * Returns <code>true</code> if the line numbers are enabled and visible.\n-     * \n-     * @return Whether or not line numbers are visible.\n-     * @see #setLineNumbersEnabled(boolean)\n-     */\n-    public boolean getLineNumbersEnabled() {\n-        return gutter.getLineNumbersEnabled();\n-    }\n-\n-    /**\n-     * Returns the text area being displayed.\n-     * \n-     * @return The text area.\n-     * @see #setViewportView(Component)\n-     */\n-    public RTextArea getTextArea() {\n-        return (RTextArea) getViewport().getView();\n-    }\n-\n-    /**\n-     * Returns whether the icon row header is enabled.\n-     * \n-     * @return Whether the icon row header is enabled.\n-     * @see #setIconRowHeaderEnabled(boolean)\n-     */\n-    public boolean isIconRowHeaderEnabled() {\n-        return gutter.isIconRowHeaderEnabled();\n-    }\n-\n-    /**\n-     * Toggles whether the icon row header (used for breakpoints, bookmarks, etc.) is enabled.\n-     * \n-     * @param enabled\n-     *            Whether the icon row header is enabled.\n-     * @see #isIconRowHeaderEnabled()\n-     */\n-    public void setIconRowHeaderEnabled(boolean enabled) {\n-        gutter.setIconRowHeaderEnabled(enabled);\n-        checkGutterVisibility();\n-    }\n-\n-    /**\n-     * Toggles whether or not line numbers are visible.\n-     * \n-     * @param enabled\n-     *            Whether or not line numbers should be visible.\n-     * @see #getLineNumbersEnabled()\n-     */\n-    public void setLineNumbersEnabled(boolean enabled) {\n-        gutter.setLineNumbersEnabled(enabled);\n-        checkGutterVisibility();\n-    }\n-\n-    /**\n-     * Sets the view for this scroll pane. This must be an {@link RTextArea}.\n-     * \n-     * @param view\n-     *            The new view.\n-     * @see #getTextArea()\n-     */\n-    public void setViewportView(Component view) {\n-        if (!(view instanceof RTextArea)) {\n-            throw new IllegalArgumentException(\"view must be an RTextArea\");\n-        }\n-        super.setViewportView(view);\n-        textArea = (RTextArea) view;\n-        if (gutter != null) {\n-            gutter.setTextArea(textArea);\n-        }\n+    super.setViewportView(view);\n+    textArea = (RTextArea) view;\n+    if (gutter != null) {\n+      gutter.setTextArea(textArea);\n     }\n+  }\n \n }\n\\ No newline at end of file\n",
            "diff_size": 280
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/7/RTextScrollPane.java\nindex dd9897e80d3..32ed45d20ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/7/RTextScrollPane.java\n@@ -23,6 +23,8 @@\n  */\n package org.fife.ui.rtextarea;\n \n+\n+\n import java.awt.Color;\n import java.awt.Component;\n import java.awt.Font;\n@@ -41,6 +43,8 @@ import javax.swing.JScrollPane;\n  * @author Robert Futrell\n  * @version 0.9\n  */\n+\n+\n public class RTextScrollPane extends JScrollPane {\n \n     private RTextArea textArea;\n@@ -50,6 +54,7 @@ public class RTextScrollPane extends JScrollPane {\n      * Constructor. If you use this constructor, you must call {@link #setViewportView(Component)} and pass in an\n      * {@link RTextArea} for this scroll pane to render line numbers properly.\n      */\n+\n     public RTextScrollPane() {\n         this(null, true);\n     }\n@@ -61,6 +66,8 @@ public class RTextScrollPane extends JScrollPane {\n      * @param textArea\n      *            The text area this scroll pane will contain.\n      */\n+\n+\n     public RTextScrollPane(RTextArea textArea) {\n         this(textArea, true);\n     }\n@@ -75,6 +82,8 @@ public class RTextScrollPane extends JScrollPane {\n      * @param lineNumbers\n      *            Whether line numbers should be enabled.\n      */\n+\n+\n     public RTextScrollPane(RTextArea textArea, boolean lineNumbers) {\n         this(textArea, lineNumbers, Color.GRAY);\n     }\n@@ -90,9 +99,9 @@ public class RTextScrollPane extends JScrollPane {\n      * @param lineNumberColor\n      *            The color to use for line numbers.\n      */\n-    public RTextScrollPane(RTextArea area, boolean lineNumbers,\n-            Color lineNumberColor) {\n \n+\n+    public RTextScrollPane(RTextArea area, boolean lineNumbers, Color lineNumberColor) {\n         super(area);\n \n         // Create the text area and set it inside this scroll bar area.\n@@ -108,20 +117,19 @@ public class RTextScrollPane extends JScrollPane {\n         // Set miscellaneous properties.\n         setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);\n         setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_AS_NEEDED);\n-\n     }\n \n     /**\n      * Ensures the gutter is visible if it's showing anything.\n      */\n+\n     private void checkGutterVisibility() {\n         int count = gutter.getComponentCount();\n         if (count == 0) {\n             if (getRowHeader() != null && getRowHeader().getView() == gutter) {\n                 setRowHeaderView(null);\n             }\n-        }\n-        else {\n+        } else {\n             if (getRowHeader() == null || getRowHeader().getView() == null) {\n                 setRowHeaderView(gutter);\n             }\n@@ -133,6 +141,8 @@ public class RTextScrollPane extends JScrollPane {\n      * \n      * @return The gutter.\n      */\n+\n+\n     public Gutter getGutter() {\n         return gutter;\n     }\n@@ -143,6 +153,8 @@ public class RTextScrollPane extends JScrollPane {\n      * @return Whether or not line numbers are visible.\n      * @see #setLineNumbersEnabled(boolean)\n      */\n+\n+\n     public boolean getLineNumbersEnabled() {\n         return gutter.getLineNumbersEnabled();\n     }\n@@ -153,6 +165,8 @@ public class RTextScrollPane extends JScrollPane {\n      * @return The text area.\n      * @see #setViewportView(Component)\n      */\n+\n+\n     public RTextArea getTextArea() {\n         return (RTextArea) getViewport().getView();\n     }\n@@ -163,6 +177,8 @@ public class RTextScrollPane extends JScrollPane {\n      * @return Whether the icon row header is enabled.\n      * @see #setIconRowHeaderEnabled(boolean)\n      */\n+\n+\n     public boolean isIconRowHeaderEnabled() {\n         return gutter.isIconRowHeaderEnabled();\n     }\n@@ -174,6 +190,8 @@ public class RTextScrollPane extends JScrollPane {\n      *            Whether the icon row header is enabled.\n      * @see #isIconRowHeaderEnabled()\n      */\n+\n+\n     public void setIconRowHeaderEnabled(boolean enabled) {\n         gutter.setIconRowHeaderEnabled(enabled);\n         checkGutterVisibility();\n@@ -186,6 +204,8 @@ public class RTextScrollPane extends JScrollPane {\n      *            Whether or not line numbers should be visible.\n      * @see #getLineNumbersEnabled()\n      */\n+\n+\n     public void setLineNumbersEnabled(boolean enabled) {\n         gutter.setLineNumbersEnabled(enabled);\n         checkGutterVisibility();\n@@ -198,6 +218,8 @@ public class RTextScrollPane extends JScrollPane {\n      *            The new view.\n      * @see #getTextArea()\n      */\n+\n+\n     public void setViewportView(Component view) {\n         if (!(view instanceof RTextArea)) {\n             throw new IllegalArgumentException(\"view must be an RTextArea\");\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/7/RTextScrollPane.java\nindex dd9897e80d3..51e23c79a5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/7/RTextScrollPane.java\n@@ -120,8 +120,7 @@ public class RTextScrollPane extends JScrollPane {\n             if (getRowHeader() != null && getRowHeader().getView() == gutter) {\n                 setRowHeaderView(null);\n             }\n-        }\n-        else {\n+        } else {\n             if (getRowHeader() == null || getRowHeader().getView() == null) {\n                 setRowHeaderView(gutter);\n             }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/7/RTextScrollPane.java\nindex dd9897e80d3..51e23c79a5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/7/RTextScrollPane.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/7/RTextScrollPane.java\n@@ -120,8 +120,7 @@ public class RTextScrollPane extends JScrollPane {\n             if (getRowHeader() != null && getRowHeader().getView() == gutter) {\n                 setRowHeaderView(null);\n             }\n-        }\n-        else {\n+        } else {\n             if (getRowHeader() == null || getRowHeader().getView() == null) {\n                 setRowHeaderView(gutter);\n             }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}