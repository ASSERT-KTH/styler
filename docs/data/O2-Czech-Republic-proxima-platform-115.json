{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "115",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 98).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class GlobalWatermarkThroughputLimiterTest {\n\n  private final GlobalWatermarkThroughputLimiter limiter = new GlobalWatermarkThroughputLimiter();\n\n  public static class TestTracker implements GlobalWatermarkTracker {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/115/GlobalWatermarkThroughputLimiterTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/115/GlobalWatermarkThroughputLimiterTest.java\nindex 78e7f588105..9e3583e7c07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/115/GlobalWatermarkThroughputLimiterTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/115/GlobalWatermarkThroughputLimiterTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.storage.watermark;\n \n import static org.junit.Assert.assertEquals;\n@@ -40,13 +41,17 @@ import org.junit.Test;\n /** Test suite for {@link GlobalWatermarkThroughputLimiter}. */\n public class GlobalWatermarkThroughputLimiterTest {\n \n-  private final GlobalWatermarkThroughputLimiter limiter = new GlobalWatermarkThroughputLimiter();\n+  private final GlobalWatermarkThroughputLimiter limiter =\n+      new GlobalWatermarkThroughputLimiter();\n \n   public static class TestTracker implements GlobalWatermarkTracker {\n \n-    @Getter private final Map<String, Long> updates = new HashMap<>();\n-    @Setter private Instant globalWatermark = Instant.ofEpochMilli(Long.MIN_VALUE);\n-    @Getter private int testConf = -1;\n+    @Getter\n+    private final Map<String, Long> updates = new HashMap<>();\n+    @Setter\n+    private Instant globalWatermark = Instant.ofEpochMilli(Long.MIN_VALUE);\n+    @Getter\n+    private int testConf = -1;\n \n     @Override\n     public String getName() {\n@@ -79,7 +84,8 @@ public class GlobalWatermarkThroughputLimiterTest {\n     }\n \n     @Override\n-    public void close() {}\n+    public void close() {\n+    }\n   }\n \n   @Before\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/115/GlobalWatermarkThroughputLimiterTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/115/GlobalWatermarkThroughputLimiterTest.java\nindex 78e7f588105..d889ce13775 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/115/GlobalWatermarkThroughputLimiterTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/115/GlobalWatermarkThroughputLimiterTest.java\n@@ -55,12 +55,11 @@ public class GlobalWatermarkThroughputLimiterTest {\n \n     @Override\n     public void setup(Map<String, Object> cfg) {\n-      testConf =\n-          Optional.ofNullable(cfg.get(\"test-tracker-conf\"))\n+      testConf = Optional.ofNullable(cfg.get(\"test-tracker-conf\"))\n               .map(Object::toString)\n               .map(Integer::parseInt)\n               .orElse(-1);\n-    }\n+  }\n \n     @Override\n     public void initWatermarks(Map<String, Long> initialWatermarks) {\n@@ -90,10 +89,7 @@ public class GlobalWatermarkThroughputLimiterTest {\n   private Map<String, Object> cfg(Class<TestTracker> trackerClass) {\n     return new ImmutableMap.Builder<String, Object>()\n         .put(\n-            GlobalWatermarkThroughputLimiter.TRACKER_CFG_PREFIX\n-                + GlobalWatermarkThroughputLimiter.KW_CLASS,\n-            trackerClass.getName())\n-        .put(GlobalWatermarkThroughputLimiter.MAX_AHEAD_TIME_MS_CFG, 3600000)\n+            GlobalWatermarkThroughputLimiter.TRACKER_CFG_PREFIX + GlobalWatermarkThroughputLimiter.KW_CLASS, trackerClass.getName()).put(GlobalWatermarkThroughputLimiter.MAX_AHEAD_TIME_MS_CFG, 3600000)\n         .put(GlobalWatermarkThroughputLimiter.GLOBAL_WATERMARK_UPDATE_MS_CFG, 100)\n         .put(GlobalWatermarkThroughputLimiter.DEFAULT_SLEEP_TIME_CFG, 10)\n         .build();\n@@ -132,4 +128,4 @@ public class GlobalWatermarkThroughputLimiterTest {\n       }\n     };\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 13, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 15, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 13, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 13, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 15, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 13, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 11, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/115/GlobalWatermarkThroughputLimiterTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/115/GlobalWatermarkThroughputLimiterTest.java\nindex 78e7f588105..a882a30521d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/115/GlobalWatermarkThroughputLimiterTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/115/GlobalWatermarkThroughputLimiterTest.java\n@@ -17,7 +17,6 @@ package cz.o2.proxima.storage.watermark;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotSame;\n-\n import com.google.common.collect.ImmutableMap;\n import cz.o2.proxima.storage.Partition;\n import cz.o2.proxima.storage.ThroughputLimiter.Context;\n@@ -38,14 +37,17 @@ import org.junit.Before;\n import org.junit.Test;\n \n /** Test suite for {@link GlobalWatermarkThroughputLimiter}. */\n+\n+\n public class GlobalWatermarkThroughputLimiterTest {\n \n   private final GlobalWatermarkThroughputLimiter limiter = new GlobalWatermarkThroughputLimiter();\n-\n   public static class TestTracker implements GlobalWatermarkTracker {\n \n     @Getter private final Map<String, Long> updates = new HashMap<>();\n+\n     @Setter private Instant globalWatermark = Instant.ofEpochMilli(Long.MIN_VALUE);\n+\n     @Getter private int testConf = -1;\n \n     @Override\n@@ -55,11 +57,9 @@ public class GlobalWatermarkThroughputLimiterTest {\n \n     @Override\n     public void setup(Map<String, Object> cfg) {\n-      testConf =\n-          Optional.ofNullable(cfg.get(\"test-tracker-conf\"))\n-              .map(Object::toString)\n-              .map(Integer::parseInt)\n-              .orElse(-1);\n+      testConf = Optional.ofNullable(cfg.get(\"test-tracker-conf\")).map(Object::toString)\n+                                                                  .map(Integer::parseInt)\n+                                                                  .orElse(-1);\n     }\n \n     @Override\n@@ -88,15 +88,13 @@ public class GlobalWatermarkThroughputLimiterTest {\n   }\n \n   private Map<String, Object> cfg(Class<TestTracker> trackerClass) {\n-    return new ImmutableMap.Builder<String, Object>()\n-        .put(\n-            GlobalWatermarkThroughputLimiter.TRACKER_CFG_PREFIX\n-                + GlobalWatermarkThroughputLimiter.KW_CLASS,\n-            trackerClass.getName())\n-        .put(GlobalWatermarkThroughputLimiter.MAX_AHEAD_TIME_MS_CFG, 3600000)\n-        .put(GlobalWatermarkThroughputLimiter.GLOBAL_WATERMARK_UPDATE_MS_CFG, 100)\n-        .put(GlobalWatermarkThroughputLimiter.DEFAULT_SLEEP_TIME_CFG, 10)\n-        .build();\n+    return new ImmutableMap.Builder<String, Object>().put(\n+GlobalWatermarkThroughputLimiter.TRACKER_CFG_PREFIX + GlobalWatermarkThroughputLimiter.KW_CLASS,\n+trackerClass.getName())\n+                                                     .put(GlobalWatermarkThroughputLimiter.MAX_AHEAD_TIME_MS_CFG, 3600000)\n+                                                     .put(GlobalWatermarkThroughputLimiter.GLOBAL_WATERMARK_UPDATE_MS_CFG, 100)\n+                                                     .put(GlobalWatermarkThroughputLimiter.DEFAULT_SLEEP_TIME_CFG, 10)\n+                                                     .build();\n   }\n \n   @Test\n@@ -121,15 +119,15 @@ public class GlobalWatermarkThroughputLimiterTest {\n   private Context context(long watermark) {\n     return new Context() {\n \n-      @Override\n-      public Collection<Partition> getConsumedPartitions() {\n-        return Collections.singleton(Partition.of(0));\n-      }\n+             @Override\n+             public Collection<Partition> getConsumedPartitions() {\n+               return Collections.singleton(Partition.of(0));\n+             }\n \n-      @Override\n-      public long getMinWatermark() {\n-        return watermark;\n-      }\n-    };\n+             @Override\n+             public long getMinWatermark() {\n+               return watermark;\n+             }\n+           };\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}