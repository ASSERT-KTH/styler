{
    "project_name": "EMResearch-EMB",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n   \n\t@Override\n\tpublic Vet findById(int id) throws DataAccessException {\n\t\treturn this.em.find(Vet.class, id);\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/1/JpaVetRepositoryImpl.java\nindex bc1a99c6a8c..77812f4052e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/1/JpaVetRepositoryImpl.java\n@@ -41,8 +41,7 @@ public class JpaVetRepositoryImpl implements VetRepository {\n     @PersistenceContext\n     private EntityManager em;\n \n-   \n-\t@Override\n+    @Override\n \tpublic Vet findById(int id) throws DataAccessException {\n \t\treturn this.em.find(Vet.class, id);\n \t}\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/1/JpaVetRepositoryImpl.java\nindex bc1a99c6a8c..d945c3d7557 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/1/JpaVetRepositoryImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.springframework.samples.petclinic.repository.jpa;\n \n import org.springframework.context.annotation.Profile;\n@@ -41,31 +42,31 @@ public class JpaVetRepositoryImpl implements VetRepository {\n     @PersistenceContext\n     private EntityManager em;\n \n-   \n-\t@Override\n-\tpublic Vet findById(int id) throws DataAccessException {\n-\t\treturn this.em.find(Vet.class, id);\n-\t}\n \n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic Collection<Vet> findAll() throws DataAccessException {\n-\t\treturn this.em.createQuery(\"SELECT vet FROM Vet vet\").getResultList();\n-\t}\n+    @Override\n+    public Vet findById(int id) throws DataAccessException {\n+        return this.em.find(Vet.class, id);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Collection<Vet> findAll() throws DataAccessException {\n+        return this.em.createQuery(\"SELECT vet FROM Vet vet\").getResultList();\n+    }\n \n-\t@Override\n-\tpublic void save(Vet vet) throws DataAccessException {\n+    @Override\n+    public void save(Vet vet) throws DataAccessException {\n         if (vet.getId() == null) {\n             this.em.persist(vet);\n         } else {\n             this.em.merge(vet);\n         }\n-\t}\n+    }\n \n-\t@Override\n-\tpublic void delete(Vet vet) throws DataAccessException {\n-\t\tthis.em.remove(this.em.contains(vet) ? vet : this.em.merge(vet));\n-\t}\n+    @Override\n+    public void delete(Vet vet) throws DataAccessException {\n+        this.em.remove(this.em.contains(vet) ? vet : this.em.merge(vet));\n+    }\n \n \n }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/1/JpaVetRepositoryImpl.java\nindex bc1a99c6a8c..c3028309ab0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/1/JpaVetRepositoryImpl.java\n@@ -41,31 +41,28 @@ public class JpaVetRepositoryImpl implements VetRepository {\n     @PersistenceContext\n     private EntityManager em;\n \n-   \n-\t@Override\n-\tpublic Vet findById(int id) throws DataAccessException {\n-\t\treturn this.em.find(Vet.class, id);\n-\t}\n+@Override\n+public Vet findById(int id) throws DataAccessException {\n+    return this.em.find(Vet.class, id);\n+    }\n \n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic Collection<Vet> findAll() throws DataAccessException {\n-\t\treturn this.em.createQuery(\"SELECT vet FROM Vet vet\").getResultList();\n-\t}\n+    return this.em.createQuery(\"SELECT vet FROM Vet vet\").getResultList();\n+    }\n \n \t@Override\n \tpublic void save(Vet vet) throws DataAccessException {\n-        if (vet.getId() == null) {\n+    if (vet.getId() == null) {\n             this.em.persist(vet);\n         } else {\n             this.em.merge(vet);\n         }\n-\t}\n+    }\n \n \t@Override\n \tpublic void delete(Vet vet) throws DataAccessException {\n-\t\tthis.em.remove(this.em.contains(vet) ? vet : this.em.merge(vet));\n-\t}\n-\n-\n-}\n+    this.em.remove(this.em.contains(vet) ? vet : this.em.merge(vet));\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/1/JpaVetRepositoryImpl.java\nindex bc1a99c6a8c..863a67c58ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/1/JpaVetRepositoryImpl.java\n@@ -20,7 +20,6 @@ import org.springframework.dao.DataAccessException;\n import org.springframework.samples.petclinic.model.Vet;\n import org.springframework.samples.petclinic.repository.VetRepository;\n import org.springframework.stereotype.Repository;\n-\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import java.util.Collection;\n@@ -34,38 +33,36 @@ import java.util.Collection;\n  * @author Michael Isvy\n  * @author Vitaliy Fedoriv\n  */\n+\n+\n @Repository\n @Profile(\"jpa\")\n public class JpaVetRepositoryImpl implements VetRepository {\n-\n     @PersistenceContext\n     private EntityManager em;\n \n-   \n-\t@Override\n-\tpublic Vet findById(int id) throws DataAccessException {\n-\t\treturn this.em.find(Vet.class, id);\n-\t}\n+    @Override\n+    public Vet findById(int id) throws DataAccessException {\n+        return this.em.find(Vet.class, id);\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic Collection<Vet> findAll() throws DataAccessException {\n-\t\treturn this.em.createQuery(\"SELECT vet FROM Vet vet\").getResultList();\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Collection<Vet> findAll() throws DataAccessException {\n+    return this.em.createQuery(\"SELECT vet FROM Vet vet\").getResultList();\n+    }\n \n-\t@Override\n-\tpublic void save(Vet vet) throws DataAccessException {\n+    @Override\n+    public void save(Vet vet) throws DataAccessException {\n         if (vet.getId() == null) {\n             this.em.persist(vet);\n         } else {\n             this.em.merge(vet);\n         }\n-\t}\n-\n-\t@Override\n-\tpublic void delete(Vet vet) throws DataAccessException {\n-\t\tthis.em.remove(this.em.contains(vet) ? vet : this.em.merge(vet));\n-\t}\n-\n+    }\n \n-}\n+    @Override\n+    public void delete(Vet vet) throws DataAccessException {\n+        this.em.remove(this.em.contains(vet) ? vet : this.em.merge(vet));\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/1/JpaVetRepositoryImpl.java\nindex bc1a99c6a8c..77812f4052e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/1/JpaVetRepositoryImpl.java\n@@ -41,8 +41,7 @@ public class JpaVetRepositoryImpl implements VetRepository {\n     @PersistenceContext\n     private EntityManager em;\n \n-   \n-\t@Override\n+    @Override\n \tpublic Vet findById(int id) throws DataAccessException {\n \t\treturn this.em.find(Vet.class, id);\n \t}\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/1/JpaVetRepositoryImpl.java\nindex bc1a99c6a8c..77812f4052e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/1/JpaVetRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/1/JpaVetRepositoryImpl.java\n@@ -41,8 +41,7 @@ public class JpaVetRepositoryImpl implements VetRepository {\n     @PersistenceContext\n     private EntityManager em;\n \n-   \n-\t@Override\n+    @Override\n \tpublic Vet findById(int id) throws DataAccessException {\n \t\treturn this.em.find(Vet.class, id);\n \t}\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}