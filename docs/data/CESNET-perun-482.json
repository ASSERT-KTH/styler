{
    "project_name": "CESNET-perun",
    "error_id": "482",
    "information": {
        "errors": [
            {
                "line": "232",
                "severity": "error",
                "message": "Space before tab.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t\t\tcontinue;                      // skip \",\" and continue\n\t\t\t\t\t}\n\t\t\t\t\tinput = input + newValue[i]  \t   // append letter\n\t\t\t\t}\n\t\t\t}\n\t\t\tinput = input.trim();               // at end - trim value",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Space before tab.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/482/Attribute.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/482/Attribute.java\nindex 39862688a96..e6bde19fb88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/482/Attribute.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/482/Attribute.java\n@@ -16,53 +16,54 @@ import java.util.Map;\n \n public class Attribute extends JavaScriptObject {\n \n-\tpublic static int counter = 0;\n+    public static int counter = 0;\n \n-\tprotected Attribute() {}\n+    protected Attribute() {\n+    }\n \n-\t/**\n-\t * Gets ID of attribute\n-\t *\n-\t * @return ID of attribute\n-\t */\n-\tpublic final native int getId() /*-{\n+    /**\n+     * Gets ID of attribute\n+     *\n+     * @return ID of attribute\n+     */\n+    public final native int getId() /*-{\n \t\treturn this.id;\n \t}-*/;\n \n-\t/**\n-\t * Gets friendly name of attribute\n-\t *\n-\t * @return friendly name of attribute\n-\t */\n-\tpublic final native String getFriendlyName() /*-{\n+    /**\n+     * Gets friendly name of attribute\n+     *\n+     * @return friendly name of attribute\n+     */\n+    public final native String getFriendlyName() /*-{\n \t\treturn this.friendlyName;\n \t}-*/;\n \n-\t/**\n-\t * Gets namespace of attribute\n-\t *\n-\t * @return namespace of attribute\n-\t */\n-\tpublic final native String getNamespace() /*-{\n+    /**\n+     * Gets namespace of attribute\n+     *\n+     * @return namespace of attribute\n+     */\n+    public final native String getNamespace() /*-{\n \t\treturn this.namespace;\n \t}-*/;\n \n-\t/**\n-\t * Get whole name of attribute (URN)\n-\t *\n-\t * @return whole name of attribute\n-\t */\n-\tpublic final native String getName() /*-{\n+    /**\n+     * Get whole name of attribute (URN)\n+     *\n+     * @return whole name of attribute\n+     */\n+    public final native String getName() /*-{\n \t\treturn this.namespace+':'+this.friendlyName;\n \t}-*/;\n \n-\t/**\n-\t * Get DisplayName of attribute used in GUI,\n-\t * if not present, return friendlyName parameter\n-\t *\n-\t * @return display name of attribute definition\n-\t */\n-\tpublic final native String getDisplayName() /*-{\n+    /**\n+     * Get DisplayName of attribute used in GUI,\n+     * if not present, return friendlyName parameter\n+     *\n+     * @return display name of attribute definition\n+     */\n+    public final native String getDisplayName() /*-{\n \t\tif (!this.displayName) {\n \t\t\treturn \"\";\n \t\t} else {\n@@ -70,89 +71,89 @@ public class Attribute extends JavaScriptObject {\n \t\t}\n \t}-*/;\n \n-\t/**\n-\t * Set new display name of attribute definition\n-\t *\n-\t * @param displayName new display name of attribute definition\n-\t */\n-\tpublic final native void setDisplayName(String displayName) /*-{\n+    /**\n+     * Set new display name of attribute definition\n+     *\n+     * @param displayName new display name of attribute definition\n+     */\n+    public final native void setDisplayName(String displayName) /*-{\n \t\tthis.displayName = displayName;\n \t}-*/;\n \n-\t/**\n-\t * Get base friendly name of attribute\n-\t *\n-\t * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n-\t * return \"login-namespace\"\n-\t *\n-\t * if no parameter present, return whole friendlyName\n-\t *\n-\t * @return base friendly name of attribute\n-\t */\n-\tpublic final native String getBaseFriendlyName() /*-{\n+    /**\n+     * Get base friendly name of attribute\n+     * <p>\n+     * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n+     * return \"login-namespace\"\n+     * <p>\n+     * if no parameter present, return whole friendlyName\n+     *\n+     * @return base friendly name of attribute\n+     */\n+    public final native String getBaseFriendlyName() /*-{\n \t\treturn this.baseFriendlyName;\n \t}-*/;\n \n-\t/**\n-\t * Get friendly name parameter of attribute\n-\t *\n-\t * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n-\t * return \"meta\"\n-\t *\n-\t * If no parameter present, return \":\";\n-\t *\n-\t * @return friendly name parameter of attribute\n-\t */\n-\tpublic final native String getFriendlyNameParameter() /*-{\n+    /**\n+     * Get friendly name parameter of attribute\n+     * <p>\n+     * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n+     * return \"meta\"\n+     * <p>\n+     * If no parameter present, return \":\";\n+     *\n+     * @return friendly name parameter of attribute\n+     */\n+    public final native String getFriendlyNameParameter() /*-{\n \t\treturn this.friendlyNameParameter;\n \t}-*/;\n \n-\t/**\n-\t * Get attribute def. entity (user, member,...)\n-\t *\n-\t * @return entity of attrDef\n-\t */\n-\tpublic final native String getEntity() /*-{\n+    /**\n+     * Get attribute def. entity (user, member,...)\n+     *\n+     * @return entity of attrDef\n+     */\n+    public final native String getEntity() /*-{\n \t\treturn this.entity;\n \t}-*/;\n \n-\t/**\n-\t * Gets description of attribute\n-\t *\n-\t * @return description of attribute\n-\t */\n-\tpublic final native String getDescription() /*-{\n+    /**\n+     * Gets description of attribute\n+     *\n+     * @return description of attribute\n+     */\n+    public final native String getDescription() /*-{\n \t\treturn this.description;\n \t}-*/;\n \n-\t/**\n-\t * Return definition type of attribute def.\n-\t * CORE, DEF, OPT, VIRT or \"null\" if not present\n-\t *\n-\t * @return definition type\n-\t */\n-\tpublic final native String getDefinition() /*-{\n+    /**\n+     * Return definition type of attribute def.\n+     * CORE, DEF, OPT, VIRT or \"null\" if not present\n+     *\n+     * @return definition type\n+     */\n+    public final native String getDefinition() /*-{\n \t\tvar temp = new Array();\n \t\ttemp = this.namespace.split(\":\");\n \t\tif (temp[4] == null ) { return \"null\"; }\n \t\treturn temp[4];\n \t}-*/;\n \n-\t/**\n-\t * Gets type of attribute\n-\t *\n-\t * @return type of attribute\n-\t */\n-\tpublic final native String getType() /*-{\n+    /**\n+     * Gets type of attribute\n+     *\n+     * @return type of attribute\n+     */\n+    public final native String getType() /*-{\n \t\treturn this.type;\n \t}-*/;\n \n-\t/**\n-\t * Check if attribute value is writable for user or not\n-\t *\n-\t * @return TRUE if writable / FALSE otherwise\n-\t */\n-\tpublic final native boolean isWritable() /*-{\n+    /**\n+     * Check if attribute value is writable for user or not\n+     *\n+     * @return TRUE if writable / FALSE otherwise\n+     */\n+    public final native boolean isWritable() /*-{\n \t\tif (typeof this.writable == \"undefined\") {\n \t\t\t// allow since PERUN-CORE can hadle this by itself\n \t\t\treturn true;\n@@ -160,29 +161,29 @@ public class Attribute extends JavaScriptObject {\n \t\treturn this.writable;\n \t}-*/;\n \n-\tpublic final native void setWritable(boolean write) /*-{\n+    public final native void setWritable(boolean write) /*-{\n \t\tthis.writable = write;\n \t}-*/;\n \n \n-\t/**\n-\t * Gets value of attribute\n-\t *\n-\t * @return value of attribute\n-\t */\n-\tpublic final native String getValue() /*-{\n+    /**\n+     * Gets value of attribute\n+     *\n+     * @return value of attribute\n+     */\n+    public final native String getValue() /*-{\n \t\tif (this.value == null) { return \"null\"; }\n \t\treturn this.value.toString();\n \t}-*/;\n \n-\t/**\n-\t * Sets a new value to attribute. String input is checked\n-\t * before setting for respecting value type\n-\t *\n-\t * @param newValue new value to be set to attribute\n-\t * @return true if success (correct value)\n-\t */\n-\tpublic final native boolean setValue(String newValue) /*-{\n+    /**\n+     * Sets a new value to attribute. String input is checked\n+     * before setting for respecting value type\n+     *\n+     * @param newValue new value to be set to attribute\n+     * @return true if success (correct value)\n+     */\n+    public final native boolean setValue(String newValue) /*-{\n \t\t// add trim function\n \t\tString.prototype.trim = function()\n \t\t{\n@@ -248,55 +249,56 @@ public class Attribute extends JavaScriptObject {\n \t\t\t\treturn JsonUtils.listFromJsArrayString(array);\n \t\t\t\t}*/\n \n-\tpublic native final JsArrayString getValueAsJsArray() /*-{\n+    public native final JsArrayString getValueAsJsArray() /*-{\n \t\treturn this.value;\n \t}-*/;\n \n-\tpublic native final JavaScriptObject getValueAsJso() /*-{\n+    public native final JavaScriptObject getValueAsJso() /*-{\n \t\treturn this.value;\n \t}-*/;\n \n-\tpublic native final boolean getValueAsBoolean() /*-{\n+    public native final boolean getValueAsBoolean() /*-{\n \t\treturn this.value;\n \t}-*/;\n \n-\tpublic native final Object getValueAsObject() /*-{\n+    public native final Object getValueAsObject() /*-{\n \t\treturn this.value;\n \t}-*/;\n \n-\tpublic native final void setValueAsJso(JavaScriptObject valueAsJso) /*-{\n+    public native final void setValueAsJso(JavaScriptObject valueAsJso) /*-{\n \t\tthis.value = valueAsJso;\n \t}-*/;\n \n-\tpublic native final void setValueAsString(String str) /*-{\n+    public native final void setValueAsString(String str) /*-{\n \t\tthis.value = str;\n \t}-*/;\n \n-\tpublic native final void setValueAsNumber(int i) /*-{\n+    public native final void setValueAsNumber(int i) /*-{\n \t\tthis.value = i;\n \t}-*/;\n \n-\tpublic native final void setValueAsBoolean(boolean i) /*-{\n+    public native final void setValueAsBoolean(boolean i) /*-{\n \t\tthis.value = i;\n \t}-*/;\n \n-\tpublic native final void setValueAsJsArray(JsArrayString arr) /*-{\n+    public native final void setValueAsJsArray(JsArrayString arr) /*-{\n \t\tthis.value = arr;\n \t}-*/;\n \n-\tpublic native final void setAttributeValid(boolean valid) /*-{\n+    public native final void setAttributeValid(boolean valid) /*-{\n \t\tthis.attributeValid = valid;\n \t}-*/;\n \n-\tpublic native final boolean isAttributeValid() /*-{\n+    public native final boolean isAttributeValid() /*-{\n \t\treturn this.attributeValid;\n \t}-*/;\n \n-\t/**\n-\t * Returns unique ID for GUI\n-\t * @return\n-\t */\n-\tpublic native final String getGuiUniqueId() /*-{\n+    /**\n+     * Returns unique ID for GUI\n+     *\n+     * @return\n+     */\n+    public native final String getGuiUniqueId() /*-{\n \t\tif(typeof $wnd.perunAttributeCounter == \"undefined\"){\n \t\t\t$wnd.perunAttributeCounter = 0;\n \t\t}\n@@ -308,49 +310,49 @@ public class Attribute extends JavaScriptObject {\n \t}-*/;\n \n \n-\tpublic final Map<String, JSONValue> getValueAsMap()\n-\t{\n-\t\treturn JsonUtils.parseJsonToMap(getValueAsJso());\n-\t}\n+    public final Map<String, JSONValue> getValueAsMap() {\n+        return JsonUtils.parseJsonToMap(getValueAsJso());\n+    }\n \n-\t/**\n-\t * Returns Perun specific type of object\n-\t *\n-\t * @return type of object\n-\t */\n-\tpublic final native String getObjectType() /*-{\n+    /**\n+     * Returns Perun specific type of object\n+     *\n+     * @return type of object\n+     */\n+    public final native String getObjectType() /*-{\n \t\tif (!this.beanName) {\n \t\t\treturn \"JavaScriptObject\"\n \t\t}\n \t\treturn this.beanName;\n \t}-*/;\n \n-\t/**\n-\t * Sets Perun specific type of object\n-\t *\n-\t * @param type type of object\n-\t */\n-\tpublic final native void setObjectType(String type) /*-{\n+    /**\n+     * Sets Perun specific type of object\n+     *\n+     * @param type type of object\n+     */\n+    public final native void setObjectType(String type) /*-{\n \t\tthis.beanName = type;\n \t}-*/;\n \n-\t/**\n-\t * Returns the status of this item in Perun system as String\n-\t * VALID, INVALID, SUSPENDED, EXPIRED, DISABLED\n-\t *\n-\t * @return string which defines item status\n-\t */\n-\tpublic final native String getStatus() /*-{\n+    /**\n+     * Returns the status of this item in Perun system as String\n+     * VALID, INVALID, SUSPENDED, EXPIRED, DISABLED\n+     *\n+     * @return string which defines item status\n+     */\n+    public final native String getStatus() /*-{\n \t\treturn this.status;\n \t}-*/;\n \n-\t/**\n-\t * Compares to another object\n-\t * @param o Object to compare\n-\t * @return true, if they are the same\n-\t */\n-\tpublic final boolean equals(Attribute o) {\n-\t\treturn o.getId() == this.getId();\n-\t}\n+    /**\n+     * Compares to another object\n+     *\n+     * @param o Object to compare\n+     * @return true, if they are the same\n+     */\n+    public final boolean equals(Attribute o) {\n+        return o.getId() == this.getId();\n+    }\n \n }\n",
            "diff_size": 157
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/482/Attribute.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/482/Attribute.java\nindex 39862688a96..d2cf231e858 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/482/Attribute.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/482/Attribute.java\n@@ -4,7 +4,6 @@ import com.google.gwt.core.client.JavaScriptObject;\n import com.google.gwt.core.client.JsArrayString;\n import com.google.gwt.json.client.JSONValue;\n import cz.metacentrum.perun.webgui.json.JsonUtils;\n-\n import java.util.Map;\n \n /**\n@@ -14,343 +13,362 @@ import java.util.Map;\n  * @author Pavel Zlamal <256627@mail.muni.cz>\n  */\n \n-public class Attribute extends JavaScriptObject {\n \n-\tpublic static int counter = 0;\n-\n-\tprotected Attribute() {}\n-\n-\t/**\n-\t * Gets ID of attribute\n-\t *\n-\t * @return ID of attribute\n-\t */\n-\tpublic final native int getId() /*-{\n-\t\treturn this.id;\n-\t}-*/;\n-\n-\t/**\n-\t * Gets friendly name of attribute\n-\t *\n-\t * @return friendly name of attribute\n-\t */\n-\tpublic final native String getFriendlyName() /*-{\n-\t\treturn this.friendlyName;\n-\t}-*/;\n-\n-\t/**\n-\t * Gets namespace of attribute\n-\t *\n-\t * @return namespace of attribute\n-\t */\n-\tpublic final native String getNamespace() /*-{\n-\t\treturn this.namespace;\n-\t}-*/;\n-\n-\t/**\n-\t * Get whole name of attribute (URN)\n-\t *\n-\t * @return whole name of attribute\n-\t */\n-\tpublic final native String getName() /*-{\n-\t\treturn this.namespace+':'+this.friendlyName;\n-\t}-*/;\n-\n-\t/**\n-\t * Get DisplayName of attribute used in GUI,\n-\t * if not present, return friendlyName parameter\n-\t *\n-\t * @return display name of attribute definition\n-\t */\n-\tpublic final native String getDisplayName() /*-{\n-\t\tif (!this.displayName) {\n-\t\t\treturn \"\";\n-\t\t} else {\n-\t\t\treturn this.displayName;\n-\t\t}\n-\t}-*/;\n-\n-\t/**\n-\t * Set new display name of attribute definition\n-\t *\n-\t * @param displayName new display name of attribute definition\n-\t */\n-\tpublic final native void setDisplayName(String displayName) /*-{\n-\t\tthis.displayName = displayName;\n-\t}-*/;\n-\n-\t/**\n-\t * Get base friendly name of attribute\n-\t *\n-\t * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n-\t * return \"login-namespace\"\n-\t *\n-\t * if no parameter present, return whole friendlyName\n-\t *\n-\t * @return base friendly name of attribute\n-\t */\n-\tpublic final native String getBaseFriendlyName() /*-{\n-\t\treturn this.baseFriendlyName;\n-\t}-*/;\n-\n-\t/**\n-\t * Get friendly name parameter of attribute\n-\t *\n-\t * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n-\t * return \"meta\"\n-\t *\n-\t * If no parameter present, return \":\";\n-\t *\n-\t * @return friendly name parameter of attribute\n-\t */\n-\tpublic final native String getFriendlyNameParameter() /*-{\n-\t\treturn this.friendlyNameParameter;\n-\t}-*/;\n-\n-\t/**\n-\t * Get attribute def. entity (user, member,...)\n-\t *\n-\t * @return entity of attrDef\n-\t */\n-\tpublic final native String getEntity() /*-{\n-\t\treturn this.entity;\n-\t}-*/;\n-\n-\t/**\n-\t * Gets description of attribute\n-\t *\n-\t * @return description of attribute\n-\t */\n-\tpublic final native String getDescription() /*-{\n-\t\treturn this.description;\n-\t}-*/;\n-\n-\t/**\n-\t * Return definition type of attribute def.\n-\t * CORE, DEF, OPT, VIRT or \"null\" if not present\n-\t *\n-\t * @return definition type\n-\t */\n-\tpublic final native String getDefinition() /*-{\n-\t\tvar temp = new Array();\n-\t\ttemp = this.namespace.split(\":\");\n-\t\tif (temp[4] == null ) { return \"null\"; }\n-\t\treturn temp[4];\n-\t}-*/;\n-\n-\t/**\n-\t * Gets type of attribute\n-\t *\n-\t * @return type of attribute\n-\t */\n-\tpublic final native String getType() /*-{\n-\t\treturn this.type;\n-\t}-*/;\n-\n-\t/**\n-\t * Check if attribute value is writable for user or not\n-\t *\n-\t * @return TRUE if writable / FALSE otherwise\n-\t */\n-\tpublic final native boolean isWritable() /*-{\n-\t\tif (typeof this.writable == \"undefined\") {\n-\t\t\t// allow since PERUN-CORE can hadle this by itself\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn this.writable;\n-\t}-*/;\n-\n-\tpublic final native void setWritable(boolean write) /*-{\n-\t\tthis.writable = write;\n-\t}-*/;\n-\n-\n-\t/**\n-\t * Gets value of attribute\n-\t *\n-\t * @return value of attribute\n-\t */\n-\tpublic final native String getValue() /*-{\n-\t\tif (this.value == null) { return \"null\"; }\n-\t\treturn this.value.toString();\n-\t}-*/;\n-\n-\t/**\n-\t * Sets a new value to attribute. String input is checked\n-\t * before setting for respecting value type\n-\t *\n-\t * @param newValue new value to be set to attribute\n-\t * @return true if success (correct value)\n-\t */\n-\tpublic final native boolean setValue(String newValue) /*-{\n-\t\t// add trim function\n-\t\tString.prototype.trim = function()\n-\t\t{\n-\t\t\treturn this.replace(/(^\\s*)|(\\s*$)/g, \"\")\n-\t\t};\n-\t\tif (this.type == \"java.lang.Integer\") {\n-\t\t\t// true on any number format, false otherwise\n-\t\t\tif (!isNaN(parseFloat(newValue)) && isFinite(newValue)) {\n-\t\t\t\tthis.value = parseInt(newValue);\n-\t\t\t\treturn true;\n-\t\t\t} else {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\tif (this.type == \"java.lang.Boolean\") {\n-\t\t\t// true on any number format, false otherwise\n-\t\t\tif (newValue == \"true\") {\n-\t\t\t\tthis.value = true;\n-\t\t\t\treturn true;\n-\t\t\t} else if (newValue == \"false\") {\n-\t\t\t\tthis.value = false;\n-\t\t\t\treturn true;\n-\t\t\t} else {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\tif (this.type == \"java.util.ArrayList\") {\n-\t\t\tthis.value = [];\n-\t\t\tvar count = 0;\n-\t\t\tvar input = \"\";\n-\t\t\tfor (var i=0; i<newValue.length; i++) {\n-\t\t\t\t// escaped \",\"\n-\t\t\t\tif (newValue[i] == \"\\\\\" && i+1 < newValue.length && newValue[i+1] == \",\") {\n-\t\t\t\t\ti++;                         // skip escape char\n-\t\t\t\t\tinput = input + newValue[i]  // add next\n-\t\t\t\t\tcontinue;                    // and continue\n-\t\t\t\t\t// normal \",\"\n-\t\t\t\t} else {\n-\t\t\t\t\tif (newValue[i] == \",\") {\n-\t\t\t\t\t\tinput = input.trim();          // trim whitespace on sides\n-\t\t\t\t\t\tif (input == \"\") { continue; } // skip empty values\n-\t\t\t\t\t\tthis.value[count] = input;     // save previous value\n-\t\t\t\t\t\tcount++;                       // update field counter\n-\t\t\t\t\t\tinput = \"\";                    // clear input string\n-\t\t\t\t\t\tcontinue;                      // skip \",\" and continue\n-\t\t\t\t\t}\n-\t\t\t\t\tinput = input + newValue[i]  \t   // append letter\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tinput = input.trim();               // at end - trim value\n-\t\t\tif (input == \"\") { return false; }  // at end - do not save empty strings\n-\t\t\tthis.value[count] = input;          // at end - save value\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (newValue == \"\") { return false; }   // do not save empty strings\n-\t\tthis.value = newValue;\n-\t\treturn true;\n-\t}-*/;\n-\n-\n-\t\t/*\tpublic final ArrayList<String> getValueAsList(){\n-\t\t\t\tJsArrayString array = (JsArrayString) getValueAsJso();\n-\t\t\t\treturn JsonUtils.listFromJsArrayString(array);\n-\t\t\t\t}*/\n-\n-\tpublic native final JsArrayString getValueAsJsArray() /*-{\n-\t\treturn this.value;\n-\t}-*/;\n-\n-\tpublic native final JavaScriptObject getValueAsJso() /*-{\n-\t\treturn this.value;\n-\t}-*/;\n-\n-\tpublic native final boolean getValueAsBoolean() /*-{\n-\t\treturn this.value;\n-\t}-*/;\n-\n-\tpublic native final Object getValueAsObject() /*-{\n-\t\treturn this.value;\n-\t}-*/;\n-\n-\tpublic native final void setValueAsJso(JavaScriptObject valueAsJso) /*-{\n-\t\tthis.value = valueAsJso;\n-\t}-*/;\n-\n-\tpublic native final void setValueAsString(String str) /*-{\n-\t\tthis.value = str;\n-\t}-*/;\n-\n-\tpublic native final void setValueAsNumber(int i) /*-{\n-\t\tthis.value = i;\n-\t}-*/;\n-\n-\tpublic native final void setValueAsBoolean(boolean i) /*-{\n-\t\tthis.value = i;\n-\t}-*/;\n-\n-\tpublic native final void setValueAsJsArray(JsArrayString arr) /*-{\n-\t\tthis.value = arr;\n-\t}-*/;\n-\n-\tpublic native final void setAttributeValid(boolean valid) /*-{\n-\t\tthis.attributeValid = valid;\n-\t}-*/;\n-\n-\tpublic native final boolean isAttributeValid() /*-{\n-\t\treturn this.attributeValid;\n-\t}-*/;\n-\n-\t/**\n-\t * Returns unique ID for GUI\n-\t * @return\n-\t */\n-\tpublic native final String getGuiUniqueId() /*-{\n-\t\tif(typeof $wnd.perunAttributeCounter == \"undefined\"){\n-\t\t\t$wnd.perunAttributeCounter = 0;\n-\t\t}\n-\t\tif(typeof this.guiUniqueId == \"undefined\"){\n-\t\t\tthis.guiUniqueId = \"attr-\" + $wnd.perunAttributeCounter;\n-\t\t\t$wnd.perunAttributeCounter++;\n-\t\t}\n-\t\treturn this.guiUniqueId;\n-\t}-*/;\n-\n-\n-\tpublic final Map<String, JSONValue> getValueAsMap()\n-\t{\n-\t\treturn JsonUtils.parseJsonToMap(getValueAsJso());\n-\t}\n-\n-\t/**\n-\t * Returns Perun specific type of object\n-\t *\n-\t * @return type of object\n-\t */\n-\tpublic final native String getObjectType() /*-{\n-\t\tif (!this.beanName) {\n-\t\t\treturn \"JavaScriptObject\"\n-\t\t}\n-\t\treturn this.beanName;\n-\t}-*/;\n-\n-\t/**\n-\t * Sets Perun specific type of object\n-\t *\n-\t * @param type type of object\n-\t */\n-\tpublic final native void setObjectType(String type) /*-{\n-\t\tthis.beanName = type;\n-\t}-*/;\n-\n-\t/**\n-\t * Returns the status of this item in Perun system as String\n-\t * VALID, INVALID, SUSPENDED, EXPIRED, DISABLED\n-\t *\n-\t * @return string which defines item status\n-\t */\n-\tpublic final native String getStatus() /*-{\n-\t\treturn this.status;\n-\t}-*/;\n-\n-\t/**\n-\t * Compares to another object\n-\t * @param o Object to compare\n-\t * @return true, if they are the same\n-\t */\n-\tpublic final boolean equals(Attribute o) {\n-\t\treturn o.getId() == this.getId();\n-\t}\n-\n-}\n+public class Attribute extends JavaScriptObject {\n+ public static int counter = 0;\n+\n+ protected Attribute() {}\n+\n+ /**\n+  * Gets ID of attribute\n+  *\n+  * @return ID of attribute\n+  */\n+\n+\n+ public final native int getId() /*-{\n+  return this.id;\n+ }-*/;\n+\n+ /**\n+  * Gets friendly name of attribute\n+  *\n+  * @return friendly name of attribute\n+  */\n+\n+ public final native String getFriendlyName() /*-{\n+  return this.friendlyName;\n+ }-*/;\n+\n+ /**\n+  * Gets namespace of attribute\n+  *\n+  * @return namespace of attribute\n+  */\n+\n+ public final native String getNamespace() /*-{\n+  return this.namespace;\n+ }-*/;\n+\n+ /**\n+  * Get whole name of attribute (URN)\n+  *\n+  * @return whole name of attribute\n+  */\n+\n+ public final native String getName() /*-{\n+  return this.namespace+':'+this.friendlyName;\n+ }-*/;\n+\n+ /**\n+  * Get DisplayName of attribute used in GUI,\n+  * if not present, return friendlyName parameter\n+  *\n+  * @return display name of attribute definition\n+  */\n+\n+ public final native String getDisplayName() /*-{\n+  if (!this.displayName) {\n+   return \"\";\n+  } else {\n+   return this.displayName;\n+  }\n+ }-*/;\n+\n+ /**\n+  * Set new display name of attribute definition\n+  *\n+  * @param displayName new display name of attribute definition\n+  */\n+\n+ public final native void setDisplayName(String displayName) /*-{\n+  this.displayName = displayName;\n+ }-*/;\n+\n+ /**\n+  * Get base friendly name of attribute\n+  *\n+  * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n+  * return \"login-namespace\"\n+  *\n+  * if no parameter present, return whole friendlyName\n+  *\n+  * @return base friendly name of attribute\n+  */\n+\n+ public final native String getBaseFriendlyName() /*-{\n+  return this.baseFriendlyName;\n+ }-*/;\n+\n+ /**\n+  * Get friendly name parameter of attribute\n+  *\n+  * e.g.: urn:perun:user:attribute-def:def:login-namespace:meta\n+  * return \"meta\"\n+  *\n+  * If no parameter present, return \":\";\n+  *\n+  * @return friendly name parameter of attribute\n+  */\n+\n+ public final native String getFriendlyNameParameter() /*-{\n+  return this.friendlyNameParameter;\n+ }-*/;\n+\n+ /**\n+  * Get attribute def. entity (user, member,...)\n+  *\n+  * @return entity of attrDef\n+  */\n+\n+ public final native String getEntity() /*-{\n+  return this.entity;\n+ }-*/;\n+\n+ /**\n+  * Gets description of attribute\n+  *\n+  * @return description of attribute\n+  */\n+\n+ public final native String getDescription() /*-{\n+  return this.description;\n+ }-*/;\n+\n+ /**\n+  * Return definition type of attribute def.\n+  * CORE, DEF, OPT, VIRT or \"null\" if not present\n+  *\n+  * @return definition type\n+  */\n+\n+ public final native String getDefinition() /*-{\n+  var temp = new Array();\n+  temp = this.namespace.split(\":\");\n+  if (temp[4] == null ) { return \"null\"; }\n+  return temp[4];\n+ }-*/;\n+\n+ /**\n+  * Gets type of attribute\n+  *\n+  * @return type of attribute\n+  */\n+\n+ public final native String getType() /*-{\n+  return this.type;\n+ }-*/;\n+\n+ /**\n+  * Check if attribute value is writable for user or not\n+  *\n+  * @return TRUE if writable / FALSE otherwise\n+  */\n+\n+ public final native boolean isWritable() /*-{\n+  if (typeof this.writable == \"undefined\") {\n+   // allow since PERUN-CORE can hadle this by itself\n+   return true;\n+  }\n+  return this.writable;\n+ }-*/;\n+\n+ public final native void setWritable(boolean write) /*-{\n+  this.writable = write;\n+ }-*/;\n+\n+\n+ /**\n+  * Gets value of attribute\n+  *\n+  * @return value of attribute\n+  */\n+\n+ public final native String getValue() /*-{\n+  if (this.value == null) { return \"null\"; }\n+  return this.value.toString();\n+ }-*/;\n+\n+ /**\n+  * Sets a new value to attribute. String input is checked\n+  * before setting for respecting value type\n+  *\n+  * @param newValue new value to be set to attribute\n+  * @return true if success (correct value)\n+  */\n+\n+ public final native boolean setValue(String newValue) /*-{\n+  // add trim function\n+  String.prototype.trim = function()\n+  {\n+   return this.replace(/(^\\s*)|(\\s*$)/g, \"\")\n+  };\n+  if (this.type == \"java.lang.Integer\") {\n+   // true on any number format, false otherwise\n+   if (!isNaN(parseFloat(newValue)) && isFinite(newValue)) {\n+    this.value = parseInt(newValue);\n+    return true;\n+   } else {\n+    return false;\n+   }\n+  }\n+  if (this.type == \"java.lang.Boolean\") {\n+   // true on any number format, false otherwise\n+   if (newValue == \"true\") {\n+    this.value = true;\n+    return true;\n+   } else if (newValue == \"false\") {\n+    this.value = false;\n+    return true;\n+   } else {\n+    return false;\n+   }\n+  }\n+  if (this.type == \"java.util.ArrayList\") {\n+   this.value = [];\n+   var count = 0;\n+   var input = \"\";\n+   for (var i=0; i<newValue.length; i++) {\n+    // escaped \",\"\n+    if (newValue[i] == \"\\\\\" && i+1 < newValue.length && newValue[i+1] == \",\") {\n+     i++;                         // skip escape char\n+     input = input + newValue[i]  // add next\n+     continue;                    // and continue\n+     // normal \",\"\n+    } else {\n+     if (newValue[i] == \",\") {\n+      input = input.trim();          // trim whitespace on sides\n+      if (input == \"\") { continue; } // skip empty values\n+      this.value[count] = input;     // save previous value\n+      count++;                       // update field counter\n+      input = \"\";                    // clear input string\n+      continue;                      // skip \",\" and continue\n+     }\n+     input = input + newValue[i]      // append letter\n+    }\n+   }\n+   input = input.trim();               // at end - trim value\n+   if (input == \"\") { return false; }  // at end - do not save empty strings\n+   this.value[count] = input;          // at end - save value\n+   return true;\n+  }\n+  if (newValue == \"\") { return false; }   // do not save empty strings\n+  this.value = newValue;\n+  return true;\n+ }-*/;\n+\n+\n+  /* public final ArrayList<String> getValueAsList(){\n+    JsArrayString array = (JsArrayString) getValueAsJso();\n+    return JsonUtils.listFromJsArrayString(array);\n+    }*/\n+\n+ public native final JsArrayString getValueAsJsArray() /*-{\n+  return this.value;\n+ }-*/;\n+\n+ public native final JavaScriptObject getValueAsJso() /*-{\n+  return this.value;\n+ }-*/;\n+\n+ public native final boolean getValueAsBoolean() /*-{\n+  return this.value;\n+ }-*/;\n+\n+ public native final Object getValueAsObject() /*-{\n+  return this.value;\n+ }-*/;\n+\n+ public native final void setValueAsJso(JavaScriptObject valueAsJso) /*-{\n+  this.value = valueAsJso;\n+ }-*/;\n+\n+ public native final void setValueAsString(String str) /*-{\n+  this.value = str;\n+ }-*/;\n+\n+ public native final void setValueAsNumber(int i) /*-{\n+  this.value = i;\n+ }-*/;\n+\n+ public native final void setValueAsBoolean(boolean i) /*-{\n+  this.value = i;\n+ }-*/;\n+\n+ public native final void setValueAsJsArray(JsArrayString arr) /*-{\n+  this.value = arr;\n+ }-*/;\n+\n+ public native final void setAttributeValid(boolean valid) /*-{\n+  this.attributeValid = valid;\n+ }-*/;\n+\n+ public native final boolean isAttributeValid() /*-{\n+  return this.attributeValid;\n+ }-*/;\n+\n+ /**\n+  * Returns unique ID for GUI\n+  * @return\n+  */\n+\n+ public native final String getGuiUniqueId() /*-{\n+  if(typeof $wnd.perunAttributeCounter == \"undefined\"){\n+   $wnd.perunAttributeCounter = 0;\n+  }\n+  if(typeof this.guiUniqueId == \"undefined\"){\n+   this.guiUniqueId = \"attr-\" + $wnd.perunAttributeCounter;\n+   $wnd.perunAttributeCounter++;\n+  }\n+  return this.guiUniqueId;\n+ }-*/;\n+\n+ public final Map<String, JSONValue> getValueAsMap() {\n+  return JsonUtils.parseJsonToMap(getValueAsJso());\n+ }\n+\n+ /**\n+  * Returns Perun specific type of object\n+  *\n+  * @return type of object\n+  */\n+\n+ public final native String getObjectType() /*-{\n+  if (!this.beanName) {\n+   return \"JavaScriptObject\"\n+  }\n+  return this.beanName;\n+ }-*/;\n+\n+ /**\n+  * Sets Perun specific type of object\n+  *\n+  * @param type type of object\n+  */\n+\n+ public final native void setObjectType(String type) /*-{\n+  this.beanName = type;\n+ }-*/;\n+\n+ /**\n+  * Returns the status of this item in Perun system as String\n+  * VALID, INVALID, SUSPENDED, EXPIRED, DISABLED\n+  *\n+  * @return string which defines item status\n+  */\n+\n+ public final native String getStatus() /*-{\n+  return this.status;\n+ }-*/;\n+\n+ /**\n+  * Compares to another object\n+  * @param o Object to compare\n+  * @return true, if they are the same\n+  */\n+\n+ public final boolean equals(Attribute o) {\n+  return o.getId() == this.getId();\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 360
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}