{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3200",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3200/ShellLobby.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3200/ShellLobby.java\nindex cef855d6dc9..38dbdbfe030 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3200/ShellLobby.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3200/ShellLobby.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell;\n \n import java.io.Serializable;\n@@ -36,211 +37,223 @@ import org.neo4j.shell.impl.SystemOutput;\n  */\n public abstract class ShellLobby\n {\n-    public static final Map<String, Serializable> NO_INITIAL_SESSION = Collections.unmodifiableMap(\n-            Collections.<String,Serializable>emptyMap() );\n-\n-    /**\n-     * To get rid of the RemoteException, uses a constructor without arguments.\n-     * @param cls the class of the server to instantiate.\n-     * @throws ShellException if the object couldn't be instantiated.\n-     * @return a new shell server.\n-     */\n-    public static ShellServer newServer( Class<? extends ShellServer> cls )\n-    {\n-        try\n-        {\n-            return cls.newInstance();\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n-    }\n+  public static final Map<String, Serializable> NO_INITIAL_SESSION = Collections.unmodifiableMap(\n+      Collections.<String, Serializable>emptyMap());\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * @param server the server (in the same JVM) which the client will\n-     * communicate with.\n-     * @param signalHandler the ctrl-c handler to use\n-     * @throws ShellException if the execution fails\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( ShellServer server, CtrlCHandler signalHandler ) throws ShellException\n+  /**\n+   * To get rid of the RemoteException, uses a constructor without arguments.\n+   *\n+   * @param cls the class of the server to instantiate.\n+   * @return a new shell server.\n+   * @throws ShellException if the object couldn't be instantiated.\n+   */\n+  public static ShellServer newServer(Class<? extends ShellServer> cls)\n+  {\n+    try\n     {\n-        return newClient( server, new HashMap<>(), signalHandler );\n-    }\n-\n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * @param server the server (in the same JVM) which the client will\n-     * communicate with.\n-     * @throws ShellException if the execution fails\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( ShellServer server ) throws ShellException\n+      return cls.newInstance();\n+    } catch (Exception e)\n     {\n-        return newClient( server, new HashMap<>(), InterruptSignalHandler.getHandler() );\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * @param server the server (in the same JVM) which the client will\n-     * communicate with.\n-     * @param initialSession the initial session variables the shell will have,\n-     * in addition to those provided by the server initially.\n-     * @param signalHandler the ctrl-c handler to use\n-     * @throws ShellException if the execution fails\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( ShellServer server, Map<String, Serializable> initialSession,\n-                                         CtrlCHandler signalHandler ) throws ShellException\n-    {\n-        return newClient( server, initialSession, new SystemOutput(), signalHandler );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   *\n+   * @param server        the server (in the same JVM) which the client will\n+   *                      communicate with.\n+   * @param signalHandler the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if the execution fails\n+   */\n+  public static ShellClient newClient(ShellServer server, CtrlCHandler signalHandler) throws ShellException\n+  {\n+    return newClient(server, new HashMap<>(), signalHandler);\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * @param server the server (in the same JVM) which the client will\n-     * communicate with.\n-     * @param initialSession the initial session variables the shell will have,\n-     * in addition to those provided by the server initially.\n-     * @param output the output to write to.\n-     * @param signalHandler the ctrl-c handler to use\n-     * @throws ShellException if the execution fails\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( ShellServer server, Map<String, Serializable> initialSession,\n-                                         Output output, CtrlCHandler signalHandler ) throws ShellException\n-    {\n-        return new SameJvmClient( initialSession, server, output, signalHandler );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   *\n+   * @param server the server (in the same JVM) which the client will\n+   *               communicate with.\n+   * @return the new shell client.\n+   * @throws ShellException if the execution fails\n+   */\n+  public static ShellClient newClient(ShellServer server) throws ShellException\n+  {\n+    return newClient(server, new HashMap<>(), InterruptSignalHandler.getHandler());\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server on \"localhost\".\n-     * @param port the RMI port.\n-     * @param name the RMI name.\n-     * @param ctrlcHandler the ctrl-c handler to use\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( int port, String name, CtrlCHandler ctrlcHandler )\n-            throws ShellException\n-    {\n-        return newClient( \"localhost\", port, name, ctrlcHandler );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   *\n+   * @param server         the server (in the same JVM) which the client will\n+   *                       communicate with.\n+   * @param initialSession the initial session variables the shell will have,\n+   *                       in addition to those provided by the server initially.\n+   * @param signalHandler  the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if the execution fails\n+   */\n+  public static ShellClient newClient(ShellServer server, Map<String, Serializable> initialSession,\n+                                      CtrlCHandler signalHandler) throws ShellException\n+  {\n+    return newClient(server, initialSession, new SystemOutput(), signalHandler);\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server on \"localhost\" and default RMI name.\n-     * @param port the RMI port.\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( int port )\n-            throws ShellException\n-    {\n-        return newClient( \"localhost\", port );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   *\n+   * @param server         the server (in the same JVM) which the client will\n+   *                       communicate with.\n+   * @param initialSession the initial session variables the shell will have,\n+   *                       in addition to those provided by the server initially.\n+   * @param output         the output to write to.\n+   * @param signalHandler  the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if the execution fails\n+   */\n+  public static ShellClient newClient(ShellServer server, Map<String, Serializable> initialSession,\n+                                      Output output, CtrlCHandler signalHandler) throws ShellException\n+  {\n+    return new SameJvmClient(initialSession, server, output, signalHandler);\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server to connect to.\n-     * @param host the host (IP or domain name).\n-     * @param port the RMI port.\n-     * @param name the RMI name.\n-     * @param ctrlcHandler the ctrl-c handler to use\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( String host, int port, String name, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n-    {\n-        return newClient( RmiLocation.location( host, port, name ), ctrlcHandler );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server on \"localhost\".\n+   *\n+   * @param port         the RMI port.\n+   * @param name         the RMI name.\n+   * @param ctrlcHandler the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient(int port, String name, CtrlCHandler ctrlcHandler)\n+      throws ShellException\n+  {\n+    return newClient(\"localhost\", port, name, ctrlcHandler);\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server to connect to. Uses default RMI name.\n-     * @param host the host (IP or domain name).\n-     * @param port the RMI port.\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( String host, int port )\n-        throws ShellException\n-    {\n-        return newClient( host, port, SimpleAppServer.DEFAULT_NAME, InterruptSignalHandler.getHandler() );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server on \"localhost\" and default RMI name.\n+   *\n+   * @param port the RMI port.\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient(int port)\n+      throws ShellException\n+  {\n+    return newClient(\"localhost\", port);\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server specified by {@code serverLocation}.\n-     * @param serverLocation the RMI location of the server to connect to.\n-     * @param ctrlcHandler the ctrl-c handler to use\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( RmiLocation serverLocation, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n-    {\n-        return newClient( serverLocation, new HashMap<>(), ctrlcHandler );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server to connect to.\n+   *\n+   * @param host         the host (IP or domain name).\n+   * @param port         the RMI port.\n+   * @param name         the RMI name.\n+   * @param ctrlcHandler the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient(String host, int port, String name, CtrlCHandler ctrlcHandler)\n+      throws ShellException\n+  {\n+    return newClient(RmiLocation.location(host, port, name), ctrlcHandler);\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server specified by {@code serverLocation}.\n-     * @param serverLocation the RMI location of the server to connect to.\n-     * @param initialSession the initial session variables the shell will have,\n-     * in addition to those provided by the server initially.\n-     * @param ctrlcHandler the ctrl-c handler to use\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( RmiLocation serverLocation, Map<String, Serializable> initialSession, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n-    {\n-        return new RemoteClient( initialSession, serverLocation, ctrlcHandler );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server to connect to. Uses default RMI name.\n+   *\n+   * @param host the host (IP or domain name).\n+   * @param port the RMI port.\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient(String host, int port)\n+      throws ShellException\n+  {\n+    return newClient(host, port, SimpleAppServer.DEFAULT_NAME, InterruptSignalHandler.getHandler());\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server on {@code host} with default\n-     * port and name.\n-     * @param host host to connect to.\n-     * @param ctrlcHandler the ctrl-c handler to use\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient( String host, CtrlCHandler ctrlcHandler ) throws ShellException\n-    {\n-        return newClient( host, SimpleAppServer.DEFAULT_PORT, SimpleAppServer.DEFAULT_NAME, ctrlcHandler );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server specified by {@code serverLocation}.\n+   *\n+   * @param serverLocation the RMI location of the server to connect to.\n+   * @param ctrlcHandler   the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient(RmiLocation serverLocation, CtrlCHandler ctrlcHandler)\n+      throws ShellException\n+  {\n+    return newClient(serverLocation, new HashMap<>(), ctrlcHandler);\n+  }\n \n-    /**\n-     * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n-     * It will try to find a remote server on localhost with default\n-     * port and name.\n-     * @throws ShellException if no server was found at the RMI location.\n-     * @return the new shell client.\n-     */\n-    public static ShellClient newClient() throws ShellException\n-    {\n-        return newClient( \"localhost\", SimpleAppServer.DEFAULT_PORT, SimpleAppServer.DEFAULT_NAME, InterruptSignalHandler.getHandler() );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server specified by {@code serverLocation}.\n+   *\n+   * @param serverLocation the RMI location of the server to connect to.\n+   * @param initialSession the initial session variables the shell will have,\n+   *                       in addition to those provided by the server initially.\n+   * @param ctrlcHandler   the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient(RmiLocation serverLocation, Map<String, Serializable> initialSession, CtrlCHandler ctrlcHandler)\n+      throws ShellException\n+  {\n+    return new RemoteClient(initialSession, serverLocation, ctrlcHandler);\n+  }\n \n-    public static RmiLocation remoteLocation()\n-    {\n-        return remoteLocation( SimpleAppServer.DEFAULT_PORT );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server on {@code host} with default\n+   * port and name.\n+   *\n+   * @param host         host to connect to.\n+   * @param ctrlcHandler the ctrl-c handler to use\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient(String host, CtrlCHandler ctrlcHandler) throws ShellException\n+  {\n+    return newClient(host, SimpleAppServer.DEFAULT_PORT, SimpleAppServer.DEFAULT_NAME, ctrlcHandler);\n+  }\n \n-    public static RmiLocation remoteLocation( int port )\n-    {\n-        return remoteLocation( port, SimpleAppServer.DEFAULT_NAME );\n-    }\n+  /**\n+   * Creates a client and \"starts\" it, i.e. grabs the console prompt.\n+   * It will try to find a remote server on localhost with default\n+   * port and name.\n+   *\n+   * @return the new shell client.\n+   * @throws ShellException if no server was found at the RMI location.\n+   */\n+  public static ShellClient newClient() throws ShellException\n+  {\n+    return newClient(\"localhost\", SimpleAppServer.DEFAULT_PORT, SimpleAppServer.DEFAULT_NAME, InterruptSignalHandler.getHandler());\n+  }\n \n-    public static RmiLocation remoteLocation( int port, String rmiName )\n-    {\n-        return RmiLocation.location( \"localhost\", port, rmiName );\n-    }\n+  public static RmiLocation remoteLocation()\n+  {\n+    return remoteLocation(SimpleAppServer.DEFAULT_PORT);\n+  }\n+\n+  public static RmiLocation remoteLocation(int port)\n+  {\n+    return remoteLocation(port, SimpleAppServer.DEFAULT_NAME);\n+  }\n+\n+  public static RmiLocation remoteLocation(int port, String rmiName)\n+  {\n+    return RmiLocation.location(\"localhost\", port, rmiName);\n+  }\n }\n",
            "diff_size": 237
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "132",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3200/ShellLobby.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3200/ShellLobby.java\nindex cef855d6dc9..570968f24b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3200/ShellLobby.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3200/ShellLobby.java\n@@ -36,10 +36,9 @@ import org.neo4j.shell.impl.SystemOutput;\n  */\n public abstract class ShellLobby\n {\n-    public static final Map<String, Serializable> NO_INITIAL_SESSION = Collections.unmodifiableMap(\n-            Collections.<String,Serializable>emptyMap() );\n+    public static final Map<String,Serializable> NO_INITIAL_SESSION = Collections.unmodifiableMap( Collections.<String,Serializable> emptyMap() );\n \n-    /**\n+/**\n      * To get rid of the RemoteException, uses a constructor without arguments.\n      * @param cls the class of the server to instantiate.\n      * @throws ShellException if the object couldn't be instantiated.\n@@ -92,9 +91,8 @@ public abstract class ShellLobby\n      * @throws ShellException if the execution fails\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( ShellServer server, Map<String, Serializable> initialSession,\n-                                         CtrlCHandler signalHandler ) throws ShellException\n-    {\n+    public static ShellClient newClient( ShellServer server, Map<String,Serializable> initialSession, CtrlCHandler signalHandler ) throws ShellException\n+{\n         return newClient( server, initialSession, new SystemOutput(), signalHandler );\n     }\n \n@@ -109,9 +107,8 @@ public abstract class ShellLobby\n      * @throws ShellException if the execution fails\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( ShellServer server, Map<String, Serializable> initialSession,\n-                                         Output output, CtrlCHandler signalHandler ) throws ShellException\n-    {\n+    public static ShellClient newClient( ShellServer server, Map<String,Serializable> initialSession, Output output, CtrlCHandler signalHandler ) throws ShellException\n+{\n         return new SameJvmClient( initialSession, server, output, signalHandler );\n     }\n \n@@ -124,9 +121,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( int port, String name, CtrlCHandler ctrlcHandler )\n-            throws ShellException\n-    {\n+    public static ShellClient newClient( int port, String name, CtrlCHandler ctrlcHandler ) throws ShellException\n+{\n         return newClient( \"localhost\", port, name, ctrlcHandler );\n     }\n \n@@ -137,9 +133,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( int port )\n-            throws ShellException\n-    {\n+    public static ShellClient newClient( int port ) throws ShellException\n+{\n         return newClient( \"localhost\", port );\n     }\n \n@@ -153,9 +148,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( String host, int port, String name, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n-    {\n+    public static ShellClient newClient( String host, int port, String name, CtrlCHandler ctrlcHandler ) throws ShellException\n+{\n         return newClient( RmiLocation.location( host, port, name ), ctrlcHandler );\n     }\n \n@@ -167,9 +161,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( String host, int port )\n-        throws ShellException\n-    {\n+    public static ShellClient newClient( String host, int port ) throws ShellException\n+{\n         return newClient( host, port, SimpleAppServer.DEFAULT_NAME, InterruptSignalHandler.getHandler() );\n     }\n \n@@ -181,9 +174,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( RmiLocation serverLocation, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n-    {\n+    public static ShellClient newClient( RmiLocation serverLocation, CtrlCHandler ctrlcHandler ) throws ShellException\n+{\n         return newClient( serverLocation, new HashMap<>(), ctrlcHandler );\n     }\n \n@@ -197,9 +189,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( RmiLocation serverLocation, Map<String, Serializable> initialSession, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n-    {\n+    public static ShellClient newClient( RmiLocation serverLocation, Map<String,Serializable> initialSession, CtrlCHandler ctrlcHandler ) throws ShellException\n+{\n         return new RemoteClient( initialSession, serverLocation, ctrlcHandler );\n     }\n \n@@ -243,4 +234,4 @@ public abstract class ShellLobby\n     {\n         return RmiLocation.location( \"localhost\", port, rmiName );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "113",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3200/ShellLobby.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3200/ShellLobby.java\nindex cef855d6dc9..8369a002ab0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3200/ShellLobby.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3200/ShellLobby.java\n@@ -23,7 +23,6 @@ import java.io.Serializable;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.neo4j.shell.impl.RemoteClient;\n import org.neo4j.shell.impl.RmiLocation;\n import org.neo4j.shell.impl.SameJvmClient;\n@@ -34,10 +33,10 @@ import org.neo4j.shell.impl.SystemOutput;\n  * A convenience class for creating servers clients as well as finding remote\n  * servers.\n  */\n+\n public abstract class ShellLobby\n {\n-    public static final Map<String, Serializable> NO_INITIAL_SESSION = Collections.unmodifiableMap(\n-            Collections.<String,Serializable>emptyMap() );\n+    public static final Map<String,Serializable> NO_INITIAL_SESSION = Collections.unmodifiableMap( Collections. <String,Serializable>emptyMap() );\n \n     /**\n      * To get rid of the RemoteException, uses a constructor without arguments.\n@@ -45,6 +44,7 @@ public abstract class ShellLobby\n      * @throws ShellException if the object couldn't be instantiated.\n      * @return a new shell server.\n      */\n+\n     public static ShellServer newServer( Class<? extends ShellServer> cls )\n     {\n         try\n@@ -65,6 +65,7 @@ public abstract class ShellLobby\n      * @throws ShellException if the execution fails\n      * @return the new shell client.\n      */\n+\n     public static ShellClient newClient( ShellServer server, CtrlCHandler signalHandler ) throws ShellException\n     {\n         return newClient( server, new HashMap<>(), signalHandler );\n@@ -77,6 +78,7 @@ public abstract class ShellLobby\n      * @throws ShellException if the execution fails\n      * @return the new shell client.\n      */\n+\n     public static ShellClient newClient( ShellServer server ) throws ShellException\n     {\n         return newClient( server, new HashMap<>(), InterruptSignalHandler.getHandler() );\n@@ -92,8 +94,8 @@ public abstract class ShellLobby\n      * @throws ShellException if the execution fails\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( ShellServer server, Map<String, Serializable> initialSession,\n-                                         CtrlCHandler signalHandler ) throws ShellException\n+\n+    public static ShellClient newClient( ShellServer server, Map<String,Serializable> initialSession, CtrlCHandler signalHandler ) throws ShellException\n     {\n         return newClient( server, initialSession, new SystemOutput(), signalHandler );\n     }\n@@ -109,8 +111,8 @@ public abstract class ShellLobby\n      * @throws ShellException if the execution fails\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( ShellServer server, Map<String, Serializable> initialSession,\n-                                         Output output, CtrlCHandler signalHandler ) throws ShellException\n+\n+    public static ShellClient newClient( ShellServer server, Map<String,Serializable> initialSession, Output output, CtrlCHandler signalHandler ) throws ShellException\n     {\n         return new SameJvmClient( initialSession, server, output, signalHandler );\n     }\n@@ -124,8 +126,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( int port, String name, CtrlCHandler ctrlcHandler )\n-            throws ShellException\n+\n+    public static ShellClient newClient( int port, String name, CtrlCHandler ctrlcHandler ) throws ShellException\n     {\n         return newClient( \"localhost\", port, name, ctrlcHandler );\n     }\n@@ -137,8 +139,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( int port )\n-            throws ShellException\n+\n+    public static ShellClient newClient( int port ) throws ShellException\n     {\n         return newClient( \"localhost\", port );\n     }\n@@ -153,8 +155,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( String host, int port, String name, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n+\n+    public static ShellClient newClient( String host, int port, String name, CtrlCHandler ctrlcHandler ) throws ShellException\n     {\n         return newClient( RmiLocation.location( host, port, name ), ctrlcHandler );\n     }\n@@ -167,8 +169,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( String host, int port )\n-        throws ShellException\n+\n+    public static ShellClient newClient( String host, int port ) throws ShellException\n     {\n         return newClient( host, port, SimpleAppServer.DEFAULT_NAME, InterruptSignalHandler.getHandler() );\n     }\n@@ -181,8 +183,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( RmiLocation serverLocation, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n+\n+    public static ShellClient newClient( RmiLocation serverLocation, CtrlCHandler ctrlcHandler ) throws ShellException\n     {\n         return newClient( serverLocation, new HashMap<>(), ctrlcHandler );\n     }\n@@ -197,8 +199,8 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n-    public static ShellClient newClient( RmiLocation serverLocation, Map<String, Serializable> initialSession, CtrlCHandler ctrlcHandler )\n-        throws ShellException\n+\n+    public static ShellClient newClient( RmiLocation serverLocation, Map<String,Serializable> initialSession, CtrlCHandler ctrlcHandler ) throws ShellException\n     {\n         return new RemoteClient( initialSession, serverLocation, ctrlcHandler );\n     }\n@@ -212,6 +214,7 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n+\n     public static ShellClient newClient( String host, CtrlCHandler ctrlcHandler ) throws ShellException\n     {\n         return newClient( host, SimpleAppServer.DEFAULT_PORT, SimpleAppServer.DEFAULT_NAME, ctrlcHandler );\n@@ -224,6 +227,7 @@ public abstract class ShellLobby\n      * @throws ShellException if no server was found at the RMI location.\n      * @return the new shell client.\n      */\n+\n     public static ShellClient newClient() throws ShellException\n     {\n         return newClient( \"localhost\", SimpleAppServer.DEFAULT_PORT, SimpleAppServer.DEFAULT_NAME, InterruptSignalHandler.getHandler() );\n@@ -243,4 +247,4 @@ public abstract class ShellLobby\n     {\n         return RmiLocation.location( \"localhost\", port, rmiName );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}