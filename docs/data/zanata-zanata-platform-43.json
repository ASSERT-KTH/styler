{
    "project_name": "zanata-zanata-platform",
    "error_id": "43",
    "information": {
        "errors": [
            {
                "line": "212",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        q.setParameter(\"endDate\", endDate);\n\n        if(statsBy == STATS_BY.REVIEWER) {\n            q.setComment(\"activityDAO.getReviewedStats\");\n        } else {\n            q.setComment(\"activityDAO.getTranslatedStats\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/43/ActivityDAO.java\nindex 284681e7d0f..479ff5ad646 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/43/ActivityDAO.java\n@@ -209,7 +209,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n \n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/43/ActivityDAO.java\nindex 284681e7d0f..686ea8cb666 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/43/ActivityDAO.java\n@@ -18,6 +18,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n+\n package org.zanata.dao;\n \n import java.util.Date;\n@@ -38,199 +39,199 @@ import org.zanata.model.type.EntityType;\n @Named(\"activityDAO\")\n @RequestScoped\n public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n-    private static final long serialVersionUID = 1L;\n-\n-    public ActivityDAO() {\n-        super(Activity.class);\n-    }\n-\n-    public ActivityDAO(Session session) {\n-        super(Activity.class, session);\n+  private static final long serialVersionUID = 1L;\n+\n+  public ActivityDAO() {\n+    super(Activity.class);\n+  }\n+\n+  public ActivityDAO(Session session) {\n+    super(Activity.class, session);\n+  }\n+\n+  public Activity findActivity(long personId, EntityType contextType,\n+                               long contextId, ActivityType activityType, Date approxTime) {\n+    Query query =\n+      getSession().createQuery(\n+        \"FROM Activity a WHERE a.actor.id = :personId \"\n+          + \"AND a.contextId = :contextId \"\n+          + \"AND a.activityType = :activityType \"\n+          + \"AND a.contextType = :contextType \"\n+          + \"AND :approxTime = a.approxTime\");\n+    query.setParameter(\"personId\", personId);\n+    query.setParameter(\"contextId\", contextId);\n+    query.setParameter(\"activityType\", activityType);\n+    query.setParameter(\"contextType\", contextType);\n+    query.setTimestamp(\"approxTime\", approxTime);\n+    query.setCacheable(true);\n+    query.setComment(\"activityDAO.findActivity\");\n+    return (Activity) query.uniqueResult();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<Activity> findLatestVersionActivitiesByUser(long personId,\n+                                                          List<Long> versionIds, int offset, int maxResults) {\n+    StringBuilder queryBuilder = new StringBuilder();\n+    queryBuilder.append(\"FROM Activity a WHERE a.actor.id = :personId \");\n+    queryBuilder.append(\"AND a.contextType = 'HProjectIteration' \");\n+    queryBuilder.append(\"AND a.contextId in (:versionIds) \");\n+    queryBuilder.append(\"order by a.lastChanged DESC\");\n+\n+    Query query = getSession().createQuery(queryBuilder.toString());\n+    query.setParameter(\"personId\", personId);\n+    query.setParameterList(\"versionIds\", versionIds);\n+    query.setMaxResults(maxResults);\n+    query.setFirstResult(offset);\n+    query.setCacheable(true);\n+    query.setComment(\"activityDAO.findLatestVersionActivitiesByUser\");\n+    return query.list();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<Activity> findLatestVersionActivities(Long versionId,\n+                                                    int offset, int maxResults) {\n+    StringBuilder queryBuilder = new StringBuilder();\n+    queryBuilder.append(\"FROM Activity a WHERE a.contextType = 'HProjectIteration' \");\n+    queryBuilder.append(\"AND a.contextId = :versionId \");\n+    queryBuilder.append(\"order by a.lastChanged DESC\");\n+\n+    Query query = getSession().createQuery(queryBuilder.toString());\n+    query.setParameter(\"versionId\", versionId);\n+    query.setMaxResults(maxResults);\n+    query.setFirstResult(offset);\n+    query.setCacheable(true);\n+    query.setComment(\"activityDAO.findLatestVersionActivities\");\n+    return query.list();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<Activity> findLatestActivitiesForContext(long personId,\n+                                                       long contextId, int offset, int maxResults) {\n+    Query query =\n+      getSession().createQuery(\n+        \"FROM Activity a WHERE a.actor.id = :personId \"\n+          + \"AND a.contextId = :contextId \"\n+          + \"order by a.lastChanged DESC\");\n+    query.setParameter(\"personId\", personId);\n+    query.setParameter(\"contextId\", contextId);\n+    query.setMaxResults(maxResults);\n+    query.setFirstResult(offset);\n+    query.setCacheable(true);\n+    query.setComment(\"activityDAO.findActivities\");\n+    return query.list();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public List<Activity> findLatestActivities(long personId, int offset,\n+                                             int maxResults) {\n+    Query query =\n+      getSession().createQuery(\n+        \"FROM Activity a WHERE a.actor.id = :personId \"\n+          + \"order by a.lastChanged DESC\");\n+    query.setParameter(\"personId\", personId);\n+    query.setMaxResults(maxResults);\n+    query.setFirstResult(offset);\n+    query.setCacheable(true);\n+    query.setComment(\"activityDAO.findLatestActivities\");\n+    return (List<Activity>) query.list();\n+  }\n+\n+  public int getActivityCountByActor(Long personId) {\n+    Query q =\n+      getSession()\n+        .createQuery(\n+          \"select count(*) from Activity a where a.actor.id = :personId\");\n+    q.setParameter(\"personId\", personId);\n+    q.setCacheable(true);\n+    q.setComment(\"activityDAO.getActivityCountByActor\");\n+    Long totalCount = (Long) q.uniqueResult();\n+    if (totalCount == null) {\n+      return 0;\n     }\n-\n-    public Activity findActivity(long personId, EntityType contextType,\n-            long contextId, ActivityType activityType, Date approxTime) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"AND a.activityType = :activityType \"\n-                                + \"AND a.contextType = :contextType \"\n-                                + \"AND :approxTime = a.approxTime\");\n-        query.setParameter(\"personId\", personId);\n-        query.setParameter(\"contextId\", contextId);\n-        query.setParameter(\"activityType\", activityType);\n-        query.setParameter(\"contextType\", contextType);\n-        query.setTimestamp(\"approxTime\", approxTime);\n-        query.setCacheable(true);\n-        query.setComment(\"activityDAO.findActivity\");\n-        return (Activity) query.uniqueResult();\n+    return totalCount.intValue();\n+  }\n+\n+  private enum STATS_BY {\n+    TRANSLATOR, REVIEWER;\n+  }\n+\n+  /**\n+   * Return int[0]: Words translated, int[1]: Messages translated, int[2]:\n+   * Documents translated\n+   *\n+   * @param personId\n+   * @param startDate\n+   * @param endDate\n+   */\n+  public int[]\n+  getTranslatedStats(Long personId, Date startDate, Date endDate) {\n+    return getTranslationStatistic(personId, startDate, endDate,\n+      STATS_BY.TRANSLATOR);\n+  }\n+\n+  /**\n+   * Return int[0]: Words reviewed, int[1]: Messages reviewed, int[2]:\n+   * Documents reviewed\n+   *\n+   * @param personId\n+   * @param startDate\n+   * @param endDate\n+   */\n+  public int[] getReviewedStats(Long personId, Date startDate, Date endDate) {\n+    return getTranslationStatistic(personId, startDate, endDate,\n+      STATS_BY.REVIEWER);\n+  }\n+\n+  /**\n+   * Return int[0]: Words, int[1]: Messages, int[2]: Documents\n+   *\n+   * @param personId\n+   * @param startDate\n+   * @param endDate\n+   */\n+  private int[] getTranslationStatistic(Long personId, Date startDate,\n+                                        Date endDate, STATS_BY statsBy) {\n+    StringBuilder queryBuilder = new StringBuilder();\n+    queryBuilder.append(\"select sum(tft.textFlow.wordCount),\")\n+      .append(\"count(tft.textFlow),\")\n+      .append(\"count(distinct tft.textFlow.document)\")\n+      .append(\"from HTextFlowTarget tft \");\n+\n+    if (statsBy == STATS_BY.REVIEWER) {\n+      queryBuilder.append(\"where tft.reviewer.id = :personId \");\n+    } else {\n+      queryBuilder.append(\"where tft.translator.id = :personId \");\n     }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestVersionActivitiesByUser(long personId,\n-        List<Long> versionIds, int offset, int maxResults) {\n-        StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder.append(\"FROM Activity a WHERE a.actor.id = :personId \");\n-        queryBuilder.append(\"AND a.contextType = 'HProjectIteration' \");\n-        queryBuilder.append(\"AND a.contextId in (:versionIds) \");\n-        queryBuilder.append(\"order by a.lastChanged DESC\");\n-\n-        Query query = getSession().createQuery(queryBuilder.toString());\n-        query.setParameter(\"personId\", personId);\n-        query.setParameterList(\"versionIds\", versionIds);\n-        query.setMaxResults(maxResults);\n-        query.setFirstResult(offset);\n-        query.setCacheable(true);\n-        query.setComment(\"activityDAO.findLatestVersionActivitiesByUser\");\n-        return query.list();\n+    queryBuilder\n+      .append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n+\n+    Query q = getSession().createQuery(queryBuilder.toString());\n+    q.setParameter(\"personId\", personId);\n+    q.setParameter(\"startDate\", startDate);\n+    q.setParameter(\"endDate\", endDate);\n+\n+    if (statsBy == STATS_BY.REVIEWER) {\n+      q.setComment(\"activityDAO.getReviewedStats\");\n+    } else {\n+      q.setComment(\"activityDAO.getTranslatedStats\");\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestVersionActivities(Long versionId,\n-            int offset, int maxResults) {\n-        StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder.append(\"FROM Activity a WHERE a.contextType = 'HProjectIteration' \");\n-        queryBuilder.append(\"AND a.contextId = :versionId \");\n-        queryBuilder.append(\"order by a.lastChanged DESC\");\n-\n-        Query query = getSession().createQuery(queryBuilder.toString());\n-        query.setParameter(\"versionId\", versionId);\n-        query.setMaxResults(maxResults);\n-        query.setFirstResult(offset);\n-        query.setCacheable(true);\n-        query.setComment(\"activityDAO.findLatestVersionActivities\");\n-        return query.list();\n-    }\n+    q.setCacheable(true);\n \n-    @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestActivitiesForContext(long personId,\n-            long contextId, int offset, int maxResults) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"order by a.lastChanged DESC\");\n-        query.setParameter(\"personId\", personId);\n-        query.setParameter(\"contextId\", contextId);\n-        query.setMaxResults(maxResults);\n-        query.setFirstResult(offset);\n-        query.setCacheable(true);\n-        query.setComment(\"activityDAO.findActivities\");\n-        return query.list();\n-    }\n+    Object[] objects = (Object[]) q.uniqueResult();\n \n-    @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestActivities(long personId, int offset,\n-            int maxResults) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"order by a.lastChanged DESC\");\n-        query.setParameter(\"personId\", personId);\n-        query.setMaxResults(maxResults);\n-        query.setFirstResult(offset);\n-        query.setCacheable(true);\n-        query.setComment(\"activityDAO.findLatestActivities\");\n-        return (List<Activity>) query.list();\n-    }\n-\n-    public int getActivityCountByActor(Long personId) {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from Activity a where a.actor.id = :personId\");\n-        q.setParameter(\"personId\", personId);\n-        q.setCacheable(true);\n-        q.setComment(\"activityDAO.getActivityCountByActor\");\n-        Long totalCount = (Long) q.uniqueResult();\n-        if (totalCount == null) {\n-            return 0;\n-        }\n-        return totalCount.intValue();\n-    }\n-\n-    private enum STATS_BY {\n-        TRANSLATOR, REVIEWER;\n-    }\n-\n-    /**\n-     * Return int[0]: Words translated, int[1]: Messages translated, int[2]:\n-     * Documents translated\n-     *\n-     * @param personId\n-     * @param startDate\n-     * @param endDate\n-     */\n-    public int[]\n-            getTranslatedStats(Long personId, Date startDate, Date endDate) {\n-        return getTranslationStatistic(personId, startDate, endDate,\n-                STATS_BY.TRANSLATOR);\n-    }\n+    int[] results = new int[] {0, 0, 0};\n \n-    /**\n-     * Return int[0]: Words reviewed, int[1]: Messages reviewed, int[2]:\n-     * Documents reviewed\n-     *\n-     * @param personId\n-     * @param startDate\n-     * @param endDate\n-     */\n-    public int[] getReviewedStats(Long personId, Date startDate, Date endDate) {\n-        return getTranslationStatistic(personId, startDate, endDate,\n-            STATS_BY.REVIEWER);\n+    if (objects == null || objects.length == 0) {\n+      return results;\n     }\n \n-    /**\n-     * Return int[0]: Words, int[1]: Messages, int[2]: Documents\n-     *\n-     * @param personId\n-     * @param startDate\n-     * @param endDate\n-     */\n-    private int[] getTranslationStatistic(Long personId, Date startDate,\n-        Date endDate, STATS_BY statsBy) {\n-        StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder.append(\"select sum(tft.textFlow.wordCount),\")\n-                .append(\"count(tft.textFlow),\")\n-                .append(\"count(distinct tft.textFlow.document)\")\n-                .append(\"from HTextFlowTarget tft \");\n-\n-        if (statsBy == STATS_BY.REVIEWER) {\n-            queryBuilder.append(\"where tft.reviewer.id = :personId \");\n-        } else {\n-            queryBuilder.append(\"where tft.translator.id = :personId \");\n-        }\n-        queryBuilder\n-                .append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n-\n-        Query q = getSession().createQuery(queryBuilder.toString());\n-        q.setParameter(\"personId\", personId);\n-        q.setParameter(\"startDate\", startDate);\n-        q.setParameter(\"endDate\", endDate);\n-\n-        if(statsBy == STATS_BY.REVIEWER) {\n-            q.setComment(\"activityDAO.getReviewedStats\");\n-        } else {\n-            q.setComment(\"activityDAO.getTranslatedStats\");\n-        }\n-\n-        q.setCacheable(true);\n-\n-        Object[] objects = (Object[]) q.uniqueResult();\n-\n-        int[] results = new int[] { 0, 0, 0 };\n-\n-        if (objects == null || objects.length == 0) {\n-            return results;\n-        }\n-\n-        for (int i = 0; i < results.length; i++) {\n-            if (objects.length >= i) {\n-                Long count = (Long) objects[i];\n-                results[i] = count == null ? 0 : count.intValue();\n-            }\n-        }\n-        return results;\n+    for (int i = 0; i < results.length; i++) {\n+      if (objects.length >= i) {\n+        Long count = (Long) objects[i];\n+        results[i] = count == null ? 0 : count.intValue();\n+      }\n     }\n+    return results;\n+  }\n }\n",
            "diff_size": 323
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/43/ActivityDAO.java\nindex 284681e7d0f..c1379135c5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/43/ActivityDAO.java\n@@ -22,10 +22,8 @@ package org.zanata.dao;\n \n import java.util.Date;\n import java.util.List;\n-\n import org.hibernate.Query;\n import org.hibernate.Session;\n-\n import javax.enterprise.context.RequestScoped;\n import javax.inject.Named;\n import org.zanata.common.ActivityType;\n@@ -35,6 +33,8 @@ import org.zanata.model.type.EntityType;\n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n+\n+\n @Named(\"activityDAO\")\n @RequestScoped\n public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n@@ -48,15 +48,11 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         super(Activity.class, session);\n     }\n \n-    public Activity findActivity(long personId, EntityType contextType,\n-            long contextId, ActivityType activityType, Date approxTime) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"AND a.activityType = :activityType \"\n-                                + \"AND a.contextType = :contextType \"\n-                                + \"AND :approxTime = a.approxTime\");\n+    public Activity findActivity(long personId,\n+           EntityType contextType,\n+           long contextId,\n+           ActivityType activityType, Date approxTime) {\n+        Query query = getSession().createQuery(\"FROM Activity a WHERE a.actor.id = :personId \" + \"AND a.contextId = :contextId \" + \"AND a.activityType = :activityType \" + \"AND a.contextType = :contextType \" + \"AND :approxTime = a.approxTime\");\n         query.setParameter(\"personId\", personId);\n         query.setParameter(\"contextId\", contextId);\n         query.setParameter(\"activityType\", activityType);\n@@ -68,14 +64,12 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestVersionActivitiesByUser(long personId,\n-        List<Long> versionIds, int offset, int maxResults) {\n+    public List<Activity> findLatestVersionActivitiesByUser(long personId, List<Long> versionIds, int offset, int maxResults) {\n         StringBuilder queryBuilder = new StringBuilder();\n         queryBuilder.append(\"FROM Activity a WHERE a.actor.id = :personId \");\n         queryBuilder.append(\"AND a.contextType = 'HProjectIteration' \");\n         queryBuilder.append(\"AND a.contextId in (:versionIds) \");\n         queryBuilder.append(\"order by a.lastChanged DESC\");\n-\n         Query query = getSession().createQuery(queryBuilder.toString());\n         query.setParameter(\"personId\", personId);\n         query.setParameterList(\"versionIds\", versionIds);\n@@ -87,13 +81,11 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestVersionActivities(Long versionId,\n-            int offset, int maxResults) {\n+    public List<Activity> findLatestVersionActivities(Long versionId, int offset, int maxResults) {\n         StringBuilder queryBuilder = new StringBuilder();\n         queryBuilder.append(\"FROM Activity a WHERE a.contextType = 'HProjectIteration' \");\n         queryBuilder.append(\"AND a.contextId = :versionId \");\n         queryBuilder.append(\"order by a.lastChanged DESC\");\n-\n         Query query = getSession().createQuery(queryBuilder.toString());\n         query.setParameter(\"versionId\", versionId);\n         query.setMaxResults(maxResults);\n@@ -104,13 +96,8 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestActivitiesForContext(long personId,\n-            long contextId, int offset, int maxResults) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"order by a.lastChanged DESC\");\n+    public List<Activity> findLatestActivitiesForContext(long personId, long contextId, int offset, int maxResults) {\n+        Query query = getSession().createQuery(\"FROM Activity a WHERE a.actor.id = :personId \" + \"AND a.contextId = :contextId \" + \"order by a.lastChanged DESC\");\n         query.setParameter(\"personId\", personId);\n         query.setParameter(\"contextId\", contextId);\n         query.setMaxResults(maxResults);\n@@ -121,12 +108,8 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestActivities(long personId, int offset,\n-            int maxResults) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"order by a.lastChanged DESC\");\n+    public List<Activity> findLatestActivities(long personId, int offset, int maxResults) {\n+        Query query = getSession().createQuery(\"FROM Activity a WHERE a.actor.id = :personId \" + \"order by a.lastChanged DESC\");\n         query.setParameter(\"personId\", personId);\n         query.setMaxResults(maxResults);\n         query.setFirstResult(offset);\n@@ -136,10 +119,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     public int getActivityCountByActor(Long personId) {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from Activity a where a.actor.id = :personId\");\n+        Query q = getSession().createQuery(\"select count(*) from Activity a where a.actor.id = :personId\");\n         q.setParameter(\"personId\", personId);\n         q.setCacheable(true);\n         q.setComment(\"activityDAO.getActivityCountByActor\");\n@@ -152,6 +132,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n \n     private enum STATS_BY {\n         TRANSLATOR, REVIEWER;\n+\n     }\n \n     /**\n@@ -162,10 +143,9 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param startDate\n      * @param endDate\n      */\n-    public int[]\n-            getTranslatedStats(Long personId, Date startDate, Date endDate) {\n-        return getTranslationStatistic(personId, startDate, endDate,\n-                STATS_BY.TRANSLATOR);\n+\n+    public int[] getTranslatedStats(Long personId, Date startDate, Date endDate) {\n+        return getTranslationStatistic(personId, startDate, endDate, STATS_BY.TRANSLATOR);\n     }\n \n     /**\n@@ -176,9 +156,9 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param startDate\n      * @param endDate\n      */\n+\n     public int[] getReviewedStats(Long personId, Date startDate, Date endDate) {\n-        return getTranslationStatistic(personId, startDate, endDate,\n-            STATS_BY.REVIEWER);\n+        return getTranslationStatistic(personId, startDate, endDate, STATS_BY.REVIEWER);\n     }\n \n     /**\n@@ -188,43 +168,31 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param startDate\n      * @param endDate\n      */\n-    private int[] getTranslationStatistic(Long personId, Date startDate,\n-        Date endDate, STATS_BY statsBy) {\n-        StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder.append(\"select sum(tft.textFlow.wordCount),\")\n-                .append(\"count(tft.textFlow),\")\n-                .append(\"count(distinct tft.textFlow.document)\")\n-                .append(\"from HTextFlowTarget tft \");\n \n+    private int[] getTranslationStatistic(Long personId, Date startDate, Date endDate, STATS_BY statsBy) {\n+        StringBuilder queryBuilder = new StringBuilder();\n+        queryBuilder.append(\"select sum(tft.textFlow.wordCount),\").append(\"count(tft.textFlow),\").append(\"count(distinct tft.textFlow.document)\").append(\"from HTextFlowTarget tft \");\n         if (statsBy == STATS_BY.REVIEWER) {\n             queryBuilder.append(\"where tft.reviewer.id = :personId \");\n         } else {\n             queryBuilder.append(\"where tft.translator.id = :personId \");\n         }\n-        queryBuilder\n-                .append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n-\n+        queryBuilder.append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n         Query q = getSession().createQuery(queryBuilder.toString());\n         q.setParameter(\"personId\", personId);\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n-\n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n         }\n-\n         q.setCacheable(true);\n-\n         Object[] objects = (Object[]) q.uniqueResult();\n-\n         int[] results = new int[] { 0, 0, 0 };\n-\n         if (objects == null || objects.length == 0) {\n             return results;\n         }\n-\n         for (int i = 0; i < results.length; i++) {\n             if (objects.length >= i) {\n                 Long count = (Long) objects[i];\n@@ -233,4 +201,4 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         }\n         return results;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/43/ActivityDAO.java\nindex 284681e7d0f..479ff5ad646 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/43/ActivityDAO.java\n@@ -209,7 +209,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n \n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/43/ActivityDAO.java\nindex 284681e7d0f..479ff5ad646 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/43/ActivityDAO.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/43/ActivityDAO.java\n@@ -209,7 +209,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n \n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}