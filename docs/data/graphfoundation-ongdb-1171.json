{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1171",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "241",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1171/Segments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1171/Segments.java\nindex d8d37b837f8..aad981369a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1171/Segments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1171/Segments.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus.log.segmented;\n \n import java.io.File;\n@@ -41,207 +42,205 @@ import static java.lang.String.format;\n  */\n class Segments implements AutoCloseable\n {\n-    private final OpenEndRangeMap<Long/*minIndex*/,SegmentFile> rangeMap = new OpenEndRangeMap<>();\n-    private final List<SegmentFile> allSegments;\n-    private final Log log;\n-\n-    private FileSystemAbstraction fileSystem;\n-    private final FileNames fileNames;\n-    private final ChannelMarshal<ReplicatedContent> contentMarshal;\n-    private final LogProvider logProvider;\n-    private long currentVersion;\n-    private final ReaderPool readerPool;\n-\n-    Segments( FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool, List<SegmentFile> allSegments,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, long currentVersion )\n+  private final OpenEndRangeMap<Long/*minIndex*/, SegmentFile> rangeMap = new OpenEndRangeMap<>();\n+  private final List<SegmentFile> allSegments;\n+  private final Log log;\n+\n+  private FileSystemAbstraction fileSystem;\n+  private final FileNames fileNames;\n+  private final ChannelMarshal<ReplicatedContent> contentMarshal;\n+  private final LogProvider logProvider;\n+  private long currentVersion;\n+  private final ReaderPool readerPool;\n+\n+  Segments(FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool, List<SegmentFile> allSegments,\n+           ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, long currentVersion)\n+  {\n+    this.fileSystem = fileSystem;\n+    this.fileNames = fileNames;\n+    this.allSegments = new ArrayList<>(allSegments);\n+    this.contentMarshal = contentMarshal;\n+    this.logProvider = logProvider;\n+    this.log = logProvider.getLog(getClass());\n+    this.currentVersion = currentVersion;\n+    this.readerPool = readerPool;\n+\n+    populateRangeMap();\n+  }\n+\n+  private void populateRangeMap()\n+  {\n+    for (SegmentFile segment : allSegments)\n     {\n-        this.fileSystem = fileSystem;\n-        this.fileNames = fileNames;\n-        this.allSegments = new ArrayList<>( allSegments );\n-        this.contentMarshal = contentMarshal;\n-        this.logProvider = logProvider;\n-        this.log = logProvider.getLog( getClass() );\n-        this.currentVersion = currentVersion;\n-        this.readerPool = readerPool;\n-\n-        populateRangeMap();\n+      rangeMap.replaceFrom(segment.header().prevIndex() + 1, segment);\n     }\n-\n-    private void populateRangeMap()\n+  }\n+\n+  /*\n+   * Simple chart demonstrating valid and invalid value combinations for the following three calls. All three\n+   * result in the same action, but they demand different invariants. Whether we choose to fail hard when they are\n+   * invalidated or to simply log a warning, we should still make some sort of check against them.\n+   *\n+   * Valid truncate: prevFileLast = 100, prevIndex = 80\n+   * Invalid truncate: prevFileLast = 100, prevIndex = 101\n+   *\n+   * Valid rotate: prevFileLast = 100, prevIndex = 100\n+   * Invalid rotate: prevFileLast = 100, prevIndex = 80\n+   * Invalid rotate: prevFileLast = 100, prevIndex = 101\n+   *\n+   * Valid skip: prevFileLast = 100, prevIndex = 101\n+   * Invalid skip: prevFileLast = 100, prevIndex = 80\n+   */\n+  synchronized SegmentFile truncate(long prevFileLastIndex, long prevIndex, long prevTerm) throws IOException\n+  {\n+    if (prevFileLastIndex < prevIndex)\n     {\n-        for ( SegmentFile segment : allSegments )\n-        {\n-            rangeMap.replaceFrom( segment.header().prevIndex() + 1, segment );\n-        }\n+      throw new IllegalArgumentException(format(\"Cannot truncate at index %d which is after current \" +\n+          \"append index %d\", prevIndex, prevFileLastIndex));\n     }\n-\n-    /*\n-     * Simple chart demonstrating valid and invalid value combinations for the following three calls. All three\n-     * result in the same action, but they demand different invariants. Whether we choose to fail hard when they are\n-     * invalidated or to simply log a warning, we should still make some sort of check against them.\n-     *\n-     * Valid truncate: prevFileLast = 100, prevIndex = 80\n-     * Invalid truncate: prevFileLast = 100, prevIndex = 101\n-     *\n-     * Valid rotate: prevFileLast = 100, prevIndex = 100\n-     * Invalid rotate: prevFileLast = 100, prevIndex = 80\n-     * Invalid rotate: prevFileLast = 100, prevIndex = 101\n-     *\n-     * Valid skip: prevFileLast = 100, prevIndex = 101\n-     * Invalid skip: prevFileLast = 100, prevIndex = 80\n-     */\n-    synchronized SegmentFile truncate( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n+    if (prevFileLastIndex == prevIndex)\n     {\n-        if ( prevFileLastIndex < prevIndex )\n-        {\n-            throw new IllegalArgumentException( format( \"Cannot truncate at index %d which is after current \" +\n-                                                        \"append index %d\", prevIndex, prevFileLastIndex ) );\n-        }\n-        if ( prevFileLastIndex == prevIndex )\n-        {\n-            log.warn( format( \"Truncating at current log append index %d\", prevIndex ) );\n-        }\n-        return createNext( prevFileLastIndex, prevIndex, prevTerm );\n+      log.warn(format(\"Truncating at current log append index %d\", prevIndex));\n     }\n+    return createNext(prevFileLastIndex, prevIndex, prevTerm);\n+  }\n \n-    synchronized SegmentFile rotate( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n+  synchronized SegmentFile rotate(long prevFileLastIndex, long prevIndex, long prevTerm) throws IOException\n+  {\n+    if (prevFileLastIndex != prevIndex)\n     {\n-        if ( prevFileLastIndex != prevIndex )\n-        {\n-            throw new IllegalArgumentException( format( \"Cannot rotate file and have append index go from %d \" +\n-                                                        \"to %d. Going backwards is a truncation operation, going \" +\n-                                                        \"forwards is a skip operation.\",\n-                    prevFileLastIndex, prevIndex ) );\n-        }\n-        return createNext( prevFileLastIndex, prevIndex, prevTerm );\n+      throw new IllegalArgumentException(format(\"Cannot rotate file and have append index go from %d \" +\n+              \"to %d. Going backwards is a truncation operation, going \" +\n+              \"forwards is a skip operation.\",\n+          prevFileLastIndex, prevIndex));\n     }\n+    return createNext(prevFileLastIndex, prevIndex, prevTerm);\n+  }\n \n-    synchronized SegmentFile skip( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n+  synchronized SegmentFile skip(long prevFileLastIndex, long prevIndex, long prevTerm) throws IOException\n+  {\n+    if (prevFileLastIndex > prevIndex)\n     {\n-        if ( prevFileLastIndex > prevIndex )\n-        {\n-            throw new IllegalArgumentException( format( \"Cannot skip from index %d backwards to index %d\",\n-                    prevFileLastIndex, prevIndex ) );\n-        }\n-        if ( prevFileLastIndex == prevIndex )\n-        {\n-            log.warn( format( \"Skipping at current log append index %d\", prevIndex ) );\n-        }\n-        return createNext( prevFileLastIndex, prevIndex, prevTerm );\n-    }\n-\n-    private synchronized SegmentFile createNext( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n-    {\n-        currentVersion++;\n-        SegmentHeader header = new SegmentHeader( prevFileLastIndex, currentVersion, prevIndex, prevTerm );\n-\n-        File file = fileNames.getForVersion( currentVersion );\n-        SegmentFile segment = SegmentFile.create( fileSystem, file, readerPool, currentVersion, contentMarshal, logProvider, header );\n-        // TODO: Force base directory... probably not possible using fsa.\n-        segment.flush();\n-\n-        allSegments.add( segment );\n-        rangeMap.replaceFrom( prevIndex + 1, segment );\n-\n-        return segment;\n+      throw new IllegalArgumentException(format(\"Cannot skip from index %d backwards to index %d\",\n+          prevFileLastIndex, prevIndex));\n     }\n-\n-    synchronized ValueRange<Long,SegmentFile> getForIndex( long logIndex )\n+    if (prevFileLastIndex == prevIndex)\n     {\n-        return rangeMap.lookup( logIndex );\n+      log.warn(format(\"Skipping at current log append index %d\", prevIndex));\n     }\n-\n-    synchronized SegmentFile last()\n+    return createNext(prevFileLastIndex, prevIndex, prevTerm);\n+  }\n+\n+  private synchronized SegmentFile createNext(long prevFileLastIndex, long prevIndex, long prevTerm) throws IOException\n+  {\n+    currentVersion++;\n+    SegmentHeader header = new SegmentHeader(prevFileLastIndex, currentVersion, prevIndex, prevTerm);\n+\n+    File file = fileNames.getForVersion(currentVersion);\n+    SegmentFile segment = SegmentFile.create(fileSystem, file, readerPool, currentVersion, contentMarshal, logProvider, header);\n+    // TODO: Force base directory... probably not possible using fsa.\n+    segment.flush();\n+\n+    allSegments.add(segment);\n+    rangeMap.replaceFrom(prevIndex + 1, segment);\n+\n+    return segment;\n+  }\n+\n+  synchronized ValueRange<Long, SegmentFile> getForIndex(long logIndex)\n+  {\n+    return rangeMap.lookup(logIndex);\n+  }\n+\n+  synchronized SegmentFile last()\n+  {\n+    return rangeMap.last();\n+  }\n+\n+  public synchronized SegmentFile prune(long pruneIndex)\n+  {\n+    Iterator<SegmentFile> itr = allSegments.iterator();\n+    SegmentFile notDisposed = itr.next(); // we should always leave at least one segment\n+    int firstRemaining = 0;\n+\n+    while (itr.hasNext())\n     {\n-        return rangeMap.last();\n+      SegmentFile current = itr.next();\n+      if (current.header().prevFileLastIndex() > pruneIndex)\n+      {\n+        break;\n+      }\n+\n+      if (!notDisposed.tryClose())\n+      {\n+        break;\n+      }\n+\n+      log.info(\"Pruning %s\", notDisposed);\n+      if (!notDisposed.delete())\n+      {\n+        log.error(\"Failed to delete %s\", notDisposed);\n+        break;\n+      }\n+\n+      // TODO: Sync the parent directory. Also consider handling fs operations under its own lock.\n+\n+      firstRemaining++;\n+      notDisposed = current;\n     }\n \n-    public synchronized SegmentFile prune( long pruneIndex )\n-    {\n-        Iterator<SegmentFile> itr = allSegments.iterator();\n-        SegmentFile notDisposed = itr.next(); // we should always leave at least one segment\n-        int firstRemaining = 0;\n+    rangeMap.remove(notDisposed.header().prevIndex() + 1);\n+    allSegments.subList(0, firstRemaining).clear();\n \n-        while ( itr.hasNext() )\n-        {\n-            SegmentFile current = itr.next();\n-            if ( current.header().prevFileLastIndex() > pruneIndex )\n-            {\n-                break;\n-            }\n-\n-            if ( !notDisposed.tryClose() )\n-            {\n-                break;\n-            }\n-\n-            log.info( \"Pruning %s\", notDisposed );\n-            if ( !notDisposed.delete() )\n-            {\n-                log.error( \"Failed to delete %s\", notDisposed );\n-                break;\n-            }\n-\n-            // TODO: Sync the parent directory. Also consider handling fs operations under its own lock.\n-\n-            firstRemaining++;\n-            notDisposed = current;\n-        }\n+    return notDisposed;\n+  }\n \n-        rangeMap.remove( notDisposed.header().prevIndex() + 1 );\n-        allSegments.subList( 0, firstRemaining ).clear();\n+  synchronized void visit(Visitor<SegmentFile, RuntimeException> visitor)\n+  {\n+    ListIterator<SegmentFile> itr = allSegments.listIterator();\n \n-        return notDisposed;\n+    boolean terminate = false;\n+    while (itr.hasNext() && !terminate)\n+    {\n+      terminate = visitor.visit(itr.next());\n     }\n+  }\n \n-    synchronized void visit( Visitor<SegmentFile,RuntimeException> visitor )\n-    {\n-        ListIterator<SegmentFile> itr = allSegments.listIterator();\n+  synchronized void visitBackwards(Visitor<SegmentFile, RuntimeException> visitor)\n+  {\n+    ListIterator<SegmentFile> itr = allSegments.listIterator(allSegments.size());\n \n-        boolean terminate = false;\n-        while ( itr.hasNext() && !terminate )\n-        {\n-            terminate = visitor.visit( itr.next() );\n-        }\n+    boolean terminate = false;\n+    while (itr.hasPrevious() && !terminate)\n+    {\n+      terminate = visitor.visit(itr.previous());\n     }\n+  }\n \n-    synchronized void visitBackwards( Visitor<SegmentFile,RuntimeException> visitor )\n+  @Override\n+  public synchronized void close()\n+  {\n+    RuntimeException error = null;\n+    for (SegmentFile segment : allSegments)\n     {\n-        ListIterator<SegmentFile> itr = allSegments.listIterator( allSegments.size() );\n-\n-        boolean terminate = false;\n-        while ( itr.hasPrevious() && !terminate )\n+      try\n+      {\n+        segment.close();\n+      } catch (RuntimeException ex)\n+      {\n+        if (error == null)\n         {\n-            terminate = visitor.visit( itr.previous() );\n+          error = ex;\n+        } else\n+        {\n+          error.addSuppressed(ex);\n         }\n+      }\n     }\n \n-    @Override\n-    public synchronized void close()\n+    if (error != null)\n     {\n-        RuntimeException error = null;\n-        for ( SegmentFile segment : allSegments )\n-        {\n-            try\n-            {\n-                segment.close();\n-            }\n-            catch ( RuntimeException ex )\n-            {\n-                if ( error == null )\n-                {\n-                    error = ex;\n-                }\n-                else\n-                {\n-                    error.addSuppressed( ex );\n-                }\n-            }\n-        }\n-\n-        if ( error != null )\n-        {\n-            throw error;\n-        }\n+      throw error;\n     }\n+  }\n }\n",
            "diff_size": 286
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "column": "31",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1171/Segments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1171/Segments.java\nindex d8d37b837f8..26a8b62883c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1171/Segments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1171/Segments.java\n@@ -52,8 +52,7 @@ class Segments implements AutoCloseable\n     private long currentVersion;\n     private final ReaderPool readerPool;\n \n-    Segments( FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool, List<SegmentFile> allSegments,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, long currentVersion )\n+    Segments( FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool, List<SegmentFile> allSegments, ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, long currentVersion )\n     {\n         this.fileSystem = fileSystem;\n         this.fileNames = fileNames;\n@@ -94,56 +93,53 @@ class Segments implements AutoCloseable\n     {\n         if ( prevFileLastIndex < prevIndex )\n         {\n-            throw new IllegalArgumentException( format( \"Cannot truncate at index %d which is after current \" +\n-                                                        \"append index %d\", prevIndex, prevFileLastIndex ) );\n-        }\n+            throw new IllegalArgumentException( format( \"Cannot truncate at index %d which is after current \" + \"append index %d\", prevIndex, prevFileLastIndex ) );\n+    }\n         if ( prevFileLastIndex == prevIndex )\n         {\n             log.warn( format( \"Truncating at current log append index %d\", prevIndex ) );\n         }\n-        return createNext( prevFileLastIndex, prevIndex, prevTerm );\n+\n+return createNext( prevFileLastIndex, prevIndex, prevTerm );\n     }\n \n     synchronized SegmentFile rotate( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n     {\n         if ( prevFileLastIndex != prevIndex )\n         {\n-            throw new IllegalArgumentException( format( \"Cannot rotate file and have append index go from %d \" +\n-                                                        \"to %d. Going backwards is a truncation operation, going \" +\n-                                                        \"forwards is a skip operation.\",\n-                    prevFileLastIndex, prevIndex ) );\n+            throw new IllegalArgumentException( format( \"Cannot rotate file and have append index go from %d \" + \"to %d. Going backwards is a truncation operation, going \" + \"forwards is a skip operation.\", prevFileLastIndex, prevIndex ) );\n         }\n-        return createNext( prevFileLastIndex, prevIndex, prevTerm );\n+\n+return createNext( prevFileLastIndex, prevIndex, prevTerm );\n     }\n \n     synchronized SegmentFile skip( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n     {\n-        if ( prevFileLastIndex > prevIndex )\n+        if ( prevFileLastIndex> prevIndex )\n         {\n             throw new IllegalArgumentException( format( \"Cannot skip from index %d backwards to index %d\",\n                     prevFileLastIndex, prevIndex ) );\n         }\n-        if ( prevFileLastIndex == prevIndex )\n+\n+if ( prevFileLastIndex == prevIndex )\n         {\n             log.warn( format( \"Skipping at current log append index %d\", prevIndex ) );\n         }\n-        return createNext( prevFileLastIndex, prevIndex, prevTerm );\n+\n+return createNext( prevFileLastIndex, prevIndex, prevTerm );\n     }\n \n     private synchronized SegmentFile createNext( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n     {\n         currentVersion++;\n         SegmentHeader header = new SegmentHeader( prevFileLastIndex, currentVersion, prevIndex, prevTerm );\n-\n-        File file = fileNames.getForVersion( currentVersion );\n+File file = fileNames.getForVersion( currentVersion );\n         SegmentFile segment = SegmentFile.create( fileSystem, file, readerPool, currentVersion, contentMarshal, logProvider, header );\n         // TODO: Force base directory... probably not possible using fsa.\n         segment.flush();\n-\n-        allSegments.add( segment );\n+allSegments.add( segment );\n         rangeMap.replaceFrom( prevIndex + 1, segment );\n-\n-        return segment;\n+return segment;\n     }\n \n     synchronized ValueRange<Long,SegmentFile> getForIndex( long logIndex )\n@@ -190,8 +186,7 @@ class Segments implements AutoCloseable\n \n         rangeMap.remove( notDisposed.header().prevIndex() + 1 );\n         allSegments.subList( 0, firstRemaining ).clear();\n-\n-        return notDisposed;\n+return notDisposed;\n     }\n \n     synchronized void visit( Visitor<SegmentFile,RuntimeException> visitor )\n@@ -244,4 +239,4 @@ class Segments implements AutoCloseable\n             throw error;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "68",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "158",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "193",
                    "column": "29",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "193",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "203",
                    "column": "33",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "203",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "213",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1171/Segments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1171/Segments.java\nindex d8d37b837f8..1d41a74d644 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1171/Segments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1171/Segments.java\n@@ -25,7 +25,6 @@ import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n-\n import org.neo4j.causalclustering.core.consensus.log.segmented.OpenEndRangeMap.ValueRange;\n import org.neo4j.causalclustering.core.replication.ReplicatedContent;\n import org.neo4j.causalclustering.messaging.marshalling.ChannelMarshal;\n@@ -33,18 +32,17 @@ import org.neo4j.helpers.collection.Visitor;\n import org.neo4j.io.fs.FileSystemAbstraction;\n import org.neo4j.logging.Log;\n import org.neo4j.logging.LogProvider;\n-\n import static java.lang.String.format;\n \n /**\n  * Keeps track of all the segments that the RAFT log consists of.\n  */\n+\n class Segments implements AutoCloseable\n {\n     private final OpenEndRangeMap<Long/*minIndex*/,SegmentFile> rangeMap = new OpenEndRangeMap<>();\n     private final List<SegmentFile> allSegments;\n     private final Log log;\n-\n     private FileSystemAbstraction fileSystem;\n     private final FileNames fileNames;\n     private final ChannelMarshal<ReplicatedContent> contentMarshal;\n@@ -52,8 +50,7 @@ class Segments implements AutoCloseable\n     private long currentVersion;\n     private final ReaderPool readerPool;\n \n-    Segments( FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool, List<SegmentFile> allSegments,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, long currentVersion )\n+    Segments( FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool, List<SegmentFile> allSegments, ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, long currentVersion )\n     {\n         this.fileSystem = fileSystem;\n         this.fileNames = fileNames;\n@@ -63,13 +60,12 @@ class Segments implements AutoCloseable\n         this.log = logProvider.getLog( getClass() );\n         this.currentVersion = currentVersion;\n         this.readerPool = readerPool;\n-\n         populateRangeMap();\n     }\n \n     private void populateRangeMap()\n     {\n-        for ( SegmentFile segment : allSegments )\n+        for( SegmentFile segment : allSegments)\n         {\n             rangeMap.replaceFrom( segment.header().prevIndex() + 1, segment );\n         }\n@@ -90,17 +86,19 @@ class Segments implements AutoCloseable\n      * Valid skip: prevFileLast = 100, prevIndex = 101\n      * Invalid skip: prevFileLast = 100, prevIndex = 80\n      */\n+\n     synchronized SegmentFile truncate( long prevFileLastIndex, long prevIndex, long prevTerm ) throws IOException\n     {\n         if ( prevFileLastIndex < prevIndex )\n         {\n-            throw new IllegalArgumentException( format( \"Cannot truncate at index %d which is after current \" +\n-                                                        \"append index %d\", prevIndex, prevFileLastIndex ) );\n+            throw new IllegalArgumentException( format( \"Cannot truncate at index %d which is after current \" + \"append index %d\", prevIndex, prevFileLastIndex ) );\n         }\n+\n         if ( prevFileLastIndex == prevIndex )\n         {\n             log.warn( format( \"Truncating at current log append index %d\", prevIndex ) );\n         }\n+\n         return createNext( prevFileLastIndex, prevIndex, prevTerm );\n     }\n \n@@ -108,11 +106,9 @@ class Segments implements AutoCloseable\n     {\n         if ( prevFileLastIndex != prevIndex )\n         {\n-            throw new IllegalArgumentException( format( \"Cannot rotate file and have append index go from %d \" +\n-                                                        \"to %d. Going backwards is a truncation operation, going \" +\n-                                                        \"forwards is a skip operation.\",\n-                    prevFileLastIndex, prevIndex ) );\n+            throw new IllegalArgumentException( format( \"Cannot rotate file and have append index go from %d \" + \"to %d. Going backwards is a truncation operation, going \" + \"forwards is a skip operation.\", prevFileLastIndex, prevIndex ) );\n         }\n+\n         return createNext( prevFileLastIndex, prevIndex, prevTerm );\n     }\n \n@@ -120,13 +116,14 @@ class Segments implements AutoCloseable\n     {\n         if ( prevFileLastIndex > prevIndex )\n         {\n-            throw new IllegalArgumentException( format( \"Cannot skip from index %d backwards to index %d\",\n-                    prevFileLastIndex, prevIndex ) );\n+            throw new IllegalArgumentException( format( \"Cannot skip from index %d backwards to index %d\", prevFileLastIndex, prevIndex ) );\n         }\n+\n         if ( prevFileLastIndex == prevIndex )\n         {\n             log.warn( format( \"Skipping at current log append index %d\", prevIndex ) );\n         }\n+\n         return createNext( prevFileLastIndex, prevIndex, prevTerm );\n     }\n \n@@ -134,15 +131,12 @@ class Segments implements AutoCloseable\n     {\n         currentVersion++;\n         SegmentHeader header = new SegmentHeader( prevFileLastIndex, currentVersion, prevIndex, prevTerm );\n-\n         File file = fileNames.getForVersion( currentVersion );\n         SegmentFile segment = SegmentFile.create( fileSystem, file, readerPool, currentVersion, contentMarshal, logProvider, header );\n         // TODO: Force base directory... probably not possible using fsa.\n         segment.flush();\n-\n         allSegments.add( segment );\n         rangeMap.replaceFrom( prevIndex + 1, segment );\n-\n         return segment;\n     }\n \n@@ -161,8 +155,7 @@ class Segments implements AutoCloseable\n         Iterator<SegmentFile> itr = allSegments.iterator();\n         SegmentFile notDisposed = itr.next(); // we should always leave at least one segment\n         int firstRemaining = 0;\n-\n-        while ( itr.hasNext() )\n+        while( itr.hasNext())\n         {\n             SegmentFile current = itr.next();\n             if ( current.header().prevFileLastIndex() > pruneIndex )\n@@ -170,13 +163,13 @@ class Segments implements AutoCloseable\n                 break;\n             }\n \n-            if ( !notDisposed.tryClose() )\n+            if ( ! notDisposed.tryClose() )\n             {\n                 break;\n             }\n \n             log.info( \"Pruning %s\", notDisposed );\n-            if ( !notDisposed.delete() )\n+            if ( ! notDisposed.delete() )\n             {\n                 log.error( \"Failed to delete %s\", notDisposed );\n                 break;\n@@ -190,16 +183,14 @@ class Segments implements AutoCloseable\n \n         rangeMap.remove( notDisposed.header().prevIndex() + 1 );\n         allSegments.subList( 0, firstRemaining ).clear();\n-\n         return notDisposed;\n     }\n \n     synchronized void visit( Visitor<SegmentFile,RuntimeException> visitor )\n     {\n         ListIterator<SegmentFile> itr = allSegments.listIterator();\n-\n         boolean terminate = false;\n-        while ( itr.hasNext() && !terminate )\n+        while( itr.hasNext()&& ! terminate)\n         {\n             terminate = visitor.visit( itr.next() );\n         }\n@@ -208,9 +199,8 @@ class Segments implements AutoCloseable\n     synchronized void visitBackwards( Visitor<SegmentFile,RuntimeException> visitor )\n     {\n         ListIterator<SegmentFile> itr = allSegments.listIterator( allSegments.size() );\n-\n         boolean terminate = false;\n-        while ( itr.hasPrevious() && !terminate )\n+        while( itr.hasPrevious()&& ! terminate)\n         {\n             terminate = visitor.visit( itr.previous() );\n         }\n@@ -220,7 +210,7 @@ class Segments implements AutoCloseable\n     public synchronized void close()\n     {\n         RuntimeException error = null;\n-        for ( SegmentFile segment : allSegments )\n+        for( SegmentFile segment : allSegments)\n         {\n             try\n             {\n@@ -244,4 +234,4 @@ class Segments implements AutoCloseable\n             throw error;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}