{
    "project_name": "graphfoundation-ongdb",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "183",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "218",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "226",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "241",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "298",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "370",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/15/DefaultUdcInformationCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/15/DefaultUdcInformationCollector.java\nindex a136e8149d8..5b274da2d9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/15/DefaultUdcInformationCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/15/DefaultUdcInformationCollector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.ext.udc.impl;\n \n import java.io.File;\n@@ -75,357 +76,351 @@ import static org.neo4j.ext.udc.UdcConstants.VERSION;\n \n public class DefaultUdcInformationCollector implements UdcInformationCollector\n {\n-    private final Config config;\n-    private final UsageData usageData;\n-    private final IdGeneratorFactory idGeneratorFactory;\n-\n-    private String storeId;\n-    private boolean crashPing;\n+  private final Config config;\n+  private final UsageData usageData;\n+  private final IdGeneratorFactory idGeneratorFactory;\n \n-    private NeoStoreDataSource neoStoreDataSource;\n+  private String storeId;\n+  private boolean crashPing;\n \n-    public DefaultUdcInformationCollector( Config config, DataSourceManager xadsm,\n-            IdGeneratorFactory idGeneratorFactory, StartupStatistics startupStats, UsageData usageData )\n-    {\n-        this.config = config;\n-        this.usageData = usageData;\n-        this.idGeneratorFactory = idGeneratorFactory;\n-        final StartupStatistics startupStatistics = startupStats;\n+  private NeoStoreDataSource neoStoreDataSource;\n \n-        if ( xadsm != null )\n-        {\n-            xadsm.addListener( new DataSourceManager.Listener()\n-            {\n-                @Override\n-                public void registered( NeoStoreDataSource ds )\n-                {\n-                    crashPing = startupStatistics.numberOfRecoveredTransactions() > 0;\n-                    storeId = Long.toHexString( ds.getStoreId().getRandomId() );\n-\n-                    neoStoreDataSource = ds;\n-                }\n-\n-                @Override\n-                public void unregistered( NeoStoreDataSource ds )\n-                {\n-                    crashPing = false;\n-                    storeId = null;\n-\n-                    neoStoreDataSource = null;\n-                }\n-            } );\n-        }\n-    }\n+  public DefaultUdcInformationCollector(Config config, DataSourceManager xadsm,\n+                                        IdGeneratorFactory idGeneratorFactory, StartupStatistics startupStats, UsageData usageData)\n+  {\n+    this.config = config;\n+    this.usageData = usageData;\n+    this.idGeneratorFactory = idGeneratorFactory;\n+    final StartupStatistics startupStatistics = startupStats;\n \n-    public static String filterVersionForUDC( String version )\n+    if (xadsm != null)\n     {\n-        if ( !version.contains( \"+\" ) )\n+      xadsm.addListener(new DataSourceManager.Listener()\n+      {\n+        @Override\n+        public void registered(NeoStoreDataSource ds)\n         {\n-            return version;\n-        }\n-        return version.substring( 0, version.indexOf( '+' ) );\n-    }\n-\n-    @Override\n-    public Map<String,String> getUdcParams()\n-    {\n-        String classPath = getClassPath();\n-\n-        Map<String,String> udcFields = new HashMap<>();\n-\n-        add( udcFields, ID, storeId );\n-        add( udcFields, VERSION, filterVersionForUDC( usageData.get( UsageDataKeys.version ) ) );\n-        add( udcFields, REVISION, filterVersionForUDC( usageData.get( UsageDataKeys.revision ) ) );\n-\n-        add( udcFields, EDITION, usageData.get( UsageDataKeys.edition ).name().toLowerCase() );\n-        add( udcFields, SOURCE, config.get( UdcSettings.udc_source ) );\n-        add( udcFields, REGISTRATION, config.get( UdcSettings.udc_registration_key ) );\n-        add( udcFields, DATABASE_MODE, usageData.get( UsageDataKeys.operationalMode ).name() );\n-        add( udcFields, SERVER_ID, usageData.get( UsageDataKeys.serverId ) );\n-        add( udcFields, USER_AGENTS, toCommaString( usageData.get( UsageDataKeys.clientNames ) ) );\n-\n-        add( udcFields, TAGS, determineTags( jarNamesForTags, classPath ) );\n-        add( udcFields, CLUSTER_HASH, determineClusterNameHash() );\n-\n-        add( udcFields, MAC, determineMacAddress() );\n-        add( udcFields, DISTRIBUTION, determineOsDistribution() );\n-        add( udcFields, NUM_PROCESSORS, determineNumberOfProcessors() );\n-        add( udcFields, TOTAL_MEMORY, determineTotalMemory() );\n-        add( udcFields, HEAP_SIZE, determineHeapSize() );\n-\n-        add( udcFields, NODE_IDS_IN_USE, determineNodesIdsInUse() );\n-        add( udcFields, RELATIONSHIP_IDS_IN_USE, determineRelationshipIdsInUse() );\n-        add( udcFields, LABEL_IDS_IN_USE, determineLabelIdsInUse() );\n-        add( udcFields, PROPERTY_IDS_IN_USE, determinePropertyIdsInUse() );\n-\n-        add( udcFields, FEATURES, usageData.get( UsageDataKeys.features ).asHex() );\n-\n-        addStoreFileSizes( udcFields );\n-\n-        udcFields.putAll( determineSystemProperties() );\n-        return udcFields;\n-    }\n+          crashPing = startupStatistics.numberOfRecoveredTransactions() > 0;\n+          storeId = Long.toHexString(ds.getStoreId().getRandomId());\n \n-    /**\n-     * Register store file sizes, sans transaction logs\n-     */\n-    private void addStoreFileSizes( Map<String,String> udcFields )\n-    {\n-        if ( neoStoreDataSource == null )\n-        {\n-            return;\n-        }\n-\n-        try ( ResourceIterator<StoreFileMetadata> files = neoStoreDataSource.listStoreFiles( false ) )\n-        {\n-            addStoreFileSizes( udcFields, files );\n+          neoStoreDataSource = ds;\n         }\n-        catch ( IOException | NullPointerException ignored )\n-        {\n-            // we just didn't report store file sizes this time around\n-        }\n-    }\n-\n-    private void addStoreFileSizes( Map<String,String> udcFields, ResourceIterator<StoreFileMetadata> files )\n-    {\n-        long size = 0;\n \n-        while ( files.hasNext() )\n+        @Override\n+        public void unregistered(NeoStoreDataSource ds)\n         {\n-            File file = files.next().file();\n+          crashPing = false;\n+          storeId = null;\n \n-            size += file.length();\n+          neoStoreDataSource = null;\n         }\n-\n-        add( udcFields, STORE_SIZE, size );\n+      });\n     }\n+  }\n \n-    private String determineOsDistribution()\n+  public static String filterVersionForUDC(String version)\n+  {\n+    if (!version.contains(\"+\"))\n     {\n-        if ( System.getProperties().getProperty( \"os.name\", \"\" ).equals( \"Linux\" ) )\n-        {\n-            return searchForPackageSystems();\n-        }\n-        else\n-        {\n-            return UNKNOWN_DIST;\n-        }\n+      return version;\n     }\n-\n-    static String searchForPackageSystems()\n+    return version.substring(0, version.indexOf('+'));\n+  }\n+\n+  @Override\n+  public Map<String, String> getUdcParams()\n+  {\n+    String classPath = getClassPath();\n+\n+    Map<String, String> udcFields = new HashMap<>();\n+\n+    add(udcFields, ID, storeId);\n+    add(udcFields, VERSION, filterVersionForUDC(usageData.get(UsageDataKeys.version)));\n+    add(udcFields, REVISION, filterVersionForUDC(usageData.get(UsageDataKeys.revision)));\n+\n+    add(udcFields, EDITION, usageData.get(UsageDataKeys.edition).name().toLowerCase());\n+    add(udcFields, SOURCE, config.get(UdcSettings.udc_source));\n+    add(udcFields, REGISTRATION, config.get(UdcSettings.udc_registration_key));\n+    add(udcFields, DATABASE_MODE, usageData.get(UsageDataKeys.operationalMode).name());\n+    add(udcFields, SERVER_ID, usageData.get(UsageDataKeys.serverId));\n+    add(udcFields, USER_AGENTS, toCommaString(usageData.get(UsageDataKeys.clientNames)));\n+\n+    add(udcFields, TAGS, determineTags(jarNamesForTags, classPath));\n+    add(udcFields, CLUSTER_HASH, determineClusterNameHash());\n+\n+    add(udcFields, MAC, determineMacAddress());\n+    add(udcFields, DISTRIBUTION, determineOsDistribution());\n+    add(udcFields, NUM_PROCESSORS, determineNumberOfProcessors());\n+    add(udcFields, TOTAL_MEMORY, determineTotalMemory());\n+    add(udcFields, HEAP_SIZE, determineHeapSize());\n+\n+    add(udcFields, NODE_IDS_IN_USE, determineNodesIdsInUse());\n+    add(udcFields, RELATIONSHIP_IDS_IN_USE, determineRelationshipIdsInUse());\n+    add(udcFields, LABEL_IDS_IN_USE, determineLabelIdsInUse());\n+    add(udcFields, PROPERTY_IDS_IN_USE, determinePropertyIdsInUse());\n+\n+    add(udcFields, FEATURES, usageData.get(UsageDataKeys.features).asHex());\n+\n+    addStoreFileSizes(udcFields);\n+\n+    udcFields.putAll(determineSystemProperties());\n+    return udcFields;\n+  }\n+\n+  /**\n+   * Register store file sizes, sans transaction logs\n+   */\n+  private void addStoreFileSizes(Map<String, String> udcFields)\n+  {\n+    if (neoStoreDataSource == null)\n     {\n-        try\n-        {\n-            if ( new File( \"/bin/rpm\" ).exists() )\n-            {\n-                return \"rpm\";\n-            }\n-            if ( new File( \"/usr/bin/dpkg\" ).exists() )\n-            {\n-                return \"dpkg\";\n-            }\n-        }\n-        catch ( Exception e )\n-        {\n-            // ignore\n-        }\n-        return UNKNOWN_DIST;\n+      return;\n     }\n \n-    private Integer determineClusterNameHash()\n+    try (ResourceIterator<StoreFileMetadata> files = neoStoreDataSource.listStoreFiles(false))\n     {\n-        try\n-        {\n-            Class<?> settings = Class.forName( \"org.neo4j.cluster.ClusterSettings\" );\n-            Setting setting = (Setting) settings.getField( \"cluster_name\" ).get( null );\n-            Object name = config.get( setting );\n-            return name != null ? Math.abs( name.hashCode() % Integer.MAX_VALUE ) : null;\n-        }\n-        catch ( Exception e )\n-        {\n-            return null;\n-        }\n-    }\n-\n-    private final Map<String,String> jarNamesForTags =\n-            MapUtil.stringMap( \"spring-\", \"spring\", \"(javax.ejb|ejb-jar)\", \"ejb\",\n-                    \"(weblogic|glassfish|websphere|jboss)\", \"appserver\", \"openshift\", \"openshift\", \"cloudfoundry\",\n-                    \"cloudfoundry\", \"(junit|testng)\", \"test\", \"jruby\", \"ruby\", \"clojure\", \"clojure\", \"jython\", \"python\",\n-                    \"groovy\", \"groovy\", \"(tomcat|jetty)\", \"web\", \"spring-data-neo4j\", \"sdn\" );\n-\n-    private String determineTags( Map<String,String> jarNamesForTags, String classPath )\n+      addStoreFileSizes(udcFields, files);\n+    } catch (IOException | NullPointerException ignored)\n     {\n-        StringBuilder result = new StringBuilder();\n-        for ( Map.Entry<String,String> entry : jarNamesForTags.entrySet() )\n-        {\n-            final Pattern pattern = Pattern.compile( entry.getKey() );\n-            if ( pattern.matcher( classPath ).find() )\n-            {\n-                result.append( \",\" ).append( entry.getValue() );\n-            }\n-        }\n-        if ( result.length() == 0 )\n-        {\n-            return null;\n-        }\n-        return result.substring( 1 );\n+      // we just didn't report store file sizes this time around\n     }\n+  }\n \n-    private String getClassPath()\n-    {\n-        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-        return runtime.getClassPath();\n-    }\n+  private void addStoreFileSizes(Map<String, String> udcFields, ResourceIterator<StoreFileMetadata> files)\n+  {\n+    long size = 0;\n \n-    private String determineMacAddress()\n+    while (files.hasNext())\n     {\n-        String formattedMac = \"0\";\n-        try\n-        {\n-            InetAddress address = InetAddress.getLocalHost();\n-            NetworkInterface ni = NetworkInterface.getByInetAddress( address );\n-            if ( ni != null )\n-            {\n-                byte[] mac = ni.getHardwareAddress();\n-                if ( mac != null )\n-                {\n-                    StringBuilder sb = new StringBuilder( mac.length * 2 );\n-                    Formatter formatter = new Formatter( sb );\n-                    for ( byte b : mac )\n-                    {\n-                        formatter.format( \"%02x\", b );\n-                    }\n-                    formattedMac = sb.toString();\n-                }\n-            }\n-        }\n-        catch ( Throwable t )\n-        {\n-            //\n-        }\n+      File file = files.next().file();\n \n-        return formattedMac;\n+      size += file.length();\n     }\n \n-    private int determineNumberOfProcessors()\n-    {\n-        return Runtime.getRuntime().availableProcessors();\n-    }\n+    add(udcFields, STORE_SIZE, size);\n+  }\n \n-    private long determineTotalMemory()\n+  private String determineOsDistribution()\n+  {\n+    if (System.getProperties().getProperty(\"os.name\", \"\").equals(\"Linux\"))\n     {\n-        return OsBeanUtil.getTotalPhysicalMemory();\n-    }\n-\n-    private long determineHeapSize()\n+      return searchForPackageSystems();\n+    } else\n     {\n-        return ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n+      return UNKNOWN_DIST;\n     }\n+  }\n \n-    private long determineNodesIdsInUse()\n+  static String searchForPackageSystems()\n+  {\n+    try\n     {\n-        return getNumberOfIdsInUse( IdType.NODE );\n-    }\n-\n-    private long determineLabelIdsInUse()\n+      if (new File(\"/bin/rpm\").exists())\n+      {\n+        return \"rpm\";\n+      }\n+      if (new File(\"/usr/bin/dpkg\").exists())\n+      {\n+        return \"dpkg\";\n+      }\n+    } catch (Exception e)\n     {\n-        return getNumberOfIdsInUse( IdType.LABEL_TOKEN );\n+      // ignore\n     }\n+    return UNKNOWN_DIST;\n+  }\n \n-    private long determinePropertyIdsInUse()\n+  private Integer determineClusterNameHash()\n+  {\n+    try\n+    {\n+      Class<?> settings = Class.forName(\"org.neo4j.cluster.ClusterSettings\");\n+      Setting setting = (Setting) settings.getField(\"cluster_name\").get(null);\n+      Object name = config.get(setting);\n+      return name != null ? Math.abs(name.hashCode() % Integer.MAX_VALUE) : null;\n+    } catch (Exception e)\n     {\n-        return getNumberOfIdsInUse( IdType.PROPERTY );\n+      return null;\n     }\n-\n-    private long determineRelationshipIdsInUse()\n+  }\n+\n+  private final Map<String, String> jarNamesForTags =\n+      MapUtil.stringMap(\"spring-\", \"spring\", \"(javax.ejb|ejb-jar)\", \"ejb\",\n+          \"(weblogic|glassfish|websphere|jboss)\", \"appserver\", \"openshift\", \"openshift\", \"cloudfoundry\",\n+          \"cloudfoundry\", \"(junit|testng)\", \"test\", \"jruby\", \"ruby\", \"clojure\", \"clojure\", \"jython\", \"python\",\n+          \"groovy\", \"groovy\", \"(tomcat|jetty)\", \"web\", \"spring-data-neo4j\", \"sdn\");\n+\n+  private String determineTags(Map<String, String> jarNamesForTags, String classPath)\n+  {\n+    StringBuilder result = new StringBuilder();\n+    for (Map.Entry<String, String> entry : jarNamesForTags.entrySet())\n     {\n-        return getNumberOfIdsInUse( IdType.RELATIONSHIP );\n+      final Pattern pattern = Pattern.compile(entry.getKey());\n+      if (pattern.matcher(classPath).find())\n+      {\n+        result.append(\",\").append(entry.getValue());\n+      }\n     }\n-\n-    private long getNumberOfIdsInUse( IdType type )\n+    if (result.length() == 0)\n     {\n-        return idGeneratorFactory.get( type ).getNumberOfIdsInUse();\n+      return null;\n     }\n-\n-    private String toCommaString( Object values )\n+    return result.substring(1);\n+  }\n+\n+  private String getClassPath()\n+  {\n+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+    return runtime.getClassPath();\n+  }\n+\n+  private String determineMacAddress()\n+  {\n+    String formattedMac = \"0\";\n+    try\n     {\n-        StringBuilder result = new StringBuilder();\n-        if ( values instanceof Iterable )\n-        {\n-            for ( Object agent : (Iterable) values )\n-            {\n-                if ( agent == null )\n-                {\n-                    continue;\n-                }\n-                if ( result.length() > 0 )\n-                {\n-                    result.append( \",\" );\n-                }\n-                result.append( agent );\n-            }\n-        }\n-        else\n+      InetAddress address = InetAddress.getLocalHost();\n+      NetworkInterface ni = NetworkInterface.getByInetAddress(address);\n+      if (ni != null)\n+      {\n+        byte[] mac = ni.getHardwareAddress();\n+        if (mac != null)\n         {\n-            result.append( values );\n+          StringBuilder sb = new StringBuilder(mac.length * 2);\n+          Formatter formatter = new Formatter(sb);\n+          for (byte b : mac)\n+          {\n+            formatter.format(\"%02x\", b);\n+          }\n+          formattedMac = sb.toString();\n         }\n-        return result.toString();\n+      }\n+    } catch (Throwable t)\n+    {\n+      //\n     }\n \n-    private void add( Map<String,String> udcFields, String name, Object value )\n+    return formattedMac;\n+  }\n+\n+  private int determineNumberOfProcessors()\n+  {\n+    return Runtime.getRuntime().availableProcessors();\n+  }\n+\n+  private long determineTotalMemory()\n+  {\n+    return OsBeanUtil.getTotalPhysicalMemory();\n+  }\n+\n+  private long determineHeapSize()\n+  {\n+    return ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n+  }\n+\n+  private long determineNodesIdsInUse()\n+  {\n+    return getNumberOfIdsInUse(IdType.NODE);\n+  }\n+\n+  private long determineLabelIdsInUse()\n+  {\n+    return getNumberOfIdsInUse(IdType.LABEL_TOKEN);\n+  }\n+\n+  private long determinePropertyIdsInUse()\n+  {\n+    return getNumberOfIdsInUse(IdType.PROPERTY);\n+  }\n+\n+  private long determineRelationshipIdsInUse()\n+  {\n+    return getNumberOfIdsInUse(IdType.RELATIONSHIP);\n+  }\n+\n+  private long getNumberOfIdsInUse(IdType type)\n+  {\n+    return idGeneratorFactory.get(type).getNumberOfIdsInUse();\n+  }\n+\n+  private String toCommaString(Object values)\n+  {\n+    StringBuilder result = new StringBuilder();\n+    if (values instanceof Iterable)\n     {\n-        if ( value == null )\n+      for (Object agent : (Iterable) values)\n+      {\n+        if (agent == null)\n         {\n-            return;\n+          continue;\n         }\n-        String str = value.toString().trim();\n-        if ( str.isEmpty() )\n+        if (result.length() > 0)\n         {\n-            return;\n+          result.append(\",\");\n         }\n-        udcFields.put( name, str );\n-    }\n-\n-    private String removeUdcPrefix( String propertyName )\n+        result.append(agent);\n+      }\n+    } else\n     {\n-        if ( propertyName.startsWith( UDC_PROPERTY_PREFIX ) )\n-        {\n-            return propertyName.substring( UDC_PROPERTY_PREFIX.length() + 1 );\n-        }\n-        return propertyName;\n+      result.append(values);\n     }\n+    return result.toString();\n+  }\n \n-    private String sanitizeUdcProperty( String propertyValue )\n+  private void add(Map<String, String> udcFields, String name, Object value)\n+  {\n+    if (value == null)\n     {\n-        return propertyValue.replace( ' ', '_' );\n+      return;\n     }\n-\n-    private Map<String,String> determineSystemProperties()\n+    String str = value.toString().trim();\n+    if (str.isEmpty())\n     {\n-        Map<String,String> relevantSysProps = new HashMap<>();\n-        Properties sysProps = System.getProperties();\n-        Enumeration<?> sysPropsNames = sysProps.propertyNames();\n-        while ( sysPropsNames.hasMoreElements() )\n-        {\n-            String sysPropName = (String) sysPropsNames.nextElement();\n-            if ( sysPropName.startsWith( UDC_PROPERTY_PREFIX ) || sysPropName.startsWith( OS_PROPERTY_PREFIX ) )\n-            {\n-                String propertyValue = sysProps.getProperty( sysPropName );\n-                relevantSysProps.put( removeUdcPrefix( sysPropName ), sanitizeUdcProperty( propertyValue ) );\n-            }\n-        }\n-        return relevantSysProps;\n+      return;\n     }\n+    udcFields.put(name, str);\n+  }\n \n-    @Override\n-    public String getStoreId()\n+  private String removeUdcPrefix(String propertyName)\n+  {\n+    if (propertyName.startsWith(UDC_PROPERTY_PREFIX))\n     {\n-        return storeId;\n+      return propertyName.substring(UDC_PROPERTY_PREFIX.length() + 1);\n     }\n-\n-    @Override\n-    public boolean getCrashPing()\n+    return propertyName;\n+  }\n+\n+  private String sanitizeUdcProperty(String propertyValue)\n+  {\n+    return propertyValue.replace(' ', '_');\n+  }\n+\n+  private Map<String, String> determineSystemProperties()\n+  {\n+    Map<String, String> relevantSysProps = new HashMap<>();\n+    Properties sysProps = System.getProperties();\n+    Enumeration<?> sysPropsNames = sysProps.propertyNames();\n+    while (sysPropsNames.hasMoreElements())\n     {\n-        return crashPing;\n+      String sysPropName = (String) sysPropsNames.nextElement();\n+      if (sysPropName.startsWith(UDC_PROPERTY_PREFIX) || sysPropName.startsWith(OS_PROPERTY_PREFIX))\n+      {\n+        String propertyValue = sysProps.getProperty(sysPropName);\n+        relevantSysProps.put(removeUdcPrefix(sysPropName), sanitizeUdcProperty(propertyValue));\n+      }\n     }\n+    return relevantSysProps;\n+  }\n+\n+  @Override\n+  public String getStoreId()\n+  {\n+    return storeId;\n+  }\n+\n+  @Override\n+  public boolean getCrashPing()\n+  {\n+    return crashPing;\n+  }\n }\n",
            "diff_size": 485
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 395).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/15/DefaultUdcInformationCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/15/DefaultUdcInformationCollector.java\nindex a136e8149d8..ef2dab7173f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/15/DefaultUdcInformationCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/15/DefaultUdcInformationCollector.java\n@@ -101,8 +101,7 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n                 {\n                     crashPing = startupStatistics.numberOfRecoveredTransactions() > 0;\n                     storeId = Long.toHexString( ds.getStoreId().getRandomId() );\n-\n-                    neoStoreDataSource = ds;\n+neoStoreDataSource = ds;\n                 }\n \n                 @Override\n@@ -123,7 +122,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         {\n             return version;\n         }\n-        return version.substring( 0, version.indexOf( '+' ) );\n+\n+return version.substring( 0, version.indexOf( '+' ) );\n     }\n \n     @Override\n@@ -161,8 +161,7 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         add( udcFields, FEATURES, usageData.get( UsageDataKeys.features ).asHex() );\n \n         addStoreFileSizes( udcFields );\n-\n-        udcFields.putAll( determineSystemProperties() );\n+udcFields.putAll( determineSystemProperties() );\n         return udcFields;\n     }\n \n@@ -220,7 +219,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n             {\n                 return \"rpm\";\n             }\n-            if ( new File( \"/usr/bin/dpkg\" ).exists() )\n+\n+if ( new File( \"/usr/bin/dpkg\" ).exists() )\n             {\n                 return \"dpkg\";\n             }\n@@ -229,7 +229,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         {\n             // ignore\n         }\n-        return UNKNOWN_DIST;\n+\n+return UNKNOWN_DIST;\n     }\n \n     private Integer determineClusterNameHash()\n@@ -247,13 +248,9 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         }\n     }\n \n-    private final Map<String,String> jarNamesForTags =\n-            MapUtil.stringMap( \"spring-\", \"spring\", \"(javax.ejb|ejb-jar)\", \"ejb\",\n-                    \"(weblogic|glassfish|websphere|jboss)\", \"appserver\", \"openshift\", \"openshift\", \"cloudfoundry\",\n-                    \"cloudfoundry\", \"(junit|testng)\", \"test\", \"jruby\", \"ruby\", \"clojure\", \"clojure\", \"jython\", \"python\",\n-                    \"groovy\", \"groovy\", \"(tomcat|jetty)\", \"web\", \"spring-data-neo4j\", \"sdn\" );\n+    private final Map<String,String> jarNamesForTags = MapUtil.stringMap( \"spring-\", \"spring\", \"(javax.ejb|ejb-jar)\", \"ejb\", \"(weblogic|glassfish|websphere|jboss)\", \"appserver\", \"openshift\", \"openshift\", \"cloudfoundry\", \"cloudfoundry\", \"(junit|testng)\", \"test\", \"jruby\", \"ruby\", \"clojure\", \"clojure\", \"jython\", \"python\", \"groovy\", \"groovy\", \"(tomcat|jetty)\", \"web\", \"spring-data-neo4j\", \"sdn\" );\n \n-    private String determineTags( Map<String,String> jarNamesForTags, String classPath )\n+private String determineTags( Map<String,String> jarNamesForTags, String classPath )\n     {\n         StringBuilder result = new StringBuilder();\n         for ( Map.Entry<String,String> entry : jarNamesForTags.entrySet() )\n@@ -268,7 +265,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         {\n             return null;\n         }\n-        return result.substring( 1 );\n+\n+return result.substring( 1 );\n     }\n \n     private String getClassPath()\n@@ -295,7 +293,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n                     {\n                         formatter.format( \"%02x\", b );\n                     }\n-                    formattedMac = sb.toString();\n+\n+formattedMac = sb.toString();\n                 }\n             }\n         }\n@@ -358,7 +357,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n                 {\n                     continue;\n                 }\n-                if ( result.length() > 0 )\n+\n+if ( result.length() > 0 )\n                 {\n                     result.append( \",\" );\n                 }\n@@ -369,7 +369,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         {\n             result.append( values );\n         }\n-        return result.toString();\n+\n+return result.toString();\n     }\n \n     private void add( Map<String,String> udcFields, String name, Object value )\n@@ -378,7 +379,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         {\n             return;\n         }\n-        String str = value.toString().trim();\n+\n+String str = value.toString().trim();\n         if ( str.isEmpty() )\n         {\n             return;\n@@ -392,7 +394,8 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n         {\n             return propertyName.substring( UDC_PROPERTY_PREFIX.length() + 1 );\n         }\n-        return propertyName;\n+\n+return propertyName;\n     }\n \n     private String sanitizeUdcProperty( String propertyValue )\n@@ -428,4 +431,4 @@ public class DefaultUdcInformationCollector implements UdcInformationCollector\n     {\n         return crashPing;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}