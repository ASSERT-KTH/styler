{
    "project_name": "junkdog-artemis-odb",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "111",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\t\tprivate void buildFromNames() {\n\t\t\tIterator<Map.Entry<Class<? extends Component>, String>> it = typeToName.entrySet().iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tMap.Entry<Class<? extends Component>, String> entry = it.next();\n\t\t\t\tClass<? extends Component> c = entry.getKey();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/25/SaveFileFormat.java\nindex e8771e8556f..15bedbda156 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/25/SaveFileFormat.java\n@@ -108,7 +108,8 @@ public class SaveFileFormat {\n \t\t}\n \n \t\tprivate void buildFromNames() {\n-\t\t\tIterator<Map.Entry<Class<? extends Component>, String>> it = typeToName.entrySet().iterator();\n+\t\tIterator <Map.Entry<Class<?extends Component >,String>>it=typeToName.entrySet().\n+\t\t\titerator ();\n \t\t\twhile (it.hasNext()) {\n \t\t\t\tMap.Entry<Class<? extends Component>, String> entry = it.next();\n \t\t\t\tClass<? extends Component> c = entry.getKey();\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/25/SaveFileFormat.java\nindex e8771e8556f..8607b5ce2a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/25/SaveFileFormat.java\n@@ -32,115 +32,118 @@ import java.util.*;\n  */\n public class SaveFileFormat {\n \n-\t// all non-transient fields are automatically serialized\n-\tpublic Metadata metadata;\n-\tpublic ComponentIdentifiers componentIdentifiers;\n-\tpublic IntBag entities;\n-\tpublic ArchetypeMapper archetypes;\n-\n-\ttransient SerializationKeyTracker tracker = new SerializationKeyTracker();\n-\n-\tpublic SaveFileFormat(IntBag entities) {\n-\t\tthis.entities = (entities != null) ? entities : new IntBag();\n-\t\tcomponentIdentifiers = new ComponentIdentifiers();\n-\t\tmetadata = new Metadata();\n-\t\tmetadata.version = Metadata.LATEST;\n-\t}\n-\n-\n-\tpublic SaveFileFormat(EntitySubscription es) {\n-\t\tthis(es.getEntities());\n-\t}\n-\n-\tpublic SaveFileFormat() {\n-\t\tthis((IntBag)null);\n-\t}\n-\n-\tpublic final Entity get(String key) {\n-\t\treturn tracker.get(key);\n-\t}\n-\n-\tpublic final boolean has(String key) {\n-\t\treturn tracker.get(key) != null;\n-\t}\n-\n-\tpublic final Set<String> keys() {\n-\t\treturn tracker.keys();\n-\t}\n-\n-\tpublic static class Metadata {\n-\t\tpublic static final int VERSION_1 = 1;\n-\t\tpublic static final int LATEST = VERSION_1;\n-\n-\t\tpublic int version;\n-\t}\n-\n-\tpublic static class ComponentIdentifiers {\n-\t\tpublic Map<Class<? extends Component>, String> typeToName =\n-\t\t\tnew IdentityHashMap<Class<? extends Component>, String>();\n-\t\tprivate Map<String, Class<? extends Component>> nameToType =\n-\t\t\tnew HashMap<String, Class<? extends Component>>();\n-\t\tpublic Map<Class<? extends Component>, Integer> typeToId =\n-\t\t\tnew HashMap<Class<? extends Component>, Integer>();\n-\t\tpublic Map<Integer, Class<? extends Component>> idToType =\n-\t\t\tnew HashMap<Integer, Class<? extends Component>>();\n-\n-\t\ttransient Set<Class<? extends Component>> transientComponents =\n-\t\t\tnew HashSet<Class<? extends Component>>();\n-\n-\t\tvoid build() {\n-\t\t\tif (typeToName.size() > 0)\n-\t\t\t\tbuildFromNames();\n-\t\t\telse\n-\t\t\t\tbuildFromIndices();\n-\t\t}\n-\n-\t\tpublic Class<? extends Component> getType(String name) {\n-\t\t\tClass<? extends Component> type = nameToType.get(name);\n-\t\t\tif (type == null)\n-\t\t\t\tthrow new SerializationException(\"No component type with name: \" + name);\n-\n-\t\t\treturn type;\n-\t\t}\n-\n-\t\tpublic Collection<Class<? extends Component>> getTypes() {\n-\t\t\treturn nameToType.values();\n-\t\t}\n-\n-\t\tprivate void buildFromNames() {\n-\t\t\tIterator<Map.Entry<Class<? extends Component>, String>> it = typeToName.entrySet().iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tMap.Entry<Class<? extends Component>, String> entry = it.next();\n-\t\t\t\tClass<? extends Component> c = entry.getKey();\n-\t\t\t\tif (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n-\t\t\t\t\tnameToType.put(entry.getValue(), c);\n-\t\t\t\t\tif (typeToId.get(c) == null) {\n-\t\t\t\t\t\ttypeToId.put(c, nameToType.size());\n-\t\t\t\t\t\tidToType.put(nameToType.size(), c);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\ttransientComponents.add(c);\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate void buildFromIndices() {\n-\t\t\tIterator<Map.Entry<Integer, Class<? extends Component>>> it = idToType.entrySet().iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tMap.Entry<Integer, Class<? extends Component>> entry = it.next();\n-\t\t\t\tClass<? extends Component> c = entry.getValue();\n-\t\t\t\tif (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n-\t\t\t\t\ttypeToId.put(c, nameToType.size());\n-\t\t\t\t} else {\n-\t\t\t\t\ttransientComponents.add(c);\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tboolean isTransient(Class<? extends Component> c) {\n-\t\t\treturn transientComponents.contains(c);\n-\t\t}\n-\t}\n+    // all non-transient fields are automatically serialized\n+    public Metadata metadata;\n+    public ComponentIdentifiers componentIdentifiers;\n+    public IntBag entities;\n+    public ArchetypeMapper archetypes;\n+\n+    transient SerializationKeyTracker tracker = new SerializationKeyTracker();\n+\n+    public SaveFileFormat(IntBag entities) {\n+        this.entities = (entities != null) ? entities : new IntBag();\n+        componentIdentifiers = new ComponentIdentifiers();\n+        metadata = new Metadata();\n+        metadata.version = Metadata.LATEST;\n+    }\n+\n+\n+    public SaveFileFormat(EntitySubscription es) {\n+        this(es.getEntities());\n+    }\n+\n+    public SaveFileFormat() {\n+        this((IntBag) null);\n+    }\n+\n+    public final Entity get(String key) {\n+        return tracker.get(key);\n+    }\n+\n+    public final boolean has(String key) {\n+        return tracker.get(key) != null;\n+    }\n+\n+    public final Set<String> keys() {\n+        return tracker.keys();\n+    }\n+\n+    public static class Metadata {\n+        public static final int VERSION_1 = 1;\n+        public static final int LATEST = VERSION_1;\n+\n+        public int version;\n+    }\n+\n+    public static class ComponentIdentifiers {\n+        public Map<Class<? extends Component>, String> typeToName =\n+                new IdentityHashMap<Class<? extends Component>, String>();\n+        private Map<String, Class<? extends Component>> nameToType =\n+                new HashMap<String, Class<? extends Component>>();\n+        public Map<Class<? extends Component>, Integer> typeToId =\n+                new HashMap<Class<? extends Component>, Integer>();\n+        public Map<Integer, Class<? extends Component>> idToType =\n+                new HashMap<Integer, Class<? extends Component>>();\n+\n+        transient Set<Class<? extends Component>> transientComponents =\n+                new HashSet<Class<? extends Component>>();\n+\n+        void build() {\n+            if (typeToName.size() > 0) {\n+                buildFromNames();\n+            } else {\n+                buildFromIndices();\n+            }\n+        }\n+\n+        public Class<? extends Component> getType(String name) {\n+            Class<? extends Component> type = nameToType.get(name);\n+            if (type == null) {\n+                throw new SerializationException(\"No component type with name: \" + name);\n+            }\n+\n+            return type;\n+        }\n+\n+        public Collection<Class<? extends Component>> getTypes() {\n+            return nameToType.values();\n+        }\n+\n+        private void buildFromNames() {\n+            Iterator<Map.Entry<Class<? extends Component>, String>> it =\n+                    typeToName.entrySet().iterator();\n+            while (it.hasNext()) {\n+                Map.Entry<Class<? extends Component>, String> entry = it.next();\n+                Class<? extends Component> c = entry.getKey();\n+                if (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n+                    nameToType.put(entry.getValue(), c);\n+                    if (typeToId.get(c) == null) {\n+                        typeToId.put(c, nameToType.size());\n+                        idToType.put(nameToType.size(), c);\n+                    }\n+                } else {\n+                    transientComponents.add(c);\n+                    it.remove();\n+                }\n+            }\n+        }\n+\n+        private void buildFromIndices() {\n+            Iterator<Map.Entry<Integer, Class<? extends Component>>> it = idToType.entrySet().iterator();\n+            while (it.hasNext()) {\n+                Map.Entry<Integer, Class<? extends Component>> entry = it.next();\n+                Class<? extends Component> c = entry.getValue();\n+                if (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n+                    typeToId.put(c, nameToType.size());\n+                } else {\n+                    transientComponents.add(c);\n+                    it.remove();\n+                }\n+            }\n+        }\n+\n+        boolean isTransient(Class<? extends Component> c) {\n+            return transientComponents.contains(c);\n+        }\n+    }\n }\n",
            "diff_size": 114
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/25/SaveFileFormat.java\nindex e8771e8556f..1d9da6957cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/25/SaveFileFormat.java\n@@ -31,7 +31,6 @@ import java.util.*;\n  * @see EntityReference\n  */\n public class SaveFileFormat {\n-\n \t// all non-transient fields are automatically serialized\n \tpublic Metadata metadata;\n \tpublic ComponentIdentifiers componentIdentifiers;\n@@ -47,8 +46,7 @@ public class SaveFileFormat {\n \t\tmetadata.version = Metadata.LATEST;\n \t}\n \n-\n-\tpublic SaveFileFormat(EntitySubscription es) {\n+public SaveFileFormat(EntitySubscription es) {\n \t\tthis(es.getEntities());\n \t}\n \n@@ -87,8 +85,7 @@ public class SaveFileFormat {\n \n \t\ttransient Set<Class<? extends Component>> transientComponents =\n \t\t\tnew HashSet<Class<? extends Component>>();\n-\n-\t\tvoid build() {\n+void build() {\n \t\t\tif (typeToName.size() > 0)\n \t\t\t\tbuildFromNames();\n \t\t\telse\n@@ -143,4 +140,4 @@ public class SaveFileFormat {\n \t\t\treturn transientComponents.contains(c);\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/25/SaveFileFormat.java\nindex e8771e8556f..8bb7ec5e516 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/25/SaveFileFormat.java\n@@ -30,117 +30,119 @@ import java.util.*;\n  *\n  * @see EntityReference\n  */\n+\n public class SaveFileFormat {\n \n-\t// all non-transient fields are automatically serialized\n-\tpublic Metadata metadata;\n-\tpublic ComponentIdentifiers componentIdentifiers;\n-\tpublic IntBag entities;\n-\tpublic ArchetypeMapper archetypes;\n-\n-\ttransient SerializationKeyTracker tracker = new SerializationKeyTracker();\n-\n-\tpublic SaveFileFormat(IntBag entities) {\n-\t\tthis.entities = (entities != null) ? entities : new IntBag();\n-\t\tcomponentIdentifiers = new ComponentIdentifiers();\n-\t\tmetadata = new Metadata();\n-\t\tmetadata.version = Metadata.LATEST;\n-\t}\n-\n-\n-\tpublic SaveFileFormat(EntitySubscription es) {\n-\t\tthis(es.getEntities());\n-\t}\n-\n-\tpublic SaveFileFormat() {\n-\t\tthis((IntBag)null);\n-\t}\n-\n-\tpublic final Entity get(String key) {\n-\t\treturn tracker.get(key);\n-\t}\n-\n-\tpublic final boolean has(String key) {\n-\t\treturn tracker.get(key) != null;\n-\t}\n-\n-\tpublic final Set<String> keys() {\n-\t\treturn tracker.keys();\n-\t}\n-\n-\tpublic static class Metadata {\n-\t\tpublic static final int VERSION_1 = 1;\n-\t\tpublic static final int LATEST = VERSION_1;\n-\n-\t\tpublic int version;\n-\t}\n-\n-\tpublic static class ComponentIdentifiers {\n-\t\tpublic Map<Class<? extends Component>, String> typeToName =\n-\t\t\tnew IdentityHashMap<Class<? extends Component>, String>();\n-\t\tprivate Map<String, Class<? extends Component>> nameToType =\n-\t\t\tnew HashMap<String, Class<? extends Component>>();\n-\t\tpublic Map<Class<? extends Component>, Integer> typeToId =\n-\t\t\tnew HashMap<Class<? extends Component>, Integer>();\n-\t\tpublic Map<Integer, Class<? extends Component>> idToType =\n-\t\t\tnew HashMap<Integer, Class<? extends Component>>();\n-\n-\t\ttransient Set<Class<? extends Component>> transientComponents =\n-\t\t\tnew HashSet<Class<? extends Component>>();\n-\n-\t\tvoid build() {\n-\t\t\tif (typeToName.size() > 0)\n-\t\t\t\tbuildFromNames();\n-\t\t\telse\n-\t\t\t\tbuildFromIndices();\n-\t\t}\n-\n-\t\tpublic Class<? extends Component> getType(String name) {\n-\t\t\tClass<? extends Component> type = nameToType.get(name);\n-\t\t\tif (type == null)\n-\t\t\t\tthrow new SerializationException(\"No component type with name: \" + name);\n-\n-\t\t\treturn type;\n-\t\t}\n-\n-\t\tpublic Collection<Class<? extends Component>> getTypes() {\n-\t\t\treturn nameToType.values();\n-\t\t}\n-\n-\t\tprivate void buildFromNames() {\n-\t\t\tIterator<Map.Entry<Class<? extends Component>, String>> it = typeToName.entrySet().iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tMap.Entry<Class<? extends Component>, String> entry = it.next();\n-\t\t\t\tClass<? extends Component> c = entry.getKey();\n-\t\t\t\tif (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n-\t\t\t\t\tnameToType.put(entry.getValue(), c);\n-\t\t\t\t\tif (typeToId.get(c) == null) {\n-\t\t\t\t\t\ttypeToId.put(c, nameToType.size());\n-\t\t\t\t\t\tidToType.put(nameToType.size(), c);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\ttransientComponents.add(c);\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate void buildFromIndices() {\n-\t\t\tIterator<Map.Entry<Integer, Class<? extends Component>>> it = idToType.entrySet().iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tMap.Entry<Integer, Class<? extends Component>> entry = it.next();\n-\t\t\t\tClass<? extends Component> c = entry.getValue();\n-\t\t\t\tif (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n-\t\t\t\t\ttypeToId.put(c, nameToType.size());\n-\t\t\t\t} else {\n-\t\t\t\t\ttransientComponents.add(c);\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tboolean isTransient(Class<? extends Component> c) {\n-\t\t\treturn transientComponents.contains(c);\n-\t\t}\n-\t}\n-}\n+ // all non-transient fields are automatically serialized\n+ public Metadata metadata;\n+ public ComponentIdentifiers componentIdentifiers;\n+ public IntBag entities;\n+ public ArchetypeMapper archetypes;\n+\n+ transient SerializationKeyTracker tracker = new SerializationKeyTracker();\n+\n+ public SaveFileFormat(IntBag entities) {\n+  this.entities = (entities != null)\n+   ? entities\n+   : new IntBag();\n+  componentIdentifiers = new ComponentIdentifiers();\n+  metadata = new Metadata();\n+  metadata.version = Metadata.LATEST;\n+ }\n+\n+ public SaveFileFormat(EntitySubscription es) {\n+  this(es.getEntities());\n+ }\n+\n+ public SaveFileFormat() {\n+  this((IntBag) null);\n+ }\n+\n+ public final Entity get(String key) {\n+  return tracker.get(key);\n+ }\n+\n+\n+ public final boolean has(String key) {\n+  return tracker.get(key) != null;\n+ }\n+\n+\n+ public final Set<String> keys() {\n+  return tracker.keys();\n+ }\n+\n+\n+ public static class Metadata {\n+  public static final int VERSION_1 = 1;\n+  public static final int LATEST = VERSION_1;\n+  public int version;\n+ }\n+\n+\n+ public static class ComponentIdentifiers {\n+  public Map<Class<? extends Component>, String> typeToName = new IdentityHashMap<Class<? extends Component>, String>();\n+\n+  private Map<String, Class<? extends Component>> nameToType = new HashMap<String, Class<? extends Component>>();\n+  public Map<Class<? extends Component>, Integer> typeToId = new HashMap<Class<? extends Component>, Integer>();\n+  public Map<Integer, Class<? extends Component>> idToType = new HashMap<Integer, Class<? extends Component>>();\n+\n+  transient Set<Class<? extends Component>> transientComponents = new HashSet<Class<? extends Component>>();\n+\n+  void build() {\n+   if (typeToName.size() > 0)\n+    buildFromNames();\n+   else\n+    buildFromIndices();\n+  }\n+\n+\n+  public Class<? extends Component> getType(String name) {\n+   Class<? extends Component> type = nameToType.get(name);\n+   if (type == null)\n+    throw new SerializationException(\"No component type with name: \" + name);\n+   return type;\n+  }\n+\n+\n+  public Collection<Class<? extends Component>> getTypes() {\n+   return nameToType.values();\n+  }\n+\n+  private void buildFromNames() {\n+   Iterator<Map.Entry<Class<? extends Component>, String>> it = typeToName.entrySet().iterator();\n+   while (it.hasNext()) {\n+    Map.Entry<Class<? extends Component>, String> entry = it.next();\n+    Class<? extends Component> c = entry.getKey();\n+    if (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n+     nameToType.put(entry.getValue(), c);\n+     if (typeToId.get(c) == null) {\n+      typeToId.put(c, nameToType.size());\n+      idToType.put(nameToType.size(), c);\n+     }\n+    } else {\n+     transientComponents.add(c);\n+     it.remove();\n+    }\n+   }\n+  }\n+\n+  private void buildFromIndices() {\n+   Iterator<Map.Entry<Integer, Class<? extends Component>>> it = idToType.entrySet().iterator();\n+   while (it.hasNext()) {\n+    Map.Entry<Integer, Class<? extends Component>> entry = it.next();\n+    Class<? extends Component> c = entry.getValue();\n+    if (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n+     typeToId.put(c, nameToType.size());\n+    } else {\n+     transientComponents.add(c);\n+     it.remove();\n+    }\n+   }\n+  }\n+\n+  boolean isTransient(Class<? extends Component> c) {\n+   return transientComponents.contains(c);\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 114
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_random/25/SaveFileFormat.java\nindex e8771e8556f..adf4ccc3a17 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_random/25/SaveFileFormat.java\n@@ -108,8 +108,9 @@ public class SaveFileFormat {\n \t\t}\n \n \t\tprivate void buildFromNames() {\n-\t\t\tIterator<Map.Entry<Class<? extends Component>, String>> it = typeToName.entrySet().iterator();\n-\t\t\twhile (it.hasNext()) {\n+\t\t\tIterator<Map.Entry<Class<? extends Component>, String>> it\n+\t\t\t\t= typeToName.entrySet().iterator();\n+\t\t\t\twhile (it.hasNext()) {\n \t\t\t\tMap.Entry<Class<? extends Component>, String> entry = it.next();\n \t\t\t\tClass<? extends Component> c = entry.getKey();\n \t\t\t\tif (ClassReflection.getDeclaredAnnotation(c, Transient.class) == null) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/25/SaveFileFormat.java\nindex e8771e8556f..15bedbda156 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/25/SaveFileFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/25/SaveFileFormat.java\n@@ -108,7 +108,8 @@ public class SaveFileFormat {\n \t\t}\n \n \t\tprivate void buildFromNames() {\n-\t\t\tIterator<Map.Entry<Class<? extends Component>, String>> it = typeToName.entrySet().iterator();\n+\t\tIterator <Map.Entry<Class<?extends Component >,String>>it=typeToName.entrySet().\n+\t\t\titerator ();\n \t\t\twhile (it.hasNext()) {\n \t\t\t\tMap.Entry<Class<? extends Component>, String> entry = it.next();\n \t\t\t\tClass<? extends Component> c = entry.getKey();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}