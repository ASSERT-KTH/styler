{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "908",
    "information": {
        "errors": [
            {
                "line": "227",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    Compute.AddressOption[] expectedOptions = {Compute.AddressOption.fields()};\n    expect(compute.getOptions()).andReturn(mockOptions);\n    expect(compute.getAddress(REGION_ADDRESS_ID, expectedOptions)).andReturn(regionForwardingAddress);\n    replay(compute);\n    initializeAddress();\n    assertTrue(address.exists());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/908/AddressTest.java\nindex 0c823d5fdb1..660417c3f52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/908/AddressTest.java\n@@ -224,7 +224,8 @@ public class AddressTest {\n     initializeExpectedAddress(3);\n     Compute.AddressOption[] expectedOptions = {Compute.AddressOption.fields()};\n     expect(compute.getOptions()).andReturn(mockOptions);\n-    expect(compute.getAddress(REGION_ADDRESS_ID, expectedOptions)).andReturn(regionForwardingAddress);\n+    expect(compute.getAddress(REGION_ADDRESS_ID, expectedOptions)\n+        ).andReturn(regionForwardingAddress);\n     replay(compute);\n     initializeAddress();\n     assertTrue(address.exists());\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/908/AddressTest.java\nindex 0c823d5fdb1..b7ac54e2b82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/908/AddressTest.java\n@@ -224,7 +224,8 @@ public class AddressTest {\n     initializeExpectedAddress(3);\n     Compute.AddressOption[] expectedOptions = {Compute.AddressOption.fields()};\n     expect(compute.getOptions()).andReturn(mockOptions);\n-    expect(compute.getAddress(REGION_ADDRESS_ID, expectedOptions)).andReturn(regionForwardingAddress);\n+    expect(compute.getAddress(REGION_ADDRESS_ID, expectedOptions))\n+        .andReturn(regionForwardingAddress);\n     replay(compute);\n     initializeAddress();\n     assertTrue(address.exists());\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'ImmutableList' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "227",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/908/AddressTest.java\nindex 0c823d5fdb1..f060c196b6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/908/AddressTest.java\n@@ -47,10 +47,10 @@ public class AddressTest {\n   private static final List<GlobalForwardingRuleId> GLOBAL_FORWARDING_RULES =\n       ImmutableList.of(GlobalForwardingRuleId.of(\"project\", \"forwardingRule1\"),\n           GlobalForwardingRuleId.of(\"project\", \"forwardingRule2\"));\n-  private static final List<RegionForwardingRuleId> REGION_FORWARDING_RULES =\n+    private static final List<RegionForwardingRuleId> REGION_FORWARDING_RULES =\n       ImmutableList.of(RegionForwardingRuleId.of(\"project\", \"region\", \"forwardingRule1\"),\n           RegionForwardingRuleId.of(\"project\", \"region\", \"forwardingRule2\"));\n-  private static final AddressInfo.InstanceUsage INSTANCE_USAGE =\n+    private static final AddressInfo.InstanceUsage INSTANCE_USAGE =\n       new AddressInfo.InstanceUsage(InstanceId.of(\"project\", \"zone\", \"instance1\"));\n   private static final AddressInfo.GlobalForwardingUsage GLOBAL_FORWARDING_USAGE =\n       new AddressInfo.GlobalForwardingUsage(GLOBAL_FORWARDING_RULES);\n@@ -291,4 +291,4 @@ public class AddressTest {\n     assertEquals(expected.getStatus(), value.getStatus());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'GlobalForwardingRuleId' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'RegionForwardingRuleId' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 257).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 274).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 274).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "229",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/908/AddressTest.java\nindex 0c823d5fdb1..2adc524d0cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/908/AddressTest.java\n@@ -28,12 +28,11 @@ import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n \n import com.google.common.collect.ImmutableList;\n-\n import org.junit.After;\n import org.junit.Test;\n-\n import java.util.List;\n \n+\n public class AddressTest {\n \n   private static final String ADDRESS = \"192.168.1.1\";\n@@ -41,22 +40,15 @@ public class AddressTest {\n   private static final String DESCRIPTION = \"description\";\n   private static final String GENERATED_ID = \"42\";\n   private static final GlobalAddressId GLOBAL_ADDRESS_ID = GlobalAddressId.of(\"project\", \"address\");\n-  private static final RegionAddressId REGION_ADDRESS_ID =\n-      RegionAddressId.of(\"project\", \"region\", \"address\");\n+  private static final RegionAddressId REGION_ADDRESS_ID = RegionAddressId.of(\"project\", \"region\", \"address\");\n   private static final AddressInfo.Status STATUS = AddressInfo.Status.RESERVED;\n-  private static final List<GlobalForwardingRuleId> GLOBAL_FORWARDING_RULES =\n-      ImmutableList.of(GlobalForwardingRuleId.of(\"project\", \"forwardingRule1\"),\n-          GlobalForwardingRuleId.of(\"project\", \"forwardingRule2\"));\n-  private static final List<RegionForwardingRuleId> REGION_FORWARDING_RULES =\n-      ImmutableList.of(RegionForwardingRuleId.of(\"project\", \"region\", \"forwardingRule1\"),\n-          RegionForwardingRuleId.of(\"project\", \"region\", \"forwardingRule2\"));\n-  private static final AddressInfo.InstanceUsage INSTANCE_USAGE =\n-      new AddressInfo.InstanceUsage(InstanceId.of(\"project\", \"zone\", \"instance1\"));\n-  private static final AddressInfo.GlobalForwardingUsage GLOBAL_FORWARDING_USAGE =\n-      new AddressInfo.GlobalForwardingUsage(GLOBAL_FORWARDING_RULES);\n-  private static final AddressInfo.RegionForwardingUsage REGION_FORWARDING_USAGE =\n-      new AddressInfo.RegionForwardingUsage(REGION_FORWARDING_RULES);\n-\n+  private static final List<GlobalForwardingRuleId> GLOBAL_FORWARDING_RULES = ImmutableList.of(GlobalForwardingRuleId.of(\"project\", \"forwardingRule1\"),\n+    GlobalForwardingRuleId.of(\"project\", \"forwardingRule2\"));\n+  private static final List<RegionForwardingRuleId> REGION_FORWARDING_RULES = ImmutableList.of(RegionForwardingRuleId.of(\"project\", \"region\", \"forwardingRule1\"),\n+    RegionForwardingRuleId.of(\"project\", \"region\", \"forwardingRule2\"));\n+  private static final AddressInfo.InstanceUsage INSTANCE_USAGE = new AddressInfo.InstanceUsage(InstanceId.of(\"project\", \"zone\", \"instance1\"));\n+  private static final AddressInfo.GlobalForwardingUsage GLOBAL_FORWARDING_USAGE = new AddressInfo.GlobalForwardingUsage(GLOBAL_FORWARDING_RULES);\n+  private static final AddressInfo.RegionForwardingUsage REGION_FORWARDING_USAGE = new AddressInfo.RegionForwardingUsage(REGION_FORWARDING_RULES);\n   private final Compute serviceMockReturnsOptions = createStrictMock(Compute.class);\n   private final ComputeOptions mockOptions = createMock(ComputeOptions.class);\n   private Compute compute;\n@@ -64,46 +56,17 @@ public class AddressTest {\n   private Address instanceAddress;\n   private Address regionForwardingAddress;\n   private Address address;\n-\n   private void initializeExpectedAddress(int optionsCalls) {\n     expect(serviceMockReturnsOptions.getOptions()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n-    instanceAddress = new Address.Builder(serviceMockReturnsOptions, REGION_ADDRESS_ID)\n-        .setAddress(ADDRESS)\n-        .setCreationTimestamp(CREATION_TIMESTAMP)\n-        .setDescription(DESCRIPTION)\n-        .setGeneratedId(GENERATED_ID)\n-        .setStatus(STATUS)\n-        .setUsage(INSTANCE_USAGE)\n-        .build();\n-    globalForwardingAddress = new Address.Builder(serviceMockReturnsOptions, GLOBAL_ADDRESS_ID)\n-        .setAddress(ADDRESS)\n-        .setCreationTimestamp(CREATION_TIMESTAMP)\n-        .setDescription(DESCRIPTION)\n-        .setGeneratedId(GENERATED_ID)\n-        .setStatus(STATUS)\n-        .setUsage(GLOBAL_FORWARDING_USAGE)\n-        .build();\n-    regionForwardingAddress = new Address.Builder(serviceMockReturnsOptions, REGION_ADDRESS_ID)\n-        .setAddress(ADDRESS)\n-        .setCreationTimestamp(CREATION_TIMESTAMP)\n-        .setDescription(DESCRIPTION)\n-        .setGeneratedId(GENERATED_ID)\n-        .setStatus(STATUS)\n-        .setUsage(REGION_FORWARDING_USAGE)\n-        .build();\n+    instanceAddress = new Address.Builder(serviceMockReturnsOptions, REGION_ADDRESS_ID).setAddress(ADDRESS).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setGeneratedId(GENERATED_ID).setStatus(STATUS).setUsage(INSTANCE_USAGE).build();\n+    globalForwardingAddress = new Address.Builder(serviceMockReturnsOptions, GLOBAL_ADDRESS_ID).setAddress(ADDRESS).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setGeneratedId(GENERATED_ID).setStatus(STATUS).setUsage(GLOBAL_FORWARDING_USAGE).build();\n+    regionForwardingAddress = new Address.Builder(serviceMockReturnsOptions, REGION_ADDRESS_ID).setAddress(ADDRESS).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setGeneratedId(GENERATED_ID).setStatus(STATUS).setUsage(REGION_FORWARDING_USAGE).build();\n     compute = createStrictMock(Compute.class);\n   }\n \n   private void initializeAddress() {\n-    address = new Address.Builder(compute, REGION_ADDRESS_ID)\n-        .setAddress(ADDRESS)\n-        .setCreationTimestamp(CREATION_TIMESTAMP)\n-        .setDescription(DESCRIPTION)\n-        .setGeneratedId(GENERATED_ID)\n-        .setStatus(STATUS)\n-        .setUsage(REGION_FORWARDING_USAGE)\n-        .build();\n+    address = new Address.Builder(compute, REGION_ADDRESS_ID).setAddress(ADDRESS).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setGeneratedId(GENERATED_ID).setStatus(STATUS).setUsage(REGION_FORWARDING_USAGE).build();\n   }\n \n   @After\n@@ -156,9 +119,7 @@ public class AddressTest {\n     assertNull(address.getGeneratedId());\n     assertNull(address.getStatus());\n     assertNull(address.getUsage());\n-    address = new Address.Builder(serviceMockReturnsOptions, REGION_ADDRESS_ID)\n-        .setAddressId(GLOBAL_ADDRESS_ID)\n-        .build();\n+    address = new Address.Builder(serviceMockReturnsOptions, REGION_ADDRESS_ID).setAddressId(GLOBAL_ADDRESS_ID).build();\n     assertEquals(GLOBAL_ADDRESS_ID, address.getAddressId());\n     assertSame(serviceMockReturnsOptions, address.getCompute());\n     assertNull(address.getAddress());\n@@ -184,12 +145,9 @@ public class AddressTest {\n   @Test\n   public void testToAndFromPb() {\n     initializeExpectedAddress(20);\n-    compareAddress(globalForwardingAddress,\n-        Address.fromPb(serviceMockReturnsOptions, globalForwardingAddress.toPb()));\n-    compareAddress(regionForwardingAddress,\n-        Address.fromPb(serviceMockReturnsOptions, regionForwardingAddress.toPb()));\n-    compareAddress(instanceAddress,\n-        Address.fromPb(serviceMockReturnsOptions, instanceAddress.toPb()));\n+    compareAddress(globalForwardingAddress, Address.fromPb(serviceMockReturnsOptions, globalForwardingAddress.toPb()));\n+    compareAddress(regionForwardingAddress, Address.fromPb(serviceMockReturnsOptions, regionForwardingAddress.toPb()));\n+    compareAddress(instanceAddress, Address.fromPb(serviceMockReturnsOptions, instanceAddress.toPb()));\n     Address address = new Address.Builder(serviceMockReturnsOptions, GLOBAL_ADDRESS_ID).build();\n     compareAddress(address, Address.fromPb(serviceMockReturnsOptions, address.toPb()));\n     address = new Address.Builder(serviceMockReturnsOptions, REGION_ADDRESS_ID).build();\n@@ -200,9 +158,7 @@ public class AddressTest {\n   public void testDeleteOperation() {\n     initializeExpectedAddress(4);\n     expect(compute.getOptions()).andReturn(mockOptions);\n-    Operation operation = new Operation.Builder(serviceMockReturnsOptions)\n-        .setOperationId(GlobalOperationId.of(\"project\", \"op\"))\n-        .build();\n+    Operation operation = new Operation.Builder(serviceMockReturnsOptions).setOperationId(GlobalOperationId.of(\"project\", \"op\")).build();\n     expect(compute.deleteAddress(REGION_ADDRESS_ID)).andReturn(operation);\n     replay(compute);\n     initializeAddress();\n@@ -270,8 +226,7 @@ public class AddressTest {\n   public void testReloadWithOptions() throws Exception {\n     initializeExpectedAddress(5);\n     expect(compute.getOptions()).andReturn(mockOptions);\n-    expect(compute.getAddress(REGION_ADDRESS_ID, Compute.AddressOption.fields()))\n-        .andReturn(regionForwardingAddress);\n+    expect(compute.getAddress(REGION_ADDRESS_ID, Compute.AddressOption.fields())).andReturn(regionForwardingAddress);\n     replay(compute);\n     initializeAddress();\n     Address updatedAddress = address.reload(Compute.AddressOption.fields());\n@@ -291,4 +246,4 @@ public class AddressTest {\n     assertEquals(expected.getStatus(), value.getStatus());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/908/AddressTest.java\nindex 0c823d5fdb1..660417c3f52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/908/AddressTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/908/AddressTest.java\n@@ -224,7 +224,8 @@ public class AddressTest {\n     initializeExpectedAddress(3);\n     Compute.AddressOption[] expectedOptions = {Compute.AddressOption.fields()};\n     expect(compute.getOptions()).andReturn(mockOptions);\n-    expect(compute.getAddress(REGION_ADDRESS_ID, expectedOptions)).andReturn(regionForwardingAddress);\n+    expect(compute.getAddress(REGION_ADDRESS_ID, expectedOptions)\n+        ).andReturn(regionForwardingAddress);\n     replay(compute);\n     initializeAddress();\n     assertTrue(address.exists());\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "227",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}