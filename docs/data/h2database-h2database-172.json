{
    "project_name": "h2database-h2database",
    "error_id": "172",
    "information": {
        "errors": [
            {
                "line": "2022",
                "column": "70",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n        debugCodeCall(\"supportsMixedCaseIdentifiers\");\n        SessionInterface.StaticSettings settings = conn.getStaticSettings();\n        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/172/JdbcDatabaseMetaData.java\nindex c63f1c2001b..2721f595f97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/172/JdbcDatabaseMetaData.java\n@@ -2019,7 +2019,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/172/JdbcDatabaseMetaData.java\nindex c63f1c2001b..5b54f76759c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/172/JdbcDatabaseMetaData.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.sql.Connection;\n@@ -40,7 +41,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         setTrace(trace, TraceObject.DATABASE_META_DATA, id);\n         this.conn = conn;\n         SessionInterface session = conn.getSession();\n-        meta = session.getStaticSettings().oldInformationSchema ? new DatabaseMetaLegacy(session)\n+        meta = session.getStaticSettings().oldInformationSchema ?\n+                new DatabaseMetaLegacy(session)\n                 : conn.getSession().getDatabaseMeta();\n     }\n \n@@ -135,17 +137,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SQL (String) the create table statement or NULL for systems tables.</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param types null or a list of table types\n+     *                         (uppercase for unquoted names)\n+     * @param types            null or a list of table types\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n+    public ResultSet getTables(String catalog, String schemaPattern,\n+                               String tableNamePattern, String[] types)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n@@ -153,7 +156,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n                         quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n                         \", \" + quoteArray(types) + \");\");\n             }\n-            return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n+            return getResultSet(\n+                    meta.getTables(catalog, schemaPattern, tableNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -191,27 +196,30 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>IS_GENERATEDCOLUMN (String) \"NO\" or \"YES\"</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern,\n+                                String tableNamePattern,\n+                                String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(\n+                    meta.getColumns(catalog, schemaPattern, tableNamePattern,\n+                            columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -242,17 +250,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>FILTER_CONDITION (String) filter condition (always empty)</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param unique only unique indexes\n+     * @param catalog     null or the catalog name\n+     * @param schema      null (to get all objects) or a schema name\n+     *                    (uppercase for unquoted names)\n+     * @param table       table name (must be specified)\n+     * @param unique      only unique indexes\n      * @param approximate if true, return fast, but approximate CARDINALITY\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n+    public ResultSet getIndexInfo(String catalog, String schema, String table,\n+                                  boolean unique, boolean approximate)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n@@ -260,7 +269,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n                         quote(schema) + \", \" + quote(table) + \", \" +\n                         unique + \", \" + approximate + \");\");\n             }\n-            return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n+            return getResultSet(\n+                    meta.getIndexInfo(catalog, schema, table, unique,\n+                            approximate));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -280,20 +291,21 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     *                (uppercase for unquoted names)\n+     * @param table   table name (must be specified)\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getPrimaryKeys(String catalog, String schema, String table)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -373,7 +385,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Checks if NULL is sorted high (bigger than anything that is not null).\n      *\n      * @return false by default; true if the system property h2.sortNullsHigh is\n-     *         set to true\n+     * set to true\n      */\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n@@ -389,7 +401,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Checks if NULL is sorted low (smaller than anything that is not null).\n      *\n      * @return true by default; false if the system property h2.sortNullsHigh is\n-     *         set to true\n+     * set to true\n      */\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n@@ -455,24 +467,26 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+                                   String procedureNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n+            return getResultSet(meta.getProcedures(catalog, schemaPattern,\n+                    procedureNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -512,28 +526,31 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n-     * @param columnNamePattern the procedure name pattern\n+     * @param columnNamePattern    the procedure name pattern\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n+                                         String procedureNamePattern,\n+                                         String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+                    meta.getProcedureColumns(catalog, schemaPattern,\n+                            procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -619,27 +636,29 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table a table name (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schema            null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param table             a table name (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n+    public ResultSet getColumnPrivileges(String catalog, String schema,\n+                                         String table, String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n+            return getResultSet(meta.getColumnPrivileges(catalog, schema, table,\n+                    columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -661,26 +680,28 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n+                                        String tableNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -702,27 +723,31 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>PSEUDO_COLUMN (short) (always bestRowNotPseudo)</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param scope ignored\n+     * @param catalog  null (to get all objects) or the catalog name\n+     * @param schema   null (to get all objects) or a schema name\n+     *                 (uppercase for unquoted names)\n+     * @param table    table name (must be specified)\n+     * @param scope    ignored\n      * @param nullable ignored\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n+    public ResultSet getBestRowIdentifier(String catalog, String schema,\n+                                          String table, int scope,\n+                                          boolean nullable)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \", \"\n+                        + scope + \", \" + nullable + \");\");\n             }\n-            return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n+            return getResultSet(\n+                    meta.getBestRowIdentifier(catalog, schema, table, scope,\n+                            nullable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -745,19 +770,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     * @param table   table name (must be specified)\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getVersionColumns(String catalog, String schema,\n+                                       String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -791,19 +817,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema the schema name of the foreign table\n-     * @param table the name of the foreign table\n+     * @param schema  the schema name of the foreign table\n+     * @param table   the name of the foreign table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getImportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -837,19 +864,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema the schema name of the primary table\n-     * @param table the name of the primary table\n+     * @param schema  the schema name of the primary table\n+     * @param table   the name of the primary table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getExportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -884,31 +912,38 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param primaryCatalog null or the catalog name\n-     * @param primarySchema the schema name of the primary table\n-     *          (optional)\n-     * @param primaryTable the name of the primary table (must be specified)\n+     * @param primarySchema  the schema name of the primary table\n+     *                       (optional)\n+     * @param primaryTable   the name of the primary table (must be specified)\n      * @param foreignCatalog null or the catalog name\n-     * @param foreignSchema the schema name of the foreign table\n-     *          (optional)\n-     * @param foreignTable the name of the foreign table (must be specified)\n+     * @param foreignSchema  the schema name of the foreign table\n+     *                       (optional)\n+     * @param foreignTable   the name of the foreign table (must be specified)\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog,\n+                                       String primarySchema,\n+                                       String primaryTable,\n+                                       String foreignCatalog,\n+                                       String foreignSchema,\n+                                       String foreignTable)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                        + quote(primaryCatalog) + \", \"\n+                        + quote(primarySchema) + \", \"\n+                        + quote(primaryTable) + \", \"\n+                        + quote(foreignCatalog) + \", \"\n+                        + quote(foreignSchema) + \", \"\n+                        + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(\n+                    meta.getCrossReference(primaryCatalog, primarySchema,\n+                            primaryTable, foreignCatalog,\n+                            foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -928,25 +963,28 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>BASE_TYPE (short) base type - see also java.sql.Types</li>\n      * </ol>\n      *\n-     * @param catalog ignored\n-     * @param schemaPattern ignored\n+     * @param catalog         ignored\n+     * @param schemaPattern   ignored\n      * @param typeNamePattern ignored\n-     * @param types ignored\n+     * @param types           ignored\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+                             String typeNamePattern, int[] types)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quoteIntArray(types) + \");\");\n             }\n-            return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n+            return getResultSet(\n+                    meta.getUDTs(catalog, schemaPattern, typeNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1105,7 +1143,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * patterns.\n      *\n      * @return the default escape character (always '\\', independent on the\n-     *         mode)\n+     * mode)\n      */\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n@@ -1131,6 +1169,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n \n     /**\n      * Returns whether alter table with add column is supported.\n+     *\n      * @return true\n      */\n     @Override\n@@ -1187,13 +1226,13 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether CONVERT is supported for one datatype to another.\n      *\n      * @param fromType the source SQL type\n-     * @param toType the target SQL type\n+     * @param toType   the target SQL type\n      * @return true\n      */\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \" + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1783,17 +1822,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true\n      */\n     @Override\n-    public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n+    public boolean supportsTransactionIsolationLevel(int level)\n+            throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n         switch (level) {\n-        case Connection.TRANSACTION_READ_UNCOMMITTED:\n-        case Connection.TRANSACTION_READ_COMMITTED:\n-        case Connection.TRANSACTION_REPEATABLE_READ:\n-        case Constants.TRANSACTION_SNAPSHOT:\n-        case Connection.TRANSACTION_SERIALIZABLE:\n-            return true;\n-        default:\n-            return false;\n+            case Connection.TRANSACTION_READ_UNCOMMITTED:\n+            case Connection.TRANSACTION_READ_COMMITTED:\n+            case Connection.TRANSACTION_REPEATABLE_READ:\n+            case Constants.TRANSACTION_SNAPSHOT:\n+            case Connection.TRANSACTION_SERIALIZABLE:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -1859,14 +1899,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether a specific result set concurrency is supported.\n      * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n      *\n-     * @param type the result set type\n+     * @param type        the result set type\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \" +\n+                    concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -2019,10 +2060,11 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                !settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2059,7 +2101,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2378,15 +2421,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n+    public ResultSet getSuperTypes(String catalog, String schemaPattern,\n+                                   String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n+            return getResultSet(meta.getSuperTypes(catalog, schemaPattern,\n+                    typeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2402,24 +2447,26 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SUPERTABLE_NAME (String) the name of the super table</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name pattern\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return an empty result set\n      */\n     @Override\n     public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+                                    String tableNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getSuperTables(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2429,17 +2476,21 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern,\n+                                   String typeNamePattern,\n+                                   String attributeNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quote(attributeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n+            return getResultSet(\n+                    meta.getAttributes(catalog, schemaPattern, typeNamePattern,\n+                            attributeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2449,7 +2500,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Does this database supports a result set holdability.\n      *\n      * @param holdability ResultSet.HOLD_CURSORS_OVER_COMMIT or\n-     *            CLOSE_CURSORS_AT_COMMIT\n+     *                    CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n     @Override\n@@ -2581,8 +2632,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n@@ -2632,12 +2683,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()),\n+                    ValueInteger.get(Integer.MAX_VALUE),\n+                    ValueVarchar.EMPTY, ValueVarchar.EMPTY,\n+                    ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                    \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2677,18 +2731,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      */\n     @Override\n     public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n+                                        String functionNamePattern,\n+                                        String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+                    meta.getFunctionColumns(catalog, schemaPattern,\n+                            functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2699,15 +2755,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      */\n     @Override\n     public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+                                  String functionNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n+            return getResultSet(meta.getFunctions(catalog, schemaPattern,\n+                    functionNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2727,26 +2785,29 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      */\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern,\n+                                      String tableNamePattern,\n+                                      String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern,\n+                    tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2761,7 +2822,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn, null, null, result,\n+                getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n }\n",
            "diff_size": 261
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/172/JdbcDatabaseMetaData.java\nindex c63f1c2001b..ce4f947922c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/172/JdbcDatabaseMetaData.java\n@@ -2019,7 +2019,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2764,4 +2764,4 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/172/JdbcDatabaseMetaData.java\nindex c63f1c2001b..fd2064977d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/172/JdbcDatabaseMetaData.java\n@@ -12,7 +12,6 @@ import java.sql.RowIdLifetime;\n import java.sql.SQLException;\n import java.util.Map.Entry;\n import java.util.Properties;\n-\n import org.h2.engine.Constants;\n import org.h2.engine.SessionInterface;\n import org.h2.jdbc.meta.DatabaseMeta;\n@@ -29,19 +28,18 @@ import org.h2.value.ValueVarchar;\n /**\n  * Represents the meta data for a database.\n  */\n-public class JdbcDatabaseMetaData extends TraceObject implements\n-        DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n \n-    private final JdbcConnection conn;\n \n+public class JdbcDatabaseMetaData extends TraceObject implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+\n+    private final JdbcConnection conn;\n     private final DatabaseMeta meta;\n \n     JdbcDatabaseMetaData(JdbcConnection conn, Trace trace, int id) {\n         setTrace(trace, TraceObject.DATABASE_META_DATA, id);\n         this.conn = conn;\n         SessionInterface session = conn.getSession();\n-        meta = session.getStaticSettings().oldInformationSchema ? new DatabaseMetaLegacy(session)\n-                : conn.getSession().getDatabaseMeta();\n+        meta = session.getStaticSettings().oldInformationSchema ? new DatabaseMetaLegacy(session) : conn.getSession().getDatabaseMeta();\n     }\n \n     /**\n@@ -49,6 +47,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version number\n      */\n+\n     @Override\n     public int getDriverMajorVersion() {\n         debugCodeCall(\"getDriverMajorVersion\");\n@@ -60,6 +59,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version number\n      */\n+\n     @Override\n     public int getDriverMinorVersion() {\n         debugCodeCall(\"getDriverMinorVersion\");\n@@ -71,6 +71,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product name (\"H2\")\n      */\n+\n     @Override\n     public String getDatabaseProductName() {\n         debugCodeCall(\"getDatabaseProductName\");\n@@ -84,6 +85,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product version\n      */\n+\n     @Override\n     public String getDatabaseProductVersion() throws SQLException {\n         try {\n@@ -99,6 +101,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the driver name (\"H2 JDBC Driver\")\n      */\n+\n     @Override\n     public String getDriverName() {\n         debugCodeCall(\"getDriverName\");\n@@ -111,6 +114,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the version number\n      */\n+\n     @Override\n     public String getDriverVersion() {\n         debugCodeCall(\"getDriverVersion\");\n@@ -144,14 +148,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n-            throws SQLException {\n+    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTables(\" + quote(catalog) + \", \" +\n-                        quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n-                        \", \" + quoteArray(types) + \");\");\n+                debugCode(\"getTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quoteArray(types) + \");\");\n             }\n             return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n         } catch (Exception e) {\n@@ -201,15 +206,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -251,14 +256,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n-            throws SQLException {\n+    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" +\n-                        quote(schema) + \", \" + quote(table) + \", \" +\n-                        unique + \", \" + approximate + \");\");\n+                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + unique + \", \"\n+                + approximate + \");\");\n             }\n             return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n         } catch (Exception e) {\n@@ -286,14 +293,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getPrimaryKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -306,6 +313,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allProceduresAreCallable() {\n         debugCodeCall(\"allProceduresAreCallable\");\n@@ -317,6 +325,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allTablesAreSelectable() {\n         debugCodeCall(\"allTablesAreSelectable\");\n@@ -328,6 +337,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the url\n      */\n+\n     @Override\n     public String getURL() throws SQLException {\n         try {\n@@ -344,6 +354,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the user name\n      */\n+\n     @Override\n     public String getUserName() throws SQLException {\n         try {\n@@ -359,6 +370,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return if read only optimization is switched on\n      */\n+\n     @Override\n     public boolean isReadOnly() throws SQLException {\n         try {\n@@ -375,6 +387,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return false by default; true if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n         try {\n@@ -391,6 +404,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true by default; false if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n         try {\n@@ -407,6 +421,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtStart() {\n         debugCodeCall(\"nullsAreSortedAtStart\");\n@@ -418,6 +433,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtEnd() {\n         debugCodeCall(\"nullsAreSortedAtEnd\");\n@@ -429,6 +445,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the connection\n      */\n+\n     @Override\n     public Connection getConnection() {\n         debugCodeCall(\"getConnection\");\n@@ -462,15 +479,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+    public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                debugCode(\"getProcedures(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \");\");\n             }\n             return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n         } catch (Exception e) {\n@@ -520,20 +536,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getProcedureColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+            return getResultSet(meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -551,6 +565,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getSchemas() throws SQLException {\n         try {\n@@ -572,6 +587,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the catalog list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getCatalogs() throws SQLException {\n         try {\n@@ -592,6 +608,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the table types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTableTypes() throws SQLException {\n         try {\n@@ -628,16 +645,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumnPrivileges(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n         } catch (Exception e) {\n@@ -669,15 +685,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n-            throws SQLException {\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getTablePrivileges(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n@@ -711,16 +726,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n-            throws SQLException {\n+    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                debugCode(\"getBestRowIdentifier(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + scope + \", \"\n+                + nullable + \");\");\n             }\n             return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n         } catch (Exception e) {\n@@ -750,14 +765,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getVersionColumns(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -796,14 +811,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getImportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -842,14 +857,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getExportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -894,21 +909,19 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                debugCode(\"getCrossReference(\" + quote(primaryCatalog) + \", \"\n+                + quote(primarySchema) + \", \"\n+                + quote(primaryTable) + \", \"\n+                + quote(foreignCatalog) + \", \"\n+                + quote(foreignSchema) + \", \"\n+                + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog, foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -935,16 +948,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                debugCode(\"getUDTs(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quoteIntArray(types) + \");\");\n             }\n             return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n         } catch (Exception e) {\n@@ -981,6 +993,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of data types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTypeInfo() throws SQLException {\n         try {\n@@ -996,6 +1009,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean usesLocalFiles() {\n         debugCodeCall(\"usesLocalFiles\");\n@@ -1007,6 +1021,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean usesLocalFilePerTable() {\n         debugCodeCall(\"usesLocalFilePerTable\");\n@@ -1018,6 +1033,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a double quote\n      */\n+\n     @Override\n     public String getIdentifierQuoteString() {\n         debugCodeCall(\"getIdentifierQuoteString\");\n@@ -1030,6 +1046,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a list of additional the keywords\n      */\n+\n     @Override\n     public String getSQLKeywords() throws SQLException {\n         try {\n@@ -1045,6 +1062,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getNumericFunctions() throws SQLException {\n         try {\n@@ -1060,6 +1078,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getStringFunctions() throws SQLException {\n         try {\n@@ -1075,6 +1094,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getSystemFunctions() throws SQLException {\n         try {\n@@ -1090,6 +1110,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getTimeDateFunctions() throws SQLException {\n         try {\n@@ -1107,6 +1128,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the default escape character (always '\\', independent on the\n      *         mode)\n      */\n+\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n         try {\n@@ -1123,6 +1145,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return an empty String (\"\")\n      */\n+\n     @Override\n     public String getExtraNameCharacters() {\n         debugCodeCall(\"getExtraNameCharacters\");\n@@ -1133,6 +1156,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether alter table with add column is supported.\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithAddColumn() {\n         debugCodeCall(\"supportsAlterTableWithAddColumn\");\n@@ -1144,6 +1168,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithDropColumn() {\n         debugCodeCall(\"supportsAlterTableWithDropColumn\");\n@@ -1155,6 +1180,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsColumnAliasing() {\n         debugCodeCall(\"supportsColumnAliasing\");\n@@ -1166,6 +1192,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean nullPlusNonNullIsNull() {\n         debugCodeCall(\"nullPlusNonNullIsNull\");\n@@ -1177,6 +1204,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert() {\n         debugCodeCall(\"supportsConvert\");\n@@ -1190,10 +1218,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param toType the target SQL type\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \"\n+            + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1203,6 +1233,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTableCorrelationNames() {\n         debugCodeCall(\"supportsTableCorrelationNames\");\n@@ -1215,6 +1246,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDifferentTableCorrelationNames() {\n         debugCodeCall(\"supportsDifferentTableCorrelationNames\");\n@@ -1226,6 +1258,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsExpressionsInOrderBy() {\n         debugCodeCall(\"supportsExpressionsInOrderBy\");\n@@ -1238,6 +1271,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOrderByUnrelated() {\n         debugCodeCall(\"supportsOrderByUnrelated\");\n@@ -1249,6 +1283,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupBy() {\n         debugCodeCall(\"supportsGroupBy\");\n@@ -1261,6 +1296,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByUnrelated() {\n         debugCodeCall(\"supportsGroupByUnrelated\");\n@@ -1274,6 +1310,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByBeyondSelect() {\n         debugCodeCall(\"supportsGroupByBeyondSelect\");\n@@ -1285,6 +1322,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLikeEscapeClause() {\n         debugCodeCall(\"supportsLikeEscapeClause\");\n@@ -1296,6 +1334,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsMultipleResultSets() {\n         debugCodeCall(\"supportsMultipleResultSets\");\n@@ -1308,6 +1347,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleTransactions() {\n         debugCodeCall(\"supportsMultipleTransactions\");\n@@ -1319,6 +1359,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsNonNullableColumns() {\n         debugCodeCall(\"supportsNonNullableColumns\");\n@@ -1330,6 +1371,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMinimumSQLGrammar() {\n         debugCodeCall(\"supportsMinimumSQLGrammar\");\n@@ -1341,6 +1383,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCoreSQLGrammar() {\n         debugCodeCall(\"supportsCoreSQLGrammar\");\n@@ -1352,6 +1395,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsExtendedSQLGrammar() {\n         debugCodeCall(\"supportsExtendedSQLGrammar\");\n@@ -1363,6 +1407,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsANSI92EntryLevelSQL() {\n         debugCodeCall(\"supportsANSI92EntryLevelSQL\");\n@@ -1374,6 +1419,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92IntermediateSQL() {\n         debugCodeCall(\"supportsANSI92IntermediateSQL\");\n@@ -1385,6 +1431,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92FullSQL() {\n         debugCodeCall(\"supportsANSI92FullSQL\");\n@@ -1396,6 +1443,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsIntegrityEnhancementFacility() {\n         debugCodeCall(\"supportsIntegrityEnhancementFacility\");\n@@ -1407,6 +1455,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOuterJoins() {\n         debugCodeCall(\"supportsOuterJoins\");\n@@ -1418,6 +1467,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsFullOuterJoins() {\n         debugCodeCall(\"supportsFullOuterJoins\");\n@@ -1429,6 +1479,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLimitedOuterJoins() {\n         debugCodeCall(\"supportsLimitedOuterJoins\");\n@@ -1440,6 +1491,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"schema\"\n      */\n+\n     @Override\n     public String getSchemaTerm() {\n         debugCodeCall(\"getSchemaTerm\");\n@@ -1451,6 +1503,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"procedure\"\n      */\n+\n     @Override\n     public String getProcedureTerm() {\n         debugCodeCall(\"getProcedureTerm\");\n@@ -1462,6 +1515,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"catalog\"\n      */\n+\n     @Override\n     public String getCatalogTerm() {\n         debugCodeCall(\"getCatalogTerm\");\n@@ -1473,6 +1527,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean isCatalogAtStart() {\n         debugCodeCall(\"isCatalogAtStart\");\n@@ -1484,6 +1539,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \".\"\n      */\n+\n     @Override\n     public String getCatalogSeparator() {\n         debugCodeCall(\"getCatalogSeparator\");\n@@ -1495,6 +1551,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInDataManipulation() {\n         debugCodeCall(\"supportsSchemasInDataManipulation\");\n@@ -1506,6 +1563,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInProcedureCalls() {\n         debugCodeCall(\"supportsSchemasInProcedureCalls\");\n@@ -1517,6 +1575,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInTableDefinitions() {\n         debugCodeCall(\"supportsSchemasInTableDefinitions\");\n@@ -1528,6 +1587,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInIndexDefinitions() {\n         debugCodeCall(\"supportsSchemasInIndexDefinitions\");\n@@ -1539,6 +1599,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsSchemasInPrivilegeDefinitions\");\n@@ -1550,6 +1611,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInDataManipulation() {\n         debugCodeCall(\"supportsCatalogsInDataManipulation\");\n@@ -1561,6 +1623,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsCatalogsInProcedureCalls() {\n         debugCodeCall(\"supportsCatalogsInProcedureCalls\");\n@@ -1572,6 +1635,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInTableDefinitions() {\n         debugCodeCall(\"supportsCatalogsInTableDefinitions\");\n@@ -1583,6 +1647,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInIndexDefinitions() {\n         debugCodeCall(\"supportsCatalogsInIndexDefinitions\");\n@@ -1594,6 +1659,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsCatalogsInPrivilegeDefinitions\");\n@@ -1605,6 +1671,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedDelete() {\n         debugCodeCall(\"supportsPositionedDelete\");\n@@ -1616,6 +1683,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedUpdate() {\n         debugCodeCall(\"supportsPositionedUpdate\");\n@@ -1627,6 +1695,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSelectForUpdate() {\n         debugCodeCall(\"supportsSelectForUpdate\");\n@@ -1638,6 +1707,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStoredProcedures() {\n         debugCodeCall(\"supportsStoredProcedures\");\n@@ -1649,6 +1719,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInComparisons() {\n         debugCodeCall(\"supportsSubqueriesInComparisons\");\n@@ -1660,6 +1731,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInExists() {\n         debugCodeCall(\"supportsSubqueriesInExists\");\n@@ -1671,6 +1743,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInIns() {\n         debugCodeCall(\"supportsSubqueriesInIns\");\n@@ -1682,6 +1755,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInQuantifieds() {\n         debugCodeCall(\"supportsSubqueriesInQuantifieds\");\n@@ -1693,6 +1767,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCorrelatedSubqueries() {\n         debugCodeCall(\"supportsCorrelatedSubqueries\");\n@@ -1704,6 +1779,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnion() {\n         debugCodeCall(\"supportsUnion\");\n@@ -1715,6 +1791,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnionAll() {\n         debugCodeCall(\"supportsUnionAll\");\n@@ -1726,6 +1803,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossCommit() {\n         debugCodeCall(\"supportsOpenCursorsAcrossCommit\");\n@@ -1737,6 +1815,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossRollback() {\n         debugCodeCall(\"supportsOpenCursorsAcrossRollback\");\n@@ -1748,6 +1827,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossCommit() {\n         debugCodeCall(\"supportsOpenStatementsAcrossCommit\");\n@@ -1759,6 +1839,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossRollback() {\n         debugCodeCall(\"supportsOpenStatementsAcrossRollback\");\n@@ -1770,6 +1851,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactions() {\n         debugCodeCall(\"supportsTransactions\");\n@@ -1782,6 +1864,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param level the transaction isolation level (Connection.TRANSACTION_*)\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n@@ -1803,6 +1886,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDataDefinitionAndDataManipulationTransactions() {\n         debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n@@ -1814,6 +1898,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsDataManipulationTransactionsOnly() {\n         debugCodeCall(\"supportsDataManipulationTransactionsOnly\");\n@@ -1825,6 +1910,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean dataDefinitionCausesTransactionCommit() {\n         debugCodeCall(\"dataDefinitionCausesTransactionCommit\");\n@@ -1836,6 +1922,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean dataDefinitionIgnoredInTransactions() {\n         debugCodeCall(\"dataDefinitionIgnoredInTransactions\");\n@@ -1849,6 +1936,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true for all types except ResultSet.TYPE_FORWARD_ONLY\n      */\n+\n     @Override\n     public boolean supportsResultSetType(int type) {\n         debugCodeCall(\"supportsResultSetType\", type);\n@@ -1863,10 +1951,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n+\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \"\n+            + concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -1877,6 +1967,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true\n      */\n+\n     @Override\n     public boolean ownUpdatesAreVisible(int type) {\n         debugCodeCall(\"ownUpdatesAreVisible\", type);\n@@ -1889,6 +1980,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownDeletesAreVisible(int type) {\n         debugCodeCall(\"ownDeletesAreVisible\", type);\n@@ -1901,6 +1993,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownInsertsAreVisible(int type) {\n         debugCodeCall(\"ownInsertsAreVisible\", type);\n@@ -1913,6 +2006,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersUpdatesAreVisible(int type) {\n         debugCodeCall(\"othersUpdatesAreVisible\", type);\n@@ -1925,6 +2019,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersDeletesAreVisible(int type) {\n         debugCodeCall(\"othersDeletesAreVisible\", type);\n@@ -1937,6 +2032,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersInsertsAreVisible(int type) {\n         debugCodeCall(\"othersInsertsAreVisible\", type);\n@@ -1949,6 +2045,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean updatesAreDetected(int type) {\n         debugCodeCall(\"updatesAreDetected\", type);\n@@ -1961,6 +2058,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean deletesAreDetected(int type) {\n         debugCodeCall(\"deletesAreDetected\", type);\n@@ -1973,6 +2071,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean insertsAreDetected(int type) {\n         debugCodeCall(\"insertsAreDetected\", type);\n@@ -1984,6 +2083,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsBatchUpdates() {\n         debugCodeCall(\"supportsBatchUpdates\");\n@@ -1995,6 +2095,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean doesMaxRowSizeIncludeBlobs() {\n         debugCodeCall(\"doesMaxRowSizeIncludeBlobs\");\n@@ -2006,6 +2107,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return Connection.TRANSACTION_READ_COMMITTED\n      */\n+\n     @Override\n     public int getDefaultTransactionIsolation() {\n         debugCodeCall(\"getDefaultTransactionIsolation\");\n@@ -2018,8 +2120,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2031,6 +2134,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesUpperCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseIdentifiers\");\n@@ -2043,6 +2147,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesLowerCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseIdentifiers\");\n@@ -2055,6 +2160,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n@@ -2068,6 +2174,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseQuotedIdentifiers\");\n@@ -2080,6 +2187,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n@@ -2092,6 +2200,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseQuotedIdentifiers\");\n@@ -2104,6 +2213,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseQuotedIdentifiers\");\n@@ -2115,6 +2225,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxBinaryLiteralLength() {\n         debugCodeCall(\"getMaxBinaryLiteralLength\");\n@@ -2126,6 +2237,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCharLiteralLength() {\n         debugCodeCall(\"getMaxCharLiteralLength\");\n@@ -2137,6 +2249,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnNameLength() {\n         debugCodeCall(\"getMaxColumnNameLength\");\n@@ -2148,6 +2261,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInGroupBy() {\n         debugCodeCall(\"getMaxColumnsInGroupBy\");\n@@ -2159,6 +2273,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInIndex() {\n         debugCodeCall(\"getMaxColumnsInIndex\");\n@@ -2170,6 +2285,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInOrderBy() {\n         debugCodeCall(\"getMaxColumnsInOrderBy\");\n@@ -2181,6 +2297,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInSelect() {\n         debugCodeCall(\"getMaxColumnsInSelect\");\n@@ -2192,6 +2309,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInTable() {\n         debugCodeCall(\"getMaxColumnsInTable\");\n@@ -2203,6 +2321,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxConnections() {\n         debugCodeCall(\"getMaxConnections\");\n@@ -2214,6 +2333,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCursorNameLength() {\n         debugCodeCall(\"getMaxCursorNameLength\");\n@@ -2225,6 +2345,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxIndexLength() {\n         debugCodeCall(\"getMaxIndexLength\");\n@@ -2236,6 +2357,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxSchemaNameLength() {\n         debugCodeCall(\"getMaxSchemaNameLength\");\n@@ -2247,6 +2369,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxProcedureNameLength() {\n         debugCodeCall(\"getMaxProcedureNameLength\");\n@@ -2258,6 +2381,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCatalogNameLength() {\n         debugCodeCall(\"getMaxCatalogNameLength\");\n@@ -2269,6 +2393,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxRowSize() {\n         debugCodeCall(\"getMaxRowSize\");\n@@ -2280,6 +2405,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatementLength() {\n         debugCodeCall(\"getMaxStatementLength\");\n@@ -2291,6 +2417,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatements() {\n         debugCodeCall(\"getMaxStatements\");\n@@ -2302,6 +2429,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTableNameLength() {\n         debugCodeCall(\"getMaxTableNameLength\");\n@@ -2313,6 +2441,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTablesInSelect() {\n         debugCodeCall(\"getMaxTablesInSelect\");\n@@ -2324,6 +2453,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxUserNameLength() {\n         debugCodeCall(\"getMaxUserNameLength\");\n@@ -2335,6 +2465,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSavepoints() {\n         debugCodeCall(\"supportsSavepoints\");\n@@ -2346,6 +2477,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsNamedParameters() {\n         debugCodeCall(\"supportsNamedParameters\");\n@@ -2357,6 +2489,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleOpenResults() {\n         debugCodeCall(\"supportsMultipleOpenResults\");\n@@ -2368,6 +2501,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGetGeneratedKeys() {\n         debugCodeCall(\"supportsGetGeneratedKeys\");\n@@ -2377,14 +2511,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n     public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                debugCode(\"getSuperTypes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n         } catch (Exception e) {\n@@ -2409,15 +2543,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            (uppercase for unquoted names)\n      * @return an empty result set\n      */\n+\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getSuperTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n         } catch (Exception e) {\n@@ -2428,16 +2561,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                debugCode(\"getAttributes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quote(attributeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n         } catch (Exception e) {\n@@ -2452,6 +2584,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public boolean supportsResultSetHoldability(int holdability) {\n         debugCodeCall(\"supportsResultSetHoldability\", holdability);\n@@ -2463,6 +2596,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public int getResultSetHoldability() {\n         debugCodeCall(\"getResultSetHoldability\");\n@@ -2474,6 +2608,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version\n      */\n+\n     @Override\n     public int getDatabaseMajorVersion() throws SQLException {\n         try {\n@@ -2489,6 +2624,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version\n      */\n+\n     @Override\n     public int getDatabaseMinorVersion() throws SQLException {\n         try {\n@@ -2504,6 +2640,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version (4)\n      */\n+\n     @Override\n     public int getJDBCMajorVersion() {\n         debugCodeCall(\"getJDBCMajorVersion\");\n@@ -2515,6 +2652,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version (2)\n      */\n+\n     @Override\n     public int getJDBCMinorVersion() {\n         debugCodeCall(\"getJDBCMinorVersion\");\n@@ -2526,6 +2664,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return {@link DatabaseMetaData#sqlStateSQL}\n      */\n+\n     @Override\n     public int getSQLStateType() {\n         debugCodeCall(\"getSQLStateType\");\n@@ -2537,6 +2676,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean locatorsUpdateCopy() {\n         debugCodeCall(\"locatorsUpdateCopy\");\n@@ -2548,6 +2688,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStatementPooling() {\n         debugCodeCall(\"supportsStatementPooling\");\n@@ -2565,6 +2706,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ROWID_UNSUPPORTED\n      */\n+\n     @Override\n     public RowIdLifetime getRowIdLifetime() {\n         debugCodeCall(\"getRowIdLifetime\");\n@@ -2586,9 +2728,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getSchemas(String catalogPattern, String schemaPattern)\n-            throws SQLException {\n+    public ResultSet getSchemas(String catalogPattern, String schemaPattern) throws SQLException {\n         try {\n             debugCodeCall(\"getSchemas(String,String)\");\n             return getResultSet(meta.getSchemas(catalogPattern, schemaPattern));\n@@ -2603,6 +2745,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsStoredFunctionsUsingCallSyntax() {\n         debugCodeCall(\"supportsStoredFunctionsUsingCallSyntax\");\n@@ -2615,6 +2758,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean autoCommitFailureClosesAllResultSets() {\n         debugCodeCall(\"autoCommitFailureClosesAllResultSets\");\n@@ -2632,12 +2776,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE), ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                                         \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2648,6 +2792,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return this\n      */\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T unwrap(Class<T> iface) throws SQLException {\n@@ -2667,6 +2812,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return whether or not the interface is assignable from this class\n      */\n+\n     @Override\n     public boolean isWrapperFor(Class<?> iface) throws SQLException {\n         return iface != null && iface.isAssignableFrom(getClass());\n@@ -2675,20 +2821,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of function columns.\n      */\n+\n     @Override\n-    public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getFunctionColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+            return getResultSet(meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2697,15 +2840,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of functions.\n      */\n+\n     @Override\n-    public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+    public ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                debugCode(\"getFunctions(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \");\");\n             }\n             return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n         } catch (Exception e) {\n@@ -2719,6 +2861,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean generatedKeyAlwaysReturned() {\n         return true;\n@@ -2735,16 +2878,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param columnNamePattern null (to get all objects) or a column name\n      *            (uppercase for unquoted names)\n      */\n+\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getPseudoColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -2755,13 +2897,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * INTERNAL\n      */\n+\n     @Override\n     public String toString() {\n         return getTraceObjectName() + \": \" + conn;\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn,\n+               null,\n+               null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 328
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/172/JdbcDatabaseMetaData.java\nindex c63f1c2001b..2721f595f97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/172/JdbcDatabaseMetaData.java\n@@ -2019,7 +2019,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/172/JdbcDatabaseMetaData.java\nindex c63f1c2001b..2721f595f97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/172/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/172/JdbcDatabaseMetaData.java\n@@ -2019,7 +2019,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}