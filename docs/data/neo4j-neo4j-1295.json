{
    "project_name": "neo4j-neo4j",
    "error_id": "1295",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1295/PathInterest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1295/PathInterest.java\nindex aaff0b920d3..11467558aa0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1295/PathInterest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1295/PathInterest.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.Comparator;\n@@ -38,23 +39,26 @@ public interface PathInterest<P>\n     /**\n      * Decide if a traversal branch with numberOfVisits, pathPriority and oldPriority (based on end node) can be ruled\n      * out from further traversal or not.\n+     *\n      * @param numberOfVisits number of times a traversal branch ending on the same node has been traversed from.\n-     * @param pathPriority priority of traversal branch currently considered.\n-     * @param oldPriority priority of other traversal branch.\n+     * @param pathPriority   priority of traversal branch currently considered.\n+     * @param oldPriority    priority of other traversal branch.\n      * @return true if traversal branch can be ruled out from further traversal, false otherwise.\n      */\n-    boolean canBeRuledOut( int numberOfVisits, P pathPriority, P oldPriority );\n+    boolean canBeRuledOut(int numberOfVisits, P pathPriority, P oldPriority);\n \n     /**\n      * Decide if a traversal branch that previously has not been ruled out still is interesting. This would typically\n      * mean that a certain number of paths are of interest.\n+     *\n      * @param numberOfVisits\n      * @return true if traversal branch still is of interest\n      */\n-    boolean stillInteresting( int numberOfVisits );\n+    boolean stillInteresting(int numberOfVisits);\n \n     /**\n      * Should traversal stop when traversed beyond lowest cost?\n+     *\n      * @return true if traversal should stop beyond lowest cost.\n      */\n     boolean stopAfterLowestCost();\n@@ -64,16 +68,16 @@ public interface PathInterest<P>\n         /**\n          * @return {@link BiFunction} to be used when deciding if entity can be ruled out or not.\n          */\n-        abstract BiFunction<P,P,Boolean> interestFunction();\n+        abstract BiFunction<P, P, Boolean> interestFunction();\n \n         @Override\n-        public boolean canBeRuledOut( int numberOfVisits, P pathPriority, P oldPriority )\n+        public boolean canBeRuledOut(int numberOfVisits, P pathPriority, P oldPriority)\n         {\n-            return !interestFunction().apply( pathPriority, oldPriority );\n+            return !interestFunction().apply(pathPriority, oldPriority);\n         }\n \n         @Override\n-        public boolean stillInteresting( int numberOfVisits )\n+        public boolean stillInteresting(int numberOfVisits)\n         {\n             return true;\n         }\n@@ -95,19 +99,20 @@ public interface PathInterest<P>\n         /**\n          * Use {@link #numberOfWantedPaths()} to decide if an entity should be ruled out or not and if an entity\n          * still is of interest.\n+         *\n          * @param numberOfVisits number of times a traversal branch ending on the same node has been traversed from.\n-         * @param pathPriority priority of traversal branch currently considered.\n-         * @param oldPriority priority of other traversal branch.\n+         * @param pathPriority   priority of traversal branch currently considered.\n+         * @param oldPriority    priority of other traversal branch.\n          * @return numberOfVisits > {@link #numberOfWantedPaths()}\n          */\n         @Override\n-        public boolean canBeRuledOut( int numberOfVisits, P pathPriority, P oldPriority )\n+        public boolean canBeRuledOut(int numberOfVisits, P pathPriority, P oldPriority)\n         {\n             return numberOfVisits > numberOfWantedPaths();\n         }\n \n         @Override\n-        public boolean stillInteresting( int numberOfVisits )\n+        public boolean stillInteresting(int numberOfVisits)\n         {\n             return numberOfVisits <= numberOfWantedPaths();\n         }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}