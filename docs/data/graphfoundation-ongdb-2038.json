{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2038",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2038/IndexSamplingControllerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2038/IndexSamplingControllerFactory.java\nindex 9f090f18ffe..c518468a48e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2038/IndexSamplingControllerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2038/IndexSamplingControllerFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index.sampling;\n \n import java.util.function.Predicate;\n@@ -34,74 +35,74 @@ import static org.neo4j.register.Registers.newDoubleLongRegister;\n \n public class IndexSamplingControllerFactory\n {\n-    private final IndexSamplingConfig config;\n-    private final IndexStoreView storeView;\n-    private final JobScheduler scheduler;\n-    private final TokenNameLookup tokenNameLookup;\n-    private final LogProvider logProvider;\n+  private final IndexSamplingConfig config;\n+  private final IndexStoreView storeView;\n+  private final JobScheduler scheduler;\n+  private final TokenNameLookup tokenNameLookup;\n+  private final LogProvider logProvider;\n \n-    public IndexSamplingControllerFactory( IndexSamplingConfig config, IndexStoreView storeView,\n-                                           JobScheduler scheduler, TokenNameLookup tokenNameLookup,\n-                                           LogProvider logProvider )\n-    {\n-        this.config = config;\n-        this.storeView = storeView;\n-        this.scheduler = scheduler;\n-        this.tokenNameLookup = tokenNameLookup;\n-        this.logProvider = logProvider;\n-    }\n+  public IndexSamplingControllerFactory(IndexSamplingConfig config, IndexStoreView storeView,\n+                                        JobScheduler scheduler, TokenNameLookup tokenNameLookup,\n+                                        LogProvider logProvider)\n+  {\n+    this.config = config;\n+    this.storeView = storeView;\n+    this.scheduler = scheduler;\n+    this.tokenNameLookup = tokenNameLookup;\n+    this.logProvider = logProvider;\n+  }\n \n-    public IndexSamplingController create( IndexMapSnapshotProvider snapshotProvider )\n-    {\n-        OnlineIndexSamplingJobFactory jobFactory =\n-                new OnlineIndexSamplingJobFactory( storeView, tokenNameLookup, logProvider );\n-        Predicate<Long> samplingUpdatePredicate = createSamplingPredicate();\n-        IndexSamplingJobQueue<Long> jobQueue = new IndexSamplingJobQueue<>( samplingUpdatePredicate );\n-        IndexSamplingJobTracker jobTracker = new IndexSamplingJobTracker( config, scheduler );\n-        IndexSamplingController.RecoveryCondition\n-                indexRecoveryCondition = createIndexRecoveryCondition( logProvider, tokenNameLookup );\n-        return new IndexSamplingController(\n-                config, jobFactory, jobQueue, jobTracker, snapshotProvider, scheduler, indexRecoveryCondition\n-        );\n-    }\n+  public IndexSamplingController create(IndexMapSnapshotProvider snapshotProvider)\n+  {\n+    OnlineIndexSamplingJobFactory jobFactory =\n+        new OnlineIndexSamplingJobFactory(storeView, tokenNameLookup, logProvider);\n+    Predicate<Long> samplingUpdatePredicate = createSamplingPredicate();\n+    IndexSamplingJobQueue<Long> jobQueue = new IndexSamplingJobQueue<>(samplingUpdatePredicate);\n+    IndexSamplingJobTracker jobTracker = new IndexSamplingJobTracker(config, scheduler);\n+    IndexSamplingController.RecoveryCondition\n+        indexRecoveryCondition = createIndexRecoveryCondition(logProvider, tokenNameLookup);\n+    return new IndexSamplingController(\n+        config, jobFactory, jobQueue, jobTracker, snapshotProvider, scheduler, indexRecoveryCondition\n+    );\n+  }\n \n-    private Predicate<Long> createSamplingPredicate()\n+  private Predicate<Long> createSamplingPredicate()\n+  {\n+    return new Predicate<Long>()\n     {\n-        return new Predicate<Long>()\n-        {\n-            private final DoubleLongRegister output = newDoubleLongRegister();\n+      private final DoubleLongRegister output = newDoubleLongRegister();\n \n-            @Override\n-            public boolean test( Long indexId )\n-            {\n-                storeView.indexUpdatesAndSize( indexId, output );\n-                long updates = output.readFirst();\n-                long size = output.readSecond();\n-                long threshold = Math.round( config.updateRatio() * size );\n-                return updates > threshold;\n-            }\n-        };\n-    }\n+      @Override\n+      public boolean test(Long indexId)\n+      {\n+        storeView.indexUpdatesAndSize(indexId, output);\n+        long updates = output.readFirst();\n+        long size = output.readSecond();\n+        long threshold = Math.round(config.updateRatio() * size);\n+        return updates > threshold;\n+      }\n+    };\n+  }\n \n-    private IndexSamplingController.RecoveryCondition createIndexRecoveryCondition( final LogProvider logProvider,\n-                                                                     final TokenNameLookup tokenNameLookup )\n+  private IndexSamplingController.RecoveryCondition createIndexRecoveryCondition(final LogProvider logProvider,\n+                                                                                 final TokenNameLookup tokenNameLookup)\n+  {\n+    return new IndexSamplingController.RecoveryCondition()\n     {\n-        return new IndexSamplingController.RecoveryCondition()\n-        {\n-            private final Log log = logProvider.getLog( IndexSamplingController.class );\n-            private final DoubleLongRegister register = newDoubleLongRegister();\n+      private final Log log = logProvider.getLog(IndexSamplingController.class);\n+      private final DoubleLongRegister register = newDoubleLongRegister();\n \n-            @Override\n-            public boolean test( long indexId, SchemaIndexDescriptor descriptor )\n-            {\n-                boolean result = storeView.indexSample( indexId, register ).readSecond() == 0;\n-                if ( result )\n-                {\n-                    log.debug( \"Recovering index sampling for index %s\",\n-                            descriptor.schema().userDescription( tokenNameLookup ) );\n-                }\n-                return result;\n-            }\n-        };\n-    }\n+      @Override\n+      public boolean test(long indexId, SchemaIndexDescriptor descriptor)\n+      {\n+        boolean result = storeView.indexSample(indexId, register).readSecond() == 0;\n+        if (result)\n+        {\n+          log.debug(\"Recovering index sampling for index %s\",\n+              descriptor.schema().userDescription(tokenNameLookup));\n+        }\n+        return result;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "31",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2038/IndexSamplingControllerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2038/IndexSamplingControllerFactory.java\nindex 9f090f18ffe..5ac25cf1eba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2038/IndexSamplingControllerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2038/IndexSamplingControllerFactory.java\n@@ -40,10 +40,9 @@ public class IndexSamplingControllerFactory\n     private final TokenNameLookup tokenNameLookup;\n     private final LogProvider logProvider;\n \n-    public IndexSamplingControllerFactory( IndexSamplingConfig config, IndexStoreView storeView,\n-                                           JobScheduler scheduler, TokenNameLookup tokenNameLookup,\n+    public IndexSamplingControllerFactory( IndexSamplingConfig config, IndexStoreView storeView, JobScheduler scheduler, TokenNameLookup tokenNameLookup,\n                                            LogProvider logProvider )\n-    {\n+{\n         this.config = config;\n         this.storeView = storeView;\n         this.scheduler = scheduler;\n@@ -53,16 +52,12 @@ public class IndexSamplingControllerFactory\n \n     public IndexSamplingController create( IndexMapSnapshotProvider snapshotProvider )\n     {\n-        OnlineIndexSamplingJobFactory jobFactory =\n-                new OnlineIndexSamplingJobFactory( storeView, tokenNameLookup, logProvider );\n-        Predicate<Long> samplingUpdatePredicate = createSamplingPredicate();\n+        OnlineIndexSamplingJobFactory jobFactory = new OnlineIndexSamplingJobFactory( storeView, tokenNameLookup, logProvider );\n+Predicate<Long> samplingUpdatePredicate = createSamplingPredicate();\n         IndexSamplingJobQueue<Long> jobQueue = new IndexSamplingJobQueue<>( samplingUpdatePredicate );\n         IndexSamplingJobTracker jobTracker = new IndexSamplingJobTracker( config, scheduler );\n-        IndexSamplingController.RecoveryCondition\n-                indexRecoveryCondition = createIndexRecoveryCondition( logProvider, tokenNameLookup );\n-        return new IndexSamplingController(\n-                config, jobFactory, jobQueue, jobTracker, snapshotProvider, scheduler, indexRecoveryCondition\n-        );\n+        IndexSamplingController.RecoveryCondition indexRecoveryCondition = createIndexRecoveryCondition( logProvider, tokenNameLookup );\n+return new IndexSamplingController( config, jobFactory, jobQueue, jobTracker, snapshotProvider, scheduler, indexRecoveryCondition );\n     }\n \n     private Predicate<Long> createSamplingPredicate()\n@@ -78,14 +73,13 @@ public class IndexSamplingControllerFactory\n                 long updates = output.readFirst();\n                 long size = output.readSecond();\n                 long threshold = Math.round( config.updateRatio() * size );\n-                return updates > threshold;\n+                return updates> threshold;\n             }\n         };\n     }\n \n-    private IndexSamplingController.RecoveryCondition createIndexRecoveryCondition( final LogProvider logProvider,\n-                                                                     final TokenNameLookup tokenNameLookup )\n-    {\n+    private IndexSamplingController.RecoveryCondition createIndexRecoveryCondition( final LogProvider logProvider, final TokenNameLookup tokenNameLookup )\n+{\n         return new IndexSamplingController.RecoveryCondition()\n         {\n             private final Log log = logProvider.getLog( IndexSamplingController.class );\n@@ -100,8 +94,9 @@ public class IndexSamplingControllerFactory\n                     log.debug( \"Recovering index sampling for index %s\",\n                             descriptor.schema().userDescription( tokenNameLookup ) );\n                 }\n-                return result;\n+\n+return result;\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}