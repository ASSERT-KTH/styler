{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2725",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "195",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2725/HumanUnderstandableExecutionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2725/HumanUnderstandableExecutionMonitor.java\nindex dd92758a442..7d9929cc4b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2725/HumanUnderstandableExecutionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2725/HumanUnderstandableExecutionMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.util.TimeZone;\n@@ -58,455 +59,452 @@ import static org.neo4j.unsafe.impl.batchimport.cache.GatheringMemoryStatsVisito\n  */\n public class HumanUnderstandableExecutionMonitor implements ExecutionMonitor\n {\n-    public interface Monitor\n-    {\n-        void progress( ImportStage stage, int percent );\n-    }\n-\n-    public static final Monitor NO_MONITOR = ( stage, percent ) -> {};\n-\n-    public interface ExternalMonitor\n-    {\n-        boolean somethingElseBrokeMyNiceOutput();\n-    }\n-\n-    static final ExternalMonitor NO_EXTERNAL_MONITOR = () -> false;\n-\n-    enum ImportStage\n-    {\n-        nodeImport,\n-        relationshipImport,\n-        linking,\n-        postProcessing\n-    }\n-\n-    private static final String ESTIMATED_REQUIRED_MEMORY_USAGE = \"Estimated required memory usage\";\n-    private static final String ESTIMATED_DISK_SPACE_USAGE = \"Estimated disk space usage\";\n-    private static final String ESTIMATED_NUMBER_OF_RELATIONSHIP_PROPERTIES = \"Estimated number of relationship properties\";\n-    private static final String ESTIMATED_NUMBER_OF_RELATIONSHIPS = \"Estimated number of relationships\";\n-    private static final String ESTIMATED_NUMBER_OF_NODE_PROPERTIES = \"Estimated number of node properties\";\n-    private static final String ESTIMATED_NUMBER_OF_NODES = \"Estimated number of nodes\";\n-    private static final int DOT_GROUP_SIZE = 10;\n-    private static final int DOT_GROUPS_PER_LINE = 5;\n-    private static final int PERCENTAGES_PER_LINE = 5;\n-\n-    private final Monitor monitor;\n-    private final ExternalMonitor externalMonitor;\n-    private DependencyResolver dependencyResolver;\n-    private boolean newInternalStage;\n-    private PageCacheArrayFactoryMonitor pageCacheArrayFactoryMonitor;\n-\n-    // progress of current stage\n-    private long goal;\n-    private long stashedProgress;\n-    private long progress;\n-    private ImportStage currentStage;\n-    private long lastReportTime;\n-\n-    HumanUnderstandableExecutionMonitor( Monitor monitor, ExternalMonitor externalMonitor )\n-    {\n-        this.monitor = monitor;\n-        this.externalMonitor = externalMonitor;\n-    }\n-\n-    @Override\n-    public void initialize( DependencyResolver dependencyResolver )\n-    {\n-        this.dependencyResolver = dependencyResolver;\n-        Estimates estimates = dependencyResolver.resolveDependency( Estimates.class );\n-        BatchingNeoStores neoStores = dependencyResolver.resolveDependency( BatchingNeoStores.class );\n-        IdMapper idMapper = dependencyResolver.resolveDependency( IdMapper.class );\n-        NodeRelationshipCache nodeRelationshipCache = dependencyResolver.resolveDependency( NodeRelationshipCache.class );\n-        pageCacheArrayFactoryMonitor = dependencyResolver.resolveDependency( PageCacheArrayFactoryMonitor.class );\n-\n-        long biggestCacheMemory = estimatedCacheSize( neoStores,\n-                nodeRelationshipCache.memoryEstimation( estimates.numberOfNodes() ),\n-                idMapper.memoryEstimation( estimates.numberOfNodes() ) );\n-        printStageHeader( \"Import starting\",\n-                ESTIMATED_NUMBER_OF_NODES, count( estimates.numberOfNodes() ),\n-                ESTIMATED_NUMBER_OF_NODE_PROPERTIES, count( estimates.numberOfNodeProperties() ),\n-                ESTIMATED_NUMBER_OF_RELATIONSHIPS, count( estimates.numberOfRelationships() ),\n-                ESTIMATED_NUMBER_OF_RELATIONSHIP_PROPERTIES, count( estimates.numberOfRelationshipProperties() ),\n-                ESTIMATED_DISK_SPACE_USAGE, bytes(\n-                        nodesDiskUsage( estimates, neoStores ) +\n-                        relationshipsDiskUsage( estimates, neoStores ) +\n-                        estimates.sizeOfNodeProperties() + estimates.sizeOfRelationshipProperties() ),\n-                ESTIMATED_REQUIRED_MEMORY_USAGE, bytes( biggestCacheMemory ) );\n-        System.out.println();\n-    }\n-\n-    private static long baselineMemoryRequirement( BatchingNeoStores neoStores )\n-    {\n-        return totalMemoryUsageOf( neoStores );\n-    }\n-\n-    private static long nodesDiskUsage( Estimates estimates, BatchingNeoStores neoStores )\n-    {\n-        return  // node store\n-                estimates.numberOfNodes() * neoStores.getNodeStore().getRecordSize() +\n-                // label index (1 byte per label is not a terrible estimate)\n-                estimates.numberOfNodeLabels();\n-    }\n-\n-    private static long relationshipsDiskUsage( Estimates estimates, BatchingNeoStores neoStores )\n-    {\n-        return estimates.numberOfRelationships() * neoStores.getRelationshipStore().getRecordSize() *\n-                (neoStores.usesDoubleRelationshipRecordUnits() ? 2 : 1);\n-    }\n-\n-    @Override\n-    public void start( StageExecution execution )\n-    {\n-        // Divide into 4 progress stages:\n-        if ( execution.getStageName().equals( DataImporter.NODE_IMPORT_NAME ) )\n-        {\n-            // Import nodes:\n-            // - import nodes\n-            // - prepare id mapper\n-            initializeNodeImport(\n-                    dependencyResolver.resolveDependency( Input.Estimates.class ),\n-                    dependencyResolver.resolveDependency( IdMapper.class ),\n-                    dependencyResolver.resolveDependency( BatchingNeoStores.class ) );\n-        }\n-        else if ( execution.getStageName().equals( DataImporter.RELATIONSHIP_IMPORT_NAME ) )\n-        {\n-            endPrevious();\n-\n-            // Import relationships:\n-            // - import relationships\n-            initializeRelationshipImport(\n-                    dependencyResolver.resolveDependency( Input.Estimates.class ),\n-                    dependencyResolver.resolveDependency( IdMapper.class ),\n-                    dependencyResolver.resolveDependency( BatchingNeoStores.class ) );\n-        }\n-        else if ( execution.getStageName().equals( NodeDegreeCountStage.NAME ) )\n-        {\n-            endPrevious();\n-\n-            // Link relationships:\n-            // - read node degrees\n-            // - backward linking\n-            // - node relationship linking\n-            // - forward linking\n-            initializeLinking(\n-                    dependencyResolver.resolveDependency( BatchingNeoStores.class ),\n-                    dependencyResolver.resolveDependency( NodeRelationshipCache.class ),\n-                    dependencyResolver.resolveDependency( DataStatistics.class ) );\n-        }\n-        else if ( execution.getStageName().equals( CountGroupsStage.NAME ) )\n+  public interface Monitor\n+  {\n+    void progress(ImportStage stage, int percent);\n+  }\n+\n+  public static final Monitor NO_MONITOR = (stage, percent) -> {\n+  };\n+\n+  public interface ExternalMonitor\n+  {\n+    boolean somethingElseBrokeMyNiceOutput();\n+  }\n+\n+  static final ExternalMonitor NO_EXTERNAL_MONITOR = () -> false;\n+\n+  enum ImportStage\n+  {\n+    nodeImport,\n+    relationshipImport,\n+    linking,\n+    postProcessing\n+  }\n+\n+  private static final String ESTIMATED_REQUIRED_MEMORY_USAGE = \"Estimated required memory usage\";\n+  private static final String ESTIMATED_DISK_SPACE_USAGE = \"Estimated disk space usage\";\n+  private static final String ESTIMATED_NUMBER_OF_RELATIONSHIP_PROPERTIES = \"Estimated number of relationship properties\";\n+  private static final String ESTIMATED_NUMBER_OF_RELATIONSHIPS = \"Estimated number of relationships\";\n+  private static final String ESTIMATED_NUMBER_OF_NODE_PROPERTIES = \"Estimated number of node properties\";\n+  private static final String ESTIMATED_NUMBER_OF_NODES = \"Estimated number of nodes\";\n+  private static final int DOT_GROUP_SIZE = 10;\n+  private static final int DOT_GROUPS_PER_LINE = 5;\n+  private static final int PERCENTAGES_PER_LINE = 5;\n+\n+  private final Monitor monitor;\n+  private final ExternalMonitor externalMonitor;\n+  private DependencyResolver dependencyResolver;\n+  private boolean newInternalStage;\n+  private PageCacheArrayFactoryMonitor pageCacheArrayFactoryMonitor;\n+\n+  // progress of current stage\n+  private long goal;\n+  private long stashedProgress;\n+  private long progress;\n+  private ImportStage currentStage;\n+  private long lastReportTime;\n+\n+  HumanUnderstandableExecutionMonitor(Monitor monitor, ExternalMonitor externalMonitor)\n+  {\n+    this.monitor = monitor;\n+    this.externalMonitor = externalMonitor;\n+  }\n+\n+  @Override\n+  public void initialize(DependencyResolver dependencyResolver)\n+  {\n+    this.dependencyResolver = dependencyResolver;\n+    Estimates estimates = dependencyResolver.resolveDependency(Estimates.class);\n+    BatchingNeoStores neoStores = dependencyResolver.resolveDependency(BatchingNeoStores.class);\n+    IdMapper idMapper = dependencyResolver.resolveDependency(IdMapper.class);\n+    NodeRelationshipCache nodeRelationshipCache = dependencyResolver.resolveDependency(NodeRelationshipCache.class);\n+    pageCacheArrayFactoryMonitor = dependencyResolver.resolveDependency(PageCacheArrayFactoryMonitor.class);\n+\n+    long biggestCacheMemory = estimatedCacheSize(neoStores,\n+        nodeRelationshipCache.memoryEstimation(estimates.numberOfNodes()),\n+        idMapper.memoryEstimation(estimates.numberOfNodes()));\n+    printStageHeader(\"Import starting\",\n+        ESTIMATED_NUMBER_OF_NODES, count(estimates.numberOfNodes()),\n+        ESTIMATED_NUMBER_OF_NODE_PROPERTIES, count(estimates.numberOfNodeProperties()),\n+        ESTIMATED_NUMBER_OF_RELATIONSHIPS, count(estimates.numberOfRelationships()),\n+        ESTIMATED_NUMBER_OF_RELATIONSHIP_PROPERTIES, count(estimates.numberOfRelationshipProperties()),\n+        ESTIMATED_DISK_SPACE_USAGE, bytes(\n+            nodesDiskUsage(estimates, neoStores) +\n+                relationshipsDiskUsage(estimates, neoStores) +\n+                estimates.sizeOfNodeProperties() + estimates.sizeOfRelationshipProperties()),\n+        ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(biggestCacheMemory));\n+    System.out.println();\n+  }\n+\n+  private static long baselineMemoryRequirement(BatchingNeoStores neoStores)\n+  {\n+    return totalMemoryUsageOf(neoStores);\n+  }\n+\n+  private static long nodesDiskUsage(Estimates estimates, BatchingNeoStores neoStores)\n+  {\n+    return  // node store\n+        estimates.numberOfNodes() * neoStores.getNodeStore().getRecordSize() +\n+            // label index (1 byte per label is not a terrible estimate)\n+            estimates.numberOfNodeLabels();\n+  }\n+\n+  private static long relationshipsDiskUsage(Estimates estimates, BatchingNeoStores neoStores)\n+  {\n+    return estimates.numberOfRelationships() * neoStores.getRelationshipStore().getRecordSize() *\n+        (neoStores.usesDoubleRelationshipRecordUnits() ? 2 : 1);\n+  }\n+\n+  @Override\n+  public void start(StageExecution execution)\n+  {\n+    // Divide into 4 progress stages:\n+    if (execution.getStageName().equals(DataImporter.NODE_IMPORT_NAME))\n+    {\n+      // Import nodes:\n+      // - import nodes\n+      // - prepare id mapper\n+      initializeNodeImport(\n+          dependencyResolver.resolveDependency(Input.Estimates.class),\n+          dependencyResolver.resolveDependency(IdMapper.class),\n+          dependencyResolver.resolveDependency(BatchingNeoStores.class));\n+    } else if (execution.getStageName().equals(DataImporter.RELATIONSHIP_IMPORT_NAME))\n+    {\n+      endPrevious();\n+\n+      // Import relationships:\n+      // - import relationships\n+      initializeRelationshipImport(\n+          dependencyResolver.resolveDependency(Input.Estimates.class),\n+          dependencyResolver.resolveDependency(IdMapper.class),\n+          dependencyResolver.resolveDependency(BatchingNeoStores.class));\n+    } else if (execution.getStageName().equals(NodeDegreeCountStage.NAME))\n+    {\n+      endPrevious();\n+\n+      // Link relationships:\n+      // - read node degrees\n+      // - backward linking\n+      // - node relationship linking\n+      // - forward linking\n+      initializeLinking(\n+          dependencyResolver.resolveDependency(BatchingNeoStores.class),\n+          dependencyResolver.resolveDependency(NodeRelationshipCache.class),\n+          dependencyResolver.resolveDependency(DataStatistics.class));\n+    } else if (execution.getStageName().equals(CountGroupsStage.NAME))\n+    {\n+      endPrevious();\n+\n+      // Misc:\n+      // - relationship group defragmentation\n+      // - counts store\n+      initializeMisc(\n+          dependencyResolver.resolveDependency(BatchingNeoStores.class),\n+          dependencyResolver.resolveDependency(DataStatistics.class));\n+    } else if (includeStage(execution))\n+    {\n+      stashedProgress += progress;\n+      progress = 0;\n+      newInternalStage = true;\n+    }\n+    lastReportTime = currentTimeMillis();\n+  }\n+\n+  private void endPrevious()\n+  {\n+    updateProgress(goal);\n+  }\n+\n+  private void initializeNodeImport(Estimates estimates, IdMapper idMapper, BatchingNeoStores neoStores)\n+  {\n+    long numberOfNodes = estimates.numberOfNodes();\n+    printStageHeader(\"(1/4) Node import\",\n+        ESTIMATED_NUMBER_OF_NODES, count(numberOfNodes),\n+        ESTIMATED_DISK_SPACE_USAGE, bytes(\n+            // node store\n+            nodesDiskUsage(estimates, neoStores) +\n+                // property store(s)\n+                estimates.sizeOfNodeProperties()),\n+        ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(\n+            baselineMemoryRequirement(neoStores) +\n+                defensivelyPadMemoryEstimate(idMapper.memoryEstimation(numberOfNodes))));\n+\n+    // A difficulty with the goal here is that we don't know how much woek there is to be done in id mapper preparation stage.\n+    // In addition to nodes themselves and SPLIT,SORT,DETECT there may be RESOLVE,SORT,DEDUPLICATE too, if there are collisions\n+    long goal = idMapper.needsPreparation()\n+        ? numberOfNodes + weighted(IdMapperPreparationStage.NAME, numberOfNodes * 4)\n+        : numberOfNodes;\n+    initializeProgress(goal, ImportStage.nodeImport);\n+  }\n+\n+  private void initializeRelationshipImport(Estimates estimates, IdMapper idMapper, BatchingNeoStores neoStores)\n+  {\n+    long numberOfRelationships = estimates.numberOfRelationships();\n+    printStageHeader(\"(2/4) Relationship import\",\n+        ESTIMATED_NUMBER_OF_RELATIONSHIPS, count(numberOfRelationships),\n+        ESTIMATED_DISK_SPACE_USAGE, bytes(\n+            relationshipsDiskUsage(estimates, neoStores) +\n+                estimates.sizeOfRelationshipProperties()),\n+        ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(\n+            baselineMemoryRequirement(neoStores) +\n+                totalMemoryUsageOf(idMapper)));\n+    initializeProgress(numberOfRelationships, ImportStage.relationshipImport);\n+  }\n+\n+  private void initializeLinking(BatchingNeoStores neoStores,\n+                                 NodeRelationshipCache nodeRelationshipCache, DataStatistics distribution)\n+  {\n+    printStageHeader(\"(3/4) Relationship linking\",\n+        ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(\n+            baselineMemoryRequirement(neoStores) +\n+                defensivelyPadMemoryEstimate(nodeRelationshipCache.memoryEstimation(distribution.getNodeCount()))));\n+    // The reason the highId of the relationship store is used, as opposed to actual number of imported relationships\n+    // is that the stages underneath operate on id ranges, not knowing which records are actually in use.\n+    long relationshipRecordIdCount = neoStores.getRelationshipStore().getHighId();\n+    // The progress counting of linking stages is special anyway, in that it uses the \"progress\" stats key,\n+    // which is based on actual number of relationships, not relationship ids.\n+    long actualRelationshipCount = distribution.getRelationshipCount();\n+    initializeProgress(\n+        relationshipRecordIdCount +   // node degrees\n+            actualRelationshipCount * 2 + // start/end forwards, see RelationshipLinkingProgress\n+            actualRelationshipCount * 2,  // start/end backwards, see RelationshipLinkingProgress\n+        ImportStage.linking\n+    );\n+  }\n+\n+  private void initializeMisc(BatchingNeoStores neoStores, DataStatistics distribution)\n+  {\n+    printStageHeader(\"(4/4) Post processing\",\n+        ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(baselineMemoryRequirement(neoStores)));\n+    long actualNodeCount = distribution.getNodeCount();\n+    // The reason the highId of the relationship store is used, as opposed to actual number of imported relationships\n+    // is that the stages underneath operate on id ranges, not knowing which records are actually in use.\n+    long relationshipRecordIdCount = neoStores.getRelationshipStore().getHighId();\n+    long groupCount = neoStores.getTemporaryRelationshipGroupStore().getHighId();\n+    initializeProgress(\n+        groupCount +                 // Count groups\n+            groupCount +                 // Write groups\n+            groupCount +                 // Node --> Group\n+            actualNodeCount +            // Node counts\n+            relationshipRecordIdCount,   // Relationship counts\n+        ImportStage.postProcessing\n+    );\n+  }\n+\n+  private void initializeProgress(long goal, ImportStage stage)\n+  {\n+    this.goal = goal;\n+    this.stashedProgress = 0;\n+    this.progress = 0;\n+    this.currentStage = stage;\n+    this.newInternalStage = false;\n+  }\n+\n+  private void updateProgress(long progress)\n+  {\n+    // OK so format goes something like 5 groups of 10 dots per line, which is 5%, i.e. 50 dots for 5%, i.e. 1000 dots for 100%,\n+    // i.e. granularity is 1/1000\n+\n+    int maxDot = dotOf(goal);\n+    int currentProgressDot = dotOf(stashedProgress + this.progress);\n+    int currentLine = currentProgressDot / dotsPerLine();\n+    int currentDotOnLine = currentProgressDot % dotsPerLine();\n+\n+    int progressDot = min(maxDot, dotOf(stashedProgress + progress));\n+    int line = progressDot / dotsPerLine();\n+    int dotOnLine = progressDot % dotsPerLine();\n+\n+    while (currentLine < line || (currentLine == line && currentDotOnLine < dotOnLine))\n+    {\n+      int target = currentLine < line ? dotsPerLine() : dotOnLine;\n+      printDots(currentDotOnLine, target);\n+      currentDotOnLine = target;\n+\n+      if (currentLine < line || currentDotOnLine == dotsPerLine())\n+      {\n+        int percentage = percentage(currentLine);\n+        System.out.println(format(\"%4d%% \u2206%s\", percentage, durationSinceLastReport()));\n+        monitor.progress(currentStage, percentage);\n+        currentLine++;\n+        if (currentLine == lines())\n         {\n-            endPrevious();\n-\n-            // Misc:\n-            // - relationship group defragmentation\n-            // - counts store\n-            initializeMisc(\n-                    dependencyResolver.resolveDependency( BatchingNeoStores.class ),\n-                    dependencyResolver.resolveDependency( DataStatistics.class ) );\n+          System.out.println();\n         }\n-        else if ( includeStage( execution ) )\n-        {\n-            stashedProgress += progress;\n-            progress = 0;\n-            newInternalStage = true;\n-        }\n-        lastReportTime = currentTimeMillis();\n-    }\n-\n-    private void endPrevious()\n-    {\n-        updateProgress( goal );\n-    }\n-\n-    private void initializeNodeImport( Estimates estimates, IdMapper idMapper, BatchingNeoStores neoStores )\n-    {\n-        long numberOfNodes = estimates.numberOfNodes();\n-        printStageHeader( \"(1/4) Node import\",\n-                ESTIMATED_NUMBER_OF_NODES, count( numberOfNodes ),\n-                ESTIMATED_DISK_SPACE_USAGE, bytes(\n-                        // node store\n-                        nodesDiskUsage( estimates, neoStores ) +\n-                        // property store(s)\n-                        estimates.sizeOfNodeProperties() ),\n-                ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(\n-                        baselineMemoryRequirement( neoStores ) +\n-                        defensivelyPadMemoryEstimate( idMapper.memoryEstimation( numberOfNodes ) ) ) );\n-\n-        // A difficulty with the goal here is that we don't know how much woek there is to be done in id mapper preparation stage.\n-        // In addition to nodes themselves and SPLIT,SORT,DETECT there may be RESOLVE,SORT,DEDUPLICATE too, if there are collisions\n-        long goal = idMapper.needsPreparation()\n-                ? numberOfNodes + weighted( IdMapperPreparationStage.NAME, numberOfNodes * 4 )\n-                : numberOfNodes;\n-        initializeProgress( goal, ImportStage.nodeImport );\n-    }\n-\n-    private void initializeRelationshipImport( Estimates estimates, IdMapper idMapper, BatchingNeoStores neoStores )\n-    {\n-        long numberOfRelationships = estimates.numberOfRelationships();\n-        printStageHeader( \"(2/4) Relationship import\",\n-                ESTIMATED_NUMBER_OF_RELATIONSHIPS, count( numberOfRelationships ),\n-                ESTIMATED_DISK_SPACE_USAGE, bytes(\n-                        relationshipsDiskUsage( estimates, neoStores ) +\n-                        estimates.sizeOfRelationshipProperties() ),\n-                ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(\n-                        baselineMemoryRequirement( neoStores ) +\n-                        totalMemoryUsageOf( idMapper ) ) );\n-        initializeProgress( numberOfRelationships, ImportStage.relationshipImport );\n-    }\n-\n-    private void initializeLinking( BatchingNeoStores neoStores,\n-            NodeRelationshipCache nodeRelationshipCache, DataStatistics distribution )\n-    {\n-        printStageHeader( \"(3/4) Relationship linking\",\n-                ESTIMATED_REQUIRED_MEMORY_USAGE, bytes(\n-                        baselineMemoryRequirement( neoStores ) +\n-                        defensivelyPadMemoryEstimate( nodeRelationshipCache.memoryEstimation( distribution.getNodeCount() ) ) ) );\n-        // The reason the highId of the relationship store is used, as opposed to actual number of imported relationships\n-        // is that the stages underneath operate on id ranges, not knowing which records are actually in use.\n-        long relationshipRecordIdCount = neoStores.getRelationshipStore().getHighId();\n-        // The progress counting of linking stages is special anyway, in that it uses the \"progress\" stats key,\n-        // which is based on actual number of relationships, not relationship ids.\n-        long actualRelationshipCount = distribution.getRelationshipCount();\n-        initializeProgress(\n-                relationshipRecordIdCount +   // node degrees\n-                actualRelationshipCount * 2 + // start/end forwards, see RelationshipLinkingProgress\n-                actualRelationshipCount * 2,  // start/end backwards, see RelationshipLinkingProgress\n-                ImportStage.linking\n-                );\n-    }\n-\n-    private void initializeMisc( BatchingNeoStores neoStores, DataStatistics distribution )\n-    {\n-        printStageHeader( \"(4/4) Post processing\",\n-                ESTIMATED_REQUIRED_MEMORY_USAGE, bytes( baselineMemoryRequirement( neoStores ) ) );\n-        long actualNodeCount = distribution.getNodeCount();\n-        // The reason the highId of the relationship store is used, as opposed to actual number of imported relationships\n-        // is that the stages underneath operate on id ranges, not knowing which records are actually in use.\n-        long relationshipRecordIdCount = neoStores.getRelationshipStore().getHighId();\n-        long groupCount = neoStores.getTemporaryRelationshipGroupStore().getHighId();\n-        initializeProgress(\n-                groupCount +                 // Count groups\n-                groupCount +                 // Write groups\n-                groupCount +                 // Node --> Group\n-                actualNodeCount +            // Node counts\n-                relationshipRecordIdCount,   // Relationship counts\n-                ImportStage.postProcessing\n-                );\n-    }\n-\n-    private void initializeProgress( long goal, ImportStage stage )\n-    {\n-        this.goal = goal;\n-        this.stashedProgress = 0;\n-        this.progress = 0;\n-        this.currentStage = stage;\n-        this.newInternalStage = false;\n-    }\n-\n-    private void updateProgress( long progress )\n-    {\n-        // OK so format goes something like 5 groups of 10 dots per line, which is 5%, i.e. 50 dots for 5%, i.e. 1000 dots for 100%,\n-        // i.e. granularity is 1/1000\n-\n-        int maxDot = dotOf( goal );\n-        int currentProgressDot = dotOf( stashedProgress + this.progress );\n-        int currentLine = currentProgressDot / dotsPerLine();\n-        int currentDotOnLine = currentProgressDot % dotsPerLine();\n-\n-        int progressDot = min( maxDot, dotOf( stashedProgress + progress ) );\n-        int line = progressDot / dotsPerLine();\n-        int dotOnLine = progressDot % dotsPerLine();\n-\n-        while ( currentLine < line || (currentLine == line && currentDotOnLine < dotOnLine) )\n-        {\n-            int target = currentLine < line ? dotsPerLine() : dotOnLine;\n-            printDots( currentDotOnLine, target );\n-            currentDotOnLine = target;\n-\n-            if ( currentLine < line || currentDotOnLine == dotsPerLine() )\n-            {\n-                int percentage = percentage( currentLine );\n-                System.out.println( format( \"%4d%% \u2206%s\", percentage, durationSinceLastReport() ) );\n-                monitor.progress( currentStage, percentage );\n-                currentLine++;\n-                if ( currentLine == lines() )\n-                {\n-                    System.out.println();\n-                }\n-                currentDotOnLine = 0;\n-            }\n-        }\n-\n-        this.progress = max( this.progress, progress );\n-    }\n-\n-    private String durationSinceLastReport()\n-    {\n-        long diff = currentTimeMillis() - lastReportTime;\n-        lastReportTime = currentTimeMillis();\n-        return duration( diff );\n-    }\n-\n-    private static int percentage( int line )\n-    {\n-        return (line + 1) * PERCENTAGES_PER_LINE;\n-    }\n-\n-    private void printDots( int from, int target )\n-    {\n-        int current = from;\n-        while ( current < target )\n-        {\n-            if ( current > 0 && current % DOT_GROUP_SIZE == 0 )\n-            {\n-                System.out.print( ' ' );\n-            }\n-            char dotChar = '.';\n-            if ( newInternalStage )\n-            {\n-                newInternalStage = false;\n-                dotChar = '-';\n-            }\n-            System.out.print( dotChar );\n-            current++;\n-\n-            printPageCacheAllocationWarningIfUsed();\n-        }\n-    }\n-\n-    private void printPageCacheAllocationWarningIfUsed()\n-    {\n-        String allocation = pageCacheArrayFactoryMonitor.pageCacheAllocationOrNull();\n-        if ( allocation != null )\n-        {\n-            System.err.println();\n-            System.err.println( \"WARNING:\" );\n-            System.err.println( allocation );\n-        }\n-    }\n-\n-    private int dotOf( long progress )\n-    {\n-        // calculated here just to reduce amount of state kept in this instance\n-        int dots = dotsPerLine() * lines();\n-        double dotSize = goal / (double) dots;\n-\n-        return (int) (progress / dotSize);\n-    }\n-\n-    private static int lines()\n-    {\n-        return 100 / PERCENTAGES_PER_LINE;\n-    }\n-\n-    private static int dotsPerLine()\n-    {\n-        return DOT_GROUPS_PER_LINE * DOT_GROUP_SIZE;\n-    }\n-\n-    private void printStageHeader( String name, Object... data )\n-    {\n-        System.out.println( name + \" \" + date( TimeZone.getDefault() ) );\n-        if ( data.length > 0 )\n-        {\n-            for ( int i = 0; i < data.length; )\n-            {\n-                System.out.println( \"  \" + data[i++] + \": \" + data[i++] );\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void end( StageExecution execution, long totalTimeMillis )\n-    {\n-    }\n-\n-    @Override\n-    public void done( boolean successful, long totalTimeMillis, String additionalInformation )\n-    {\n-        endPrevious();\n-\n-        System.out.println();\n-        System.out.println( format( \"IMPORT %s in %s. %s\", successful ? \"DONE\" : \"FAILED\", duration( totalTimeMillis ), additionalInformation ) );\n-    }\n-\n-    @Override\n-    public long nextCheckTime()\n-    {\n-        return currentTimeMillis() + 200;\n-    }\n-\n-    @Override\n-    public void check( StageExecution execution )\n-    {\n-        reprintProgressIfNecessary();\n-        if ( includeStage( execution ) )\n-        {\n-            updateProgress( progressOf( execution ) );\n-        }\n-    }\n-\n-    private void reprintProgressIfNecessary()\n-    {\n-        if ( externalMonitor.somethingElseBrokeMyNiceOutput() )\n-        {\n-            long prevProgress = this.progress;\n-            long prevStashedProgress = this.stashedProgress;\n-            this.progress = 0;\n-            this.stashedProgress = 0;\n-            updateProgress( prevProgress + prevStashedProgress );\n-            this.progress = prevProgress;\n-            this.stashedProgress = prevStashedProgress;\n-        }\n-    }\n-\n-    private static boolean includeStage( StageExecution execution )\n-    {\n-        String name = execution.getStageName();\n-        return !name.equals( RelationshipGroupStage.NAME ) &&\n-               !name.equals( SparseNodeFirstRelationshipStage.NAME ) &&\n-               !name.equals( ScanAndCacheGroupsStage.NAME );\n-    }\n-\n-    private static double weightOf( String stageName )\n-    {\n-        if ( stageName.equals( IdMapperPreparationStage.NAME ) )\n-        {\n-            return 0.5D;\n-        }\n-        return 1;\n-    }\n-\n-    private static long weighted( String stageName, long progress )\n-    {\n-        return (long) (progress * weightOf( stageName ));\n-    }\n-\n-    private static long progressOf( StageExecution execution )\n-    {\n-        // First see if there's a \"progress\" stat\n-        Stat progressStat = findProgressStat( execution.steps() );\n-        if ( progressStat != null )\n-        {\n-            return weighted( execution.getStageName(), progressStat.asLong() );\n-        }\n-\n-        // No, then do the generic progress calculation by looking at \"done_batches\"\n-        long doneBatches = last( execution.steps() ).stats().stat( Keys.done_batches ).asLong();\n-        int batchSize = execution.getConfig().batchSize();\n-        return weighted( execution.getStageName(), doneBatches * batchSize );\n-    }\n-\n-    private static Stat findProgressStat( Iterable<Step<?>> steps )\n-    {\n-        for ( Step<?> step : steps )\n-        {\n-            Stat stat = step.stats().stat( Keys.progress );\n-            if ( stat != null )\n-            {\n-                return stat;\n-            }\n-        }\n-        return null;\n-    }\n+        currentDotOnLine = 0;\n+      }\n+    }\n+\n+    this.progress = max(this.progress, progress);\n+  }\n+\n+  private String durationSinceLastReport()\n+  {\n+    long diff = currentTimeMillis() - lastReportTime;\n+    lastReportTime = currentTimeMillis();\n+    return duration(diff);\n+  }\n+\n+  private static int percentage(int line)\n+  {\n+    return (line + 1) * PERCENTAGES_PER_LINE;\n+  }\n+\n+  private void printDots(int from, int target)\n+  {\n+    int current = from;\n+    while (current < target)\n+    {\n+      if (current > 0 && current % DOT_GROUP_SIZE == 0)\n+      {\n+        System.out.print(' ');\n+      }\n+      char dotChar = '.';\n+      if (newInternalStage)\n+      {\n+        newInternalStage = false;\n+        dotChar = '-';\n+      }\n+      System.out.print(dotChar);\n+      current++;\n+\n+      printPageCacheAllocationWarningIfUsed();\n+    }\n+  }\n+\n+  private void printPageCacheAllocationWarningIfUsed()\n+  {\n+    String allocation = pageCacheArrayFactoryMonitor.pageCacheAllocationOrNull();\n+    if (allocation != null)\n+    {\n+      System.err.println();\n+      System.err.println(\"WARNING:\");\n+      System.err.println(allocation);\n+    }\n+  }\n+\n+  private int dotOf(long progress)\n+  {\n+    // calculated here just to reduce amount of state kept in this instance\n+    int dots = dotsPerLine() * lines();\n+    double dotSize = goal / (double) dots;\n+\n+    return (int) (progress / dotSize);\n+  }\n+\n+  private static int lines()\n+  {\n+    return 100 / PERCENTAGES_PER_LINE;\n+  }\n+\n+  private static int dotsPerLine()\n+  {\n+    return DOT_GROUPS_PER_LINE * DOT_GROUP_SIZE;\n+  }\n+\n+  private void printStageHeader(String name, Object... data)\n+  {\n+    System.out.println(name + \" \" + date(TimeZone.getDefault()));\n+    if (data.length > 0)\n+    {\n+      for (int i = 0; i < data.length; )\n+      {\n+        System.out.println(\"  \" + data[i++] + \": \" + data[i++]);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void end(StageExecution execution, long totalTimeMillis)\n+  {\n+  }\n+\n+  @Override\n+  public void done(boolean successful, long totalTimeMillis, String additionalInformation)\n+  {\n+    endPrevious();\n+\n+    System.out.println();\n+    System.out.println(format(\"IMPORT %s in %s. %s\", successful ? \"DONE\" : \"FAILED\", duration(totalTimeMillis), additionalInformation));\n+  }\n+\n+  @Override\n+  public long nextCheckTime()\n+  {\n+    return currentTimeMillis() + 200;\n+  }\n+\n+  @Override\n+  public void check(StageExecution execution)\n+  {\n+    reprintProgressIfNecessary();\n+    if (includeStage(execution))\n+    {\n+      updateProgress(progressOf(execution));\n+    }\n+  }\n+\n+  private void reprintProgressIfNecessary()\n+  {\n+    if (externalMonitor.somethingElseBrokeMyNiceOutput())\n+    {\n+      long prevProgress = this.progress;\n+      long prevStashedProgress = this.stashedProgress;\n+      this.progress = 0;\n+      this.stashedProgress = 0;\n+      updateProgress(prevProgress + prevStashedProgress);\n+      this.progress = prevProgress;\n+      this.stashedProgress = prevStashedProgress;\n+    }\n+  }\n+\n+  private static boolean includeStage(StageExecution execution)\n+  {\n+    String name = execution.getStageName();\n+    return !name.equals(RelationshipGroupStage.NAME) &&\n+        !name.equals(SparseNodeFirstRelationshipStage.NAME) &&\n+        !name.equals(ScanAndCacheGroupsStage.NAME);\n+  }\n+\n+  private static double weightOf(String stageName)\n+  {\n+    if (stageName.equals(IdMapperPreparationStage.NAME))\n+    {\n+      return 0.5D;\n+    }\n+    return 1;\n+  }\n+\n+  private static long weighted(String stageName, long progress)\n+  {\n+    return (long) (progress * weightOf(stageName));\n+  }\n+\n+  private static long progressOf(StageExecution execution)\n+  {\n+    // First see if there's a \"progress\" stat\n+    Stat progressStat = findProgressStat(execution.steps());\n+    if (progressStat != null)\n+    {\n+      return weighted(execution.getStageName(), progressStat.asLong());\n+    }\n+\n+    // No, then do the generic progress calculation by looking at \"done_batches\"\n+    long doneBatches = last(execution.steps()).stats().stat(Keys.done_batches).asLong();\n+    int batchSize = execution.getConfig().batchSize();\n+    return weighted(execution.getStageName(), doneBatches * batchSize);\n+  }\n+\n+  private static Stat findProgressStat(Iterable<Step<?>> steps)\n+  {\n+    for (Step<?> step : steps)\n+    {\n+      Stat stat = step.stats().stat(Keys.progress);\n+      if (stat != null)\n+      {\n+        return stat;\n+      }\n+    }\n+    return null;\n+  }\n }\n",
            "diff_size": 583
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}