{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3490",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "201",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3490/Readables.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3490/Readables.java\nindex c1506861aaf..ae46a316905 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3490/Readables.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3490/Readables.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.File;\n@@ -42,7 +43,7 @@ import org.neo4j.function.ThrowingFunction;\n \n /**\n  * Means of instantiating common {@link CharReadable} instances.\n- *\n+ * <p>\n  * There are support for compressed files as well for those methods accepting a {@link File} argument.\n  * <ol>\n  * <li>ZIP: is both an archive and a compression format. In many cases the order of files\n@@ -54,297 +55,298 @@ import org.neo4j.function.ThrowingFunction;\n  */\n public class Readables\n {\n-    private Readables()\n-    {\n-        throw new AssertionError( \"No instances allowed\" );\n-    }\n+  private Readables()\n+  {\n+    throw new AssertionError(\"No instances allowed\");\n+  }\n \n-    public static final CharReadable EMPTY = new CharReadable.Adapter()\n+  public static final CharReadable EMPTY = new CharReadable.Adapter()\n+  {\n+    @Override\n+    public SectionedCharBuffer read(SectionedCharBuffer buffer, int from)\n     {\n-        @Override\n-        public SectionedCharBuffer read( SectionedCharBuffer buffer, int from )\n-        {\n-            return buffer;\n-        }\n-\n-        @Override\n-        public void close()\n-        {   // Nothing to close\n-        }\n-\n-        @Override\n-        public String sourceDescription()\n-        {\n-            return \"EMPTY\";\n-        }\n-\n-        @Override\n-        public int read( char[] into, int offset, int length )\n-        {\n-            return -1;\n-        }\n+      return buffer;\n+    }\n \n-        @Override\n-        public long length()\n-        {\n-            return 0;\n-        }\n-    };\n+    @Override\n+    public void close()\n+    {   // Nothing to close\n+    }\n \n-    public static CharReadable wrap( final InputStream stream, final String sourceName, Charset charset )\n-            throws IOException\n+    @Override\n+    public String sourceDescription()\n     {\n-        return wrap( stream, sourceName, charset, 0 );\n+      return \"EMPTY\";\n     }\n \n-    /**\n-     * Wraps a {@link InputStream} in a {@link CharReadable}.\n-     *\n-     * @param stream {@link Reader} to wrap.\n-     * @param sourceName name or description of the source of the stream.\n-     * @param charset {@link Charset} to use for reading.\n-     * @param length total number of bytes provided by the reader.\n-     * @return a {@link CharReadable} for the {@link Reader}.\n-     * @throws IOException on I/O error.\n-     */\n-    public static CharReadable wrap( final InputStream stream, final String sourceName, Charset charset, long length )\n-            throws IOException\n+    @Override\n+    public int read(char[] into, int offset, int length)\n     {\n-        byte[] bytes = new byte[Magic.longest()];\n-        PushbackInputStream pushbackStream = new PushbackInputStream( stream, bytes.length );\n-        Charset usedCharset = charset;\n-        int read = stream.read( bytes );\n-        if ( read >= 0 )\n-        {\n-            bytes = read < bytes.length ? Arrays.copyOf( bytes, read ) : bytes;\n-            Magic magic = Magic.of( bytes );\n-            int excessiveBytes = read;\n-            if ( magic.impliesEncoding() )\n-            {\n-                // Unread the diff between the BOM and the longest magic we gathered bytes for\n-                excessiveBytes -= magic.length();\n-                usedCharset = magic.encoding();\n-            }\n-            pushbackStream.unread( bytes, read - excessiveBytes, excessiveBytes );\n-        }\n-        return wrap( new InputStreamReader( pushbackStream, usedCharset )\n-        {\n-            @Override\n-            public String toString()\n-            {\n-                return sourceName;\n-            }\n-        }, length );\n+      return -1;\n     }\n \n-    public static CharReadable wrap( String data )\n+    @Override\n+    public long length()\n     {\n-        return wrap( new StringReader( data ), data.length() );\n+      return 0;\n     }\n+  };\n+\n+  public static CharReadable wrap(final InputStream stream, final String sourceName, Charset charset)\n+      throws IOException\n+  {\n+    return wrap(stream, sourceName, charset, 0);\n+  }\n \n-    /**\n-     * Wraps a {@link Reader} in a {@link CharReadable}.\n-     * Remember that the {@link Reader#toString()} must provide a description of the data source.\n-     *\n-     * @param reader {@link Reader} to wrap.\n-     * @param length total number of bytes provided by the reader.\n-     * @return a {@link CharReadable} for the {@link Reader}.\n-     */\n-    public static CharReadable wrap( final Reader reader, long length )\n+  /**\n+   * Wraps a {@link InputStream} in a {@link CharReadable}.\n+   *\n+   * @param stream     {@link Reader} to wrap.\n+   * @param sourceName name or description of the source of the stream.\n+   * @param charset    {@link Charset} to use for reading.\n+   * @param length     total number of bytes provided by the reader.\n+   * @return a {@link CharReadable} for the {@link Reader}.\n+   * @throws IOException on I/O error.\n+   */\n+  public static CharReadable wrap(final InputStream stream, final String sourceName, Charset charset, long length)\n+      throws IOException\n+  {\n+    byte[] bytes = new byte[Magic.longest()];\n+    PushbackInputStream pushbackStream = new PushbackInputStream(stream, bytes.length);\n+    Charset usedCharset = charset;\n+    int read = stream.read(bytes);\n+    if (read >= 0)\n     {\n-        return new WrappedCharReadable( length, reader );\n+      bytes = read < bytes.length ? Arrays.copyOf(bytes, read) : bytes;\n+      Magic magic = Magic.of(bytes);\n+      int excessiveBytes = read;\n+      if (magic.impliesEncoding())\n+      {\n+        // Unread the diff between the BOM and the longest magic we gathered bytes for\n+        excessiveBytes -= magic.length();\n+        usedCharset = magic.encoding();\n+      }\n+      pushbackStream.unread(bytes, read - excessiveBytes, excessiveBytes);\n     }\n+    return wrap(new InputStreamReader(pushbackStream, usedCharset)\n+    {\n+      @Override\n+      public String toString()\n+      {\n+        return sourceName;\n+      }\n+    }, length);\n+  }\n+\n+  public static CharReadable wrap(String data)\n+  {\n+    return wrap(new StringReader(data), data.length());\n+  }\n+\n+  /**\n+   * Wraps a {@link Reader} in a {@link CharReadable}.\n+   * Remember that the {@link Reader#toString()} must provide a description of the data source.\n+   *\n+   * @param reader {@link Reader} to wrap.\n+   * @param length total number of bytes provided by the reader.\n+   * @return a {@link CharReadable} for the {@link Reader}.\n+   */\n+  public static CharReadable wrap(final Reader reader, long length)\n+  {\n+    return new WrappedCharReadable(length, reader);\n+  }\n \n-    private static class FromFile implements IOFunction<File,CharReadable>\n+  private static class FromFile implements IOFunction<File, CharReadable>\n+  {\n+    private final Charset charset;\n+\n+    FromFile(Charset charset)\n     {\n-        private final Charset charset;\n+      this.charset = charset;\n+    }\n \n-        FromFile( Charset charset )\n+    @Override\n+    public CharReadable apply(final File file) throws IOException\n+    {\n+      Magic magic = Magic.of(file);\n+      if (magic == Magic.ZIP)\n+      {   // ZIP file\n+        ZipFile zipFile = new ZipFile(file);\n+        ZipEntry entry = getSingleSuitableEntry(zipFile);\n+        return wrap(new InputStreamReader(zipFile.getInputStream(entry), charset)\n+        {\n+          @Override\n+          public String toString()\n+          {\n+            return file.getPath();\n+          }\n+        }, file.length());\n+      } else if (magic == Magic.GZIP)\n+      {   // GZIP file. GZIP isn't an archive like ZIP, so this is purely data that is compressed.\n+        // Although a very common way of compressing with GZIP is to use TAR which can combine many\n+        // files into one blob, which is then compressed. If that's the case then\n+        // the data will look like garbage and the reader will fail for whatever it will be used for.\n+        // TODO add tar support\n+        GZIPInputStream zipStream = new GZIPInputStream(new FileInputStream(file));\n+        return wrap(new InputStreamReader(zipStream, charset)\n         {\n-            this.charset = charset;\n+          @Override\n+          public String toString()\n+          {\n+            return file.getPath();\n+          }\n+        }, file.length());\n+      } else\n+      {\n+        InputStream in = new FileInputStream(file);\n+        Charset usedCharset = this.charset;\n+        if (magic.impliesEncoding())\n+        {\n+          // Read (and skip) the magic (BOM in this case) from the file we're returning out\n+          in.skip(magic.length());\n+          usedCharset = magic.encoding();\n         }\n+        return wrap(new InputStreamReader(in, usedCharset)\n+        {\n+          @Override\n+          public String toString()\n+          {\n+            return file.getPath();\n+          }\n+        }, file.length());\n+      }\n+    }\n \n-        @Override\n-        public CharReadable apply( final File file ) throws IOException\n+    private ZipEntry getSingleSuitableEntry(ZipFile zipFile) throws IOException\n+    {\n+      List<String> unsuitableEntries = new ArrayList<>();\n+      Enumeration<? extends ZipEntry> enumeration = zipFile.entries();\n+      ZipEntry found = null;\n+      while (enumeration.hasMoreElements())\n+      {\n+        ZipEntry entry = enumeration.nextElement();\n+        if (entry.isDirectory() || invalidZipEntry(entry.getName()))\n         {\n-            Magic magic = Magic.of( file );\n-            if ( magic == Magic.ZIP )\n-            {   // ZIP file\n-                ZipFile zipFile = new ZipFile( file );\n-                ZipEntry entry = getSingleSuitableEntry( zipFile );\n-                return wrap( new InputStreamReader( zipFile.getInputStream( entry ), charset )\n-                {\n-                    @Override\n-                    public String toString()\n-                    {\n-                        return file.getPath();\n-                    }\n-                }, file.length() );\n-            }\n-            else if ( magic == Magic.GZIP )\n-            {   // GZIP file. GZIP isn't an archive like ZIP, so this is purely data that is compressed.\n-                // Although a very common way of compressing with GZIP is to use TAR which can combine many\n-                // files into one blob, which is then compressed. If that's the case then\n-                // the data will look like garbage and the reader will fail for whatever it will be used for.\n-                // TODO add tar support\n-                GZIPInputStream zipStream = new GZIPInputStream( new FileInputStream( file ) );\n-                return wrap( new InputStreamReader( zipStream, charset )\n-                {\n-                    @Override\n-                    public String toString()\n-                    {\n-                        return file.getPath();\n-                    }\n-                }, file.length() );\n-            }\n-            else\n-            {\n-                InputStream in = new FileInputStream( file );\n-                Charset usedCharset = this.charset;\n-                if ( magic.impliesEncoding() )\n-                {\n-                    // Read (and skip) the magic (BOM in this case) from the file we're returning out\n-                    in.skip( magic.length() );\n-                    usedCharset = magic.encoding();\n-                }\n-                return wrap( new InputStreamReader( in, usedCharset )\n-                {\n-                    @Override\n-                    public String toString()\n-                    {\n-                        return file.getPath();\n-                    }\n-                }, file.length() );\n-            }\n+          unsuitableEntries.add(entry.getName());\n+          continue;\n         }\n \n-        private ZipEntry getSingleSuitableEntry( ZipFile zipFile ) throws IOException\n+        if (found != null)\n         {\n-            List<String> unsuitableEntries = new ArrayList<>();\n-            Enumeration<? extends ZipEntry> enumeration = zipFile.entries();\n-            ZipEntry found = null;\n-            while ( enumeration.hasMoreElements() )\n-            {\n-                ZipEntry entry = enumeration.nextElement();\n-                if ( entry.isDirectory() || invalidZipEntry( entry.getName() ) )\n-                {\n-                    unsuitableEntries.add( entry.getName() );\n-                    continue;\n-                }\n-\n-                if ( found != null )\n-                {\n-                    throw new IOException( \"Multiple suitable files found in zip file \" + zipFile.getName() +\n-                            \", at least \" + found.getName() + \" and \" + entry.getName() +\n-                            \". Only a single file per zip file is supported\" );\n-                }\n-                found = entry;\n-            }\n-\n-            if ( found == null )\n-            {\n-                throw new IOException( \"No suitable file found in zip file \" + zipFile.getName() + \".\" +\n-                        (!unsuitableEntries.isEmpty() ?\n-                                \" Although found these unsuitable entries \" + unsuitableEntries : \"\" ) );\n-            }\n-            return found;\n+          throw new IOException(\"Multiple suitable files found in zip file \" + zipFile.getName() +\n+              \", at least \" + found.getName() + \" and \" + entry.getName() +\n+              \". Only a single file per zip file is supported\");\n         }\n-    }\n+        found = entry;\n+      }\n \n-    private static boolean invalidZipEntry( String name )\n-    {\n-        return name.contains( \"__MACOSX\" ) ||\n-               name.startsWith( \".\" ) ||\n-               name.contains( \"/.\" );\n+      if (found == null)\n+      {\n+        throw new IOException(\"No suitable file found in zip file \" + zipFile.getName() + \".\" +\n+            (!unsuitableEntries.isEmpty() ?\n+                \" Although found these unsuitable entries \" + unsuitableEntries : \"\"));\n+      }\n+      return found;\n     }\n+  }\n+\n+  private static boolean invalidZipEntry(String name)\n+  {\n+    return name.contains(\"__MACOSX\") ||\n+        name.startsWith(\".\") ||\n+        name.contains(\"/.\");\n+  }\n \n-    public static RawIterator<CharReadable,IOException> individualFiles( Charset charset, File... files )\n+  public static RawIterator<CharReadable, IOException> individualFiles(Charset charset, File... files)\n+  {\n+    return iterator(new FromFile(charset), files);\n+  }\n+\n+  public static CharReadable files(Charset charset, File... files) throws IOException\n+  {\n+    IOFunction<File, CharReadable> opener = new FromFile(charset);\n+    switch (files.length)\n     {\n-        return iterator( new FromFile( charset ), files );\n+      case 0:\n+        return EMPTY;\n+      case 1:\n+        return opener.apply(files[0]);\n+      default:\n+        return new MultiReadable(iterator(opener, files));\n     }\n+  }\n \n-    public static CharReadable files( Charset charset, File... files ) throws IOException\n+  @SafeVarargs\n+  public static <IN, OUT> RawIterator<OUT, IOException> iterator(ThrowingFunction<IN, OUT, IOException> converter, IN... items)\n+  {\n+    if (items.length == 0)\n     {\n-        IOFunction<File,CharReadable> opener = new FromFile( charset );\n-        switch ( files.length )\n-        {\n-        case 0:  return EMPTY;\n-        case 1:  return opener.apply( files[0] );\n-        default: return new MultiReadable( iterator( opener, files ) );\n-        }\n+      throw new IllegalStateException(\"No source items specified\");\n     }\n \n-    @SafeVarargs\n-    public static <IN,OUT> RawIterator<OUT,IOException> iterator( ThrowingFunction<IN,OUT,IOException> converter, IN... items )\n+    return new RawIterator<OUT, IOException>()\n     {\n-        if ( items.length == 0 )\n-        {\n-            throw new IllegalStateException( \"No source items specified\" );\n-        }\n-\n-        return new RawIterator<OUT,IOException>()\n-        {\n-            private int cursor;\n+      private int cursor;\n \n-            @Override\n-            public boolean hasNext()\n-            {\n-                return cursor < items.length;\n-            }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return cursor < items.length;\n+      }\n \n-            @Override\n-            public OUT next() throws IOException\n-            {\n-                if ( !hasNext() )\n-                {\n-                    throw new IllegalStateException();\n-                }\n-                return converter.apply( items[cursor++] );\n-            }\n+      @Override\n+      public OUT next() throws IOException\n+      {\n+        if (!hasNext())\n+        {\n+          throw new IllegalStateException();\n+        }\n+        return converter.apply(items[cursor++]);\n+      }\n \n-            @Override\n-            public void remove()\n-            {\n-                throw new UnsupportedOperationException();\n-            }\n-        };\n-    }\n+      @Override\n+      public void remove()\n+      {\n+        throw new UnsupportedOperationException();\n+      }\n+    };\n+  }\n \n-    /**\n-     * Extracts the first line, i.e characters until the first newline or end of stream.\n-     * Reads one character at a time to be sure not to read too far ahead. The stream is left\n-     * in a state of either exhausted or at the beginning of the next line of data.\n-     *\n-     * @param source {@link CharReadable} to read from.\n-     * @return char[] containing characters until the first newline character or end of stream.\n-     * @throws IOException on I/O reading error.\n-     */\n-    public static char[] extractFirstLineFrom( CharReadable source ) throws IOException\n+  /**\n+   * Extracts the first line, i.e characters until the first newline or end of stream.\n+   * Reads one character at a time to be sure not to read too far ahead. The stream is left\n+   * in a state of either exhausted or at the beginning of the next line of data.\n+   *\n+   * @param source {@link CharReadable} to read from.\n+   * @return char[] containing characters until the first newline character or end of stream.\n+   * @throws IOException on I/O reading error.\n+   */\n+  public static char[] extractFirstLineFrom(CharReadable source) throws IOException\n+  {\n+    char[] result = new char[100];\n+    int cursor = 0;\n+    int read;\n+    boolean foundEol = false;\n+    do\n     {\n-        char[] result = new char[100];\n-        int cursor = 0;\n-        int read;\n-        boolean foundEol = false;\n-        do\n-        {\n-            // Grow on demand\n-            if ( cursor >= result.length )\n-            {\n-                result = Arrays.copyOf( result, cursor * 2 );\n-            }\n+      // Grow on demand\n+      if (cursor >= result.length)\n+      {\n+        result = Arrays.copyOf(result, cursor * 2);\n+      }\n \n-            // Read one character\n-            read = source.read( result, cursor, 1 );\n-            if ( read > 0 )\n-            {\n-                foundEol = BufferedCharSeeker.isEolChar( result[cursor] );\n-                if ( !foundEol )\n-                {\n-                    cursor++;\n-                }\n-            }\n+      // Read one character\n+      read = source.read(result, cursor, 1);\n+      if (read > 0)\n+      {\n+        foundEol = BufferedCharSeeker.isEolChar(result[cursor]);\n+        if (!foundEol)\n+        {\n+          cursor++;\n         }\n-        while ( read > 0 && !foundEol );\n-        return Arrays.copyOf( result, cursor );\n+      }\n     }\n+    while (read > 0 && !foundEol);\n+    return Arrays.copyOf(result, cursor);\n+  }\n }\n",
            "diff_size": 403
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "column": "44",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3490/Readables.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3490/Readables.java\nindex c1506861aaf..70c887178f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3490/Readables.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3490/Readables.java\n@@ -69,7 +69,8 @@ public class Readables\n \n         @Override\n         public void close()\n-        {   // Nothing to close\n+        {\n+    // Nothing to close\n         }\n \n         @Override\n@@ -91,9 +92,8 @@ public class Readables\n         }\n     };\n \n-    public static CharReadable wrap( final InputStream stream, final String sourceName, Charset charset )\n-            throws IOException\n-    {\n+    public static CharReadable wrap( final InputStream stream, final String sourceName, Charset charset ) throws IOException\n+{\n         return wrap( stream, sourceName, charset, 0 );\n     }\n \n@@ -107,9 +107,8 @@ public class Readables\n      * @return a {@link CharReadable} for the {@link Reader}.\n      * @throws IOException on I/O error.\n      */\n-    public static CharReadable wrap( final InputStream stream, final String sourceName, Charset charset, long length )\n-            throws IOException\n-    {\n+    public static CharReadable wrap( final InputStream stream, final String sourceName, Charset charset, long length ) throws IOException\n+{\n         byte[] bytes = new byte[Magic.longest()];\n         PushbackInputStream pushbackStream = new PushbackInputStream( stream, bytes.length );\n         Charset usedCharset = charset;\n@@ -127,7 +126,8 @@ public class Readables\n             }\n             pushbackStream.unread( bytes, read - excessiveBytes, excessiveBytes );\n         }\n-        return wrap( new InputStreamReader( pushbackStream, usedCharset )\n+\n+return wrap( new InputStreamReader( pushbackStream, usedCharset )\n         {\n             @Override\n             public String toString()\n@@ -169,7 +169,8 @@ public class Readables\n         {\n             Magic magic = Magic.of( file );\n             if ( magic == Magic.ZIP )\n-            {   // ZIP file\n+            {\n+    // ZIP file\n                 ZipFile zipFile = new ZipFile( file );\n                 ZipEntry entry = getSingleSuitableEntry( zipFile );\n                 return wrap( new InputStreamReader( zipFile.getInputStream( entry ), charset )\n@@ -182,7 +183,8 @@ public class Readables\n                 }, file.length() );\n             }\n             else if ( magic == Magic.GZIP )\n-            {   // GZIP file. GZIP isn't an archive like ZIP, so this is purely data that is compressed.\n+            {\n+    // GZIP file. GZIP isn't an archive like ZIP, so this is purely data that is compressed.\n                 // Although a very common way of compressing with GZIP is to use TAR which can combine many\n                 // files into one blob, which is then compressed. If that's the case then\n                 // the data will look like garbage and the reader will fail for whatever it will be used for.\n@@ -207,7 +209,8 @@ public class Readables\n                     in.skip( magic.length() );\n                     usedCharset = magic.encoding();\n                 }\n-                return wrap( new InputStreamReader( in, usedCharset )\n+\n+return wrap( new InputStreamReader( in, usedCharset )\n                 {\n                     @Override\n                     public String toString()\n@@ -234,27 +237,23 @@ public class Readables\n \n                 if ( found != null )\n                 {\n-                    throw new IOException( \"Multiple suitable files found in zip file \" + zipFile.getName() +\n-                            \", at least \" + found.getName() + \" and \" + entry.getName() +\n-                            \". Only a single file per zip file is supported\" );\n+                    throw new IOException( \"Multiple suitable files found in zip file \" + zipFile.getName() + \", at least \" + found.getName() + \" and \" + entry.getName() + \". Only a single file per zip file is supported\" );\n                 }\n-                found = entry;\n+\n+found = entry;\n             }\n \n             if ( found == null )\n             {\n-                throw new IOException( \"No suitable file found in zip file \" + zipFile.getName() + \".\" +\n-                        (!unsuitableEntries.isEmpty() ?\n-                                \" Although found these unsuitable entries \" + unsuitableEntries : \"\" ) );\n-            }\n+                throw new IOException( \"No suitable file found in zip file \" + zipFile.getName() + \".\" + (!unsuitableEntries.isEmpty() ? \" Although found these unsuitable entries \" + unsuitableEntries : \"\" ) );\n+    }\n             return found;\n         }\n     }\n \n     private static boolean invalidZipEntry( String name )\n     {\n-        return name.contains( \"__MACOSX\" ) ||\n-               name.startsWith( \".\" ) ||\n+        return name.contains( \"__MACOSX\" ) ||name.startsWith( \".\" ) ||\n                name.contains( \"/.\" );\n     }\n \n@@ -268,10 +267,13 @@ public class Readables\n         IOFunction<File,CharReadable> opener = new FromFile( charset );\n         switch ( files.length )\n         {\n-        case 0:  return EMPTY;\n-        case 1:  return opener.apply( files[0] );\n-        default: return new MultiReadable( iterator( opener, files ) );\n-        }\n+        case 0:\n+    return EMPTY;\n+        case 1:\n+    return opener.apply( files[0] );\n+    default:\n+    return new MultiReadable( iterator( opener, files ) );\n+    }\n     }\n \n     @SafeVarargs\n@@ -299,7 +301,8 @@ public class Readables\n                 {\n                     throw new IllegalStateException();\n                 }\n-                return converter.apply( items[cursor++] );\n+\n+return converter.apply( items[cursor++] );\n             }\n \n             @Override\n@@ -347,4 +350,4 @@ public class Readables\n         while ( read > 0 && !foundEol );\n         return Arrays.copyOf( result, cursor );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}