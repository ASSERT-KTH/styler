{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "606",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "7",
                "severity": "warning",
                "message": "'}' at column 7 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "      do {\n        line = errorReader.readLine();\n      } while (line != null && !line.contains(blockUntil));\n    }\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/606/BlockingProcessStreamReader.java\nindex 988b6593a1d..3d9b3078523 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/606/BlockingProcessStreamReader.java\n@@ -59,7 +59,9 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+\n+      while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "62",
                    "column": "7",
                    "severity": "warning",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/606/BlockingProcessStreamReader.java\nindex 988b6593a1d..083811c33f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/606/BlockingProcessStreamReader.java\n@@ -48,7 +48,7 @@ class BlockingProcessStreamReader extends Thread {\n   private final Pattern logLinePattern;\n \n   private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n+                                      Logger logger) throws IOException {\n     super(\"blocking-process-stream-reader\");\n     setDaemon(true);\n     errorReader = new BufferedReader(new InputStreamReader(stream));\n@@ -149,7 +149,7 @@ class BlockingProcessStreamReader extends Thread {\n   }\n \n   static BlockingProcessStreamReader start(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n+                                           Logger logger) throws IOException {\n     BlockingProcessStreamReader thread =\n         new BlockingProcessStreamReader(emulator, stream, blockUntil, logger);\n     thread.start();\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/606/BlockingProcessStreamReader.java\nindex 988b6593a1d..5b3a2db36c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/606/BlockingProcessStreamReader.java\n@@ -49,7 +49,7 @@ class BlockingProcessStreamReader extends Thread {\n \n   private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil,\n       Logger logger) throws IOException {\n-    super(\"blocking-process-stream-reader\");\n+  super(\"blocking-process-stream-reader\");\n     setDaemon(true);\n     errorReader = new BufferedReader(new InputStreamReader(stream));\n     this.logger = logger;\n@@ -59,7 +59,8 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n@@ -155,4 +156,4 @@ class BlockingProcessStreamReader extends Thread {\n     thread.start();\n     return thread;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 24, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 24, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 22, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/606/BlockingProcessStreamReader.java\nindex 988b6593a1d..8b3fb305fd6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/606/BlockingProcessStreamReader.java\n@@ -19,7 +19,6 @@ package com.google.cloud.testing;\n import static com.google.common.base.MoreObjects.firstNonNull;\n \n import com.google.common.base.Strings;\n-\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -33,11 +32,12 @@ import java.util.regex.Pattern;\n  * This class allows to read a process output stream, block until a provided string appears on the\n  * stream and redirect pertinent error logs to a provided logger.\n  */\n+\n+\n class BlockingProcessStreamReader extends Thread {\n \n   private static final int STREAM_READER_SLEEP_INTERVAL_IN_MS = 200;\n   private static final int LOG_LENGTH_LIMIT = 50000;\n-\n   private final BufferedReader errorReader;\n   private final Logger logger;\n   private StringBuilder currentLog;\n@@ -47,8 +47,7 @@ class BlockingProcessStreamReader extends Thread {\n   private final String emulatorTag;\n   private final Pattern logLinePattern;\n \n-  private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n+  private BlockingProcessStreamReader(String emulator, InputStream stream, String blockUntil, Logger logger) throws IOException {\n     super(\"blocking-process-stream-reader\");\n     setDaemon(true);\n     errorReader = new BufferedReader(new InputStreamReader(stream));\n@@ -59,7 +58,8 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+while(line != null && !line.contains(blockUntil));\n     }\n   }\n \n@@ -111,26 +111,28 @@ class BlockingProcessStreamReader extends Thread {\n       currentLogLevel = nextLogLevel;\n       collectionMode = true;\n     } else if (collectionMode) {\n-      if (currentLog.length() > LOG_LENGTH_LIMIT) {\n-        collectionMode = false;\n-      } else if (currentLog.length() == 0) {\n+             if (currentLog.length() > LOG_LENGTH_LIMIT) {\n+               collectionMode = false;\n+             } else if (currentLog.length() == 0) {\n         // strip level out of the line\n-        currentLog.append(emulatorTag);\n-        currentLog.append(previousLine.split(\":\", 2)[1]);\n-        currentLog.append(System.getProperty(\"line.separator\"));\n-      } else {\n-        if (!previousLine.startsWith(emulatorTag)) {\n-          currentLog.append(emulatorTag);\n-          currentLog.append(' ');\n-        }\n-        currentLog.append(previousLine);\n-        currentLog.append(System.getProperty(\"line.separator\"));\n-      }\n-    }\n+                      currentLog.append(emulatorTag);\n+                      currentLog.append(previousLine.split(\":\", 2)[1]);\n+                      currentLog.append(System.getProperty(\"line.separator\"));\n+                    } else {\n+                      if (!previousLine.startsWith(emulatorTag)) {\n+                        currentLog.append(emulatorTag);\n+                        currentLog.append(' ');\n+                      }\n+                      currentLog.append(previousLine);\n+                      currentLog.append(System.getProperty(\"line.separator\"));\n+             }\n+           }\n   }\n \n   private void writeLog() {\n-    if (currentLogLevel != null && currentLog != null && currentLog.length() != 0) {\n+    if (currentLogLevel != null\n+    && currentLog != null\n+    && currentLog.length() != 0) {\n       logger.log(currentLogLevel, currentLog.toString().trim());\n     }\n   }\n@@ -148,11 +150,9 @@ class BlockingProcessStreamReader extends Thread {\n     }\n   }\n \n-  static BlockingProcessStreamReader start(String emulator, InputStream stream, String blockUntil,\n-      Logger logger) throws IOException {\n-    BlockingProcessStreamReader thread =\n-        new BlockingProcessStreamReader(emulator, stream, blockUntil, logger);\n+  static BlockingProcessStreamReader start(String emulator, InputStream stream, String blockUntil, Logger logger) throws IOException {\n+    BlockingProcessStreamReader thread = new BlockingProcessStreamReader(emulator, stream, blockUntil, logger);\n     thread.start();\n     return thread;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/606/BlockingProcessStreamReader.java\nindex 988b6593a1d..3d9b3078523 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/606/BlockingProcessStreamReader.java\n@@ -59,7 +59,9 @@ class BlockingProcessStreamReader extends Thread {\n       String line;\n       do {\n         line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+      }\n+\n+      while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "61",
                    "column": "39",
                    "severity": "warning",
                    "message": "'}' at column 39 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "61",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/606/BlockingProcessStreamReader.java\nindex 988b6593a1d..08e7ea99798 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/606/BlockingProcessStreamReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/606/BlockingProcessStreamReader.java\n@@ -58,8 +58,8 @@ class BlockingProcessStreamReader extends Thread {\n     if (!Strings.isNullOrEmpty(blockUntil)) {\n       String line;\n       do {\n-        line = errorReader.readLine();\n-      } while (line != null && !line.contains(blockUntil));\n+        line = errorReader.readLine();}\n+      while (line != null && !line.contains(blockUntil));\n     }\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}