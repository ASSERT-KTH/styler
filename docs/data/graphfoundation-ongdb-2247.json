{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2247",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2247/FormatFamily.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2247/FormatFamily.java\nindex 96061c81db8..044483ced67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2247/FormatFamily.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2247/FormatFamily.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n /**\n@@ -26,61 +27,66 @@ package org.neo4j.kernel.impl.store.format;\n  */\n public abstract class FormatFamily implements Comparable<FormatFamily>\n {\n-    /**\n-     * Get format family name\n-     * @return family name\n-     */\n-    public abstract String getName();\n+  /**\n+   * Get format family name\n+   *\n+   * @return family name\n+   */\n+  public abstract String getName();\n \n-    /**\n-     * get format family rank\n-     * @return rank\n-     */\n-    public abstract int rank();\n+  /**\n+   * get format family rank\n+   *\n+   * @return rank\n+   */\n+  public abstract int rank();\n \n-    @Override\n-    public int compareTo( FormatFamily formatFamily )\n-    {\n-        return Integer.compare( this.rank(), formatFamily.rank() );\n-    }\n+  @Override\n+  public int compareTo(FormatFamily formatFamily)\n+  {\n+    return Integer.compare(this.rank(), formatFamily.rank());\n+  }\n \n-    /**\n-     * Check if new record format family is higher then old record format family.\n-     * New format family is higher then old one in case when it safe to migrate from old format into new\n-     * format in terms of format capabilities and determined by family rank: new family is higher if it's rank is higher\n-     * then rank\n-     * of old family\n-     * @param newFormat new record format\n-     * @param oldFormat old record format\n-     * @return true if new record format family is higher\n-     */\n-    public static boolean isHigherFamilyFormat( RecordFormats newFormat, RecordFormats oldFormat )\n-    {\n-        return oldFormat.getFormatFamily().compareTo( newFormat.getFormatFamily() ) < 0;\n-    }\n+  /**\n+   * Check if new record format family is higher then old record format family.\n+   * New format family is higher then old one in case when it safe to migrate from old format into new\n+   * format in terms of format capabilities and determined by family rank: new family is higher if it's rank is higher\n+   * then rank\n+   * of old family\n+   *\n+   * @param newFormat new record format\n+   * @param oldFormat old record format\n+   * @return true if new record format family is higher\n+   */\n+  public static boolean isHigherFamilyFormat(RecordFormats newFormat, RecordFormats oldFormat)\n+  {\n+    return oldFormat.getFormatFamily().compareTo(newFormat.getFormatFamily()) < 0;\n+  }\n \n-    /**\n-     * Check if record formats have same format family\n-     * @param recordFormats1 first record format\n-     * @param recordFormats2 second record format\n-     * @return true if formats have the same format family\n-     */\n-    public static boolean isSameFamily( RecordFormats recordFormats1, RecordFormats recordFormats2 )\n-    {\n-        return recordFormats1.getFormatFamily().equals( recordFormats2.getFormatFamily() );\n-    }\n+  /**\n+   * Check if record formats have same format family\n+   *\n+   * @param recordFormats1 first record format\n+   * @param recordFormats2 second record format\n+   * @return true if formats have the same format family\n+   */\n+  public static boolean isSameFamily(RecordFormats recordFormats1, RecordFormats recordFormats2)\n+  {\n+    return recordFormats1.getFormatFamily().equals(recordFormats2.getFormatFamily());\n+  }\n \n-    /**\n-     * Check if new record format family is lower then old record format family.\n-     * New format family is lower then old one in case when its not safe to migrate from old format into new\n-     * format in terms of format capabilities and determined by family rank: new family is lower if it's rank is lower\n-     * then rank of old family\n-     * @param newFormat new record format\n-     * @param oldFormat old record format\n-     * @return true if new record format family is lower\n-     */\n-    public static boolean isLowerFamilyFormat( RecordFormats newFormat, RecordFormats oldFormat )\n-    {\n-        return oldFormat.getFormatFamily().compareTo( newFormat.getFormatFamily() ) > 0;\n-    }\n+  /**\n+   * Check if new record format family is lower then old record format family.\n+   * New format family is lower then old one in case when its not safe to migrate from old format into new\n+   * format in terms of format capabilities and determined by family rank: new family is lower if it's rank is lower\n+   * then rank of old family\n+   *\n+   * @param newFormat new record format\n+   * @param oldFormat old record format\n+   * @return true if new record format family is lower\n+   */\n+  public static boolean isLowerFamilyFormat(RecordFormats newFormat, RecordFormats oldFormat)\n+  {\n+    return oldFormat.getFormatFamily().compareTo(newFormat.getFormatFamily()) > 0;\n+  }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2247/FormatFamily.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2247/FormatFamily.java\nindex 96061c81db8..e2b6403d7ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2247/FormatFamily.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2247/FormatFamily.java\n@@ -83,4 +83,4 @@ public abstract class FormatFamily implements Comparable<FormatFamily>\n     {\n         return oldFormat.getFormatFamily().compareTo( newFormat.getFormatFamily() ) > 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}