{
    "project_name": "StuPro-TOSCAna-TOSCAna",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "101",
                "column": "5",
                "severity": "error",
                "message": "'METHOD_DEF' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    \n\n    @Override\n    public void visit(WebApplication node) {\n        // Parent has to be visited to determine image\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler/0/ImageMappingVisitor.java\nindex 9ec70aa24fe..e3565046df1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler/0/ImageMappingVisitor.java\n@@ -96,7 +96,6 @@ public class ImageMappingVisitor implements NodeVisitor {\n \n         //TODO implement check if the docker application has children.\n     }\n-    \n \n     @Override\n     public void visit(WebApplication node) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/intellij/0/ImageMappingVisitor.java\nindex 9ec70aa24fe..7e0d93bf370 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/intellij/0/ImageMappingVisitor.java\n@@ -18,12 +18,18 @@ import org.opentosca.toscana.plugins.util.TransformationFailureException;\n \n public class ImageMappingVisitor implements NodeVisitor {\n \n-    private static final String NO_CREATE_ERROR_MESSAGE = \"Cannot create DockerApplication without a create artifact containing the image\";\n-    private static final String NO_IMAGE_PATH_ERROR_MESSAGE = \"The Given Create Artifact for the docker application '%s' does not have a image path\";\n+    private static final String NO_CREATE_ERROR_MESSAGE =\n+        \"Cannot create DockerApplication without a create artifact containing the image\";\n+\n+    private static final String NO_IMAGE_PATH_ERROR_MESSAGE =\n+        \"The Given Create Artifact for the docker application '%s' does not have a image path\";\n+\n     private final BaseImageMapper mapper;\n \n     private String baseImage = null;\n+\n     private boolean hasInstallScripts = false;\n+\n     private boolean requiresBuilding = true;\n \n     public ImageMappingVisitor(BaseImageMapper mapper) {\n@@ -37,7 +43,8 @@ public class ImageMappingVisitor implements NodeVisitor {\n     }\n \n     private boolean hasCreateScript(RootNode node) {\n-        return node.getStandardLifecycle().getCreate().isPresent() && node.getStandardLifecycle().getCreate().get().getArtifact().isPresent();\n+        return node.getStandardLifecycle().getCreate().isPresent() &&\n+            node.getStandardLifecycle().getCreate().get().getArtifact().isPresent();\n     }\n \n     private boolean hasConfigureScript(RootNode node) {\n@@ -86,17 +93,19 @@ public class ImageMappingVisitor implements NodeVisitor {\n         this.requiresBuilding = false;\n         this.baseImage = node.getStandardLifecycle().getCreate()\n             .orElseThrow(() -> new TransformationFailureException(NO_CREATE_ERROR_MESSAGE))\n-            .getArtifact().orElseThrow(() -> new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE,\n-                node.getEntityName())))\n+            .getArtifact().orElseThrow(\n+                () -> new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE,\n+                    node.getEntityName())))\n             .getFilePath();\n \n         if (this.baseImage == null) {\n-            throw new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE, node.getEntityName()));\n+            throw new TransformationFailureException(\n+                String.format(NO_IMAGE_PATH_ERROR_MESSAGE, node.getEntityName()));\n         }\n \n         //TODO implement check if the docker application has children.\n     }\n-    \n+\n \n     @Override\n     public void visit(WebApplication node) {\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/naturalize/0/ImageMappingVisitor.java\nindex 9ec70aa24fe..52ee976c1bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/naturalize/0/ImageMappingVisitor.java\n@@ -88,18 +88,16 @@ public class ImageMappingVisitor implements NodeVisitor {\n             .orElseThrow(() -> new TransformationFailureException(NO_CREATE_ERROR_MESSAGE))\n             .getArtifact().orElseThrow(() -> new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE,\n                 node.getEntityName())))\n-            .getFilePath();\n-\n-        if (this.baseImage == null) {\n+.getFilePath();\n+if (this.baseImage == null) {\n             throw new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE, node.getEntityName()));\n         }\n \n         //TODO implement check if the docker application has children.\n     }\n-    \n \n-    @Override\n-    public void visit(WebApplication node) {\n+@Override\n+public void visit(WebApplication node) {\n         // Parent has to be visited to determine image\n     }\n \n@@ -120,4 +118,4 @@ public class ImageMappingVisitor implements NodeVisitor {\n     public Optional<String> getBaseImage() {\n         return Optional.ofNullable(baseImage);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "123",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "128",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/codebuff/0/ImageMappingVisitor.java\nindex 9ec70aa24fe..311e2245cff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/codebuff/0/ImageMappingVisitor.java\n@@ -1,7 +1,6 @@\n package org.opentosca.toscana.plugins.kubernetes.visitor.imgtransform;\n \n import java.util.Optional;\n-\n import org.opentosca.toscana.model.node.Apache;\n import org.opentosca.toscana.model.node.Compute;\n import org.opentosca.toscana.model.node.DockerApplication;\n@@ -21,7 +20,6 @@ public class ImageMappingVisitor implements NodeVisitor {\n     private static final String NO_CREATE_ERROR_MESSAGE = \"Cannot create DockerApplication without a create artifact containing the image\";\n     private static final String NO_IMAGE_PATH_ERROR_MESSAGE = \"The Given Create Artifact for the docker application '%s' does not have a image path\";\n     private final BaseImageMapper mapper;\n-\n     private String baseImage = null;\n     private boolean hasInstallScripts = false;\n     private boolean requiresBuilding = true;\n@@ -37,11 +35,16 @@ public class ImageMappingVisitor implements NodeVisitor {\n     }\n \n     private boolean hasCreateScript(RootNode node) {\n-        return node.getStandardLifecycle().getCreate().isPresent() && node.getStandardLifecycle().getCreate().get().getArtifact().isPresent();\n+        return node.getStandardLifecycle().getCreate()\n+                                          .isPresent() && node.getStandardLifecycle().getCreate()\n+                                                                                     .get()\n+                                                                                     .getArtifact()\n+                                                                                     .isPresent();\n     }\n \n     private boolean hasConfigureScript(RootNode node) {\n-        return node.getStandardLifecycle().getConfigure().isPresent();\n+        return node.getStandardLifecycle().getConfigure()\n+                                          .isPresent();\n     }\n \n     @Override\n@@ -85,39 +88,44 @@ public class ImageMappingVisitor implements NodeVisitor {\n     public void visit(DockerApplication node) {\n         this.requiresBuilding = false;\n         this.baseImage = node.getStandardLifecycle().getCreate()\n-            .orElseThrow(() -> new TransformationFailureException(NO_CREATE_ERROR_MESSAGE))\n-            .getArtifact().orElseThrow(() -> new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE,\n-                node.getEntityName())))\n-            .getFilePath();\n-\n+                                                    .orElseThrow(() ->\n+            new TransformationFailureException(NO_CREATE_ERROR_MESSAGE))\n+                                                    .getArtifact()\n+                                                    .orElseThrow(() ->\n+            new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE, node.getEntityName())))\n+                                                    .getFilePath();\n         if (this.baseImage == null) {\n             throw new TransformationFailureException(String.format(NO_IMAGE_PATH_ERROR_MESSAGE, node.getEntityName()));\n         }\n \n         //TODO implement check if the docker application has children.\n     }\n-    \n \n     @Override\n     public void visit(WebApplication node) {\n         // Parent has to be visited to determine image\n+\n     }\n \n     @Override\n     public void visit(MysqlDatabase node) {\n         // Parent has to be visited to determine image\n+\n     }\n \n     @Override\n     public void visit(JavaApplication node) {\n         // Parent has to be visited to determine image\n+\n     }\n \n+\n     public boolean containerRequiresBuilding() {\n         return requiresBuilding;\n     }\n \n+\n     public Optional<String> getBaseImage() {\n         return Optional.ofNullable(baseImage);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_random/0/ImageMappingVisitor.java\nindex 9ec70aa24fe..e3565046df1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_random/0/ImageMappingVisitor.java\n@@ -96,7 +96,6 @@ public class ImageMappingVisitor implements NodeVisitor {\n \n         //TODO implement check if the docker application has children.\n     }\n-    \n \n     @Override\n     public void visit(WebApplication node) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_three_grams/0/ImageMappingVisitor.java\nindex 9ec70aa24fe..e3565046df1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/0/ImageMappingVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_three_grams/0/ImageMappingVisitor.java\n@@ -96,7 +96,6 @@ public class ImageMappingVisitor implements NodeVisitor {\n \n         //TODO implement check if the docker application has children.\n     }\n-    \n \n     @Override\n     public void visit(WebApplication node) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}