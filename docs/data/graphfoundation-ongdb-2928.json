{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2928",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2928/StateMachineRules.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2928/StateMachineRules.java\nindex ba6df130417..0b4e5c729a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2928/StateMachineRules.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2928/StateMachineRules.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.statemachine;\n \n import java.util.ArrayList;\n@@ -34,68 +35,68 @@ import org.neo4j.cluster.com.message.MessageType;\n public class StateMachineRules\n     implements StateTransitionListener\n {\n-    private final MessageHolder outgoing;\n+  private final MessageHolder outgoing;\n \n-    private Map<State<?,?>,List<StateMachineRule>> rules = new HashMap<>();\n+  private Map<State<?, ?>, List<StateMachineRule>> rules = new HashMap<>();\n \n-    public StateMachineRules( MessageHolder outgoing )\n-    {\n-        this.outgoing = outgoing;\n-    }\n+  public StateMachineRules(MessageHolder outgoing)\n+  {\n+    this.outgoing = outgoing;\n+  }\n \n-    public StateMachineRules rule( State<?, ?> oldState,\n-                                   MessageType messageType,\n-                                   State<?, ?> newState,\n-                                   Message<?>... messages\n-    )\n-    {\n-        List<StateMachineRule> fromRules = rules.computeIfAbsent( oldState, k -> new ArrayList<>() );\n-        fromRules.add( new StateMachineRule( oldState,  messageType, newState, messages ) );\n-        return this;\n-    }\n+  public StateMachineRules rule(State<?, ?> oldState,\n+                                MessageType messageType,\n+                                State<?, ?> newState,\n+                                Message<?>... messages\n+  )\n+  {\n+    List<StateMachineRule> fromRules = rules.computeIfAbsent(oldState, k -> new ArrayList<>());\n+    fromRules.add(new StateMachineRule(oldState, messageType, newState, messages));\n+    return this;\n+  }\n \n-    @Override\n-    public void stateTransition( StateTransition transition )\n+  @Override\n+  public void stateTransition(StateTransition transition)\n+  {\n+    List<StateMachineRule> oldStateRules = rules.get(transition.getOldState());\n+    if (oldStateRules != null)\n     {\n-        List<StateMachineRule> oldStateRules = rules.get( transition.getOldState() );\n-        if ( oldStateRules != null )\n-        {\n-            for ( StateMachineRule oldStateRule : oldStateRules )\n-            {\n-                oldStateRule.stateTransition( transition );\n-            }\n-        }\n+      for (StateMachineRule oldStateRule : oldStateRules)\n+      {\n+        oldStateRule.stateTransition(transition);\n+      }\n     }\n+  }\n \n-    private class StateMachineRule\n-        implements StateTransitionListener\n-    {\n-        State<?,?> oldState;\n-        MessageType messageType;\n-        State<?,?> newState;\n+  private class StateMachineRule\n+      implements StateTransitionListener\n+  {\n+    State<?, ?> oldState;\n+    MessageType messageType;\n+    State<?, ?> newState;\n \n-        Message<?>[] messages;\n+    Message<?>[] messages;\n \n-        private StateMachineRule( State<?, ?> oldState, MessageType messageType, State<?, ?> newState, Message<?>[] messages )\n-        {\n-            this.oldState = oldState;\n-            this.messageType = messageType;\n-            this.newState = newState;\n-            this.messages = messages;\n-        }\n+    private StateMachineRule(State<?, ?> oldState, MessageType messageType, State<?, ?> newState, Message<?>[] messages)\n+    {\n+      this.oldState = oldState;\n+      this.messageType = messageType;\n+      this.newState = newState;\n+      this.messages = messages;\n+    }\n \n-        @Override\n-        public void stateTransition( StateTransition transition )\n+    @Override\n+    public void stateTransition(StateTransition transition)\n+    {\n+      if (oldState.equals(transition.getOldState()) &&\n+          transition.getMessage().getMessageType().equals(messageType) &&\n+          newState.equals(transition.getNewState()))\n+      {\n+        for (Message<?> message : messages)\n         {\n-            if ( oldState.equals( transition.getOldState() ) &&\n-                    transition.getMessage().getMessageType().equals( messageType ) &&\n-                    newState.equals( transition.getNewState() ) )\n-            {\n-                for ( Message<?> message : messages )\n-                {\n-                    outgoing.offer( message );\n-                }\n-            }\n+          outgoing.offer(message);\n         }\n+      }\n     }\n+  }\n }\n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "84",
                    "column": "62",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2928/StateMachineRules.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2928/StateMachineRules.java\nindex ba6df130417..ac9c5f1d458 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2928/StateMachineRules.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2928/StateMachineRules.java\n@@ -31,26 +31,21 @@ import org.neo4j.cluster.com.message.MessageType;\n /**\n  * Trigger messages when given state transitions occur\n  */\n-public class StateMachineRules\n-    implements StateTransitionListener\n+public class StateMachineRules implements StateTransitionListener\n {\n     private final MessageHolder outgoing;\n \n-    private Map<State<?,?>,List<StateMachineRule>> rules = new HashMap<>();\n+    private Map<State<?, ?>, List<StateMachineRule>> rules = new HashMap<>();\n \n     public StateMachineRules( MessageHolder outgoing )\n     {\n         this.outgoing = outgoing;\n     }\n \n-    public StateMachineRules rule( State<?, ?> oldState,\n-                                   MessageType messageType,\n-                                   State<?, ?> newState,\n-                                   Message<?>... messages\n-    )\n+    public StateMachineRules rule( State<?, ?> oldState, MessageType messageType, State<?, ?> newState, Message<?>... messages )\n     {\n         List<StateMachineRule> fromRules = rules.computeIfAbsent( oldState, k -> new ArrayList<>() );\n-        fromRules.add( new StateMachineRule( oldState,  messageType, newState, messages ) );\n+        fromRules.add( new StateMachineRule( oldState, messageType, newState, messages ) );\n         return this;\n     }\n \n@@ -67,12 +62,11 @@ public class StateMachineRules\n         }\n     }\n \n-    private class StateMachineRule\n-        implements StateTransitionListener\n-    {\n-        State<?,?> oldState;\n+    private class StateMachineRule implements StateTransitionListener\n+{\n+        State<?, ?> oldState;\n         MessageType messageType;\n-        State<?,?> newState;\n+        State<?, ?> newState;\n \n         Message<?>[] messages;\n \n@@ -87,8 +81,7 @@ public class StateMachineRules\n         @Override\n         public void stateTransition( StateTransition transition )\n         {\n-            if ( oldState.equals( transition.getOldState() ) &&\n-                    transition.getMessage().getMessageType().equals( messageType ) &&\n+            if ( oldState.equals( transition.getOldState() ) &&transition.getMessage().getMessageType().equals( messageType ) &&\n                     newState.equals( transition.getNewState() ) )\n             {\n                 for ( Message<?> message : messages )\n@@ -98,4 +91,4 @@ public class StateMachineRules\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}