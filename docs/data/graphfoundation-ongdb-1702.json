{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1702",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1702/SchemaDescriptorPredicates.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1702/SchemaDescriptorPredicates.java\nindex e9549dd372b..6540420130c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1702/SchemaDescriptorPredicates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1702/SchemaDescriptorPredicates.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.schema;\n \n import java.util.Optional;\n@@ -24,85 +25,85 @@ import java.util.function.Predicate;\n \n public class SchemaDescriptorPredicates\n {\n-    private SchemaDescriptorPredicates()\n-    {\n-    }\n+  private SchemaDescriptorPredicates()\n+  {\n+  }\n \n-    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasLabel( int labelId )\n+  public static <T extends SchemaDescriptorSupplier> Predicate<T> hasLabel(int labelId)\n+  {\n+    return supplier ->\n     {\n-        return supplier ->\n-        {\n-            Optional<Integer> labelOpt = supplier.schema().computeWith( getLabel );\n-            return labelOpt.isPresent() && labelOpt.get() == labelId;\n-        };\n-    }\n+      Optional<Integer> labelOpt = supplier.schema().computeWith(getLabel);\n+      return labelOpt.isPresent() && labelOpt.get() == labelId;\n+    };\n+  }\n \n-    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasRelType( int relTypeId )\n+  public static <T extends SchemaDescriptorSupplier> Predicate<T> hasRelType(int relTypeId)\n+  {\n+    return supplier ->\n     {\n-        return supplier ->\n-        {\n-            Optional<Integer> relTypeOpt = supplier.schema().computeWith( getRelType );\n-            return relTypeOpt.isPresent() && relTypeOpt.get() == relTypeId;\n-        };\n-    }\n+      Optional<Integer> relTypeOpt = supplier.schema().computeWith(getRelType);\n+      return relTypeOpt.isPresent() && relTypeOpt.get() == relTypeId;\n+    };\n+  }\n \n-    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasProperty( int propertyId )\n-    {\n-        return supplier -> hasProperty( supplier, propertyId );\n-    }\n+  public static <T extends SchemaDescriptorSupplier> Predicate<T> hasProperty(int propertyId)\n+  {\n+    return supplier -> hasProperty(supplier, propertyId);\n+  }\n \n-    public static boolean hasLabel( SchemaDescriptorSupplier supplier, int labelId )\n+  public static boolean hasLabel(SchemaDescriptorSupplier supplier, int labelId)\n+  {\n+    Optional<Integer> labelOpt = supplier.schema().computeWith(getLabel);\n+    return labelOpt.isPresent() && labelOpt.get() == labelId;\n+  }\n+\n+  public static boolean hasRelType(SchemaDescriptorSupplier supplier, int relTypeId)\n+  {\n+    Optional<Integer> relTypeOpt = supplier.schema().computeWith(getRelType);\n+    return relTypeOpt.isPresent() && relTypeOpt.get() == relTypeId;\n+  }\n+\n+  public static boolean hasProperty(SchemaDescriptorSupplier supplier, int propertyId)\n+  {\n+    int[] schemaProperties = supplier.schema().getPropertyIds();\n+    for (int schemaProp : schemaProperties)\n     {\n-        Optional<Integer> labelOpt = supplier.schema().computeWith( getLabel );\n-        return labelOpt.isPresent() && labelOpt.get() == labelId;\n+      if (schemaProp == propertyId)\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n \n-    public static boolean hasRelType( SchemaDescriptorSupplier supplier, int relTypeId )\n+  private static SchemaComputer<Optional<Integer>> getLabel = new SchemaComputer<Optional<Integer>>()\n+  {\n+    @Override\n+    public Optional<Integer> computeSpecific(LabelSchemaDescriptor schema)\n     {\n-        Optional<Integer> relTypeOpt = supplier.schema().computeWith( getRelType );\n-        return relTypeOpt.isPresent() && relTypeOpt.get() == relTypeId;\n+      return Optional.of(schema.getLabelId());\n     }\n \n-    public static boolean hasProperty( SchemaDescriptorSupplier supplier, int propertyId )\n+    @Override\n+    public Optional<Integer> computeSpecific(RelationTypeSchemaDescriptor schema)\n     {\n-        int[] schemaProperties = supplier.schema().getPropertyIds();\n-        for ( int schemaProp : schemaProperties )\n-        {\n-            if ( schemaProp == propertyId )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      return Optional.empty();\n     }\n+  };\n \n-    private static SchemaComputer<Optional<Integer>> getLabel = new SchemaComputer<Optional<Integer>>()\n+  private static SchemaComputer<Optional<Integer>> getRelType = new SchemaComputer<Optional<Integer>>()\n+  {\n+    @Override\n+    public Optional<Integer> computeSpecific(LabelSchemaDescriptor schema)\n     {\n-        @Override\n-        public Optional<Integer> computeSpecific( LabelSchemaDescriptor schema )\n-        {\n-            return Optional.of( schema.getLabelId() );\n-        }\n-\n-        @Override\n-        public Optional<Integer> computeSpecific( RelationTypeSchemaDescriptor schema )\n-        {\n-            return Optional.empty();\n-        }\n-    };\n+      return Optional.empty();\n+    }\n \n-    private static SchemaComputer<Optional<Integer>> getRelType = new SchemaComputer<Optional<Integer>>()\n+    @Override\n+    public Optional<Integer> computeSpecific(RelationTypeSchemaDescriptor schema)\n     {\n-        @Override\n-        public Optional<Integer> computeSpecific( LabelSchemaDescriptor schema )\n-        {\n-            return Optional.empty();\n-        }\n-\n-        @Override\n-        public Optional<Integer> computeSpecific( RelationTypeSchemaDescriptor schema )\n-        {\n-            return Optional.of( schema.getRelTypeId() );\n-        }\n-    };\n+      return Optional.of(schema.getRelTypeId());\n+    }\n+  };\n }\n",
            "diff_size": 96
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1702/SchemaDescriptorPredicates.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1702/SchemaDescriptorPredicates.java\nindex e9549dd372b..c865453e97f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1702/SchemaDescriptorPredicates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1702/SchemaDescriptorPredicates.java\n@@ -105,4 +105,4 @@ public class SchemaDescriptorPredicates\n             return Optional.of( schema.getRelTypeId() );\n         }\n     };\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}