{
    "project_name": "griddynamics-jagger",
    "error_id": "169",
    "information": {
        "errors": [
            {
                "line": "416",
                "severity": "warning",
                "message": "'enumeration' has incorrect indentation level 13, expected level should be 16.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "        Properties properties = System.getProperties();\n        for (Enumeration<String> enumeration = (Enumeration<String>) properties.propertyNames();\n             enumeration.hasMoreElements(); ) {\n            String key = enumeration.nextElement();\n            // overwrite due to higher priority\n            environmentProperties.put(key, properties.get(key));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "416",
                    "severity": "warning",
                    "message": "'enumeration' has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/169/JaggerLauncher.java\nindex a73c2fda6bc..9713117b509 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/169/JaggerLauncher.java\n@@ -413,7 +413,7 @@ public final class JaggerLauncher {\n         \n         Properties properties = System.getProperties();\n         for (Enumeration<String> enumeration = (Enumeration<String>) properties.propertyNames();\n-             enumeration.hasMoreElements(); ) {\n+        enumeration.hasMoreElements(); ) {\n             String key = enumeration.nextElement();\n             // overwrite due to higher priority\n             environmentProperties.put(key, properties.get(key));\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "416",
                    "severity": "warning",
                    "message": "'enumeration' has incorrect indentation level 13, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/169/JaggerLauncher.java\nindex a73c2fda6bc..eddaee1374f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/169/JaggerLauncher.java\n@@ -77,11 +77,11 @@ public final class JaggerLauncher {\n             \"./configuration/basic/default.environment.properties\";\n     private static final String DEFAULT_USER_ENVIRONMENT_PROPERTIES_LOCATION =\n             \"./configuration/basic/default.user.properties\";\n-    \n+\n     private static final Properties environmentProperties = new Properties();\n-    \n+\n     private static final Launches.LaunchManagerBuilder builder = Launches.builder();\n-    \n+\n     public static void main(String[] args) throws Exception {\n         Thread memoryMonitorThread = new Thread(\"memory-monitor\") {\n             @Override\n@@ -92,7 +92,7 @@ public final class JaggerLauncher {\n                                 \"Memory info: totalMemory={}, freeMemory={}\", Runtime.getRuntime().totalMemory(),\n                                 Runtime.getRuntime().freeMemory()\n                         );\n-                        \n+\n                         Thread.sleep(60000);\n                     } catch (InterruptedException e) {\n                         throw new RuntimeException(e);\n@@ -102,27 +102,27 @@ public final class JaggerLauncher {\n         };\n         memoryMonitorThread.setDaemon(true);\n         memoryMonitorThread.start();\n-        \n+\n         String pid = ManagementFactory.getRuntimeMXBean().getName();\n         System.out.println(String.format(\"PID:%s\", pid));\n-        \n+\n         Properties props = System.getProperties();\n         for (Map.Entry<Object, Object> prop : props.entrySet()) {\n             log.info(\"{}: '{}'\", prop.getKey(), prop.getValue());\n         }\n         log.info(\"\");\n-        \n+\n         URL directory = new URL(\"file:\" + System.getProperty(\"user.dir\") + \"/\");\n         loadBootProperties(directory, args[0], environmentProperties);\n-        \n+\n         log.debug(\"Bootstrap properties:\");\n         for (String propName : environmentProperties.stringPropertyNames()) {\n             log.debug(\"   {}={}\", propName, environmentProperties.getProperty(propName));\n         }\n-        \n+\n         String[] roles = environmentProperties.getProperty(ROLES).split(\",\");\n         Set<String> rolesSet = Sets.newHashSet(roles);\n-        \n+\n         if (rolesSet.contains(Role.COORDINATION_SERVER.toString())) {\n             launchCoordinationServer(directory);\n         }\n@@ -138,22 +138,22 @@ public final class JaggerLauncher {\n         if (rolesSet.contains(Role.KERNEL.toString())) {\n             launchKernel(directory);\n         }\n-        \n+\n         if (rolesSet.contains(Role.REPORTER.toString())) {\n             launchReporter(directory);\n         }\n-        \n+\n         LaunchManager launchManager = builder.build();\n         int result = launchManager.launch();\n         System.exit(result);\n     }\n-    \n+\n     private static void initCoordinator(ApplicationContext applicationContext) {\n         final Coordinator coordinator = (Coordinator) applicationContext.getBean(\"coordinator\");\n         coordinator.waitForReady();\n         coordinator.initialize();\n     }\n-    \n+\n     private static void launchMaster(final URL directory) {\n         LaunchTask masterTask = new LaunchTask() {\n             @Override\n@@ -161,10 +161,10 @@ public final class JaggerLauncher {\n                 try {\n                     boolean isStandByMode = Boolean.parseBoolean(\n                             environmentProperties.getProperty(\"realtime.enable.standby.mode\", \"false\"));\n-        \n+\n                     if (isStandByMode) {\n                         log.info(\"Starting Master in stand by mode...\");\n-            \n+\n                         MasterToJaasCoordinator masterToJaasCoordinator = new MasterToJaasCoordinator(\n                                 environmentProperties.getProperty(\"realtime.environment.id\"),\n                                 environmentProperties.getProperty(\"realtime.jaas.endpoint\"), Integer.parseInt(\n@@ -173,10 +173,10 @@ public final class JaggerLauncher {\n                         );\n                         masterToJaasCoordinator.register();\n                         while (masterToJaasCoordinator.isStandBy()) {\n-                \n+\n                             environmentProperties\n                                     .setProperty(TEST_CONFIG_NAME_PROP, masterToJaasCoordinator.awaitConfigToExecute());\n-                \n+\n                             doLaunchMaster(directory);\n                         }\n                     } else {\n@@ -190,13 +190,13 @@ public final class JaggerLauncher {\n         };\n         builder.addMainTask(masterTask);\n     }\n-    \n+\n     private static Set<String> getAvailableConfigurations(final URL directory) {\n         AbstractXmlApplicationContext context = loadContext(directory, MASTER_CONFIGURATION, environmentProperties);\n         ConfigurationGenerator configurationGenerator = context.getBean(ConfigurationGenerator.class);\n         return configurationGenerator.getUserJTestSuiteNames();\n     }\n-    \n+\n     private static void doLaunchMaster(final URL directory) {\n         AbstractXmlApplicationContext context = loadContext(directory, MASTER_CONFIGURATION, environmentProperties);\n         initCoordinator(context);\n@@ -204,10 +204,10 @@ public final class JaggerLauncher {\n         master.run();\n         context.destroy();\n     }\n-    \n+\n     private static void launchReporter(final URL directory) {\n         LaunchTask launchReporter = new LaunchTask() {\n-            \n+\n             @Override\n             public void run() {\n                 ApplicationContext context = loadContext(directory, REPORTER_CONFIGURATION, environmentProperties);\n@@ -215,28 +215,28 @@ public final class JaggerLauncher {\n                 reportingService.renderReport(true);\n             }\n         };\n-        \n+\n         builder.addMainTask(launchReporter);\n     }\n-    \n+\n     private static void launchKernel(final URL directory) {\n-        \n+\n         LaunchTask runKernel = new LaunchTask() {\n             private Kernel kernel;\n-            \n+\n             @Override\n             public void run() {\n                 log.info(\"Starting Kernel\");\n-                \n+\n                 ApplicationContext context = loadContext(directory, KERNEL_CONFIGURATION, environmentProperties);\n-                \n+\n                 final CountDownLatch latch = new CountDownLatch(1);\n                 final Coordinator coordinator = (Coordinator) context.getBean(\"coordinator\");\n-                \n+\n                 kernel = (Kernel) context.getBean(\"kernel\");\n-                \n+\n                 toTerminate(kernel);\n-                \n+\n                 Runnable kernelRunner = () -> {\n                     try {\n                         latch.await();\n@@ -245,46 +245,46 @@ public final class JaggerLauncher {\n                     }\n                     kernel.run();\n                 };\n-                \n+\n                 getExecutor().execute(kernelRunner);\n-                \n+\n                 coordinator.waitForReady();\n                 coordinator.waitForInitialization();\n-                \n+\n                 latch.countDown();\n             }\n         };\n-        \n+\n         builder.addBackgroundTask(runKernel);\n     }\n-    \n+\n     private static void launchRdbServer(final URL directory) {\n         log.info(\"Starting RDB Server\");\n-        \n-        \n+\n+\n         LaunchTask rdbRunner = new LaunchTask() {\n             @Override\n             public void run() {\n                 ApplicationContext context = loadContext(directory, RDB_CONFIGURATION, environmentProperties);\n-                \n+\n                 H2DatabaseServer dbServer = (H2DatabaseServer) context.getBean(\"databaseServer\");\n-                \n+\n                 dbServer.run();\n             }\n         };\n-        \n+\n         builder.addBackgroundTask(rdbRunner);\n     }\n-    \n+\n     private static void launchCoordinationServer(final URL directory) {\n         LaunchTask zookeeperInitializer = new LaunchTask() {\n-            \n+\n             //            private ZooKeeperServer zooKeeper;\n             private AttendantServer server;\n-            \n+\n             public void run() {\n                 log.info(\"Starting Coordination Server\");\n-                \n+\n                 ApplicationContext context = loadContext(directory, COORDINATION_CONFIGURATION, environmentProperties);\n                 server = (AttendantServer) context.getBean(\"coordinatorServer\");\n                 toTerminate(server);\n@@ -292,21 +292,21 @@ public final class JaggerLauncher {\n                 server.initialize();\n             }\n         };\n-        \n+\n         builder.addMainTask(zookeeperInitializer);\n     }\n-    \n+\n     private static void launchCometdCoordinationServer(final URL directory) {\n-        \n+\n         LaunchTask jettyRunner = new LaunchTask() {\n             public void run() {\n                 log.info(\"Starting Cometd Coordination Server\");\n-                \n+\n                 ApplicationContext context =\n                         loadContext(directory, COORDINATION_HTTP_CONFIGURATION, environmentProperties);\n-                \n+\n                 initCoordinator(context);\n-                \n+\n                 Server jettyServer = (Server) context.getBean(\"jettyServer\");\n                 try {\n                     jettyServer.start();\n@@ -317,21 +317,21 @@ public final class JaggerLauncher {\n         };\n         builder.addMainTask(jettyRunner);\n     }\n-    \n+\n     public static AbstractXmlApplicationContext loadContext(URL directory, String role, Properties environmentProperties) {\n         String[] includePatterns = StringUtils.split(environmentProperties.getProperty(role + INCLUDE_SUFFIX), \", \");\n         String[] excludePatterns = StringUtils.split(environmentProperties.getProperty(role + EXCLUDE_SUFFIX), \", \");\n-        \n+\n         List<String> descriptors = discoverResources(directory, includePatterns, excludePatterns);\n         log.info(\"Discovered descriptors:\");\n         for (String descriptor : descriptors) {\n             log.info(\"   \" + descriptor);\n         }\n-        \n+\n         return new JaggerXmlApplicationContext(\n                 directory, environmentProperties, descriptors.toArray(new String[descriptors.size()]));\n     }\n-    \n+\n     private static List<String> discoverResources(URL directory, String[] includePatterns, String[] excludePatterns) {\n         PathMatchingResourcePatternResolver resolver =\n                 new PathMatchingResourcePatternResolver(new FileSystemResourceLoader());\n@@ -356,22 +356,22 @@ public final class JaggerLauncher {\n         } catch (IOException e) {\n             throw new TechnicalException(e);\n         }\n-        \n+\n         return resourceNames;\n     }\n-    \n+\n     public static void loadBootProperties(URL directory, String environmentPropertiesLocation,\n                                           Properties environmentProperties\n     ) throws IOException {\n-        \n+\n         // priorities\n         // low priority (default properties - environment props - user props - system properties) high priority\n-        \n+\n         // properties from command line - environment properties\n         URL bootPropertiesFile = new URL(directory, environmentPropertiesLocation);\n         System.setProperty(ENVIRONMENT_PROPERTIES, environmentPropertiesLocation);\n         environmentProperties.load(bootPropertiesFile.openStream());\n-        \n+\n         // user properties\n         String userBootPropertiesLocationsString = System.getProperty(USER_ENVIRONMENT_PROPERTIES);\n         if (userBootPropertiesLocationsString == null) {\n@@ -381,18 +381,18 @@ public final class JaggerLauncher {\n             userBootPropertiesLocationsString = DEFAULT_USER_ENVIRONMENT_PROPERTIES_LOCATION;\n         }\n         String[] userBootPropertiesSingleLocations = userBootPropertiesLocationsString.split(\",\");\n-        \n+\n         for (String location : userBootPropertiesSingleLocations) {\n             URL userBootPropertiesFile = new URL(directory, location);\n             Properties userBootProperties = new Properties();\n             userBootProperties.load(userBootPropertiesFile.openStream());\n-            \n+\n             for (String name : userBootProperties.stringPropertyNames()) {\n                 // overwrite due to higher priority\n                 environmentProperties.setProperty(name, userBootProperties.getProperty(name));\n             }\n         }\n-        \n+\n         // default properties\n         String defaultBootPropertiesLocation = System.getProperty(DEFAULT_ENVIRONMENT_PROPERTIES);\n         if (defaultBootPropertiesLocation == null) {\n@@ -410,7 +410,7 @@ public final class JaggerLauncher {\n                 environmentProperties.setProperty(name, defaultBootProperties.getProperty(name));\n             }\n         }\n-        \n+\n         Properties properties = System.getProperties();\n         for (Enumeration<String> enumeration = (Enumeration<String>) properties.propertyNames();\n              enumeration.hasMoreElements(); ) {\n@@ -418,7 +418,7 @@ public final class JaggerLauncher {\n             // overwrite due to higher priority\n             environmentProperties.put(key, properties.get(key));\n         }\n-        \n+\n         System.setProperty(ENVIRONMENT_PROPERTIES, environmentPropertiesLocation);\n         System.setProperty(USER_ENVIRONMENT_PROPERTIES, userBootPropertiesLocationsString);\n         System.setProperty(DEFAULT_ENVIRONMENT_PROPERTIES, defaultBootPropertiesLocation);\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "416",
                    "severity": "warning",
                    "message": "'enumeration' has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/169/JaggerLauncher.java\nindex a73c2fda6bc..9713117b509 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/169/JaggerLauncher.java\n@@ -413,7 +413,7 @@ public final class JaggerLauncher {\n         \n         Properties properties = System.getProperties();\n         for (Enumeration<String> enumeration = (Enumeration<String>) properties.propertyNames();\n-             enumeration.hasMoreElements(); ) {\n+        enumeration.hasMoreElements(); ) {\n             String key = enumeration.nextElement();\n             // overwrite due to higher priority\n             environmentProperties.put(key, properties.get(key));\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "416",
                    "severity": "warning",
                    "message": "'enumeration' has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/169/JaggerLauncher.java\nindex a73c2fda6bc..e01704a9f10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/169/JaggerLauncher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/169/JaggerLauncher.java\n@@ -413,7 +413,7 @@ public final class JaggerLauncher {\n         \n         Properties properties = System.getProperties();\n         for (Enumeration<String> enumeration = (Enumeration<String>) properties.propertyNames();\n-             enumeration.hasMoreElements(); ) {\n+enumeration.hasMoreElements(); ) {\n             String key = enumeration.nextElement();\n             // overwrite due to higher priority\n             environmentProperties.put(key, properties.get(key));\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}