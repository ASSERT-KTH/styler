{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2709",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "129",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "145",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2709/WritableAbstractDatabaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2709/WritableAbstractDatabaseIndex.java\nindex 9bd3a7b5217..a5005f9f686 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2709/WritableAbstractDatabaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2709/WritableAbstractDatabaseIndex.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index;\n \n import java.io.File;\n@@ -30,187 +31,184 @@ import org.neo4j.kernel.api.impl.index.partition.AbstractIndexPartition;\n /**\n  * Writable lucene index representation that wraps provided index implementation and\n  * allow read only operations only on top of it.\n+ *\n  * @param <T> - particular index implementation\n  */\n public class WritableAbstractDatabaseIndex<T extends AbstractLuceneIndex> implements DatabaseIndex\n {\n-    // lock used to guard commits and close of lucene indexes from separate threads\n-    protected final ReentrantLock commitCloseLock = new ReentrantLock();\n-\n-    protected T luceneIndex;\n-\n-    public WritableAbstractDatabaseIndex( T luceneIndex )\n-    {\n-        this.luceneIndex = luceneIndex;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void create() throws IOException\n-    {\n-        luceneIndex.create();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void open() throws IOException\n-    {\n-        luceneIndex.open();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public boolean isOpen()\n-    {\n-        return luceneIndex.isOpen();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public boolean isReadOnly()\n-    {\n-        return false;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public boolean exists() throws IOException\n-    {\n-        return luceneIndex.exists();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public boolean isValid()\n-    {\n-        return luceneIndex.isValid();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void drop() throws IOException\n-    {\n-        commitCloseLock.lock();\n-        try\n-        {\n-            luceneIndex.drop();\n-        }\n-        finally\n-        {\n-            commitCloseLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void flush() throws IOException\n-    {\n-        commitCloseLock.lock();\n-        try\n-        {\n-            luceneIndex.flush( false );\n-        }\n-        finally\n-        {\n-            commitCloseLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void close() throws IOException\n-    {\n-        commitCloseLock.lock();\n-        try\n-        {\n-            luceneIndex.close();\n-        }\n-        finally\n-        {\n-            commitCloseLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public LuceneAllDocumentsReader allDocumentsReader()\n-    {\n-        return luceneIndex.allDocumentsReader();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public ResourceIterator<File> snapshot() throws IOException\n-    {\n-        commitCloseLock.lock();\n-        try\n-        {\n-            return luceneIndex.snapshot();\n-        }\n-        finally\n-        {\n-            commitCloseLock.unlock();\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void maybeRefreshBlocking() throws IOException\n-    {\n-        luceneIndex.maybeRefreshBlocking();\n-    }\n-\n-    /**\n-     * Add new partition to the index. Must only be called by a single thread at a time.\n-     *\n-     * @return newly created partition\n-     * @throws IOException\n-     */\n-    public AbstractIndexPartition addNewPartition() throws IOException\n-    {\n-        return luceneIndex.addNewPartition();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public List<AbstractIndexPartition> getPartitions()\n-    {\n-        return luceneIndex.getPartitions();\n-    }\n-\n-    public boolean hasSinglePartition( List<AbstractIndexPartition> partitions )\n-    {\n-        return luceneIndex.hasSinglePartition( partitions );\n-    }\n-\n-    public AbstractIndexPartition getFirstPartition( List<AbstractIndexPartition> partitions )\n-    {\n-        return luceneIndex.getFirstPartition( partitions );\n-    }\n+  // lock used to guard commits and close of lucene indexes from separate threads\n+  protected final ReentrantLock commitCloseLock = new ReentrantLock();\n+\n+  protected T luceneIndex;\n+\n+  public WritableAbstractDatabaseIndex(T luceneIndex)\n+  {\n+    this.luceneIndex = luceneIndex;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void create() throws IOException\n+  {\n+    luceneIndex.create();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void open() throws IOException\n+  {\n+    luceneIndex.open();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isOpen()\n+  {\n+    return luceneIndex.isOpen();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isReadOnly()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean exists() throws IOException\n+  {\n+    return luceneIndex.exists();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public boolean isValid()\n+  {\n+    return luceneIndex.isValid();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void drop() throws IOException\n+  {\n+    commitCloseLock.lock();\n+    try\n+    {\n+      luceneIndex.drop();\n+    } finally\n+    {\n+      commitCloseLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void flush() throws IOException\n+  {\n+    commitCloseLock.lock();\n+    try\n+    {\n+      luceneIndex.flush(false);\n+    } finally\n+    {\n+      commitCloseLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void close() throws IOException\n+  {\n+    commitCloseLock.lock();\n+    try\n+    {\n+      luceneIndex.close();\n+    } finally\n+    {\n+      commitCloseLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public LuceneAllDocumentsReader allDocumentsReader()\n+  {\n+    return luceneIndex.allDocumentsReader();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public ResourceIterator<File> snapshot() throws IOException\n+  {\n+    commitCloseLock.lock();\n+    try\n+    {\n+      return luceneIndex.snapshot();\n+    } finally\n+    {\n+      commitCloseLock.unlock();\n+    }\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void maybeRefreshBlocking() throws IOException\n+  {\n+    luceneIndex.maybeRefreshBlocking();\n+  }\n+\n+  /**\n+   * Add new partition to the index. Must only be called by a single thread at a time.\n+   *\n+   * @return newly created partition\n+   * @throws IOException\n+   */\n+  public AbstractIndexPartition addNewPartition() throws IOException\n+  {\n+    return luceneIndex.addNewPartition();\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public List<AbstractIndexPartition> getPartitions()\n+  {\n+    return luceneIndex.getPartitions();\n+  }\n+\n+  public boolean hasSinglePartition(List<AbstractIndexPartition> partitions)\n+  {\n+    return luceneIndex.hasSinglePartition(partitions);\n+  }\n+\n+  public AbstractIndexPartition getFirstPartition(List<AbstractIndexPartition> partitions)\n+  {\n+    return luceneIndex.getFirstPartition(partitions);\n+  }\n }\n",
            "diff_size": 181
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2709/WritableAbstractDatabaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2709/WritableAbstractDatabaseIndex.java\nindex 9bd3a7b5217..530f9029d55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2709/WritableAbstractDatabaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2709/WritableAbstractDatabaseIndex.java\n@@ -213,4 +213,4 @@ public class WritableAbstractDatabaseIndex<T extends AbstractLuceneIndex> implem\n     {\n         return luceneIndex.getFirstPartition( partitions );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}