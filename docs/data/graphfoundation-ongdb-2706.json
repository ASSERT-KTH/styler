{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2706",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2706/MapIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2706/MapIterable.java\nindex d89f0b1b6b3..cb6af0fd654 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2706/MapIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2706/MapIterable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers.collection;\n \n import java.util.Iterator;\n@@ -24,51 +25,51 @@ import java.util.function.Function;\n \n class MapIterable<FROM, TO> implements Iterable<TO>\n {\n-    private final Iterable<FROM> from;\n-    private final Function<? super FROM,? extends TO> function;\n+  private final Iterable<FROM> from;\n+  private final Function<? super FROM, ? extends TO> function;\n+\n+  MapIterable(Iterable<FROM> from, Function<? super FROM, ? extends TO> function)\n+  {\n+    this.from = from;\n+    this.function = function;\n+  }\n+\n+  @Override\n+  public Iterator<TO> iterator()\n+  {\n+    return new MapIterator<>(from.iterator(), function);\n+  }\n \n-    MapIterable( Iterable<FROM> from, Function<? super FROM,? extends TO> function )\n+  static class MapIterator<FROM, TO>\n+      implements Iterator<TO>\n+  {\n+    private final Iterator<FROM> fromIterator;\n+    private final Function<? super FROM, ? extends TO> function;\n+\n+    MapIterator(Iterator<FROM> fromIterator, Function<? super FROM, ? extends TO> function)\n     {\n-        this.from = from;\n-        this.function = function;\n+      this.fromIterator = fromIterator;\n+      this.function = function;\n     }\n \n     @Override\n-    public Iterator<TO> iterator()\n+    public boolean hasNext()\n     {\n-        return new MapIterator<>( from.iterator(), function );\n+      return fromIterator.hasNext();\n     }\n \n-    static class MapIterator<FROM, TO>\n-            implements Iterator<TO>\n+    @Override\n+    public TO next()\n     {\n-        private final Iterator<FROM> fromIterator;\n-        private final Function<? super FROM,? extends TO> function;\n-\n-        MapIterator( Iterator<FROM> fromIterator, Function<? super FROM,? extends TO> function )\n-        {\n-            this.fromIterator = fromIterator;\n-            this.function = function;\n-        }\n+      FROM from = fromIterator.next();\n \n-        @Override\n-        public boolean hasNext()\n-        {\n-            return fromIterator.hasNext();\n-        }\n-\n-        @Override\n-        public TO next()\n-        {\n-            FROM from = fromIterator.next();\n-\n-            return function.apply( from );\n-        }\n+      return function.apply(from);\n+    }\n \n-        @Override\n-        public void remove()\n-        {\n-            fromIterator.remove();\n-        }\n+    @Override\n+    public void remove()\n+    {\n+      fromIterator.remove();\n     }\n+  }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2706/MapIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2706/MapIterable.java\nindex d89f0b1b6b3..cf3569d605d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2706/MapIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2706/MapIterable.java\n@@ -22,12 +22,12 @@ package org.neo4j.helpers.collection;\n import java.util.Iterator;\n import java.util.function.Function;\n \n-class MapIterable<FROM, TO> implements Iterable<TO>\n+class MapIterable<FROM,TO> implements Iterable<TO>\n {\n     private final Iterable<FROM> from;\n-    private final Function<? super FROM,? extends TO> function;\n+    private final Function<? super FROM, ? extends TO> function;\n \n-    MapIterable( Iterable<FROM> from, Function<? super FROM,? extends TO> function )\n+    MapIterable( Iterable<FROM> from, Function<? super FROM, ? extends TO> function )\n     {\n         this.from = from;\n         this.function = function;\n@@ -39,13 +39,12 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n         return new MapIterator<>( from.iterator(), function );\n     }\n \n-    static class MapIterator<FROM, TO>\n-            implements Iterator<TO>\n+    static class MapIterator<FROM, TO> implements Iterator<TO>\n     {\n         private final Iterator<FROM> fromIterator;\n-        private final Function<? super FROM,? extends TO> function;\n+        private final Function<? super FROM, ? extends TO> function;\n \n-        MapIterator( Iterator<FROM> fromIterator, Function<? super FROM,? extends TO> function )\n+        MapIterator( Iterator<FROM> fromIterator, Function<? super FROM, ? extends TO> function )\n         {\n             this.fromIterator = fromIterator;\n             this.function = function;\n@@ -61,8 +60,7 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n         public TO next()\n         {\n             FROM from = fromIterator.next();\n-\n-            return function.apply( from );\n+return function.apply( from );\n         }\n \n         @Override\n@@ -71,4 +69,4 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n             fromIterator.remove();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "25",
                    "column": "19",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "25",
                    "column": "19",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "42",
                    "column": "30",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "42",
                    "column": "30",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2706/MapIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2706/MapIterable.java\nindex d89f0b1b6b3..6cb6b51db70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2706/MapIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2706/MapIterable.java\n@@ -22,12 +22,12 @@ package org.neo4j.helpers.collection;\n import java.util.Iterator;\n import java.util.function.Function;\n \n-class MapIterable<FROM, TO> implements Iterable<TO>\n+class MapIterable < FROM, TO> implements Iterable<TO>\n {\n     private final Iterable<FROM> from;\n-    private final Function<? super FROM,? extends TO> function;\n+    private final Function<? super FROM, ? extends TO> function;\n \n-    MapIterable( Iterable<FROM> from, Function<? super FROM,? extends TO> function )\n+    MapIterable( Iterable<FROM> from, Function<? super FROM, ? extends TO> function )\n     {\n         this.from = from;\n         this.function = function;\n@@ -39,13 +39,12 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n         return new MapIterator<>( from.iterator(), function );\n     }\n \n-    static class MapIterator<FROM, TO>\n-            implements Iterator<TO>\n+    static class MapIterator < FROM, TO> implements Iterator<TO>\n     {\n         private final Iterator<FROM> fromIterator;\n-        private final Function<? super FROM,? extends TO> function;\n+        private final Function<? super FROM, ? extends TO> function;\n \n-        MapIterator( Iterator<FROM> fromIterator, Function<? super FROM,? extends TO> function )\n+        MapIterator( Iterator<FROM> fromIterator, Function<? super FROM, ? extends TO> function )\n         {\n             this.fromIterator = fromIterator;\n             this.function = function;\n@@ -61,7 +60,6 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n         public TO next()\n         {\n             FROM from = fromIterator.next();\n-\n             return function.apply( from );\n         }\n \n@@ -71,4 +69,4 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n             fromIterator.remove();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}