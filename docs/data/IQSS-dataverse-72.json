{
    "project_name": "IQSS-dataverse",
    "error_id": "72",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n    @NamedQuery(name = \"DvObject.ownedObjectsById\",\n\t\t\tquery=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n    @NamedQuery(name = \"DvObject.findByGlobalId\",\n            query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/72/DvObject.java\nindex 09a2ef85893..638307b39ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/72/DvObject.java\n@@ -23,7 +23,7 @@ import javax.persistence.*;\n     @NamedQuery(name = \"DvObject.checkExists\", \n             query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n     @NamedQuery(name = \"DvObject.ownedObjectsById\",\n-\t\t\tquery=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n+query=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n     @NamedQuery(name = \"DvObject.findByGlobalId\",\n             query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/72/DvObject.java\nindex 09a2ef85893..9a3d84a171c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/72/DvObject.java\n@@ -16,26 +16,26 @@ import javax.persistence.*;\n  * @author michael\n  */\n @NamedQueries({\n-    @NamedQuery(name = \"DvObject.findAll\",\n-            query = \"SELECT o FROM DvObject o ORDER BY o.id\"),\n-    @NamedQuery(name = \"DvObject.findById\",\n-            query = \"SELECT o FROM DvObject o WHERE o.id=:id\"),\n-    @NamedQuery(name = \"DvObject.checkExists\", \n-            query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n-    @NamedQuery(name = \"DvObject.ownedObjectsById\",\n-\t\t\tquery=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n-    @NamedQuery(name = \"DvObject.findByGlobalId\",\n-            query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n-\n-    @NamedQuery(name = \"DvObject.findByAlternativeGlobalId\",\n-            query = \"SELECT o FROM DvObject o, AlternativePersistentIdentifier a  WHERE o.id = a.dvObject.id and a.identifier=:identifier and a.authority=:authority and a.protocol=:protocol and o.dtype=:dtype\"),\n-\n-    @NamedQuery(name = \"DvObject.findByProtocolIdentifierAuthority\",\n-            query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol\"),\n-    @NamedQuery(name = \"DvObject.findByOwnerId\", \n-                query = \"SELECT o FROM DvObject o WHERE o.owner.id=:ownerId  order by o.dtype desc, o.id\"),\n-    @NamedQuery(name = \"DvObject.findByAuthenticatedUserId\", \n-                query = \"SELECT o FROM DvObject o WHERE o.creator.id=:ownerId or o.releaseUser.id=:releaseUserId\")\n+  @NamedQuery(name = \"DvObject.findAll\",\n+    query = \"SELECT o FROM DvObject o ORDER BY o.id\"),\n+  @NamedQuery(name = \"DvObject.findById\",\n+    query = \"SELECT o FROM DvObject o WHERE o.id=:id\"),\n+  @NamedQuery(name = \"DvObject.checkExists\",\n+    query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n+  @NamedQuery(name = \"DvObject.ownedObjectsById\",\n+    query = \"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n+  @NamedQuery(name = \"DvObject.findByGlobalId\",\n+    query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n+\n+  @NamedQuery(name = \"DvObject.findByAlternativeGlobalId\",\n+    query = \"SELECT o FROM DvObject o, AlternativePersistentIdentifier a  WHERE o.id = a.dvObject.id and a.identifier=:identifier and a.authority=:authority and a.protocol=:protocol and o.dtype=:dtype\"),\n+\n+  @NamedQuery(name = \"DvObject.findByProtocolIdentifierAuthority\",\n+    query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol\"),\n+  @NamedQuery(name = \"DvObject.findByOwnerId\",\n+    query = \"SELECT o FROM DvObject o WHERE o.owner.id=:ownerId  order by o.dtype desc, o.id\"),\n+  @NamedQuery(name = \"DvObject.findByAuthenticatedUserId\",\n+    query = \"SELECT o FROM DvObject o WHERE o.creator.id=:ownerId or o.releaseUser.id=:releaseUserId\")\n })\n @Entity\n // Inheritance strategy \"JOINED\" will create 4 db tables - \n@@ -43,422 +43,431 @@ import javax.persistence.*;\n // dataverse, dataset and datafile. The ids from the main table will be reused\n // in the child tables. (i.e., the id sequences will be \"sparse\" in the 3 \n // child tables). Tested, appears to be working properly. -- L.A. Nov. 4 2014\n-@Inheritance(strategy=InheritanceType.JOINED)\n-@Table(indexes = {@Index(columnList=\"dtype\")\n-\t\t, @Index(columnList=\"owner_id\")\n-\t\t, @Index(columnList=\"creator_id\")\n-\t\t, @Index(columnList=\"releaseuser_id\")},\n-\t\tuniqueConstraints = {@UniqueConstraint(columnNames = {\"authority,protocol,identifier\"}),@UniqueConstraint(columnNames = {\"owner_id,storageidentifier\"})})\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@Table(indexes = {@Index(columnList = \"dtype\")\n+  , @Index(columnList = \"owner_id\")\n+  , @Index(columnList = \"creator_id\")\n+  , @Index(columnList = \"releaseuser_id\")},\n+  uniqueConstraints = {@UniqueConstraint(columnNames = {\"authority,protocol,identifier\"}),\n+    @UniqueConstraint(columnNames = {\"owner_id,storageidentifier\"})})\n public abstract class DvObject extends DataverseEntity implements java.io.Serializable {\n-    \n-    public static final String DATAVERSE_DTYPE_STRING = \"Dataverse\";\n-    public static final String DATASET_DTYPE_STRING = \"Dataset\";\n-    public static final String DATAFILE_DTYPE_STRING = \"DataFile\";\n-    public static final List<String> DTYPE_LIST = Arrays.asList(DATAVERSE_DTYPE_STRING, DATASET_DTYPE_STRING, DATAFILE_DTYPE_STRING);\n-    \n-    public static final Visitor<String> NamePrinter = new Visitor<String>(){\n-\n-        @Override\n-        public String visit(Dataverse dv) {\n-            return dv.getName();\n-        }\n-\n-        @Override\n-        public String visit(Dataset ds) {\n-            return ds.getLatestVersion().getTitle();\n-        }\n-\n-        @Override\n-        public String visit(DataFile df) {\n-            return df.getFileMetadata().getLabel();\n-        }\n-    };\n-    public static final Visitor<String> NameIdPrinter = new Visitor<String>(){\n-\n-        @Override\n-        public String visit(Dataverse dv) {\n-            return \"[\" + dv.getId() + \" \" + dv.getName() + \"]\";\n-        }\n-\n-        @Override\n-        public String visit(Dataset ds) {\n-            return \"[\" + ds.getId() + (ds.getLatestVersion() != null ? \" \" + ds.getLatestVersion().getTitle() : \"\") + \"]\";\n-        }\n-\n-        @Override\n-        public String visit(DataFile df) {\n-            return \"[\" + df.getId() + (df.getFileMetadata() != null ? \" \" + df.getFileMetadata().getLabel() : \"\") + \"]\";\n-        }\n-    };\n-    \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long id;\n-\n-    @ManyToOne\n-    private DvObject owner;\n-\n-    private Timestamp publicationDate;\n-\n-    /** The user that released this dataverse */\n-    @ManyToOne\n-    private AuthenticatedUser releaseUser;\n-    \n-    @Column( nullable = false )\n-    private Timestamp createDate;\n-\n-    @Column(nullable = false)\n-    private Timestamp modificationTime;\n-\n-    /**\n-     * @todo Rename this to contentIndexTime (or something) to differentiate it\n-     * from permissionIndexTime. Content Solr docs vs. permission Solr docs.\n-     */\n-    private Timestamp indexTime;\n-\n-    @Column(nullable = true)\n-    private Timestamp permissionModificationTime;\n-\n-    private Timestamp permissionIndexTime;\n-    \n-    @Column\n-    private String storageIdentifier;\n-    \n-    @Column(insertable = false, updatable = false) private String dtype;\n-    \n-    /*\n-    * Add DOI related fields\n-    */\n-   \n-    private String protocol;\n-    private String authority;\n-\n-    @Temporal(value = TemporalType.TIMESTAMP)\n-    private Date globalIdCreateTime;\n-\n-    private String identifier;\n-    \n-    private boolean identifierRegistered;\n-    \n-    @OneToMany(mappedBy = \"dvObject\", cascade = CascadeType.ALL, orphanRemoval = true)\n-    private Set<AlternativePersistentIdentifier> alternativePersistentIndentifiers;\n-\n-    public Set<AlternativePersistentIdentifier> getAlternativePersistentIndentifiers() {\n-        return alternativePersistentIndentifiers;\n-    }\n \n-    public void setAlternativePersistentIndentifiers(Set<AlternativePersistentIdentifier> alternativePersistentIndentifiers) {\n-        this.alternativePersistentIndentifiers = alternativePersistentIndentifiers;\n-    }\n-        \n-    \n-    /**\n-     * previewImageAvailable could also be thought of as \"thumbnail has been\n-     * generated. However, were all three thumbnails generated? We might need a\n-     * boolean per thumbnail size.\n-     */\n-    private boolean previewImageAvailable;\n-    \n-    public boolean isPreviewImageAvailable() {\n-        return previewImageAvailable;\n+  public static final String DATAVERSE_DTYPE_STRING = \"Dataverse\";\n+  public static final String DATASET_DTYPE_STRING = \"Dataset\";\n+  public static final String DATAFILE_DTYPE_STRING = \"DataFile\";\n+  public static final List<String> DTYPE_LIST =\n+    Arrays.asList(DATAVERSE_DTYPE_STRING, DATASET_DTYPE_STRING, DATAFILE_DTYPE_STRING);\n+\n+  public static final Visitor<String> NamePrinter = new Visitor<String>() {\n+\n+    @Override\n+    public String visit(Dataverse dv) {\n+      return dv.getName();\n     }\n-    \n-    public void setPreviewImageAvailable(boolean status) {\n-        this.previewImageAvailable = status;\n+\n+    @Override\n+    public String visit(Dataset ds) {\n+      return ds.getLatestVersion().getTitle();\n     }\n \n-    public Timestamp getModificationTime() {\n-        return modificationTime;\n+    @Override\n+    public String visit(DataFile df) {\n+      return df.getFileMetadata().getLabel();\n     }\n+  };\n+  public static final Visitor<String> NameIdPrinter = new Visitor<String>() {\n \n-    /**\n-     * modificationTime is used for comparison with indexTime so we know if the\n-     * Solr index is stale.\n-     * @param modificationTime\n-     */\n-    public void setModificationTime(Timestamp modificationTime) {\n-        this.modificationTime = modificationTime;\n+    @Override\n+    public String visit(Dataverse dv) {\n+      return \"[\" + dv.getId() + \" \" + dv.getName() + \"]\";\n     }\n \n-    public Timestamp getIndexTime() {\n-        return indexTime;\n+    @Override\n+    public String visit(Dataset ds) {\n+      return \"[\" + ds.getId() + (ds.getLatestVersion() != null ? \" \" + ds.getLatestVersion().getTitle() : \"\") + \"]\";\n     }\n \n-    /**\n-     * indexTime is used for comparison with modificationTime so we know if the\n-     * Solr index is stale.\n-     * @param indexTime\n-     */\n-    public void setIndexTime(Timestamp indexTime) {\n-        this.indexTime = indexTime;\n+    @Override\n+    public String visit(DataFile df) {\n+      return \"[\" + df.getId() + (df.getFileMetadata() != null ? \" \" + df.getFileMetadata().getLabel() : \"\") + \"]\";\n     }\n+  };\n \n-    @ManyToOne\n-    private AuthenticatedUser creator;\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long id;\n \n-    public interface Visitor<T> {\n-        public T visit(Dataverse dv);\n-        public T visit(Dataset   ds);\n-        public T visit(DataFile  df);\n-    }\n+  @ManyToOne\n+  private DvObject owner;\n \n-    /**\n-     * Sets the owner of the object. This is {@code protected} rather than\n-     * {@code public}, since different sub-classes have different possible owner\n-     * types: a {@link DataFile} can only have a {@link Dataset}, for example.\n-     *\n-     * @param newOwner\n-     */\n-    protected void setOwner(DvObjectContainer newOwner) {\n-        owner = newOwner;\n-    }\n+  private Timestamp publicationDate;\n \n-    public DvObjectContainer getOwner() {\n-        return (DvObjectContainer)owner;\n-    }\n+  /**\n+   * The user that released this dataverse\n+   */\n+  @ManyToOne\n+  private AuthenticatedUser releaseUser;\n \n-    public Long getId() {\n-        return id;\n-    }\n+  @Column(nullable = false)\n+  private Timestamp createDate;\n \n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-    \n-    /**\n-     * @return Whether {@code this} takes no permissions from roles assigned on its parents.\n-     */\n-    public abstract boolean isEffectivelyPermissionRoot();\n-\n-    public Timestamp getPublicationDate() {\n-        return publicationDate;\n-    }\n+  @Column(nullable = false)\n+  private Timestamp modificationTime;\n \n-    public void setPublicationDate(Timestamp publicationDate) {\n-        this.publicationDate = publicationDate;\n-    }\n+  /**\n+   * @todo Rename this to contentIndexTime (or something) to differentiate it\n+   * from permissionIndexTime. Content Solr docs vs. permission Solr docs.\n+   */\n+  private Timestamp indexTime;\n \n-    public AuthenticatedUser getReleaseUser() {\n-        return releaseUser;\n-    }\n-    \n-    public void setReleaseUser(AuthenticatedUser releaseUser) {\n-        this.releaseUser = releaseUser;\n-    }\n+  @Column(nullable = true)\n+  private Timestamp permissionModificationTime;\n \n-    public boolean isReleased() {\n-        return publicationDate != null;\n-    }\n+  private Timestamp permissionIndexTime;\n \n-    public Timestamp getCreateDate() {\n-        return createDate;\n-    }\n+  @Column\n+  private String storageIdentifier;\n \n-    public void setCreateDate(Timestamp createDate) {\n-        this.createDate = createDate;\n-    }\n+  @Column(insertable = false, updatable = false)\n+  private String dtype;\n \n-    public AuthenticatedUser getCreator() {\n-        return creator;\n-    }\n+  /*\n+   * Add DOI related fields\n+   */\n \n-    public void setCreator(AuthenticatedUser creator) {\n-        this.creator = creator;\n-    }\n-    \n-     public String getProtocol() {\n-        return protocol;\n-    }\n+  private String protocol;\n+  private String authority;\n \n-    public void setProtocol(String protocol) {\n-        this.protocol = protocol;\n-    }\n+  @Temporal(value = TemporalType.TIMESTAMP)\n+  private Date globalIdCreateTime;\n \n-    public String getAuthority() {\n-        return authority;\n-    }\n+  private String identifier;\n \n-    public void setAuthority(String authority) {\n-        this.authority = authority;\n-    }\n+  private boolean identifierRegistered;\n \n-    public Date getGlobalIdCreateTime() {\n-        return globalIdCreateTime;\n-    }\n+  @OneToMany(mappedBy = \"dvObject\", cascade = CascadeType.ALL, orphanRemoval = true)\n+  private Set<AlternativePersistentIdentifier> alternativePersistentIndentifiers;\n \n-    public void setGlobalIdCreateTime(Date globalIdCreateTime) {\n-        this.globalIdCreateTime = globalIdCreateTime;\n-    }\n+  public Set<AlternativePersistentIdentifier> getAlternativePersistentIndentifiers() {\n+    return alternativePersistentIndentifiers;\n+  }\n \n-    public String getIdentifier() {\n-        return identifier;\n-    }\n+  public void setAlternativePersistentIndentifiers(\n+    Set<AlternativePersistentIdentifier> alternativePersistentIndentifiers) {\n+    this.alternativePersistentIndentifiers = alternativePersistentIndentifiers;\n+  }\n \n-    public void setIdentifier(String identifier) {\n-        this.identifier = identifier;\n-    }\n \n-    public boolean isIdentifierRegistered() {\n-        return identifierRegistered;\n-    } \n-\n-    public void setIdentifierRegistered(boolean identifierRegistered) {\n-        this.identifierRegistered = identifierRegistered;\n-    }  \n-    \n-    /**\n-     * \n-     * @return This object's global id in a string form.\n-     * @deprecated use {@code dvobj.getGlobalId().asString()}.\n-     */\n-    public String getGlobalIdString() {       \n-        final GlobalId globalId = getGlobalId();\n-        return globalId != null ? globalId.asString() : null;\n-    }\n-    \n-    public void setGlobalId( GlobalId pid ) {\n-        if ( pid == null ) {\n-            setProtocol(null);\n-            setAuthority(null);\n-            setIdentifier(null);\n-        } else {\n-            setProtocol(pid.getProtocol());\n-            setAuthority(pid.getAuthority());\n-            setIdentifier(pid.getIdentifier());\n-        }\n-    }\n-    \n-    public GlobalId getGlobalId() {\n-        // FIXME should return NULL when the fields are null. Currenntly, \n-        //       a lot of code depends call this method, so this fix can't be \n-        //       a part of the current PR.\n-        return new GlobalId(getProtocol(), getAuthority(), getIdentifier());\n-    }\n-    \n-    public abstract <T> T accept(Visitor<T> v);\n+  /**\n+   * previewImageAvailable could also be thought of as \"thumbnail has been\n+   * generated. However, were all three thumbnails generated? We might need a\n+   * boolean per thumbnail size.\n+   */\n+  private boolean previewImageAvailable;\n \n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(getId());\n-    }\n+  public boolean isPreviewImageAvailable() {\n+    return previewImageAvailable;\n+  }\n \n-    @Override\n-    public abstract boolean equals(Object o);\n+  public void setPreviewImageAvailable(boolean status) {\n+    this.previewImageAvailable = status;\n+  }\n \n-    @Override\n-    public String toString() {\n-        String classNameComps[] = getClass().getName().split(\"\\\\.\");\n-        return String.format(\"[%s id:%d %s]\", classNameComps[classNameComps.length - 1],\n-                getId(), toStringExtras());\n-    }\n+  public Timestamp getModificationTime() {\n+    return modificationTime;\n+  }\n \n-    /**\n-     * Convenience method to add data to the default toString output.\n-     *\n-     * @return\n-     */\n-    protected String toStringExtras() {\n-        return \"\";\n-    }\n-    \n-    public abstract String getDisplayName();\n-    \n-    public abstract String getCurrentName();\n-    \n-    // helper method used to mimic instanceof on JSF pge\n-    public boolean isInstanceofDataverse() {\n-        return this instanceof Dataverse;\n-    }        \n-\n-    public boolean isInstanceofDataset() {\n-        return this instanceof Dataset;\n+  /**\n+   * modificationTime is used for comparison with indexTime so we know if the\n+   * Solr index is stale.\n+   *\n+   * @param modificationTime\n+   */\n+  public void setModificationTime(Timestamp modificationTime) {\n+    this.modificationTime = modificationTime;\n+  }\n+\n+  public Timestamp getIndexTime() {\n+    return indexTime;\n+  }\n+\n+  /**\n+   * indexTime is used for comparison with modificationTime so we know if the\n+   * Solr index is stale.\n+   *\n+   * @param indexTime\n+   */\n+  public void setIndexTime(Timestamp indexTime) {\n+    this.indexTime = indexTime;\n+  }\n+\n+  @ManyToOne\n+  private AuthenticatedUser creator;\n+\n+  public interface Visitor<T> {\n+    public T visit(Dataverse dv);\n+\n+    public T visit(Dataset ds);\n+\n+    public T visit(DataFile df);\n+  }\n+\n+  /**\n+   * Sets the owner of the object. This is {@code protected} rather than\n+   * {@code public}, since different sub-classes have different possible owner\n+   * types: a {@link DataFile} can only have a {@link Dataset}, for example.\n+   *\n+   * @param newOwner\n+   */\n+  protected void setOwner(DvObjectContainer newOwner) {\n+    owner = newOwner;\n+  }\n+\n+  public DvObjectContainer getOwner() {\n+    return (DvObjectContainer) owner;\n+  }\n+\n+  public Long getId() {\n+    return id;\n+  }\n+\n+  public void setId(Long id) {\n+    this.id = id;\n+  }\n+\n+  /**\n+   * @return Whether {@code this} takes no permissions from roles assigned on its parents.\n+   */\n+  public abstract boolean isEffectivelyPermissionRoot();\n+\n+  public Timestamp getPublicationDate() {\n+    return publicationDate;\n+  }\n+\n+  public void setPublicationDate(Timestamp publicationDate) {\n+    this.publicationDate = publicationDate;\n+  }\n+\n+  public AuthenticatedUser getReleaseUser() {\n+    return releaseUser;\n+  }\n+\n+  public void setReleaseUser(AuthenticatedUser releaseUser) {\n+    this.releaseUser = releaseUser;\n+  }\n+\n+  public boolean isReleased() {\n+    return publicationDate != null;\n+  }\n+\n+  public Timestamp getCreateDate() {\n+    return createDate;\n+  }\n+\n+  public void setCreateDate(Timestamp createDate) {\n+    this.createDate = createDate;\n+  }\n+\n+  public AuthenticatedUser getCreator() {\n+    return creator;\n+  }\n+\n+  public void setCreator(AuthenticatedUser creator) {\n+    this.creator = creator;\n+  }\n+\n+  public String getProtocol() {\n+    return protocol;\n+  }\n+\n+  public void setProtocol(String protocol) {\n+    this.protocol = protocol;\n+  }\n+\n+  public String getAuthority() {\n+    return authority;\n+  }\n+\n+  public void setAuthority(String authority) {\n+    this.authority = authority;\n+  }\n+\n+  public Date getGlobalIdCreateTime() {\n+    return globalIdCreateTime;\n+  }\n+\n+  public void setGlobalIdCreateTime(Date globalIdCreateTime) {\n+    this.globalIdCreateTime = globalIdCreateTime;\n+  }\n+\n+  public String getIdentifier() {\n+    return identifier;\n+  }\n+\n+  public void setIdentifier(String identifier) {\n+    this.identifier = identifier;\n+  }\n+\n+  public boolean isIdentifierRegistered() {\n+    return identifierRegistered;\n+  }\n+\n+  public void setIdentifierRegistered(boolean identifierRegistered) {\n+    this.identifierRegistered = identifierRegistered;\n+  }\n+\n+  /**\n+   * @return This object's global id in a string form.\n+   * @deprecated use {@code dvobj.getGlobalId().asString()}.\n+   */\n+  public String getGlobalIdString() {\n+    final GlobalId globalId = getGlobalId();\n+    return globalId != null ? globalId.asString() : null;\n+  }\n+\n+  public void setGlobalId(GlobalId pid) {\n+    if (pid == null) {\n+      setProtocol(null);\n+      setAuthority(null);\n+      setIdentifier(null);\n+    } else {\n+      setProtocol(pid.getProtocol());\n+      setAuthority(pid.getAuthority());\n+      setIdentifier(pid.getIdentifier());\n+    }\n+  }\n+\n+  public GlobalId getGlobalId() {\n+    // FIXME should return NULL when the fields are null. Currenntly,\n+    //       a lot of code depends call this method, so this fix can't be\n+    //       a part of the current PR.\n+    return new GlobalId(getProtocol(), getAuthority(), getIdentifier());\n+  }\n+\n+  public abstract <T> T accept(Visitor<T> v);\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(getId());\n+  }\n+\n+  @Override\n+  public abstract boolean equals(Object o);\n+\n+  @Override\n+  public String toString() {\n+    String classNameComps[] = getClass().getName().split(\"\\\\.\");\n+    return String.format(\"[%s id:%d %s]\", classNameComps[classNameComps.length - 1],\n+      getId(), toStringExtras());\n+  }\n+\n+  /**\n+   * Convenience method to add data to the default toString output.\n+   *\n+   * @return\n+   */\n+  protected String toStringExtras() {\n+    return \"\";\n+  }\n+\n+  public abstract String getDisplayName();\n+\n+  public abstract String getCurrentName();\n+\n+  // helper method used to mimic instanceof on JSF pge\n+  public boolean isInstanceofDataverse() {\n+    return this instanceof Dataverse;\n+  }\n+\n+  public boolean isInstanceofDataset() {\n+    return this instanceof Dataset;\n+  }\n+\n+  public boolean isInstanceofDataFile() {\n+    return this instanceof DataFile;\n+  }\n+\n+  public Timestamp getPermissionModificationTime() {\n+    return permissionModificationTime;\n+  }\n+\n+  public void setPermissionModificationTime(Timestamp permissionModificationTime) {\n+    this.permissionModificationTime = permissionModificationTime;\n+  }\n+\n+  public Timestamp getPermissionIndexTime() {\n+    return permissionIndexTime;\n+  }\n+\n+  public void setPermissionIndexTime(Timestamp permissionIndexTime) {\n+    this.permissionIndexTime = permissionIndexTime;\n+  }\n+\n+  public Dataverse getDataverseContext() {\n+    if (this instanceof Dataverse) {\n+      return (Dataverse) this;\n+    } else if (this.getOwner() != null) {\n+      return this.getOwner().getDataverseContext();\n+    }\n+\n+    return null;\n+  }\n+\n+  public String getAuthorString() {\n+    if (this instanceof Dataverse) {\n+      throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+    if (this instanceof Dataset) {\n+      Dataset dataset = (Dataset) this;\n+      return dataset.getLatestVersion().getAuthorsStr();\n+    }\n+    if (this instanceof DataFile) {\n+      Dataset dataset = (Dataset) this.getOwner();\n+      return dataset.getLatestVersion().getAuthorsStr();\n+    }\n+    throw new UnsupportedOperationException(\"Not supported yet. New DVObject Instance?\");\n+  }\n+\n+  public String getTargetUrl() {\n+    if (this instanceof Dataverse) {\n+      throw new UnsupportedOperationException(\"Not supported yet.\");\n     }\n-    \n-    public boolean isInstanceofDataFile() {\n-        return this instanceof DataFile;\n+    if (this instanceof Dataset) {\n+      return Dataset.TARGET_URL;\n     }\n+    if (this instanceof DataFile) {\n+      return DataFile.TARGET_URL;\n+    }\n+    throw new UnsupportedOperationException(\"Not supported yet. New DVObject Instance?\");\n \n-    public Timestamp getPermissionModificationTime() {\n-        return permissionModificationTime;\n-    }\n+  }\n \n-    public void setPermissionModificationTime(Timestamp permissionModificationTime) {\n-        this.permissionModificationTime = permissionModificationTime;\n+  public String getYearPublishedCreated() {\n+    //if published get the year if draft get when created\n+    if (this.isReleased()) {\n+      return new SimpleDateFormat(\"yyyy\").format(this.getPublicationDate());\n+    } else if (this.getCreateDate() != null) {\n+      return new SimpleDateFormat(\"yyyy\").format(this.getCreateDate());\n+    } else {\n+      return new SimpleDateFormat(\"yyyy\").format(new Date());\n     }\n+  }\n \n-    public Timestamp getPermissionIndexTime() {\n-        return permissionIndexTime;\n-    }\n+  public String getStorageIdentifier() {\n+    return storageIdentifier;\n+  }\n \n-    public void setPermissionIndexTime(Timestamp permissionIndexTime) {\n-        this.permissionIndexTime = permissionIndexTime;\n-    }\n+  public void setStorageIdentifier(String storageIdentifier) {\n+    this.storageIdentifier = storageIdentifier;\n+  }\n \n-    public Dataverse getDataverseContext() {\n-        if (this instanceof Dataverse) {\n-            return (Dataverse) this;\n-        } else if (this.getOwner() != null){\n-            return this.getOwner().getDataverseContext();\n-        }\n-        \n-        return null;\n-    }\n-    \n-    public String getAuthorString(){\n-        if (this instanceof Dataverse){\n-            throw new UnsupportedOperationException(\"Not supported yet.\");\n-        }\n-        if (this instanceof Dataset){\n-            Dataset dataset = (Dataset) this;\n-            return dataset.getLatestVersion().getAuthorsStr();\n-        }\n-        if (this instanceof DataFile){\n-            Dataset dataset = (Dataset) this.getOwner();\n-            return dataset.getLatestVersion().getAuthorsStr();\n-        }\n-        throw new UnsupportedOperationException(\"Not supported yet. New DVObject Instance?\");\n-    }\n-    \n-    public String getTargetUrl(){\n-        if (this instanceof Dataverse){\n-            throw new UnsupportedOperationException(\"Not supported yet.\");\n-        }\n-        if (this instanceof Dataset){\n-            return Dataset.TARGET_URL;\n-        }\n-        if (this instanceof DataFile){\n-            return DataFile.TARGET_URL;\n-        }\n-        throw new UnsupportedOperationException(\"Not supported yet. New DVObject Instance?\");\n-        \n-    }\n-    \n-    public String getYearPublishedCreated(){\n-        //if published get the year if draft get when created\n-        if (this.isReleased()){\n-            return new SimpleDateFormat(\"yyyy\").format(this.getPublicationDate());\n-        } else if (this.getCreateDate() != null) {\n-           return  new SimpleDateFormat(\"yyyy\").format(this.getCreateDate());\n-        } else {\n-            return new SimpleDateFormat(\"yyyy\").format(new Date());\n-        }\n-    }\n-    \n-    public String getStorageIdentifier() {\n-        return storageIdentifier;\n-    }\n-    \n-    public void setStorageIdentifier(String storageIdentifier) {\n-        this.storageIdentifier = storageIdentifier;\n-    }\n-    \n-    /**\n-     * \n-     * @param other \n-     * @return {@code true} iff {@code other} is {@code this} or below {@code this} in the containment hierarchy.\n-     */\n-    public abstract boolean isAncestorOf( DvObject other );\n-    \n-    @OneToMany(mappedBy = \"definitionPoint\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n-    List<RoleAssignment> roleAssignments;\n+  /**\n+   * @param other\n+   * @return {@code true} iff {@code other} is {@code this} or below {@code this} in the containment hierarchy.\n+   */\n+  public abstract boolean isAncestorOf(DvObject other);\n+\n+  @OneToMany(mappedBy = \"definitionPoint\", cascade = {CascadeType.REMOVE, CascadeType.MERGE,\n+    CascadeType.PERSIST}, orphanRemoval = true)\n+  List<RoleAssignment> roleAssignments;\n }\n",
            "diff_size": 652
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/72/DvObject.java\nindex 09a2ef85893..157cf52da43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/72/DvObject.java\n@@ -15,27 +15,23 @@ import javax.persistence.*;\n  *\n  * @author michael\n  */\n+\n+\n @NamedQueries({\n-    @NamedQuery(name = \"DvObject.findAll\",\n-            query = \"SELECT o FROM DvObject o ORDER BY o.id\"),\n-    @NamedQuery(name = \"DvObject.findById\",\n-            query = \"SELECT o FROM DvObject o WHERE o.id=:id\"),\n-    @NamedQuery(name = \"DvObject.checkExists\", \n-            query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n-    @NamedQuery(name = \"DvObject.ownedObjectsById\",\n-\t\t\tquery=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n+    @NamedQuery(name = \"DvObject.findAll\", query = \"SELECT o FROM DvObject o ORDER BY o.id\"),\n+    @NamedQuery(name = \"DvObject.findById\", query = \"SELECT o FROM DvObject o WHERE o.id=:id\"),\n+    @NamedQuery(name = \"DvObject.checkExists\", query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n+    @NamedQuery(name = \"DvObject.ownedObjectsById\", query = \"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n     @NamedQuery(name = \"DvObject.findByGlobalId\",\n-            query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n-\n+        query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n     @NamedQuery(name = \"DvObject.findByAlternativeGlobalId\",\n-            query = \"SELECT o FROM DvObject o, AlternativePersistentIdentifier a  WHERE o.id = a.dvObject.id and a.identifier=:identifier and a.authority=:authority and a.protocol=:protocol and o.dtype=:dtype\"),\n-\n+        query = \"SELECT o FROM DvObject o, AlternativePersistentIdentifier a  WHERE o.id = a.dvObject.id and a.identifier=:identifier and a.authority=:authority and a.protocol=:protocol and o.dtype=:dtype\"),\n     @NamedQuery(name = \"DvObject.findByProtocolIdentifierAuthority\",\n-            query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol\"),\n-    @NamedQuery(name = \"DvObject.findByOwnerId\", \n-                query = \"SELECT o FROM DvObject o WHERE o.owner.id=:ownerId  order by o.dtype desc, o.id\"),\n-    @NamedQuery(name = \"DvObject.findByAuthenticatedUserId\", \n-                query = \"SELECT o FROM DvObject o WHERE o.creator.id=:ownerId or o.releaseUser.id=:releaseUserId\")\n+        query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol\"),\n+    @NamedQuery(name = \"DvObject.findByOwnerId\",\n+        query = \"SELECT o FROM DvObject o WHERE o.owner.id=:ownerId  order by o.dtype desc, o.id\"),\n+    @NamedQuery(name = \"DvObject.findByAuthenticatedUserId\",\n+        query = \"SELECT o FROM DvObject o WHERE o.creator.id=:ownerId or o.releaseUser.id=:releaseUserId\")\n })\n @Entity\n // Inheritance strategy \"JOINED\" will create 4 db tables - \n@@ -43,20 +39,20 @@ import javax.persistence.*;\n // dataverse, dataset and datafile. The ids from the main table will be reused\n // in the child tables. (i.e., the id sequences will be \"sparse\" in the 3 \n // child tables). Tested, appears to be working properly. -- L.A. Nov. 4 2014\n-@Inheritance(strategy=InheritanceType.JOINED)\n-@Table(indexes = {@Index(columnList=\"dtype\")\n-\t\t, @Index(columnList=\"owner_id\")\n-\t\t, @Index(columnList=\"creator_id\")\n-\t\t, @Index(columnList=\"releaseuser_id\")},\n-\t\tuniqueConstraints = {@UniqueConstraint(columnNames = {\"authority,protocol,identifier\"}),@UniqueConstraint(columnNames = {\"owner_id,storageidentifier\"})})\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@Table(indexes = {@Index(columnList = \"dtype\"), @Index(columnList = \"owner_id\"), @Index(columnList = \"creator_id\"), @Index(columnList = \"releaseuser_id\")},\n+       uniqueConstraints = {@UniqueConstraint(columnNames = {\"authority,protocol,identifier\" }), @UniqueConstraint(columnNames = {\"owner_id,storageidentifier\" })})\n public abstract class DvObject extends DataverseEntity implements java.io.Serializable {\n-    \n+\n     public static final String DATAVERSE_DTYPE_STRING = \"Dataverse\";\n+\n     public static final String DATASET_DTYPE_STRING = \"Dataset\";\n+\n     public static final String DATAFILE_DTYPE_STRING = \"DataFile\";\n+\n     public static final List<String> DTYPE_LIST = Arrays.asList(DATAVERSE_DTYPE_STRING, DATASET_DTYPE_STRING, DATAFILE_DTYPE_STRING);\n-    \n-    public static final Visitor<String> NamePrinter = new Visitor<String>(){\n+\n+    public static final Visitor<String> NamePrinter = new Visitor<String>() {\n \n         @Override\n         public String visit(Dataverse dv) {\n@@ -73,7 +69,8 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n             return df.getFileMetadata().getLabel();\n         }\n     };\n-    public static final Visitor<String> NameIdPrinter = new Visitor<String>(){\n+\n+    public static final Visitor<String> NameIdPrinter = new Visitor<String>() {\n \n         @Override\n         public String visit(Dataverse dv) {\n@@ -90,21 +87,21 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n             return \"[\" + df.getId() + (df.getFileMetadata() != null ? \" \" + df.getFileMetadata().getLabel() : \"\") + \"]\";\n         }\n     };\n-    \n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long id;\n \n     @ManyToOne\n     private DvObject owner;\n-\n     private Timestamp publicationDate;\n \n     /** The user that released this dataverse */\n+\n     @ManyToOne\n     private AuthenticatedUser releaseUser;\n-    \n-    @Column( nullable = false )\n+\n+    @Column(nullable = false)\n     private Timestamp createDate;\n \n     @Column(nullable = false)\n@@ -118,28 +115,25 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n \n     @Column(nullable = true)\n     private Timestamp permissionModificationTime;\n-\n     private Timestamp permissionIndexTime;\n-    \n+\n     @Column\n     private String storageIdentifier;\n-    \n-    @Column(insertable = false, updatable = false) private String dtype;\n+\n+    @Column(insertable = false, updatable = false)\n+    private String dtype;\n     \n     /*\n     * Add DOI related fields\n     */\n-   \n     private String protocol;\n     private String authority;\n \n     @Temporal(value = TemporalType.TIMESTAMP)\n     private Date globalIdCreateTime;\n-\n     private String identifier;\n-    \n     private boolean identifierRegistered;\n-    \n+\n     @OneToMany(mappedBy = \"dvObject\", cascade = CascadeType.ALL, orphanRemoval = true)\n     private Set<AlternativePersistentIdentifier> alternativePersistentIndentifiers;\n \n@@ -157,12 +151,13 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n      * generated. However, were all three thumbnails generated? We might need a\n      * boolean per thumbnail size.\n      */\n+\n     private boolean previewImageAvailable;\n-    \n+\n     public boolean isPreviewImageAvailable() {\n         return previewImageAvailable;\n     }\n-    \n+\n     public void setPreviewImageAvailable(boolean status) {\n         this.previewImageAvailable = status;\n     }\n@@ -176,6 +171,7 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n      * Solr index is stale.\n      * @param modificationTime\n      */\n+\n     public void setModificationTime(Timestamp modificationTime) {\n         this.modificationTime = modificationTime;\n     }\n@@ -189,6 +185,7 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n      * Solr index is stale.\n      * @param indexTime\n      */\n+\n     public void setIndexTime(Timestamp indexTime) {\n         this.indexTime = indexTime;\n     }\n@@ -197,9 +194,14 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n     private AuthenticatedUser creator;\n \n     public interface Visitor<T> {\n+\n+\n         public T visit(Dataverse dv);\n-        public T visit(Dataset   ds);\n-        public T visit(DataFile  df);\n+\n+        public T visit(Dataset ds);\n+\n+        public T visit(DataFile df);\n+\n     }\n \n     /**\n@@ -209,12 +211,14 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n      *\n      * @param newOwner\n      */\n+\n+\n     protected void setOwner(DvObjectContainer newOwner) {\n         owner = newOwner;\n     }\n \n     public DvObjectContainer getOwner() {\n-        return (DvObjectContainer)owner;\n+        return (DvObjectContainer) owner;\n     }\n \n     public Long getId() {\n@@ -228,6 +232,7 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n     /**\n      * @return Whether {@code this} takes no permissions from roles assigned on its parents.\n      */\n+\n     public abstract boolean isEffectivelyPermissionRoot();\n \n     public Timestamp getPublicationDate() {\n@@ -241,7 +246,7 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n     public AuthenticatedUser getReleaseUser() {\n         return releaseUser;\n     }\n-    \n+\n     public void setReleaseUser(AuthenticatedUser releaseUser) {\n         this.releaseUser = releaseUser;\n     }\n@@ -265,8 +270,8 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n     public void setCreator(AuthenticatedUser creator) {\n         this.creator = creator;\n     }\n-    \n-     public String getProtocol() {\n+\n+    public String getProtocol() {\n         return protocol;\n     }\n \n@@ -300,7 +305,7 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n \n     public boolean isIdentifierRegistered() {\n         return identifierRegistered;\n-    } \n+    }\n \n     public void setIdentifierRegistered(boolean identifierRegistered) {\n         this.identifierRegistered = identifierRegistered;\n@@ -311,13 +316,14 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n      * @return This object's global id in a string form.\n      * @deprecated use {@code dvobj.getGlobalId().asString()}.\n      */\n-    public String getGlobalIdString() {       \n+\n+    public String getGlobalIdString() {\n         final GlobalId globalId = getGlobalId();\n         return globalId != null ? globalId.asString() : null;\n     }\n-    \n-    public void setGlobalId( GlobalId pid ) {\n-        if ( pid == null ) {\n+\n+    public void setGlobalId(GlobalId pid) {\n+        if (pid == null) {\n             setProtocol(null);\n             setAuthority(null);\n             setIdentifier(null);\n@@ -327,14 +333,14 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n             setIdentifier(pid.getIdentifier());\n         }\n     }\n-    \n+\n     public GlobalId getGlobalId() {\n         // FIXME should return NULL when the fields are null. Currenntly, \n         //       a lot of code depends call this method, so this fix can't be \n         //       a part of the current PR.\n         return new GlobalId(getProtocol(), getAuthority(), getIdentifier());\n     }\n-    \n+\n     public abstract <T> T accept(Visitor<T> v);\n \n     @Override\n@@ -348,8 +354,7 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n     @Override\n     public String toString() {\n         String classNameComps[] = getClass().getName().split(\"\\\\.\");\n-        return String.format(\"[%s id:%d %s]\", classNameComps[classNameComps.length - 1],\n-                getId(), toStringExtras());\n+        return String.format(\"[%s id:%d %s]\", classNameComps[classNameComps.length - 1], getId(), toStringExtras());\n     }\n \n     /**\n@@ -357,23 +362,26 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n      *\n      * @return\n      */\n+\n+\n     protected String toStringExtras() {\n         return \"\";\n     }\n-    \n+\n     public abstract String getDisplayName();\n-    \n+\n     public abstract String getCurrentName();\n     \n     // helper method used to mimic instanceof on JSF pge\n+\n     public boolean isInstanceofDataverse() {\n         return this instanceof Dataverse;\n-    }        \n+    }\n \n     public boolean isInstanceofDataset() {\n         return this instanceof Dataset;\n     }\n-    \n+\n     public boolean isInstanceofDataFile() {\n         return this instanceof DataFile;\n     }\n@@ -397,57 +405,59 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n     public Dataverse getDataverseContext() {\n         if (this instanceof Dataverse) {\n             return (Dataverse) this;\n-        } else if (this.getOwner() != null){\n+        } else if (this.getOwner() != null) {\n             return this.getOwner().getDataverseContext();\n         }\n-        \n         return null;\n     }\n-    \n-    public String getAuthorString(){\n-        if (this instanceof Dataverse){\n+\n+    public String getAuthorString() {\n+        if (this instanceof Dataverse) {\n             throw new UnsupportedOperationException(\"Not supported yet.\");\n         }\n-        if (this instanceof Dataset){\n+\n+        if (this instanceof Dataset) {\n             Dataset dataset = (Dataset) this;\n             return dataset.getLatestVersion().getAuthorsStr();\n         }\n-        if (this instanceof DataFile){\n+\n+        if (this instanceof DataFile) {\n             Dataset dataset = (Dataset) this.getOwner();\n             return dataset.getLatestVersion().getAuthorsStr();\n         }\n         throw new UnsupportedOperationException(\"Not supported yet. New DVObject Instance?\");\n     }\n-    \n-    public String getTargetUrl(){\n-        if (this instanceof Dataverse){\n+\n+    public String getTargetUrl() {\n+        if (this instanceof Dataverse) {\n             throw new UnsupportedOperationException(\"Not supported yet.\");\n         }\n-        if (this instanceof Dataset){\n+\n+        if (this instanceof Dataset) {\n             return Dataset.TARGET_URL;\n         }\n-        if (this instanceof DataFile){\n+\n+        if (this instanceof DataFile) {\n             return DataFile.TARGET_URL;\n         }\n         throw new UnsupportedOperationException(\"Not supported yet. New DVObject Instance?\");\n-        \n     }\n-    \n-    public String getYearPublishedCreated(){\n+\n+    public String getYearPublishedCreated() {\n         //if published get the year if draft get when created\n-        if (this.isReleased()){\n+        if (this.isReleased()) {\n             return new SimpleDateFormat(\"yyyy\").format(this.getPublicationDate());\n         } else if (this.getCreateDate() != null) {\n-           return  new SimpleDateFormat(\"yyyy\").format(this.getCreateDate());\n+            return new SimpleDateFormat(\"yyyy\").format(this.getCreateDate());\n         } else {\n             return new SimpleDateFormat(\"yyyy\").format(new Date());\n         }\n     }\n-    \n+\n     public String getStorageIdentifier() {\n         return storageIdentifier;\n     }\n-    \n+\n     public void setStorageIdentifier(String storageIdentifier) {\n         this.storageIdentifier = storageIdentifier;\n     }\n@@ -457,8 +467,11 @@ public abstract class DvObject extends DataverseEntity implements java.io.Serial\n      * @param other \n      * @return {@code true} iff {@code other} is {@code this} or below {@code this} in the containment hierarchy.\n      */\n-    public abstract boolean isAncestorOf( DvObject other );\n-    \n-    @OneToMany(mappedBy = \"definitionPoint\",cascade={ CascadeType.REMOVE, CascadeType.MERGE,CascadeType.PERSIST}, orphanRemoval=true)\n+\n+    public abstract boolean isAncestorOf(DvObject other);\n+\n+    @OneToMany(mappedBy = \"definitionPoint\",\n+               cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST},\n+               orphanRemoval = true)\n     List<RoleAssignment> roleAssignments;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/72/DvObject.java\nindex 09a2ef85893..638307b39ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/72/DvObject.java\n@@ -23,7 +23,7 @@ import javax.persistence.*;\n     @NamedQuery(name = \"DvObject.checkExists\", \n             query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n     @NamedQuery(name = \"DvObject.ownedObjectsById\",\n-\t\t\tquery=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n+query=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n     @NamedQuery(name = \"DvObject.findByGlobalId\",\n             query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/72/DvObject.java\nindex 09a2ef85893..e0f2776a543 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/72/DvObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/72/DvObject.java\n@@ -23,7 +23,7 @@ import javax.persistence.*;\n     @NamedQuery(name = \"DvObject.checkExists\", \n             query = \"SELECT count(o) from DvObject o WHERE o.id=:id\"),\n     @NamedQuery(name = \"DvObject.ownedObjectsById\",\n-\t\t\tquery=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n+    query=\"SELECT COUNT(obj) FROM DvObject obj WHERE obj.owner.id=:id\"),\n     @NamedQuery(name = \"DvObject.findByGlobalId\",\n             query = \"SELECT o FROM DvObject o WHERE o.identifier=:identifier and o.authority=:authority and o.protocol=:protocol and o.dtype=:dtype\"),\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}