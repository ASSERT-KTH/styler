{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1534",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1534/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1534/Table.java\nindex a01b95defbc..264dff36db9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1534/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1534/Table.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection.primitive.hopscotch;\n \n /**\n@@ -28,177 +29,186 @@ package org.neo4j.collection.primitive.hopscotch;\n  *   <li>values: (OPTIONAL) value associated with each key. Optional in a setting where only the key is\n  *       important, e.g. a set</li>\n  * </ol>\n- *\n+ * <p>\n  * The {@link HopScotchHashingAlgorithm} contains all hashing logic and a {@link Table} is a dump, straight\n  * forward data keeper. Optimizations for special keys or key/value combinations can be captured in\n  * implementations of this. The only restriction is that keys must be decimal type numbers, f.ex. {@code short},\n  * {@code int} or {@code long}. Where the key \"carrier\" between the algorithm and the table is always going to be\n  * {@code long} since it can carry all the others.\n- *\n+ * <p>\n  * {@link #version() versioning} is added to the table interface, but implementations can disable versioning\n  * by always returning the same and constant number in both {@link #version()} and {@link #version(int)}.\n  * Versioning helps iterating over a constant set of entries at the same time as modifying the table.\n  */\n public interface Table<VALUE> extends AutoCloseable\n {\n-    /**\n-     * @return {@code H} as defined by the hop-scotch algorithm, i.e. how many entries can share the same\n-     * table index, i.e. how many conflicts there can be at most for any given table index.\n-     */\n-    int h();\n-\n-    /**\n-     * @return number of entries this table can hold at most.\n-     */\n-    int capacity();\n-\n-    /**\n-     * @return number of entries this table holds at the moment.\n-     */\n-    int size();\n-\n-    /**\n-     * @return a bit mask for doing table length modulo, for example when incrementing or decrementing a table\n-     * index, so that it wraps around the edges.\n-     */\n-    int mask();\n-\n-    /**\n-     * @param index the table index to get the key for.\n-     * @return the key at the given index. If there's no assigned key here then {@link #nullKey()} will be returned.\n-     */\n-    long key( int index );\n-\n-    /**\n-     * OPTIONAL operation. Returns {@code null} if unsupported.\n-     * @param index\n-     * @return the value at the given index. If there's no assigned key here then {@code null} will be returned.\n-     */\n-    VALUE value( int index );\n-\n-    /**\n-     * Puts (key/value) at the given {@code index}. This index must contractually be free at the point where the\n-     * {@link HopScotchHashingAlgorithm algorithm} calls this method.\n-     * @param index the index to put this key/value in.\n-     * @param key the key to put.\n-     * @param value the value to put.\n-     */\n-    void put( int index, long key, VALUE value );\n-\n-    /**\n-     * Puts, actually overwrites, the value at the given {@code index}. This index will contractually be occupied\n-     * at the point where the {@link HopScotchHashingAlgorithm algorithm} calls this method. This new {@code value}\n-     * replaces the existing value at this index.\n-     * @param index the index to put this value in.\n-     * @param value the value to put at this index.\n-     * @return the existing value at this index, before this new value was put there.\n-     */\n-    VALUE putValue( int index, VALUE value );\n-\n-    /**\n-     * Moves the key/value from one index to another, any hop bits stay. This is equivalent to a remove at\n-     * {@code fromIndex} followed by a put at {@code toIndex}. After this method has been called there will no longer\n-     * be any key/value assigned at {@code fromIndex}.\n-     * @param fromIndex the index to move the key/value from.\n-     * @param toIndex the index to move the key/value to.\n-     * @return the affected key.\n-     */\n-    long move( int fromIndex, int toIndex );\n-\n-    /**\n-     * Removes the currently assigned key/value from the given {@code index}.\n-     * @param index the index to remove key/value from.\n-     * @return the existing value at this index.\n-     */\n-    VALUE remove( int index );\n-\n-    /**\n-     * A short summary of the hop bits format: It's a bit map represented as an int, where each set bit represents\n-     * an offset where there's a neighbor for this index.\n-     *\n-     * Here is the two least significant bytes in an example bit map carrying hop bits:\n-     * <pre>\n-     * ....[0000,0001][0000,0100]\n-     * </pre>\n-     * In the above example, if we assume the index carrying these hop bits is 5, then index 5 has two neighbors:\n-     * index 8 and index 14. (the least significant bit represents an offset of 1). Maximum number of hop bits\n-     * is controlled by {@link #h()}.\n-     *\n-     * Interesting to note is that hop bits for an index and key/value are not really associated, where a key/value\n-     * can be moved to a new location, but the hop bits stay behind. The location of Hop bits\n-     * is tied to table index, whereas the location of key/value is tied to table index AND hop bits.\n-     *\n-     * @param index the index to get the hop bits for.\n-     * @return the hop bits for the given index.\n-     */\n-    long hopBits( int index );\n-\n-    /**\n-     * Adds one hop bit to the set of hop bits at the given index.\n-     * @param index the index to add the hop bit at.\n-     * @param hd h-delta, i.e. which hop bit to set, zero-based.\n-     * @see #hopBits(int)\n-     */\n-    void putHopBit( int index, int hd );\n-\n-    /**\n-     * Moves one hop bit {@code delta} steps. If delta is positive it will be moved towards msb,\n-     * if negative towards lsb.\n-     * @param index the index to move the hop bit for.\n-     * @param hd the hop bit to move.\n-     * @param delta how far (and based on sign) which direction to move it in.\n-     */\n-    void moveHopBit( int index, int hd, int delta );\n-\n-    /**\n-     * Removes one hop bit from the set of hop bits at the given index.\n-     * @param index the index to remove the hop bit from.\n-     * @param hd h-delta, i.e. which hop bit to remove, zero-based.\n-     * @see #hopBits(int)\n-     */\n-    void removeHopBit( int index, int hd );\n-\n-    /**\n-     * @return key representing an index that has not been assigned. Why is this a method? Since an implementation\n-     * could based this value on {@link #h()} for example, which although is final per table instance,\n-     * changes from table to table.\n-     */\n-    long nullKey();\n-\n-    /**\n-     * Grows the table to double that of the current size. This method should not populate the table,\n-     * it's just responsible for growing the structure holding the entries. All entries should have {@link #nullKey()}\n-     * after this method has been called.\n-     * The {@link #size()} should be reset here as well since after it has grown then it will be re-populated\n-     * immediately with the existing data.\n-     * @return the new table.\n-     */\n-    Table<VALUE> grow();\n-\n-    /**\n-     * @return {@code true} if there are no entries in this table, otherwise {@code false}.\n-     */\n-    boolean isEmpty();\n-\n-    /**\n-     * Removes all entries from this table.\n-     */\n-    void clear();\n-\n-    /**\n-     * @return the version of the table, i.e. the version of the newest entry in the table.\n-     */\n-    int version();\n-\n-    /**\n-     * @param index the index of the entry to get.\n-     * @return the version of the entry by the given {@code index} in this table.\n-     */\n-    int version( int index );\n-\n-    /**\n-     * Free any resources\n-     */\n-    @Override\n-    void close();\n+  /**\n+   * @return {@code H} as defined by the hop-scotch algorithm, i.e. how many entries can share the same\n+   * table index, i.e. how many conflicts there can be at most for any given table index.\n+   */\n+  int h();\n+\n+  /**\n+   * @return number of entries this table can hold at most.\n+   */\n+  int capacity();\n+\n+  /**\n+   * @return number of entries this table holds at the moment.\n+   */\n+  int size();\n+\n+  /**\n+   * @return a bit mask for doing table length modulo, for example when incrementing or decrementing a table\n+   * index, so that it wraps around the edges.\n+   */\n+  int mask();\n+\n+  /**\n+   * @param index the table index to get the key for.\n+   * @return the key at the given index. If there's no assigned key here then {@link #nullKey()} will be returned.\n+   */\n+  long key(int index);\n+\n+  /**\n+   * OPTIONAL operation. Returns {@code null} if unsupported.\n+   *\n+   * @param index\n+   * @return the value at the given index. If there's no assigned key here then {@code null} will be returned.\n+   */\n+  VALUE value(int index);\n+\n+  /**\n+   * Puts (key/value) at the given {@code index}. This index must contractually be free at the point where the\n+   * {@link HopScotchHashingAlgorithm algorithm} calls this method.\n+   *\n+   * @param index the index to put this key/value in.\n+   * @param key   the key to put.\n+   * @param value the value to put.\n+   */\n+  void put(int index, long key, VALUE value);\n+\n+  /**\n+   * Puts, actually overwrites, the value at the given {@code index}. This index will contractually be occupied\n+   * at the point where the {@link HopScotchHashingAlgorithm algorithm} calls this method. This new {@code value}\n+   * replaces the existing value at this index.\n+   *\n+   * @param index the index to put this value in.\n+   * @param value the value to put at this index.\n+   * @return the existing value at this index, before this new value was put there.\n+   */\n+  VALUE putValue(int index, VALUE value);\n+\n+  /**\n+   * Moves the key/value from one index to another, any hop bits stay. This is equivalent to a remove at\n+   * {@code fromIndex} followed by a put at {@code toIndex}. After this method has been called there will no longer\n+   * be any key/value assigned at {@code fromIndex}.\n+   *\n+   * @param fromIndex the index to move the key/value from.\n+   * @param toIndex   the index to move the key/value to.\n+   * @return the affected key.\n+   */\n+  long move(int fromIndex, int toIndex);\n+\n+  /**\n+   * Removes the currently assigned key/value from the given {@code index}.\n+   *\n+   * @param index the index to remove key/value from.\n+   * @return the existing value at this index.\n+   */\n+  VALUE remove(int index);\n+\n+  /**\n+   * A short summary of the hop bits format: It's a bit map represented as an int, where each set bit represents\n+   * an offset where there's a neighbor for this index.\n+   * <p>\n+   * Here is the two least significant bytes in an example bit map carrying hop bits:\n+   * <pre>\n+   * ....[0000,0001][0000,0100]\n+   * </pre>\n+   * In the above example, if we assume the index carrying these hop bits is 5, then index 5 has two neighbors:\n+   * index 8 and index 14. (the least significant bit represents an offset of 1). Maximum number of hop bits\n+   * is controlled by {@link #h()}.\n+   * <p>\n+   * Interesting to note is that hop bits for an index and key/value are not really associated, where a key/value\n+   * can be moved to a new location, but the hop bits stay behind. The location of Hop bits\n+   * is tied to table index, whereas the location of key/value is tied to table index AND hop bits.\n+   *\n+   * @param index the index to get the hop bits for.\n+   * @return the hop bits for the given index.\n+   */\n+  long hopBits(int index);\n+\n+  /**\n+   * Adds one hop bit to the set of hop bits at the given index.\n+   *\n+   * @param index the index to add the hop bit at.\n+   * @param hd    h-delta, i.e. which hop bit to set, zero-based.\n+   * @see #hopBits(int)\n+   */\n+  void putHopBit(int index, int hd);\n+\n+  /**\n+   * Moves one hop bit {@code delta} steps. If delta is positive it will be moved towards msb,\n+   * if negative towards lsb.\n+   *\n+   * @param index the index to move the hop bit for.\n+   * @param hd    the hop bit to move.\n+   * @param delta how far (and based on sign) which direction to move it in.\n+   */\n+  void moveHopBit(int index, int hd, int delta);\n+\n+  /**\n+   * Removes one hop bit from the set of hop bits at the given index.\n+   *\n+   * @param index the index to remove the hop bit from.\n+   * @param hd    h-delta, i.e. which hop bit to remove, zero-based.\n+   * @see #hopBits(int)\n+   */\n+  void removeHopBit(int index, int hd);\n+\n+  /**\n+   * @return key representing an index that has not been assigned. Why is this a method? Since an implementation\n+   * could based this value on {@link #h()} for example, which although is final per table instance,\n+   * changes from table to table.\n+   */\n+  long nullKey();\n+\n+  /**\n+   * Grows the table to double that of the current size. This method should not populate the table,\n+   * it's just responsible for growing the structure holding the entries. All entries should have {@link #nullKey()}\n+   * after this method has been called.\n+   * The {@link #size()} should be reset here as well since after it has grown then it will be re-populated\n+   * immediately with the existing data.\n+   *\n+   * @return the new table.\n+   */\n+  Table<VALUE> grow();\n+\n+  /**\n+   * @return {@code true} if there are no entries in this table, otherwise {@code false}.\n+   */\n+  boolean isEmpty();\n+\n+  /**\n+   * Removes all entries from this table.\n+   */\n+  void clear();\n+\n+  /**\n+   * @return the version of the table, i.e. the version of the newest entry in the table.\n+   */\n+  int version();\n+\n+  /**\n+   * @param index the index of the entry to get.\n+   * @return the version of the entry by the given {@code index} in this table.\n+   */\n+  int version(int index);\n+\n+  /**\n+   * Free any resources\n+   */\n+  @Override\n+  void close();\n }\n",
            "diff_size": 172
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1534/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1534/Table.java\nindex a01b95defbc..49247b10f8f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1534/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1534/Table.java\n@@ -201,4 +201,4 @@ public interface Table<VALUE> extends AutoCloseable\n      */\n     @Override\n     void close();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}