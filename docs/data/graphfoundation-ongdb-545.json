{
    "project_name": "graphfoundation-ongdb",
    "error_id": "545",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "110",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "151",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "337",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "376",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "406",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "439",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "444",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "465",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "531",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "544",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "544",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "589",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/545/MultipleIndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/545/MultipleIndexPopulator.java\nindex 317cc867a18..08b147926cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/545/MultipleIndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/545/MultipleIndexPopulator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.IOException;\n@@ -60,7 +61,7 @@ import static org.neo4j.kernel.impl.api.index.IndexPopulationFailure.failure;\n /**\n  * {@link IndexPopulator} that allow population of multiple indexes during one iteration.\n  * Performs operations by calling corresponding operations of particular index populators.\n- *\n+ * <p>\n  * There are two ways data is fed to this multi-populator:\n  * <ul>\n  * <li>{@link #indexAllNodes()}, which is a blocking call and will scan the entire store and\n@@ -71,7 +72,7 @@ import static org.neo4j.kernel.impl.api.index.IndexPopulationFailure.failure;\n  * {@link #indexAllNodes()} and incorporated into that data stream. Calls to this method may come from any number\n  * of concurrent threads.</li>\n  * </ul>\n- *\n+ * <p>\n  * Usage of this class should be something like:\n  * <ol>\n  * <li>Instantiation.</li>\n@@ -85,599 +86,588 @@ import static org.neo4j.kernel.impl.api.index.IndexPopulationFailure.failure;\n  */\n public class MultipleIndexPopulator implements IndexPopulator\n {\n-    public static final String QUEUE_THRESHOLD_NAME = \"queue_threshold\";\n-    static final String BATCH_SIZE_NAME = \"batch_size\";\n-\n-    private final int QUEUE_THRESHOLD = FeatureToggles.getInteger( getClass(), QUEUE_THRESHOLD_NAME, 20_000 );\n-    private final int BATCH_SIZE = FeatureToggles.getInteger( BatchingMultipleIndexPopulator.class, BATCH_SIZE_NAME, 10_000 );\n-\n-    // Concurrency queue since multiple concurrent threads may enqueue updates into it. It is important for this queue\n-    // to have fast #size() method since it might be drained in batches\n-    protected final Queue<IndexEntryUpdate<?>> queue = new LinkedBlockingQueue<>();\n-\n-    // Populators are added into this list. The same thread adding populators will later call #indexAllNodes.\n-    // Multiple concurrent threads might fail individual populations.\n-    // Failed populations are removed from this list while iterating over it.\n-    final List<IndexPopulation> populations = new CopyOnWriteArrayList<>();\n+  public static final String QUEUE_THRESHOLD_NAME = \"queue_threshold\";\n+  static final String BATCH_SIZE_NAME = \"batch_size\";\n+\n+  private final int QUEUE_THRESHOLD = FeatureToggles.getInteger(getClass(), QUEUE_THRESHOLD_NAME, 20_000);\n+  private final int BATCH_SIZE = FeatureToggles.getInteger(BatchingMultipleIndexPopulator.class, BATCH_SIZE_NAME, 10_000);\n+\n+  // Concurrency queue since multiple concurrent threads may enqueue updates into it. It is important for this queue\n+  // to have fast #size() method since it might be drained in batches\n+  protected final Queue<IndexEntryUpdate<?>> queue = new LinkedBlockingQueue<>();\n+\n+  // Populators are added into this list. The same thread adding populators will later call #indexAllNodes.\n+  // Multiple concurrent threads might fail individual populations.\n+  // Failed populations are removed from this list while iterating over it.\n+  final List<IndexPopulation> populations = new CopyOnWriteArrayList<>();\n+\n+  private final IndexStoreView storeView;\n+  private final LogProvider logProvider;\n+  protected final Log log;\n+  private final SchemaState schemaState;\n+  private StoreScan<IndexPopulationFailedKernelException> storeScan;\n+\n+  public MultipleIndexPopulator(IndexStoreView storeView, LogProvider logProvider, SchemaState schemaState)\n+  {\n+    this.storeView = storeView;\n+    this.logProvider = logProvider;\n+    this.log = logProvider.getLog(IndexPopulationJob.class);\n+    this.schemaState = schemaState;\n+  }\n+\n+  IndexPopulation addPopulator(\n+      IndexPopulator populator,\n+      long indexId,\n+      IndexMeta indexMeta,\n+      FlippableIndexProxy flipper,\n+      FailedIndexProxyFactory failedIndexProxyFactory,\n+      String indexUserDescription)\n+  {\n+    IndexPopulation population =\n+        createPopulation(populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription);\n+    populations.add(population);\n+    return population;\n+  }\n+\n+  protected IndexPopulation createPopulation(IndexPopulator populator, long indexId, IndexMeta indexMeta,\n+                                             FlippableIndexProxy flipper, FailedIndexProxyFactory failedIndexProxyFactory, String indexUserDescription)\n+  {\n+    return new IndexPopulation(populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription);\n+  }\n+\n+  boolean hasPopulators()\n+  {\n+    return !populations.isEmpty();\n+  }\n+\n+  @Override\n+  public void create()\n+  {\n+    forEachPopulation(population ->\n+    {\n+      log.info(\"Index population started: [%s]\", population.indexUserDescription);\n+      population.create();\n+    });\n+  }\n+\n+  @Override\n+  public void drop()\n+  {\n+    throw new UnsupportedOperationException(\"Can't drop indexes from this populator implementation\");\n+  }\n+\n+  @Override\n+  public void add(Collection<? extends IndexEntryUpdate<?>> updates)\n+  {\n+    throw new UnsupportedOperationException(\"Can't populate directly using this populator implementation. \");\n+  }\n+\n+  public StoreScan<IndexPopulationFailedKernelException> indexAllNodes()\n+  {\n+    int[] labelIds = labelIds();\n+    int[] propertyKeyIds = propertyKeyIds();\n+    IntPredicate propertyKeyIdFilter = propertyKeyId -> contains(propertyKeyIds, propertyKeyId);\n+\n+    storeScan = storeView.visitNodes(labelIds, propertyKeyIdFilter, new NodePopulationVisitor(), null, false);\n+    return new DelegatingStoreScan<IndexPopulationFailedKernelException>(storeScan)\n+    {\n+      @Override\n+      public void run() throws IndexPopulationFailedKernelException\n+      {\n+        super.run();\n+        flushAll();\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Queues an update to be fed into the index populators. These updates come from changes being made\n+   * to storage while a concurrent scan is happening to keep populators up to date with all latest changes.\n+   *\n+   * @param update {@link IndexEntryUpdate} to queue.\n+   */\n+  public void queue(IndexEntryUpdate<?> update)\n+  {\n+    queue.add(update);\n+  }\n+\n+  /**\n+   * Called if forced failure from the outside\n+   *\n+   * @param failure index population failure.\n+   */\n+  public void fail(Throwable failure)\n+  {\n+    for (IndexPopulation population : populations)\n+    {\n+      fail(population, failure);\n+    }\n+  }\n+\n+  protected void fail(IndexPopulation population, Throwable failure)\n+  {\n+    if (!removeFromOngoingPopulations(population))\n+    {\n+      return;\n+    }\n+\n+    // If the cause of index population failure is a conflict in a (unique) index, the conflict is the failure\n+    if (failure instanceof IndexPopulationFailedKernelException)\n+    {\n+      Throwable cause = failure.getCause();\n+      if (cause instanceof IndexEntryConflictException)\n+      {\n+        failure = cause;\n+      }\n+    }\n+\n+    log.error(format(\"Failed to populate index: [%s]\", population.indexUserDescription), failure);\n+\n+    // The flipper will have already flipped to a failed index context here, but\n+    // it will not include the cause of failure, so we do another flip to a failed\n+    // context that does.\n+\n+    // The reason for having the flipper transition to the failed index context in the first\n+    // place is that we would otherwise introduce a race condition where updates could come\n+    // in to the old context, if something failed in the job we send to the flipper.\n+    IndexPopulationFailure indexPopulationFailure = failure(failure);\n+    population.flipToFailed(indexPopulationFailure);\n+    try\n+    {\n+      population.populator.markAsFailed(indexPopulationFailure.asString());\n+      population.populator.close(false);\n+    } catch (Throwable e)\n+    {\n+      log.error(format(\"Unable to close failed populator for index: [%s]\",\n+          population.indexUserDescription), e);\n+    }\n+  }\n+\n+  @Override\n+  public void verifyDeferredConstraints(PropertyAccessor accessor)\n+  {\n+    throw new UnsupportedOperationException(\"Should not be called directly\");\n+  }\n+\n+  @Override\n+  public MultipleIndexUpdater newPopulatingUpdater(PropertyAccessor accessor)\n+  {\n+    Map<SchemaDescriptor, Pair<IndexPopulation, IndexUpdater>> updaters = new HashMap<>();\n+    forEachPopulation(population ->\n+    {\n+      IndexUpdater updater = population.populator.newPopulatingUpdater(accessor);\n+      updaters.put(population.schema(), Pair.of(population, updater));\n+    });\n+    return new MultipleIndexUpdater(this, updaters, logProvider);\n+  }\n+\n+  @Override\n+  public void close(boolean populationCompletedSuccessfully)\n+  {\n+    forEachPopulation(population -> population.populator.close(populationCompletedSuccessfully));\n+  }\n+\n+  @Override\n+  public void markAsFailed(String failure)\n+  {\n+    throw new UnsupportedOperationException(\"Multiple index populator can't be marked as failed.\");\n+  }\n+\n+  @Override\n+  public void includeSample(IndexEntryUpdate<?> update)\n+  {\n+    throw new UnsupportedOperationException(\"Multiple index populator can't perform index sampling.\");\n+  }\n+\n+  @Override\n+  public IndexSample sampleResult()\n+  {\n+    throw new UnsupportedOperationException(\"Multiple index populator can't perform index sampling.\");\n+  }\n+\n+  void resetIndexCounts()\n+  {\n+    forEachPopulation(this::resetIndexCountsForPopulation);\n+  }\n+\n+  private void resetIndexCountsForPopulation(IndexPopulation indexPopulation)\n+  {\n+    storeView.replaceIndexCounts(indexPopulation.indexId, 0, 0, 0);\n+  }\n \n-    private final IndexStoreView storeView;\n-    private final LogProvider logProvider;\n-    protected final Log log;\n-    private final SchemaState schemaState;\n-    private StoreScan<IndexPopulationFailedKernelException> storeScan;\n-\n-    public MultipleIndexPopulator( IndexStoreView storeView, LogProvider logProvider, SchemaState schemaState )\n+  void flipAfterPopulation()\n+  {\n+    for (IndexPopulation population : populations)\n     {\n-        this.storeView = storeView;\n-        this.logProvider = logProvider;\n-        this.log = logProvider.getLog( IndexPopulationJob.class );\n-        this.schemaState = schemaState;\n+      try\n+      {\n+        population.flip();\n+      } catch (Throwable t)\n+      {\n+        fail(population, t);\n+      }\n+    }\n+  }\n+\n+  private int[] propertyKeyIds()\n+  {\n+    return populations.stream().flatMapToInt(this::propertyKeyIds).distinct().toArray();\n+  }\n+\n+  private IntStream propertyKeyIds(IndexPopulation population)\n+  {\n+    return IntStream.of(population.schema().getPropertyIds());\n+  }\n+\n+  private int[] labelIds()\n+  {\n+    return populations.stream().mapToInt(population -> population.schema().keyId()).toArray();\n+  }\n+\n+  public void cancel()\n+  {\n+    forEachPopulation(this::cancelIndexPopulation);\n+  }\n+\n+  void cancelIndexPopulation(IndexPopulation indexPopulation)\n+  {\n+    try\n+    {\n+      indexPopulation.cancel();\n+    } catch (IOException e)\n+    {\n+      fail(indexPopulation, e);\n     }\n+  }\n+\n+  private boolean removeFromOngoingPopulations(IndexPopulation indexPopulation)\n+  {\n+    return populations.remove(indexPopulation);\n+  }\n+\n+  void populateFromQueueBatched(long currentlyIndexedNodeId)\n+  {\n+    if (isQueueThresholdReached())\n+    {\n+      populateFromQueue(currentlyIndexedNodeId);\n+    }\n+  }\n+\n+  private boolean isQueueThresholdReached()\n+  {\n+    return queue.size() >= QUEUE_THRESHOLD;\n+  }\n \n-    IndexPopulation addPopulator(\n-            IndexPopulator populator,\n-            long indexId,\n-            IndexMeta indexMeta,\n-            FlippableIndexProxy flipper,\n-            FailedIndexProxyFactory failedIndexProxyFactory,\n-            String indexUserDescription )\n-    {\n-        IndexPopulation population =\n-                createPopulation( populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription );\n-        populations.add( population );\n-        return population;\n-    }\n+  protected void populateFromQueue(long currentlyIndexedNodeId)\n+  {\n+    populateFromQueueIfAvailable(currentlyIndexedNodeId);\n+  }\n \n-    protected IndexPopulation createPopulation( IndexPopulator populator, long indexId, IndexMeta indexMeta,\n-            FlippableIndexProxy flipper, FailedIndexProxyFactory failedIndexProxyFactory, String indexUserDescription )\n-    {\n-        return new IndexPopulation( populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription );\n-    }\n+  void flushAll()\n+  {\n+    populations.forEach(this::flush);\n+  }\n \n-    boolean hasPopulators()\n+  protected void flush(IndexPopulation population)\n+  {\n+    try\n     {\n-        return !populations.isEmpty();\n-    }\n-\n-    @Override\n-    public void create()\n+      population.populator.add(population.takeCurrentBatch());\n+    } catch (Throwable failure)\n     {\n-        forEachPopulation( population ->\n-        {\n-            log.info( \"Index population started: [%s]\", population.indexUserDescription );\n-            population.create();\n-        } );\n+      fail(population, failure);\n     }\n+  }\n \n-    @Override\n-    public void drop()\n+  private void populateFromQueueIfAvailable(long currentlyIndexedNodeId)\n+  {\n+    if (!queue.isEmpty())\n     {\n-        throw new UnsupportedOperationException( \"Can't drop indexes from this populator implementation\" );\n-    }\n-\n-    @Override\n-    public void add( Collection<? extends IndexEntryUpdate<?>> updates )\n-    {\n-        throw new UnsupportedOperationException( \"Can't populate directly using this populator implementation. \" );\n-    }\n-\n-    public StoreScan<IndexPopulationFailedKernelException> indexAllNodes()\n-    {\n-        int[] labelIds = labelIds();\n-        int[] propertyKeyIds = propertyKeyIds();\n-        IntPredicate propertyKeyIdFilter = propertyKeyId -> contains( propertyKeyIds, propertyKeyId );\n-\n-        storeScan = storeView.visitNodes( labelIds, propertyKeyIdFilter, new NodePopulationVisitor(), null, false );\n-        return new DelegatingStoreScan<IndexPopulationFailedKernelException>( storeScan )\n+      try (MultipleIndexUpdater updater = newPopulatingUpdater(storeView))\n+      {\n+        do\n         {\n-            @Override\n-            public void run() throws IndexPopulationFailedKernelException\n-            {\n-                super.run();\n-                flushAll();\n-            }\n-        };\n+          // no need to check for null as nobody else is emptying this queue\n+          IndexEntryUpdate<?> update = queue.poll();\n+          storeScan.acceptUpdate(updater, update, currentlyIndexedNodeId);\n+        }\n+        while (!queue.isEmpty());\n+      }\n     }\n+  }\n \n-    /**\n-     * Queues an update to be fed into the index populators. These updates come from changes being made\n-     * to storage while a concurrent scan is happening to keep populators up to date with all latest changes.\n-     *\n-     * @param update {@link IndexEntryUpdate} to queue.\n-     */\n-    public void queue( IndexEntryUpdate<?> update )\n+  private void forEachPopulation(ThrowingConsumer<IndexPopulation, Exception> action)\n+  {\n+    for (IndexPopulation population : populations)\n     {\n-        queue.add( update );\n+      try\n+      {\n+        action.accept(population);\n+      } catch (Throwable failure)\n+      {\n+        fail(population, failure);\n+      }\n     }\n+  }\n \n-    /**\n-     * Called if forced failure from the outside\n-     *\n-     * @param failure index population failure.\n-     */\n-    public void fail( Throwable failure )\n+  public static class MultipleIndexUpdater implements IndexUpdater\n+  {\n+    private final Map<SchemaDescriptor, Pair<IndexPopulation, IndexUpdater>> populationsWithUpdaters;\n+    private final MultipleIndexPopulator multipleIndexPopulator;\n+    private final Log log;\n+\n+    MultipleIndexUpdater(MultipleIndexPopulator multipleIndexPopulator,\n+                         Map<SchemaDescriptor, Pair<IndexPopulation, IndexUpdater>> populationsWithUpdaters, LogProvider logProvider)\n     {\n-        for ( IndexPopulation population : populations )\n-        {\n-            fail( population, failure );\n-        }\n+      this.multipleIndexPopulator = multipleIndexPopulator;\n+      this.populationsWithUpdaters = populationsWithUpdaters;\n+      this.log = logProvider.getLog(getClass());\n     }\n \n-    protected void fail( IndexPopulation population, Throwable failure )\n+    @Override\n+    public void process(IndexEntryUpdate<?> update)\n     {\n-        if ( !removeFromOngoingPopulations( population ) )\n-        {\n-            return;\n-        }\n-\n-        // If the cause of index population failure is a conflict in a (unique) index, the conflict is the failure\n-        if ( failure instanceof IndexPopulationFailedKernelException )\n-        {\n-            Throwable cause = failure.getCause();\n-            if ( cause instanceof IndexEntryConflictException )\n-            {\n-                failure = cause;\n-            }\n-        }\n+      Pair<IndexPopulation, IndexUpdater> pair = populationsWithUpdaters.get(update.indexKey().schema());\n+      if (pair != null)\n+      {\n+        IndexPopulation population = pair.first();\n+        IndexUpdater updater = pair.other();\n \n-        log.error( format( \"Failed to populate index: [%s]\", population.indexUserDescription ), failure );\n-\n-        // The flipper will have already flipped to a failed index context here, but\n-        // it will not include the cause of failure, so we do another flip to a failed\n-        // context that does.\n-\n-        // The reason for having the flipper transition to the failed index context in the first\n-        // place is that we would otherwise introduce a race condition where updates could come\n-        // in to the old context, if something failed in the job we send to the flipper.\n-        IndexPopulationFailure indexPopulationFailure = failure( failure );\n-        population.flipToFailed( indexPopulationFailure );\n         try\n         {\n-            population.populator.markAsFailed( indexPopulationFailure.asString() );\n-            population.populator.close( false );\n-        }\n-        catch ( Throwable e )\n+          updater.process(update);\n+        } catch (Throwable t)\n         {\n-            log.error( format( \"Unable to close failed populator for index: [%s]\",\n-                    population.indexUserDescription ), e );\n+          try\n+          {\n+            updater.close();\n+          } catch (Throwable ce)\n+          {\n+            log.error(format(\"Failed to close index updater: [%s]\", updater), ce);\n+          }\n+          populationsWithUpdaters.remove(update.indexKey().schema());\n+          multipleIndexPopulator.fail(population, t);\n         }\n+      }\n     }\n \n     @Override\n-    public void verifyDeferredConstraints( PropertyAccessor accessor )\n+    public void close()\n     {\n-        throw new UnsupportedOperationException( \"Should not be called directly\" );\n-    }\n+      for (Pair<IndexPopulation, IndexUpdater> pair : populationsWithUpdaters.values())\n+      {\n+        IndexPopulation population = pair.first();\n+        IndexUpdater updater = pair.other();\n \n-    @Override\n-    public MultipleIndexUpdater newPopulatingUpdater( PropertyAccessor accessor )\n-    {\n-        Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> updaters = new HashMap<>();\n-        forEachPopulation( population ->\n+        try\n         {\n-            IndexUpdater updater = population.populator.newPopulatingUpdater( accessor );\n-            updaters.put( population.schema(), Pair.of( population, updater ) );\n-        } );\n-        return new MultipleIndexUpdater( this, updaters, logProvider );\n-    }\n-\n-    @Override\n-    public void close( boolean populationCompletedSuccessfully )\n-    {\n-        forEachPopulation( population -> population.populator.close( populationCompletedSuccessfully ) );\n+          updater.close();\n+        } catch (Throwable t)\n+        {\n+          multipleIndexPopulator.fail(population, t);\n+        }\n+      }\n+      populationsWithUpdaters.clear();\n     }\n+  }\n \n-    @Override\n-    public void markAsFailed( String failure )\n-    {\n-        throw new UnsupportedOperationException( \"Multiple index populator can't be marked as failed.\" );\n-    }\n+  public class IndexPopulation implements SchemaDescriptorSupplier\n+  {\n+    public final IndexPopulator populator;\n+    final FlippableIndexProxy flipper;\n+    private final long indexId;\n+    private final IndexMeta indexMeta;\n+    private final IndexCountsRemover indexCountsRemover;\n+    private final FailedIndexProxyFactory failedIndexProxyFactory;\n+    private final String indexUserDescription;\n+    private boolean populationOngoing = true;\n+    private final ReentrantLock populatorLock = new ReentrantLock();\n \n-    @Override\n-    public void includeSample( IndexEntryUpdate<?> update )\n-    {\n-        throw new UnsupportedOperationException( \"Multiple index populator can't perform index sampling.\" );\n-    }\n+    List<IndexEntryUpdate<?>> batchedUpdates;\n \n-    @Override\n-    public IndexSample sampleResult()\n+    IndexPopulation(\n+        IndexPopulator populator,\n+        long indexId,\n+        IndexMeta indexMeta,\n+        FlippableIndexProxy flipper,\n+        FailedIndexProxyFactory failedIndexProxyFactory,\n+        String indexUserDescription)\n     {\n-        throw new UnsupportedOperationException( \"Multiple index populator can't perform index sampling.\" );\n+      this.populator = populator;\n+      this.indexId = indexId;\n+      this.indexMeta = indexMeta;\n+      this.flipper = flipper;\n+      this.failedIndexProxyFactory = failedIndexProxyFactory;\n+      this.indexUserDescription = indexUserDescription;\n+      this.indexCountsRemover = new IndexCountsRemover(storeView, indexId);\n+      this.batchedUpdates = new ArrayList<>(BATCH_SIZE);\n     }\n \n-    void resetIndexCounts()\n+    private void flipToFailed(IndexPopulationFailure failure)\n     {\n-        forEachPopulation( this::resetIndexCountsForPopulation );\n+      flipper.flipTo(new FailedIndexProxy(indexMeta, indexUserDescription, populator, failure, indexCountsRemover, logProvider));\n     }\n \n-    private void resetIndexCountsForPopulation( IndexPopulation indexPopulation )\n+    void create() throws IOException\n     {\n-        storeView.replaceIndexCounts( indexPopulation.indexId, 0, 0, 0 );\n-    }\n-\n-    void flipAfterPopulation()\n-    {\n-        for ( IndexPopulation population : populations )\n+      populatorLock.lock();\n+      try\n+      {\n+        if (populationOngoing)\n         {\n-            try\n-            {\n-                population.flip();\n-            }\n-            catch ( Throwable t )\n-            {\n-                fail( population, t );\n-            }\n+          populator.create();\n         }\n+      } finally\n+      {\n+        populatorLock.unlock();\n+      }\n     }\n \n-    private int[] propertyKeyIds()\n+    void cancel() throws IOException\n     {\n-        return populations.stream().flatMapToInt( this::propertyKeyIds ).distinct().toArray();\n-    }\n-\n-    private IntStream propertyKeyIds( IndexPopulation population )\n-    {\n-        return IntStream.of( population.schema().getPropertyIds() );\n-    }\n-\n-    private int[] labelIds()\n-    {\n-        return populations.stream().mapToInt( population -> population.schema().keyId() ).toArray();\n+      populatorLock.lock();\n+      try\n+      {\n+        if (populationOngoing)\n+        {\n+          populator.close(false);\n+          resetIndexCountsForPopulation(this);\n+          removeFromOngoingPopulations(this);\n+          populationOngoing = false;\n+        }\n+      } finally\n+      {\n+        populatorLock.unlock();\n+      }\n     }\n \n-    public void cancel()\n+    private void onUpdate(IndexEntryUpdate<?> update)\n     {\n-        forEachPopulation( this::cancelIndexPopulation );\n+      populator.includeSample(update);\n+      if (batch(update))\n+      {\n+        flush(this);\n+      }\n     }\n \n-    void cancelIndexPopulation( IndexPopulation indexPopulation )\n+    void flip() throws FlipFailedKernelException\n     {\n+      flipper.flip(() ->\n+      {\n+        populatorLock.lock();\n         try\n         {\n-            indexPopulation.cancel();\n-        }\n-        catch ( IOException e )\n+          if (populationOngoing)\n+          {\n+            populator.add(takeCurrentBatch());\n+            populateFromQueueIfAvailable(Long.MAX_VALUE);\n+            if (populations.contains(IndexPopulation.this))\n+            {\n+              IndexSample sample = populator.sampleResult();\n+              storeView.replaceIndexCounts(indexId, sample.uniqueValues(), sample.sampleSize(), sample.indexSize());\n+              populator.close(true);\n+              schemaState.clear();\n+              return true;\n+            }\n+          }\n+          return false;\n+        } finally\n         {\n-            fail( indexPopulation, e );\n+          logCompletionMessage();\n+          populationOngoing = false;\n+          populatorLock.unlock();\n         }\n+      }, failedIndexProxyFactory);\n+      removeFromOngoingPopulations(this);\n     }\n \n-    private boolean removeFromOngoingPopulations( IndexPopulation indexPopulation )\n+    private void logCompletionMessage()\n     {\n-        return populations.remove( indexPopulation );\n+      log.info(\"Index creation finished for index [%s].\", indexUserDescription);\n     }\n \n-    void populateFromQueueBatched( long currentlyIndexedNodeId )\n+    private boolean isIndexPopulationOngoing(InternalIndexState postPopulationState)\n     {\n-        if ( isQueueThresholdReached() )\n-        {\n-            populateFromQueue( currentlyIndexedNodeId );\n-        }\n+      return InternalIndexState.POPULATING == postPopulationState;\n     }\n \n-    private boolean isQueueThresholdReached()\n+    @Override\n+    public SchemaDescriptor schema()\n     {\n-        return queue.size() >= QUEUE_THRESHOLD;\n+      return indexMeta.indexDescriptor().schema();\n     }\n \n-    protected void populateFromQueue( long currentlyIndexedNodeId )\n+    public boolean batch(IndexEntryUpdate<?> update)\n     {\n-        populateFromQueueIfAvailable( currentlyIndexedNodeId );\n+      batchedUpdates.add(update);\n+      return batchedUpdates.size() >= BATCH_SIZE;\n     }\n \n-    void flushAll()\n+    Collection<IndexEntryUpdate<?>> takeCurrentBatch()\n     {\n-        populations.forEach( this::flush );\n+      if (batchedUpdates.isEmpty())\n+      {\n+        return Collections.emptyList();\n+      }\n+      Collection<IndexEntryUpdate<?>> batch = batchedUpdates;\n+      batchedUpdates = new ArrayList<>(BATCH_SIZE);\n+      return batch;\n     }\n+  }\n \n-    protected void flush( IndexPopulation population )\n+  private class NodePopulationVisitor implements Visitor<NodeUpdates,\n+      IndexPopulationFailedKernelException>\n+  {\n+    @Override\n+    public boolean visit(NodeUpdates updates)\n     {\n-        try\n-        {\n-            population.populator.add( population.takeCurrentBatch() );\n-        }\n-        catch ( Throwable failure )\n-        {\n-            fail( population, failure );\n-        }\n+      add(updates);\n+      populateFromQueueBatched(updates.getNodeId());\n+      return false;\n     }\n \n-    private void populateFromQueueIfAvailable( long currentlyIndexedNodeId )\n+    private void add(NodeUpdates updates)\n     {\n-        if ( !queue.isEmpty() )\n-        {\n-            try ( MultipleIndexUpdater updater = newPopulatingUpdater( storeView ) )\n-            {\n-                do\n-                {\n-                    // no need to check for null as nobody else is emptying this queue\n-                    IndexEntryUpdate<?> update = queue.poll();\n-                    storeScan.acceptUpdate( updater, update, currentlyIndexedNodeId );\n-                }\n-                while ( !queue.isEmpty() );\n-            }\n-        }\n+      // This is called from a full store node scan, meaning that all node properties are included in the\n+      // NodeUpdates object. Therefore no additional properties need to be loaded.\n+      for (IndexEntryUpdate<IndexPopulation> indexUpdate : updates.forIndexKeys(populations))\n+      {\n+        indexUpdate.indexKey().onUpdate(indexUpdate);\n+      }\n     }\n+  }\n \n-    private void forEachPopulation( ThrowingConsumer<IndexPopulation,Exception> action )\n+  protected static class DelegatingStoreScan<E extends Exception> implements StoreScan<E>\n+  {\n+    private final StoreScan<E> delegate;\n+\n+    DelegatingStoreScan(StoreScan<E> delegate)\n     {\n-        for ( IndexPopulation population : populations )\n-        {\n-            try\n-            {\n-                action.accept( population );\n-            }\n-            catch ( Throwable failure )\n-            {\n-                fail( population, failure );\n-            }\n-        }\n+      this.delegate = delegate;\n     }\n \n-    public static class MultipleIndexUpdater implements IndexUpdater\n+    @Override\n+    public void run() throws E\n     {\n-        private final Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> populationsWithUpdaters;\n-        private final MultipleIndexPopulator multipleIndexPopulator;\n-        private final Log log;\n-\n-        MultipleIndexUpdater( MultipleIndexPopulator multipleIndexPopulator,\n-                Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> populationsWithUpdaters, LogProvider logProvider )\n-        {\n-            this.multipleIndexPopulator = multipleIndexPopulator;\n-            this.populationsWithUpdaters = populationsWithUpdaters;\n-            this.log = logProvider.getLog( getClass() );\n-        }\n-\n-        @Override\n-        public void process( IndexEntryUpdate<?> update )\n-        {\n-            Pair<IndexPopulation,IndexUpdater> pair = populationsWithUpdaters.get( update.indexKey().schema() );\n-            if ( pair != null )\n-            {\n-                IndexPopulation population = pair.first();\n-                IndexUpdater updater = pair.other();\n-\n-                try\n-                {\n-                    updater.process( update );\n-                }\n-                catch ( Throwable t )\n-                {\n-                    try\n-                    {\n-                        updater.close();\n-                    }\n-                    catch ( Throwable ce )\n-                    {\n-                        log.error( format( \"Failed to close index updater: [%s]\", updater ), ce );\n-                    }\n-                    populationsWithUpdaters.remove( update.indexKey().schema() );\n-                    multipleIndexPopulator.fail( population, t );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            for ( Pair<IndexPopulation,IndexUpdater> pair : populationsWithUpdaters.values() )\n-            {\n-                IndexPopulation population = pair.first();\n-                IndexUpdater updater = pair.other();\n-\n-                try\n-                {\n-                    updater.close();\n-                }\n-                catch ( Throwable t )\n-                {\n-                    multipleIndexPopulator.fail( population, t );\n-                }\n-            }\n-            populationsWithUpdaters.clear();\n-        }\n+      delegate.run();\n     }\n \n-    public class IndexPopulation implements SchemaDescriptorSupplier\n-    {\n-        public final IndexPopulator populator;\n-        final FlippableIndexProxy flipper;\n-        private final long indexId;\n-        private final IndexMeta indexMeta;\n-        private final IndexCountsRemover indexCountsRemover;\n-        private final FailedIndexProxyFactory failedIndexProxyFactory;\n-        private final String indexUserDescription;\n-        private boolean populationOngoing = true;\n-        private final ReentrantLock populatorLock = new ReentrantLock();\n-\n-        List<IndexEntryUpdate<?>> batchedUpdates;\n-\n-        IndexPopulation(\n-                IndexPopulator populator,\n-                long indexId,\n-                IndexMeta indexMeta,\n-                FlippableIndexProxy flipper,\n-                FailedIndexProxyFactory failedIndexProxyFactory,\n-                String indexUserDescription )\n-        {\n-            this.populator = populator;\n-            this.indexId = indexId;\n-            this.indexMeta = indexMeta;\n-            this.flipper = flipper;\n-            this.failedIndexProxyFactory = failedIndexProxyFactory;\n-            this.indexUserDescription = indexUserDescription;\n-            this.indexCountsRemover = new IndexCountsRemover( storeView, indexId );\n-            this.batchedUpdates = new ArrayList<>( BATCH_SIZE );\n-        }\n-\n-        private void flipToFailed( IndexPopulationFailure failure )\n-        {\n-            flipper.flipTo( new FailedIndexProxy( indexMeta, indexUserDescription, populator, failure, indexCountsRemover, logProvider ) );\n-        }\n-\n-        void create() throws IOException\n-        {\n-            populatorLock.lock();\n-            try\n-            {\n-                if ( populationOngoing )\n-                {\n-                    populator.create();\n-                }\n-            }\n-            finally\n-            {\n-                populatorLock.unlock();\n-            }\n-        }\n-\n-        void cancel() throws IOException\n-        {\n-            populatorLock.lock();\n-            try\n-            {\n-                if ( populationOngoing )\n-                {\n-                    populator.close( false );\n-                    resetIndexCountsForPopulation( this );\n-                    removeFromOngoingPopulations( this );\n-                    populationOngoing = false;\n-                }\n-            }\n-            finally\n-            {\n-                populatorLock.unlock();\n-            }\n-        }\n-\n-        private void onUpdate( IndexEntryUpdate<?> update )\n-        {\n-            populator.includeSample( update );\n-            if ( batch( update ) )\n-            {\n-                flush( this );\n-            }\n-        }\n-\n-        void flip() throws FlipFailedKernelException\n-        {\n-            flipper.flip( () ->\n-            {\n-                populatorLock.lock();\n-                try\n-                {\n-                    if ( populationOngoing )\n-                    {\n-                        populator.add( takeCurrentBatch() );\n-                        populateFromQueueIfAvailable( Long.MAX_VALUE );\n-                        if ( populations.contains( IndexPopulation.this ) )\n-                        {\n-                            IndexSample sample = populator.sampleResult();\n-                            storeView.replaceIndexCounts( indexId, sample.uniqueValues(), sample.sampleSize(), sample.indexSize() );\n-                            populator.close( true );\n-                            schemaState.clear();\n-                            return true;\n-                        }\n-                    }\n-                    return false;\n-                }\n-                finally\n-                {\n-                    logCompletionMessage();\n-                    populationOngoing = false;\n-                    populatorLock.unlock();\n-                }\n-            }, failedIndexProxyFactory );\n-            removeFromOngoingPopulations( this );\n-        }\n-\n-        private void logCompletionMessage()\n-        {\n-            log.info( \"Index creation finished for index [%s].\", indexUserDescription );\n-        }\n-\n-        private boolean isIndexPopulationOngoing( InternalIndexState postPopulationState )\n-        {\n-            return InternalIndexState.POPULATING == postPopulationState;\n-        }\n-\n-        @Override\n-        public SchemaDescriptor schema()\n-        {\n-            return indexMeta.indexDescriptor().schema();\n-        }\n-\n-        public boolean batch( IndexEntryUpdate<?> update )\n-        {\n-            batchedUpdates.add( update );\n-            return batchedUpdates.size() >= BATCH_SIZE;\n-        }\n-\n-        Collection<IndexEntryUpdate<?>> takeCurrentBatch()\n-        {\n-            if ( batchedUpdates.isEmpty() )\n-            {\n-                return Collections.emptyList();\n-            }\n-            Collection<IndexEntryUpdate<?>> batch = batchedUpdates;\n-            batchedUpdates = new ArrayList<>( BATCH_SIZE );\n-            return batch;\n-        }\n+    @Override\n+    public void stop()\n+    {\n+      delegate.stop();\n     }\n \n-    private class NodePopulationVisitor implements Visitor<NodeUpdates,\n-            IndexPopulationFailedKernelException>\n+    @Override\n+    public void acceptUpdate(MultipleIndexUpdater updater, IndexEntryUpdate<?> update, long currentlyIndexedNodeId)\n     {\n-        @Override\n-        public boolean visit( NodeUpdates updates )\n-        {\n-            add( updates );\n-            populateFromQueueBatched( updates.getNodeId() );\n-            return false;\n-        }\n-\n-        private void add( NodeUpdates updates )\n-        {\n-            // This is called from a full store node scan, meaning that all node properties are included in the\n-            // NodeUpdates object. Therefore no additional properties need to be loaded.\n-            for ( IndexEntryUpdate<IndexPopulation> indexUpdate : updates.forIndexKeys( populations ) )\n-            {\n-                indexUpdate.indexKey().onUpdate( indexUpdate );\n-            }\n-        }\n+      delegate.acceptUpdate(updater, update, currentlyIndexedNodeId);\n     }\n \n-    protected static class DelegatingStoreScan<E extends Exception> implements StoreScan<E>\n+    @Override\n+    public PopulationProgress getProgress()\n     {\n-        private final StoreScan<E> delegate;\n-\n-        DelegatingStoreScan( StoreScan<E> delegate )\n-        {\n-            this.delegate = delegate;\n-        }\n-\n-        @Override\n-        public void run() throws E\n-        {\n-            delegate.run();\n-        }\n-\n-        @Override\n-        public void stop()\n-        {\n-            delegate.stop();\n-        }\n-\n-        @Override\n-        public void acceptUpdate( MultipleIndexUpdater updater, IndexEntryUpdate<?> update, long currentlyIndexedNodeId )\n-        {\n-            delegate.acceptUpdate( updater, update, currentlyIndexedNodeId );\n-        }\n-\n-        @Override\n-        public PopulationProgress getProgress()\n-        {\n-            return delegate.getProgress();\n-        }\n+      return delegate.getProgress();\n     }\n+  }\n }\n",
            "diff_size": 846
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "419",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/545/MultipleIndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/545/MultipleIndexPopulator.java\nindex 317cc867a18..f6f6b05555d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/545/MultipleIndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/545/MultipleIndexPopulator.java\n@@ -87,8 +87,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n {\n     public static final String QUEUE_THRESHOLD_NAME = \"queue_threshold\";\n     static final String BATCH_SIZE_NAME = \"batch_size\";\n-\n-    private final int QUEUE_THRESHOLD = FeatureToggles.getInteger( getClass(), QUEUE_THRESHOLD_NAME, 20_000 );\n+private final int QUEUE_THRESHOLD = FeatureToggles.getInteger( getClass(), QUEUE_THRESHOLD_NAME, 20_000 );\n     private final int BATCH_SIZE = FeatureToggles.getInteger( BatchingMultipleIndexPopulator.class, BATCH_SIZE_NAME, 10_000 );\n \n     // Concurrency queue since multiple concurrent threads may enqueue updates into it. It is important for this queue\n@@ -114,17 +113,15 @@ public class MultipleIndexPopulator implements IndexPopulator\n         this.schemaState = schemaState;\n     }\n \n-    IndexPopulation addPopulator(\n-            IndexPopulator populator,\n+    IndexPopulation addPopulator( IndexPopulator populator,\n             long indexId,\n             IndexMeta indexMeta,\n             FlippableIndexProxy flipper,\n             FailedIndexProxyFactory failedIndexProxyFactory,\n             String indexUserDescription )\n     {\n-        IndexPopulation population =\n-                createPopulation( populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription );\n-        populations.add( population );\n+        IndexPopulation population = createPopulation( populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription );\n+populations.add( population );\n         return population;\n     }\n \n@@ -166,8 +163,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n         int[] labelIds = labelIds();\n         int[] propertyKeyIds = propertyKeyIds();\n         IntPredicate propertyKeyIdFilter = propertyKeyId -> contains( propertyKeyIds, propertyKeyId );\n-\n-        storeScan = storeView.visitNodes( labelIds, propertyKeyIdFilter, new NodePopulationVisitor(), null, false );\n+storeScan = storeView.visitNodes( labelIds, propertyKeyIdFilter, new NodePopulationVisitor(), null, false );\n         return new DelegatingStoreScan<IndexPopulationFailedKernelException>( storeScan )\n         {\n             @Override\n@@ -240,7 +236,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n         {\n             log.error( format( \"Unable to close failed populator for index: [%s]\",\n                     population.indexUserDescription ), e );\n-        }\n+    }\n     }\n \n     @Override\n@@ -420,8 +416,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n         private final MultipleIndexPopulator multipleIndexPopulator;\n         private final Log log;\n \n-        MultipleIndexUpdater( MultipleIndexPopulator multipleIndexPopulator,\n-                Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> populationsWithUpdaters, LogProvider logProvider )\n+        MultipleIndexUpdater( MultipleIndexPopulator multipleIndexPopulator, Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> populationsWithUpdaters, LogProvider logProvider )\n         {\n             this.multipleIndexPopulator = multipleIndexPopulator;\n             this.populationsWithUpdaters = populationsWithUpdaters;\n@@ -492,8 +487,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n         List<IndexEntryUpdate<?>> batchedUpdates;\n \n-        IndexPopulation(\n-                IndexPopulator populator,\n+        IndexPopulation( IndexPopulator populator,\n                 long indexId,\n                 IndexMeta indexMeta,\n                 FlippableIndexProxy flipper,\n@@ -625,8 +619,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n         }\n     }\n \n-    private class NodePopulationVisitor implements Visitor<NodeUpdates,\n-            IndexPopulationFailedKernelException>\n+    private class NodePopulationVisitor implements Visitor<NodeUpdates,IndexPopulationFailedKernelException>\n     {\n         @Override\n         public boolean visit( NodeUpdates updates )\n@@ -680,4 +673,4 @@ public class MultipleIndexPopulator implements IndexPopulator\n             return delegate.getProgress();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "292",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "1",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "399",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "399",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "457",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "490",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "633",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "641",
                    "column": "48",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/545/MultipleIndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/545/MultipleIndexPopulator.java\nindex 317cc867a18..c0ff582322c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/545/MultipleIndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/545/MultipleIndexPopulator.java\n@@ -32,7 +32,6 @@ import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.function.IntPredicate;\n import java.util.stream.IntStream;\n-\n import org.neo4j.function.ThrowingConsumer;\n import org.neo4j.helpers.collection.Pair;\n import org.neo4j.helpers.collection.Visitor;\n@@ -52,9 +51,10 @@ import org.neo4j.logging.LogProvider;\n import org.neo4j.storageengine.api.schema.IndexSample;\n import org.neo4j.storageengine.api.schema.PopulationProgress;\n import org.neo4j.util.FeatureToggles;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.collection.primitive.PrimitiveIntCollections.contains;\n+\n import static org.neo4j.kernel.impl.api.index.IndexPopulationFailure.failure;\n \n /**\n@@ -83,11 +83,11 @@ import static org.neo4j.kernel.impl.api.index.IndexPopulationFailure.failure;\n  * <li>Call to {@link #flipAfterPopulation()} after successful population, or {@link #fail(Throwable)} if not</li>\n  * </ol>\n  */\n+\n public class MultipleIndexPopulator implements IndexPopulator\n {\n     public static final String QUEUE_THRESHOLD_NAME = \"queue_threshold\";\n     static final String BATCH_SIZE_NAME = \"batch_size\";\n-\n     private final int QUEUE_THRESHOLD = FeatureToggles.getInteger( getClass(), QUEUE_THRESHOLD_NAME, 20_000 );\n     private final int BATCH_SIZE = FeatureToggles.getInteger( BatchingMultipleIndexPopulator.class, BATCH_SIZE_NAME, 10_000 );\n \n@@ -99,7 +99,6 @@ public class MultipleIndexPopulator implements IndexPopulator\n     // Multiple concurrent threads might fail individual populations.\n     // Failed populations are removed from this list while iterating over it.\n     final List<IndexPopulation> populations = new CopyOnWriteArrayList<>();\n-\n     private final IndexStoreView storeView;\n     private final LogProvider logProvider;\n     protected final Log log;\n@@ -114,39 +113,31 @@ public class MultipleIndexPopulator implements IndexPopulator\n         this.schemaState = schemaState;\n     }\n \n-    IndexPopulation addPopulator(\n-            IndexPopulator populator,\n-            long indexId,\n-            IndexMeta indexMeta,\n-            FlippableIndexProxy flipper,\n-            FailedIndexProxyFactory failedIndexProxyFactory,\n-            String indexUserDescription )\n+    IndexPopulation addPopulator( IndexPopulator populator, long indexId, IndexMeta indexMeta, FlippableIndexProxy flipper, FailedIndexProxyFactory failedIndexProxyFactory, String indexUserDescription )\n     {\n-        IndexPopulation population =\n-                createPopulation( populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription );\n+        IndexPopulation population = createPopulation( populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription );\n         populations.add( population );\n         return population;\n     }\n \n-    protected IndexPopulation createPopulation( IndexPopulator populator, long indexId, IndexMeta indexMeta,\n-            FlippableIndexProxy flipper, FailedIndexProxyFactory failedIndexProxyFactory, String indexUserDescription )\n+    protected IndexPopulation createPopulation( IndexPopulator populator, long indexId, IndexMeta indexMeta, FlippableIndexProxy flipper, FailedIndexProxyFactory failedIndexProxyFactory, String indexUserDescription )\n     {\n         return new IndexPopulation( populator, indexId, indexMeta, flipper, failedIndexProxyFactory, indexUserDescription );\n     }\n \n     boolean hasPopulators()\n     {\n-        return !populations.isEmpty();\n+        return ! populations.isEmpty();\n     }\n \n     @Override\n     public void create()\n     {\n         forEachPopulation( population ->\n-        {\n-            log.info( \"Index population started: [%s]\", population.indexUserDescription );\n-            population.create();\n-        } );\n+                           {\n+                               log.info( \"Index population started: [%s]\", population.indexUserDescription );\n+                               population.create();\n+                           } );\n     }\n \n     @Override\n@@ -166,17 +157,16 @@ public class MultipleIndexPopulator implements IndexPopulator\n         int[] labelIds = labelIds();\n         int[] propertyKeyIds = propertyKeyIds();\n         IntPredicate propertyKeyIdFilter = propertyKeyId -> contains( propertyKeyIds, propertyKeyId );\n-\n         storeScan = storeView.visitNodes( labelIds, propertyKeyIdFilter, new NodePopulationVisitor(), null, false );\n         return new DelegatingStoreScan<IndexPopulationFailedKernelException>( storeScan )\n-        {\n-            @Override\n-            public void run() throws IndexPopulationFailedKernelException\n-            {\n-                super.run();\n-                flushAll();\n-            }\n-        };\n+{\n+    @Override\n+    public void run() throws IndexPopulationFailedKernelException\n+    {\n+        super.run( );\n+        flushAll();\n+    }\n+};\n     }\n \n     /**\n@@ -185,6 +175,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n      *\n      * @param update {@link IndexEntryUpdate} to queue.\n      */\n+\n     public void queue( IndexEntryUpdate<?> update )\n     {\n         queue.add( update );\n@@ -195,9 +186,10 @@ public class MultipleIndexPopulator implements IndexPopulator\n      *\n      * @param failure index population failure.\n      */\n+\n     public void fail( Throwable failure )\n     {\n-        for ( IndexPopulation population : populations )\n+        for( IndexPopulation population : populations)\n         {\n             fail( population, failure );\n         }\n@@ -205,12 +197,13 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n     protected void fail( IndexPopulation population, Throwable failure )\n     {\n-        if ( !removeFromOngoingPopulations( population ) )\n+        if ( ! removeFromOngoingPopulations( population ) )\n         {\n             return;\n         }\n \n         // If the cause of index population failure is a conflict in a (unique) index, the conflict is the failure\n+\n         if ( failure instanceof IndexPopulationFailedKernelException )\n         {\n             Throwable cause = failure.getCause();\n@@ -238,8 +231,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n         }\n         catch ( Throwable e )\n         {\n-            log.error( format( \"Unable to close failed populator for index: [%s]\",\n-                    population.indexUserDescription ), e );\n+            log.error( format( \"Unable to close failed populator for index: [%s]\", population.indexUserDescription ), e );\n         }\n     }\n \n@@ -254,10 +246,10 @@ public class MultipleIndexPopulator implements IndexPopulator\n     {\n         Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> updaters = new HashMap<>();\n         forEachPopulation( population ->\n-        {\n-            IndexUpdater updater = population.populator.newPopulatingUpdater( accessor );\n-            updaters.put( population.schema(), Pair.of( population, updater ) );\n-        } );\n+                           {\n+                               IndexUpdater updater = population.populator.newPopulatingUpdater( accessor );\n+                               updaters.put( population.schema(), Pair.of( population, updater ) );\n+                           } );\n         return new MultipleIndexUpdater( this, updaters, logProvider );\n     }\n \n@@ -287,7 +279,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n     void resetIndexCounts()\n     {\n-        forEachPopulation( this::resetIndexCountsForPopulation );\n+        forEachPopulation( this:: resetIndexCountsForPopulation );\n     }\n \n     private void resetIndexCountsForPopulation( IndexPopulation indexPopulation )\n@@ -297,7 +289,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n     void flipAfterPopulation()\n     {\n-        for ( IndexPopulation population : populations )\n+        for( IndexPopulation population : populations)\n         {\n             try\n             {\n@@ -312,7 +304,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n     private int[] propertyKeyIds()\n     {\n-        return populations.stream().flatMapToInt( this::propertyKeyIds ).distinct().toArray();\n+        return populations.stream().flatMapToInt( this:: propertyKeyIds ).distinct().toArray();\n     }\n \n     private IntStream propertyKeyIds( IndexPopulation population )\n@@ -327,7 +319,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n     public void cancel()\n     {\n-        forEachPopulation( this::cancelIndexPopulation );\n+        forEachPopulation( this:: cancelIndexPopulation );\n     }\n \n     void cancelIndexPopulation( IndexPopulation indexPopulation )\n@@ -367,7 +359,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n     void flushAll()\n     {\n-        populations.forEach( this::flush );\n+        populations.forEach( this:: flush );\n     }\n \n     protected void flush( IndexPopulation population )\n@@ -384,9 +376,10 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n     private void populateFromQueueIfAvailable( long currentlyIndexedNodeId )\n     {\n-        if ( !queue.isEmpty() )\n+        if ( ! queue.isEmpty() )\n         {\n-            try ( MultipleIndexUpdater updater = newPopulatingUpdater( storeView ) )\n+            try\n+                ( MultipleIndexUpdater updater = newPopulatingUpdater( storeView ))\n             {\n                 do\n                 {\n@@ -394,14 +387,16 @@ public class MultipleIndexPopulator implements IndexPopulator\n                     IndexEntryUpdate<?> update = queue.poll();\n                     storeScan.acceptUpdate( updater, update, currentlyIndexedNodeId );\n                 }\n-                while ( !queue.isEmpty() );\n+\n+while( ! queue.isEmpty()\n+);\n             }\n         }\n     }\n \n     private void forEachPopulation( ThrowingConsumer<IndexPopulation,Exception> action )\n     {\n-        for ( IndexPopulation population : populations )\n+        for( IndexPopulation population : populations)\n         {\n             try\n             {\n@@ -420,8 +415,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n         private final MultipleIndexPopulator multipleIndexPopulator;\n         private final Log log;\n \n-        MultipleIndexUpdater( MultipleIndexPopulator multipleIndexPopulator,\n-                Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> populationsWithUpdaters, LogProvider logProvider )\n+        MultipleIndexUpdater( MultipleIndexPopulator multipleIndexPopulator, Map<SchemaDescriptor,Pair<IndexPopulation,IndexUpdater>> populationsWithUpdaters, LogProvider logProvider )\n         {\n             this.multipleIndexPopulator = multipleIndexPopulator;\n             this.populationsWithUpdaters = populationsWithUpdaters;\n@@ -436,7 +430,6 @@ public class MultipleIndexPopulator implements IndexPopulator\n             {\n                 IndexPopulation population = pair.first();\n                 IndexUpdater updater = pair.other();\n-\n                 try\n                 {\n                     updater.process( update );\n@@ -451,6 +444,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n                     {\n                         log.error( format( \"Failed to close index updater: [%s]\", updater ), ce );\n                     }\n+\n                     populationsWithUpdaters.remove( update.indexKey().schema() );\n                     multipleIndexPopulator.fail( population, t );\n                 }\n@@ -460,11 +454,11 @@ public class MultipleIndexPopulator implements IndexPopulator\n         @Override\n         public void close()\n         {\n-            for ( Pair<IndexPopulation,IndexUpdater> pair : populationsWithUpdaters.values() )\n+            for( Pair<IndexPopulation,IndexUpdater> pair : populationsWithUpdaters.values()\n+            )\n             {\n                 IndexPopulation population = pair.first();\n                 IndexUpdater updater = pair.other();\n-\n                 try\n                 {\n                     updater.close();\n@@ -474,6 +468,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n                     multipleIndexPopulator.fail( population, t );\n                 }\n             }\n+\n             populationsWithUpdaters.clear();\n         }\n     }\n@@ -492,13 +487,7 @@ public class MultipleIndexPopulator implements IndexPopulator\n \n         List<IndexEntryUpdate<?>> batchedUpdates;\n \n-        IndexPopulation(\n-                IndexPopulator populator,\n-                long indexId,\n-                IndexMeta indexMeta,\n-                FlippableIndexProxy flipper,\n-                FailedIndexProxyFactory failedIndexProxyFactory,\n-                String indexUserDescription )\n+        IndexPopulation( IndexPopulator populator, long indexId, IndexMeta indexMeta, FlippableIndexProxy flipper, FailedIndexProxyFactory failedIndexProxyFactory, String indexUserDescription )\n         {\n             this.populator = populator;\n             this.indexId = indexId;\n@@ -562,32 +551,33 @@ public class MultipleIndexPopulator implements IndexPopulator\n         void flip() throws FlipFailedKernelException\n         {\n             flipper.flip( () ->\n-            {\n-                populatorLock.lock();\n-                try\n-                {\n-                    if ( populationOngoing )\n-                    {\n-                        populator.add( takeCurrentBatch() );\n-                        populateFromQueueIfAvailable( Long.MAX_VALUE );\n-                        if ( populations.contains( IndexPopulation.this ) )\n-                        {\n-                            IndexSample sample = populator.sampleResult();\n-                            storeView.replaceIndexCounts( indexId, sample.uniqueValues(), sample.sampleSize(), sample.indexSize() );\n-                            populator.close( true );\n-                            schemaState.clear();\n-                            return true;\n-                        }\n-                    }\n-                    return false;\n-                }\n-                finally\n-                {\n-                    logCompletionMessage();\n-                    populationOngoing = false;\n-                    populatorLock.unlock();\n-                }\n-            }, failedIndexProxyFactory );\n+                          {\n+                              populatorLock.lock();\n+                              try\n+                              {\n+                                  if ( populationOngoing )\n+                                  {\n+                                      populator.add( takeCurrentBatch() );\n+                                      populateFromQueueIfAvailable( Long.MAX_VALUE );\n+                                      if ( populations.contains( IndexPopulation.this ) )\n+                                      {\n+                                          IndexSample sample = populator.sampleResult();\n+                                          storeView.replaceIndexCounts( indexId, sample.uniqueValues(), sample.sampleSize(), sample.indexSize() );\n+                                          populator.close( true );\n+                                          schemaState.clear();\n+                                          return true;\n+                                      }\n+                                  }\n+\n+                                  return false;\n+                              }\n+                              finally\n+                              {\n+                                  logCompletionMessage();\n+                                  populationOngoing = false;\n+                                  populatorLock.unlock();\n+                              }\n+                          }, failedIndexProxyFactory );\n             removeFromOngoingPopulations( this );\n         }\n \n@@ -619,14 +609,14 @@ public class MultipleIndexPopulator implements IndexPopulator\n             {\n                 return Collections.emptyList();\n             }\n+\n             Collection<IndexEntryUpdate<?>> batch = batchedUpdates;\n             batchedUpdates = new ArrayList<>( BATCH_SIZE );\n             return batch;\n         }\n     }\n \n-    private class NodePopulationVisitor implements Visitor<NodeUpdates,\n-            IndexPopulationFailedKernelException>\n+    private class NodePopulationVisitor implements Visitor<NodeUpdates,IndexPopulationFailedKernelException>\n     {\n         @Override\n         public boolean visit( NodeUpdates updates )\n@@ -640,14 +630,15 @@ public class MultipleIndexPopulator implements IndexPopulator\n         {\n             // This is called from a full store node scan, meaning that all node properties are included in the\n             // NodeUpdates object. Therefore no additional properties need to be loaded.\n-            for ( IndexEntryUpdate<IndexPopulation> indexUpdate : updates.forIndexKeys( populations ) )\n+            for( IndexEntryUpdate<IndexPopulation> indexUpdate : updates.forIndexKeys( populations )\n+            )\n             {\n                 indexUpdate.indexKey().onUpdate( indexUpdate );\n             }\n         }\n     }\n \n-    protected static class DelegatingStoreScan<E extends Exception> implements StoreScan<E>\n+    protected static class DelegatingStoreScan <E extends Exception> implements StoreScan<E>\n     {\n         private final StoreScan<E> delegate;\n \n@@ -680,4 +671,4 @@ public class MultipleIndexPopulator implements IndexPopulator\n             return delegate.getProgress();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}