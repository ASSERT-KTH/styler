{
    "project_name": "ppati000-visualDFA",
    "error_id": "6",
    "information": {
        "errors": [
            {
                "line": "5",
                "column": "4",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "/**\n * @author Anika Nietzer \n * \t\t\tA {@code CodeProcessor} represents a unit for compiling\n *         \tand processing java-sourcecode to java-bytecode.\n */\npublic class CodeProcessor {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "5",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/6/CodeProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/6/CodeProcessor.java\nindex fb366ecafff..2abe5f99c97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/6/CodeProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/6/CodeProcessor.java\n@@ -1,60 +1,59 @@\n package codeprocessor;\n \n /**\n- * @author Anika Nietzer \n- * \t\t\tA {@code CodeProcessor} represents a unit for compiling\n- *         \tand processing java-sourcecode to java-bytecode.\n+ * @author Anika Nietzer\n+ * A {@code CodeProcessor} represents a unit for compiling\n+ * and processing java-sourcecode to java-bytecode.\n  */\n public class CodeProcessor {\n \n-\tprivate String className;\n-\tprivate String errorMessage;\n-\tprivate String packageName;\n-\tprivate boolean success;\n+  private String className;\n+  private String errorMessage;\n+  private String packageName;\n+  private boolean success;\n \n-\t/**\n-\t * Creates a {@code CodeProcessor} with the given code fragment and compiles\n-\t * it to java-bytecode.\n-\t * \n-\t * @param code\n-\t *            the java-code fragment, that will be compiled\n-\t */\n-\tpublic CodeProcessor(String code) {\n-\t}\n+  /**\n+   * Creates a {@code CodeProcessor} with the given code fragment and compiles\n+   * it to java-bytecode.\n+   *\n+   * @param code the java-code fragment, that will be compiled\n+   */\n+  public CodeProcessor(String code) {\n+  }\n \n-\t/**\n-\t * Returns the name of the compiled class.\n-\t * \n-\t * @return the className\n-\t */\n-\tpublic String getClassName() {\n-\t\treturn className;\n-\t}\n+  /**\n+   * Returns the name of the compiled class.\n+   *\n+   * @return the className\n+   */\n+  public String getClassName() {\n+    return className;\n+  }\n \n-\t/**\n-\t * Returns an error message, in case of failure.\n-\t * \n-\t * @return the errorMessage\n-\t */\n-\tpublic String getErrorMessage() {\n-\t\treturn errorMessage;\n-\t}\n+  /**\n+   * Returns an error message, in case of failure.\n+   *\n+   * @return the errorMessage\n+   */\n+  public String getErrorMessage() {\n+    return errorMessage;\n+  }\n \n-\t/**\n-\t * Returns the name of the package of the compiled class.\n-\t * \n-\t * @return the packageName.\n-\t */\n-\tpublic String getPackageName() {\n-\t\treturn packageName;\n-\t}\n+  /**\n+   * Returns the name of the package of the compiled class.\n+   *\n+   * @return the packageName.\n+   */\n+  public String getPackageName() {\n+    return packageName;\n+  }\n \n-\t/**\n-\t * True if the compiling process was successful, false otherwise.\n-\t * \n-\t * @return if the compiling process was successful\n-\t */\n-\tpublic boolean wasSuccessful() {\n-\t\treturn success;\n-\t}\n+  /**\n+   * True if the compiling process was successful, false otherwise.\n+   *\n+   * @return if the compiling process was successful\n+   */\n+  public boolean wasSuccessful() {\n+    return success;\n+  }\n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "5",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/6/CodeProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/6/CodeProcessor.java\nindex fb366ecafff..839300b720a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/6/CodeProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/6/CodeProcessor.java\n@@ -7,7 +7,7 @@ package codeprocessor;\n  */\n public class CodeProcessor {\n \n-\tprivate String className;\n+    private String className;\n \tprivate String errorMessage;\n \tprivate String packageName;\n \tprivate boolean success;\n@@ -20,7 +20,7 @@ public class CodeProcessor {\n \t *            the java-code fragment, that will be compiled\n \t */\n \tpublic CodeProcessor(String code) {\n-\t}\n+    }\n \n \t/**\n \t * Returns the name of the compiled class.\n@@ -28,8 +28,8 @@ public class CodeProcessor {\n \t * @return the className\n \t */\n \tpublic String getClassName() {\n-\t\treturn className;\n-\t}\n+    return className;\n+    }\n \n \t/**\n \t * Returns an error message, in case of failure.\n@@ -37,8 +37,8 @@ public class CodeProcessor {\n \t * @return the errorMessage\n \t */\n \tpublic String getErrorMessage() {\n-\t\treturn errorMessage;\n-\t}\n+    return errorMessage;\n+    }\n \n \t/**\n \t * Returns the name of the package of the compiled class.\n@@ -46,8 +46,8 @@ public class CodeProcessor {\n \t * @return the packageName.\n \t */\n \tpublic String getPackageName() {\n-\t\treturn packageName;\n-\t}\n+    return packageName;\n+    }\n \n \t/**\n \t * True if the compiling process was successful, false otherwise.\n@@ -55,6 +55,7 @@ public class CodeProcessor {\n \t * @return if the compiling process was successful\n \t */\n \tpublic boolean wasSuccessful() {\n-\t\treturn success;\n-\t}\n-}\n+    return success;\n+    }\n+\n+    }\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/6/CodeProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/6/CodeProcessor.java\nindex fb366ecafff..313e783494d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/6/CodeProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/6/CodeProcessor.java\n@@ -2,59 +2,75 @@ package codeprocessor;\n \n /**\n  * @author Anika Nietzer \n- * \t\t\tA {@code CodeProcessor} represents a unit for compiling\n- *         \tand processing java-sourcecode to java-bytecode.\n+ *          A {@code CodeProcessor} represents a unit for compiling\n+ *          and processing java-sourcecode to java-bytecode.\n  */\n+\n+\n public class CodeProcessor {\n \n-\tprivate String className;\n-\tprivate String errorMessage;\n-\tprivate String packageName;\n-\tprivate boolean success;\n-\n-\t/**\n-\t * Creates a {@code CodeProcessor} with the given code fragment and compiles\n-\t * it to java-bytecode.\n-\t * \n-\t * @param code\n-\t *            the java-code fragment, that will be compiled\n-\t */\n-\tpublic CodeProcessor(String code) {\n-\t}\n-\n-\t/**\n-\t * Returns the name of the compiled class.\n-\t * \n-\t * @return the className\n-\t */\n-\tpublic String getClassName() {\n-\t\treturn className;\n-\t}\n-\n-\t/**\n-\t * Returns an error message, in case of failure.\n-\t * \n-\t * @return the errorMessage\n-\t */\n-\tpublic String getErrorMessage() {\n-\t\treturn errorMessage;\n-\t}\n-\n-\t/**\n-\t * Returns the name of the package of the compiled class.\n-\t * \n-\t * @return the packageName.\n-\t */\n-\tpublic String getPackageName() {\n-\t\treturn packageName;\n-\t}\n-\n-\t/**\n-\t * True if the compiling process was successful, false otherwise.\n-\t * \n-\t * @return if the compiling process was successful\n-\t */\n-\tpublic boolean wasSuccessful() {\n-\t\treturn success;\n-\t}\n-}\n+    private String className;\n+\n+    private String errorMessage;\n+\n+    private String packageName;\n+\n+    private boolean success;\n+\n+    /**\n+     * Creates a {@code CodeProcessor} with the given code fragment and compiles\n+     * it to java-bytecode.\n+     * \n+     * @param code\n+     *            the java-code fragment, that will be compiled\n+     */\n+\n+\n+    public CodeProcessor(String code) {\n+    }\n+\n+    /**\n+     * Returns the name of the compiled class.\n+     * \n+     * @return the className\n+     */\n+\n+\n+    public String getClassName() {\n+        return className;\n+    }\n+\n+    /**\n+     * Returns an error message, in case of failure.\n+     * \n+     * @return the errorMessage\n+     */\n+\n+\n+    public String getErrorMessage() {\n+        return errorMessage;\n+    }\n+\n+    /**\n+     * Returns the name of the package of the compiled class.\n+     * \n+     * @return the packageName.\n+     */\n+\n+\n+    public String getPackageName() {\n+        return packageName;\n+    }\n+\n+    /**\n+     * True if the compiling process was successful, false otherwise.\n+     * \n+     * @return if the compiling process was successful\n+     */\n+\n+\n+    public boolean wasSuccessful() {\n+        return success;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "5",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "5",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}