{
    "project_name": "intuit-Tank",
    "error_id": "187",
    "information": {
        "errors": [
            {
                "line": "27",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n\n\t/**\n\t * Returns an error that occurred while parsing the document, if any.\n\t *\n\t * @return The error, or <code>null</code> if the document was",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/187/ParseResult.java\nindex abf89b0e86a..e524952ede7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/187/ParseResult.java\n@@ -23,14 +23,13 @@ import java.util.List;\n  */\n public interface ParseResult {\n \n-\n-\t/**\n+    /**\n \t * Returns an error that occurred while parsing the document, if any.\n \t *\n \t * @return The error, or <code>null</code> if the document was\n \t *         successfully parsed.\n \t */\n-\tException getError();\n+        Exception getError();\n \n \n \t/**\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/187/ParseResult.java\nindex abf89b0e86a..2ca7fe7fcf5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/187/ParseResult.java\n@@ -7,6 +7,7 @@\n  * This library is distributed under a modified BSD license.  See the included\n  * LICENSE file for details.\n  */\n+\n package org.fife.ui.rsyntaxtextarea.parser;\n \n import java.util.List;\n@@ -24,61 +25,61 @@ import java.util.List;\n public interface ParseResult {\n \n \n-\t/**\n-\t * Returns an error that occurred while parsing the document, if any.\n-\t *\n-\t * @return The error, or <code>null</code> if the document was\n-\t *         successfully parsed.\n-\t */\n-\tException getError();\n-\n-\n-\t/**\n-\t * Returns the first line parsed.  All parser implementations should\n-\t * currently set this to <code>0</code> and parse the entire document.\n-\t *\n-\t * @return The first line parsed.\n-\t * @see #getLastLineParsed()\n-\t */\n-\tint getFirstLineParsed();\n-\n-\n-\t/**\n-\t * Returns the first line parsed.  All parser implementations should\n-\t * currently set this to the document's line count and parse the entire\n-\t * document.\n-\t *\n-\t * @return The last line parsed.\n-\t * @see #getFirstLineParsed()\n-\t */\n-\tint getLastLineParsed();\n-\n-\n-\t/**\n-\t * Returns the notices for the parsed section.\n-\t *\n-\t * @return A list of {@link ParserNotice}s.\n-\t */\n-\tList<ParserNotice> getNotices();\n-\n-\n-\t/**\n-\t * Returns the parser that generated these notices.\n-\t *\n-\t * @return The parser.\n-\t */\n-\tParser getParser();\n-\n-\n-\t/**\n-\t * Returns the amount of time this parser took to parse the specified\n-\t * range of text.  This is an optional operation; parsers are permitted\n-\t * to return <code>0</code> for this value.\n-\t *\n-\t * @return The parse time, in milliseconds, or <code>0</code> if the\n-\t *         parse time was not recorded.\n-\t */\n-\tlong getParseTime();\n+  /**\n+   * Returns an error that occurred while parsing the document, if any.\n+   *\n+   * @return The error, or <code>null</code> if the document was\n+   * successfully parsed.\n+   */\n+  Exception getError();\n+\n+\n+  /**\n+   * Returns the first line parsed.  All parser implementations should\n+   * currently set this to <code>0</code> and parse the entire document.\n+   *\n+   * @return The first line parsed.\n+   * @see #getLastLineParsed()\n+   */\n+  int getFirstLineParsed();\n+\n+\n+  /**\n+   * Returns the first line parsed.  All parser implementations should\n+   * currently set this to the document's line count and parse the entire\n+   * document.\n+   *\n+   * @return The last line parsed.\n+   * @see #getFirstLineParsed()\n+   */\n+  int getLastLineParsed();\n+\n+\n+  /**\n+   * Returns the notices for the parsed section.\n+   *\n+   * @return A list of {@link ParserNotice}s.\n+   */\n+  List<ParserNotice> getNotices();\n+\n+\n+  /**\n+   * Returns the parser that generated these notices.\n+   *\n+   * @return The parser.\n+   */\n+  Parser getParser();\n+\n+\n+  /**\n+   * Returns the amount of time this parser took to parse the specified\n+   * range of text.  This is an optional operation; parsers are permitted\n+   * to return <code>0</code> for this value.\n+   *\n+   * @return The parse time, in milliseconds, or <code>0</code> if the\n+   * parse time was not recorded.\n+   */\n+  long getParseTime();\n \n \n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/187/ParseResult.java\nindex abf89b0e86a..dcfb7d9c0bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/187/ParseResult.java\n@@ -11,7 +11,6 @@ package org.fife.ui.rsyntaxtextarea.parser;\n \n import java.util.List;\n \n-\n /**\n  * The result from a {@link Parser}.  This contains the section of lines\n  * parsed and any notices for that section.\n@@ -23,8 +22,7 @@ import java.util.List;\n  */\n public interface ParseResult {\n \n-\n-\t/**\n+    /**\n \t * Returns an error that occurred while parsing the document, if any.\n \t *\n \t * @return The error, or <code>null</code> if the document was\n@@ -32,8 +30,7 @@ public interface ParseResult {\n \t */\n \tException getError();\n \n-\n-\t/**\n+/**\n \t * Returns the first line parsed.  All parser implementations should\n \t * currently set this to <code>0</code> and parse the entire document.\n \t *\n@@ -42,8 +39,7 @@ public interface ParseResult {\n \t */\n \tint getFirstLineParsed();\n \n-\n-\t/**\n+/**\n \t * Returns the first line parsed.  All parser implementations should\n \t * currently set this to the document's line count and parse the entire\n \t * document.\n@@ -53,24 +49,21 @@ public interface ParseResult {\n \t */\n \tint getLastLineParsed();\n \n-\n-\t/**\n+/**\n \t * Returns the notices for the parsed section.\n \t *\n \t * @return A list of {@link ParserNotice}s.\n \t */\n \tList<ParserNotice> getNotices();\n \n-\n-\t/**\n+/**\n \t * Returns the parser that generated these notices.\n \t *\n \t * @return The parser.\n \t */\n \tParser getParser();\n \n-\n-\t/**\n+/**\n \t * Returns the amount of time this parser took to parse the specified\n \t * range of text.  This is an optional operation; parsers are permitted\n \t * to return <code>0</code> for this value.\n@@ -80,5 +73,4 @@ public interface ParseResult {\n \t */\n \tlong getParseTime();\n \n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/187/ParseResult.java\nindex abf89b0e86a..619bc7d230e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/187/ParseResult.java\n@@ -9,6 +9,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea.parser;\n \n+\n+\n import java.util.List;\n \n \n@@ -21,64 +23,71 @@ import java.util.List;\n  * @see DefaultParseResult\n  * @see ParserNotice\n  */\n+\n+\n public interface ParseResult {\n \n \n-\t/**\n-\t * Returns an error that occurred while parsing the document, if any.\n-\t *\n-\t * @return The error, or <code>null</code> if the document was\n-\t *         successfully parsed.\n-\t */\n-\tException getError();\n-\n-\n-\t/**\n-\t * Returns the first line parsed.  All parser implementations should\n-\t * currently set this to <code>0</code> and parse the entire document.\n-\t *\n-\t * @return The first line parsed.\n-\t * @see #getLastLineParsed()\n-\t */\n-\tint getFirstLineParsed();\n-\n-\n-\t/**\n-\t * Returns the first line parsed.  All parser implementations should\n-\t * currently set this to the document's line count and parse the entire\n-\t * document.\n-\t *\n-\t * @return The last line parsed.\n-\t * @see #getFirstLineParsed()\n-\t */\n-\tint getLastLineParsed();\n-\n-\n-\t/**\n-\t * Returns the notices for the parsed section.\n-\t *\n-\t * @return A list of {@link ParserNotice}s.\n-\t */\n-\tList<ParserNotice> getNotices();\n-\n-\n-\t/**\n-\t * Returns the parser that generated these notices.\n-\t *\n-\t * @return The parser.\n-\t */\n-\tParser getParser();\n-\n-\n-\t/**\n-\t * Returns the amount of time this parser took to parse the specified\n-\t * range of text.  This is an optional operation; parsers are permitted\n-\t * to return <code>0</code> for this value.\n-\t *\n-\t * @return The parse time, in milliseconds, or <code>0</code> if the\n-\t *         parse time was not recorded.\n-\t */\n-\tlong getParseTime();\n-\n-\n-}\n+    /**\n+     * Returns an error that occurred while parsing the document, if any.\n+     *\n+     * @return The error, or <code>null</code> if the document was\n+     *         successfully parsed.\n+     */\n+\n+    Exception getError();\n+\n+\n+    /**\n+     * Returns the first line parsed.  All parser implementations should\n+     * currently set this to <code>0</code> and parse the entire document.\n+     *\n+     * @return The first line parsed.\n+     * @see #getLastLineParsed()\n+     */\n+\n+    int getFirstLineParsed();\n+\n+\n+    /**\n+     * Returns the first line parsed.  All parser implementations should\n+     * currently set this to the document's line count and parse the entire\n+     * document.\n+     *\n+     * @return The last line parsed.\n+     * @see #getFirstLineParsed()\n+     */\n+\n+    int getLastLineParsed();\n+\n+\n+    /**\n+     * Returns the notices for the parsed section.\n+     *\n+     * @return A list of {@link ParserNotice}s.\n+     */\n+\n+    List<ParserNotice> getNotices();\n+\n+\n+    /**\n+     * Returns the parser that generated these notices.\n+     *\n+     * @return The parser.\n+     */\n+\n+    Parser getParser();\n+\n+\n+    /**\n+     * Returns the amount of time this parser took to parse the specified\n+     * range of text.  This is an optional operation; parsers are permitted\n+     * to return <code>0</code> for this value.\n+     *\n+     * @return The parse time, in milliseconds, or <code>0</code> if the\n+     *         parse time was not recorded.\n+     */\n+\n+    long getParseTime();\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 67
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/187/ParseResult.java\nindex abf89b0e86a..e524952ede7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/187/ParseResult.java\n@@ -23,14 +23,13 @@ import java.util.List;\n  */\n public interface ParseResult {\n \n-\n-\t/**\n+    /**\n \t * Returns an error that occurred while parsing the document, if any.\n \t *\n \t * @return The error, or <code>null</code> if the document was\n \t *         successfully parsed.\n \t */\n-\tException getError();\n+        Exception getError();\n \n \n \t/**\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/187/ParseResult.java\nindex abf89b0e86a..9485d836121 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/187/ParseResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/187/ParseResult.java\n@@ -23,14 +23,13 @@ import java.util.List;\n  */\n public interface ParseResult {\n \n-\n-\t/**\n+    /**\n \t * Returns an error that occurred while parsing the document, if any.\n \t *\n \t * @return The error, or <code>null</code> if the document was\n \t *         successfully parsed.\n \t */\n-\tException getError();\n+ Exception getError();\n \n \n \t/**\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}