{
    "project_name": "h2database-h2database",
    "error_id": "160",
    "information": {
        "errors": [
            {
                "line": "188",
                "column": "100",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        case Comparison.EQUAL_NULL_SAFE:\n            builder.append(expression.isNullConstant()\n                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant() //\n                            ? \" IS \"\n                            : \" IS NOT DISTINCT FROM \");\n            break;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/160/IndexCondition.java\nindex 0f2fa46c200..ede7d474a6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/160/IndexCondition.java\n@@ -185,8 +185,9 @@ public class IndexCondition {\n             break;\n         case Comparison.EQUAL_NULL_SAFE:\n             builder.append(expression.isNullConstant()\n-                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant() //\n-                            ? \" IS \"\n+                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant()\n+                            //\n+                    ? \" IS \"\n                             : \" IS NOT DISTINCT FROM \");\n             break;\n         case Comparison.BIGGER_EQUAL:\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "193",
                    "column": "49",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/160/IndexCondition.java\nindex 0f2fa46c200..489a051b53c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/160/IndexCondition.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.index;\n \n import java.util.ArrayList;\n@@ -74,10 +75,10 @@ public class IndexCondition {\n \n     /**\n      * @param compareType the comparison type, see constants in\n-     *            {@link Comparison}\n+     *                    {@link Comparison}\n      */\n     private IndexCondition(int compareType, ExpressionColumn column,\n-            Expression expression) {\n+                           Expression expression) {\n         this.compareType = compareType;\n         this.column = column == null ? null : column.getColumn();\n         this.expression = expression;\n@@ -87,13 +88,13 @@ public class IndexCondition {\n      * Create an index condition with the given parameters.\n      *\n      * @param compareType the comparison type, see constants in\n-     *            {@link Comparison}\n-     * @param column the column\n-     * @param expression the expression\n+     *                    {@link Comparison}\n+     * @param column      the column\n+     * @param expression  the expression\n      * @return the index condition\n      */\n     public static IndexCondition get(int compareType, ExpressionColumn column,\n-            Expression expression) {\n+                                     Expression expression) {\n         return new IndexCondition(compareType, column, expression);\n     }\n \n@@ -102,11 +103,11 @@ public class IndexCondition {\n      * given parameters.\n      *\n      * @param column the column\n-     * @param list the expression list\n+     * @param list   the expression list\n      * @return the index condition\n      */\n     public static IndexCondition getInList(ExpressionColumn column,\n-            List<Expression> list) {\n+                                           List<Expression> list) {\n         IndexCondition cond = new IndexCondition(Comparison.IN_LIST, column,\n                 null);\n         cond.expressionList = list;\n@@ -118,12 +119,14 @@ public class IndexCondition {\n      * given parameters.\n      *\n      * @param column the column\n-     * @param query the select statement\n+     * @param query  the select statement\n      * @return the index condition\n      */\n-    public static IndexCondition getInQuery(ExpressionColumn column, Query query) {\n+    public static IndexCondition getInQuery(ExpressionColumn column,\n+                                            Query query) {\n         assert query.isRandomAccessResult();\n-        IndexCondition cond = new IndexCondition(Comparison.IN_QUERY, column, null);\n+        IndexCondition cond =\n+                new IndexCondition(Comparison.IN_QUERY, column, null);\n         cond.expressionQuery = query;\n         return cond;\n     }\n@@ -146,7 +149,8 @@ public class IndexCondition {\n      * @return the value list\n      */\n     public Value[] getCurrentValueList(Session session) {\n-        TreeSet<Value> valueSet = new TreeSet<>(session.getDatabase().getCompareMode());\n+        TreeSet<Value> valueSet =\n+                new TreeSet<>(session.getDatabase().getCompareMode());\n         for (Expression e : expressionList) {\n             Value v = e.getValue(session);\n             v = column.convert(session, v);\n@@ -180,42 +184,43 @@ public class IndexCondition {\n         StringBuilder builder = new StringBuilder();\n         column.getSQL(builder, sqlFlags);\n         switch (compareType) {\n-        case Comparison.EQUAL:\n-            builder.append(\" = \");\n-            break;\n-        case Comparison.EQUAL_NULL_SAFE:\n-            builder.append(expression.isNullConstant()\n-                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant() //\n-                            ? \" IS \"\n-                            : \" IS NOT DISTINCT FROM \");\n-            break;\n-        case Comparison.BIGGER_EQUAL:\n-            builder.append(\" >= \");\n-            break;\n-        case Comparison.BIGGER:\n-            builder.append(\" > \");\n-            break;\n-        case Comparison.SMALLER_EQUAL:\n-            builder.append(\" <= \");\n-            break;\n-        case Comparison.SMALLER:\n-            builder.append(\" < \");\n-            break;\n-        case Comparison.IN_LIST:\n-            builder.append(\" IN(\");\n-            Expression.writeExpressions(builder, expressionList, sqlFlags);\n-            builder.append(')');\n-            break;\n-        case Comparison.IN_QUERY:\n-            builder.append(\" IN(\");\n-            builder.append(expressionQuery.getPlanSQL(sqlFlags));\n-            builder.append(')');\n-            break;\n-        case Comparison.SPATIAL_INTERSECTS:\n-            builder.append(\" && \");\n-            break;\n-        default:\n-            DbException.throwInternalError(\"type=\" + compareType);\n+            case Comparison.EQUAL:\n+                builder.append(\" = \");\n+                break;\n+            case Comparison.EQUAL_NULL_SAFE:\n+                builder.append(expression.isNullConstant()\n+                        || column.getType().getValueType() == Value.BOOLEAN &&\n+                        expression.isConstant() //\n+                        ? \" IS \"\n+                        : \" IS NOT DISTINCT FROM \");\n+                break;\n+            case Comparison.BIGGER_EQUAL:\n+                builder.append(\" >= \");\n+                break;\n+            case Comparison.BIGGER:\n+                builder.append(\" > \");\n+                break;\n+            case Comparison.SMALLER_EQUAL:\n+                builder.append(\" <= \");\n+                break;\n+            case Comparison.SMALLER:\n+                builder.append(\" < \");\n+                break;\n+            case Comparison.IN_LIST:\n+                builder.append(\" IN(\");\n+                Expression.writeExpressions(builder, expressionList, sqlFlags);\n+                builder.append(')');\n+                break;\n+            case Comparison.IN_QUERY:\n+                builder.append(\" IN(\");\n+                builder.append(expressionQuery.getPlanSQL(sqlFlags));\n+                builder.append(')');\n+                break;\n+            case Comparison.SPATIAL_INTERSECTS:\n+                builder.append(\" && \");\n+                break;\n+            default:\n+                DbException.throwInternalError(\"type=\" + compareType);\n         }\n         if (expression != null) {\n             expression.getSQL(builder, sqlFlags);\n@@ -231,37 +236,37 @@ public class IndexCondition {\n      */\n     public int getMask(ArrayList<IndexCondition> indexConditions) {\n         switch (compareType) {\n-        case Comparison.FALSE:\n-            return ALWAYS_FALSE;\n-        case Comparison.EQUAL:\n-        case Comparison.EQUAL_NULL_SAFE:\n-            return EQUALITY;\n-        case Comparison.IN_LIST:\n-        case Comparison.IN_QUERY:\n-            if (indexConditions.size() > 1) {\n-                if (TableType.TABLE != column.getTable().getTableType()) {\n-                    // if combined with other conditions,\n-                    // IN(..) can only be used for regular tables\n-                    // test case:\n-                    // create table test(a int, b int, primary key(id, name));\n-                    // create unique index c on test(b, a);\n-                    // insert into test values(1, 10), (2, 20);\n-                    // select * from (select * from test)\n-                    // where a=1 and b in(10, 20);\n-                    return 0;\n+            case Comparison.FALSE:\n+                return ALWAYS_FALSE;\n+            case Comparison.EQUAL:\n+            case Comparison.EQUAL_NULL_SAFE:\n+                return EQUALITY;\n+            case Comparison.IN_LIST:\n+            case Comparison.IN_QUERY:\n+                if (indexConditions.size() > 1) {\n+                    if (TableType.TABLE != column.getTable().getTableType()) {\n+                        // if combined with other conditions,\n+                        // IN(..) can only be used for regular tables\n+                        // test case:\n+                        // create table test(a int, b int, primary key(id, name));\n+                        // create unique index c on test(b, a);\n+                        // insert into test values(1, 10), (2, 20);\n+                        // select * from (select * from test)\n+                        // where a=1 and b in(10, 20);\n+                        return 0;\n+                    }\n                 }\n-            }\n-            return EQUALITY;\n-        case Comparison.BIGGER_EQUAL:\n-        case Comparison.BIGGER:\n-            return START;\n-        case Comparison.SMALLER_EQUAL:\n-        case Comparison.SMALLER:\n-            return END;\n-        case Comparison.SPATIAL_INTERSECTS:\n-            return SPATIAL_INTERSECTS;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + compareType);\n+                return EQUALITY;\n+            case Comparison.BIGGER_EQUAL:\n+            case Comparison.BIGGER:\n+                return START;\n+            case Comparison.SMALLER_EQUAL:\n+            case Comparison.SMALLER:\n+                return END;\n+            case Comparison.SPATIAL_INTERSECTS:\n+                return SPATIAL_INTERSECTS;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + compareType);\n         }\n     }\n \n@@ -282,13 +287,13 @@ public class IndexCondition {\n      */\n     public boolean isStart() {\n         switch (compareType) {\n-        case Comparison.EQUAL:\n-        case Comparison.EQUAL_NULL_SAFE:\n-        case Comparison.BIGGER_EQUAL:\n-        case Comparison.BIGGER:\n-            return true;\n-        default:\n-            return false;\n+            case Comparison.EQUAL:\n+            case Comparison.EQUAL_NULL_SAFE:\n+            case Comparison.BIGGER_EQUAL:\n+            case Comparison.BIGGER:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -300,13 +305,13 @@ public class IndexCondition {\n      */\n     public boolean isEnd() {\n         switch (compareType) {\n-        case Comparison.EQUAL:\n-        case Comparison.EQUAL_NULL_SAFE:\n-        case Comparison.SMALLER_EQUAL:\n-        case Comparison.SMALLER:\n-            return true;\n-        default:\n-            return false;\n+            case Comparison.EQUAL:\n+            case Comparison.EQUAL_NULL_SAFE:\n+            case Comparison.SMALLER_EQUAL:\n+            case Comparison.SMALLER:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -318,10 +323,10 @@ public class IndexCondition {\n      */\n     public boolean isSpatialIntersects() {\n         switch (compareType) {\n-        case Comparison.SPATIAL_INTERSECTS:\n-            return true;\n-        default:\n-            return false;\n+            case Comparison.SPATIAL_INTERSECTS:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -389,14 +394,17 @@ public class IndexCondition {\n \n     @Override\n     public String toString() {\n-        StringBuilder builder = new StringBuilder(\"column=\").append(column).append(\", compareType=\");\n+        StringBuilder builder = new StringBuilder(\"column=\").append(column)\n+                .append(\", compareType=\");\n         return compareTypeToString(builder, compareType)\n-            .append(\", expression=\").append(expression)\n-            .append(\", expressionList=\").append(expressionList)\n-            .append(\", expressionQuery=\").append(expressionQuery).toString();\n+                .append(\", expression=\").append(expression)\n+                .append(\", expressionList=\").append(expressionList)\n+                .append(\", expressionQuery=\").append(expressionQuery)\n+                .toString();\n     }\n \n-    private static StringBuilder compareTypeToString(StringBuilder builder, int i) {\n+    private static StringBuilder compareTypeToString(StringBuilder builder,\n+                                                     int i) {\n         boolean f = false;\n         if ((i & EQUALITY) == EQUALITY) {\n             f = true;\n",
            "diff_size": 110
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/160/IndexCondition.java\nindex 0f2fa46c200..ede7d474a6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/160/IndexCondition.java\n@@ -185,8 +185,9 @@ public class IndexCondition {\n             break;\n         case Comparison.EQUAL_NULL_SAFE:\n             builder.append(expression.isNullConstant()\n-                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant() //\n-                            ? \" IS \"\n+                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant()\n+                            //\n+                    ? \" IS \"\n                             : \" IS NOT DISTINCT FROM \");\n             break;\n         case Comparison.BIGGER_EQUAL:\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/160/IndexCondition.java\nindex 0f2fa46c200..848b479a3f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/160/IndexCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/160/IndexCondition.java\n@@ -185,8 +185,9 @@ public class IndexCondition {\n             break;\n         case Comparison.EQUAL_NULL_SAFE:\n             builder.append(expression.isNullConstant()\n-                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant() //\n-                            ? \" IS \"\n+                    || column.getType().getValueType() == Value.BOOLEAN && expression.isConstant()\n+                        //\n+                    ? \" IS \"\n                             : \" IS NOT DISTINCT FROM \");\n             break;\n         case Comparison.BIGGER_EQUAL:\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}