{
    "project_name": "Angel-ML-angel",
    "error_id": "732",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/732/SparseServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/732/SparseServerRowsStorage.java\nindex 2f6f2449c74..899f73dd439 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/732/SparseServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/732/SparseServerRowsStorage.java\n@@ -35,7 +35,7 @@ import java.util.Map.Entry;\n public class SparseServerRowsStorage extends ServerRowsStorage {\n \n   /**\n-   *  <row id, server row> map\n+   * <row id, server row> map\n    */\n   private Map<Integer, ServerRow> data;\n \n@@ -104,7 +104,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n   @Override\n   public long getElemNum() {\n     long num = 0L;\n-    for(ServerRow row : data.values()) {\n+    for (ServerRow row : data.values()) {\n       num += row.size();\n     }\n     return num;\n@@ -122,8 +122,8 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     int writeRowNum = 0;\n \n     // Rows data\n-    for(Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n-      if(rowEntry.getValue() != null) {\n+    for (Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n+      if (rowEntry.getValue() != null) {\n         // Row id\n         output.writeInt(rowEntry.getKey());\n         // Row type\n@@ -149,7 +149,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     data = new HashMap<>(writeRowNum);\n \n     // Rows data\n-    for(int i = 0; i < writeRowNum; i++) {\n+    for (int i = 0; i < writeRowNum; i++) {\n       // Row id\n       int index = input.readInt();\n       // Create empty server row\n@@ -167,8 +167,8 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     len += 8;\n \n     // Rows data\n-    for(Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n-      if(rowEntry.getValue() != null) {\n+    for (Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n+      if (rowEntry.getValue() != null) {\n         len += 8;\n         len += rowEntry.getValue().bufferLen();\n       }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/732/SparseServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/732/SparseServerRowsStorage.java\nindex 2f6f2449c74..9db3d50fc4c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/732/SparseServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/732/SparseServerRowsStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.partition.storage;\n \n import com.tencent.angel.ml.matrix.RowType;\n@@ -104,7 +103,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n   @Override\n   public long getElemNum() {\n     long num = 0L;\n-    for(ServerRow row : data.values()) {\n+    for (ServerRow row : data.values()) {\n       num += row.size();\n     }\n     return num;\n@@ -122,7 +121,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     int writeRowNum = 0;\n \n     // Rows data\n-    for(Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n+    for (Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n       if(rowEntry.getValue() != null) {\n         // Row id\n         output.writeInt(rowEntry.getKey());\n@@ -131,8 +130,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n         // Row data\n         rowEntry.getValue().serialize(output);\n         writeRowNum++;\n-\n-      }\n+  }\n     }\n \n     output.setInt(writeIndex, writeRowNum);\n@@ -149,7 +147,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     data = new HashMap<>(writeRowNum);\n \n     // Rows data\n-    for(int i = 0; i < writeRowNum; i++) {\n+    for (int i = 0; i < writeRowNum; i++) {\n       // Row id\n       int index = input.readInt();\n       // Create empty server row\n@@ -167,7 +165,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     len += 8;\n \n     // Rows data\n-    for(Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n+    for (Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n       if(rowEntry.getValue() != null) {\n         len += 8;\n         len += rowEntry.getValue().bufferLen();\n@@ -176,4 +174,4 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n \n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/732/SparseServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/732/SparseServerRowsStorage.java\nindex 2f6f2449c74..6a75ec002d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/732/SparseServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/732/SparseServerRowsStorage.java\n@@ -32,11 +32,13 @@ import java.util.Map.Entry;\n /**\n  * Row-based matrix partition storage, it use a <row id, server row> map as inner storage\n  */\n+\n public class SparseServerRowsStorage extends ServerRowsStorage {\n \n   /**\n    *  <row id, server row> map\n    */\n+\n   private Map<Integer, ServerRow> data;\n \n   public SparseServerRowsStorage(int rowIdOffset, int rowNum) {\n@@ -45,9 +47,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n   }\n \n   @Override\n-  public void init() {\n-\n-  }\n+  public void init() {}\n \n   @Override\n   public ServerRow getRow(int index) {\n@@ -71,6 +71,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n   @Override\n   public void putRows(List<Integer> rowIds, List<ServerRow> rows) {\n     assert rowIds.size() == rows.size();\n+\n     int size = rowIds.size();\n     for (int i = 0; i < size; i++) {\n       putRow(rowIds.get(i), rows.get(i));\n@@ -104,7 +105,7 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n   @Override\n   public long getElemNum() {\n     long num = 0L;\n-    for(ServerRow row : data.values()) {\n+    for (ServerRow row : data.values()) {\n       num += row.size();\n     }\n     return num;\n@@ -115,15 +116,17 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     super.serialize(output);\n     // Map size\n     output.writeInt(data.size());\n+\n     int writeIndex = output.writerIndex();\n \n     // Actual write size\n     output.writeInt(0);\n+\n     int writeRowNum = 0;\n \n     // Rows data\n-    for(Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n-      if(rowEntry.getValue() != null) {\n+    for (Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n+      if (rowEntry.getValue() != null) {\n         // Row id\n         output.writeInt(rowEntry.getKey());\n         // Row type\n@@ -131,10 +134,8 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n         // Row data\n         rowEntry.getValue().serialize(output);\n         writeRowNum++;\n-\n       }\n     }\n-\n     output.setInt(writeIndex, writeRowNum);\n   }\n \n@@ -145,11 +146,12 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     input.readInt();\n \n     // Actual write row number\n+\n     int writeRowNum = input.readInt();\n     data = new HashMap<>(writeRowNum);\n \n     // Rows data\n-    for(int i = 0; i < writeRowNum; i++) {\n+    for (int i = 0; i < writeRowNum; i++) {\n       // Row id\n       int index = input.readInt();\n       // Create empty server row\n@@ -167,13 +169,13 @@ public class SparseServerRowsStorage extends ServerRowsStorage {\n     len += 8;\n \n     // Rows data\n-    for(Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n-      if(rowEntry.getValue() != null) {\n+    for (Entry<Integer, ServerRow> rowEntry : data.entrySet()) {\n+      if (rowEntry.getValue() != null) {\n         len += 8;\n         len += rowEntry.getValue().bufferLen();\n       }\n     }\n-\n     return len;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}