{
    "project_name": "findbugsproject-findbugs",
    "error_id": "12",
    "information": {
        "errors": [
            {
                "line": "69",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            engine.addDirectory(rootDirectory);\n        } else {\n        \tString[] cpParts = classpath.split(File.pathSeparator);\n        \tfor (String cpStr : cpParts) {\n        \t\tFile file = new File(cpStr);\n\t\t\t\tif (file.isDirectory()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/12/PackageDependenciesTest.java\nindex 8950cb81279..8feb70abb11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/12/PackageDependenciesTest.java\n@@ -66,7 +66,7 @@ public class PackageDependenciesTest extends TestCase {\n             String rootDirectory = new File(getClass().getResource(\"/\").toURI()).getCanonicalPath();\n             engine.addDirectory(rootDirectory);\n         } else {\n-        \tString[] cpParts = classpath.split(File.pathSeparator);\n+        String[] cpParts = classpath.split(File.pathSeparator);\n         \tfor (String cpStr : cpParts) {\n         \t\tFile file = new File(cpStr);\n \t\t\t\tif (file.isDirectory()) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/12/PackageDependenciesTest.java\nindex 8950cb81279..3d382059fd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/12/PackageDependenciesTest.java\n@@ -16,6 +16,7 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n  */\n+\n package edu.umd.cs.findbugs.architecture;\n \n import java.io.File;\n@@ -66,13 +67,13 @@ public class PackageDependenciesTest extends TestCase {\n             String rootDirectory = new File(getClass().getResource(\"/\").toURI()).getCanonicalPath();\n             engine.addDirectory(rootDirectory);\n         } else {\n-        \tString[] cpParts = classpath.split(File.pathSeparator);\n-        \tfor (String cpStr : cpParts) {\n-        \t\tFile file = new File(cpStr);\n-\t\t\t\tif (file.isDirectory()) {\n-        \t\t\tengine.addDirectory(file.getCanonicalPath());\n-        \t\t}\n-        \t}\n+            String[] cpParts = classpath.split(File.pathSeparator);\n+            for (String cpStr : cpParts) {\n+                File file = new File(cpStr);\n+                if (file.isDirectory()) {\n+                    engine.addDirectory(file.getCanonicalPath());\n+                }\n+            }\n         }\n \n         // Setup the JDepend analysis\n@@ -92,6 +93,6 @@ public class PackageDependenciesTest extends TestCase {\n         JavaPackage efferentPackage = engine.getPackage(expectedNotEfferent);\n         assertNotNull(\"Efferent package not found: \" + efferentPackage, efferentPackage);\n         assertFalse(afferentPackage.getName() + \" shouldn't depend on \" + efferentPackage.getName(), afferentPackage\n-                .getEfferents().contains(efferentPackage));\n+            .getEfferents().contains(efferentPackage));\n     }\n }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/12/PackageDependenciesTest.java\nindex 8950cb81279..cd19369d0b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/12/PackageDependenciesTest.java\n@@ -66,14 +66,14 @@ public class PackageDependenciesTest extends TestCase {\n             String rootDirectory = new File(getClass().getResource(\"/\").toURI()).getCanonicalPath();\n             engine.addDirectory(rootDirectory);\n         } else {\n-        \tString[] cpParts = classpath.split(File.pathSeparator);\n+    String[] cpParts = classpath.split(File.pathSeparator);\n         \tfor (String cpStr : cpParts) {\n-        \t\tFile file = new File(cpStr);\n-\t\t\t\tif (file.isDirectory()) {\n-        \t\t\tengine.addDirectory(file.getCanonicalPath());\n-        \t\t}\n-        \t}\n-        }\n+    File file = new File(cpStr);\n+if (file.isDirectory()) {\n+    engine.addDirectory(file.getCanonicalPath());\n+    }\n+    }\n+    }\n \n         // Setup the JDepend analysis\n         engine.analyze();\n@@ -94,4 +94,4 @@ public class PackageDependenciesTest extends TestCase {\n         assertFalse(afferentPackage.getName() + \" shouldn't depend on \" + efferentPackage.getName(), afferentPackage\n                 .getEfferents().contains(efferentPackage));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/12/PackageDependenciesTest.java\nindex 8950cb81279..6bd3858017b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/12/PackageDependenciesTest.java\n@@ -19,7 +19,6 @@\n package edu.umd.cs.findbugs.architecture;\n \n import java.io.File;\n-\n import jdepend.framework.JDepend;\n import jdepend.framework.JavaPackage;\n import junit.framework.TestCase;\n@@ -30,12 +29,12 @@ import junit.framework.TestCase;\n  * @author Tom\\u00e1s Pollak\n  * @author Andrei Loskutov\n  */\n+\n public class PackageDependenciesTest extends TestCase {\n     private JDepend engine;\n \n     public void testGui2Dependencies() {\n         String expectedNotEfferent = \"edu.umd.cs.findbugs.gui2\";\n-\n         assertPackageConstraint(\"edu.umd.cs.findbugs\", expectedNotEfferent);\n         assertPackageConstraint(\"edu.umd.cs.findbugs.asm\", expectedNotEfferent);\n         assertPackageConstraint(\"edu.umd.cs.findbugs.ba\", expectedNotEfferent);\n@@ -51,13 +50,11 @@ public class PackageDependenciesTest extends TestCase {\n         assertPackageConstraint(\"edu.umd.cs.findbugs.util\", expectedNotEfferent);\n         assertPackageConstraint(\"edu.umd.cs.findbugs.visitclass\", expectedNotEfferent);\n         assertPackageConstraint(\"edu.umd.cs.findbugs.xml\", expectedNotEfferent);\n-\n     }\n \n     @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n-\n         engine = new JDepend();\n \n         // Get the classes root directory\n@@ -66,13 +63,13 @@ public class PackageDependenciesTest extends TestCase {\n             String rootDirectory = new File(getClass().getResource(\"/\").toURI()).getCanonicalPath();\n             engine.addDirectory(rootDirectory);\n         } else {\n-        \tString[] cpParts = classpath.split(File.pathSeparator);\n-        \tfor (String cpStr : cpParts) {\n-        \t\tFile file = new File(cpStr);\n-\t\t\t\tif (file.isDirectory()) {\n-        \t\t\tengine.addDirectory(file.getCanonicalPath());\n-        \t\t}\n-        \t}\n+            String[] cpParts = classpath.split(File.pathSeparator);\n+            for (String cpStr : cpParts) {\n+                File file = new File(cpStr);\n+                if (file.isDirectory()) {\n+                    engine.addDirectory(file.getCanonicalPath());\n+                }\n+            }\n         }\n \n         // Setup the JDepend analysis\n@@ -82,16 +79,16 @@ public class PackageDependenciesTest extends TestCase {\n     @Override\n     protected void tearDown() throws Exception {\n         engine = null;\n-\n         super.tearDown();\n     }\n \n+\n     private void assertPackageConstraint(String afferent, String expectedNotEfferent) {\n         JavaPackage afferentPackage = engine.getPackage(afferent);\n         assertNotNull(\"Afferent package not found: \" + afferent, afferentPackage);\n         JavaPackage efferentPackage = engine.getPackage(expectedNotEfferent);\n         assertNotNull(\"Efferent package not found: \" + efferentPackage, efferentPackage);\n-        assertFalse(afferentPackage.getName() + \" shouldn't depend on \" + efferentPackage.getName(), afferentPackage\n-                .getEfferents().contains(efferentPackage));\n+        assertFalse(afferentPackage.getName() + \" shouldn't depend on \" + efferentPackage.getName(),\n+                    afferentPackage.getEfferents().contains(efferentPackage));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/12/PackageDependenciesTest.java\nindex 8950cb81279..8feb70abb11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/12/PackageDependenciesTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/12/PackageDependenciesTest.java\n@@ -66,7 +66,7 @@ public class PackageDependenciesTest extends TestCase {\n             String rootDirectory = new File(getClass().getResource(\"/\").toURI()).getCanonicalPath();\n             engine.addDirectory(rootDirectory);\n         } else {\n-        \tString[] cpParts = classpath.split(File.pathSeparator);\n+        String[] cpParts = classpath.split(File.pathSeparator);\n         \tfor (String cpStr : cpParts) {\n         \t\tFile file = new File(cpStr);\n \t\t\t\tif (file.isDirectory()) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}