{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3807",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "102",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3807/TransactionCountingStateVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3807/TransactionCountingStateVisitor.java\nindex b2d3ceb5851..2f0864ac3c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3807/TransactionCountingStateVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3807/TransactionCountingStateVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.txstate;\n \n import java.util.Set;\n@@ -39,131 +40,130 @@ import static org.neo4j.kernel.api.StatementConstants.ANY_RELATIONSHIP_TYPE;\n \n public class TransactionCountingStateVisitor extends TxStateVisitor.Delegator\n {\n-    private final RelationshipDataExtractor edge = new RelationshipDataExtractor();\n-    private final StoreReadLayer storeLayer;\n-    private final StorageStatement statement;\n-    private final CountsRecordState counts;\n-    private final ReadableTransactionState txState;\n-\n-    public TransactionCountingStateVisitor( TxStateVisitor next, StoreReadLayer storeLayer, StorageStatement statement,\n-            ReadableTransactionState txState, CountsRecordState counts )\n-    {\n-        super( next );\n-        this.storeLayer = storeLayer;\n-        this.statement = statement;\n-        this.txState = txState;\n-        this.counts = counts;\n-    }\n-\n-    @Override\n-    public void visitCreatedNode( long id )\n-    {\n-        counts.incrementNodeCount( ANY_LABEL, 1 );\n-        super.visitCreatedNode( id );\n-    }\n-\n-    @Override\n-    public void visitDeletedNode( long id )\n-    {\n-        counts.incrementNodeCount( ANY_LABEL, -1 );\n-        statement.acquireSingleNodeCursor( id ).forAll( this::decrementCountForLabelsAndRelationships );\n-        super.visitDeletedNode( id );\n-    }\n-\n-    private void decrementCountForLabelsAndRelationships( NodeItem node )\n-    {\n-        PrimitiveIntSet labelIds = node.labels();\n-        labelIds.visitKeys( labelId ->\n-        {\n-            counts.incrementNodeCount( labelId, -1 );\n-            return false;\n-        } );\n-\n-        storeLayer.degrees( statement, node,\n-                ( type, out, in ) -> updateRelationshipsCountsFromDegrees( labelIds, type, -out, -in ) );\n-    }\n-\n-    @Override\n-    public void visitCreatedRelationship( long id, int type, long startNode, long endNode )\n-            throws ConstraintValidationException\n-    {\n-        updateRelationshipCount( startNode, type, endNode, 1 );\n-        super.visitCreatedRelationship( id, type, startNode, endNode );\n-    }\n-\n-    @Override\n-    public void visitDeletedRelationship( long id )\n-    {\n-        try\n-        {\n-            storeLayer.relationshipVisit( id, edge );\n-            updateRelationshipCount( edge.startNode(), edge.type(), edge.endNode(), -1 );\n-        }\n-        catch ( EntityNotFoundException e )\n-        {\n-            throw new IllegalStateException( \"Relationship being deleted should exist along with its nodes.\", e );\n-        }\n-        super.visitDeletedRelationship( id );\n-    }\n-\n-    @Override\n-    public void visitNodeLabelChanges( long id, final Set<Integer> added, final Set<Integer> removed )\n-            throws ConstraintValidationException\n+  private final RelationshipDataExtractor edge = new RelationshipDataExtractor();\n+  private final StoreReadLayer storeLayer;\n+  private final StorageStatement statement;\n+  private final CountsRecordState counts;\n+  private final ReadableTransactionState txState;\n+\n+  public TransactionCountingStateVisitor(TxStateVisitor next, StoreReadLayer storeLayer, StorageStatement statement,\n+                                         ReadableTransactionState txState, CountsRecordState counts)\n+  {\n+    super(next);\n+    this.storeLayer = storeLayer;\n+    this.statement = statement;\n+    this.txState = txState;\n+    this.counts = counts;\n+  }\n+\n+  @Override\n+  public void visitCreatedNode(long id)\n+  {\n+    counts.incrementNodeCount(ANY_LABEL, 1);\n+    super.visitCreatedNode(id);\n+  }\n+\n+  @Override\n+  public void visitDeletedNode(long id)\n+  {\n+    counts.incrementNodeCount(ANY_LABEL, -1);\n+    statement.acquireSingleNodeCursor(id).forAll(this::decrementCountForLabelsAndRelationships);\n+    super.visitDeletedNode(id);\n+  }\n+\n+  private void decrementCountForLabelsAndRelationships(NodeItem node)\n+  {\n+    PrimitiveIntSet labelIds = node.labels();\n+    labelIds.visitKeys(labelId ->\n     {\n-        // update counts\n-        if ( !(added.isEmpty() && removed.isEmpty()) )\n-        {\n-            for ( Integer label : added )\n-            {\n-                counts.incrementNodeCount( label, 1 );\n-            }\n-            for ( Integer label : removed )\n-            {\n-                counts.incrementNodeCount( label, -1 );\n-            }\n-            // get the relationship counts from *before* this transaction,\n-            // the relationship changes will compensate for what happens during the transaction\n-            statement.acquireSingleNodeCursor( id )\n-                    .forAll( node -> storeLayer.degrees( statement, node, ( type, out, in ) ->\n-                    {\n-                        added.forEach( label -> updateRelationshipsCountsFromDegrees( type, label, out, in ) );\n-                        removed.forEach( label -> updateRelationshipsCountsFromDegrees( type, label, -out, -in ) );\n-                    } ) );\n-        }\n-        super.visitNodeLabelChanges( id, added, removed );\n-    }\n-\n-    private void updateRelationshipsCountsFromDegrees( PrimitiveIntSet labels, int type, long outgoing,\n-            long incoming )\n+      counts.incrementNodeCount(labelId, -1);\n+      return false;\n+    });\n+\n+    storeLayer.degrees(statement, node,\n+        (type, out, in) -> updateRelationshipsCountsFromDegrees(labelIds, type, -out, -in));\n+  }\n+\n+  @Override\n+  public void visitCreatedRelationship(long id, int type, long startNode, long endNode)\n+      throws ConstraintValidationException\n+  {\n+    updateRelationshipCount(startNode, type, endNode, 1);\n+    super.visitCreatedRelationship(id, type, startNode, endNode);\n+  }\n+\n+  @Override\n+  public void visitDeletedRelationship(long id)\n+  {\n+    try\n     {\n-        labels.visitKeys( label -> updateRelationshipsCountsFromDegrees( type, label, outgoing, incoming ) );\n-    }\n-\n-    private boolean updateRelationshipsCountsFromDegrees( int type, int label, long outgoing, long incoming )\n+      storeLayer.relationshipVisit(id, edge);\n+      updateRelationshipCount(edge.startNode(), edge.type(), edge.endNode(), -1);\n+    } catch (EntityNotFoundException e)\n     {\n-        // untyped\n-        counts.incrementRelationshipCount( label, ANY_RELATIONSHIP_TYPE, ANY_LABEL, outgoing );\n-        counts.incrementRelationshipCount( ANY_LABEL, ANY_RELATIONSHIP_TYPE, label, incoming );\n-        // typed\n-        counts.incrementRelationshipCount( label, type, ANY_LABEL, outgoing );\n-        counts.incrementRelationshipCount( ANY_LABEL, type, label, incoming );\n-        return false;\n+      throw new IllegalStateException(\"Relationship being deleted should exist along with its nodes.\", e);\n     }\n-\n-    private void updateRelationshipCount( long startNode, int type, long endNode, int delta )\n-    {\n-        updateRelationshipsCountsFromDegrees( type, ANY_LABEL, delta, 0 );\n-        visitLabels( startNode, labelId -> updateRelationshipsCountsFromDegrees( type, labelId, delta, 0 ) );\n-        visitLabels( endNode, labelId -> updateRelationshipsCountsFromDegrees( type, labelId, 0, delta ) );\n-    }\n-\n-    private void visitLabels( long nodeId, PrimitiveIntVisitor<RuntimeException> visitor )\n-    {\n-        nodeCursor( statement, nodeId ).forAll( node -> node.labels().visitKeys( visitor ) );\n-    }\n-\n-    private Cursor<NodeItem> nodeCursor( StorageStatement statement, long nodeId )\n+    super.visitDeletedRelationship(id);\n+  }\n+\n+  @Override\n+  public void visitNodeLabelChanges(long id, final Set<Integer> added, final Set<Integer> removed)\n+      throws ConstraintValidationException\n+  {\n+    // update counts\n+    if (!(added.isEmpty() && removed.isEmpty()))\n     {\n-        return txState.augmentSingleNodeCursor( statement.acquireSingleNodeCursor( nodeId ), nodeId );\n+      for (Integer label : added)\n+      {\n+        counts.incrementNodeCount(label, 1);\n+      }\n+      for (Integer label : removed)\n+      {\n+        counts.incrementNodeCount(label, -1);\n+      }\n+      // get the relationship counts from *before* this transaction,\n+      // the relationship changes will compensate for what happens during the transaction\n+      statement.acquireSingleNodeCursor(id)\n+          .forAll(node -> storeLayer.degrees(statement, node, (type, out, in) ->\n+          {\n+            added.forEach(label -> updateRelationshipsCountsFromDegrees(type, label, out, in));\n+            removed.forEach(label -> updateRelationshipsCountsFromDegrees(type, label, -out, -in));\n+          }));\n     }\n+    super.visitNodeLabelChanges(id, added, removed);\n+  }\n+\n+  private void updateRelationshipsCountsFromDegrees(PrimitiveIntSet labels, int type, long outgoing,\n+                                                    long incoming)\n+  {\n+    labels.visitKeys(label -> updateRelationshipsCountsFromDegrees(type, label, outgoing, incoming));\n+  }\n+\n+  private boolean updateRelationshipsCountsFromDegrees(int type, int label, long outgoing, long incoming)\n+  {\n+    // untyped\n+    counts.incrementRelationshipCount(label, ANY_RELATIONSHIP_TYPE, ANY_LABEL, outgoing);\n+    counts.incrementRelationshipCount(ANY_LABEL, ANY_RELATIONSHIP_TYPE, label, incoming);\n+    // typed\n+    counts.incrementRelationshipCount(label, type, ANY_LABEL, outgoing);\n+    counts.incrementRelationshipCount(ANY_LABEL, type, label, incoming);\n+    return false;\n+  }\n+\n+  private void updateRelationshipCount(long startNode, int type, long endNode, int delta)\n+  {\n+    updateRelationshipsCountsFromDegrees(type, ANY_LABEL, delta, 0);\n+    visitLabels(startNode, labelId -> updateRelationshipsCountsFromDegrees(type, labelId, delta, 0));\n+    visitLabels(endNode, labelId -> updateRelationshipsCountsFromDegrees(type, labelId, 0, delta));\n+  }\n+\n+  private void visitLabels(long nodeId, PrimitiveIntVisitor<RuntimeException> visitor)\n+  {\n+    nodeCursor(statement, nodeId).forAll(node -> node.labels().visitKeys(visitor));\n+  }\n+\n+  private Cursor<NodeItem> nodeCursor(StorageStatement statement, long nodeId)\n+  {\n+    return txState.augmentSingleNodeCursor(statement.acquireSingleNodeCursor(nodeId), nodeId);\n+  }\n }\n",
            "diff_size": 173
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3807/TransactionCountingStateVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3807/TransactionCountingStateVisitor.java\nindex b2d3ceb5851..4351832eede 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3807/TransactionCountingStateVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3807/TransactionCountingStateVisitor.java\n@@ -78,15 +78,13 @@ public class TransactionCountingStateVisitor extends TxStateVisitor.Delegator\n             counts.incrementNodeCount( labelId, -1 );\n             return false;\n         } );\n-\n-        storeLayer.degrees( statement, node,\n+storeLayer.degrees( statement, node,\n                 ( type, out, in ) -> updateRelationshipsCountsFromDegrees( labelIds, type, -out, -in ) );\n     }\n \n     @Override\n-    public void visitCreatedRelationship( long id, int type, long startNode, long endNode )\n-            throws ConstraintValidationException\n-    {\n+    public void visitCreatedRelationship( long id, int type, long startNode, long endNode ) throws ConstraintValidationException\n+{\n         updateRelationshipCount( startNode, type, endNode, 1 );\n         super.visitCreatedRelationship( id, type, startNode, endNode );\n     }\n@@ -107,9 +105,8 @@ public class TransactionCountingStateVisitor extends TxStateVisitor.Delegator\n     }\n \n     @Override\n-    public void visitNodeLabelChanges( long id, final Set<Integer> added, final Set<Integer> removed )\n-            throws ConstraintValidationException\n-    {\n+    public void visitNodeLabelChanges( long id, final Set<Integer> added, final Set<Integer> removed ) throws ConstraintValidationException\n+{\n         // update counts\n         if ( !(added.isEmpty() && removed.isEmpty()) )\n         {\n@@ -123,8 +120,7 @@ public class TransactionCountingStateVisitor extends TxStateVisitor.Delegator\n             }\n             // get the relationship counts from *before* this transaction,\n             // the relationship changes will compensate for what happens during the transaction\n-            statement.acquireSingleNodeCursor( id )\n-                    .forAll( node -> storeLayer.degrees( statement, node, ( type, out, in ) ->\n+            statement.acquireSingleNodeCursor( id ).forAll( node -> storeLayer.degrees( statement, node, ( type, out, in ) ->\n                     {\n                         added.forEach( label -> updateRelationshipsCountsFromDegrees( type, label, out, in ) );\n                         removed.forEach( label -> updateRelationshipsCountsFromDegrees( type, label, -out, -in ) );\n@@ -166,4 +162,4 @@ public class TransactionCountingStateVisitor extends TxStateVisitor.Delegator\n     {\n         return txState.augmentSingleNodeCursor( statement.acquireSingleNodeCursor( nodeId ), nodeId );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}