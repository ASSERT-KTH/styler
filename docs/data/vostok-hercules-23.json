{
    "project_name": "vostok-hercules",
    "error_id": "23",
    "information": {
        "errors": [
            {
                "line": "67",
                "column": "59",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                            Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n                            application.ifPresent(parts::add);\n                            if (!application.isPresent()) {//FIXME: backward compatibility\n                                ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n                            }\n                            ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/23/IndexToElasticJsonWriter.java\nindex 6d0f720bbcf..7bff73b67e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/23/IndexToElasticJsonWriter.java\n@@ -64,7 +64,7 @@ public final class IndexToElasticJsonWriter {\n                             parts.add(project.get());\n                             Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n                             application.ifPresent(parts::add);\n-                            if (!application.isPresent()) {//FIXME: backward compatibility\n+                            if (!application.isPresent()) { //FIXME: backward compatibility\n                                 ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n                             }\n                             ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "67",
                    "column": "43",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/23/IndexToElasticJsonWriter.java\nindex 6d0f720bbcf..3998b7ca75d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/23/IndexToElasticJsonWriter.java\n@@ -20,67 +20,67 @@ import java.util.List;\n import java.util.Optional;\n \n public final class IndexToElasticJsonWriter {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(IndexToElasticJsonWriter.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(IndexToElasticJsonWriter.class);\n \n-    private static final Charset ENCODING = StandardCharsets.UTF_8;\n+  private static final Charset ENCODING = StandardCharsets.UTF_8;\n \n-    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy.MM.dd\").withZone(ZoneId.of(\"UTC\"));\n+  private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy.MM.dd\").withZone(ZoneId.of(\"UTC\"));\n \n-    private static final byte[] START_BYTES = \"{\\\"index\\\":{\\\"_index\\\":\\\"\".getBytes(ENCODING);\n-    private static final byte[] MIDDLE_BYTES = \"\\\",\\\"_type\\\":\\\"LogEvent\\\",\\\"_id\\\":\\\"\".getBytes(ENCODING);\n-    private static final byte[] END_BYTES = \"\\\"}}\".getBytes(ENCODING);\n+  private static final byte[] START_BYTES = \"{\\\"index\\\":{\\\"_index\\\":\\\"\".getBytes(ENCODING);\n+  private static final byte[] MIDDLE_BYTES = \"\\\",\\\"_type\\\":\\\"LogEvent\\\",\\\"_id\\\":\\\"\".getBytes(ENCODING);\n+  private static final byte[] END_BYTES = \"\\\"}}\".getBytes(ENCODING);\n \n-    public static boolean tryWriteIndex(OutputStream stream, Event event) throws IOException {\n-        Optional<String> index;\n-        try {\n-            index = extractIndex(event);\n-        } catch (Exception ex) {\n-            LOGGER.warn(\"Cannot extract index from event\", ex);\n-            return false;\n-        }\n-        if (!index.isPresent()) {\n-            return false;\n-        }\n-\n-        stream.write(START_BYTES);\n-        stream.write(index.get().getBytes(ENCODING));\n-        stream.write(MIDDLE_BYTES);\n-        stream.write(EventUtil.extractStringId(event).getBytes(ENCODING));\n-        stream.write(END_BYTES);\n-        return true;\n+  public static boolean tryWriteIndex(OutputStream stream, Event event) throws IOException {\n+    Optional<String> index;\n+    try {\n+      index = extractIndex(event);\n+    } catch (Exception ex) {\n+      LOGGER.warn(\"Cannot extract index from event\", ex);\n+      return false;\n+    }\n+    if (!index.isPresent()) {\n+      return false;\n     }\n \n-    private static Optional<String> extractIndex(final Event event) {\n-        return ContainerUtil.extract(event.getPayload(), CommonTags.PROPERTIES_TAG)\n-                .flatMap(properties -> {\n-                    final List<String> parts = new ArrayList<>(4);\n+    stream.write(START_BYTES);\n+    stream.write(index.get().getBytes(ENCODING));\n+    stream.write(MIDDLE_BYTES);\n+    stream.write(EventUtil.extractStringId(event).getBytes(ENCODING));\n+    stream.write(END_BYTES);\n+    return true;\n+  }\n \n-                    final Optional<String> index = ContainerUtil.extract(properties, ElasticSearchTags.ELK_INDEX_TAG);\n-                    if (index.isPresent()) {\n-                        parts.add(index.get());\n-                    } else {\n-                        final Optional<String> project = ContainerUtil.extract(properties, CommonTags.PROJECT_TAG);\n-                        if (project.isPresent()) {\n-                            parts.add(project.get());\n-                            Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n-                            application.ifPresent(parts::add);\n-                            if (!application.isPresent()) {//FIXME: backward compatibility\n-                                ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n-                            }\n-                            ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n-                        }\n-                    }\n+  private static Optional<String> extractIndex(final Event event) {\n+    return ContainerUtil.extract(event.getPayload(), CommonTags.PROPERTIES_TAG)\n+      .flatMap(properties -> {\n+        final List<String> parts = new ArrayList<>(4);\n \n-                    if (parts.size() != 0) {\n-                        parts.add(DATE_FORMATTER.format(TimeUtil.unixTicksToInstant(event.getTimestamp())));\n-                        return Optional.of(String.join(\"-\", parts).toLowerCase());\n-                    }  else {\n-                        return Optional.empty();\n-                    }\n-                });\n-    }\n+        final Optional<String> index = ContainerUtil.extract(properties, ElasticSearchTags.ELK_INDEX_TAG);\n+        if (index.isPresent()) {\n+          parts.add(index.get());\n+        } else {\n+          final Optional<String> project = ContainerUtil.extract(properties, CommonTags.PROJECT_TAG);\n+          if (project.isPresent()) {\n+            parts.add(project.get());\n+            Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n+            application.ifPresent(parts::add);\n+            if (!application.isPresent()) {//FIXME: backward compatibility\n+              ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n+            }\n+            ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n+          }\n+        }\n \n-    private IndexToElasticJsonWriter() {\n-        /* static class */\n-    }\n+        if (parts.size() != 0) {\n+          parts.add(DATE_FORMATTER.format(TimeUtil.unixTicksToInstant(event.getTimestamp())));\n+          return Optional.of(String.join(\"-\", parts).toLowerCase());\n+        } else {\n+          return Optional.empty();\n+        }\n+      });\n+  }\n+\n+  private IndexToElasticJsonWriter() {\n+    /* static class */\n+  }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/23/IndexToElasticJsonWriter.java\nindex 6d0f720bbcf..f63ce27706e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/23/IndexToElasticJsonWriter.java\n@@ -50,7 +50,8 @@ public final class IndexToElasticJsonWriter {\n         return true;\n     }\n \n-    private static Optional<String> extractIndex(final Event event) {\n+    private static Optional<String> extractIndex(\n+        final Event event) {\n         return ContainerUtil.extract(event.getPayload(), CommonTags.PROPERTIES_TAG)\n                 .flatMap(properties -> {\n                     final List<String> parts = new ArrayList<>(4);\n@@ -64,7 +65,7 @@ public final class IndexToElasticJsonWriter {\n                             parts.add(project.get());\n                             Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n                             application.ifPresent(parts::add);\n-                            if (!application.isPresent()) {//FIXME: backward compatibility\n+                            if (!application.isPresent()) { //FIXME: backward compatibility\n                                 ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n                             }\n                             ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n@@ -74,7 +75,7 @@ public final class IndexToElasticJsonWriter {\n                     if (parts.size() != 0) {\n                         parts.add(DATE_FORMATTER.format(TimeUtil.unixTicksToInstant(event.getTimestamp())));\n                         return Optional.of(String.join(\"-\", parts).toLowerCase());\n-                    }  else {\n+                    } else {\n                         return Optional.empty();\n                     }\n                 });\n@@ -83,4 +84,4 @@ public final class IndexToElasticJsonWriter {\n     private IndexToElasticJsonWriter() {\n         /* static class */\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "68",
                    "column": "51",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/23/IndexToElasticJsonWriter.java\nindex 6d0f720bbcf..14e682336bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/23/IndexToElasticJsonWriter.java\n@@ -8,7 +8,6 @@ import ru.kontur.vostok.hercules.protocol.util.EventUtil;\n import ru.kontur.vostok.hercules.tags.CommonTags;\n import ru.kontur.vostok.hercules.tags.ElasticSearchTags;\n import ru.kontur.vostok.hercules.util.time.TimeUtil;\n-\n import java.io.IOException;\n import java.io.OutputStream;\n import java.nio.charset.Charset;\n@@ -19,13 +18,13 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n \n+\n public final class IndexToElasticJsonWriter {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(IndexToElasticJsonWriter.class);\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(IndexToElasticJsonWriter.class);\n     private static final Charset ENCODING = StandardCharsets.UTF_8;\n-\n-    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy.MM.dd\").withZone(ZoneId.of(\"UTC\"));\n-\n+    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy.MM.dd\")\n+    .withZone(ZoneId.of(\"UTC\"));\n     private static final byte[] START_BYTES = \"{\\\"index\\\":{\\\"_index\\\":\\\"\".getBytes(ENCODING);\n     private static final byte[] MIDDLE_BYTES = \"\\\",\\\"_type\\\":\\\"LogEvent\\\",\\\"_id\\\":\\\"\".getBytes(ENCODING);\n     private static final byte[] END_BYTES = \"\\\"}}\".getBytes(ENCODING);\n@@ -43,44 +42,47 @@ public final class IndexToElasticJsonWriter {\n         }\n \n         stream.write(START_BYTES);\n-        stream.write(index.get().getBytes(ENCODING));\n+        stream.write(index.get()\n+        .getBytes(ENCODING));\n         stream.write(MIDDLE_BYTES);\n-        stream.write(EventUtil.extractStringId(event).getBytes(ENCODING));\n+        stream.write(EventUtil.extractStringId(event)\n+        .getBytes(ENCODING));\n         stream.write(END_BYTES);\n         return true;\n     }\n \n     private static Optional<String> extractIndex(final Event event) {\n         return ContainerUtil.extract(event.getPayload(), CommonTags.PROPERTIES_TAG)\n-                .flatMap(properties -> {\n-                    final List<String> parts = new ArrayList<>(4);\n+        .flatMap(properties -> {\n+            final List<String> parts = new ArrayList<>(4);\n+            final Optional<String> index = ContainerUtil.extract(properties, ElasticSearchTags.ELK_INDEX_TAG);\n+            if (index.isPresent()) {\n+                parts.add(index.get());\n+            } else {\n+                final Optional<String> project = ContainerUtil.extract(properties, CommonTags.PROJECT_TAG);\n+                if (project.isPresent()) {\n+                    parts.add(project.get());\n \n-                    final Optional<String> index = ContainerUtil.extract(properties, ElasticSearchTags.ELK_INDEX_TAG);\n-                    if (index.isPresent()) {\n-                        parts.add(index.get());\n-                    } else {\n-                        final Optional<String> project = ContainerUtil.extract(properties, CommonTags.PROJECT_TAG);\n-                        if (project.isPresent()) {\n-                            parts.add(project.get());\n-                            Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n-                            application.ifPresent(parts::add);\n-                            if (!application.isPresent()) {//FIXME: backward compatibility\n-                                ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n-                            }\n-                            ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n-                        }\n+                    Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n+                    application.ifPresent(parts::add);\n+                    if (!application.isPresent()) {//FIXME: backward compatibility\n+                        ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n                     }\n \n-                    if (parts.size() != 0) {\n-                        parts.add(DATE_FORMATTER.format(TimeUtil.unixTicksToInstant(event.getTimestamp())));\n-                        return Optional.of(String.join(\"-\", parts).toLowerCase());\n-                    }  else {\n-                        return Optional.empty();\n-                    }\n-                });\n+                    ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n+                }\n+            }\n+            if (parts.size() != 0) {\n+                parts.add(DATE_FORMATTER.format(TimeUtil.unixTicksToInstant(event.getTimestamp())));\n+                return Optional.of(String.join(\"-\", parts)\n+                .toLowerCase());\n+            } else {\n+                return Optional.empty();\n+            }\n+        });\n     }\n \n     private IndexToElasticJsonWriter() {\n         /* static class */\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/23/IndexToElasticJsonWriter.java\nindex 6d0f720bbcf..7bff73b67e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/23/IndexToElasticJsonWriter.java\n@@ -64,7 +64,7 @@ public final class IndexToElasticJsonWriter {\n                             parts.add(project.get());\n                             Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n                             application.ifPresent(parts::add);\n-                            if (!application.isPresent()) {//FIXME: backward compatibility\n+                            if (!application.isPresent()) { //FIXME: backward compatibility\n                                 ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n                             }\n                             ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/23/IndexToElasticJsonWriter.java\nindex 6d0f720bbcf..7bff73b67e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/23/IndexToElasticJsonWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/23/IndexToElasticJsonWriter.java\n@@ -64,7 +64,7 @@ public final class IndexToElasticJsonWriter {\n                             parts.add(project.get());\n                             Optional<String> application = ContainerUtil.extract(properties, CommonTags.APPLICATION_TAG);\n                             application.ifPresent(parts::add);\n-                            if (!application.isPresent()) {//FIXME: backward compatibility\n+                            if (!application.isPresent()) { //FIXME: backward compatibility\n                                 ContainerUtil.extract(properties, ElasticSearchTags.ELK_SCOPE_TAG).ifPresent(parts::add);\n                             }\n                             ContainerUtil.extract(properties, CommonTags.ENVIRONMENT_TAG).ifPresent(parts::add);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}