{
    "project_name": "wayshall-onetwo",
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "54",
                "column": "54",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\t\t@Override\n\t\tpublic <T> Optional<T> getAttributeOpt(String key) {\n\t\t\treturn Optional.ofNullable((T)attributes.get(key));\n\t\t}\n\t\t\n\t\t@Override",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "54",
                    "column": "54",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/65/InvokeContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/65/InvokeContext.java\nindex 3193a1331c2..b5986bfb2ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/65/InvokeContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/65/InvokeContext.java\n@@ -14,49 +14,55 @@ import com.google.common.collect.Maps;\n  * <br/>\n  */\n public interface InvokeContext {\n-\t\n-\tInvokeType getInvokeType();\n-\tString getRequestPath();\n-\tString getClientUser();\n-\tString getClientIp();\n-\tString getClientId();\n-\tString getServiceId();\n-\tint getInvokeTimes();\n-\t\n-\tdefault <T> Optional<T> getAttributeOpt(String key) {\n-\t\treturn Optional.empty();\n-\t}\n-\t\n-\tvoid setAttribute(String key, Object value);\n-\t\n-\tpublic enum InvokeType {\n-\t\tBEFORE,\n-\t\tAFTER,\n-\t\tALL\n-\t}\n-\t\n-\t@Data\n-\t@Builder\n-\tpublic class DefaultInvokeContext implements InvokeContext {\n-\t\tInvokeType invokeType;\n-\t\tString requestPath;\n-\t\tString clientUser;\n-\t\tString clientIp;\n-\t\tString clientId;\n-\t\tString serviceId;\n-\t\tint invokeTimes = 1;\n-\t\t\n-\t\tMap<String, Object> attributes = Maps.newHashMap();\n-\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\t@Override\n-\t\tpublic <T> Optional<T> getAttributeOpt(String key) {\n-\t\t\treturn Optional.ofNullable((T)attributes.get(key));\n-\t\t}\n-\t\t\n-\t\t@Override\n-\t\tpublic void setAttribute(String key, Object value) {\n-\t\t\tattributes.put(key, value);\n-\t\t}\n-\t}\n+\n+  InvokeType getInvokeType();\n+\n+  String getRequestPath();\n+\n+  String getClientUser();\n+\n+  String getClientIp();\n+\n+  String getClientId();\n+\n+  String getServiceId();\n+\n+  int getInvokeTimes();\n+\n+  default <T> Optional<T> getAttributeOpt(String key) {\n+    return Optional.empty();\n+  }\n+\n+  void setAttribute(String key, Object value);\n+\n+  public enum InvokeType {\n+    BEFORE,\n+    AFTER,\n+    ALL\n+  }\n+\n+  @Data\n+  @Builder\n+  public class DefaultInvokeContext implements InvokeContext {\n+    InvokeType invokeType;\n+    String requestPath;\n+    String clientUser;\n+    String clientIp;\n+    String clientId;\n+    String serviceId;\n+    int invokeTimes = 1;\n+\n+    Map<String, Object> attributes = Maps.newHashMap();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T> Optional<T> getAttributeOpt(String key) {\n+      return Optional.ofNullable((T) attributes.get(key));\n+    }\n+\n+    @Override\n+    public void setAttribute(String key, Object value) {\n+      attributes.put(key, value);\n+    }\n+  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "54",
                    "column": "54",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "54",
                    "column": "54",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}