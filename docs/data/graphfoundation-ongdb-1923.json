{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1923",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1923/ClusteringModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1923/ClusteringModule.java\nindex e906161d02b..c091fda8806 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1923/ClusteringModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1923/ClusteringModule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state;\n \n import java.io.File;\n@@ -50,66 +51,66 @@ import static org.neo4j.causalclustering.discovery.ResolutionResolverFactory.cho\n \n public class ClusteringModule\n {\n-    private final CoreTopologyService topologyService;\n-    private final ClusterBinder clusterBinder;\n-\n-    public ClusteringModule( DiscoveryServiceFactory discoveryServiceFactory, MemberId myself,\n-            PlatformModule platformModule, File clusterStateDirectory )\n-    {\n-        LifeSupport life = platformModule.life;\n-        Config config = platformModule.config;\n-        LogProvider logProvider = platformModule.logging.getInternalLogProvider();\n-        LogProvider userLogProvider = platformModule.logging.getUserLogProvider();\n-        Dependencies dependencies = platformModule.dependencies;\n-        FileSystemAbstraction fileSystem = platformModule.fileSystem;\n-        HostnameResolver hostnameResolver = chooseResolver( config, logProvider, userLogProvider );\n-\n-        topologyService = discoveryServiceFactory\n-                .coreTopologyService( config, myself, platformModule.jobScheduler, logProvider,\n-                        userLogProvider, hostnameResolver, resolveStrategy( config, logProvider ) );\n-\n-        life.add( topologyService );\n-\n-        dependencies.satisfyDependency( topologyService ); // for tests\n-\n-        CoreBootstrapper coreBootstrapper =\n-                new CoreBootstrapper( platformModule.storeDir, platformModule.pageCache, fileSystem, config, logProvider );\n-\n-        SimpleStorage<ClusterId> clusterIdStorage =\n-                new SimpleFileStorage<>( fileSystem, clusterStateDirectory, CLUSTER_ID_NAME, new ClusterId.Marshal(),\n-                        logProvider );\n-\n-        SimpleStorage<DatabaseName> dbNameStorage =\n-                new SimpleFileStorage<>( fileSystem, clusterStateDirectory, DB_NAME, new DatabaseName.Marshal(), logProvider );\n-\n-        String dbName = config.get( CausalClusteringSettings.database );\n-        int minimumCoreHosts = config.get( CausalClusteringSettings.minimum_core_cluster_size_at_formation );\n-\n-        clusterBinder = new ClusterBinder( clusterIdStorage, dbNameStorage, topologyService, Clocks.systemClock(), () -> sleep( 100 ), 300_000,\n-                coreBootstrapper, dbName, minimumCoreHosts, logProvider );\n-    }\n-\n-    private static TopologyServiceRetryStrategy resolveStrategy( Config config, LogProvider logProvider )\n-    {\n-        long refreshPeriodMillis = config.get( CausalClusteringSettings.cluster_topology_refresh ).toMillis();\n-        int pollingFrequencyWithinRefreshWindow = 2;\n-        int numberOfRetries =\n-                pollingFrequencyWithinRefreshWindow + 1; // we want to have more retries at the given frequency than there is time in a refresh period\n-        return new TopologyServiceMultiRetryStrategy( refreshPeriodMillis / pollingFrequencyWithinRefreshWindow, numberOfRetries, logProvider );\n-    }\n-\n-    public CoreTopologyService topologyService()\n-    {\n-        return topologyService;\n-    }\n-\n-    public Supplier<Optional<ClusterId>> clusterIdentity()\n-    {\n-        return clusterBinder;\n-    }\n-\n-    public ClusterBinder clusterBinder()\n-    {\n-        return clusterBinder;\n-    }\n+  private final CoreTopologyService topologyService;\n+  private final ClusterBinder clusterBinder;\n+\n+  public ClusteringModule(DiscoveryServiceFactory discoveryServiceFactory, MemberId myself,\n+                          PlatformModule platformModule, File clusterStateDirectory)\n+  {\n+    LifeSupport life = platformModule.life;\n+    Config config = platformModule.config;\n+    LogProvider logProvider = platformModule.logging.getInternalLogProvider();\n+    LogProvider userLogProvider = platformModule.logging.getUserLogProvider();\n+    Dependencies dependencies = platformModule.dependencies;\n+    FileSystemAbstraction fileSystem = platformModule.fileSystem;\n+    HostnameResolver hostnameResolver = chooseResolver(config, logProvider, userLogProvider);\n+\n+    topologyService = discoveryServiceFactory\n+        .coreTopologyService(config, myself, platformModule.jobScheduler, logProvider,\n+            userLogProvider, hostnameResolver, resolveStrategy(config, logProvider));\n+\n+    life.add(topologyService);\n+\n+    dependencies.satisfyDependency(topologyService); // for tests\n+\n+    CoreBootstrapper coreBootstrapper =\n+        new CoreBootstrapper(platformModule.storeDir, platformModule.pageCache, fileSystem, config, logProvider);\n+\n+    SimpleStorage<ClusterId> clusterIdStorage =\n+        new SimpleFileStorage<>(fileSystem, clusterStateDirectory, CLUSTER_ID_NAME, new ClusterId.Marshal(),\n+            logProvider);\n+\n+    SimpleStorage<DatabaseName> dbNameStorage =\n+        new SimpleFileStorage<>(fileSystem, clusterStateDirectory, DB_NAME, new DatabaseName.Marshal(), logProvider);\n+\n+    String dbName = config.get(CausalClusteringSettings.database);\n+    int minimumCoreHosts = config.get(CausalClusteringSettings.minimum_core_cluster_size_at_formation);\n+\n+    clusterBinder = new ClusterBinder(clusterIdStorage, dbNameStorage, topologyService, Clocks.systemClock(), () -> sleep(100), 300_000,\n+        coreBootstrapper, dbName, minimumCoreHosts, logProvider);\n+  }\n+\n+  private static TopologyServiceRetryStrategy resolveStrategy(Config config, LogProvider logProvider)\n+  {\n+    long refreshPeriodMillis = config.get(CausalClusteringSettings.cluster_topology_refresh).toMillis();\n+    int pollingFrequencyWithinRefreshWindow = 2;\n+    int numberOfRetries =\n+        pollingFrequencyWithinRefreshWindow + 1; // we want to have more retries at the given frequency than there is time in a refresh period\n+    return new TopologyServiceMultiRetryStrategy(refreshPeriodMillis / pollingFrequencyWithinRefreshWindow, numberOfRetries, logProvider);\n+  }\n+\n+  public CoreTopologyService topologyService()\n+  {\n+    return topologyService;\n+  }\n+\n+  public Supplier<Optional<ClusterId>> clusterIdentity()\n+  {\n+    return clusterBinder;\n+  }\n+\n+  public ClusterBinder clusterBinder()\n+  {\n+    return clusterBinder;\n+  }\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}