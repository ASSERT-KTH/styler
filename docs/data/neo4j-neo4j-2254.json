{
    "project_name": "neo4j-neo4j",
    "error_id": "2254",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2254/Header.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2254/Header.java\nindex b897aed88e6..69b5cf1e65e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2254/Header.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2254/Header.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.nio.ByteBuffer;\n@@ -36,8 +37,8 @@ public class Header\n      * Therefore the max size of an additional header cannot exceed page size minus this overhead.\n      */\n     public static final int OVERHEAD =\n-            TreeState.SIZE +   // size of the tree state\n-            Integer.BYTES;     // size of the field storing the length of the additional header data\n+      TreeState.SIZE +   // size of the tree state\n+        Integer.BYTES;     // size of the field storing the length of the additional header data\n \n     /**\n      * Writes a header into a {@link GBPTree} state page during\n@@ -48,28 +49,29 @@ public class Header\n         /**\n          * Writes header data into {@code to} with previous valid header data found in {@code from} of {@code length}\n          * bytes in size.\n-         * @param from {@link PageCursor} positioned at the header data written in the previous check point.\n+         *\n+         * @param from   {@link PageCursor} positioned at the header data written in the previous check point.\n          * @param length size in bytes of the previous header data.\n-         * @param to {@link PageCursor} to write new header into.\n+         * @param to     {@link PageCursor} to write new header into.\n          */\n-        void write( PageCursor from, int length, PageCursor to );\n+        void write(PageCursor from, int length, PageCursor to);\n     }\n \n     private Header()\n     {\n     }\n \n-    static final Writer CARRY_OVER_PREVIOUS_HEADER = ( from, length, to ) ->\n+    static final Writer CARRY_OVER_PREVIOUS_HEADER = (from, length, to) ->\n     {\n         int toOffset = to.getOffset();\n-        from.copyTo( from.getOffset(), to, toOffset, length );\n-        to.setOffset( toOffset + length );\n+        from.copyTo(from.getOffset(), to, toOffset, length);\n+        to.setOffset(toOffset + length);\n     };\n \n-    static Writer replace( Consumer<PageCursor> writer )\n+    static Writer replace(Consumer<PageCursor> writer)\n     {\n         // Discard the previous state, just write the new\n-        return ( from, length, to ) -> writer.accept( to );\n+        return (from, length, to) -> writer.accept(to);\n     }\n \n     /**\n@@ -84,6 +86,6 @@ public class Header\n          *\n          * @param headerBytes {@link ByteBuffer} containing the header data.\n          */\n-        void read( ByteBuffer headerBytes );\n+        void read(ByteBuffer headerBytes);\n     }\n }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}