{
    "project_name": "self-xdsd-self-storage",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "86",
                "column": "12",
                "severity": "error",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    public void iteratesUsers() {\n        final Users users = new SelfJooq(new H2Database()).users();\n        for(final User user : users) {\n            MatcherAssert.assertThat(user, Matchers.notNullValue());\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler/10/SelfUsersITCase.java\nindex 4d51b7b883a..55c626b4e67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler/10/SelfUsersITCase.java\n@@ -83,7 +83,7 @@ public final class SelfUsersITCase {\n     @Test\n     public void iteratesUsers() {\n         final Users users = new SelfJooq(new H2Database()).users();\n-        for(final User user : users) {\n+        for (final User user : users) {\n             MatcherAssert.assertThat(user, Matchers.notNullValue());\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/intellij/10/SelfUsersITCase.java\nindex 4d51b7b883a..97312f63f04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/intellij/10/SelfUsersITCase.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.storage;\n \n import com.selfxdsd.api.Provider;\n@@ -36,6 +37,7 @@ import static com.selfxdsd.storage.generated.jooq.tables.SlfUsersXdsd.SLF_USERS_\n /**\n  * Integration tests for {@link SelfUsers}.\n  * Read the package-info.java if you want to run these tests manually.\n+ *\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id$\n  * @since 0.0.1\n@@ -83,7 +85,7 @@ public final class SelfUsersITCase {\n     @Test\n     public void iteratesUsers() {\n         final Users users = new SelfJooq(new H2Database()).users();\n-        for(final User user : users) {\n+        for (final User user : users) {\n             MatcherAssert.assertThat(user, Matchers.notNullValue());\n         }\n     }\n@@ -98,7 +100,7 @@ public final class SelfUsersITCase {\n         final Users users = new SelfJooq(database).users();\n         users.signUp(\"foo\", \"foo@mail.com\", Provider.Names.GITHUB);\n \n-        try(Database testDb = database.connect()) {\n+        try (Database testDb = database.connect()) {\n             final Result<Record> result = testDb.jooq().select()\n                 .from(SLF_USERS_XDSD)\n                 .where(SLF_USERS_XDSD.USERNAME.eq(\"foo\")\n@@ -117,7 +119,7 @@ public final class SelfUsersITCase {\n         final Users users = new SelfJooq(database).users();\n         users.signUp(\"mihai\", \"mihaiNew@example.com\", Provider.Names.GITLAB);\n \n-        try(Database testDb = database.connect()) {\n+        try (Database testDb = database.connect()) {\n             final Result<Record> result = testDb.jooq().select()\n                 .from(SLF_USERS_XDSD)\n                 .where(SLF_USERS_XDSD.USERNAME.eq(\"mihai\")\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "'\"vlad\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "'\"github\"' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "'\"vlad\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "')' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "'\"github\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "')' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "'\"vlad@example.com\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "')' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "'\"missing\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'\"github\"' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 107.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "'\"foo\"' has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "'\"mihai\"' has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "'\"mihaiNew@example.com\"' has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/naturalize/10/SelfUsersITCase.java\nindex 4d51b7b883a..25264ace5ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/naturalize/10/SelfUsersITCase.java\n@@ -48,19 +48,28 @@ public final class SelfUsersITCase {\n      */\n     @Test\n     public void returnsUser() {\n-        final Users users = new SelfJooq(new H2Database()).users();\n-        final User found = users.user(\"vlad\", \"github\");\n+        final Users users = new SelfJooq(\n+    new H2Database()).users();\n+        final User found = users.user(\n+    \"vlad\",\n+\"github\");\n         MatcherAssert.assertThat(\n             found.username(),\n-            Matchers.equalTo(\"vlad\")\n+            Matchers.equalTo(\n+    \"vlad\"\n+    )\n         );\n         MatcherAssert.assertThat(\n             found.provider().name(),\n-            Matchers.equalTo(\"github\")\n+            Matchers.equalTo(\n+    \"github\"\n+    )\n         );\n         MatcherAssert.assertThat(\n             found.email(),\n-            Matchers.equalTo(\"vlad@example.com\")\n+            Matchers.equalTo(\n+    \"vlad@example.com\"\n+    )\n         );\n     }\n \n@@ -69,8 +78,11 @@ public final class SelfUsersITCase {\n      */\n     @Test\n     public void returnsNullIfUserMissing() {\n-        final Users users = new SelfJooq(new H2Database()).users();\n-        final User found = users.user(\"missing\", \"github\");\n+        final Users users = new SelfJooq(\n+    new H2Database()).users();\n+        final User found = users.user(\n+    \"missing\",\n+\"github\");\n         MatcherAssert.assertThat(\n             found,\n             Matchers.nullValue()\n@@ -82,28 +94,27 @@ public final class SelfUsersITCase {\n      */\n     @Test\n     public void iteratesUsers() {\n-        final Users users = new SelfJooq(new H2Database()).users();\n+        final Users users = new SelfJooq(\n+    new H2Database()).users();\n         for(final User user : users) {\n             MatcherAssert.assertThat(user, Matchers.notNullValue());\n         }\n     }\n \n-\n-    /**\n+/**\n      * Sign up a user by inserting them into database.\n      */\n     @Test\n     public void signUpUserByInsert() {\n         final H2Database database = new H2Database();\n         final Users users = new SelfJooq(database).users();\n-        users.signUp(\"foo\", \"foo@mail.com\", Provider.Names.GITHUB);\n+        users.signUp(\n+    \"foo\",\n+\"foo@mail.com\", Provider.Names.GITHUB);\n \n         try(Database testDb = database.connect()) {\n-            final Result<Record> result = testDb.jooq().select()\n-                .from(SLF_USERS_XDSD)\n-                .where(SLF_USERS_XDSD.USERNAME.eq(\"foo\")\n-                    .and(SLF_USERS_XDSD.PROVIDER.eq(Provider.Names.GITHUB)))\n-                .fetch();\n+            final Result<Record> result = testDb.jooq().select().from(SLF_USERS_XDSD).where(SLF_USERS_XDSD.USERNAME.eq(\n+    \"foo\").and(SLF_USERS_XDSD.PROVIDER.eq(Provider.Names.GITHUB))).fetch();\n             MatcherAssert.assertThat(result.isEmpty(), Matchers.is(false));\n         }\n     }\n@@ -115,17 +126,15 @@ public final class SelfUsersITCase {\n     public void signUpUserByUpdateEmail() {\n         final H2Database database = new H2Database();\n         final Users users = new SelfJooq(database).users();\n-        users.signUp(\"mihai\", \"mihaiNew@example.com\", Provider.Names.GITLAB);\n+        users.signUp(\n+    \"mihai\",\n+\"mihaiNew@example.com\", Provider.Names.GITLAB);\n \n         try(Database testDb = database.connect()) {\n-            final Result<Record> result = testDb.jooq().select()\n-                .from(SLF_USERS_XDSD)\n-                .where(SLF_USERS_XDSD.USERNAME.eq(\"mihai\")\n-                    .and(SLF_USERS_XDSD.EMAIL\n-                        .eq(\"mihaiNew@example.com\")))\n-                .fetch();\n+            final Result<Record> result = testDb.jooq().select().from(SLF_USERS_XDSD).where(SLF_USERS_XDSD.USERNAME.eq(\n+    \"mihai\").and(SLF_USERS_XDSD.EMAIL.eq(\n+    \"mihaiNew@example.com\"))).fetch();\n             MatcherAssert.assertThat(result.isEmpty(), Matchers.is(false));\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 26, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 29, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "70",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 32, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "column": "34",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "74",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 35, expected level should be 32.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "column": "37",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 26, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 29, expected level should be 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "column": "31",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "108",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "'for' child has incorrect indentation level 41, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 41, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "'for rcurly' has incorrect indentation level 37, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 61, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "130",
                    "column": "63",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "133",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "column": "25",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "134",
                    "column": "27",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "134",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "98",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 98, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "112",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "140",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "163",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "165",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "column": "194",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 177, expected level should be 98.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "column": "179",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "151",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 61, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "column": "63",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "158",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "column": "25",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "159",
                    "column": "27",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "159",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "98",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "114",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 114, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "column": "170",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 153, expected level should be 114.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "column": "155",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/codebuff/10/SelfUsersITCase.java\nindex 4d51b7b883a..25035914704 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/codebuff/10/SelfUsersITCase.java\n@@ -31,6 +31,7 @@ import org.jooq.Record;\n import org.jooq.Result;\n import org.junit.Test;\n \n+\n import static com.selfxdsd.storage.generated.jooq.tables.SlfUsersXdsd.SLF_USERS_XDSD;\n \n /**\n@@ -40,92 +41,127 @@ import static com.selfxdsd.storage.generated.jooq.tables.SlfUsersXdsd.SLF_USERS_\n  * @version $Id$\n  * @since 0.0.1\n  */\n+\n+\n public final class SelfUsersITCase {\n \n     /**\n      * SelfUsers can find and return a Users from the\n      * Database.\n      */\n+\n+\n     @Test\n     public void returnsUser() {\n-        final Users users = new SelfJooq(new H2Database()).users();\n-        final User found = users.user(\"vlad\", \"github\");\n-        MatcherAssert.assertThat(\n-            found.username(),\n-            Matchers.equalTo(\"vlad\")\n-        );\n-        MatcherAssert.assertThat(\n-            found.provider().name(),\n-            Matchers.equalTo(\"github\")\n-        );\n-        MatcherAssert.assertThat(\n-            found.email(),\n-            Matchers.equalTo(\"vlad@example.com\")\n-        );\n+        final Users users= new SelfJooq(\n+new H2Database()\n+                           ) .users();\n+\n+\n+        final User found= users.user(\n+                              \"vlad\", \"github\"\n+                          ); MatcherAssert.assertThat(\n+                                 found.username(),\n+                                 Matchers.equalTo(\n+                                 \"vlad\" )\n+                             ); MatcherAssert.assertThat(\n+                                    found.provider() .name(),\n+                                    Matchers.equalTo(\n+                                    \"github\" )\n+                                ); MatcherAssert.assertThat(\n+                                       found.email(),\n+                                       Matchers.equalTo(\n+                                       \"vlad@example.com\" )\n+                                   );\n     }\n \n     /**\n      * SelfUsers returns null if the User is not found.\n      */\n+\n     @Test\n     public void returnsNullIfUserMissing() {\n-        final Users users = new SelfJooq(new H2Database()).users();\n-        final User found = users.user(\"missing\", \"github\");\n-        MatcherAssert.assertThat(\n-            found,\n-            Matchers.nullValue()\n-        );\n+        final Users users= new SelfJooq(\n+new H2Database()\n+                           ) .users();\n+\n+\n+        final User found= users.user(\n+                              \"missing\", \"github\"\n+                          ); MatcherAssert.assertThat(\n+                                 found,\n+                                 Matchers.nullValue()\n+                             );\n     }\n \n     /**\n      * SelfUsers can be iterated.\n      */\n+\n     @Test\n     public void iteratesUsers() {\n-        final Users users = new SelfJooq(new H2Database()).users();\n-        for(final User user : users) {\n-            MatcherAssert.assertThat(user, Matchers.notNullValue());\n-        }\n+        final Users users= new SelfJooq(\n+new H2Database()\n+                           ) .users();\n+\n+\n+        for( final User user: users) {\n+                                         MatcherAssert.assertThat(\n+                                             user,\n+                                             Matchers.notNullValue()\n+                                         );\n+                                     }\n     }\n \n \n     /**\n      * Sign up a user by inserting them into database.\n      */\n+\n     @Test\n     public void signUpUserByInsert() {\n-        final H2Database database = new H2Database();\n-        final Users users = new SelfJooq(database).users();\n-        users.signUp(\"foo\", \"foo@mail.com\", Provider.Names.GITHUB);\n-\n-        try(Database testDb = database.connect()) {\n-            final Result<Record> result = testDb.jooq().select()\n-                .from(SLF_USERS_XDSD)\n-                .where(SLF_USERS_XDSD.USERNAME.eq(\"foo\")\n-                    .and(SLF_USERS_XDSD.PROVIDER.eq(Provider.Names.GITHUB)))\n-                .fetch();\n-            MatcherAssert.assertThat(result.isEmpty(), Matchers.is(false));\n+        final H2Database database= new H2Database();\n+\n+\n+        final Users users= new SelfJooq( database) .users(); users.signUp(\n+                                                             \"foo\",\n+                                                             \"foo@mail.com\",\n+                                                             Provider.Names.GITHUB\n+                                                             );\n+\n+\n+        try ( Database testDb= database.connect()) {\n+            final Result < Record> result= testDb.jooq() .select() .from( SLF_USERS_XDSD) .where( SLF_USERS_XDSD.USERNAME.eq(\n+                                                                                                  \"foo\" ) .and( SLF_USERS_XDSD.PROVIDER.eq( Provider.Names.GITHUB) ) ) .fetch(); MatcherAssert.assertThat(\n+                                                                                                                                                                                     result.isEmpty(),\n+                                                                                                                                                                                     Matchers.is( false)\n+                                                                                                                                                                                 );\n         }\n     }\n \n     /**\n      * Sign up a user by updating them into database (they updated their email).\n      */\n+\n     @Test\n     public void signUpUserByUpdateEmail() {\n-        final H2Database database = new H2Database();\n-        final Users users = new SelfJooq(database).users();\n-        users.signUp(\"mihai\", \"mihaiNew@example.com\", Provider.Names.GITLAB);\n-\n-        try(Database testDb = database.connect()) {\n-            final Result<Record> result = testDb.jooq().select()\n-                .from(SLF_USERS_XDSD)\n-                .where(SLF_USERS_XDSD.USERNAME.eq(\"mihai\")\n-                    .and(SLF_USERS_XDSD.EMAIL\n-                        .eq(\"mihaiNew@example.com\")))\n-                .fetch();\n-            MatcherAssert.assertThat(result.isEmpty(), Matchers.is(false));\n+        final H2Database database= new H2Database();\n+\n+\n+        final Users users= new SelfJooq( database) .users(); users.signUp(\n+                                                             \"mihai\",\n+                                                             \"mihaiNew@example.com\",\n+                                                             Provider.Names.GITLAB\n+                                                             );\n+\n+\n+        try ( Database testDb= database.connect()) {\n+            final Result < Record> result= testDb.jooq() .select() .from( SLF_USERS_XDSD) .where( SLF_USERS_XDSD.USERNAME.eq(\n+                                                                                                  \"mihai\" ) .and( SLF_USERS_XDSD.EMAIL.eq(\n+                                                                                                                  \"mihaiNew@example.com\" ) ) ) .fetch(); MatcherAssert.assertThat(\n+                                                                                                                                                             result.isEmpty(),\n+                                                                                                                                                             Matchers.is( false)\n+                                                                                                                                                         );\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 86
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "86",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler_three_grams/10/SelfUsersITCase.java\nindex 4d51b7b883a..55c626b4e67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/errored/1/10/SelfUsersITCase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-storage/styler_three_grams/10/SelfUsersITCase.java\n@@ -83,7 +83,7 @@ public final class SelfUsersITCase {\n     @Test\n     public void iteratesUsers() {\n         final Users users = new SelfJooq(new H2Database()).users();\n-        for(final User user : users) {\n+        for (final User user : users) {\n             MatcherAssert.assertThat(user, Matchers.notNullValue());\n         }\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}