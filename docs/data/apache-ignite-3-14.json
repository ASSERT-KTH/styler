{
    "project_name": "apache-ignite-3",
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "34",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "public class NodeManager {\n    private final ConcurrentMap<NodeId, Node> nodeMap = new ConcurrentHashMap<>();\n    private final ConcurrentMap<String, List<Node>> groupMap = new ConcurrentHashMap<>();\n\n    /**\n     * Adds a node.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/14/NodeManager.java\nindex c66f7359c72..bdf22c004ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/14/NodeManager.java\n@@ -31,6 +31,7 @@ import org.apache.ignite.raft.jraft.util.OnlyForTest;\n  */\n public class NodeManager {\n     private final ConcurrentMap<NodeId, Node> nodeMap = new ConcurrentHashMap<>();\n+\n     private final ConcurrentMap<String, List<Node>> groupMap = new ConcurrentHashMap<>();\n \n     /**\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/14/NodeManager.java\nindex c66f7359c72..1fc4e30def8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/14/NodeManager.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.ignite.raft.jraft;\n \n import java.util.Collection;\n@@ -30,70 +31,71 @@ import org.apache.ignite.raft.jraft.util.OnlyForTest;\n  * Raft nodes manager.\n  */\n public class NodeManager {\n-    private final ConcurrentMap<NodeId, Node> nodeMap = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<String, List<Node>> groupMap = new ConcurrentHashMap<>();\n+  private final ConcurrentMap<NodeId, Node> nodeMap = new ConcurrentHashMap<>();\n+\n+  private final ConcurrentMap<String, List<Node>> groupMap = new ConcurrentHashMap<>();\n \n-    /**\n-     * Adds a node.\n-     */\n-    public boolean add(final Node node) {\n-        final NodeId nodeId = node.getNodeId();\n-        if (this.nodeMap.putIfAbsent(nodeId, node) == null) {\n-            final String groupId = node.getGroupId();\n-            List<Node> nodes = this.groupMap.get(groupId);\n-            if (nodes == null) {\n-                nodes = new CopyOnWriteArrayList<>();\n-                List<Node> existsNode = this.groupMap.putIfAbsent(groupId, nodes);\n-                if (existsNode != null) {\n-                    nodes = existsNode;\n-                }\n-            }\n-            nodes.add(node);\n-            return true;\n+  /**\n+   * Adds a node.\n+   */\n+  public boolean add(final Node node) {\n+    final NodeId nodeId = node.getNodeId();\n+    if (this.nodeMap.putIfAbsent(nodeId, node) == null) {\n+      final String groupId = node.getGroupId();\n+      List<Node> nodes = this.groupMap.get(groupId);\n+      if (nodes == null) {\n+        nodes = new CopyOnWriteArrayList<>();\n+        List<Node> existsNode = this.groupMap.putIfAbsent(groupId, nodes);\n+        if (existsNode != null) {\n+          nodes = existsNode;\n         }\n-        return false;\n+      }\n+      nodes.add(node);\n+      return true;\n     }\n+    return false;\n+  }\n \n-    /**\n-     * Clear the states, for test\n-     */\n-    @OnlyForTest\n-    public void clear() {\n-        this.groupMap.clear();\n-        this.nodeMap.clear();\n-    }\n+  /**\n+   * Clear the states, for test\n+   */\n+  @OnlyForTest\n+  public void clear() {\n+    this.groupMap.clear();\n+    this.nodeMap.clear();\n+  }\n \n-    /**\n-     * Remove a node.\n-     */\n-    public boolean remove(final Node node) {\n-        if (this.nodeMap.remove(node.getNodeId(), node)) {\n-            final List<Node> nodes = this.groupMap.get(node.getGroupId());\n-            if (nodes != null) {\n-                return nodes.remove(node);\n-            }\n-        }\n-        return false;\n+  /**\n+   * Remove a node.\n+   */\n+  public boolean remove(final Node node) {\n+    if (this.nodeMap.remove(node.getNodeId(), node)) {\n+      final List<Node> nodes = this.groupMap.get(node.getGroupId());\n+      if (nodes != null) {\n+        return nodes.remove(node);\n+      }\n     }\n+    return false;\n+  }\n \n-    /**\n-     * Get node by groupId and peer.\n-     */\n-    public Node get(final String groupId, final PeerId peerId) {\n-        return this.nodeMap.get(new NodeId(groupId, peerId));\n-    }\n+  /**\n+   * Get node by groupId and peer.\n+   */\n+  public Node get(final String groupId, final PeerId peerId) {\n+    return this.nodeMap.get(new NodeId(groupId, peerId));\n+  }\n \n-    /**\n-     * Get all nodes in a raft group.\n-     */\n-    public List<Node> getNodesByGroupId(final String groupId) {\n-        return this.groupMap.get(groupId);\n-    }\n+  /**\n+   * Get all nodes in a raft group.\n+   */\n+  public List<Node> getNodesByGroupId(final String groupId) {\n+    return this.groupMap.get(groupId);\n+  }\n \n-    /**\n-     * Get all nodes\n-     */\n-    public List<Node> getAllNodes() {\n-        return this.groupMap.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n-    }\n+  /**\n+   * Get all nodes\n+   */\n+  public List<Node> getAllNodes() {\n+    return this.groupMap.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n+  }\n }\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/14/NodeManager.java\nindex c66f7359c72..656d7a56eda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/14/NodeManager.java\n@@ -96,4 +96,4 @@ public class NodeManager {\n     public List<Node> getAllNodes() {\n         return this.groupMap.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "39",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "46",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "77",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/14/NodeManager.java\nindex c66f7359c72..23f5a753cf2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/14/NodeManager.java\n@@ -29,36 +29,52 @@ import org.apache.ignite.raft.jraft.util.OnlyForTest;\n /**\n  * Raft nodes manager.\n  */\n+\n+\n public class NodeManager {\n+\n     private final ConcurrentMap<NodeId, Node> nodeMap = new ConcurrentHashMap<>();\n+\n+\n     private final ConcurrentMap<String, List<Node>> groupMap = new ConcurrentHashMap<>();\n \n     /**\n      * Adds a node.\n      */\n+\n+\n     public boolean add(final Node node) {\n         final NodeId nodeId = node.getNodeId();\n+\n         if (this.nodeMap.putIfAbsent(nodeId, node) == null) {\n             final String groupId = node.getGroupId();\n+\n             List<Node> nodes = this.groupMap.get(groupId);\n+\n             if (nodes == null) {\n                 nodes = new CopyOnWriteArrayList<>();\n+\n                 List<Node> existsNode = this.groupMap.putIfAbsent(groupId, nodes);\n+\n                 if (existsNode != null) {\n                     nodes = existsNode;\n                 }\n             }\n+\n             nodes.add(node);\n+\n             return true;\n         }\n+\n         return false;\n     }\n \n     /**\n      * Clear the states, for test\n      */\n-    @OnlyForTest\n-    public void clear() {\n+\n+\n+    @OnlyForTest public void clear() {\n         this.groupMap.clear();\n         this.nodeMap.clear();\n     }\n@@ -66,26 +82,32 @@ public class NodeManager {\n     /**\n      * Remove a node.\n      */\n+\n     public boolean remove(final Node node) {\n         if (this.nodeMap.remove(node.getNodeId(), node)) {\n             final List<Node> nodes = this.groupMap.get(node.getGroupId());\n+\n             if (nodes != null) {\n                 return nodes.remove(node);\n             }\n         }\n+\n         return false;\n     }\n \n     /**\n      * Get node by groupId and peer.\n      */\n+\n     public Node get(final String groupId, final PeerId peerId) {\n-        return this.nodeMap.get(new NodeId(groupId, peerId));\n+        return this.nodeMap.get(\n+            new NodeId(groupId, peerId));\n     }\n \n     /**\n      * Get all nodes in a raft group.\n      */\n+\n     public List<Node> getNodesByGroupId(final String groupId) {\n         return this.groupMap.get(groupId);\n     }\n@@ -93,7 +115,11 @@ public class NodeManager {\n     /**\n      * Get all nodes\n      */\n+\n     public List<Node> getAllNodes() {\n-        return this.groupMap.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n+        return this.groupMap.values()\n+                   .stream()\n+                   .flatMap(Collection::stream)\n+                   .collect(Collectors.toList());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/14/NodeManager.java\nindex c66f7359c72..bdf22c004ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/14/NodeManager.java\n@@ -31,6 +31,7 @@ import org.apache.ignite.raft.jraft.util.OnlyForTest;\n  */\n public class NodeManager {\n     private final ConcurrentMap<NodeId, Node> nodeMap = new ConcurrentHashMap<>();\n+\n     private final ConcurrentMap<String, List<Node>> groupMap = new ConcurrentHashMap<>();\n \n     /**\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/14/NodeManager.java\nindex c66f7359c72..bdf22c004ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/14/NodeManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/14/NodeManager.java\n@@ -31,6 +31,7 @@ import org.apache.ignite.raft.jraft.util.OnlyForTest;\n  */\n public class NodeManager {\n     private final ConcurrentMap<NodeId, Node> nodeMap = new ConcurrentHashMap<>();\n+\n     private final ConcurrentMap<String, List<Node>> groupMap = new ConcurrentHashMap<>();\n \n     /**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}