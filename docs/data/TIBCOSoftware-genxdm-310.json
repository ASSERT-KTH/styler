{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "310",
    "information": {
        "errors": [
            {
                "line": "14",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "implements MutationPerfTestConstants\n{\n\tprivate int m_depth;\n\tprivate int m_width;\n\tprivate MutableContext<N> m_mutablePcx;\n\tprivate MutableModel<N> m_mutableModel;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "15",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/310/TestDocumentCreationWithModel.java\nindex dec29183f21..a1c596f12cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/310/TestDocumentCreationWithModel.java\n@@ -11,7 +11,7 @@ import org.genxdm.mutable.NodeFactory;\n public class TestDocumentCreationWithModel <N,A> extends BaseBridgePerfTest<N,A>\r\n implements MutationPerfTestConstants\r\n {\r\n-\tprivate int m_depth;\r\n+private int m_depth;\r\n \tprivate int m_width;\r\n \tprivate MutableContext<N> m_mutablePcx;\r\n \tprivate MutableModel<N> m_mutableModel;\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "70",
                    "column": "70",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/310/TestDocumentCreationWithModel.java\nindex dec29183f21..58ef98bd212 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/310/TestDocumentCreationWithModel.java\n@@ -8,107 +8,116 @@ import org.genxdm.mutable.MutableContext;\n import org.genxdm.mutable.MutableModel;\r\n import org.genxdm.mutable.NodeFactory;\r\n \r\n-public class TestDocumentCreationWithModel <N,A> extends BaseBridgePerfTest<N,A>\r\n-implements MutationPerfTestConstants\r\n-{\r\n-\tprivate int m_depth;\r\n-\tprivate int m_width;\r\n-\tprivate MutableContext<N> m_mutablePcx;\r\n-\tprivate MutableModel<N> m_mutableModel;\r\n-\tprivate NodeFactory<N> m_nodeFactory;\r\n-\tprivate static final ArrayList<String> REQUIRED_FEATURES = new ArrayList<String>();\r\n-\tstatic\r\n-\t{\r\n-\t\tREQUIRED_FEATURES.add(Feature.MUTABILITY);\r\n-\t}\r\n-\t\r\n+public class TestDocumentCreationWithModel<N, A> extends BaseBridgePerfTest<N, A>\r\n+    implements MutationPerfTestConstants {\r\n+    private int m_depth;\r\n+\r\n+    private int m_width;\r\n+\r\n+    private MutableContext<N> m_mutablePcx;\r\n+\r\n+    private MutableModel<N> m_mutableModel;\r\n+\r\n+    private NodeFactory<N> m_nodeFactory;\r\n+\r\n+    private static final ArrayList<String> REQUIRED_FEATURES = new ArrayList<String>();\r\n+\r\n+    static {\r\n+        REQUIRED_FEATURES.add(Feature.MUTABILITY);\r\n+    }\r\n+\r\n     @Override\r\n-    public Iterable<String> getRequiredFeatures()\r\n-    {\r\n-    \treturn REQUIRED_FEATURES;\r\n+    public Iterable<String> getRequiredFeatures() {\r\n+        return REQUIRED_FEATURES;\r\n     }\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\tlong size = 1;\r\n-\t\tfor(int icnt = 1; icnt <= m_depth; icnt++)\r\n-\t\t{\r\n-\t\t\tsize += Math.pow(m_width, icnt);\r\n-\t\t}\r\n-\t\treturn \"Document creation via model: \" + size + \" elements\";\r\n-\t}\r\n-\t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\t{\r\n-\t\tsuper.initialSetup(props);\r\n-\t\tString depth = (String)props.get(DOC_CREATE_DEPTH_NAME);\r\n-\t\tif(depth == null)\r\n-\t\t\tm_depth = DOC_CREATE_DEPTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_depth = Integer.parseInt(depth);\r\n-\r\n-\t\tString width = (String)props.get(DOC_CREATE_WIDTH_NAME);\r\n-\t\tif(width == null)\r\n-\t\t\tm_width = DOC_CREATE_WIDTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_width = Integer.parseInt(width);\r\n-\t\tm_mutablePcx = getPcx().getMutableContext();\r\n-\t\tm_mutableModel = m_mutablePcx.getModel();\r\n-\t\tm_nodeFactory = m_mutablePcx.getNodeFactory();\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void iterativeSetup() {}\r\n-\t\r\n-\t@Override\r\n-\tpublic void execute() {\r\n+\r\n+    @Override\r\n+    public String getTestName() {\r\n+        long size = 1;\r\n+        for (int icnt = 1; icnt <= m_depth; icnt++) {\r\n+            size += Math.pow(m_width, icnt);\r\n+        }\r\n+        return \"Document creation via model: \" + size + \" elements\";\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialSetup(Map<String, Object> props) {\r\n+        super.initialSetup(props);\r\n+        String depth = (String) props.get(DOC_CREATE_DEPTH_NAME);\r\n+        if (depth == null) {\r\n+            m_depth = DOC_CREATE_DEPTH_DEFAULT;\r\n+        } else {\r\n+            m_depth = Integer.parseInt(depth);\r\n+        }\r\n+\r\n+        String width = (String) props.get(DOC_CREATE_WIDTH_NAME);\r\n+        if (width == null) {\r\n+            m_width = DOC_CREATE_WIDTH_DEFAULT;\r\n+        } else {\r\n+            m_width = Integer.parseInt(width);\r\n+        }\r\n+        m_mutablePcx = getPcx().getMutableContext();\r\n+        m_mutableModel = m_mutablePcx.getModel();\r\n+        m_nodeFactory = m_mutablePcx.getNodeFactory();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void iterativeSetup() {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void execute() {\r\n //System.out.println(\"depth x width = \" + m_depth + \" x \" + m_width);\t\t\r\n-\t\t/* // Create a new document. */\r\n-\t\tfinal N documentNode = m_nodeFactory.createDocument(null, null);\r\n-\r\n-\t\tfinal N documentElement = m_nodeFactory.createElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n-\r\n-\t\t// Append the document element to the documentNode.\r\n-\t\tm_mutableModel.appendChild(documentNode, documentElement);\r\n-\t\tappendChildren(documentElement, DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\r\n-\t}\r\n-\tprivate void appendChildren(N parent, String ns, String prefix, String childName, String[][] atts, String textValues[], int depth, int width)\r\n-\t{\r\n-\t\t// Add children\r\n-\t\tfor(int icnt = 0; icnt < width; icnt++)\r\n-\t\t{\r\n-\t\t\tfinal N childElement = m_nodeFactory.createElement(ns, childName, prefix);\r\n-\t\t\tm_mutableModel.appendChild(parent, childElement);\r\n-\t\t\tm_mutableModel.insertNamespace(childElement, DOC_CREATE_PREFIX, ns);\r\n-\t\t\t\r\n-\t\t\t// Add attributes\r\n-\t\t\tfor(String[] att : atts)\r\n-\t\t\t{\r\n-\t\t\t\tN attribute = m_nodeFactory.createAttribute(ns, att[0], prefix, att[1]);\r\n-\t\t\t\tm_mutableModel.insertAttribute(childElement, attribute);\r\n-\t\t\t}\r\n-\t\t\t// If not leaf node, add children\r\n-\t\t\tif(depth > 1)\r\n-\t\t\t{\r\n-\t\t\t\tappendChildren(childElement, ns, prefix, childName, atts, textValues, depth - 1, width);\r\n-\t\t\t}\r\n-\t\t\t// Else if leaf node, add text values\r\n-\t\t\telse\r\n-\t\t\t{\r\n-\t\t\t\tfor(String textValue : textValues)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tm_mutableModel.appendChild(childElement, m_nodeFactory.createText(textValue));\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n-\t\r\n-\t@Override\r\n-\tpublic void finalTeardown() {\r\n-\t\tsuper.finalTeardown();\r\n-\t\tm_mutableModel = null;\r\n-\t\tm_mutablePcx = null;\r\n-\t\tm_nodeFactory = null;\r\n-\t}\r\n-\t\r\n+        /* // Create a new document. */\r\n+        final N documentNode = m_nodeFactory.createDocument(null, null);\r\n+\r\n+        final N documentElement =\r\n+            m_nodeFactory.createElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n+\r\n+        // Append the document element to the documentNode.\r\n+        m_mutableModel.appendChild(documentNode, documentElement);\r\n+        appendChildren(documentElement, DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME,\r\n+            DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\r\n+    }\r\n+\r\n+    private void appendChildren(N parent, String ns, String prefix, String childName,\r\n+                                String[][] atts, String textValues[], int depth, int width) {\r\n+        // Add children\r\n+        for (int icnt = 0; icnt < width; icnt++) {\r\n+            final N childElement = m_nodeFactory.createElement(ns, childName, prefix);\r\n+            m_mutableModel.appendChild(parent, childElement);\r\n+            m_mutableModel.insertNamespace(childElement, DOC_CREATE_PREFIX, ns);\r\n+\r\n+            // Add attributes\r\n+            for (String[] att : atts) {\r\n+                N attribute = m_nodeFactory.createAttribute(ns, att[0], prefix, att[1]);\r\n+                m_mutableModel.insertAttribute(childElement, attribute);\r\n+            }\r\n+            // If not leaf node, add children\r\n+            if (depth > 1) {\r\n+                appendChildren(childElement, ns, prefix, childName, atts, textValues, depth - 1,\r\n+                    width);\r\n+            }\r\n+            // Else if leaf node, add text values\r\n+            else {\r\n+                for (String textValue : textValues) {\r\n+                    m_mutableModel.appendChild(childElement, m_nodeFactory.createText(textValue));\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public Iterable<String> iterativeTeardown() {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void finalTeardown() {\r\n+        super.finalTeardown();\r\n+        m_mutableModel = null;\r\n+        m_mutablePcx = null;\r\n+        m_nodeFactory = null;\r\n+    }\r\n+\r\n }\r\n",
            "diff_size": 110
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/310/TestDocumentCreationWithModel.java\nindex dec29183f21..ad0280ade49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/310/TestDocumentCreationWithModel.java\n@@ -1,114 +1,127 @@\n-package org.genxdm.samples.performance.bridges;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Map;\r\n-\r\n-import org.genxdm.Feature;\r\n-import org.genxdm.mutable.MutableContext;\r\n-import org.genxdm.mutable.MutableModel;\r\n-import org.genxdm.mutable.NodeFactory;\r\n-\r\n-public class TestDocumentCreationWithModel <N,A> extends BaseBridgePerfTest<N,A>\r\n-implements MutationPerfTestConstants\r\n-{\r\n-\tprivate int m_depth;\r\n-\tprivate int m_width;\r\n-\tprivate MutableContext<N> m_mutablePcx;\r\n-\tprivate MutableModel<N> m_mutableModel;\r\n-\tprivate NodeFactory<N> m_nodeFactory;\r\n-\tprivate static final ArrayList<String> REQUIRED_FEATURES = new ArrayList<String>();\r\n-\tstatic\r\n-\t{\r\n-\t\tREQUIRED_FEATURES.add(Feature.MUTABILITY);\r\n-\t}\r\n-\t\r\n-    @Override\r\n-    public Iterable<String> getRequiredFeatures()\r\n+package org.genxdm.samples.performance.bridges;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import org.genxdm.Feature;\n+import org.genxdm.mutable.MutableContext;\n+import org.genxdm.mutable.MutableModel;\n+import org.genxdm.mutable.NodeFactory;\n+\n+public class TestDocumentCreationWithModel<N, A>\n+    extends BaseBridgePerfTest<N, A>\n+    implements MutationPerfTestConstants\n+{\n+    private int m_depth;\n+    private int m_width;\n+    private MutableContext<N> m_mutablePcx;\n+    private MutableModel<N> m_mutableModel;\n+    private NodeFactory<N> m_nodeFactory;\n+    private static final ArrayList<String> REQUIRED_FEATURES = new ArrayList<String>();\n+\n+    static\n+    {\n+        REQUIRED_FEATURES.add(Feature.MUTABILITY);\n+    }\n+\n+    @Override\n+    public Iterable<String> getRequiredFeatures()\n+    {\n+        return REQUIRED_FEATURES;\n+    }\n+\n+    @Override\n+    public String getTestName()\n+    {\n+        long size = 1;\n+        for (int icnt = 1; icnt <= m_depth; icnt++)\n+        {\n+            size += Math.pow(m_width, icnt);\n+        }\n+        return \"Document creation via model: \" + size + \" elements\";\n+    }\n+\n+    @Override\n+    public void initialSetup(Map<String, Object> props)\n+    {\n+        super.initialSetup(props);\n+        String depth = (String)props.get(DOC_CREATE_DEPTH_NAME);\n+        if (depth == null)\n+            m_depth = DOC_CREATE_DEPTH_DEFAULT;\n+        else\n+            m_depth = Integer.parseInt(depth);\n+        String width = (String)props.get(DOC_CREATE_WIDTH_NAME);\n+        if (width == null)\n+            m_width = DOC_CREATE_WIDTH_DEFAULT;\n+        else\n+            m_width = Integer.parseInt(width);\n+        m_mutablePcx = getPcx().getMutableContext();\n+        m_mutableModel = m_mutablePcx.getModel();\n+        m_nodeFactory = m_mutablePcx.getNodeFactory();\n+    }\n+\n+    @Override\n+    public void iterativeSetup()\n+    {\n+\n+\n+    }\n+\n+    @Override\n+    public void execute()\n     {\r\n-    \treturn REQUIRED_FEATURES;\r\n-    }\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\tlong size = 1;\r\n-\t\tfor(int icnt = 1; icnt <= m_depth; icnt++)\r\n-\t\t{\r\n-\t\t\tsize += Math.pow(m_width, icnt);\r\n-\t\t}\r\n-\t\treturn \"Document creation via model: \" + size + \" elements\";\r\n-\t}\r\n-\t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\t{\r\n-\t\tsuper.initialSetup(props);\r\n-\t\tString depth = (String)props.get(DOC_CREATE_DEPTH_NAME);\r\n-\t\tif(depth == null)\r\n-\t\t\tm_depth = DOC_CREATE_DEPTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_depth = Integer.parseInt(depth);\r\n+//System.out.println(\"depth x width = \" + m_depth + \" x \" + m_width);       \r\n+        /* // Create a new document. */\n+        final N documentNode = m_nodeFactory.createDocument(null, null);\n+        final N documentElement = m_nodeFactory.createElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n \r\n-\t\tString width = (String)props.get(DOC_CREATE_WIDTH_NAME);\r\n-\t\tif(width == null)\r\n-\t\t\tm_width = DOC_CREATE_WIDTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_width = Integer.parseInt(width);\r\n-\t\tm_mutablePcx = getPcx().getMutableContext();\r\n-\t\tm_mutableModel = m_mutablePcx.getModel();\r\n-\t\tm_nodeFactory = m_mutablePcx.getNodeFactory();\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void iterativeSetup() {}\r\n-\t\r\n-\t@Override\r\n-\tpublic void execute() {\r\n-//System.out.println(\"depth x width = \" + m_depth + \" x \" + m_width);\t\t\r\n-\t\t/* // Create a new document. */\r\n-\t\tfinal N documentNode = m_nodeFactory.createDocument(null, null);\r\n-\r\n-\t\tfinal N documentElement = m_nodeFactory.createElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n-\r\n-\t\t// Append the document element to the documentNode.\r\n-\t\tm_mutableModel.appendChild(documentNode, documentElement);\r\n-\t\tappendChildren(documentElement, DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\r\n-\t}\r\n-\tprivate void appendChildren(N parent, String ns, String prefix, String childName, String[][] atts, String textValues[], int depth, int width)\r\n-\t{\r\n-\t\t// Add children\r\n-\t\tfor(int icnt = 0; icnt < width; icnt++)\r\n-\t\t{\r\n-\t\t\tfinal N childElement = m_nodeFactory.createElement(ns, childName, prefix);\r\n-\t\t\tm_mutableModel.appendChild(parent, childElement);\r\n-\t\t\tm_mutableModel.insertNamespace(childElement, DOC_CREATE_PREFIX, ns);\r\n-\t\t\t\r\n-\t\t\t// Add attributes\r\n-\t\t\tfor(String[] att : atts)\r\n-\t\t\t{\r\n-\t\t\t\tN attribute = m_nodeFactory.createAttribute(ns, att[0], prefix, att[1]);\r\n-\t\t\t\tm_mutableModel.insertAttribute(childElement, attribute);\r\n-\t\t\t}\r\n-\t\t\t// If not leaf node, add children\r\n-\t\t\tif(depth > 1)\r\n-\t\t\t{\r\n-\t\t\t\tappendChildren(childElement, ns, prefix, childName, atts, textValues, depth - 1, width);\r\n-\t\t\t}\r\n-\t\t\t// Else if leaf node, add text values\r\n-\t\t\telse\r\n-\t\t\t{\r\n-\t\t\t\tfor(String textValue : textValues)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tm_mutableModel.appendChild(childElement, m_nodeFactory.createText(textValue));\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n-\t\r\n-\t@Override\r\n-\tpublic void finalTeardown() {\r\n-\t\tsuper.finalTeardown();\r\n-\t\tm_mutableModel = null;\r\n-\t\tm_mutablePcx = null;\r\n-\t\tm_nodeFactory = null;\r\n-\t}\r\n-\t\r\n-}\r\n+        // Append the document element to the documentNode.\n+        m_mutableModel.appendChild(documentNode, documentElement);\n+        appendChildren(documentElement, DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\n+    }\n+\n+    private void appendChildren(N parent, String ns, String prefix, String childName, String[][] atts, String textValues[], int depth, int width)\n+    {\r\n+        // Add children\n+        for (int icnt = 0; icnt < width; icnt++)\n+        {\n+            final N childElement = m_nodeFactory.createElement(ns, childName, prefix);\n+            m_mutableModel.appendChild(parent, childElement);\n+            m_mutableModel.insertNamespace(childElement, DOC_CREATE_PREFIX, ns);\r\n+            \r\n+            // Add attributes\n+            for (String[] att : atts)\n+            {\n+                N attribute = m_nodeFactory.createAttribute(ns, att[0], prefix, att[1]);\n+                m_mutableModel.insertAttribute(childElement, attribute);\n+            }\r\n+            // If not leaf node, add children\n+            if (depth > 1)\n+            {\n+                appendChildren(childElement, ns, prefix, childName, atts, textValues, depth - 1, width);\n+            }\r\n+            // Else if leaf node, add text values\n+            else\n+            {\n+                for (String textValue : textValues)\n+                {\n+                    m_mutableModel.appendChild(childElement, m_nodeFactory.createText(textValue));\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Iterable<String> iterativeTeardown()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public void finalTeardown()\n+    {\n+        super.finalTeardown();\n+        m_mutableModel = null;\n+        m_mutablePcx = null;\n+        m_nodeFactory = null;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 156
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "15",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/310/TestDocumentCreationWithModel.java\nindex dec29183f21..a1c596f12cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/310/TestDocumentCreationWithModel.java\n@@ -11,7 +11,7 @@ import org.genxdm.mutable.NodeFactory;\n public class TestDocumentCreationWithModel <N,A> extends BaseBridgePerfTest<N,A>\r\n implements MutationPerfTestConstants\r\n {\r\n-\tprivate int m_depth;\r\n+private int m_depth;\r\n \tprivate int m_width;\r\n \tprivate MutableContext<N> m_mutablePcx;\r\n \tprivate MutableModel<N> m_mutableModel;\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "15",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/310/TestDocumentCreationWithModel.java\nindex dec29183f21..381e4163e99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/310/TestDocumentCreationWithModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/310/TestDocumentCreationWithModel.java\n@@ -11,7 +11,7 @@ import org.genxdm.mutable.NodeFactory;\n public class TestDocumentCreationWithModel <N,A> extends BaseBridgePerfTest<N,A>\r\n implements MutationPerfTestConstants\r\n {\r\n-\tprivate int m_depth;\r\n+    private int m_depth;\r\n \tprivate int m_width;\r\n \tprivate MutableContext<N> m_mutablePcx;\r\n \tprivate MutableModel<N> m_mutableModel;\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}