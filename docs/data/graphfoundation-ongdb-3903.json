{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3903",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3903/QueryRegistryOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3903/QueryRegistryOperations.java\nindex 6d40f51dfa1..01e5c6fc0a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3903/QueryRegistryOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3903/QueryRegistryOperations.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api;\n \n import java.util.Map;\n@@ -30,48 +31,49 @@ import org.neo4j.values.virtual.MapValue;\n /**\n  * Tracks currently running stream. This is used for listing currently running stream and to make it possible to\n  * terminate a query, not matter which or how many transactions it's working in.\n- *\n+ * <p>\n  * If a query uses multiple transactions (think of PERIODIC COMMIT), the query needs to be registered to all\n  * transactions it uses.\n  */\n public interface QueryRegistryOperations\n {\n-    /**\n-     * Sets the user defined meta data to be associated with started queries.\n-     * @param data the meta data\n-     */\n-    void setMetaData( Map<String,Object> data );\n+  /**\n+   * Sets the user defined meta data to be associated with started queries.\n+   *\n+   * @param data the meta data\n+   */\n+  void setMetaData(Map<String, Object> data);\n \n-    /**\n-     * Gets associated meta data.\n-     *\n-     * @return the meta data\n-     */\n-    Map<String,Object> getMetaData();\n+  /**\n+   * Gets associated meta data.\n+   *\n+   * @return the meta data\n+   */\n+  Map<String, Object> getMetaData();\n \n-    /**\n-     * List of all currently running stream in this transaction. An user can have multiple stream running\n-     * simultaneously on the same transaction.\n-     */\n-    Stream<ExecutingQuery> executingQueries();\n+  /**\n+   * List of all currently running stream in this transaction. An user can have multiple stream running\n+   * simultaneously on the same transaction.\n+   */\n+  Stream<ExecutingQuery> executingQueries();\n \n-    /**\n-     * Registers a query, and creates the ExecutingQuery object for it.\n-     */\n-    ExecutingQuery startQueryExecution(\n-        ClientConnectionInfo descriptor, String queryText, MapValue queryParameters\n-    );\n+  /**\n+   * Registers a query, and creates the ExecutingQuery object for it.\n+   */\n+  ExecutingQuery startQueryExecution(\n+      ClientConnectionInfo descriptor, String queryText, MapValue queryParameters\n+  );\n \n-    /**\n-     * Registers an already known query to a this transaction.\n-     *\n-     * This is used solely for supporting PERIODIC COMMIT which requires committing and starting new transactions\n-     * and associating the same ExecutingQuery with those new transactions.\n-     */\n-    void registerExecutingQuery( ExecutingQuery executingQuery );\n+  /**\n+   * Registers an already known query to a this transaction.\n+   * <p>\n+   * This is used solely for supporting PERIODIC COMMIT which requires committing and starting new transactions\n+   * and associating the same ExecutingQuery with those new transactions.\n+   */\n+  void registerExecutingQuery(ExecutingQuery executingQuery);\n \n-    /**\n-     * Disassociates a query with this transaction.\n-     */\n-    void unregisterExecutingQuery( ExecutingQuery executingQuery );\n+  /**\n+   * Disassociates a query with this transaction.\n+   */\n+  void unregisterExecutingQuery(ExecutingQuery executingQuery);\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3903/QueryRegistryOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3903/QueryRegistryOperations.java\nindex 6d40f51dfa1..4fc73e5acd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3903/QueryRegistryOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3903/QueryRegistryOperations.java\n@@ -26,7 +26,6 @@ import org.neo4j.kernel.api.query.ExecutingQuery;\n import org.neo4j.kernel.impl.query.clientconnection.ClientConnectionInfo;\n import org.neo4j.values.virtual.MapValue;\n \n-\n /**\n  * Tracks currently running stream. This is used for listing currently running stream and to make it possible to\n  * terminate a query, not matter which or how many transactions it's working in.\n@@ -58,9 +57,7 @@ public interface QueryRegistryOperations\n     /**\n      * Registers a query, and creates the ExecutingQuery object for it.\n      */\n-    ExecutingQuery startQueryExecution(\n-        ClientConnectionInfo descriptor, String queryText, MapValue queryParameters\n-    );\n+    ExecutingQuery startQueryExecution( ClientConnectionInfo descriptor, String queryText, MapValue queryParameters );\n \n     /**\n      * Registers an already known query to a this transaction.\n@@ -74,4 +71,4 @@ public interface QueryRegistryOperations\n      * Disassociates a query with this transaction.\n      */\n     void unregisterExecutingQuery( ExecutingQuery executingQuery );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}