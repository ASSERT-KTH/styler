{
    "project_name": "opencb-opencga",
    "error_id": "115",
    "information": {
        "errors": [
            {
                "line": "196",
                "column": "65",
                "severity": "error",
                "message": "',' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\n        return openCGAClient.getJobClient().groupBy(jobsCommandOptions.groupByCommandOptions.study,\n                jobsCommandOptions.groupByCommandOptions.fields,params);\n    }\n\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/115/JobCommandExecutor.java\nindex f87a8299864..3e795fc36cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/115/JobCommandExecutor.java\n@@ -193,7 +193,7 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(JobDBAdaptor.QueryParams.ATTRIBUTES.key(), jobsCommandOptions.groupByCommandOptions.attributes);\n \n         return openCGAClient.getJobClient().groupBy(jobsCommandOptions.groupByCommandOptions.study,\n-                jobsCommandOptions.groupByCommandOptions.fields,params);\n+                jobsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/115/JobCommandExecutor.java\nindex f87a8299864..6c80869ea65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/115/JobCommandExecutor.java\n@@ -40,174 +40,174 @@ import java.util.List;\n  */\n public class JobCommandExecutor extends OpencgaCommandExecutor {\n \n-    private JobCommandOptions jobsCommandOptions;\n-    private AclCommandExecutor<Job> aclCommandExecutor;\n-\n-    public JobCommandExecutor(JobCommandOptions jobsCommandOptions) {\n-        super(jobsCommandOptions.commonCommandOptions);\n-        this.jobsCommandOptions = jobsCommandOptions;\n-        this.aclCommandExecutor = new AclCommandExecutor<>();\n+  private JobCommandOptions jobsCommandOptions;\n+  private AclCommandExecutor<Job> aclCommandExecutor;\n+\n+  public JobCommandExecutor(JobCommandOptions jobsCommandOptions) {\n+    super(jobsCommandOptions.commonCommandOptions);\n+    this.jobsCommandOptions = jobsCommandOptions;\n+    this.aclCommandExecutor = new AclCommandExecutor<>();\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    logger.debug(\"Executing jobs command line\");\n+\n+    String subCommandString = getParsedSubCommand(jobsCommandOptions.jCommander);\n+    RestResponse queryResponse = null;\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"search\":\n+        queryResponse = search();\n+        break;\n+      case \"visit\":\n+        queryResponse = visit();\n+        break;\n+      case \"delete\":\n+        queryResponse = delete();\n+        break;\n+      case \"group-by\":\n+        queryResponse = groupBy();\n+        break;\n+      case \"acl\":\n+        queryResponse = aclCommandExecutor.acls(jobsCommandOptions.aclsCommandOptions, openCGAClient.getJobClient());\n+        break;\n+      case \"acl-update\":\n+        queryResponse = updateAcl();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n+    createOutput(queryResponse);\n+  }\n \n-    @Override\n-    public void execute() throws Exception {\n-        logger.debug(\"Executing jobs command line\");\n-\n-        String subCommandString = getParsedSubCommand(jobsCommandOptions.jCommander);\n-        RestResponse queryResponse = null;\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"search\":\n-                queryResponse = search();\n-                break;\n-            case \"visit\":\n-                queryResponse = visit();\n-                break;\n-            case \"delete\":\n-                queryResponse = delete();\n-                break;\n-            case \"group-by\":\n-                queryResponse = groupBy();\n-                break;\n-            case \"acl\":\n-                queryResponse = aclCommandExecutor.acls(jobsCommandOptions.aclsCommandOptions, openCGAClient.getJobClient());\n-                break;\n-            case \"acl-update\":\n-                queryResponse = updateAcl();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-        createOutput(queryResponse);\n-    }\n-\n-    private RestResponse<Job> create() throws ClientException, IOException {\n-        logger.debug(\"Creating a new job\");\n-\n-        String studyId = resolveStudy(jobsCommandOptions.createCommandOptions.study);\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.NAME.key(), jobsCommandOptions.createCommandOptions.name);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.TOOL_NAME.key(), jobsCommandOptions.createCommandOptions.toolName);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.DESCRIPTION.key(), jobsCommandOptions.createCommandOptions.description);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.EXECUTION.key(), jobsCommandOptions.createCommandOptions.execution);\n-        if (jobsCommandOptions.createCommandOptions.startTime > 0) {\n-            params.put(JobDBAdaptor.QueryParams.START_TIME.key(), jobsCommandOptions.createCommandOptions.startTime);\n-        }\n-        if (jobsCommandOptions.createCommandOptions.endTime > 0) {\n-            params.put(JobDBAdaptor.QueryParams.END_TIME.key(), jobsCommandOptions.createCommandOptions.endTime);\n-        }\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.COMMAND_LINE.key(), jobsCommandOptions.createCommandOptions.commandLine);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.OUT_DIR.key(), jobsCommandOptions.createCommandOptions.outDir);\n-        if (StringUtils.isNotEmpty(jobsCommandOptions.createCommandOptions.input)) {\n-            List<Long> list = new ArrayList<>();\n-            for (String aux : jobsCommandOptions.createCommandOptions.input.split(\",\")) {\n-                list.add(Long.parseLong(aux));\n-            }\n-            params.put(JobDBAdaptor.QueryParams.INPUT.key(), list);\n-        }\n-        if (StringUtils.isNotEmpty(jobsCommandOptions.createCommandOptions.output)) {\n-            List<Long> list = new ArrayList<>();\n-            for (String aux : jobsCommandOptions.createCommandOptions.output.split(\",\")) {\n-                list.add(Long.parseLong(aux));\n-            }\n-            params.put(JobDBAdaptor.QueryParams.OUTPUT.key(), list);\n-        }\n-\n-        return openCGAClient.getJobClient().create(studyId, params);\n-    }\n+  private RestResponse<Job> create() throws ClientException, IOException {\n+    logger.debug(\"Creating a new job\");\n \n-    private RestResponse<Job> info() throws CatalogException, IOException {\n-        logger.debug(\"Getting job information\");\n+    String studyId = resolveStudy(jobsCommandOptions.createCommandOptions.study);\n \n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.infoCommandOptions.study));\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, jobsCommandOptions.infoCommandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, jobsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n-        return openCGAClient.getJobClient().get(jobsCommandOptions.infoCommandOptions.job, params);\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.NAME.key(), jobsCommandOptions.createCommandOptions.name);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.TOOL_NAME.key(), jobsCommandOptions.createCommandOptions.toolName);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.DESCRIPTION.key(), jobsCommandOptions.createCommandOptions.description);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.EXECUTION.key(), jobsCommandOptions.createCommandOptions.execution);\n+    if (jobsCommandOptions.createCommandOptions.startTime > 0) {\n+      params.put(JobDBAdaptor.QueryParams.START_TIME.key(), jobsCommandOptions.createCommandOptions.startTime);\n     }\n-\n-    private RestResponse<Job> search() throws CatalogException, IOException {\n-        logger.debug(\"Searching job\");\n-\n-        Query query = new Query();\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.searchCommandOptions.study));\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.NAME.key(), jobsCommandOptions.searchCommandOptions.name);\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.TOOL_NAME.key(), jobsCommandOptions.searchCommandOptions.toolName);\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.STATUS_NAME.key(), jobsCommandOptions.searchCommandOptions.status);\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.USER_ID.key(), jobsCommandOptions.searchCommandOptions.ownerId);\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.CREATION_DATE.key(), jobsCommandOptions.searchCommandOptions.date);\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.INPUT.key(), jobsCommandOptions.searchCommandOptions.inputFiles);\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.OUTPUT.key(), jobsCommandOptions.searchCommandOptions.outputFiles);\n-        query.putAll(jobsCommandOptions.searchCommandOptions.commonOptions.params);\n-\n-        if (jobsCommandOptions.searchCommandOptions.numericOptions.count) {\n-            return openCGAClient.getJobClient().count(query);\n-        } else {\n-            QueryOptions queryOptions = new QueryOptions();\n-            queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, jobsCommandOptions.searchCommandOptions.dataModelOptions.include);\n-            queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, jobsCommandOptions.searchCommandOptions.dataModelOptions.exclude);\n-            queryOptions.put(QueryOptions.LIMIT, jobsCommandOptions.searchCommandOptions.numericOptions.limit);\n-            queryOptions.put(QueryOptions.SKIP, jobsCommandOptions.searchCommandOptions.numericOptions.skip);\n-\n-            return openCGAClient.getJobClient().search(query, queryOptions);\n-        }\n-    }\n-\n-    private RestResponse<Job> visit() throws CatalogException, IOException {\n-        logger.debug(\"Visiting a job\");\n-        Query query = new Query();\n-        query.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.visitCommandOptions.study));\n-        return openCGAClient.getJobClient().visit(jobsCommandOptions.visitCommandOptions.job, query);\n+    if (jobsCommandOptions.createCommandOptions.endTime > 0) {\n+      params.put(JobDBAdaptor.QueryParams.END_TIME.key(), jobsCommandOptions.createCommandOptions.endTime);\n     }\n-\n-    private RestResponse<Job> delete() throws CatalogException, IOException {\n-        logger.debug(\"Deleting job\");\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.deleteCommandOptions.study));\n-        params.put(\"deleteFiles\", jobsCommandOptions.deleteCommandOptions.deleteFiles);\n-        return openCGAClient.getJobClient().delete(jobsCommandOptions.deleteCommandOptions.job, params);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.COMMAND_LINE.key(), jobsCommandOptions.createCommandOptions.commandLine);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.OUT_DIR.key(), jobsCommandOptions.createCommandOptions.outDir);\n+    if (StringUtils.isNotEmpty(jobsCommandOptions.createCommandOptions.input)) {\n+      List<Long> list = new ArrayList<>();\n+      for (String aux : jobsCommandOptions.createCommandOptions.input.split(\",\")) {\n+        list.add(Long.parseLong(aux));\n+      }\n+      params.put(JobDBAdaptor.QueryParams.INPUT.key(), list);\n     }\n-\n-    private RestResponse<Job> groupBy() throws CatalogException, IOException {\n-        logger.debug(\"Group by job\");\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.groupByCommandOptions.study));\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.UID.key(), jobsCommandOptions.groupByCommandOptions.id);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.NAME.key(), jobsCommandOptions.groupByCommandOptions.name);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.OUT_DIR.key(), jobsCommandOptions.groupByCommandOptions.path);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.STATUS_NAME.key(), jobsCommandOptions.groupByCommandOptions.status);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.USER_ID.key(), jobsCommandOptions.groupByCommandOptions.ownerId);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.CREATION_DATE.key(), jobsCommandOptions.groupByCommandOptions.creationDate);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.DESCRIPTION.key(), jobsCommandOptions.groupByCommandOptions.description);\n-        params.putIfNotEmpty(JobDBAdaptor.QueryParams.ATTRIBUTES.key(), jobsCommandOptions.groupByCommandOptions.attributes);\n-\n-        return openCGAClient.getJobClient().groupBy(jobsCommandOptions.groupByCommandOptions.study,\n-                jobsCommandOptions.groupByCommandOptions.fields,params);\n+    if (StringUtils.isNotEmpty(jobsCommandOptions.createCommandOptions.output)) {\n+      List<Long> list = new ArrayList<>();\n+      for (String aux : jobsCommandOptions.createCommandOptions.output.split(\",\")) {\n+        list.add(Long.parseLong(aux));\n+      }\n+      params.put(JobDBAdaptor.QueryParams.OUTPUT.key(), list);\n     }\n \n-\n-    private RestResponse<ObjectMap> updateAcl() throws IOException, CatalogException {\n-        AclCommandOptions.AclsUpdateCommandOptions commandOptions = jobsCommandOptions.aclsUpdateCommandOptions;\n-\n-        ObjectMap queryParams = new ObjectMap();\n-\n-        ObjectMap bodyParams = new ObjectMap();\n-        bodyParams.putIfNotNull(\"permissions\", commandOptions.permissions);\n-        bodyParams.putIfNotNull(\"action\", commandOptions.action);\n-        bodyParams.putIfNotNull(\"job\", extractIdsFromListOrFile(commandOptions.id));\n-\n-        return openCGAClient.getJobClient().updateAcl(commandOptions.memberId, queryParams, bodyParams);\n+    return openCGAClient.getJobClient().create(studyId, params);\n+  }\n+\n+  private RestResponse<Job> info() throws CatalogException, IOException {\n+    logger.debug(\"Getting job information\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.infoCommandOptions.study));\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, jobsCommandOptions.infoCommandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, jobsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n+    return openCGAClient.getJobClient().get(jobsCommandOptions.infoCommandOptions.job, params);\n+  }\n+\n+  private RestResponse<Job> search() throws CatalogException, IOException {\n+    logger.debug(\"Searching job\");\n+\n+    Query query = new Query();\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.searchCommandOptions.study));\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.NAME.key(), jobsCommandOptions.searchCommandOptions.name);\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.TOOL_NAME.key(), jobsCommandOptions.searchCommandOptions.toolName);\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.STATUS_NAME.key(), jobsCommandOptions.searchCommandOptions.status);\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.USER_ID.key(), jobsCommandOptions.searchCommandOptions.ownerId);\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.CREATION_DATE.key(), jobsCommandOptions.searchCommandOptions.date);\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.INPUT.key(), jobsCommandOptions.searchCommandOptions.inputFiles);\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.OUTPUT.key(), jobsCommandOptions.searchCommandOptions.outputFiles);\n+    query.putAll(jobsCommandOptions.searchCommandOptions.commonOptions.params);\n+\n+    if (jobsCommandOptions.searchCommandOptions.numericOptions.count) {\n+      return openCGAClient.getJobClient().count(query);\n+    } else {\n+      QueryOptions queryOptions = new QueryOptions();\n+      queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, jobsCommandOptions.searchCommandOptions.dataModelOptions.include);\n+      queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, jobsCommandOptions.searchCommandOptions.dataModelOptions.exclude);\n+      queryOptions.put(QueryOptions.LIMIT, jobsCommandOptions.searchCommandOptions.numericOptions.limit);\n+      queryOptions.put(QueryOptions.SKIP, jobsCommandOptions.searchCommandOptions.numericOptions.skip);\n+\n+      return openCGAClient.getJobClient().search(query, queryOptions);\n     }\n+  }\n+\n+  private RestResponse<Job> visit() throws CatalogException, IOException {\n+    logger.debug(\"Visiting a job\");\n+    Query query = new Query();\n+    query.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.visitCommandOptions.study));\n+    return openCGAClient.getJobClient().visit(jobsCommandOptions.visitCommandOptions.job, query);\n+  }\n+\n+  private RestResponse<Job> delete() throws CatalogException, IOException {\n+    logger.debug(\"Deleting job\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.deleteCommandOptions.study));\n+    params.put(\"deleteFiles\", jobsCommandOptions.deleteCommandOptions.deleteFiles);\n+    return openCGAClient.getJobClient().delete(jobsCommandOptions.deleteCommandOptions.job, params);\n+  }\n+\n+  private RestResponse<Job> groupBy() throws CatalogException, IOException {\n+    logger.debug(\"Group by job\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STUDY.key(), resolveStudy(jobsCommandOptions.groupByCommandOptions.study));\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.UID.key(), jobsCommandOptions.groupByCommandOptions.id);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.NAME.key(), jobsCommandOptions.groupByCommandOptions.name);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.OUT_DIR.key(), jobsCommandOptions.groupByCommandOptions.path);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.STATUS_NAME.key(), jobsCommandOptions.groupByCommandOptions.status);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.USER_ID.key(), jobsCommandOptions.groupByCommandOptions.ownerId);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.CREATION_DATE.key(), jobsCommandOptions.groupByCommandOptions.creationDate);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.DESCRIPTION.key(), jobsCommandOptions.groupByCommandOptions.description);\n+    params.putIfNotEmpty(JobDBAdaptor.QueryParams.ATTRIBUTES.key(), jobsCommandOptions.groupByCommandOptions.attributes);\n+\n+    return openCGAClient.getJobClient().groupBy(jobsCommandOptions.groupByCommandOptions.study,\n+        jobsCommandOptions.groupByCommandOptions.fields, params);\n+  }\n+\n+\n+  private RestResponse<ObjectMap> updateAcl() throws IOException, CatalogException {\n+    AclCommandOptions.AclsUpdateCommandOptions commandOptions = jobsCommandOptions.aclsUpdateCommandOptions;\n+\n+    ObjectMap queryParams = new ObjectMap();\n+\n+    ObjectMap bodyParams = new ObjectMap();\n+    bodyParams.putIfNotNull(\"permissions\", commandOptions.permissions);\n+    bodyParams.putIfNotNull(\"action\", commandOptions.action);\n+    bodyParams.putIfNotNull(\"job\", extractIdsFromListOrFile(commandOptions.id));\n+\n+    return openCGAClient.getJobClient().updateAcl(commandOptions.memberId, queryParams, bodyParams);\n+  }\n \n }\n",
            "diff_size": 273
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/115/JobCommandExecutor.java\nindex f87a8299864..91ad454495b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/115/JobCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.main.executors.catalog;\n-\n-\n import org.apache.commons.lang3.StringUtils;\n import org.opencb.commons.datastore.core.ObjectMap;\n import org.opencb.commons.datastore.core.Query;\n@@ -193,7 +191,7 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(JobDBAdaptor.QueryParams.ATTRIBUTES.key(), jobsCommandOptions.groupByCommandOptions.attributes);\n \n         return openCGAClient.getJobClient().groupBy(jobsCommandOptions.groupByCommandOptions.study,\n-                jobsCommandOptions.groupByCommandOptions.fields,params);\n+                jobsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n \n@@ -210,4 +208,4 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getJobClient().updateAcl(commandOptions.memberId, queryParams, bodyParams);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/115/JobCommandExecutor.java\nindex f87a8299864..3e795fc36cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/115/JobCommandExecutor.java\n@@ -193,7 +193,7 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(JobDBAdaptor.QueryParams.ATTRIBUTES.key(), jobsCommandOptions.groupByCommandOptions.attributes);\n \n         return openCGAClient.getJobClient().groupBy(jobsCommandOptions.groupByCommandOptions.study,\n-                jobsCommandOptions.groupByCommandOptions.fields,params);\n+                jobsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/115/JobCommandExecutor.java\nindex f87a8299864..3e795fc36cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/115/JobCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/115/JobCommandExecutor.java\n@@ -193,7 +193,7 @@ public class JobCommandExecutor extends OpencgaCommandExecutor {\n         params.putIfNotEmpty(JobDBAdaptor.QueryParams.ATTRIBUTES.key(), jobsCommandOptions.groupByCommandOptions.attributes);\n \n         return openCGAClient.getJobClient().groupBy(jobsCommandOptions.groupByCommandOptions.study,\n-                jobsCommandOptions.groupByCommandOptions.fields,params);\n+                jobsCommandOptions.groupByCommandOptions.fields, params);\n     }\n \n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}