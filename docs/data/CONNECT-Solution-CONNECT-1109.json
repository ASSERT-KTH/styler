{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1109",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docsubmission.adapter.component.routing;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.docsubmission.adapter.component.XDRHelper;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1109/ConnectReference.java\nindex 2784637cd93..9e1eca6d0e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1109/ConnectReference.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.adapter.component.routing;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1109/ConnectReference.java\nindex 2784637cd93..a45d39df37b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1109/ConnectReference.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.adapter.component.routing;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -42,43 +43,42 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author dunnek\n  */\n public class ConnectReference implements XDRRouting {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnectReference.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(ConnectReference.class);\n \n-    @Override\n-    public RegistryResponseType provideAndRegisterDocumentSetB(ProvideAndRegisterDocumentSetRequestType request,\n-        AssertionType assertion) {\n-        LOG.info(\"Inside Connect Reference provideAndRegisterDocumentSetB()\");\n-        XDRHelper helper = new XDRHelper();\n+  @Override\n+  public RegistryResponseType provideAndRegisterDocumentSetB(ProvideAndRegisterDocumentSetRequestType request,\n+                                                             AssertionType assertion) {\n+    LOG.info(\"Inside Connect Reference provideAndRegisterDocumentSetB()\");\n+    XDRHelper helper = new XDRHelper();\n \n-        processRequest(request);\n+    processRequest(request);\n \n-        return helper.createPositiveAck();\n-    }\n+    return helper.createPositiveAck();\n+  }\n \n-    private void processRequest(ProvideAndRegisterDocumentSetRequestType request) {\n-        LargeFileUtils fileUtils = LargeFileUtils.getInstance();\n+  private void processRequest(ProvideAndRegisterDocumentSetRequestType request) {\n+    LargeFileUtils fileUtils = LargeFileUtils.getInstance();\n \n-        List<Document> docList = request.getDocument();\n-        for (Document doc : docList) {\n-            try {\n-                if (fileUtils.isParsePayloadAsFileLocationEnabled()) {\n-                    URI payloadURI = fileUtils.parseBase64DataAsUri(doc.getValue());\n-                    if (NullChecker.isNotNullish(payloadURI.toString())) {\n-                        LOG.debug(\"Successfully parsed payload URI from Base64\");\n-                    }\n-                } else {\n-                    LOG.debug(\"Closing request input streams\");\n-                    LargeFileUtils.getInstance().closeStreamWithoutException(\n-                        doc.getValue().getDataSource().getInputStream());\n-                }\n-            } catch (Exception ioe) {\n-                LOG.error(\"Failed to close input stream\", ioe);\n-            }\n+    List<Document> docList = request.getDocument();\n+    for (Document doc : docList) {\n+      try {\n+        if (fileUtils.isParsePayloadAsFileLocationEnabled()) {\n+          URI payloadURI = fileUtils.parseBase64DataAsUri(doc.getValue());\n+          if (NullChecker.isNotNullish(payloadURI.toString())) {\n+            LOG.debug(\"Successfully parsed payload URI from Base64\");\n+          }\n+        } else {\n+          LOG.debug(\"Closing request input streams\");\n+          LargeFileUtils.getInstance().closeStreamWithoutException(\n+              doc.getValue().getDataSource().getInputStream());\n         }\n+      } catch (Exception ioe) {\n+        LOG.error(\"Failed to close input stream\", ioe);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1109/ConnectReference.java\nindex 2784637cd93..e460c93cc94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1109/ConnectReference.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.adapter.component.routing;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -52,7 +53,7 @@ public class ConnectReference implements XDRRouting {\n     @Override\n     public RegistryResponseType provideAndRegisterDocumentSetB(ProvideAndRegisterDocumentSetRequestType request,\n         AssertionType assertion) {\n-        LOG.info(\"Inside Connect Reference provideAndRegisterDocumentSetB()\");\n+    LOG.info(\"Inside Connect Reference provideAndRegisterDocumentSetB()\");\n         XDRHelper helper = new XDRHelper();\n \n         processRequest(request);\n@@ -73,12 +74,11 @@ public class ConnectReference implements XDRRouting {\n                     }\n                 } else {\n                     LOG.debug(\"Closing request input streams\");\n-                    LargeFileUtils.getInstance().closeStreamWithoutException(\n-                        doc.getValue().getDataSource().getInputStream());\n-                }\n+                    LargeFileUtils.getInstance().closeStreamWithoutException(doc.getValue().getDataSource().getInputStream());\n+    }\n             } catch (Exception ioe) {\n                 LOG.error(\"Failed to close input stream\", ioe);\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "column": "19",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1109/ConnectReference.java\nindex 2784637cd93..82b1844393f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1109/ConnectReference.java\n@@ -32,12 +32,9 @@ import gov.hhs.fha.nhinc.largefile.LargeFileUtils;\n import gov.hhs.fha.nhinc.nhinclib.NullChecker;\n import ihe.iti.xds_b._2007.ProvideAndRegisterDocumentSetRequestType;\n import ihe.iti.xds_b._2007.ProvideAndRegisterDocumentSetRequestType.Document;\n-\n import java.net.URI;\n import java.util.List;\n-\n import oasis.names.tc.ebxml_regrep.xsd.rs._3.RegistryResponseType;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,40 +42,42 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author dunnek\n  */\n+\n+\n public class ConnectReference implements XDRRouting {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConnectReference.class);\n \n+\n     @Override\n-    public RegistryResponseType provideAndRegisterDocumentSetB(ProvideAndRegisterDocumentSetRequestType request,\n-        AssertionType assertion) {\n+    public RegistryResponseType provideAndRegisterDocumentSetB(ProvideAndRegisterDocumentSetRequestType request, AssertionType assertion) {\n         LOG.info(\"Inside Connect Reference provideAndRegisterDocumentSetB()\");\n         XDRHelper helper = new XDRHelper();\n-\n         processRequest(request);\n-\n         return helper.createPositiveAck();\n     }\n \n     private void processRequest(ProvideAndRegisterDocumentSetRequestType request) {\n         LargeFileUtils fileUtils = LargeFileUtils.getInstance();\n-\n         List<Document> docList = request.getDocument();\n         for (Document doc : docList) {\n             try {\n-                if (fileUtils.isParsePayloadAsFileLocationEnabled()) {\n+                if(fileUtils.isParsePayloadAsFileLocationEnabled()) {\n                     URI payloadURI = fileUtils.parseBase64DataAsUri(doc.getValue());\n                     if (NullChecker.isNotNullish(payloadURI.toString())) {\n                         LOG.debug(\"Successfully parsed payload URI from Base64\");\n                     }\n-                } else {\n+                }\n+\n+\n+else {\n                     LOG.debug(\"Closing request input streams\");\n-                    LargeFileUtils.getInstance().closeStreamWithoutException(\n-                        doc.getValue().getDataSource().getInputStream());\n+                    LargeFileUtils.getInstance().closeStreamWithoutException(doc.getValue().getDataSource().getInputStream());\n                 }\n             } catch (Exception ioe) {\n                 LOG.error(\"Failed to close input stream\", ioe);\n             }\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1109/ConnectReference.java\nindex 2784637cd93..326572ec5df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1109/ConnectReference.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.docsubmission.adapter.component.routing;\n-\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n import gov.hhs.fha.nhinc.docsubmission.adapter.component.XDRHelper;\n import gov.hhs.fha.nhinc.largefile.LargeFileUtils;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1109/ConnectReference.java\nindex 2784637cd93..9e1eca6d0e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1109/ConnectReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1109/ConnectReference.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.adapter.component.routing;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}