{
    "project_name": "matsim-org-matsim-episim-libs",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "181",
                "severity": "error",
                "message": "Indent must use tab characters",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "\t */\n\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType,\n\t\t\t\t     EpisimContainer<?> container ) {\n\n\t\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n\t\t\tthrow new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler/11/AbstractInteractionModel.java\nindex ff415e0ff05..a6a25456478 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler/11/AbstractInteractionModel.java\n@@ -177,8 +177,7 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t/**\n \t * Sets the infection status of a person and reports the event.\n \t */\n-\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType,\n-\t\t\t\t     EpisimContainer<?> container ) {\n+\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType, EpisimContainer<?> container ) {\n \n \t\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n \t\t\tthrow new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "219",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "220",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "227",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "230",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "232",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "234",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "236",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "243",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/11/AbstractInteractionModel.java\nindex ff415e0ff05..82c70212356 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/11/AbstractInteractionModel.java\n@@ -18,6 +18,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  * #L%\n  */\n+\n package org.matsim.episim.model;\n \n import org.matsim.api.core.v01.Scenario;\n@@ -35,188 +36,220 @@ import java.util.SplittableRandom;\n  * Base implementation for interactions of persons during activities.\n  */\n public abstract class AbstractInteractionModel implements InteractionModel {\n-\tpublic static final String QUARANTINE_HOME = \"quarantine_home\";\n-\n-\tprotected final Scenario scenario = null;\n-\tprotected final SplittableRandom rnd;\n-\tprotected final EpisimConfigGroup episimConfig;\n-\tprotected final EpisimReporting reporting;\n-\n-\t/**\n-\t * Infections parameter instances for re-use. These are params that are always needed independent of the scenario.\n-\t */\n-\tprotected final EpisimPerson.Activity trParams;\n-\t/**\n-\t * Home quarantine infection param.\n-\t */\n-\tprotected final EpisimPerson.Activity qhParams;\n-\tprotected int iteration;\n-\n-\tprivate Map<String, Restriction> restrictions;\n-\n-\n-\tAbstractInteractionModel(SplittableRandom rnd, EpisimConfigGroup episimConfig, EpisimReporting reporting) {\n-\t\tthis.rnd = rnd;\n-\t\tthis.episimConfig = episimConfig;\n-\t\tthis.reporting = reporting;\n-\t\tthis.trParams = new EpisimPerson.Activity(\"tr\", episimConfig.selectInfectionParams(\"tr\"));\n-\t\tthis.qhParams = new EpisimPerson.Activity( QUARANTINE_HOME, episimConfig.selectInfectionParams( QUARANTINE_HOME ));\n-\t}\n-\n-\tprivate static boolean hasDiseaseStatusRelevantForInfectionDynamics(EpisimPerson personWrapper) {\n-\t\tswitch (personWrapper.getDiseaseStatus()) {\n-\t\t\tcase susceptible:\n-\t\t\tcase contagious:\n-\t\t\tcase showingSymptoms:\n-\t\t\t\treturn true;\n-\n-\t\t\tcase infectedButNotContagious:\n-\t\t\tcase recovered:\n-\t\t\tcase seriouslySick: // assume is in hospital\n-\t\t\tcase critical:\n-\t\t\tcase seriouslySickAfterCritical:\n-\t\t\t\treturn false;\n-\n-\t\t\tdefault:\n-\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + personWrapper.getDiseaseStatus());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * This method checks whether person1 and person2 have relevant disease status for infection dynamics.\n-\t * If not or if both have the same disease status, the return value is false.\n-\t */\n-\tstatic boolean personsCanInfectEachOther(EpisimPerson person1, EpisimPerson person2) {\n-\t\tif (person1.getDiseaseStatus() == person2.getDiseaseStatus()) return false;\n-\t\t// at least one of the persons must be susceptible\n-\t\tif (person1.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible && person2.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible)\n-\t\t\treturn false;\n-\t\treturn (hasDiseaseStatusRelevantForInfectionDynamics(person1) && hasDiseaseStatusRelevantForInfectionDynamics(person2));\n-\t}\n-\n-\tprivate boolean activityRelevantForInfectionDynamics(EpisimPerson person, EpisimContainer<?> container, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\t\tEpisimPerson.Activity act = person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n-\n-\t\t// Check if person is home quarantined\n-\t\tif (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.atHome && !act.actType.startsWith(\"home\"))\n-\t\t\treturn false;\n-\n-\n-\t\t// enforce max group sizes\n-\t\tRestriction r = restrictions.get(act.params.getContainerName());\n-\t\tif (r.getMaxGroupSize() != null && r.getMaxGroupSize() > -1 && container.getMaxGroupSize() > 0 &&\n-\t\t\t\tcontainer.getMaxGroupSize() > r.getMaxGroupSize())\n-\t\t\treturn false;\n-\n-\t\treturn actIsRelevant(act, restrictions, rnd);\n-\t}\n-\n-\tprivate boolean actIsRelevant(EpisimPerson.Activity act, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\n-\t\tRestriction r = restrictions.get(act.params.getContainerName());\n-\t\t// avoid use of rnd if outcome is known beforehand\n-\t\tif (r.getRemainingFraction() == 1)\n-\t\t\treturn true;\n-\t\tif (r.getRemainingFraction() == 0)\n-\t\t\treturn false;\n-\n-\t\treturn rnd.nextDouble() < r.getRemainingFraction();\n-\n-\t}\n-\n-\tprivate boolean tripRelevantForInfectionDynamics(EpisimPerson person, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\t\tEpisimPerson.Activity lastAct = null;\n-\t\tif (person.getCurrentPositionInTrajectory() != 0) {\n-\t\t\tlastAct = person.getTrajectory().get(person.getCurrentPositionInTrajectory() - 1);\n-\t\t}\n-\n-\t\tif (person.getQuarantineStatus() != EpisimPerson.QuarantineStatus.no)\n-\t\t\treturn false;\n-\n-\t\tEpisimPerson.Activity nextAct = person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n-\n-\t\t// last activity is only considered if present\n-\t\treturn actIsRelevant(trParams, restrictions, rnd) && actIsRelevant(nextAct, restrictions, rnd)\n-\t\t\t\t&& (lastAct == null || actIsRelevant(lastAct, restrictions, rnd));\n-\n-\t}\n-\n-\t/**\n-\t * Checks whether person is relevant for tracking or for infection dynamics.  Currently, \"relevant for infection dynamics\" is a subset of \"relevant for\n-\t * tracking\".  However, I am not sure if this will always be the case.  kai, apr'20\n-\t *\n-\t * @noinspection BooleanMethodIsAlwaysInverted\n-\t */\n-\tprotected final boolean personRelevantForTrackingOrInfectionDynamics(EpisimPerson person, EpisimContainer<?> container,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\n-\t\t// Infected but not contagious persons are considered additionally\n-\t\tif (!hasDiseaseStatusRelevantForInfectionDynamics(person) &&\n-\t\t\t\tperson.getDiseaseStatus() != EpisimPerson.DiseaseStatus.infectedButNotContagious)\n-\t\t\treturn false;\n-\n-\t\tif (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (container instanceof InfectionEventHandler.EpisimFacility && activityRelevantForInfectionDynamics(person, container, restrictions, rnd)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn container instanceof InfectionEventHandler.EpisimVehicle && tripRelevantForInfectionDynamics(person, restrictions, rnd);\n-\t}\n-\n-\t/**\n-\t * Set the iteration number and restrictions that are in place.\n-\t */\n-\t@Override\n-\tpublic void setRestrictionsForIteration(int iteration, Map<String, Restriction> restrictions) {\n-\t\tthis.iteration = iteration;\n-\t\tthis.restrictions = restrictions;\n-\t}\n-\n-\t/**\n-\t * Sets the infection status of a person and reports the event.\n-\t */\n-\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType,\n-\t\t\t\t     EpisimContainer<?> container ) {\n-\n-\t\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n-\t\t\tthrow new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());\n-\t\t}\n-\t\tif (infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.contagious && infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.showingSymptoms) {\n-\t\t\tthrow new IllegalStateException(\"Infector is not contagious. Status is=\" + infector.getDiseaseStatus());\n-\t\t}\n-\t\tif (personWrapper.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n-\t\t\tthrow new IllegalStateException(\"Person to be infected is in full quarantine.\");\n-\t\t}\n-\t\tif (infector.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n-\t\t\tthrow new IllegalStateException(\"Infector is in ful quarantine.\");\n-\t\t}\n-\t\tif (!personWrapper.getCurrentContainer().equals(infector.getCurrentContainer())) {\n-\t\t\tthrow new IllegalStateException(\"Person and infector are not in same container!\");\n-\t\t}\n-\n-\t\t// TODO: during iteration persons can get infected after 24h\n-\t\t// this can lead to strange effects / ordering of events, because it is assumed one iteration is one day\n-\t\t// now is overwritten to be at the end of day\n-\t\tif (now >= EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60, iteration)) {\n-\t\t\tnow = EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60 - 1, iteration);\n-\t\t}\n-\n-\t\treporting.reportInfection(personWrapper, infector, now, infectionType.toString(), container );\n-\t\tpersonWrapper.setDiseaseStatus(now, EpisimPerson.DiseaseStatus.infectedButNotContagious);\n-\n-\t\t// TODO: Currently not in use, is it still needed?\n-\t\t// Necessary for the otfvis visualization (although it is unfortunately not working).  kai, apr'20\n-\t\tif (scenario != null) {\n-\t\t\tfinal Person person = PopulationUtils.findPerson(personWrapper.getPersonId(), scenario);\n-\t\t\tif (person != null) {\n-\t\t\t\tperson.getAttributes().putAttribute(AgentSnapshotInfo.marker, true);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic Map<String, Restriction> getRestrictions() {\n-\t\treturn restrictions;\n-\t}\n+  public static final String QUARANTINE_HOME = \"quarantine_home\";\n+\n+  protected final Scenario scenario = null;\n+  protected final SplittableRandom rnd;\n+  protected final EpisimConfigGroup episimConfig;\n+  protected final EpisimReporting reporting;\n+\n+  /**\n+   * Infections parameter instances for re-use. These are params that are always needed independent of the scenario.\n+   */\n+  protected final EpisimPerson.Activity trParams;\n+  /**\n+   * Home quarantine infection param.\n+   */\n+  protected final EpisimPerson.Activity qhParams;\n+  protected int iteration;\n+\n+  private Map<String, Restriction> restrictions;\n+\n+\n+  AbstractInteractionModel(SplittableRandom rnd, EpisimConfigGroup episimConfig,\n+                           EpisimReporting reporting) {\n+    this.rnd = rnd;\n+    this.episimConfig = episimConfig;\n+    this.reporting = reporting;\n+    this.trParams = new EpisimPerson.Activity(\"tr\", episimConfig.selectInfectionParams(\"tr\"));\n+    this.qhParams = new EpisimPerson.Activity(QUARANTINE_HOME,\n+        episimConfig.selectInfectionParams(QUARANTINE_HOME));\n+  }\n+\n+  private static boolean hasDiseaseStatusRelevantForInfectionDynamics(EpisimPerson personWrapper) {\n+    switch (personWrapper.getDiseaseStatus()) {\n+      case susceptible:\n+      case contagious:\n+      case showingSymptoms:\n+        return true;\n+\n+      case infectedButNotContagious:\n+      case recovered:\n+      case seriouslySick: // assume is in hospital\n+      case critical:\n+      case seriouslySickAfterCritical:\n+        return false;\n+\n+      default:\n+        throw new IllegalStateException(\"Unexpected value: \" + personWrapper.getDiseaseStatus());\n+    }\n+  }\n+\n+  /**\n+   * This method checks whether person1 and person2 have relevant disease status for infection dynamics.\n+   * If not or if both have the same disease status, the return value is false.\n+   */\n+  static boolean personsCanInfectEachOther(EpisimPerson person1, EpisimPerson person2) {\n+    if (person1.getDiseaseStatus() == person2.getDiseaseStatus()) {\n+      return false;\n+    }\n+    // at least one of the persons must be susceptible\n+    if (person1.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible &&\n+        person2.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n+      return false;\n+    }\n+    return (hasDiseaseStatusRelevantForInfectionDynamics(person1) &&\n+        hasDiseaseStatusRelevantForInfectionDynamics(person2));\n+  }\n+\n+  private boolean activityRelevantForInfectionDynamics(EpisimPerson person,\n+                                                       EpisimContainer<?> container,\n+                                                       Map<String, Restriction> restrictions,\n+                                                       SplittableRandom rnd) {\n+    EpisimPerson.Activity act = person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n+\n+    // Check if person is home quarantined\n+    if (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.atHome &&\n+        !act.actType.startsWith(\"home\")) {\n+      return false;\n+    }\n+\n+\n+    // enforce max group sizes\n+    Restriction r = restrictions.get(act.params.getContainerName());\n+    if (r.getMaxGroupSize() != null && r.getMaxGroupSize() > -1 &&\n+        container.getMaxGroupSize() > 0 &&\n+        container.getMaxGroupSize() > r.getMaxGroupSize()) {\n+      return false;\n+    }\n+\n+    return actIsRelevant(act, restrictions, rnd);\n+  }\n+\n+  private boolean actIsRelevant(EpisimPerson.Activity act, Map<String, Restriction> restrictions,\n+                                SplittableRandom rnd) {\n+\n+    Restriction r = restrictions.get(act.params.getContainerName());\n+    // avoid use of rnd if outcome is known beforehand\n+    if (r.getRemainingFraction() == 1) {\n+      return true;\n+    }\n+    if (r.getRemainingFraction() == 0) {\n+      return false;\n+    }\n+\n+    return rnd.nextDouble() < r.getRemainingFraction();\n+\n+  }\n+\n+  private boolean tripRelevantForInfectionDynamics(EpisimPerson person,\n+                                                   Map<String, Restriction> restrictions,\n+                                                   SplittableRandom rnd) {\n+    EpisimPerson.Activity lastAct = null;\n+    if (person.getCurrentPositionInTrajectory() != 0) {\n+      lastAct = person.getTrajectory().get(person.getCurrentPositionInTrajectory() - 1);\n+    }\n+\n+    if (person.getQuarantineStatus() != EpisimPerson.QuarantineStatus.no) {\n+      return false;\n+    }\n+\n+    EpisimPerson.Activity nextAct =\n+        person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n+\n+    // last activity is only considered if present\n+    return actIsRelevant(trParams, restrictions, rnd) && actIsRelevant(nextAct, restrictions, rnd)\n+        && (lastAct == null || actIsRelevant(lastAct, restrictions, rnd));\n+\n+  }\n+\n+  /**\n+   * Checks whether person is relevant for tracking or for infection dynamics.  Currently, \"relevant for infection dynamics\" is a subset of \"relevant for\n+   * tracking\".  However, I am not sure if this will always be the case.  kai, apr'20\n+   *\n+   * @noinspection BooleanMethodIsAlwaysInverted\n+   */\n+  protected final boolean personRelevantForTrackingOrInfectionDynamics(EpisimPerson person,\n+                                                                       EpisimContainer<?> container,\n+                                                                       Map<String, Restriction> restrictions,\n+                                                                       SplittableRandom rnd) {\n+\n+    // Infected but not contagious persons are considered additionally\n+    if (!hasDiseaseStatusRelevantForInfectionDynamics(person) &&\n+        person.getDiseaseStatus() != EpisimPerson.DiseaseStatus.infectedButNotContagious) {\n+      return false;\n+    }\n+\n+    if (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n+      return false;\n+    }\n+\n+    if (container instanceof InfectionEventHandler.EpisimFacility &&\n+        activityRelevantForInfectionDynamics(person, container, restrictions, rnd)) {\n+      return true;\n+    }\n+    return container instanceof InfectionEventHandler.EpisimVehicle &&\n+        tripRelevantForInfectionDynamics(person, restrictions, rnd);\n+  }\n+\n+  /**\n+   * Set the iteration number and restrictions that are in place.\n+   */\n+  @Override\n+  public void setRestrictionsForIteration(int iteration, Map<String, Restriction> restrictions) {\n+    this.iteration = iteration;\n+    this.restrictions = restrictions;\n+  }\n+\n+  /**\n+   * Sets the infection status of a person and reports the event.\n+   */\n+  protected void infectPerson(EpisimPerson personWrapper, EpisimPerson infector, double now,\n+                              StringBuilder infectionType,\n+                              EpisimContainer<?> container) {\n+\n+    if (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n+      throw new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" +\n+          personWrapper.getDiseaseStatus());\n+    }\n+    if (infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.contagious &&\n+        infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.showingSymptoms) {\n+      throw new IllegalStateException(\n+          \"Infector is not contagious. Status is=\" + infector.getDiseaseStatus());\n+    }\n+    if (personWrapper.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n+      throw new IllegalStateException(\"Person to be infected is in full quarantine.\");\n+    }\n+    if (infector.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n+      throw new IllegalStateException(\"Infector is in ful quarantine.\");\n+    }\n+    if (!personWrapper.getCurrentContainer().equals(infector.getCurrentContainer())) {\n+      throw new IllegalStateException(\"Person and infector are not in same container!\");\n+    }\n+\n+    // TODO: during iteration persons can get infected after 24h\n+    // this can lead to strange effects / ordering of events, because it is assumed one iteration is one day\n+    // now is overwritten to be at the end of day\n+    if (now >=\n+        EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60, iteration)) {\n+      now =\n+          EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60 - 1, iteration);\n+    }\n+\n+    reporting.reportInfection(personWrapper, infector, now, infectionType.toString(), container);\n+    personWrapper.setDiseaseStatus(now, EpisimPerson.DiseaseStatus.infectedButNotContagious);\n+\n+    // TODO: Currently not in use, is it still needed?\n+    // Necessary for the otfvis visualization (although it is unfortunately not working).  kai, apr'20\n+    if (scenario != null) {\n+      final Person person = PopulationUtils.findPerson(personWrapper.getPersonId(), scenario);\n+      if (person != null) {\n+        person.getAttributes().putAttribute(AgentSnapshotInfo.marker, true);\n+      }\n+    }\n+  }\n+\n+  public Map<String, Restriction> getRestrictions() {\n+    return restrictions;\n+  }\n }\n",
            "diff_size": 217
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/11/AbstractInteractionModel.java\nindex ff415e0ff05..e529780e044 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/11/AbstractInteractionModel.java\n@@ -60,7 +60,7 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t\tthis.episimConfig = episimConfig;\n \t\tthis.reporting = reporting;\n \t\tthis.trParams = new EpisimPerson.Activity(\"tr\", episimConfig.selectInfectionParams(\"tr\"));\n-\t\tthis.qhParams = new EpisimPerson.Activity( QUARANTINE_HOME, episimConfig.selectInfectionParams( QUARANTINE_HOME ));\n+\t\tthis.qhParams = new EpisimPerson.Activity(QUARANTINE_HOME, episimConfig.selectInfectionParams(QUARANTINE_HOME));\n \t}\n \n \tprivate static boolean hasDiseaseStatusRelevantForInfectionDynamics(EpisimPerson personWrapper) {\n@@ -91,7 +91,7 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t\t// at least one of the persons must be susceptible\n \t\tif (person1.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible && person2.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible)\n \t\t\treturn false;\n-\t\treturn (hasDiseaseStatusRelevantForInfectionDynamics(person1) && hasDiseaseStatusRelevantForInfectionDynamics(person2));\n+return (hasDiseaseStatusRelevantForInfectionDynamics(person1) && hasDiseaseStatusRelevantForInfectionDynamics(person2));\n \t}\n \n \tprivate boolean activityRelevantForInfectionDynamics(EpisimPerson person, EpisimContainer<?> container, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n@@ -138,7 +138,6 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t\t// last activity is only considered if present\n \t\treturn actIsRelevant(trParams, restrictions, rnd) && actIsRelevant(nextAct, restrictions, rnd)\n \t\t\t\t&& (lastAct == null || actIsRelevant(lastAct, restrictions, rnd));\n-\n \t}\n \n \t/**\n@@ -147,10 +146,9 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t *\n \t * @noinspection BooleanMethodIsAlwaysInverted\n \t */\n-\tprotected final boolean personRelevantForTrackingOrInfectionDynamics(EpisimPerson person, EpisimContainer<?> container,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<String, Restriction> restrictions, SplittableRandom rnd) {\n+\tprotected final boolean personRelevantForTrackingOrInfectionDynamics(EpisimPerson person, EpisimContainer<?> container, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n \n-\t\t// Infected but not contagious persons are considered additionally\n+\t// Infected but not contagious persons are considered additionally\n \t\tif (!hasDiseaseStatusRelevantForInfectionDynamics(person) &&\n \t\t\t\tperson.getDiseaseStatus() != EpisimPerson.DiseaseStatus.infectedButNotContagious)\n \t\t\treturn false;\n@@ -177,10 +175,8 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t/**\n \t * Sets the infection status of a person and reports the event.\n \t */\n-\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType,\n-\t\t\t\t     EpisimContainer<?> container ) {\n-\n-\t\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n+\tprotected void infectPerson(EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType, EpisimContainer<?> container) {\n+\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n \t\t\tthrow new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());\n \t\t}\n \t\tif (infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.contagious && infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.showingSymptoms) {\n@@ -203,7 +199,7 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t\t\tnow = EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60 - 1, iteration);\n \t\t}\n \n-\t\treporting.reportInfection(personWrapper, infector, now, infectionType.toString(), container );\n+\t\treporting.reportInfection(personWrapper, infector, now, infectionType.toString(), container);\n \t\tpersonWrapper.setDiseaseStatus(now, EpisimPerson.DiseaseStatus.infectedButNotContagious);\n \n \t\t// TODO: Currently not in use, is it still needed?\n@@ -219,4 +215,4 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \tpublic Map<String, Restriction> getRestrictions() {\n \t\treturn restrictions;\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/11/AbstractInteractionModel.java\nindex ff415e0ff05..aebc9872e7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/11/AbstractInteractionModel.java\n@@ -26,7 +26,6 @@ import org.matsim.core.population.PopulationUtils;\n import org.matsim.episim.*;\n import org.matsim.episim.policy.Restriction;\n import org.matsim.vis.snapshotwriters.AgentSnapshotInfo;\n-\n import java.util.Map;\n import java.util.SplittableRandom;\n \n@@ -34,189 +33,191 @@ import java.util.SplittableRandom;\n /**\n  * Base implementation for interactions of persons during activities.\n  */\n+\n+\n public abstract class AbstractInteractionModel implements InteractionModel {\n-\tpublic static final String QUARANTINE_HOME = \"quarantine_home\";\n-\n-\tprotected final Scenario scenario = null;\n-\tprotected final SplittableRandom rnd;\n-\tprotected final EpisimConfigGroup episimConfig;\n-\tprotected final EpisimReporting reporting;\n-\n-\t/**\n-\t * Infections parameter instances for re-use. These are params that are always needed independent of the scenario.\n-\t */\n-\tprotected final EpisimPerson.Activity trParams;\n-\t/**\n-\t * Home quarantine infection param.\n-\t */\n-\tprotected final EpisimPerson.Activity qhParams;\n-\tprotected int iteration;\n-\n-\tprivate Map<String, Restriction> restrictions;\n-\n-\n-\tAbstractInteractionModel(SplittableRandom rnd, EpisimConfigGroup episimConfig, EpisimReporting reporting) {\n-\t\tthis.rnd = rnd;\n-\t\tthis.episimConfig = episimConfig;\n-\t\tthis.reporting = reporting;\n-\t\tthis.trParams = new EpisimPerson.Activity(\"tr\", episimConfig.selectInfectionParams(\"tr\"));\n-\t\tthis.qhParams = new EpisimPerson.Activity( QUARANTINE_HOME, episimConfig.selectInfectionParams( QUARANTINE_HOME ));\n-\t}\n-\n-\tprivate static boolean hasDiseaseStatusRelevantForInfectionDynamics(EpisimPerson personWrapper) {\n-\t\tswitch (personWrapper.getDiseaseStatus()) {\n-\t\t\tcase susceptible:\n-\t\t\tcase contagious:\n-\t\t\tcase showingSymptoms:\n-\t\t\t\treturn true;\n-\n-\t\t\tcase infectedButNotContagious:\n-\t\t\tcase recovered:\n-\t\t\tcase seriouslySick: // assume is in hospital\n-\t\t\tcase critical:\n-\t\t\tcase seriouslySickAfterCritical:\n-\t\t\t\treturn false;\n-\n-\t\t\tdefault:\n-\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + personWrapper.getDiseaseStatus());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * This method checks whether person1 and person2 have relevant disease status for infection dynamics.\n-\t * If not or if both have the same disease status, the return value is false.\n-\t */\n-\tstatic boolean personsCanInfectEachOther(EpisimPerson person1, EpisimPerson person2) {\n-\t\tif (person1.getDiseaseStatus() == person2.getDiseaseStatus()) return false;\n-\t\t// at least one of the persons must be susceptible\n-\t\tif (person1.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible && person2.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible)\n-\t\t\treturn false;\n-\t\treturn (hasDiseaseStatusRelevantForInfectionDynamics(person1) && hasDiseaseStatusRelevantForInfectionDynamics(person2));\n-\t}\n-\n-\tprivate boolean activityRelevantForInfectionDynamics(EpisimPerson person, EpisimContainer<?> container, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\t\tEpisimPerson.Activity act = person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n-\n-\t\t// Check if person is home quarantined\n-\t\tif (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.atHome && !act.actType.startsWith(\"home\"))\n-\t\t\treturn false;\n-\n-\n-\t\t// enforce max group sizes\n-\t\tRestriction r = restrictions.get(act.params.getContainerName());\n-\t\tif (r.getMaxGroupSize() != null && r.getMaxGroupSize() > -1 && container.getMaxGroupSize() > 0 &&\n-\t\t\t\tcontainer.getMaxGroupSize() > r.getMaxGroupSize())\n-\t\t\treturn false;\n-\n-\t\treturn actIsRelevant(act, restrictions, rnd);\n-\t}\n-\n-\tprivate boolean actIsRelevant(EpisimPerson.Activity act, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\n-\t\tRestriction r = restrictions.get(act.params.getContainerName());\n-\t\t// avoid use of rnd if outcome is known beforehand\n-\t\tif (r.getRemainingFraction() == 1)\n-\t\t\treturn true;\n-\t\tif (r.getRemainingFraction() == 0)\n-\t\t\treturn false;\n-\n-\t\treturn rnd.nextDouble() < r.getRemainingFraction();\n-\n-\t}\n-\n-\tprivate boolean tripRelevantForInfectionDynamics(EpisimPerson person, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\t\tEpisimPerson.Activity lastAct = null;\n-\t\tif (person.getCurrentPositionInTrajectory() != 0) {\n-\t\t\tlastAct = person.getTrajectory().get(person.getCurrentPositionInTrajectory() - 1);\n-\t\t}\n-\n-\t\tif (person.getQuarantineStatus() != EpisimPerson.QuarantineStatus.no)\n-\t\t\treturn false;\n-\n-\t\tEpisimPerson.Activity nextAct = person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n-\n-\t\t// last activity is only considered if present\n-\t\treturn actIsRelevant(trParams, restrictions, rnd) && actIsRelevant(nextAct, restrictions, rnd)\n-\t\t\t\t&& (lastAct == null || actIsRelevant(lastAct, restrictions, rnd));\n-\n-\t}\n-\n-\t/**\n-\t * Checks whether person is relevant for tracking or for infection dynamics.  Currently, \"relevant for infection dynamics\" is a subset of \"relevant for\n-\t * tracking\".  However, I am not sure if this will always be the case.  kai, apr'20\n-\t *\n-\t * @noinspection BooleanMethodIsAlwaysInverted\n-\t */\n-\tprotected final boolean personRelevantForTrackingOrInfectionDynamics(EpisimPerson person, EpisimContainer<?> container,\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<String, Restriction> restrictions, SplittableRandom rnd) {\n-\n-\t\t// Infected but not contagious persons are considered additionally\n-\t\tif (!hasDiseaseStatusRelevantForInfectionDynamics(person) &&\n-\t\t\t\tperson.getDiseaseStatus() != EpisimPerson.DiseaseStatus.infectedButNotContagious)\n-\t\t\treturn false;\n-\n-\t\tif (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (container instanceof InfectionEventHandler.EpisimFacility && activityRelevantForInfectionDynamics(person, container, restrictions, rnd)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn container instanceof InfectionEventHandler.EpisimVehicle && tripRelevantForInfectionDynamics(person, restrictions, rnd);\n-\t}\n-\n-\t/**\n-\t * Set the iteration number and restrictions that are in place.\n-\t */\n-\t@Override\n-\tpublic void setRestrictionsForIteration(int iteration, Map<String, Restriction> restrictions) {\n-\t\tthis.iteration = iteration;\n-\t\tthis.restrictions = restrictions;\n-\t}\n-\n-\t/**\n-\t * Sets the infection status of a person and reports the event.\n-\t */\n-\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType,\n-\t\t\t\t     EpisimContainer<?> container ) {\n-\n-\t\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n-\t\t\tthrow new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());\n-\t\t}\n-\t\tif (infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.contagious && infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.showingSymptoms) {\n-\t\t\tthrow new IllegalStateException(\"Infector is not contagious. Status is=\" + infector.getDiseaseStatus());\n-\t\t}\n-\t\tif (personWrapper.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n-\t\t\tthrow new IllegalStateException(\"Person to be infected is in full quarantine.\");\n-\t\t}\n-\t\tif (infector.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n-\t\t\tthrow new IllegalStateException(\"Infector is in ful quarantine.\");\n-\t\t}\n-\t\tif (!personWrapper.getCurrentContainer().equals(infector.getCurrentContainer())) {\n-\t\t\tthrow new IllegalStateException(\"Person and infector are not in same container!\");\n-\t\t}\n-\n-\t\t// TODO: during iteration persons can get infected after 24h\n-\t\t// this can lead to strange effects / ordering of events, because it is assumed one iteration is one day\n-\t\t// now is overwritten to be at the end of day\n-\t\tif (now >= EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60, iteration)) {\n-\t\t\tnow = EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60 - 1, iteration);\n-\t\t}\n-\n-\t\treporting.reportInfection(personWrapper, infector, now, infectionType.toString(), container );\n-\t\tpersonWrapper.setDiseaseStatus(now, EpisimPerson.DiseaseStatus.infectedButNotContagious);\n-\n-\t\t// TODO: Currently not in use, is it still needed?\n-\t\t// Necessary for the otfvis visualization (although it is unfortunately not working).  kai, apr'20\n-\t\tif (scenario != null) {\n-\t\t\tfinal Person person = PopulationUtils.findPerson(personWrapper.getPersonId(), scenario);\n-\t\t\tif (person != null) {\n-\t\t\t\tperson.getAttributes().putAttribute(AgentSnapshotInfo.marker, true);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic Map<String, Restriction> getRestrictions() {\n-\t\treturn restrictions;\n-\t}\n-}\n+\n+ public static final String QUARANTINE_HOME = \"quarantine_home\";\n+ protected final Scenario scenario = null;\n+ protected final SplittableRandom rnd;\n+ protected final EpisimConfigGroup episimConfig;\n+ protected final EpisimReporting reporting;\n+\n+ /**\n+  * Infections parameter instances for re-use. These are params that are always needed independent of the scenario.\n+  */\n+ protected final EpisimPerson.Activity trParams;\n+ /**\n+  * Home quarantine infection param.\n+  */\n+ protected final EpisimPerson.Activity qhParams;\n+ protected int iteration;\n+ private Map<String, Restriction> restrictions;\n+\n+ AbstractInteractionModel(SplittableRandom rnd, EpisimConfigGroup episimConfig, EpisimReporting reporting) {\n+  this.rnd = rnd;\n+  this.episimConfig = episimConfig;\n+  this.reporting = reporting;\n+  this.trParams = new EpisimPerson.Activity(\"tr\", episimConfig.selectInfectionParams(\"tr\"));\n+  this.qhParams = new EpisimPerson.Activity(QUARANTINE_HOME, episimConfig.selectInfectionParams(QUARANTINE_HOME));\n+ }\n+\n+ private static boolean hasDiseaseStatusRelevantForInfectionDynamics(EpisimPerson personWrapper) {\n+  switch (personWrapper.getDiseaseStatus()) {\n+   case susceptible:\n+   case contagious:\n+   case showingSymptoms:\n+    return true;\n+   case infectedButNotContagious:\n+   case recovered:\n+   case seriouslySick: // assume is in hospital\n+   case critical:\n+   case seriouslySickAfterCritical:\n+    return false;\n+   default:\n+    throw new IllegalStateException(\"Unexpected value: \" + personWrapper.getDiseaseStatus());\n+  }\n+ }\n+\n+ /**\n+  * This method checks whether person1 and person2 have relevant disease status for infection dynamics.\n+  * If not or if both have the same disease status, the return value is false.\n+  */\n+\n+ static boolean personsCanInfectEachOther(EpisimPerson person1, EpisimPerson person2) {\n+\n+  if (person1.getDiseaseStatus() == person2.getDiseaseStatus())\n+   return false;\n+  // at least one of the persons must be susceptible\n+  if (person1.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible && person2.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible)\n+   return false;\n+  return (hasDiseaseStatusRelevantForInfectionDynamics(person1) && hasDiseaseStatusRelevantForInfectionDynamics(person2));\n+ }\n+\n+ private boolean activityRelevantForInfectionDynamics(EpisimPerson person, EpisimContainer<?> container, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n+  EpisimPerson.Activity act = person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n+\n+  // Check if person is home quarantined\n+  if (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.atHome && !act.actType.startsWith(\"home\"))\n+   return false;\n+\n+\n+  // enforce max group sizes\n+\n+  Restriction r = restrictions.get(act.params.getContainerName());\n+  if (r.getMaxGroupSize() != null && r.getMaxGroupSize() > -1 && container.getMaxGroupSize() > 0 && container.getMaxGroupSize() > r.getMaxGroupSize())\n+   return false;\n+  return actIsRelevant(act, restrictions, rnd);\n+ }\n+\n+ private boolean actIsRelevant(EpisimPerson.Activity act, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n+  Restriction r = restrictions.get(act.params.getContainerName());\n+  // avoid use of rnd if outcome is known beforehand\n+  if (r.getRemainingFraction() == 1)\n+   return true;\n+  if (r.getRemainingFraction() == 0)\n+   return false;\n+  return rnd.nextDouble() < r.getRemainingFraction();\n+ }\n+\n+ private boolean tripRelevantForInfectionDynamics(EpisimPerson person, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n+  EpisimPerson.Activity lastAct = null;\n+  if (person.getCurrentPositionInTrajectory() != 0) {\n+   lastAct = person.getTrajectory().get(person.getCurrentPositionInTrajectory() - 1);\n+  }\n+\n+  if (person.getQuarantineStatus() != EpisimPerson.QuarantineStatus.no)\n+   return false;\n+\n+  EpisimPerson.Activity nextAct = person.getTrajectory().get(person.getCurrentPositionInTrajectory());\n+\n+  // last activity is only considered if present\n+  return actIsRelevant(trParams, restrictions, rnd) && actIsRelevant(nextAct, restrictions, rnd)\n+   && (lastAct == null || actIsRelevant(lastAct, restrictions, rnd));\n+ }\n+\n+ /**\n+  * Checks whether person is relevant for tracking or for infection dynamics.  Currently, \"relevant for infection dynamics\" is a subset of \"relevant for\n+  * tracking\".  However, I am not sure if this will always be the case.  kai, apr'20\n+  *\n+  * @noinspection BooleanMethodIsAlwaysInverted\n+  */\n+\n+ protected final boolean personRelevantForTrackingOrInfectionDynamics(EpisimPerson person, EpisimContainer<?> container, Map<String, Restriction> restrictions, SplittableRandom rnd) {\n+\n+  // Infected but not contagious persons are considered additionally\n+\n+  if (!hasDiseaseStatusRelevantForInfectionDynamics(person) && person.getDiseaseStatus() != EpisimPerson.DiseaseStatus.infectedButNotContagious)\n+   return false;\n+  if (person.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n+   return false;\n+  }\n+\n+  if (container instanceof InfectionEventHandler.EpisimFacility && activityRelevantForInfectionDynamics(person, container, restrictions, rnd)) {\n+   return true;\n+  }\n+  return container instanceof InfectionEventHandler.EpisimVehicle && tripRelevantForInfectionDynamics(person, restrictions, rnd);\n+ }\n+\n+ /**\n+  * Set the iteration number and restrictions that are in place.\n+  */\n+\n+ @Override\n+ public void setRestrictionsForIteration(int iteration, Map<String, Restriction> restrictions) {\n+  this.iteration = iteration;\n+  this.restrictions = restrictions;\n+ }\n+\n+ /**\n+  * Sets the infection status of a person and reports the event.\n+  */\n+\n+ protected void infectPerson(EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType, EpisimContainer<?> container) {\n+\n+  if (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n+   throw new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());\n+  }\n+\n+  if (infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.contagious && infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.showingSymptoms) {\n+   throw new IllegalStateException(\"Infector is not contagious. Status is=\" + infector.getDiseaseStatus());\n+  }\n+\n+  if (personWrapper.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n+   throw new IllegalStateException(\"Person to be infected is in full quarantine.\");\n+  }\n+\n+  if (infector.getQuarantineStatus() == EpisimPerson.QuarantineStatus.full) {\n+   throw new IllegalStateException(\"Infector is in ful quarantine.\");\n+  }\n+\n+  if (!personWrapper.getCurrentContainer().equals(infector.getCurrentContainer())) {\n+   throw new IllegalStateException(\"Person and infector are not in same container!\");\n+  }\n+\n+  // TODO: during iteration persons can get infected after 24h\n+  // this can lead to strange effects / ordering of events, because it is assumed one iteration is one day\n+  // now is overwritten to be at the end of day\n+\n+  if (now >= EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60, iteration)) {\n+   now = EpisimUtils.getCorrectedTime(episimConfig.getStartOffset(), 24 * 60 * 60 - 1, iteration);\n+  }\n+\n+  reporting.reportInfection(personWrapper, infector, now, infectionType.toString(), container);\n+  personWrapper.setDiseaseStatus(now, EpisimPerson.DiseaseStatus.infectedButNotContagious);\n+\n+  // TODO: Currently not in use, is it still needed?\n+  // Necessary for the otfvis visualization (although it is unfortunately not working).  kai, apr'20\n+  if (scenario != null) {\n+   final Person person = PopulationUtils.findPerson(personWrapper.getPersonId(), scenario);\n+   if (person != null) {\n+    person.getAttributes().putAttribute(AgentSnapshotInfo.marker, true);\n+   }\n+  }\n+ }\n+\n+\n+ public Map<String, Restriction> getRestrictions() {\n+  return restrictions;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 188
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_random/11/AbstractInteractionModel.java\nindex ff415e0ff05..3253c07edc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_random/11/AbstractInteractionModel.java\n@@ -177,10 +177,10 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t/**\n \t * Sets the infection status of a person and reports the event.\n \t */\n-\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType,\n-\t\t\t\t     EpisimContainer<?> container ) {\n+\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType, EpisimContainer\n+\t\t<?> container ) {\n \n-\t\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n+if (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n \t\t\tthrow new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());\n \t\t}\n \t\tif (infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.contagious && infector.getDiseaseStatus() != EpisimPerson.DiseaseStatus.showingSymptoms) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_three_grams/11/AbstractInteractionModel.java\nindex ff415e0ff05..a6a25456478 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/11/AbstractInteractionModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/styler_three_grams/11/AbstractInteractionModel.java\n@@ -177,8 +177,7 @@ public abstract class AbstractInteractionModel implements InteractionModel {\n \t/**\n \t * Sets the infection status of a person and reports the event.\n \t */\n-\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType,\n-\t\t\t\t     EpisimContainer<?> container ) {\n+\tprotected void infectPerson( EpisimPerson personWrapper, EpisimPerson infector, double now, StringBuilder infectionType, EpisimContainer<?> container ) {\n \n \t\tif (personWrapper.getDiseaseStatus() != EpisimPerson.DiseaseStatus.susceptible) {\n \t\t\tthrow new IllegalStateException(\"Person to be infected is not susceptible. Status is=\" + personWrapper.getDiseaseStatus());\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}