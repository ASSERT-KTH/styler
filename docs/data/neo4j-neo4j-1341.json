{
    "project_name": "neo4j-neo4j",
    "error_id": "1341",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1341/RecentQueryBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1341/RecentQueryBuffer.java\nindex f78d70e6ad7..23629679429 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1341/RecentQueryBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1341/RecentQueryBuffer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.collector;\n \n import java.util.function.Consumer;\n@@ -34,16 +35,16 @@ public class RecentQueryBuffer\n     private final RingRecentBuffer<TruncatedQuerySnapshot> queries;\n     private final MemoryTracker memoryTracker;\n \n-    private static final long SHALLOW_SIZE = HeapEstimator.shallowSizeOfInstance( RecentQueryBuffer.class ) +\n-                                             HeapEstimator.shallowSizeOfInstance( Consumer.class );\n+    private static final long SHALLOW_SIZE = HeapEstimator.shallowSizeOfInstance(RecentQueryBuffer.class) +\n+      HeapEstimator.shallowSizeOfInstance(Consumer.class);\n \n-    public RecentQueryBuffer( int maxRecentQueryCount, MemoryTracker memoryTracker )\n+    public RecentQueryBuffer(int maxRecentQueryCount, MemoryTracker memoryTracker)\n     {\n         this.memoryTracker = memoryTracker;\n         // Round down to the nearest power of 2\n-        int queryBufferSize = Integer.highestOneBit( maxRecentQueryCount );\n-        queries = new RingRecentBuffer<>( queryBufferSize, discarded -> memoryTracker.releaseHeap( discarded.estimatedHeap ) );\n-        memoryTracker.allocateHeap( queries.estimatedHeapUsage() + SHALLOW_SIZE );\n+        int queryBufferSize = Integer.highestOneBit(maxRecentQueryCount);\n+        queries = new RingRecentBuffer<>(queryBufferSize, discarded -> memoryTracker.releaseHeap(discarded.estimatedHeap));\n+        memoryTracker.allocateHeap(queries.estimatedHeapUsage() + SHALLOW_SIZE);\n     }\n \n     public long numSilentQueryDrops()\n@@ -54,38 +55,38 @@ public class RecentQueryBuffer\n     /**\n      * Produce a new query into the buffer.\n      */\n-    public void produce( TruncatedQuerySnapshot query )\n+    public void produce(TruncatedQuerySnapshot query)\n     {\n-        Preconditions.checkArgument( query.databaseId != null,\n-                                     \"Only queries targeting a specific database are expected in the recent query buffer.\" );\n+        Preconditions.checkArgument(query.databaseId != null,\n+          \"Only queries targeting a specific database are expected in the recent query buffer.\");\n \n-        memoryTracker.allocateHeap( query.estimatedHeap );\n-        queries.produce( query );\n+        memoryTracker.allocateHeap(query.estimatedHeap);\n+        queries.produce(query);\n     }\n \n     /**\n      * Clear all query meta data for the given database from this buffer.\n      */\n-    public void clear( NamedDatabaseId databaseId )\n+    public void clear(NamedDatabaseId databaseId)\n     {\n-        Preconditions.checkArgument( databaseId != null,\n-                                     \"Only queries targeting a specific database are expected in the recent query buffer, \" +\n-                                     \"clearing non-database queries will have no effect.\");\n+        Preconditions.checkArgument(databaseId != null,\n+          \"Only queries targeting a specific database are expected in the recent query buffer, \" +\n+            \"clearing non-database queries will have no effect.\");\n \n-        queries.clearIf( q -> databaseId.equals( q.databaseId ) );\n+        queries.clearIf(q -> databaseId.equals(q.databaseId));\n     }\n \n     /**\n      * Apply the consumer on each query in this buffer which targeted the given database.\n      */\n-    public void foreach( NamedDatabaseId databaseId, Consumer<TruncatedQuerySnapshot> consumer )\n+    public void foreach(NamedDatabaseId databaseId, Consumer<TruncatedQuerySnapshot> consumer)\n     {\n-        queries.foreach( q ->\n-                         {\n-                             if ( q.databaseId.equals( databaseId ) )\n-                             {\n-                                 consumer.accept( q );\n-                             }\n-                         } );\n+        queries.foreach(q ->\n+        {\n+            if (q.databaseId.equals(databaseId))\n+            {\n+                consumer.accept(q);\n+            }\n+        });\n     }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}