{
    "project_name": "decorators-squad-eo-yaml",
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "90",
                "column": "12",
                "severity": "error",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    private StringBuilder calculateComments(final YamlLines lines) {\n        final StringBuilder tmpComment = new StringBuilder();\n        for(final YamlLine line : lines) {\n            tmpComment\n                    .append(line.comment().trim())\n                    .append(System.lineSeparator());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/8/ReadComment.java\nindex 25cd74f843d..5feff9cf65c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/8/ReadComment.java\n@@ -87,7 +87,7 @@ final class ReadComment implements Comment {\n      */\n     private StringBuilder calculateComments(final YamlLines lines) {\n         final StringBuilder tmpComment = new StringBuilder();\n-        for(final YamlLine line : lines) {\n+        for (final YamlLine line : lines) {\n             tmpComment\n                     .append(line.comment().trim())\n                     .append(System.lineSeparator());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/8/ReadComment.java\nindex 25cd74f843d..994b618c143 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/8/ReadComment.java\n@@ -1,17 +1,17 @@\n /**\n  * Copyright (c) 2016-2020, Mihai Emil Andronache\n  * All rights reserved.\n- *\n+ * <p>\n  * Redistribution and use in source and binary forms, with or without\n- *  modification, are permitted provided that the following conditions are met:\n+ * modification, are permitted provided that the following conditions are met:\n  * Redistributions of source code must retain the above copyright notice, this\n- *  list of conditions and the following disclaimer.\n- *  Redistributions in binary form must reproduce the above copyright notice,\n- *  this list of conditions and the following disclaimer in the documentation\n- *  and/or other materials provided with the distribution.\n+ * list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n  * Neither the name of the copyright holder nor the names of its\n- *  contributors may be used to endorse or promote products derived from\n- *  this software without specific prior written permission.\n+ * contributors may be used to endorse or promote products derived from\n+ * this software without specific prior written permission.\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n@@ -25,6 +25,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n package com.amihaiemil.eoyaml;\n \n import java.util.Iterator;\n@@ -33,7 +34,7 @@ import java.util.Iterator;\n  * A comment which has been read from somewhere.\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id: f8977c5bd1fdadbc1b5c5244854f849c30249740 $\n- * @since  4.2.0\n+ * @since 4.2.0\n  */\n final class ReadComment implements Comment {\n \n@@ -87,10 +88,10 @@ final class ReadComment implements Comment {\n      */\n     private StringBuilder calculateComments(final YamlLines lines) {\n         final StringBuilder tmpComment = new StringBuilder();\n-        for(final YamlLine line : lines) {\n+        for (final YamlLine line : lines) {\n             tmpComment\n-                    .append(line.comment().trim())\n-                    .append(System.lineSeparator());\n+                .append(line.comment().trim())\n+                .append(System.lineSeparator());\n         }\n         return tmpComment;\n     }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 60.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "'for rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/8/ReadComment.java\nindex 25cd74f843d..62b971983a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/8/ReadComment.java\n@@ -52,8 +52,7 @@ final class ReadComment implements Comment {\n      */\n     private final String comment;\n \n-\n-    /**\n+/**\n      * Constructor.\n      * @param lines Lines of this comment.\n      * @param node Node to which it refers.\n@@ -88,10 +87,9 @@ final class ReadComment implements Comment {\n     private StringBuilder calculateComments(final YamlLines lines) {\n         final StringBuilder tmpComment = new StringBuilder();\n         for(final YamlLine line : lines) {\n-            tmpComment\n-                    .append(line.comment().trim())\n+            tmpComment.append(line.comment().trim())\n                     .append(System.lineSeparator());\n-        }\n+    }\n         return tmpComment;\n     }\n \n@@ -109,4 +107,4 @@ final class ReadComment implements Comment {\n         }\n         return tmpLineNumber;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/8/ReadComment.java\nindex 25cd74f843d..588bcecd53e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/8/ReadComment.java\n@@ -35,21 +35,29 @@ import java.util.Iterator;\n  * @version $Id: f8977c5bd1fdadbc1b5c5244854f849c30249740 $\n  * @since  4.2.0\n  */\n+\n+\n final class ReadComment implements Comment {\n \n     /**\n      * Node to which this comment refers.\n      */\n+\n+\n     private final YamlNode node;\n \n     /**\n      * Calculated line number.\n      */\n+\n+\n     private final int lineNumber;\n \n     /**\n      * Calculated comment.\n      */\n+\n+\n     private final String comment;\n \n \n@@ -58,7 +66,10 @@ final class ReadComment implements Comment {\n      * @param lines Lines of this comment.\n      * @param node Node to which it refers.\n      */\n-    ReadComment(final YamlLines lines, final YamlNode node) {\n+\n+\n+    ReadComment(final YamlLines lines,\n+                final YamlNode node) {\n         this.node = node;\n         this.lineNumber = calculateLineNumber(lines);\n         this.comment = calculateComments(lines).toString().trim();\n@@ -85,12 +96,13 @@ final class ReadComment implements Comment {\n      * @param lines The lines to parse into comments.\n      * @return Comments.\n      */\n+\n     private StringBuilder calculateComments(final YamlLines lines) {\n         final StringBuilder tmpComment = new StringBuilder();\n-        for(final YamlLine line : lines) {\n-            tmpComment\n-                    .append(line.comment().trim())\n-                    .append(System.lineSeparator());\n+        for (final YamlLine line : lines) {\n+            tmpComment.append(\n+                                                                       line.comment().trim()\n+                                                                   ).append(System.lineSeparator());\n         }\n         return tmpComment;\n     }\n@@ -101,6 +113,7 @@ final class ReadComment implements Comment {\n      * @param lines The lines to parse.\n      * @return Line number.\n      */\n+\n     private int calculateLineNumber(final YamlLines lines) {\n         int tmpLineNumber = UNKNOWN_LINE_NUMBER;\n         Iterator<YamlLine> iterator = lines.iterator();\n@@ -109,4 +122,5 @@ final class ReadComment implements Comment {\n         }\n         return tmpLineNumber;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/8/ReadComment.java\nindex 25cd74f843d..5feff9cf65c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/8/ReadComment.java\n@@ -87,7 +87,7 @@ final class ReadComment implements Comment {\n      */\n     private StringBuilder calculateComments(final YamlLines lines) {\n         final StringBuilder tmpComment = new StringBuilder();\n-        for(final YamlLine line : lines) {\n+        for (final YamlLine line : lines) {\n             tmpComment\n                     .append(line.comment().trim())\n                     .append(System.lineSeparator());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/8/ReadComment.java\nindex 25cd74f843d..5feff9cf65c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/8/ReadComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/8/ReadComment.java\n@@ -87,7 +87,7 @@ final class ReadComment implements Comment {\n      */\n     private StringBuilder calculateComments(final YamlLines lines) {\n         final StringBuilder tmpComment = new StringBuilder();\n-        for(final YamlLine line : lines) {\n+        for (final YamlLine line : lines) {\n             tmpComment\n                     .append(line.comment().trim())\n                     .append(System.lineSeparator());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}