{
    "project_name": "graphfoundation-ongdb",
    "error_id": "895",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/895/InstalledProtocolsProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/895/InstalledProtocolsProcedure.java\nindex 63e6defb6df..f4e3c82fc9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/895/InstalledProtocolsProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/895/InstalledProtocolsProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.discovery.procedures;\n \n import java.util.Comparator;\n@@ -42,69 +43,69 @@ import org.neo4j.kernel.api.proc.Context;\n \n public class InstalledProtocolsProcedure extends CallableProcedure.BasicProcedure\n {\n-    private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n+  private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n \n-    public static final String PROCEDURE_NAME = \"protocols\";\n+  public static final String PROCEDURE_NAME = \"protocols\";\n \n-    private final Supplier<Stream<Pair<AdvertisedSocketAddress,ProtocolStack>>> clientInstalledProtocols;\n-    private final Supplier<Stream<Pair<SocketAddress,ProtocolStack>>> serverInstalledProtocols;\n+  private final Supplier<Stream<Pair<AdvertisedSocketAddress, ProtocolStack>>> clientInstalledProtocols;\n+  private final Supplier<Stream<Pair<SocketAddress, ProtocolStack>>> serverInstalledProtocols;\n \n-    public InstalledProtocolsProcedure( Supplier<Stream<Pair<AdvertisedSocketAddress,ProtocolStack>>> clientInstalledProtocols,\n-            Supplier<Stream<Pair<SocketAddress,ProtocolStack>>> serverInstalledProtocols )\n-    {\n-        super( ProcedureSignature.procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) )\n-                .out( \"orientation\", Neo4jTypes.NTString )\n-                .out( \"remoteAddress\", Neo4jTypes.NTString )\n-                .out( \"applicationProtocol\", Neo4jTypes.NTString )\n-                .out( \"applicationProtocolVersion\", Neo4jTypes.NTInteger )\n-                .out( \"modifierProtocols\", Neo4jTypes.NTString )\n-                .description( \"Overview of installed protocols\" )\n-                .build() );\n-        this.clientInstalledProtocols = clientInstalledProtocols;\n-        this.serverInstalledProtocols = serverInstalledProtocols;\n-    }\n+  public InstalledProtocolsProcedure(Supplier<Stream<Pair<AdvertisedSocketAddress, ProtocolStack>>> clientInstalledProtocols,\n+                                     Supplier<Stream<Pair<SocketAddress, ProtocolStack>>> serverInstalledProtocols)\n+  {\n+    super(ProcedureSignature.procedureSignature(new QualifiedName(PROCEDURE_NAMESPACE, PROCEDURE_NAME))\n+        .out(\"orientation\", Neo4jTypes.NTString)\n+        .out(\"remoteAddress\", Neo4jTypes.NTString)\n+        .out(\"applicationProtocol\", Neo4jTypes.NTString)\n+        .out(\"applicationProtocolVersion\", Neo4jTypes.NTInteger)\n+        .out(\"modifierProtocols\", Neo4jTypes.NTString)\n+        .description(\"Overview of installed protocols\")\n+        .build());\n+    this.clientInstalledProtocols = clientInstalledProtocols;\n+    this.serverInstalledProtocols = serverInstalledProtocols;\n+  }\n \n-    @Override\n-    public RawIterator<Object[],ProcedureException> apply(\n-            Context ctx, Object[] input, ResourceTracker resourceTracker )\n-    {\n-        Stream<Object[]> outbound = toOutputRows( clientInstalledProtocols, ProtocolInstaller.Orientation.Client.OUTBOUND );\n+  @Override\n+  public RawIterator<Object[], ProcedureException> apply(\n+      Context ctx, Object[] input, ResourceTracker resourceTracker)\n+  {\n+    Stream<Object[]> outbound = toOutputRows(clientInstalledProtocols, ProtocolInstaller.Orientation.Client.OUTBOUND);\n \n-        Stream<Object[]> inbound = toOutputRows( serverInstalledProtocols, ProtocolInstaller.Orientation.Server.INBOUND );\n+    Stream<Object[]> inbound = toOutputRows(serverInstalledProtocols, ProtocolInstaller.Orientation.Server.INBOUND);\n \n-        return Iterators.asRawIterator( Stream.concat( outbound, inbound ) );\n-    }\n+    return Iterators.asRawIterator(Stream.concat(outbound, inbound));\n+  }\n \n-    private <T extends SocketAddress> Stream<Object[]> toOutputRows( Supplier<Stream<Pair<T,ProtocolStack>>> installedProtocols, String orientation )\n-    {\n-        Comparator<Pair<T,ProtocolStack>> connectionInfoComparator = Comparator.comparing( ( Pair<T,ProtocolStack> entry ) -> entry.first().getHostname() )\n-                .thenComparing( entry -> entry.first().getPort() );\n+  private <T extends SocketAddress> Stream<Object[]> toOutputRows(Supplier<Stream<Pair<T, ProtocolStack>>> installedProtocols, String orientation)\n+  {\n+    Comparator<Pair<T, ProtocolStack>> connectionInfoComparator = Comparator.comparing((Pair<T, ProtocolStack> entry) -> entry.first().getHostname())\n+        .thenComparing(entry -> entry.first().getPort());\n \n-        return installedProtocols.get()\n-                .sorted( connectionInfoComparator )\n-                .map( entry -> buildRow( entry, orientation ) );\n-    }\n+    return installedProtocols.get()\n+        .sorted(connectionInfoComparator)\n+        .map(entry -> buildRow(entry, orientation));\n+  }\n \n-    private <T extends SocketAddress> Object[] buildRow( Pair<T,ProtocolStack> connectionInfo, String orientation )\n-    {\n-        T socketAddress = connectionInfo.first();\n-        ProtocolStack protocolStack = connectionInfo.other();\n-        return new Object[]\n-                {\n-                    orientation,\n-                    socketAddress.toString(),\n-                    protocolStack.applicationProtocol().category(),\n-                    (long) protocolStack.applicationProtocol().implementation(),\n-                    modifierString( protocolStack )\n-                };\n-    }\n+  private <T extends SocketAddress> Object[] buildRow(Pair<T, ProtocolStack> connectionInfo, String orientation)\n+  {\n+    T socketAddress = connectionInfo.first();\n+    ProtocolStack protocolStack = connectionInfo.other();\n+    return new Object[]\n+        {\n+            orientation,\n+            socketAddress.toString(),\n+            protocolStack.applicationProtocol().category(),\n+            (long) protocolStack.applicationProtocol().implementation(),\n+            modifierString(protocolStack)\n+        };\n+  }\n \n-    private String modifierString( ProtocolStack protocolStack )\n-    {\n-        return protocolStack\n-                .modifierProtocols()\n-                .stream()\n-                .map( Protocol.ModifierProtocol::implementation )\n-                .collect( Collectors.joining( \",\", \"[\", \"]\") );\n-    }\n+  private String modifierString(ProtocolStack protocolStack)\n+  {\n+    return protocolStack\n+        .modifierProtocols()\n+        .stream()\n+        .map(Protocol.ModifierProtocol::implementation)\n+        .collect(Collectors.joining(\",\", \"[\", \"]\"));\n+  }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 414).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/895/InstalledProtocolsProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/895/InstalledProtocolsProcedure.java\nindex 63e6defb6df..c2dcf11e9f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/895/InstalledProtocolsProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/895/InstalledProtocolsProcedure.java\n@@ -45,43 +45,29 @@ public class InstalledProtocolsProcedure extends CallableProcedure.BasicProcedur\n     private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"cluster\"};\n \n     public static final String PROCEDURE_NAME = \"protocols\";\n-\n-    private final Supplier<Stream<Pair<AdvertisedSocketAddress,ProtocolStack>>> clientInstalledProtocols;\n+private final Supplier<Stream<Pair<AdvertisedSocketAddress,ProtocolStack>>> clientInstalledProtocols;\n     private final Supplier<Stream<Pair<SocketAddress,ProtocolStack>>> serverInstalledProtocols;\n \n-    public InstalledProtocolsProcedure( Supplier<Stream<Pair<AdvertisedSocketAddress,ProtocolStack>>> clientInstalledProtocols,\n-            Supplier<Stream<Pair<SocketAddress,ProtocolStack>>> serverInstalledProtocols )\n+    public InstalledProtocolsProcedure( Supplier<Stream<Pair<AdvertisedSocketAddress,ProtocolStack>>> clientInstalledProtocols, Supplier<Stream<Pair<SocketAddress,ProtocolStack>>> serverInstalledProtocols )\n     {\n-        super( ProcedureSignature.procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) )\n-                .out( \"orientation\", Neo4jTypes.NTString )\n-                .out( \"remoteAddress\", Neo4jTypes.NTString )\n-                .out( \"applicationProtocol\", Neo4jTypes.NTString )\n-                .out( \"applicationProtocolVersion\", Neo4jTypes.NTInteger )\n-                .out( \"modifierProtocols\", Neo4jTypes.NTString )\n-                .description( \"Overview of installed protocols\" )\n-                .build() );\n-        this.clientInstalledProtocols = clientInstalledProtocols;\n+        super( ProcedureSignature.procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) ).out( \"orientation\", Neo4jTypes.NTString ).out( \"remoteAddress\", Neo4jTypes.NTString ).out( \"applicationProtocol\", Neo4jTypes.NTString ).out( \"applicationProtocolVersion\", Neo4jTypes.NTInteger ).out( \"modifierProtocols\", Neo4jTypes.NTString ).description( \"Overview of installed protocols\" ).build() );\n+this.clientInstalledProtocols = clientInstalledProtocols;\n         this.serverInstalledProtocols = serverInstalledProtocols;\n     }\n \n     @Override\n-    public RawIterator<Object[],ProcedureException> apply(\n-            Context ctx, Object[] input, ResourceTracker resourceTracker )\n+    public RawIterator<Object[],ProcedureException> apply( Context ctx, Object[] input, ResourceTracker resourceTracker )\n     {\n         Stream<Object[]> outbound = toOutputRows( clientInstalledProtocols, ProtocolInstaller.Orientation.Client.OUTBOUND );\n \n         Stream<Object[]> inbound = toOutputRows( serverInstalledProtocols, ProtocolInstaller.Orientation.Server.INBOUND );\n-\n-        return Iterators.asRawIterator( Stream.concat( outbound, inbound ) );\n+return Iterators.asRawIterator( Stream.concat( outbound, inbound ) );\n     }\n \n     private <T extends SocketAddress> Stream<Object[]> toOutputRows( Supplier<Stream<Pair<T,ProtocolStack>>> installedProtocols, String orientation )\n     {\n-        Comparator<Pair<T,ProtocolStack>> connectionInfoComparator = Comparator.comparing( ( Pair<T,ProtocolStack> entry ) -> entry.first().getHostname() )\n-                .thenComparing( entry -> entry.first().getPort() );\n-\n-        return installedProtocols.get()\n-                .sorted( connectionInfoComparator )\n+        Comparator<Pair<T,ProtocolStack>> connectionInfoComparator = Comparator.comparing( ( Pair<T,ProtocolStack> entry ) -> entry.first().getHostname() ).thenComparing( entry -> entry.first().getPort() );\n+return installedProtocols.get().sorted( connectionInfoComparator )\n                 .map( entry -> buildRow( entry, orientation ) );\n     }\n \n@@ -89,11 +75,9 @@ public class InstalledProtocolsProcedure extends CallableProcedure.BasicProcedur\n     {\n         T socketAddress = connectionInfo.first();\n         ProtocolStack protocolStack = connectionInfo.other();\n-        return new Object[]\n-                {\n+        return new Object[]{\n                     orientation,\n-                    socketAddress.toString(),\n-                    protocolStack.applicationProtocol().category(),\n+                    socketAddress.toString(), protocolStack.applicationProtocol().category(),\n                     (long) protocolStack.applicationProtocol().implementation(),\n                     modifierString( protocolStack )\n                 };\n@@ -101,10 +85,6 @@ public class InstalledProtocolsProcedure extends CallableProcedure.BasicProcedur\n \n     private String modifierString( ProtocolStack protocolStack )\n     {\n-        return protocolStack\n-                .modifierProtocols()\n-                .stream()\n-                .map( Protocol.ModifierProtocol::implementation )\n-                .collect( Collectors.joining( \",\", \"[\", \"]\") );\n+        return protocolStack.modifierProtocols().stream().map( Protocol.ModifierProtocol::implementation ).collect( Collectors.joining( \",\", \"[\", \"]\" ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}