{
    "project_name": "wso2-attic-commons",
    "error_id": "32",
    "information": {
        "errors": [
            {
                "line": "56",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext) throws IOException, WebApplicationException {\n        final InputStream originalInputStream = readerInterceptorContext.getInputStream();\n        readerInterceptorContext.setInputStream(new InputStream() {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/32/ValidCharacterInterceptor.java\nindex ad7300cf8fc..a275fe560f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/32/ValidCharacterInterceptor.java\n@@ -53,8 +53,9 @@ import javax.ws.rs.ext.ReaderInterceptorContext;\n public class ValidCharacterInterceptor implements ReaderInterceptor {\r\n \r\n     @Override\r\n-    public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext) throws IOException, WebApplicationException {\r\n-        final InputStream originalInputStream = readerInterceptorContext.getInputStream();\r\n+    public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext)\r\n+                                       throws IOException, WebApplicationException {\r\n+         final InputStream originalInputStream = readerInterceptorContext.getInputStream();\r\n         readerInterceptorContext.setInputStream(new InputStream() {\r\n \r\n             @Override\r\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/32/ValidCharacterInterceptor.java\nindex ad7300cf8fc..565cf37b087 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/32/ValidCharacterInterceptor.java\n@@ -37,6 +37,7 @@\n  * only if the new code is made subject to such option by the copyright\r\n  * holder.\r\n  */\r\n+\r\n package org.glassfish.samples.rest.messageboard.interceptors;\r\n \r\n import java.io.IOException;\r\n@@ -48,31 +49,31 @@ import javax.ws.rs.ext.ReaderInterceptorContext;\n \r\n /**\r\n  * @author Miroslav Fuksa (miroslav.fuksa at oracle.com)\r\n- *\r\n  */\r\n public class ValidCharacterInterceptor implements ReaderInterceptor {\r\n \r\n-    @Override\r\n-    public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext) throws IOException, WebApplicationException {\r\n-        final InputStream originalInputStream = readerInterceptorContext.getInputStream();\r\n-        readerInterceptorContext.setInputStream(new InputStream() {\r\n+  @Override\r\n+  public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext)\r\n+    throws IOException, WebApplicationException {\r\n+    final InputStream originalInputStream = readerInterceptorContext.getInputStream();\r\n+    readerInterceptorContext.setInputStream(new InputStream() {\r\n \r\n-            @Override\r\n-            public int read() throws IOException {\r\n-                boolean isOk;\r\n-                int b;\r\n-                do {\r\n-                    b = originalInputStream.read();\r\n-                    isOk = b == -1 || Character.isLetterOrDigit(b) || Character.isWhitespace(b) || b == ((int) '.');\r\n-                } while (!isOk);\r\n+      @Override\r\n+      public int read() throws IOException {\r\n+        boolean isOk;\r\n+        int b;\r\n+        do {\r\n+          b = originalInputStream.read();\r\n+          isOk = b == -1 || Character.isLetterOrDigit(b) || Character.isWhitespace(b) || b == ((int) '.');\r\n+        } while (!isOk);\r\n \r\n-                return b;\r\n-            }\r\n-        });\r\n-        try {\r\n-            return readerInterceptorContext.proceed();\r\n-        } finally {\r\n-            readerInterceptorContext.setInputStream(originalInputStream);\r\n-        }\r\n+        return b;\r\n+      }\r\n+    });\r\n+    try {\r\n+      return readerInterceptorContext.proceed();\r\n+    } finally {\r\n+      readerInterceptorContext.setInputStream(originalInputStream);\r\n     }\r\n+  }\r\n }\r\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/32/ValidCharacterInterceptor.java\nindex ad7300cf8fc..4c79a9834c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/32/ValidCharacterInterceptor.java\n@@ -75,4 +75,4 @@ public class ValidCharacterInterceptor implements ReaderInterceptor {\n             readerInterceptorContext.setInputStream(originalInputStream);\r\n         }\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/32/ValidCharacterInterceptor.java\nindex ad7300cf8fc..a275fe560f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/32/ValidCharacterInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/32/ValidCharacterInterceptor.java\n@@ -53,8 +53,9 @@ import javax.ws.rs.ext.ReaderInterceptorContext;\n public class ValidCharacterInterceptor implements ReaderInterceptor {\r\n \r\n     @Override\r\n-    public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext) throws IOException, WebApplicationException {\r\n-        final InputStream originalInputStream = readerInterceptorContext.getInputStream();\r\n+    public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext)\r\n+                                       throws IOException, WebApplicationException {\r\n+         final InputStream originalInputStream = readerInterceptorContext.getInputStream();\r\n         readerInterceptorContext.setInputStream(new InputStream() {\r\n \r\n             @Override\r\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}