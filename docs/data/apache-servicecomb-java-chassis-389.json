{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "389",
    "information": {
        "errors": [
            {
                "line": "253",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    when(invocation.getLocalContext(LoadbalanceHandler.CONTEXT_KEY_SERVER_LIST)).thenReturn(allServers);\n    rule.setLoadBalancer(lb);\n    ServiceCombServer server = new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8890\", instance1));\n    Deencapsulation.setField(rule, \"lastServer\", server);\n\n    new MockUp<SessionStickinessRule>(rule) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "253",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/389/TestSessionSticknessRule.java\nindex ad392b62579..72c0d319b71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/389/TestSessionSticknessRule.java\n@@ -250,7 +250,8 @@ public class TestSessionSticknessRule {\n     LoadBalancer lb = new LoadBalancer(rule, \"mockedServer\");\n     when(invocation.getLocalContext(LoadbalanceHandler.CONTEXT_KEY_SERVER_LIST)).thenReturn(allServers);\n     rule.setLoadBalancer(lb);\n-    ServiceCombServer server = new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8890\", instance1));\n+    ServiceCombServer server =\n+        new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8890\", instance1));\n     Deencapsulation.setField(rule, \"lastServer\", server);\n \n     new MockUp<SessionStickinessRule>(rule) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "243",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/389/TestSessionSticknessRule.java\nindex ad392b62579..61e4d56f421 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/389/TestSessionSticknessRule.java\n@@ -59,9 +59,7 @@ public class TestSessionSticknessRule {\n     mockedServer.setReadyToServe(true);\n     List<ServiceCombServer> allServers = Arrays.asList(mockedServer);\n     rule.setLoadBalancer(mockedLb);\n-\n-\n-    Server s = rule.choose(allServers, invocation);\n+Server s = rule.choose(allServers, invocation);\n     Assert.assertEquals(s, mockedServer);\n \n     s = rule.choose(allServers, invocation);\n@@ -70,8 +68,7 @@ public class TestSessionSticknessRule {\n \n   @Test\n   public void testServerWithoutTimeoutAndWithThreshold() {\n-\n-    boolean status = true;\n+  boolean status = true;\n \n     SessionStickinessRule ss = new SessionStickinessRule();\n \n@@ -89,8 +86,7 @@ public class TestSessionSticknessRule {\n         return false;\n       }\n     };\n-\n-    new MockUp<SessionStickinessRule>() {\n+new MockUp<SessionStickinessRule>() {\n \n       @Mock\n       private boolean isErrorThresholdMet() {\n@@ -108,8 +104,7 @@ public class TestSessionSticknessRule {\n \n   @Test\n   public void testServerWithTimeout() {\n-\n-    boolean status = true;\n+  boolean status = true;\n \n     SessionStickinessRule ss = new SessionStickinessRule();\n \n@@ -139,8 +134,7 @@ public class TestSessionSticknessRule {\n \n   @Test\n   public void testServerWithoutTimeoutException() {\n-\n-    boolean status = true;\n+  boolean status = true;\n \n     SessionStickinessRule ss = new SessionStickinessRule();\n \n@@ -169,8 +163,7 @@ public class TestSessionSticknessRule {\n \n   @Test\n   public void testServerWithoutTimeoutAndThreshold() {\n-\n-    boolean status = true;\n+  boolean status = true;\n \n     SessionStickinessRule ss = new SessionStickinessRule();\n \n@@ -188,16 +181,14 @@ public class TestSessionSticknessRule {\n         return false;\n       }\n     };\n-\n-    new MockUp<SessionStickinessRule>() {\n+new MockUp<SessionStickinessRule>() {\n \n       @Mock\n       private boolean isErrorThresholdMet() {\n         return false;\n       }\n     };\n-\n-    new MockUp<SessionStickinessRule>() {\n+new MockUp<SessionStickinessRule>() {\n \n       @Mock\n       private boolean isLastServerExists(Server server) {\n@@ -215,8 +206,7 @@ public class TestSessionSticknessRule {\n \n   @Test\n   public void testServerWithActualServerObj() {\n-\n-    boolean status = true;\n+  boolean status = true;\n     SessionStickinessRule ss = new SessionStickinessRule();\n \n     Invocation invocation = mock(Invocation.class);\n@@ -267,4 +257,4 @@ public class TestSessionSticknessRule {\n     Server s = rule.choose(allServers, invocation);\n     Assert.assertEquals(mockedServer, s);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/389/TestSessionSticknessRule.java\nindex ad392b62579..49b6f75e02e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/389/TestSessionSticknessRule.java\n@@ -23,7 +23,6 @@ import static org.mockito.Mockito.when;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-\n import org.apache.servicecomb.core.Invocation;\n import org.apache.servicecomb.core.Transport;\n import org.apache.servicecomb.registry.api.registry.MicroserviceInstance;\n@@ -31,103 +30,83 @@ import org.apache.servicecomb.registry.cache.CacheEndpoint;\n import org.junit.Assert;\n import org.junit.Test;\n import org.mockito.Mockito;\n-\n import com.netflix.loadbalancer.LoadBalancerStats;\n import com.netflix.loadbalancer.Server;\n-\n import mockit.Deencapsulation;\n import mockit.Mock;\n import mockit.MockUp;\n \n public class TestSessionSticknessRule {\n-\n   @Test\n   public void testRuleFullOperation() {\n     SessionStickinessRule rule = new SessionStickinessRule();\n-\n     LoadBalancer mockedLb = mock(LoadBalancer.class);\n     Transport transport = mock(Transport.class);\n     MicroserviceInstance instance1 = new MicroserviceInstance();\n     instance1.setInstanceId(\"1234\");\n-    ServiceCombServer mockedServer =\n-        new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8889\", instance1));\n+\n+    ServiceCombServer mockedServer = new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8889\", instance1));\n     Invocation invocation = mock(Invocation.class);\n     LoadBalancerStats stats = mock(LoadBalancerStats.class);\n     Mockito.when(mockedLb.getLoadBalancerStats()).thenReturn(stats);\n     Deencapsulation.invoke(rule, \"chooseServerWhenTimeout\", Arrays.asList(mockedServer), invocation);\n     mockedServer.setAlive(true);\n     mockedServer.setReadyToServe(true);\n+\n     List<ServiceCombServer> allServers = Arrays.asList(mockedServer);\n     rule.setLoadBalancer(mockedLb);\n \n-\n     Server s = rule.choose(allServers, invocation);\n     Assert.assertEquals(s, mockedServer);\n-\n     s = rule.choose(allServers, invocation);\n     Assert.assertEquals(s, mockedServer);\n   }\n \n   @Test\n   public void testServerWithoutTimeoutAndWithThreshold() {\n-\n     boolean status = true;\n-\n     SessionStickinessRule ss = new SessionStickinessRule();\n-\n     Invocation invocation = mock(Invocation.class);\n     ServiceCombServer server = mock(ServiceCombServer.class);\n     List<ServiceCombServer> servers = new ArrayList<>();\n     servers.add(server);\n-\n     Deencapsulation.setField(ss, \"lastServer\", server);\n-\n     new MockUp<SessionStickinessRule>() {\n-\n       @Mock\n       private boolean isTimeOut() {\n         return false;\n       }\n     };\n-\n     new MockUp<SessionStickinessRule>() {\n-\n       @Mock\n       private boolean isErrorThresholdMet() {\n         return true;\n       }\n     };\n-\n     try {\n       ss.choose(servers, invocation);\n     } catch (Exception e) {\n       status = false;\n     }\n+\n     Assert.assertTrue(status);\n   }\n \n   @Test\n   public void testServerWithTimeout() {\n-\n     boolean status = true;\n-\n     SessionStickinessRule ss = new SessionStickinessRule();\n-\n     Invocation invocation = mock(Invocation.class);\n     ServiceCombServer server = mock(ServiceCombServer.class);\n     List<ServiceCombServer> servers = new ArrayList<>();\n     servers.add(server);\n-\n     Deencapsulation.setField(ss, \"lastServer\", server);\n-\n     new MockUp<SessionStickinessRule>() {\n-\n       @Mock\n       private boolean isTimeOut() {\n         return true;\n       }\n     };\n-\n     try {\n       ss.choose(servers, invocation);\n     } catch (Exception e) {\n@@ -139,120 +118,102 @@ public class TestSessionSticknessRule {\n \n   @Test\n   public void testServerWithoutTimeoutException() {\n-\n     boolean status = true;\n-\n     SessionStickinessRule ss = new SessionStickinessRule();\n-\n     Invocation invocation = mock(Invocation.class);\n     ServiceCombServer server = mock(ServiceCombServer.class);\n     List<ServiceCombServer> servers = new ArrayList<>();\n     servers.add(server);\n-\n     Deencapsulation.setField(ss, \"lastServer\", server);\n-\n     new MockUp<SessionStickinessRule>() {\n-\n       @Mock\n       private boolean isTimeOut() {\n         return false;\n       }\n     };\n-\n     try {\n       ss.choose(servers, invocation);\n     } catch (Exception e) {\n       status = false;\n     }\n+\n     Assert.assertFalse(status);\n   }\n \n   @Test\n   public void testServerWithoutTimeoutAndThreshold() {\n-\n     boolean status = true;\n-\n     SessionStickinessRule ss = new SessionStickinessRule();\n-\n     Invocation invocation = mock(Invocation.class);\n     ServiceCombServer server = mock(ServiceCombServer.class);\n     List<ServiceCombServer> servers = new ArrayList<>();\n     servers.add(server);\n-\n     Deencapsulation.setField(ss, \"lastServer\", server);\n-\n     new MockUp<SessionStickinessRule>() {\n-\n       @Mock\n       private boolean isTimeOut() {\n         return false;\n       }\n     };\n-\n     new MockUp<SessionStickinessRule>() {\n-\n       @Mock\n       private boolean isErrorThresholdMet() {\n         return false;\n       }\n     };\n-\n     new MockUp<SessionStickinessRule>() {\n-\n       @Mock\n       private boolean isLastServerExists(Server server) {\n         return true;\n       }\n     };\n-\n     try {\n       ss.choose(servers, invocation);\n     } catch (Exception e) {\n       status = false;\n     }\n+\n     Assert.assertTrue(status);\n   }\n \n   @Test\n   public void testServerWithActualServerObj() {\n-\n     boolean status = true;\n     SessionStickinessRule ss = new SessionStickinessRule();\n-\n     Invocation invocation = mock(Invocation.class);\n     ServiceCombServer server = mock(ServiceCombServer.class);\n     List<ServiceCombServer> servers = new ArrayList<>();\n     servers.add(server);\n-\n     Deencapsulation.setField(ss, \"lastServer\", server);\n     try {\n       ss.choose(servers, invocation);\n     } catch (Exception e) {\n       status = false;\n     }\n+\n     Assert.assertTrue(status);\n   }\n \n   @Test\n   public void testLastServerNotExist() {\n     SessionStickinessRule rule = new SessionStickinessRule();\n-\n     Transport transport = mock(Transport.class);\n     Invocation invocation = mock(Invocation.class);\n     MicroserviceInstance instance1 = new MicroserviceInstance();\n     instance1.setInstanceId(\"1234\");\n-    ServiceCombServer mockedServer =\n-        new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8890\", instance1));\n+\n+    ServiceCombServer mockedServer = new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8890\", instance1));\n     mockedServer.setAlive(true);\n     mockedServer.setReadyToServe(true);\n     mockedServer.setId(\"mockedServer\");\n+\n     List<ServiceCombServer> allServers = Arrays.asList(mockedServer);\n     LoadBalancer lb = new LoadBalancer(rule, \"mockedServer\");\n     when(invocation.getLocalContext(LoadbalanceHandler.CONTEXT_KEY_SERVER_LIST)).thenReturn(allServers);\n     rule.setLoadBalancer(lb);\n+\n     ServiceCombServer server = new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8890\", instance1));\n     Deencapsulation.setField(rule, \"lastServer\", server);\n-\n     new MockUp<SessionStickinessRule>(rule) {\n       @Mock\n       private boolean isTimeOut() {\n@@ -264,7 +225,8 @@ public class TestSessionSticknessRule {\n         return false;\n       }\n     };\n+\n     Server s = rule.choose(allServers, invocation);\n     Assert.assertEquals(mockedServer, s);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "253",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "254",
                    "column": "15",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "254",
                    "column": "67",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/389/TestSessionSticknessRule.java\nindex ad392b62579..1b63ae2e63c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/389/TestSessionSticknessRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/389/TestSessionSticknessRule.java\n@@ -250,8 +250,9 @@ public class TestSessionSticknessRule {\n     LoadBalancer lb = new LoadBalancer(rule, \"mockedServer\");\n     when(invocation.getLocalContext(LoadbalanceHandler.CONTEXT_KEY_SERVER_LIST)).thenReturn(allServers);\n     rule.setLoadBalancer(lb);\n-    ServiceCombServer server = new ServiceCombServer(null, transport, new CacheEndpoint(\"rest:127.0.0.1:8890\", instance1));\n-    Deencapsulation.setField(rule, \"lastServer\", server);\n+    ServiceCombServer server = newServiceCombServer(null,\n+    transport,newCacheEndpoint(\"rest:127.0.0.1:8890\", instance1));Deencapsulation\n+    .setField.setField(rule, \"lastServer\", server);\n \n     new MockUp<SessionStickinessRule>(rule) {\n       @Mock\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}