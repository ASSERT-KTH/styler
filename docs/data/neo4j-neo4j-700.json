{
    "project_name": "neo4j-neo4j",
    "error_id": "700",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/700/PageCacheArrayFactoryMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/700/PageCacheArrayFactoryMonitor.java\nindex 418539aa271..ecd5293903a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/700/PageCacheArrayFactoryMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/700/PageCacheArrayFactoryMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.cache;\n \n import java.util.concurrent.atomic.AtomicReference;\n@@ -33,16 +34,16 @@ public class PageCacheArrayFactoryMonitor implements NumberArrayFactory.Monitor\n     private final AtomicReference<String> failedFactoriesDescription = new AtomicReference<>();\n \n     @Override\n-    public void allocationSuccessful( long memory, NumberArrayFactory successfulFactory,\n-            Iterable<NumberArrayFactory.AllocationFailure> attemptedAllocationFailures )\n+    public void allocationSuccessful(long memory, NumberArrayFactory successfulFactory,\n+                                     Iterable<NumberArrayFactory.AllocationFailure> attemptedAllocationFailures)\n     {\n-        if ( successfulFactory instanceof PageCachedNumberArrayFactory )\n+        if (successfulFactory instanceof PageCachedNumberArrayFactory)\n         {\n-            StringBuilder builder = new StringBuilder( format(\n-                    \"Memory allocation of %s ended up in page cache, which may impact performance negatively\", bytesToString( memory ) ) );\n+            StringBuilder builder = new StringBuilder(format(\n+              \"Memory allocation of %s ended up in page cache, which may impact performance negatively\", bytesToString(memory)));\n             attemptedAllocationFailures.forEach(\n-                    failure -> builder.append( format( \"%n%s: %s\", failure.getFactory(), failure.getFailure() ) ) );\n-            failedFactoriesDescription.compareAndSet( null, builder.toString() );\n+              failure -> builder.append(format(\"%n%s: %s\", failure.getFactory(), failure.getFailure())));\n+            failedFactoriesDescription.compareAndSet(null, builder.toString());\n         }\n     }\n \n@@ -57,9 +58,9 @@ public class PageCacheArrayFactoryMonitor implements NumberArrayFactory.Monitor\n     public String pageCacheAllocationOrNull()\n     {\n         String failure = failedFactoriesDescription.get();\n-        if ( failure != null )\n+        if (failure != null)\n         {\n-            failedFactoriesDescription.compareAndSet( failure, null );\n+            failedFactoriesDescription.compareAndSet(failure, null);\n         }\n         return failure;\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/700/PageCacheArrayFactoryMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/700/PageCacheArrayFactoryMonitor.java\nindex 418539aa271..3f798e4679f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/700/PageCacheArrayFactoryMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/700/PageCacheArrayFactoryMonitor.java\n@@ -63,4 +63,4 @@ public class PageCacheArrayFactoryMonitor implements NumberArrayFactory.Monitor\n         }\n         return failure;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}