{
    "project_name": "graphfoundation-ongdb",
    "error_id": "115",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/115/CheckPointer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/115/CheckPointer.java\nindex c865b7b678b..b201c8837e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/115/CheckPointer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/115/CheckPointer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.io.IOException;\n@@ -28,45 +29,45 @@ import org.neo4j.kernel.impl.transaction.log.TransactionIdStore;\n  */\n public interface CheckPointer\n {\n-    /**\n-     * This method will verify that the conditions for triggering a check point hold and in such a case it will write\n-     * a check point in the transaction log.\n-     *\n-     * This method does NOT handle concurrency since there should be only one check point thread running.\n-     *\n-     * @param triggerInfo the info describing why check pointing has been triggered\n-     * pending approval of the threshold check\n-     * @return the transaction id used for the check pointing or -1 if check pointing wasn't needed\n-     * @throws IOException if writing the check point fails\n-     */\n-    long checkPointIfNeeded( TriggerInfo triggerInfo ) throws IOException;\n+  /**\n+   * This method will verify that the conditions for triggering a check point hold and in such a case it will write\n+   * a check point in the transaction log.\n+   * <p>\n+   * This method does NOT handle concurrency since there should be only one check point thread running.\n+   *\n+   * @param triggerInfo the info describing why check pointing has been triggered\n+   *                    pending approval of the threshold check\n+   * @return the transaction id used for the check pointing or -1 if check pointing wasn't needed\n+   * @throws IOException if writing the check point fails\n+   */\n+  long checkPointIfNeeded(TriggerInfo triggerInfo) throws IOException;\n \n-    /**\n-     * This method tries the write of a check point in the transaction log. If there is no running check pointing it\n-     * will check point otherwise it will wait for the running check pointing to complete.\n-     *\n-     * It is mostly used for testing purpose and to force a check point when shutting down the database.\n-     *\n-     * @param triggerInfo the info describing why check pointing has been triggered\n-     * @return the transaction id used for the check pointing\n-     * @throws IOException if writing the check point fails\n-     */\n-    long tryCheckPoint( TriggerInfo triggerInfo ) throws IOException;\n+  /**\n+   * This method tries the write of a check point in the transaction log. If there is no running check pointing it\n+   * will check point otherwise it will wait for the running check pointing to complete.\n+   * <p>\n+   * It is mostly used for testing purpose and to force a check point when shutting down the database.\n+   *\n+   * @param triggerInfo the info describing why check pointing has been triggered\n+   * @return the transaction id used for the check pointing\n+   * @throws IOException if writing the check point fails\n+   */\n+  long tryCheckPoint(TriggerInfo triggerInfo) throws IOException;\n \n-    /**\n-     * This method forces the write of a check point in the transaction log.\n-     *\n-     * It is mostly used for testing purpose and to force a check point when shutting down the database.\n-     *\n-     * @param triggerInfo the info describing why check pointing has been triggered\n-     * @return the transaction id used for the check pointing\n-     * @throws IOException if writing the check point fails\n-     */\n-    long forceCheckPoint( TriggerInfo triggerInfo ) throws IOException;\n+  /**\n+   * This method forces the write of a check point in the transaction log.\n+   * <p>\n+   * It is mostly used for testing purpose and to force a check point when shutting down the database.\n+   *\n+   * @param triggerInfo the info describing why check pointing has been triggered\n+   * @return the transaction id used for the check pointing\n+   * @throws IOException if writing the check point fails\n+   */\n+  long forceCheckPoint(TriggerInfo triggerInfo) throws IOException;\n \n-    /**\n-     * @return the transaction id which the last checkpoint was made it. If there's no checkpoint then\n-     * {@link TransactionIdStore#BASE_TX_ID} is returned.\n-     */\n-    long lastCheckPointedTransactionId();\n+  /**\n+   * @return the transaction id which the last checkpoint was made it. If there's no checkpoint then\n+   * {@link TransactionIdStore#BASE_TX_ID} is returned.\n+   */\n+  long lastCheckPointedTransactionId();\n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/115/CheckPointer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/115/CheckPointer.java\nindex c865b7b678b..cbbbce30a34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/115/CheckPointer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/115/CheckPointer.java\n@@ -69,4 +69,4 @@ public interface CheckPointer\n      * {@link TransactionIdStore#BASE_TX_ID} is returned.\n      */\n     long lastCheckPointedTransactionId();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}