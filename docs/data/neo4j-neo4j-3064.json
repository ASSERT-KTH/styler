{
    "project_name": "neo4j-neo4j",
    "error_id": "3064",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3064/TransactionEventListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3064/TransactionEventListener.java\nindex 82620d00e3b..8aa5bf9bb48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3064/TransactionEventListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3064/TransactionEventListener.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.event;\n \n import org.neo4j.annotations.api.PublicApi;\n@@ -71,25 +72,25 @@ public interface TransactionEventListener<T>\n     /**\n      * Invoked when a transaction that has changes accessible via {@link TransactionData}\n      * is about to be committed.\n-     *\n+     * <p>\n      * If this method throws an exception the transaction will be rolled back\n      * and a {@link TransactionFailureException} will be thrown from\n      * {@link Transaction#close()}.\n-     *\n+     * <p>\n      * The transaction is still open when this method is invoked, making it\n      * possible to perform mutating operations in this method. This is however\n      * highly discouraged since changes made in this method are not guaranteed to be\n      * visible by this or other {@link TransactionEventListener}s.\n      *\n-     * @param data the changes that will be committed in this transaction.\n-     * @param transaction ongoing transaction\n+     * @param data            the changes that will be committed in this transaction.\n+     * @param transaction     ongoing transaction\n      * @param databaseService underlying database service\n      * @return a state object (or <code>null</code>) that will be passed on to\n-     *         {@link #afterCommit(TransactionData, Object, GraphDatabaseService)} or\n-     *         {@link #afterRollback(TransactionData, Object, GraphDatabaseService)} of this object.\n+     * {@link #afterCommit(TransactionData, Object, GraphDatabaseService)} or\n+     * {@link #afterRollback(TransactionData, Object, GraphDatabaseService)} of this object.\n      * @throws Exception to indicate that the transaction should be rolled back.\n      */\n-    T beforeCommit( TransactionData data, Transaction transaction, GraphDatabaseService databaseService ) throws Exception;\n+    T beforeCommit(TransactionData data, Transaction transaction, GraphDatabaseService databaseService) throws Exception;\n \n     /**\n      * Invoked after the transaction has been committed successfully.\n@@ -98,12 +99,13 @@ public interface TransactionEventListener<T>\n      * At the point of calling this method the transaction have been closed\n      * and so accessing data outside that of what the {@link TransactionData}\n      * can provide will require a new transaction to be opened.\n-     *  @param data the changes that were committed in this transaction.\n-     * @param state the object returned by\n-     *            {@link #beforeCommit(TransactionData, Transaction, GraphDatabaseService)}.\n+     *\n+     * @param data            the changes that were committed in this transaction.\n+     * @param state           the object returned by\n+     *                        {@link #beforeCommit(TransactionData, Transaction, GraphDatabaseService)}.\n      * @param databaseService underlying database service\n      */\n-    void afterCommit( TransactionData data, T state, GraphDatabaseService databaseService );\n+    void afterCommit(TransactionData data, T state, GraphDatabaseService databaseService);\n \n     /**\n      * Invoked after the transaction has been rolled back if committing the\n@@ -113,11 +115,12 @@ public interface TransactionEventListener<T>\n      * At the point of calling this method the transaction have been closed\n      * and so accessing data outside that of what the {@link TransactionData}\n      * can provide will require a new transaction to be opened.\n-     *  @param data the changes that were attempted to be committed in this transaction.\n-     * @param state the object returned by {@link #beforeCommit(TransactionData, Transaction, GraphDatabaseService)}.\n-     * If this handler failed when executing {@link #beforeCommit(TransactionData, Transaction, GraphDatabaseService)} this\n-     * {@code state} will be {@code null}.\n+     *\n+     * @param data            the changes that were attempted to be committed in this transaction.\n+     * @param state           the object returned by {@link #beforeCommit(TransactionData, Transaction, GraphDatabaseService)}.\n+     *                        If this handler failed when executing {@link #beforeCommit(TransactionData, Transaction, GraphDatabaseService)} this\n+     *                        {@code state} will be {@code null}.\n      * @param databaseService underlying database service\n      */\n-    void afterRollback( TransactionData data, T state, GraphDatabaseService databaseService );\n+    void afterRollback(TransactionData data, T state, GraphDatabaseService databaseService);\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}