{
    "project_name": "neo4j-neo4j",
    "error_id": "2487",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2487/PropertyBasedSchemaRecordChangeTranslator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2487/PropertyBasedSchemaRecordChangeTranslator.java\nindex 3d642fe8fa6..669b5a60971 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2487/PropertyBasedSchemaRecordChangeTranslator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2487/PropertyBasedSchemaRecordChangeTranslator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import org.eclipse.collections.api.block.procedure.primitive.IntObjectProcedure;\n@@ -31,28 +32,28 @@ import org.neo4j.values.storable.Value;\n public abstract class PropertyBasedSchemaRecordChangeTranslator implements SchemaRecordChangeTranslator\n {\n     @Override\n-    public void createSchemaRule( TransactionRecordState recordState, SchemaRule rule ) throws KernelException\n+    public void createSchemaRule(TransactionRecordState recordState, SchemaRule rule) throws KernelException\n     {\n-        IntObjectMap<Value> properties = asMap( rule );\n+        IntObjectMap<Value> properties = asMap(rule);\n         long ruleId = rule.getId();\n-        recordState.schemaRuleCreate( ruleId, rule instanceof ConstraintDescriptor, rule );\n-        properties.forEachKeyValue( ( propertyKeyId, value ) -> recordState.schemaRuleSetProperty( ruleId, propertyKeyId, value, rule ) );\n+        recordState.schemaRuleCreate(ruleId, rule instanceof ConstraintDescriptor, rule);\n+        properties.forEachKeyValue((propertyKeyId, value) -> recordState.schemaRuleSetProperty(ruleId, propertyKeyId, value, rule));\n     }\n \n     @Override\n-    public void dropSchemaRule( TransactionRecordState recordState, SchemaRule rule )\n+    public void dropSchemaRule(TransactionRecordState recordState, SchemaRule rule)\n     {\n-        recordState.schemaRuleDelete( rule.getId(), rule );\n+        recordState.schemaRuleDelete(rule.getId(), rule);\n     }\n \n     @Override\n-    public void setConstraintIndexOwner( TransactionRecordState recordState, IndexDescriptor indexRule, long constraintId ) throws KernelException\n+    public void setConstraintIndexOwner(TransactionRecordState recordState, IndexDescriptor indexRule, long constraintId) throws KernelException\n     {\n-        setConstraintIndexOwnerProperty( constraintId,\n-                ( propertyKeyId, value ) -> recordState.schemaRuleSetIndexOwner( indexRule, constraintId, propertyKeyId, value ) );\n+        setConstraintIndexOwnerProperty(constraintId,\n+          (propertyKeyId, value) -> recordState.schemaRuleSetIndexOwner(indexRule, constraintId, propertyKeyId, value));\n     }\n \n-    protected abstract IntObjectMap<Value> asMap( SchemaRule rule ) throws KernelException;\n+    protected abstract IntObjectMap<Value> asMap(SchemaRule rule) throws KernelException;\n \n-    protected abstract void setConstraintIndexOwnerProperty( long constraintId, IntObjectProcedure<Value> proc ) throws KernelException;\n+    protected abstract void setConstraintIndexOwnerProperty(long constraintId, IntObjectProcedure<Value> proc) throws KernelException;\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}