{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1412",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1412/ShortestPathBasedCentrality.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1412/ShortestPathBasedCentrality.java\nindex 74565a677f1..c1e10544128 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1412/ShortestPathBasedCentrality.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1412/ShortestPathBasedCentrality.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.centrality;\n \n import java.util.HashMap;\n@@ -36,158 +37,159 @@ import org.neo4j.graphdb.Node;\n  * algorithms, is to open up for parallel computation of several of these\n  * algorithms at the same time. This could be made possible by reusing the\n  * SingleSourceShortestPath computation made for every node.\n+ *\n+ * @param <CentralityType>       The result datatype. Values of this is stored for every node and\n+ *                               accumulated during calculation.\n+ * @param <ShortestPathCostType> The datatype used by the SingleSourceShortestPath to represent\n+ *                               path weights.\n  * @author Patrik Larsson\n- * @param <CentralityType>\n- *            The result datatype. Values of this is stored for every node and\n- *            accumulated during calculation.\n- * @param <ShortestPathCostType>\n- *            The datatype used by the SingleSourceShortestPath to represent\n- *            path weights.\n  */\n-public abstract class ShortestPathBasedCentrality<CentralityType,ShortestPathCostType>\n+public abstract class ShortestPathBasedCentrality<CentralityType, ShortestPathCostType>\n {\n-    protected SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath;\n-    protected CostAccumulator<CentralityType> centralityAccumulator;\n-    protected CentralityType zeroValue;\n-    protected Set<Node> nodeSet;\n-    protected boolean doneCalculation;\n-    /**\n-     * This map over centrality values is made available to the algorithms\n-     * inheriting this class. It is supposed to be filled with the method\n-     * addCentralityToNode.\n-     */\n-    protected Map<Node,CentralityType> centralities;\n+  protected SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath;\n+  protected CostAccumulator<CentralityType> centralityAccumulator;\n+  protected CentralityType zeroValue;\n+  protected Set<Node> nodeSet;\n+  protected boolean doneCalculation;\n+  /**\n+   * This map over centrality values is made available to the algorithms\n+   * inheriting this class. It is supposed to be filled with the method\n+   * addCentralityToNode.\n+   */\n+  protected Map<Node, CentralityType> centralities;\n \n-    /**\n-     * Default constructor.\n-     * @param singleSourceShortestPath\n-     *            The underlying shortest path algorithm.\n-     * @param centralityAccumulator\n-     *            When centralities are built through sums, this makes it\n-     *            possible to call addCentralityToNode several times, which then\n-     *            uses this object to add values together.\n-     * @param zeroValue\n-     *            The default value to start with.\n-     * @param nodeSet\n-     *            The set of nodes values should be stored for.\n-     */\n-    public ShortestPathBasedCentrality(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        CostAccumulator<CentralityType> centralityAccumulator,\n-        CentralityType zeroValue, Set<Node> nodeSet )\n-    {\n-        super();\n-        this.singleSourceShortestPath = singleSourceShortestPath;\n-        this.centralityAccumulator = centralityAccumulator;\n-        this.zeroValue = zeroValue;\n-        this.nodeSet = nodeSet;\n-        reset();\n-    }\n+  /**\n+   * Default constructor.\n+   *\n+   * @param singleSourceShortestPath The underlying shortest path algorithm.\n+   * @param centralityAccumulator    When centralities are built through sums, this makes it\n+   *                                 possible to call addCentralityToNode several times, which then\n+   *                                 uses this object to add values together.\n+   * @param zeroValue                The default value to start with.\n+   * @param nodeSet                  The set of nodes values should be stored for.\n+   */\n+  public ShortestPathBasedCentrality(\n+      SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n+      CostAccumulator<CentralityType> centralityAccumulator,\n+      CentralityType zeroValue, Set<Node> nodeSet)\n+  {\n+    super();\n+    this.singleSourceShortestPath = singleSourceShortestPath;\n+    this.centralityAccumulator = centralityAccumulator;\n+    this.zeroValue = zeroValue;\n+    this.nodeSet = nodeSet;\n+    reset();\n+  }\n \n-    /**\n-     * The calculation is normally only done once, this resets it so it can be\n-     * run again. Also used locally for initialization.\n-     */\n-    public void reset()\n+  /**\n+   * The calculation is normally only done once, this resets it so it can be\n+   * run again. Also used locally for initialization.\n+   */\n+  public void reset()\n+  {\n+    doneCalculation = false;\n+    centralities = new HashMap<>();\n+    for (Node node : nodeSet)\n     {\n-        doneCalculation = false;\n-        centralities = new HashMap<>();\n-        for ( Node node : nodeSet )\n-        {\n-            centralities.put( node, zeroValue );\n-        }\n+      centralities.put(node, zeroValue);\n     }\n+  }\n \n-    /**\n-     * This adds a value to a given node in the centralities Map. If the Map\n-     * does not contain the node, it is added.\n-     * @param node\n-     * @param value\n-     */\n-    protected void addCentralityToNode( Node node, CentralityType value )\n+  /**\n+   * This adds a value to a given node in the centralities Map. If the Map\n+   * does not contain the node, it is added.\n+   *\n+   * @param node\n+   * @param value\n+   */\n+  protected void addCentralityToNode(Node node, CentralityType value)\n+  {\n+    CentralityType centrality = centralities.get(node);\n+    if (centrality == null)\n     {\n-        CentralityType centrality = centralities.get( node );\n-        if ( centrality == null )\n-        {\n-            centrality = zeroValue;\n-        }\n-        centralities.put( node, centralityAccumulator.addCosts( centrality,\n-            value ) );\n+      centrality = zeroValue;\n     }\n+    centralities.put(node, centralityAccumulator.addCosts(centrality,\n+        value));\n+  }\n \n-    /**\n-     * This sets a value for a given node in the centralities Map. If the Map\n-     * does not contain the node, it is added.\n-     * @param node\n-     * @param value\n-     */\n-    protected void setCentralityForNode( Node node, CentralityType value )\n-    {\n-        centralities.put( node, value );\n-    }\n+  /**\n+   * This sets a value for a given node in the centralities Map. If the Map\n+   * does not contain the node, it is added.\n+   *\n+   * @param node\n+   * @param value\n+   */\n+  protected void setCentralityForNode(Node node, CentralityType value)\n+  {\n+    centralities.put(node, value);\n+  }\n \n-    /**\n-     * This can be used to retrieve the result for every node. Will return null\n-     * if the node is not contained in the node set initially given.\n-     * @param node\n-     * @return\n-     */\n-    public CentralityType getCentrality( Node node )\n-    {\n-        calculate();\n-        return centralities.get( node );\n-    }\n+  /**\n+   * This can be used to retrieve the result for every node. Will return null\n+   * if the node is not contained in the node set initially given.\n+   *\n+   * @param node\n+   * @return\n+   */\n+  public CentralityType getCentrality(Node node)\n+  {\n+    calculate();\n+    return centralities.get(node);\n+  }\n \n-    /**\n-     * Runs the calculation. This should not need to be called explicitly, since\n-     * all attempts to retrieve any kind of result should automatically call\n-     * this.\n-     */\n-    public void calculate()\n+  /**\n+   * Runs the calculation. This should not need to be called explicitly, since\n+   * all attempts to retrieve any kind of result should automatically call\n+   * this.\n+   */\n+  public void calculate()\n+  {\n+    // Don't do it more than once\n+    if (doneCalculation)\n     {\n-        // Don't do it more than once\n-        if ( doneCalculation )\n-        {\n-            return;\n-        }\n-        doneCalculation = true;\n-        // For all nodes...\n-        for ( Node startNode : nodeSet )\n-        {\n-            // Prepare the singleSourceShortestPath\n-            singleSourceShortestPath.reset();\n-            singleSourceShortestPath.setStartNode( startNode );\n-            // Process\n-            processShortestPaths( startNode, singleSourceShortestPath );\n-        }\n+      return;\n     }\n-\n-    /**\n-     * This method allows to skip the calculation of the centrality via\n-     * the calculate method. This is to allow user defined calculation of\n-     * the centralities via the processShortestPaths method.\n-     */\n-    public void skipCalculation()\n+    doneCalculation = true;\n+    // For all nodes...\n+    for (Node startNode : nodeSet)\n     {\n-        doneCalculation = true;\n+      // Prepare the singleSourceShortestPath\n+      singleSourceShortestPath.reset();\n+      singleSourceShortestPath.setStartNode(startNode);\n+      // Process\n+      processShortestPaths(startNode, singleSourceShortestPath);\n     }\n+  }\n \n-    /**\n-     * Checks if the calculation is already done\n-     * @return    status of the calculation\n-     */\n-    public boolean isCalculated()\n-    {\n-        return doneCalculation;\n-    }\n+  /**\n+   * This method allows to skip the calculation of the centrality via\n+   * the calculate method. This is to allow user defined calculation of\n+   * the centralities via the processShortestPaths method.\n+   */\n+  public void skipCalculation()\n+  {\n+    doneCalculation = true;\n+  }\n+\n+  /**\n+   * Checks if the calculation is already done\n+   *\n+   * @return status of the calculation\n+   */\n+  public boolean isCalculated()\n+  {\n+    return doneCalculation;\n+  }\n \n-    /**\n-     * This is the abstract method all centrality algorithms based on this class\n-     * need to implement. It is called once for every node in the node set,\n-     * along with a SingleSourceShortestPath starting in that node.\n-     * @param node\n-     * @param singleSourceShortestPath\n-     */\n-    public abstract void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath );\n+  /**\n+   * This is the abstract method all centrality algorithms based on this class\n+   * need to implement. It is called once for every node in the node set,\n+   * along with a SingleSourceShortestPath starting in that node.\n+   *\n+   * @param node\n+   * @param singleSourceShortestPath\n+   */\n+  public abstract void processShortestPaths(Node node,\n+                                            SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath);\n }\n",
            "diff_size": 175
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1412/ShortestPathBasedCentrality.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1412/ShortestPathBasedCentrality.java\nindex 74565a677f1..76e3be65f98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1412/ShortestPathBasedCentrality.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1412/ShortestPathBasedCentrality.java\n@@ -51,7 +51,8 @@ public abstract class ShortestPathBasedCentrality<CentralityType,ShortestPathCos\n     protected CentralityType zeroValue;\n     protected Set<Node> nodeSet;\n     protected boolean doneCalculation;\n-    /**\n+\n+/**\n      * This map over centrality values is made available to the algorithms\n      * inheriting this class. It is supposed to be filled with the method\n      * addCentralityToNode.\n@@ -71,11 +72,9 @@ public abstract class ShortestPathBasedCentrality<CentralityType,ShortestPathCos\n      * @param nodeSet\n      *            The set of nodes values should be stored for.\n      */\n-    public ShortestPathBasedCentrality(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        CostAccumulator<CentralityType> centralityAccumulator,\n+    public ShortestPathBasedCentrality( SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath, CostAccumulator<CentralityType> centralityAccumulator,\n         CentralityType zeroValue, Set<Node> nodeSet )\n-    {\n+{\n         super();\n         this.singleSourceShortestPath = singleSourceShortestPath;\n         this.centralityAccumulator = centralityAccumulator;\n@@ -111,9 +110,8 @@ public abstract class ShortestPathBasedCentrality<CentralityType,ShortestPathCos\n         {\n             centrality = zeroValue;\n         }\n-        centralities.put( node, centralityAccumulator.addCosts( centrality,\n-            value ) );\n-    }\n+        centralities.put( node, centralityAccumulator.addCosts( centrality, value ) );\n+            }\n \n     /**\n      * This sets a value for a given node in the centralities Map. If the Map\n@@ -150,7 +148,8 @@ public abstract class ShortestPathBasedCentrality<CentralityType,ShortestPathCos\n         {\n             return;\n         }\n-        doneCalculation = true;\n+\n+doneCalculation = true;\n         // For all nodes...\n         for ( Node startNode : nodeSet )\n         {\n@@ -188,6 +187,5 @@ public abstract class ShortestPathBasedCentrality<CentralityType,ShortestPathCos\n      * @param node\n      * @param singleSourceShortestPath\n      */\n-    public abstract void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath );\n-}\n+    public abstract void processShortestPaths( Node node, SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath );\n+    }\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}