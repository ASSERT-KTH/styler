{
    "project_name": "neo4j-neo4j",
    "error_id": "465",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "89",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/465/ConsistencySummaryStatistics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/465/ConsistencySummaryStatistics.java\nindex 134825e4caf..d20ae46886f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/465/ConsistencySummaryStatistics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/465/ConsistencySummaryStatistics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.report;\n \n import java.util.EnumMap;\n@@ -28,34 +29,34 @@ import org.neo4j.consistency.RecordType;\n \n public class ConsistencySummaryStatistics\n {\n-    private final Map<RecordType, AtomicInteger> inconsistentRecordCount = new EnumMap<>( RecordType.class );\n+    private final Map<RecordType, AtomicInteger> inconsistentRecordCount = new EnumMap<>(RecordType.class);\n     private final AtomicLong totalInconsistencyCount = new AtomicLong();\n     private final AtomicLong errorCount = new AtomicLong();\n     private final AtomicLong warningCount = new AtomicLong();\n \n     public ConsistencySummaryStatistics()\n     {\n-        for ( RecordType recordType : RecordType.values() )\n+        for (RecordType recordType : RecordType.values())\n         {\n-            inconsistentRecordCount.put( recordType, new AtomicInteger() );\n+            inconsistentRecordCount.put(recordType, new AtomicInteger());\n         }\n     }\n \n     @Override\n     public String toString()\n     {\n-        StringBuilder result = new StringBuilder( getClass().getSimpleName() ).append( '{' );\n-        result.append( \"\\n\\tNumber of errors: \" ).append( errorCount );\n-        result.append( \"\\n\\tNumber of warnings: \" ).append( warningCount );\n-        for ( Map.Entry<RecordType, AtomicInteger> entry : inconsistentRecordCount.entrySet() )\n+        StringBuilder result = new StringBuilder(getClass().getSimpleName()).append('{');\n+        result.append(\"\\n\\tNumber of errors: \").append(errorCount);\n+        result.append(\"\\n\\tNumber of warnings: \").append(warningCount);\n+        for (Map.Entry<RecordType, AtomicInteger> entry : inconsistentRecordCount.entrySet())\n         {\n-            if ( entry.getValue().get() != 0 )\n+            if (entry.getValue().get() != 0)\n             {\n-                result.append( \"\\n\\tNumber of inconsistent \" )\n-                      .append( entry.getKey() ).append( \" records: \" ).append( entry.getValue() );\n+                result.append(\"\\n\\tNumber of inconsistent \")\n+                  .append(entry.getKey()).append(\" records: \").append(entry.getValue());\n             }\n         }\n-        return result.append( \"\\n}\" ).toString();\n+        return result.append(\"\\n}\").toString();\n     }\n \n     public boolean isConsistent()\n@@ -63,9 +64,9 @@ public class ConsistencySummaryStatistics\n         return totalInconsistencyCount.get() == 0;\n     }\n \n-    public int getInconsistencyCountForRecordType( RecordType recordType )\n+    public int getInconsistencyCountForRecordType(RecordType recordType)\n     {\n-        return inconsistentRecordCount.get( recordType ).get();\n+        return inconsistentRecordCount.get(recordType).get();\n     }\n \n     public long getTotalInconsistencyCount()\n@@ -78,17 +79,17 @@ public class ConsistencySummaryStatistics\n         return warningCount.get();\n     }\n \n-    public void update( RecordType recordType, int errors, int warnings )\n+    public void update(RecordType recordType, int errors, int warnings)\n     {\n-        if ( errors > 0 )\n+        if (errors > 0)\n         {\n-            inconsistentRecordCount.get( recordType ).addAndGet( errors );\n-            totalInconsistencyCount.addAndGet( errors );\n-            errorCount.addAndGet( errors );\n+            inconsistentRecordCount.get(recordType).addAndGet(errors);\n+            totalInconsistencyCount.addAndGet(errors);\n+            errorCount.addAndGet(errors);\n         }\n-        if ( warnings > 0 )\n+        if (warnings > 0)\n         {\n-            warningCount.addAndGet( warnings );\n+            warningCount.addAndGet(warnings);\n         }\n     }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}