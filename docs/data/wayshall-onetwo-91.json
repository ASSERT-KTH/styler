{
    "project_name": "wayshall-onetwo",
    "error_id": "91",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "15",
                "severity": "error",
                "message": "'catch' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                    }\n                }\n            } catch(IOException ioe) {\n                close();\n                throw new IllegalStateException(ioe.toString());\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler/91/LineIterator.java\nindex 6cc5e736ea4..ca71e10ca26 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler/91/LineIterator.java\n@@ -59,7 +59,7 @@ public class LineIterator implements Iterator {\n                         return true;\r\n                     }\r\n                 }\r\n-            } catch(IOException ioe) {\r\n+            } catch (IOException ioe) {\r\n                 close();\r\n                 throw new IllegalStateException(ioe.toString());\r\n             }\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/91/LineIterator.java\nindex 6cc5e736ea4..38f61950f46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/91/LineIterator.java\n@@ -9,130 +9,138 @@ import java.util.NoSuchElementException;\n \r\n public class LineIterator implements Iterator {\r\n \r\n-    /** The reader that is being read. */\r\n-    private final BufferedReader bufferedReader;\r\n-    /** The current line. */\r\n-    private String cachedLine;\r\n-    /** A flag indicating if the iterator has been fully read. */\r\n-    private boolean finished = false;\r\n+  /**\r\n+   * The reader that is being read.\r\n+   */\r\n+  private final BufferedReader bufferedReader;\r\n+  /**\r\n+   * The current line.\r\n+   */\r\n+  private String cachedLine;\r\n+  /**\r\n+   * A flag indicating if the iterator has been fully read.\r\n+   */\r\n+  private boolean finished = false;\r\n \r\n-    /**\r\n-     * Constructs an iterator of the lines for a <code>Reader</code>.\r\n-     *\r\n-     * @param reader the <code>Reader</code> to read from, not null\r\n-     * @throws IllegalArgumentException if the reader is null\r\n-     */\r\n-    public LineIterator(final Reader reader) throws IllegalArgumentException {\r\n-        if (reader == null) {\r\n-            throw new IllegalArgumentException(\"Reader must not be null\");\r\n-        }\r\n-        if (reader instanceof BufferedReader) {\r\n-            bufferedReader = (BufferedReader) reader;\r\n-        } else {\r\n-            bufferedReader = new BufferedReader(reader);\r\n-        }\r\n+  /**\r\n+   * Constructs an iterator of the lines for a <code>Reader</code>.\r\n+   *\r\n+   * @param reader the <code>Reader</code> to read from, not null\r\n+   * @throws IllegalArgumentException if the reader is null\r\n+   */\r\n+  public LineIterator(final Reader reader) throws IllegalArgumentException {\r\n+    if (reader == null) {\r\n+      throw new IllegalArgumentException(\"Reader must not be null\");\r\n     }\r\n+    if (reader instanceof BufferedReader) {\r\n+      bufferedReader = (BufferedReader) reader;\r\n+    } else {\r\n+      bufferedReader = new BufferedReader(reader);\r\n+    }\r\n+  }\r\n \r\n-    //-----------------------------------------------------------------------\r\n-    /**\r\n-     * Indicates whether the <code>Reader</code> has more lines.\r\n-     * If there is an <code>IOException</code> then {@link #close()} will\r\n-     * be called on this instance.\r\n-     *\r\n-     * @return <code>true</code> if the Reader has more lines\r\n-     * @throws IllegalStateException if an IO exception occurs\r\n-     */\r\n-    public boolean hasNext() {\r\n-        if (cachedLine != null) {\r\n-            return true;\r\n-        } else if (finished) {\r\n+  //-----------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * Indicates whether the <code>Reader</code> has more lines.\r\n+   * If there is an <code>IOException</code> then {@link #close()} will\r\n+   * be called on this instance.\r\n+   *\r\n+   * @return <code>true</code> if the Reader has more lines\r\n+   * @throws IllegalStateException if an IO exception occurs\r\n+   */\r\n+  public boolean hasNext() {\r\n+    if (cachedLine != null) {\r\n+      return true;\r\n+    } else if (finished) {\r\n+      return false;\r\n+    } else {\r\n+      try {\r\n+        while (true) {\r\n+          String line = bufferedReader.readLine();\r\n+          if (line == null) {\r\n+            finished = true;\r\n             return false;\r\n-        } else {\r\n-            try {\r\n-                while (true) {\r\n-                    String line = bufferedReader.readLine();\r\n-                    if (line == null) {\r\n-                        finished = true;\r\n-                        return false;\r\n-                    } else if (isValidLine(line)) {\r\n-                        cachedLine = line;\r\n-                        return true;\r\n-                    }\r\n-                }\r\n-            } catch(IOException ioe) {\r\n-                close();\r\n-                throw new IllegalStateException(ioe.toString());\r\n-            }\r\n+          } else if (isValidLine(line)) {\r\n+            cachedLine = line;\r\n+            return true;\r\n+          }\r\n         }\r\n+      } catch (IOException ioe) {\r\n+        close();\r\n+        throw new IllegalStateException(ioe.toString());\r\n+      }\r\n     }\r\n+  }\r\n \r\n-    /**\r\n-     * Overridable method to validate each line that is returned.\r\n-     *\r\n-     * @param line  the line that is to be validated\r\n-     * @return true if valid, false to remove from the iterator\r\n-     */\r\n-    protected boolean isValidLine(String line) {\r\n-        return true;\r\n-    }\r\n+  /**\r\n+   * Overridable method to validate each line that is returned.\r\n+   *\r\n+   * @param line the line that is to be validated\r\n+   * @return true if valid, false to remove from the iterator\r\n+   */\r\n+  protected boolean isValidLine(String line) {\r\n+    return true;\r\n+  }\r\n \r\n-    /**\r\n-     * Returns the next line in the wrapped <code>Reader</code>.\r\n-     *\r\n-     * @return the next line from the input\r\n-     * @throws NoSuchElementException if there is no line to return\r\n-     */\r\n-    public Object next() {\r\n-        return nextLine();\r\n-    }\r\n+  /**\r\n+   * Returns the next line in the wrapped <code>Reader</code>.\r\n+   *\r\n+   * @return the next line from the input\r\n+   * @throws NoSuchElementException if there is no line to return\r\n+   */\r\n+  public Object next() {\r\n+    return nextLine();\r\n+  }\r\n \r\n-    /**\r\n-     * Returns the next line in the wrapped <code>Reader</code>.\r\n-     *\r\n-     * @return the next line from the input\r\n-     * @throws NoSuchElementException if there is no line to return\r\n-     */\r\n-    public String nextLine() {\r\n-        if (!hasNext()) {\r\n-            throw new NoSuchElementException(\"No more lines\");\r\n-        }\r\n-        String currentLine = cachedLine;\r\n-        cachedLine = null;\r\n-        return currentLine;        \r\n+  /**\r\n+   * Returns the next line in the wrapped <code>Reader</code>.\r\n+   *\r\n+   * @return the next line from the input\r\n+   * @throws NoSuchElementException if there is no line to return\r\n+   */\r\n+  public String nextLine() {\r\n+    if (!hasNext()) {\r\n+      throw new NoSuchElementException(\"No more lines\");\r\n     }\r\n+    String currentLine = cachedLine;\r\n+    cachedLine = null;\r\n+    return currentLine;\r\n+  }\r\n \r\n-    /**\r\n-     * Closes the underlying <code>Reader</code> quietly.\r\n-     * This method is useful if you only want to process the first few\r\n-     * lines of a larger file. If you do not close the iterator\r\n-     * then the <code>Reader</code> remains open.\r\n-     * This method can safely be called multiple times.\r\n-     */\r\n-    public void close() {\r\n-        finished = true;\r\n-        IOUtils.closeQuietly(bufferedReader);\r\n-        cachedLine = null;\r\n-    }\r\n+  /**\r\n+   * Closes the underlying <code>Reader</code> quietly.\r\n+   * This method is useful if you only want to process the first few\r\n+   * lines of a larger file. If you do not close the iterator\r\n+   * then the <code>Reader</code> remains open.\r\n+   * This method can safely be called multiple times.\r\n+   */\r\n+  public void close() {\r\n+    finished = true;\r\n+    IOUtils.closeQuietly(bufferedReader);\r\n+    cachedLine = null;\r\n+  }\r\n \r\n-    /**\r\n-     * Unsupported.\r\n-     *\r\n-     * @throws UnsupportedOperationException always\r\n-     */\r\n-    public void remove() {\r\n-        throw new UnsupportedOperationException(\"Remove unsupported on LineIterator\");\r\n-    }\r\n+  /**\r\n+   * Unsupported.\r\n+   *\r\n+   * @throws UnsupportedOperationException always\r\n+   */\r\n+  public void remove() {\r\n+    throw new UnsupportedOperationException(\"Remove unsupported on LineIterator\");\r\n+  }\r\n \r\n-    //-----------------------------------------------------------------------\r\n-    /**\r\n-     * Closes the iterator, handling null and ignoring exceptions.\r\n-     *\r\n-     * @param iterator  the iterator to close\r\n-     */\r\n-    public static void closeQuietly(LineIterator iterator) {\r\n-        if (iterator != null) {\r\n-            iterator.close();\r\n-        }\r\n+  //-----------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * Closes the iterator, handling null and ignoring exceptions.\r\n+   *\r\n+   * @param iterator the iterator to close\r\n+   */\r\n+  public static void closeQuietly(LineIterator iterator) {\r\n+    if (iterator != null) {\r\n+      iterator.close();\r\n     }\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 141
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_random/91/LineIterator.java\nindex 6cc5e736ea4..ca71e10ca26 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_random/91/LineIterator.java\n@@ -59,7 +59,7 @@ public class LineIterator implements Iterator {\n                         return true;\r\n                     }\r\n                 }\r\n-            } catch(IOException ioe) {\r\n+            } catch (IOException ioe) {\r\n                 close();\r\n                 throw new IllegalStateException(ioe.toString());\r\n             }\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_three_grams/91/LineIterator.java\nindex 6cc5e736ea4..ca71e10ca26 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/91/LineIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_three_grams/91/LineIterator.java\n@@ -59,7 +59,7 @@ public class LineIterator implements Iterator {\n                         return true;\r\n                     }\r\n                 }\r\n-            } catch(IOException ioe) {\r\n+            } catch (IOException ioe) {\r\n                 close();\r\n                 throw new IllegalStateException(ioe.toString());\r\n             }\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}