{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1112",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1112/Setting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1112/Setting.java\nindex 43cd19a36df..a40e71d24ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1112/Setting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1112/Setting.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.config;\n \n import java.util.Collections;\n@@ -41,75 +42,73 @@ import static org.neo4j.helpers.collection.MapUtil.stringMap;\n  * @deprecated The settings API will be completely rewritten in 4.0\n  */\n @Deprecated\n-public interface Setting<T> extends Function<Function<String,String>,T>, SettingValidator, SettingGroup<T>\n+public interface Setting<T> extends Function<Function<String, String>, T>, SettingValidator, SettingGroup<T>\n {\n-    /**\n-     * Get the name of the setting. This typically corresponds to a key in a properties file, or similar.\n-     *\n-     * @return the name\n-     */\n-    String name();\n+  /**\n+   * Get the name of the setting. This typically corresponds to a key in a properties file, or similar.\n+   *\n+   * @return the name\n+   */\n+  String name();\n \n-    /**\n-     * Make this setting bound to a scope\n-     *\n-     * @param scopingRule The scoping rule to be applied to this setting\n-     */\n-    void withScope( Function<String,String> scopingRule );\n+  /**\n+   * Make this setting bound to a scope\n+   *\n+   * @param scopingRule The scoping rule to be applied to this setting\n+   */\n+  void withScope(Function<String, String> scopingRule);\n \n-    /**\n-     * Get the default value of this setting, as a string.\n-     *\n-     * @return the default value\n-     */\n-    String getDefaultValue();\n+  /**\n+   * Get the default value of this setting, as a string.\n+   *\n+   * @return the default value\n+   */\n+  String getDefaultValue();\n \n-    @Deprecated\n-    T from( Configuration config );\n+  @Deprecated\n+  T from(Configuration config);\n \n-    @Override\n-    default Map<String,T> values( Map<String,String> validConfig )\n-    {\n-        return singletonMap( name(), apply( validConfig::get ) );\n-    }\n+  @Override\n+  default Map<String, T> values(Map<String, String> validConfig)\n+  {\n+    return singletonMap(name(), apply(validConfig::get));\n+  }\n \n-    @Override\n-    default Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer )\n-            throws InvalidSettingException\n+  @Override\n+  default Map<String, String> validate(Map<String, String> rawConfig, Consumer<String> warningConsumer)\n+      throws InvalidSettingException\n+  {\n+    // Validate setting, if present or default value otherwise\n+    try\n     {\n-        // Validate setting, if present or default value otherwise\n-        try\n-        {\n-            apply( rawConfig::get );\n-            // only return if it was present though\n-            if ( rawConfig.containsKey( name() ) )\n-            {\n-                return stringMap( name(), rawConfig.get( name() ) );\n-            }\n-            else\n-            {\n-                return emptyMap();\n-            }\n-        }\n-        catch ( RuntimeException e )\n-        {\n-            throw new InvalidSettingException( e.getMessage(), e );\n-        }\n-    }\n-\n-    @Override\n-    default List<Setting<T>> settings( Map<String,String> params )\n+      apply(rawConfig::get);\n+      // only return if it was present though\n+      if (rawConfig.containsKey(name()))\n+      {\n+        return stringMap(name(), rawConfig.get(name()));\n+      } else\n+      {\n+        return emptyMap();\n+      }\n+    } catch (RuntimeException e)\n     {\n-        return Collections.singletonList( this );\n+      throw new InvalidSettingException(e.getMessage(), e);\n     }\n+  }\n \n-    /**\n-     * Get the function used to parse this setting.\n-     *\n-     * @return the parser function\n-     */\n-    default Optional<Function<String,T>> getParser()\n-    {\n-        return Optional.empty();\n-    }\n+  @Override\n+  default List<Setting<T>> settings(Map<String, String> params)\n+  {\n+    return Collections.singletonList(this);\n+  }\n+\n+  /**\n+   * Get the function used to parse this setting.\n+   *\n+   * @return the parser function\n+   */\n+  default Optional<Function<String, T>> getParser()\n+  {\n+    return Optional.empty();\n+  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1112/Setting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1112/Setting.java\nindex 43cd19a36df..02bc5abbcab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1112/Setting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1112/Setting.java\n@@ -74,9 +74,8 @@ public interface Setting<T> extends Function<Function<String,String>,T>, Setting\n     }\n \n     @Override\n-    default Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer )\n-            throws InvalidSettingException\n-    {\n+    default Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer ) throws InvalidSettingException\n+{\n         // Validate setting, if present or default value otherwise\n         try\n         {\n@@ -112,4 +111,4 @@ public interface Setting<T> extends Function<Function<String,String>,T>, Setting\n     {\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}