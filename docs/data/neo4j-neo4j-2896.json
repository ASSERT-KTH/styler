{
    "project_name": "neo4j-neo4j",
    "error_id": "2896",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2896/BidirectionalTraverserIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2896/BidirectionalTraverserIterator.java\nindex fa02ef04c7a..ba82c251229 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2896/BidirectionalTraverserIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2896/BidirectionalTraverserIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import java.util.EnumMap;\n@@ -43,79 +44,79 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n     private final BranchCollisionDetector collisionDetector;\n     private Iterator<Path> foundPaths;\n     private SideSelector selector;\n-    private final Map<Direction, Side> sides = new EnumMap<>( Direction.class );\n+    private final Map<Direction, Side> sides = new EnumMap<>(Direction.class);\n     private final BidirectionalUniquenessFilter uniqueness;\n \n     private static class Side\n     {\n         private final MonoDirectionalTraversalDescription description;\n \n-        Side( MonoDirectionalTraversalDescription description )\n+        Side(MonoDirectionalTraversalDescription description)\n         {\n             this.description = description;\n         }\n     }\n \n-    BidirectionalTraverserIterator( MonoDirectionalTraversalDescription start,\n-                                    MonoDirectionalTraversalDescription end,\n-                                    SideSelectorPolicy sideSelector,\n-                                    org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy,\n-                                    PathEvaluator collisionEvaluator, int maxDepth,\n-                                    Iterable<Node> startNodes, Iterable<Node> endNodes )\n+    BidirectionalTraverserIterator(MonoDirectionalTraversalDescription start,\n+                                   MonoDirectionalTraversalDescription end,\n+                                   SideSelectorPolicy sideSelector,\n+                                   org.neo4j.graphdb.traversal.BranchCollisionPolicy collisionPolicy,\n+                                   PathEvaluator collisionEvaluator, int maxDepth,\n+                                   Iterable<Node> startNodes, Iterable<Node> endNodes)\n     {\n-        this.sides.put( Direction.OUTGOING, new Side( start ) );\n-        this.sides.put( Direction.INCOMING, new Side( end ) );\n-        this.uniqueness = makeSureStartAndEndHasSameUniqueness( start, end );\n+        this.sides.put(Direction.OUTGOING, new Side(start));\n+        this.sides.put(Direction.INCOMING, new Side(end));\n+        this.uniqueness = makeSureStartAndEndHasSameUniqueness(start, end);\n \n         // A little chicken-and-egg problem. This happens when constructing the start/end\n         // selectors and they initially call evaluate() and isUniqueFirst, where the selector is used.\n         // Solved this way for now, to have it return the start side to begin with.\n-        this.selector = fixedSide( Direction.OUTGOING );\n+        this.selector = fixedSide(Direction.OUTGOING);\n         BranchSelector startSelector = start.branchOrdering.create(\n-                new AsOneStartBranch( this, startNodes, start.initialState, start.uniqueness ), start.expander );\n-        this.selector = fixedSide( Direction.INCOMING );\n+          new AsOneStartBranch(this, startNodes, start.initialState, start.uniqueness), start.expander);\n+        this.selector = fixedSide(Direction.INCOMING);\n         BranchSelector endSelector = end.branchOrdering.create(\n-                new AsOneStartBranch( this, endNodes, end.initialState, start.uniqueness ), end.expander );\n+          new AsOneStartBranch(this, endNodes, end.initialState, start.uniqueness), end.expander);\n \n-        this.selector = sideSelector.create( startSelector, endSelector, maxDepth );\n-        this.collisionDetector = collisionPolicy.create( collisionEvaluator, uniqueness::checkFull );\n+        this.selector = sideSelector.create(startSelector, endSelector, maxDepth);\n+        this.collisionDetector = collisionPolicy.create(collisionEvaluator, uniqueness::checkFull);\n     }\n \n-    private BidirectionalUniquenessFilter makeSureStartAndEndHasSameUniqueness( MonoDirectionalTraversalDescription\n-            start,\n-                                                                   MonoDirectionalTraversalDescription end )\n+    private BidirectionalUniquenessFilter makeSureStartAndEndHasSameUniqueness(MonoDirectionalTraversalDescription\n+                                                                                 start,\n+                                                                               MonoDirectionalTraversalDescription end)\n     {\n-        if ( !start.uniqueness.equals( end.uniqueness ) )\n+        if (!start.uniqueness.equals(end.uniqueness))\n         {\n-            throw new IllegalArgumentException( \"Start and end uniqueness factories differ, they need to be the \" +\n-                    \"same currently. Start side has \" + start.uniqueness + \", end side has \" + end.uniqueness );\n+            throw new IllegalArgumentException(\"Start and end uniqueness factories differ, they need to be the \" +\n+              \"same currently. Start side has \" + start.uniqueness + \", end side has \" + end.uniqueness);\n         }\n \n         boolean parameterDiffers = start.uniquenessParameter == null || end.uniquenessParameter == null ?\n-                start.uniquenessParameter != end.uniquenessParameter :\n-                !start.uniquenessParameter.equals( end.uniquenessParameter );\n-        if ( parameterDiffers )\n+          start.uniquenessParameter != end.uniquenessParameter :\n+          !start.uniquenessParameter.equals(end.uniquenessParameter);\n+        if (parameterDiffers)\n         {\n-            throw new IllegalArgumentException( \"Start and end uniqueness parameters differ, they need to be the \" +\n-                    \"same currently. Start side has \" + start.uniquenessParameter + \", \" +\n-                    \"end side has \" + end.uniquenessParameter );\n+            throw new IllegalArgumentException(\"Start and end uniqueness parameters differ, they need to be the \" +\n+              \"same currently. Start side has \" + start.uniquenessParameter + \", \" +\n+              \"end side has \" + end.uniquenessParameter);\n         }\n \n-        UniquenessFilter uniqueness = start.uniqueness.create( start.uniquenessParameter );\n-        if ( !(uniqueness instanceof BidirectionalUniquenessFilter) )\n+        UniquenessFilter uniqueness = start.uniqueness.create(start.uniquenessParameter);\n+        if (!(uniqueness instanceof BidirectionalUniquenessFilter))\n         {\n-            throw new IllegalArgumentException( \"You must supply a BidirectionalUniquenessFilter, \" +\n-                    \"not just a UniquenessFilter.\" );\n+            throw new IllegalArgumentException(\"You must supply a BidirectionalUniquenessFilter, \" +\n+              \"not just a UniquenessFilter.\");\n         }\n         return (BidirectionalUniquenessFilter) uniqueness;\n     }\n \n-    private SideSelector fixedSide( final Direction direction )\n+    private SideSelector fixedSide(final Direction direction)\n     {\n         return new SideSelector()\n         {\n             @Override\n-            public TraversalBranch next( TraversalContext metadata )\n+            public TraversalBranch next(TraversalContext metadata)\n             {\n                 throw new UnsupportedOperationException();\n             }\n@@ -131,9 +132,9 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n     @Override\n     protected Path fetchNextOrNull()\n     {\n-        if ( foundPaths != null )\n+        if (foundPaths != null)\n         {\n-            if ( foundPaths.hasNext() )\n+            if (foundPaths.hasNext())\n             {\n                 numberOfPathsReturned++;\n                 return foundPaths.next();\n@@ -142,18 +143,18 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n         }\n \n         TraversalBranch result;\n-        while ( true )\n+        while (true)\n         {\n-            result = selector.next( this );\n-            if ( result == null )\n+            result = selector.next(this);\n+            if (result == null)\n             {\n                 return null;\n             }\n-            Iterable<Path> pathCollisions = collisionDetector.evaluate( result, selector.currentSide() );\n-            if ( pathCollisions != null )\n+            Iterable<Path> pathCollisions = collisionDetector.evaluate(result, selector.currentSide());\n+            if (pathCollisions != null)\n             {\n                 foundPaths = pathCollisions.iterator();\n-                if ( foundPaths.hasNext() )\n+                if (foundPaths.hasNext())\n                 {\n                     numberOfPathsReturned++;\n                     return foundPaths.next();\n@@ -164,24 +165,24 @@ class BidirectionalTraverserIterator extends AbstractTraverserIterator\n \n     private Side currentSideDescription()\n     {\n-        return sides.get( selector.currentSide() );\n+        return sides.get(selector.currentSide());\n     }\n \n     @Override\n-    public Evaluation evaluate( TraversalBranch branch, BranchState state )\n+    public Evaluation evaluate(TraversalBranch branch, BranchState state)\n     {\n-        return currentSideDescription().description.evaluator.evaluate( branch, state );\n+        return currentSideDescription().description.evaluator.evaluate(branch, state);\n     }\n \n     @Override\n-    public boolean isUniqueFirst( TraversalBranch branch )\n+    public boolean isUniqueFirst(TraversalBranch branch)\n     {\n-        return uniqueness.checkFirst( branch );\n+        return uniqueness.checkFirst(branch);\n     }\n \n     @Override\n-    public boolean isUnique( TraversalBranch branch )\n+    public boolean isUnique(TraversalBranch branch)\n     {\n-        return uniqueness.check( branch );\n+        return uniqueness.check(branch);\n     }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}