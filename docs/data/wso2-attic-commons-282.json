{
    "project_name": "wso2-attic-commons",
    "error_id": "282",
    "information": {
        "errors": [
            {
                "line": "68",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     */\n    protected OPickReceive.OnMessage compileOnMessage(String varname, String plink, String operation,\n            String messageExchangeId, QName portType, boolean createInstance, Collection<Correlation> correlations, String route) {\n\n        OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n        onMessage.partnerLink = _context.resolvePartnerLink(plink);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/282/PickReceiveGenerator.java\nindex cd6b45bf1fb..2b1993d7562 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/282/PickReceiveGenerator.java\n@@ -65,7 +65,8 @@ abstract class PickReceiveGenerator extends DefaultActivityGenerator {\n      * @return\n      */\n     protected OPickReceive.OnMessage compileOnMessage(String varname, String plink, String operation,\n-            String messageExchangeId, QName portType, boolean createInstance, Collection<Correlation> correlations, String route) {\n+            String messageExchangeId, QName portType, boolean createInstance, Collection<\n+            Correlation> correlations, String route) {\n \n         OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n         onMessage.partnerLink = _context.resolvePartnerLink(plink);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/282/PickReceiveGenerator.java\nindex cd6b45bf1fb..b9ceac7e6ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/282/PickReceiveGenerator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.compiler;\n \n import org.apache.ode.bpel.compiler.api.CompilationException;\n@@ -38,98 +39,96 @@ import java.util.Set;\n  * {@link org.apache.ode.bpel.o.OPickReceive.OnMessage} objects.\n  */\n abstract class PickReceiveGenerator extends DefaultActivityGenerator {\n-    protected static final CommonCompilationMessages __cmsgsGeneral = MessageBundle\n-            .getMessages(CommonCompilationMessages.class);\n-\n-    protected static final PickGeneratorMessages __cmsgs = MessageBundle.getMessages(PickGeneratorMessages.class);\n+  protected static final CommonCompilationMessages __cmsgsGeneral = MessageBundle\n+    .getMessages(CommonCompilationMessages.class);\n+\n+  protected static final PickGeneratorMessages __cmsgs = MessageBundle.getMessages(PickGeneratorMessages.class);\n+\n+  public OActivity newInstance(Activity src) {\n+    return new OPickReceive(_context.getOProcess(), _context.getCurrent());\n+  }\n+\n+  /**\n+   * Compile an On-Message or Receive block.\n+   *\n+   * @param varname        name of variable to receive into\n+   * @param plink          partner link to receive on\n+   * @param operation      name of operation\n+   * @param portType       optional portType\n+   * @param createInstance is this a start activity\n+   * @param correlations   the correlations used\n+   * @return\n+   */\n+  protected OPickReceive.OnMessage compileOnMessage(String varname, String plink, String operation,\n+                                                    String messageExchangeId, QName portType, boolean createInstance,\n+                                                    Collection<Correlation> correlations, String route) {\n+\n+    OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n+    onMessage.partnerLink = _context.resolvePartnerLink(plink);\n+    onMessage.operation = _context.resolveMyRoleOperation(onMessage.partnerLink, operation);\n+    if (onMessage.operation.getInput() != null && onMessage.operation.getInput().getMessage() != null) {\n+      onMessage.variable = _context.resolveMessageVariable(varname, onMessage.operation.getInput().getMessage()\n+        .getQName());\n+    }\n+    onMessage.messageExchangeId = messageExchangeId;\n+    onMessage.route = route;\n \n-    public OActivity newInstance(Activity src) {\n-        return new OPickReceive(_context.getOProcess(), _context.getCurrent());\n+    if (portType != null && !portType.equals(onMessage.partnerLink.myRolePortType.getQName())) {\n+      throw new CompilationException(__cmsgsGeneral.errPortTypeMismatch(portType,\n+        onMessage.partnerLink.myRolePortType.getQName()));\n     }\n \n-    /**\n-     * Compile an On-Message or Receive block.\n-     *\n-     * @param varname\n-     *            name of variable to receive into\n-     * @param plink\n-     *            partner link to receive on\n-     * @param operation\n-     *            name of operation\n-     * @param portType\n-     *            optional portType\n-     * @param createInstance\n-     *            is this a start activity\n-     * @param correlations\n-     *            the correlations used\n-     * @return\n-     */\n-    protected OPickReceive.OnMessage compileOnMessage(String varname, String plink, String operation,\n-            String messageExchangeId, QName portType, boolean createInstance, Collection<Correlation> correlations, String route) {\n-\n-        OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n-        onMessage.partnerLink = _context.resolvePartnerLink(plink);\n-        onMessage.operation = _context.resolveMyRoleOperation(onMessage.partnerLink, operation);\n-        if (onMessage.operation.getInput() != null && onMessage.operation.getInput().getMessage() != null) {\n-            onMessage.variable = _context.resolveMessageVariable(varname, onMessage.operation.getInput().getMessage()\n-                    .getQName());\n-        }\n-        onMessage.messageExchangeId = messageExchangeId;\n-        onMessage.route = route;\n-\n-        if (portType != null && !portType.equals(onMessage.partnerLink.myRolePortType.getQName()))\n-            throw new CompilationException(__cmsgsGeneral.errPortTypeMismatch(portType,\n-                    onMessage.partnerLink.myRolePortType.getQName()));\n-\n-        if (createInstance)\n-            onMessage.partnerLink.addCreateInstanceOperation(onMessage.operation);\n-\n-        Set<String> csetNames = new HashSet<String>(); // prevents duplicate cset in on one set of correlations\n-        for (Correlation correlation : correlations) {\n-            if( csetNames.contains(correlation.getCorrelationSet() ) ) {\n-                throw new CompilationException(__cmsgsGeneral.errDuplicateUseCorrelationSet(correlation\n-                        .getCorrelationSet()));\n-            }\n-\n-            OScope.CorrelationSet cset = _context.resolveCorrelationSet(correlation.getCorrelationSet());\n-\n-            switch (correlation.getInitiate()) {\n-            case UNSET:\n-            case NO:\n-                if (createInstance)\n-                    throw new CompilationException(__cmsgsGeneral.errUseOfUninitializedCorrelationSet(correlation\n-                            .getCorrelationSet()));\n-                onMessage.matchCorrelations.add(cset);\n-                onMessage.partnerLink.addCorrelationSetForOperation(onMessage.operation, cset, false);\n-                break;\n-            case YES:\n-                onMessage.initCorrelations.add(cset);\n-                break;\n-            case JOIN:\n-                cset.hasJoinUseCases = true;\n-                onMessage.joinCorrelations.add(cset);\n-                onMessage.partnerLink.addCorrelationSetForOperation(onMessage.operation, cset, true);\n-                break;\n-\n-            default:\n-                    throw new AssertionError(\"Unexpected value for correlation set enumeration!\");\n-            }\n-\n-            for (OProcess.OProperty property : cset.properties) {\n-                // Force resolution of alias, to make sure that we have one for\n-                // this variable-property pair.\n-                _context.resolvePropertyAlias(onMessage.variable, property.name);\n-            }\n-\n-            csetNames.add(correlation.getCorrelationSet());\n-        }\n+    if (createInstance) {\n+      onMessage.partnerLink.addCreateInstanceOperation(onMessage.operation);\n+    }\n \n-        if (!onMessage.partnerLink.hasMyRole()) {\n-            throw new CompilationException(__cmsgsGeneral.errNoMyRoleOnReceivePartnerLink(onMessage.partnerLink\n-                    .getName()));\n+    Set<String> csetNames = new HashSet<String>(); // prevents duplicate cset in on one set of correlations\n+    for (Correlation correlation : correlations) {\n+      if (csetNames.contains(correlation.getCorrelationSet())) {\n+        throw new CompilationException(__cmsgsGeneral.errDuplicateUseCorrelationSet(correlation\n+          .getCorrelationSet()));\n+      }\n+\n+      OScope.CorrelationSet cset = _context.resolveCorrelationSet(correlation.getCorrelationSet());\n+\n+      switch (correlation.getInitiate()) {\n+      case UNSET:\n+      case NO:\n+        if (createInstance) {\n+          throw new CompilationException(__cmsgsGeneral.errUseOfUninitializedCorrelationSet(correlation\n+            .getCorrelationSet()));\n         }\n+        onMessage.matchCorrelations.add(cset);\n+        onMessage.partnerLink.addCorrelationSetForOperation(onMessage.operation, cset, false);\n+        break;\n+      case YES:\n+        onMessage.initCorrelations.add(cset);\n+        break;\n+      case JOIN:\n+        cset.hasJoinUseCases = true;\n+        onMessage.joinCorrelations.add(cset);\n+        onMessage.partnerLink.addCorrelationSetForOperation(onMessage.operation, cset, true);\n+        break;\n+\n+      default:\n+        throw new AssertionError(\"Unexpected value for correlation set enumeration!\");\n+      }\n+\n+      for (OProcess.OProperty property : cset.properties) {\n+        // Force resolution of alias, to make sure that we have one for\n+        // this variable-property pair.\n+        _context.resolvePropertyAlias(onMessage.variable, property.name);\n+      }\n+\n+      csetNames.add(correlation.getCorrelationSet());\n+    }\n \n-        return onMessage;\n+    if (!onMessage.partnerLink.hasMyRole()) {\n+      throw new CompilationException(__cmsgsGeneral.errNoMyRoleOnReceivePartnerLink(onMessage.partnerLink\n+        .getName()));\n     }\n \n+    return onMessage;\n+  }\n+\n }\n",
            "diff_size": 158
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/282/PickReceiveGenerator.java\nindex cd6b45bf1fb..4ff0f447fc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/282/PickReceiveGenerator.java\n@@ -66,8 +66,7 @@ abstract class PickReceiveGenerator extends DefaultActivityGenerator {\n      */\n     protected OPickReceive.OnMessage compileOnMessage(String varname, String plink, String operation,\n             String messageExchangeId, QName portType, boolean createInstance, Collection<Correlation> correlations, String route) {\n-\n-        OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n+    OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n         onMessage.partnerLink = _context.resolvePartnerLink(plink);\n         onMessage.operation = _context.resolveMyRoleOperation(onMessage.partnerLink, operation);\n         if (onMessage.operation.getInput() != null && onMessage.operation.getInput().getMessage() != null) {\n@@ -125,11 +124,10 @@ abstract class PickReceiveGenerator extends DefaultActivityGenerator {\n         }\n \n         if (!onMessage.partnerLink.hasMyRole()) {\n-            throw new CompilationException(__cmsgsGeneral.errNoMyRoleOnReceivePartnerLink(onMessage.partnerLink\n-                    .getName()));\n+            throw new CompilationException(__cmsgsGeneral.errNoMyRoleOnReceivePartnerLink(onMessage.partnerLink.getName()));\n         }\n \n         return onMessage;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/282/PickReceiveGenerator.java\nindex cd6b45bf1fb..a7945a17b52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/282/PickReceiveGenerator.java\n@@ -66,8 +66,7 @@ abstract class PickReceiveGenerator extends DefaultActivityGenerator {\n      */\n     protected OPickReceive.OnMessage compileOnMessage(String varname, String plink, String operation,\n             String messageExchangeId, QName portType, boolean createInstance, Collection<Correlation> correlations, String route) {\n-\n-        OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n+                OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n         onMessage.partnerLink = _context.resolvePartnerLink(plink);\n         onMessage.operation = _context.resolveMyRoleOperation(onMessage.partnerLink, operation);\n         if (onMessage.operation.getInput() != null && onMessage.operation.getInput().getMessage() != null) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/282/PickReceiveGenerator.java\nindex cd6b45bf1fb..2b1993d7562 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/282/PickReceiveGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/282/PickReceiveGenerator.java\n@@ -65,7 +65,8 @@ abstract class PickReceiveGenerator extends DefaultActivityGenerator {\n      * @return\n      */\n     protected OPickReceive.OnMessage compileOnMessage(String varname, String plink, String operation,\n-            String messageExchangeId, QName portType, boolean createInstance, Collection<Correlation> correlations, String route) {\n+            String messageExchangeId, QName portType, boolean createInstance, Collection<\n+            Correlation> correlations, String route) {\n \n         OPickReceive.OnMessage onMessage = new OPickReceive.OnMessage(_context.getOProcess());\n         onMessage.partnerLink = _context.resolvePartnerLink(plink);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}