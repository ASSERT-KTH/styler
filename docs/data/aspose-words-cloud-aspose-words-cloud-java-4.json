{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "29",
                "severity": "error",
                "message": "'}' at column 29 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    private String responseBody = null;\n\n    public ApiException() { }\n\n    public ApiException(Throwable throwable) {\n        super(throwable);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/4/ApiException.java\nindex cf69659f16b..fb929e68477 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/4/ApiException.java\n@@ -42,8 +42,8 @@ public class ApiException extends Exception {\n     private Map<String, List<String>> responseHeaders = null;\n     private String responseBody = null;\n \n-    public ApiException() { }\n-\n+    public ApiException() {\n+}\n     public ApiException(Throwable throwable) {\n         super(throwable);\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/4/ApiException.java\nindex cf69659f16b..b2e48efecfb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/4/ApiException.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -38,11 +38,15 @@ import java.util.List;\n \n public class ApiException extends Exception {\n     private ApiError innerError = null;\n+\n     private int code = 0;\n+\n     private Map<String, List<String>> responseHeaders = null;\n+\n     private String responseBody = null;\n \n-    public ApiException() { }\n+    public ApiException() {\n+    }\n \n     public ApiException(Throwable throwable) {\n         super(throwable);\n@@ -88,8 +92,8 @@ public class ApiException extends Exception {\n         if (!responseBody.contains(\"Error\") || !responseBody.startsWith(\"{\")) return;\n         JsonElement elem = new JsonParser().parse(responseBody);\n         this.innerError = new JSON().deserialize(\n-                elem.getAsJsonObject().get(\"Error\").toString(),\n-                ApiError.class);\n+            elem.getAsJsonObject().get(\"Error\").toString(),\n+            ApiError.class);\n     }\n \n     /**\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/4/ApiException.java\nindex cf69659f16b..51b74ce002f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/4/ApiException.java\n@@ -28,98 +28,112 @@\n package com.aspose.words.cloud;\n \n import java.util.Map;\n-\n import com.aspose.words.cloud.model.ApiError;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonParser;\n-\n import java.util.List;\n \n \n public class ApiException extends Exception {\n-    private ApiError innerError = null;\n-    private int code = 0;\n-    private Map<String, List<String>> responseHeaders = null;\n-    private String responseBody = null;\n-\n-    public ApiException() { }\n-\n-    public ApiException(Throwable throwable) {\n-        super(throwable);\n-    }\n-\n-    public ApiException(String message) {\n-        super(message);\n-    }\n-\n-    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders, String responseBody) {\n-        super(message, throwable);\n-        this.code = code;\n-        this.responseHeaders = responseHeaders;\n-        this.responseBody = responseBody;\n-        setInnerError();\n-    }\n-\n-    public ApiException(String message, int code, Map<String, List<String>> responseHeaders, String responseBody) {\n-        this(message, (Throwable) null, code, responseHeaders, responseBody);\n-    }\n-\n-    public ApiException(String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders) {\n-        this(message, throwable, code, responseHeaders, null);\n-    }\n-\n-    public ApiException(int code, Map<String, List<String>> responseHeaders, String responseBody) {\n-        this((String) null, (Throwable) null, code, responseHeaders, responseBody);\n-    }\n-\n-    public ApiException(int code, String message) {\n-        super(message);\n-        this.code = code;\n-    }\n-\n-    public ApiException(int code, String message, Map<String, List<String>> responseHeaders, String responseBody) {\n-        this(code, message);\n-        this.responseHeaders = responseHeaders;\n-        this.responseBody = responseBody;\n-        setInnerError();\n-    }\n-\n-    private void setInnerError() {\n-        if (!responseBody.contains(\"Error\") || !responseBody.startsWith(\"{\")) return;\n-        JsonElement elem = new JsonParser().parse(responseBody);\n-        this.innerError = new JSON().deserialize(\n-                elem.getAsJsonObject().get(\"Error\").toString(),\n-                ApiError.class);\n-    }\n+\n+  private ApiError innerError = null;\n+\n+\n+  private int code = 0;\n+\n+\n+  private Map<String, List<String>> responseHeaders = null;\n+\n+\n+  private String responseBody = null;\n+\n+\n+  public ApiException() {\n+  }\n+\n+  public ApiException(Throwable throwable) {\n+    super(throwable);\n+  }\n+\n+  public ApiException(String message) {\n+    super(message);\n+  }\n+\n+  public ApiException(String message,  Throwable throwable, int code,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    super(message, throwable);\n+      this.code = code;\n+      this.responseHeaders = responseHeaders;\n+      this.responseBody = responseBody;\n+      setInnerError();\n+  }\n+\n+  public ApiException(String message, int code,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    this(message, (Throwable) null, code, responseHeaders, responseBody);\n+  }\n+\n+  public ApiException(String message,  Throwable throwable, int code,  Map<String, List<String>> responseHeaders) {\n+    this(message, throwable, code, responseHeaders, null);\n+  }\n+\n+  public ApiException(int code,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    this((String) null, (Throwable) null, code, responseHeaders, responseBody);\n+  }\n+\n+  public ApiException(int code,  String message) {\n+    super(message);\n+      this.code = code;\n+  }\n+\n+  public ApiException(int code,  String message,  Map<String, List<String>> responseHeaders,  String responseBody) {\n+    this(code, message);\n+      this.responseHeaders = responseHeaders;\n+      this.responseBody = responseBody;\n+      setInnerError();\n+  }\n+\n+\n+  private void setInnerError() {\n+    if (!responseBody.contains(\"Error\") || !responseBody.startsWith(\"{\")) return;\n+\n+    JsonElement elem = new JsonParser()\n+          .parse(responseBody);\n+    this.innerError = new JSON()\n+          .deserialize(elem.getAsJsonObject().get(\"Error\")\n+                                             .toString(), ApiError.class);\n+  }\n \n     /**\n      * Get the HTTP status code.\n      *\n      * @return HTTP status code\n      */\n-    public int getCode() {\n-        return code;\n-    }\n+\n+  public int getCode() {\n+    return code;\n+  }\n \n     /**\n      * Get the HTTP response headers.\n      *\n      * @return A map of list of string\n      */\n-    public Map<String, List<String>> getResponseHeaders() {\n-        return responseHeaders;\n-    }\n+\n+  public Map<String, List<String>> getResponseHeaders() {\n+    return responseHeaders;\n+  }\n \n     /**\n      * Get the HTTP response body.\n      *\n      * @return Response body in the form of string\n      */\n-    public String getResponseBody() {\n-        return responseBody;\n-    }\n-\n-    public ApiError getInnerError() {\n-        return innerError;\n-    }\n-}\n+\n+  public String getResponseBody() {\n+    return responseBody;\n+  }\n+\n+  public ApiError getInnerError() {\n+    return innerError;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 86
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/4/ApiException.java\nindex cf69659f16b..fb929e68477 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/4/ApiException.java\n@@ -42,8 +42,8 @@ public class ApiException extends Exception {\n     private Map<String, List<String>> responseHeaders = null;\n     private String responseBody = null;\n \n-    public ApiException() { }\n-\n+    public ApiException() {\n+}\n     public ApiException(Throwable throwable) {\n         super(throwable);\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "47",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/4/ApiException.java\nindex cf69659f16b..f2b67c05a35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/4/ApiException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/4/ApiException.java\n@@ -42,9 +42,9 @@ public class ApiException extends Exception {\n     private Map<String, List<String>> responseHeaders = null;\n     private String responseBody = null;\n \n-    public ApiException() { }\n+    public ApiException() {\n \n-    public ApiException(Throwable throwable) {\n+        } public ApiException(Throwable throwable) {\n         super(throwable);\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}