{
    "project_name": "GluuFederation-oxCore",
    "error_id": "80",
    "information": {
        "errors": [
            {
                "line": "131",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n        if (attributeNode == null) {\n        \tif (node.getChildNodes().getLength() == 1) {\n        \t\tnode = node.getFirstChild();\n        \t\tif (node.getNodeType() == Node.TEXT_NODE)  {\n        \t\t\treturn node.getNodeValue();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "132",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/80/XmlService.java\nindex e25ca7d4305..92427718cb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/80/XmlService.java\n@@ -128,7 +128,7 @@ public class XmlService {\n \n         Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n         if (attributeNode == null) {\n-        \tif (node.getChildNodes().getLength() == 1) {\n+        if (node.getChildNodes().getLength() == 1) {\n         \t\tnode = node.getFirstChild();\n         \t\tif (node.getNodeType() == Node.TEXT_NODE)  {\n         \t\t\treturn node.getNodeValue();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/80/XmlService.java\nindex e25ca7d4305..9c557f5fea6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/80/XmlService.java\n@@ -2,7 +2,9 @@\n  * oxCore is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text.\n  *\n  * Copyright (c) 2014, Gluu\n- */package org.gluu.service;\n+ */\n+\n+package org.gluu.service;\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n@@ -128,12 +130,12 @@ public class XmlService {\n \n         Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n         if (attributeNode == null) {\n-        \tif (node.getChildNodes().getLength() == 1) {\n-        \t\tnode = node.getFirstChild();\n-        \t\tif (node.getNodeType() == Node.TEXT_NODE)  {\n-        \t\t\treturn node.getNodeValue();\n-        \t\t}\n-        \t}\n+            if (node.getChildNodes().getLength() == 1) {\n+                node = node.getFirstChild();\n+                if (node.getNodeType() == Node.TEXT_NODE) {\n+                    return node.getNodeValue();\n+                }\n+            }\n             return null;\n         }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "133",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/80/XmlService.java\nindex e25ca7d4305..16e64d8e73b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/80/XmlService.java\n@@ -128,16 +128,17 @@ public class XmlService {\n \n         Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n         if (attributeNode == null) {\n-        \tif (node.getChildNodes().getLength() == 1) {\n-        \t\tnode = node.getFirstChild();\n-        \t\tif (node.getNodeType() == Node.TEXT_NODE)  {\n-        \t\t\treturn node.getNodeValue();\n-        \t\t}\n-        \t}\n-            return null;\n+    if (node.getChildNodes().getLength() == 1) {\n+    node = node.getFirstChild();\n+        \t\tif (node.getNodeType() == Node.TEXT_NODE) {\n+    return node.getNodeValue();\n+    }\n+    }\n+\n+return null;\n         }\n \n         return attributeNode.getNodeValue();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/80/XmlService.java\nindex e25ca7d4305..822c22091c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/80/XmlService.java\n@@ -4,140 +4,138 @@\n  * Copyright (c) 2014, Gluu\n  */package org.gluu.service;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.Charset;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n-\n-import org.apache.commons.io.IOUtils;\n-import org.gluu.util.StringHelper;\n-import org.slf4j.Logger;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Node;\n-import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n+   import java.io.ByteArrayInputStream;\n+   import java.io.IOException;\n+   import java.io.InputStream;\n+   import java.nio.charset.Charset;\n+   import javax.enterprise.context.ApplicationScoped;\n+   import javax.inject.Inject;\n+   import javax.xml.parsers.DocumentBuilderFactory;\n+   import javax.xml.parsers.ParserConfigurationException;\n+   import javax.xml.xpath.XPath;\n+   import javax.xml.xpath.XPathConstants;\n+   import javax.xml.xpath.XPathExpression;\n+   import javax.xml.xpath.XPathExpressionException;\n+   import javax.xml.xpath.XPathFactory;\n+   import org.apache.commons.io.IOUtils;\n+   import org.gluu.util.StringHelper;\n+   import org.slf4j.Logger;\n+   import org.w3c.dom.Document;\n+   import org.w3c.dom.Node;\n+   import org.xml.sax.InputSource;\n+   import org.xml.sax.SAXException;\n \n /**\n  * Service class to work with images in photo repository\n  *\n  * @author Yuriy Movchan Date: 01.11.2011\n  */\n-@ApplicationScoped\n-public class XmlService {\n \n-    private static final long serialVersionUID = -4805285557592935972L;\n \n-    @Inject\n-    private Logger log;\n+   @ApplicationScoped\n+   public class XmlService {\n \n-    public Document getXmlDocument(String xmlDocument) throws SAXException, IOException, ParserConfigurationException {\n-        return getXmlDocument(xmlDocument, false);\n-    }\n+       private static final long serialVersionUID = -4805285557592935972L;\n \n-    public Document getXmlDocument(String xmlDocument, boolean skipValidation) throws SAXException, IOException, ParserConfigurationException {\n-        InputStream is = IOUtils.toInputStream(xmlDocument, Charset.forName(\"utf-8\"));\n-        try {\n-            DocumentBuilderFactory fty = createDocumentBuilderFactory(skipValidation);\n+       @Inject\n+       private Logger log;\n \n-            return fty.newDocumentBuilder().parse(is);\n-        } finally {\n-            IOUtils.closeQuietly(is);\n-        }\n-    }\n+       public Document getXmlDocument(String xmlDocument) throws SAXException, IOException, ParserConfigurationException {\n+           return getXmlDocument(xmlDocument, false);\n+       }\n \n-    public Document getXmlDocument(byte[] xmlDocumentBytes) throws SAXException, IOException, ParserConfigurationException {\n-        return getXmlDocument(xmlDocumentBytes, false);\n-    }\n+       public Document getXmlDocument(String xmlDocument, boolean skipValidation) throws SAXException, IOException, ParserConfigurationException {\n+           InputStream is = IOUtils.toInputStream(xmlDocument, Charset.forName(\"utf-8\"));\n+           try {\n+               DocumentBuilderFactory fty = createDocumentBuilderFactory(skipValidation);\n \n-    public Document getXmlDocument(byte[] xmlDocumentBytes, boolean skipValidation) throws SAXException, IOException, ParserConfigurationException {\n-        ByteArrayInputStream bis = new ByteArrayInputStream(xmlDocumentBytes);\n-        try {\n-            DocumentBuilderFactory fty = createDocumentBuilderFactory(skipValidation);\n+               return fty.newDocumentBuilder().parse(is);\n+           } finally {\n+               IOUtils.closeQuietly(is);\n+           }\n+       }\n \n-            return fty.newDocumentBuilder().parse(bis);\n-        } finally {\n-            IOUtils.closeQuietly(bis);\n-        }\n-    }\n+       public Document getXmlDocument(byte[] xmlDocumentBytes) throws SAXException, IOException, ParserConfigurationException {\n+           return getXmlDocument(xmlDocumentBytes, false);\n+       }\n \n-    public Document getXmlDocument(InputStream is) throws SAXException, IOException, ParserConfigurationException {\n-        DocumentBuilderFactory fty = createDocumentBuilderFactory();\n+       public Document getXmlDocument(byte[] xmlDocumentBytes, boolean skipValidation) throws SAXException, IOException, ParserConfigurationException {\n+           ByteArrayInputStream bis = new ByteArrayInputStream(xmlDocumentBytes);\n+           try {\n+               DocumentBuilderFactory fty = createDocumentBuilderFactory(skipValidation);\n \n-        return fty.newDocumentBuilder().parse(is);\n-    }\n+               return fty.newDocumentBuilder().parse(bis);\n+           } finally {\n+               IOUtils.closeQuietly(bis);\n+           }\n+       }\n \n-    public Document getXmlDocument(InputSource is) throws SAXException, IOException, ParserConfigurationException {\n-        DocumentBuilderFactory fty = createDocumentBuilderFactory();\n+       public Document getXmlDocument(InputStream is) throws SAXException, IOException, ParserConfigurationException {\n+           DocumentBuilderFactory fty = createDocumentBuilderFactory();\n \n-        return fty.newDocumentBuilder().parse(is);\n-    }\n+           return fty.newDocumentBuilder().parse(is);\n+       }\n \n-    public Document getXmlDocumentFromUri(String uri) throws SAXException, IOException, ParserConfigurationException {\n-        DocumentBuilderFactory fty = createDocumentBuilderFactory();\n+       public Document getXmlDocument(InputSource is) throws SAXException, IOException, ParserConfigurationException {\n+           DocumentBuilderFactory fty = createDocumentBuilderFactory();\n \n-        return fty.newDocumentBuilder().parse(uri);\n-    }\n+           return fty.newDocumentBuilder().parse(is);\n+       }\n \n-    private DocumentBuilderFactory createDocumentBuilderFactory() throws ParserConfigurationException {\n-        return createDocumentBuilderFactory(false);\n-    }\n+       public Document getXmlDocumentFromUri(String uri) throws SAXException, IOException, ParserConfigurationException {\n+           DocumentBuilderFactory fty = createDocumentBuilderFactory();\n \n-    private DocumentBuilderFactory createDocumentBuilderFactory(boolean skipValidation) throws ParserConfigurationException {\n-        DocumentBuilderFactory fty = DocumentBuilderFactory.newInstance();\n+           return fty.newDocumentBuilder().parse(uri);\n+       }\n \n-        if (skipValidation) {\n-            return fty;\n-        }\n+       private DocumentBuilderFactory createDocumentBuilderFactory() throws ParserConfigurationException {\n+           return createDocumentBuilderFactory(false);\n+       }\n \n-        fty.setNamespaceAware(true);\n+       private DocumentBuilderFactory createDocumentBuilderFactory(boolean skipValidation) throws ParserConfigurationException {\n+           DocumentBuilderFactory fty = DocumentBuilderFactory.newInstance();\n+           if (skipValidation) {\n+               return fty;\n+           }\n+\n+           fty.setNamespaceAware(true);\n \n         // Fix XXE vulnerability\n-        fty.setXIncludeAware(false);\n-        fty.setExpandEntityReferences(false);\n-        fty.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n-        fty.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n-        fty.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n-\n-        return fty;\n-    }\n-\n-    public String getNodeValue(Document xmlDocument, String xPathExpression, String attributeName) throws XPathExpressionException {\n-        XPath xPath = XPathFactory.newInstance().newXPath();\n-        XPathExpression formXPathExpression = xPath.compile(xPathExpression);\n-\n-        if (StringHelper.isEmpty(attributeName)) {\n-            String nodeValue = (String) formXPathExpression.evaluate(xmlDocument, XPathConstants.STRING);\n-\n-            return nodeValue;\n-        }\n-\n-        Node node = ((Node) formXPathExpression.evaluate(xmlDocument, XPathConstants.NODE));\n-        if (node == null) {\n-            return null;\n-        }\n-\n-        Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n-        if (attributeNode == null) {\n-        \tif (node.getChildNodes().getLength() == 1) {\n-        \t\tnode = node.getFirstChild();\n-        \t\tif (node.getNodeType() == Node.TEXT_NODE)  {\n-        \t\t\treturn node.getNodeValue();\n-        \t\t}\n-        \t}\n-            return null;\n-        }\n-\n-        return attributeNode.getNodeValue();\n-    }\n-\n-}\n+           fty.setXIncludeAware(false);\n+           fty.setExpandEntityReferences(false);\n+           fty.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+           fty.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+           fty.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+           return fty;\n+       }\n+\n+       public String getNodeValue(Document xmlDocument, String xPathExpression, String attributeName) throws XPathExpressionException {\n+           XPath xPath = XPathFactory.newInstance().newXPath();\n+           XPathExpression formXPathExpression = xPath.compile(xPathExpression);\n+           if (StringHelper.isEmpty(attributeName)) {\n+               String nodeValue = (String) formXPathExpression.evaluate(xmlDocument, XPathConstants.STRING);\n+\n+               return nodeValue;\n+           }\n+\n+           Node node = ((Node) formXPathExpression.evaluate(xmlDocument, XPathConstants.NODE));\n+           if (node == null) {\n+               return null;\n+           }\n+\n+           Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n+           if (attributeNode == null) {\n+               if (node.getChildNodes().getLength() == 1) {\n+                   node = node.getFirstChild();\n+                   if (node.getNodeType() == Node.TEXT_NODE) {\n+                       return node.getNodeValue();\n+                   }\n+               }\n+\n+               return null;\n+           }\n+\n+           return attributeNode.getNodeValue();\n+       }\n+\n+   }\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "132",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/80/XmlService.java\nindex e25ca7d4305..92427718cb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/80/XmlService.java\n@@ -128,7 +128,7 @@ public class XmlService {\n \n         Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n         if (attributeNode == null) {\n-        \tif (node.getChildNodes().getLength() == 1) {\n+        if (node.getChildNodes().getLength() == 1) {\n         \t\tnode = node.getFirstChild();\n         \t\tif (node.getNodeType() == Node.TEXT_NODE)  {\n         \t\t\treturn node.getNodeValue();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "132",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/80/XmlService.java\nindex e25ca7d4305..954fb55cb85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/80/XmlService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/80/XmlService.java\n@@ -128,7 +128,7 @@ public class XmlService {\n \n         Node attributeNode = node.getAttributes().getNamedItem(attributeName);\n         if (attributeNode == null) {\n-        \tif (node.getChildNodes().getLength() == 1) {\n+            if (node.getChildNodes().getLength() == 1) {\n         \t\tnode = node.getFirstChild();\n         \t\tif (node.getNodeType() == Node.TEXT_NODE)  {\n         \t\t\treturn node.getNodeValue();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}