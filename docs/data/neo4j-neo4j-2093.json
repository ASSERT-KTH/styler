{
    "project_name": "neo4j-neo4j",
    "error_id": "2093",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2093/ProcedureConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2093/ProcedureConfig.java\nindex 434d0b2afc0..d99e7d7f6b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2093/ProcedureConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2093/ProcedureConfig.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.impl;\n \n import java.time.ZoneId;\n@@ -51,74 +52,73 @@ public class ProcedureConfig\n         this.defaultValue = \"\";\n         this.matchers = Collections.emptyList();\n         this.accessPatterns = Collections.emptyList();\n-        this.whiteList = Collections.singletonList( compilePattern( \"*\" ) );\n+        this.whiteList = Collections.singletonList(compilePattern(\"*\"));\n         this.defaultTemporalTimeZone = UTC;\n     }\n \n-    public ProcedureConfig( Config config )\n+    public ProcedureConfig(Config config)\n     {\n-        this.defaultValue = config.get( GraphDatabaseSettings.default_allowed );\n-\n-        String allowedRoles = config.get( GraphDatabaseSettings.procedure_roles );\n-        this.matchers = Stream.of( allowedRoles.split( SETTING_DELIMITER ) )\n-                .map( procToRoleSpec -> procToRoleSpec.split( MAPPING_DELIMITER ) )\n-                .filter( spec -> spec.length > 1 )\n-                .map( spec ->\n-                {\n-                    String[] roles =\n-                            stream( spec[1].split( ROLES_DELIMITER ) ).map( String::trim ).toArray( String[]::new );\n-                    return new ProcMatcher( spec[0].trim(), roles );\n-                } ).collect( Collectors.toList() );\n-\n-        this.accessPatterns = parseMatchers( config.get( GraphDatabaseSettings.procedure_unrestricted ), ProcedureConfig::compilePattern );\n-        this.whiteList = parseMatchers( config.get( GraphDatabaseSettings.procedure_allowlist ), ProcedureConfig::compilePattern );\n-        this.defaultTemporalTimeZone = config.get( GraphDatabaseSettings.db_temporal_timezone );\n+        this.defaultValue = config.get(GraphDatabaseSettings.default_allowed);\n+\n+        String allowedRoles = config.get(GraphDatabaseSettings.procedure_roles);\n+        this.matchers = Stream.of(allowedRoles.split(SETTING_DELIMITER))\n+          .map(procToRoleSpec -> procToRoleSpec.split(MAPPING_DELIMITER))\n+          .filter(spec -> spec.length > 1)\n+          .map(spec ->\n+          {\n+              String[] roles =\n+                stream(spec[1].split(ROLES_DELIMITER)).map(String::trim).toArray(String[]::new);\n+              return new ProcMatcher(spec[0].trim(), roles);\n+          }).collect(Collectors.toList());\n+\n+        this.accessPatterns = parseMatchers(config.get(GraphDatabaseSettings.procedure_unrestricted), ProcedureConfig::compilePattern);\n+        this.whiteList = parseMatchers(config.get(GraphDatabaseSettings.procedure_allowlist), ProcedureConfig::compilePattern);\n+        this.defaultTemporalTimeZone = config.get(GraphDatabaseSettings.db_temporal_timezone);\n     }\n \n-    private <T> List<T> parseMatchers( List<String> fullAccessProcedures, Function<String,T>\n-            matchFunc )\n+    private <T> List<T> parseMatchers(List<String> fullAccessProcedures, Function<String, T>\n+      matchFunc)\n     {\n-        if ( fullAccessProcedures == null || fullAccessProcedures.isEmpty() )\n+        if (fullAccessProcedures == null || fullAccessProcedures.isEmpty())\n         {\n             return Collections.emptyList();\n         }\n-        return fullAccessProcedures.stream().map( matchFunc ).collect( Collectors.toList() );\n+        return fullAccessProcedures.stream().map(matchFunc).collect(Collectors.toList());\n     }\n \n-    public String[] rolesFor( String procedureName )\n+    public String[] rolesFor(String procedureName)\n     {\n-        String[] wildCardRoles = matchers.stream().filter( matcher -> matcher.matches( procedureName ) )\n-                .map( ProcMatcher::roles ).reduce( new String[0],\n-                        ( acc, next ) -> Stream.concat( stream( acc ), stream( next ) ).toArray( String[]::new ) );\n-        if ( wildCardRoles.length > 0 )\n+        String[] wildCardRoles = matchers.stream().filter(matcher -> matcher.matches(procedureName))\n+          .map(ProcMatcher::roles).reduce(new String[0],\n+            (acc, next) -> Stream.concat(stream(acc), stream(next)).toArray(String[]::new));\n+        if (wildCardRoles.length > 0)\n         {\n             return wildCardRoles;\n-        }\n-        else\n+        } else\n         {\n             return getDefaultValue();\n         }\n     }\n \n-    public boolean fullAccessFor( String procedureName )\n+    public boolean fullAccessFor(String procedureName)\n     {\n-        return accessPatterns.stream().anyMatch( pattern -> pattern.matcher( procedureName ).matches() );\n+        return accessPatterns.stream().anyMatch(pattern -> pattern.matcher(procedureName).matches());\n     }\n \n-    public boolean isWhitelisted( String procedureName )\n+    public boolean isWhitelisted(String procedureName)\n     {\n-        return whiteList.stream().anyMatch( pattern -> pattern.matcher( procedureName ).matches() );\n+        return whiteList.stream().anyMatch(pattern -> pattern.matcher(procedureName).matches());\n     }\n \n-    private static Pattern compilePattern( String procedure )\n+    private static Pattern compilePattern(String procedure)\n     {\n-        procedure = procedure.trim().replaceAll( \"([\\\\[\\\\]\\\\\\\\?()^${}+|.])\", \"\\\\\\\\$1\" );\n-        return Pattern.compile( procedure.replaceAll( \"\\\\*\", \".*\" ) );\n+        procedure = procedure.trim().replaceAll(\"([\\\\[\\\\]\\\\\\\\?()^${}+|.])\", \"\\\\\\\\$1\");\n+        return Pattern.compile(procedure.replaceAll(\"\\\\*\", \".*\"));\n     }\n \n     private String[] getDefaultValue()\n     {\n-        return defaultValue == null || defaultValue.isEmpty() ? new String[0] : new String[]{defaultValue};\n+        return defaultValue == null || defaultValue.isEmpty() ? new String[0] : new String[] {defaultValue};\n     }\n \n     static final ProcedureConfig DEFAULT = new ProcedureConfig();\n@@ -133,15 +133,15 @@ public class ProcedureConfig\n         private final Pattern pattern;\n         private final String[] roles;\n \n-        private ProcMatcher( String procedurePattern, String[] roles )\n+        private ProcMatcher(String procedurePattern, String[] roles)\n         {\n-            this.pattern = Pattern.compile( procedurePattern.replaceAll( \"\\\\.\", \"\\\\\\\\.\" ).replaceAll( \"\\\\*\", \".*\" ) );\n+            this.pattern = Pattern.compile(procedurePattern.replaceAll(\"\\\\.\", \"\\\\\\\\.\").replaceAll(\"\\\\*\", \".*\"));\n             this.roles = roles;\n         }\n \n-        boolean matches( String procedureName )\n+        boolean matches(String procedureName)\n         {\n-            return pattern.matcher( procedureName ).matches();\n+            return pattern.matcher(procedureName).matches();\n         }\n \n         String[] roles()\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}