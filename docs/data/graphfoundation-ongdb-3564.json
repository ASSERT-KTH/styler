{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3564",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3564/LevelSelectorOrderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3564/LevelSelectorOrderer.java\nindex 15a87721765..35d856ba3c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3564/LevelSelectorOrderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3564/LevelSelectorOrderer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import java.util.concurrent.atomic.AtomicInteger;\n@@ -26,100 +27,99 @@ import org.neo4j.graphdb.impl.traversal.AbstractSelectorOrderer;\n \n public class LevelSelectorOrderer extends AbstractSelectorOrderer<LevelSelectorOrderer.Entry>\n {\n-    private final boolean stopDescentOnResult;\n-    private final TotalDepth totalDepth = new TotalDepth();\n-    private final int maxDepth;\n+  private final boolean stopDescentOnResult;\n+  private final TotalDepth totalDepth = new TotalDepth();\n+  private final int maxDepth;\n \n-    public LevelSelectorOrderer( BranchSelector startSelector, BranchSelector endSelector,\n-            boolean stopDescentOnResult, int maxDepth )\n-    {\n-        super( startSelector, endSelector );\n-        this.stopDescentOnResult = stopDescentOnResult;\n-        this.maxDepth = maxDepth;\n+  public LevelSelectorOrderer(BranchSelector startSelector, BranchSelector endSelector,\n+                              boolean stopDescentOnResult, int maxDepth)\n+  {\n+    super(startSelector, endSelector);\n+    this.stopDescentOnResult = stopDescentOnResult;\n+    this.maxDepth = maxDepth;\n+  }\n+\n+  @Override\n+  protected Entry initialState()\n+  {\n+    return new Entry();\n+  }\n+\n+  @Override\n+  public TraversalBranch next(TraversalContext metadata)\n+  {\n+    TraversalBranch branch = nextBranchFromCurrentSelector(metadata, false);\n+    Entry state = getStateForCurrentSelector();\n+    AtomicInteger previousDepth = state.depth;\n+    if (branch != null && branch.length() == previousDepth.get())\n+    {   // Same depth as previous branch returned from this side.\n+      return branch;\n     }\n \n-    @Override\n-    protected Entry initialState()\n+    if (branch != null)\n     {\n-        return new Entry();\n+      totalDepth.set(currentSide(), branch.length());\n+    }\n+    if ((stopDescentOnResult && (metadata.getNumberOfPathsReturned() > 0)) ||\n+        (totalDepth.get() > (maxDepth + 1)))\n+    {\n+      nextSelector();\n+      return null;\n     }\n \n-    @Override\n-    public TraversalBranch next( TraversalContext metadata )\n+    if (branch != null)\n+    {\n+      previousDepth.set(branch.length());\n+      state.branch = branch;\n+    }\n+    BranchSelector otherSelector = nextSelector();\n+    Entry otherState = getStateForCurrentSelector();\n+    TraversalBranch otherBranch = otherState.branch;\n+    if (otherBranch != null)\n     {\n-        TraversalBranch branch = nextBranchFromCurrentSelector( metadata, false );\n-        Entry state = getStateForCurrentSelector();\n-        AtomicInteger previousDepth = state.depth;\n-        if ( branch != null && branch.length() == previousDepth.get() )\n-        {   // Same depth as previous branch returned from this side.\n-            return branch;\n-        }\n+      otherState.branch = null;\n+      return otherBranch;\n+    }\n \n-        if ( branch != null )\n-        {\n-            totalDepth.set( currentSide(), branch.length() );\n-        }\n-        if ( (stopDescentOnResult && (metadata.getNumberOfPathsReturned() > 0)) ||\n-                (totalDepth.get() > (maxDepth + 1)) )\n-        {\n-            nextSelector();\n-            return null;\n-        }\n+    otherBranch = otherSelector.next(metadata);\n+    if (otherBranch != null)\n+    {\n+      return otherBranch;\n+    } else\n+    {\n+      return branch;\n+    }\n+  }\n \n-        if ( branch != null )\n-        {\n-            previousDepth.set( branch.length() );\n-            state.branch = branch;\n-        }\n-        BranchSelector otherSelector = nextSelector();\n-        Entry otherState = getStateForCurrentSelector();\n-        TraversalBranch otherBranch = otherState.branch;\n-        if ( otherBranch != null )\n-        {\n-            otherState.branch = null;\n-            return otherBranch;\n-        }\n+  static class Entry\n+  {\n+    private final AtomicInteger depth = new AtomicInteger();\n+    private TraversalBranch branch;\n+  }\n \n-        otherBranch = otherSelector.next( metadata );\n-        if ( otherBranch != null )\n-        {\n-            return otherBranch;\n-        }\n-        else\n-        {\n-            return branch;\n-        }\n-    }\n+  private static class TotalDepth\n+  {\n+    private int out;\n+    private int in;\n \n-    static class Entry\n+    void set(Direction side, int depth)\n     {\n-        private final AtomicInteger depth = new AtomicInteger();\n-        private TraversalBranch branch;\n+      switch (side)\n+      {\n+        case OUTGOING:\n+          out = depth;\n+          break;\n+        case INCOMING:\n+          in = depth;\n+          break;\n+        default:\n+          break;\n+      }\n     }\n \n-    private static class TotalDepth\n+    int get()\n     {\n-        private int out;\n-        private int in;\n-\n-        void set( Direction side, int depth )\n-        {\n-            switch ( side )\n-            {\n-            case OUTGOING:\n-                out = depth;\n-                break;\n-            case INCOMING:\n-                in = depth;\n-                break;\n-            default:\n-                break;\n-            }\n-        }\n-\n-        int get()\n-        {\n-            return out + in;\n-        }\n+      return out + in;\n     }\n+  }\n }\n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3564/LevelSelectorOrderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3564/LevelSelectorOrderer.java\nindex 15a87721765..3eb05a4a53a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3564/LevelSelectorOrderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3564/LevelSelectorOrderer.java\n@@ -51,7 +51,8 @@ public class LevelSelectorOrderer extends AbstractSelectorOrderer<LevelSelectorO\n         Entry state = getStateForCurrentSelector();\n         AtomicInteger previousDepth = state.depth;\n         if ( branch != null && branch.length() == previousDepth.get() )\n-        {   // Same depth as previous branch returned from this side.\n+        {\n+    // Same depth as previous branch returned from this side.\n             return branch;\n         }\n \n@@ -59,8 +60,8 @@ public class LevelSelectorOrderer extends AbstractSelectorOrderer<LevelSelectorO\n         {\n             totalDepth.set( currentSide(), branch.length() );\n         }\n-        if ( (stopDescentOnResult && (metadata.getNumberOfPathsReturned() > 0)) ||\n-                (totalDepth.get() > (maxDepth + 1)) )\n+\n+if ( ( stopDescentOnResult && (metadata.getNumberOfPathsReturned() > 0 )) || (totalDepth.get() > (maxDepth + 1 )) )\n         {\n             nextSelector();\n             return null;\n@@ -71,7 +72,8 @@ public class LevelSelectorOrderer extends AbstractSelectorOrderer<LevelSelectorO\n             previousDepth.set( branch.length() );\n             state.branch = branch;\n         }\n-        BranchSelector otherSelector = nextSelector();\n+\n+BranchSelector otherSelector = nextSelector();\n         Entry otherState = getStateForCurrentSelector();\n         TraversalBranch otherBranch = otherState.branch;\n         if ( otherBranch != null )\n@@ -122,4 +124,4 @@ public class LevelSelectorOrderer extends AbstractSelectorOrderer<LevelSelectorO\n             return out + in;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}