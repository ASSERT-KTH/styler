{
    "project_name": "wso2-attic-commons",
    "error_id": "406",
    "information": {
        "errors": [
            {
                "line": "14",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class ReliablePartnerRoleMessageExchangeImpl extends PartnerRoleMessageExchangeImpl {\n\n    public ReliablePartnerRoleMessageExchangeImpl(ODEProcess process, long iid, String mexId, PartnerLinkModel oplink, Operation op,\n            EndpointReference epr, EndpointReference myRoleEPR, PartnerRoleChannel partnerRoleChannel) {\n        super(process, iid, mexId, oplink, op, epr, myRoleEPR, partnerRoleChannel);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/406/ReliablePartnerRoleMessageExchangeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/406/ReliablePartnerRoleMessageExchangeImpl.java\nindex ec1935f2c20..58eb7cfe54c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/406/ReliablePartnerRoleMessageExchangeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/406/ReliablePartnerRoleMessageExchangeImpl.java\n@@ -11,61 +11,65 @@ import org.apache.ode.bpel.rapi.PartnerLinkModel;\n \n public class ReliablePartnerRoleMessageExchangeImpl extends PartnerRoleMessageExchangeImpl {\n \n-    public ReliablePartnerRoleMessageExchangeImpl(ODEProcess process, long iid, String mexId, PartnerLinkModel oplink, Operation op,\n-            EndpointReference epr, EndpointReference myRoleEPR, PartnerRoleChannel partnerRoleChannel) {\n-        super(process, iid, mexId, oplink, op, epr, myRoleEPR, partnerRoleChannel);\n-    }\n+  public ReliablePartnerRoleMessageExchangeImpl(ODEProcess process, long iid, String mexId, PartnerLinkModel oplink,\n+                                                Operation op,\n+                                                EndpointReference epr, EndpointReference myRoleEPR,\n+                                                PartnerRoleChannel partnerRoleChannel) {\n+    super(process, iid, mexId, oplink, op, epr, myRoleEPR, partnerRoleChannel);\n+  }\n \n-    @Override\n-    protected void checkReplyContextOk() {\n-        super.checkReplyContextOk();\n+  @Override\n+  protected void checkReplyContextOk() {\n+    super.checkReplyContextOk();\n \n-        if (!_contexts.isTransacted())\n-            throw new BpelEngineException(\"Cannot replyXXX from non-transaction context!\");\n+    if (!_contexts.isTransacted()) {\n+      throw new BpelEngineException(\"Cannot replyXXX from non-transaction context!\");\n     }\n+  }\n+\n+  @Override\n+  public void replyAsync(String foreignKey) {\n+    _accessLock.lock();\n+    try {\n+      checkReplyContextOk();\n \n-    @Override\n-    public void replyAsync(String foreignKey) {\n-        _accessLock.lock();\n-        try {\n-            checkReplyContextOk();\n+      if (_state != State.INVOKE_XXX) {\n+        throw new IllegalStateException(\n+          \"Invalid context for replyAsync(); can only be called during MessageExchangeContext call. \");\n+      }\n \n-            if (_state != State.INVOKE_XXX)\n-                throw new IllegalStateException(\n-                    \"Invalid context for replyAsync(); can only be called during MessageExchangeContext call. \");\n-            \n-            _foreignKey = foreignKey;\n-        } finally {\n-            _accessLock.unlock();\n-        }\n+      _foreignKey = foreignKey;\n+    } finally {\n+      _accessLock.unlock();\n     }\n+  }\n \n-    @Override\n-    protected void asyncACK() {\n-        // TODO Auto-generated method stub\n-        assert _contexts.isTransacted() : \"checkReplyContext() should have prevented us from getting here.\";\n-        assert !_process.isInMemory() : \"resumeInstance() for reliable in-mem processes makes no sense.\";\n+  @Override\n+  protected void asyncACK() {\n+    // TODO Auto-generated method stub\n+    assert _contexts.isTransacted() : \"checkReplyContext() should have prevented us from getting here.\";\n+    assert !_process.isInMemory() : \"resumeInstance() for reliable in-mem processes makes no sense.\";\n \n-        MessageExchangeDAO mexdao = getDAO();\n-        final WorkEvent we = generatePartnerResponseWorkEvent(mexdao);\n-        save(mexdao);\n-        _contexts.scheduler.schedulePersistedJob(we.getDetail(), null);\n-    }\n+    MessageExchangeDAO mexdao = getDAO();\n+    final WorkEvent we = generatePartnerResponseWorkEvent(mexdao);\n+    save(mexdao);\n+    _contexts.scheduler.schedulePersistedJob(we.getDetail(), null);\n+  }\n \n \n-    @Override\n-    public InvocationStyle getInvocationStyle() {\n-        return InvocationStyle.RELIABLE;\n-    }\n+  @Override\n+  public InvocationStyle getInvocationStyle() {\n+    return InvocationStyle.RELIABLE;\n+  }\n \n-    private WorkEvent generatePartnerResponseWorkEvent(MessageExchangeDAO mexdao) {\n-        WorkEvent we = new WorkEvent();\n-        we.setProcessId(_process.getPID());\n-        we.setChannel(mexdao.getChannel());\n-        we.setIID(_iid);\n-        we.setMexId(_mexId);\n-        we.setType(WorkEvent.Type.PARTNER_RESPONSE);\n-        return we;\n-    }\n+  private WorkEvent generatePartnerResponseWorkEvent(MessageExchangeDAO mexdao) {\n+    WorkEvent we = new WorkEvent();\n+    we.setProcessId(_process.getPID());\n+    we.setChannel(mexdao.getChannel());\n+    we.setIID(_iid);\n+    we.setMexId(_mexId);\n+    we.setType(WorkEvent.Type.PARTNER_RESPONSE);\n+    return we;\n+  }\n \n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/406/ReliablePartnerRoleMessageExchangeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/406/ReliablePartnerRoleMessageExchangeImpl.java\nindex ec1935f2c20..06182465c22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/406/ReliablePartnerRoleMessageExchangeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/406/ReliablePartnerRoleMessageExchangeImpl.java\n@@ -33,8 +33,7 @@ public class ReliablePartnerRoleMessageExchangeImpl extends PartnerRoleMessageEx\n             if (_state != State.INVOKE_XXX)\n                 throw new IllegalStateException(\n                     \"Invalid context for replyAsync(); can only be called during MessageExchangeContext call. \");\n-            \n-            _foreignKey = foreignKey;\n+_foreignKey = foreignKey;\n         } finally {\n             _accessLock.unlock();\n         }\n@@ -68,4 +67,4 @@ public class ReliablePartnerRoleMessageExchangeImpl extends PartnerRoleMessageEx\n         return we;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}