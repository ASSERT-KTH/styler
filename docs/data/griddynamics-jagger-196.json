{
    "project_name": "griddynamics-jagger",
    "error_id": "196",
    "information": {
        "errors": [
            {
                "line": "61",
                "column": "5",
                "severity": "warning",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "    /** Default constructor */\n    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name)\n    {\n        super(sessionId, taskId, kernelContext,new SimpleMetricCalculator(),name);\n        this.name = name;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/196/SuccessRateCollector.java\nindex c04e996ca9b..1aaf3ce35d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler/196/SuccessRateCollector.java\n@@ -57,8 +57,7 @@ public class SuccessRateCollector<Q, R, E> extends MetricCollector<Q, R, E> {\n     private long startTime = 0;\n \n     /** Default constructor */\n-    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name)\n-    {\n+    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name) {\n         super(sessionId, taskId, kernelContext,new SimpleMetricCalculator(),name);\n         this.name = name;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/196/SuccessRateCollector.java\nindex c04e996ca9b..c8380554839 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/196/SuccessRateCollector.java\n@@ -28,7 +28,9 @@ import com.griddynamics.jagger.storage.fs.logging.MetricLogEntry;\n \n import java.io.File;\n \n-/** Collects number of pass and fail invokes\n+/**\n+ * Collects number of pass and fail invokes\n+ *\n  * @author Dmitry Latnikov\n  * @n\n  * @par Details:\n@@ -37,12 +39,11 @@ import java.io.File;\n  * Calculation is provided by aggregators: @n\n  * @li @ref SuccessRateAggregatorProvider @n\n  * @li @ref SuccessRateFailsAggregatorProvider @n\n- *\n  * @par Usage example in XML:\n  * To use this collector add @xlink{metric-success-rate} collector to @xlink{test-description,info-collectors} block.\n  * @n\n- * @dontinclude  tasks-new.conf.xml\n- * @skip  begin: following section is used for docu generation - metric-success-rate\n+ * @dontinclude tasks-new.conf.xml\n+ * @skip begin: following section is used for docu generation - metric-success-rate\n  * @until end: following section is used for docu generation - metric-success-rate\n  * @n\n  * @par Result example:\n@@ -56,37 +57,48 @@ public class SuccessRateCollector<Q, R, E> extends MetricCollector<Q, R, E> {\n     private final String name;\n     private long startTime = 0;\n \n-    /** Default constructor */\n-    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name)\n-    {\n-        super(sessionId, taskId, kernelContext,new SimpleMetricCalculator(),name);\n+    /**\n+     * Default constructor\n+     */\n+    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name) {\n+        super(sessionId, taskId, kernelContext, new SimpleMetricCalculator(), name);\n         this.name = name;\n     }\n \n-    /** Method is not used for this collector => disabled */\n+    /**\n+     * Method is not used for this collector => disabled\n+     */\n     @Override\n     public void flush() {\n     }\n \n-    /** Method is called before invoke to save invoke start time. Later is used for logging */\n+    /**\n+     * Method is called before invoke to save invoke start time. Later is used for logging\n+     */\n     @Override\n     public void onStart(Object query, Object endpoint) {\n         startTime = System.currentTimeMillis();\n     }\n \n-    /** Method is called when invoke was successful */\n+    /**\n+     * Method is called when invoke was successful\n+     */\n     @Override\n     public void onSuccess(Object query, Object endpoint, Object result, long duration) {\n         log(1);\n     }\n \n-    /** Method is called when invoke failed */\n+    /**\n+     * Method is called when invoke failed\n+     */\n     @Override\n     public void onFail(Object query, Object endpoint, InvocationException e) {\n         log(0);\n     }\n \n-    /** Method is called when some error occurred */\n+    /**\n+     * Method is called when some error occurred\n+     */\n     @Override\n     public void onError(Object query, Object endpoint, Throwable error) {\n         log(0);\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/196/SuccessRateCollector.java\nindex c04e996ca9b..1aaf3ce35d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_random/196/SuccessRateCollector.java\n@@ -57,8 +57,7 @@ public class SuccessRateCollector<Q, R, E> extends MetricCollector<Q, R, E> {\n     private long startTime = 0;\n \n     /** Default constructor */\n-    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name)\n-    {\n+    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name) {\n         super(sessionId, taskId, kernelContext,new SimpleMetricCalculator(),name);\n         this.name = name;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "column": "105",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/196/SuccessRateCollector.java\nindex c04e996ca9b..30ebe99b935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/196/SuccessRateCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/196/SuccessRateCollector.java\n@@ -57,9 +57,8 @@ public class SuccessRateCollector<Q, R, E> extends MetricCollector<Q, R, E> {\n     private long startTime = 0;\n \n     /** Default constructor */\n-    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name)\n-    {\n-        super(sessionId, taskId, kernelContext,new SimpleMetricCalculator(),name);\n+    public SuccessRateCollector(String sessionId, String taskId, NodeContext kernelContext, String name){\n+    super(sessionId, taskId, kernelContext,new SimpleMetricCalculator(),name);\n         this.name = name;\n     }\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}