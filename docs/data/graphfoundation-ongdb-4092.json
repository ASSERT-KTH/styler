{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4092",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "29",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "29",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4092/Headers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4092/Headers.java\nindex e5afdb67461..903fa345a2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4092/Headers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4092/Headers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.kvstore;\n \n import java.util.HashMap;\n@@ -25,166 +26,166 @@ import java.util.Set;\n \n public abstract class Headers\n {\n-    public abstract <Value> Value get( HeaderField<Value> field );\n+  public abstract <Value> Value get(HeaderField<Value> field);\n+\n+  public static Builder headersBuilder()\n+  {\n+    return new Builder(new HashMap<>());\n+  }\n \n-    public static Builder headersBuilder()\n+  public static class Builder\n+  {\n+    private final Map<HeaderField<?>, Object> headers;\n+\n+    Builder(Map<HeaderField<?>, Object> headers)\n     {\n-        return new Builder( new HashMap<>() );\n+      this.headers = headers;\n     }\n \n-    public static class Builder\n+    public final <Value> Builder put(HeaderField<Value> field, Value value)\n     {\n-        private final Map<HeaderField<?>, Object> headers;\n-\n-        Builder( Map<HeaderField<?>, Object> headers )\n-        {\n-            this.headers = headers;\n-        }\n-\n-        public final <Value> Builder put( HeaderField<Value> field, Value value )\n-        {\n-            headers.put( field, value );\n-            return this;\n-        }\n-\n-        @SuppressWarnings( \"unchecked\" )\n-        public final <Value> Value get( HeaderField<Value> field )\n-        {\n-            return (Value) headers.get( field );\n-        }\n-\n-        public Headers headers()\n-        {\n-            return new Simple( new HashMap<>( headers ) );\n-        }\n+      headers.put(field, value);\n+      return this;\n     }\n \n-    <Value> void write( HeaderField<Value> field, BigEndianByteArrayBuffer target )\n+    @SuppressWarnings(\"unchecked\")\n+    public final <Value> Value get(HeaderField<Value> field)\n     {\n-        field.write( get( field ), target );\n+      return (Value) headers.get(field);\n     }\n \n-    public abstract Set<HeaderField<?>> fields();\n-\n-    private Headers()\n+    public Headers headers()\n     {\n-        // internal subclasses\n+      return new Simple(new HashMap<>(headers));\n     }\n-\n-    static Headers indexedHeaders( Map<HeaderField<?>, Integer> indexes, Object[] values )\n+  }\n+\n+  <Value> void write(HeaderField<Value> field, BigEndianByteArrayBuffer target)\n+  {\n+    field.write(get(field), target);\n+  }\n+\n+  public abstract Set<HeaderField<?>> fields();\n+\n+  private Headers()\n+  {\n+    // internal subclasses\n+  }\n+\n+  static Headers indexedHeaders(Map<HeaderField<?>, Integer> indexes, Object[] values)\n+  {\n+    return new Indexed(indexes, values);\n+  }\n+\n+  @Override\n+  public final int hashCode()\n+  {\n+    int hash = 0;\n+    for (HeaderField<?> field : fields())\n     {\n-        return new Indexed( indexes, values );\n+      hash ^= field.hashCode();\n     }\n+    return hash;\n+  }\n \n-    @Override\n-    public final int hashCode()\n+  @Override\n+  public final boolean equals(Object obj)\n+  {\n+    if (this == obj)\n     {\n-        int hash = 0;\n-        for ( HeaderField<?> field : fields() )\n+      return true;\n+    }\n+    if (obj instanceof Headers)\n+    {\n+      Headers that = (Headers) obj;\n+      Iterable<HeaderField<?>> these = this.fields();\n+      Iterable<HeaderField<?>> those = that.fields();\n+      if (these.equals(those))\n+      {\n+        for (HeaderField<?> field : these)\n         {\n-            hash ^= field.hashCode();\n+          Object tis = this.get(field);\n+          Object tat = that.get(field);\n+          if (!tis.equals(tat))\n+          {\n+            return false;\n+          }\n         }\n-        return hash;\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n+\n+  @Override\n+  public final String toString()\n+  {\n+    StringBuilder result = new StringBuilder().append(\"Headers{\");\n+    String pre = \"\";\n+    for (HeaderField<?> field : fields())\n+    {\n+      result.append(pre).append(field).append(\": \").append(get(field));\n+      pre = \", \";\n+    }\n+    return result.append(\"}\").toString();\n+  }\n \n-    @Override\n-    public final boolean equals( Object obj )\n+  private static class Indexed extends Headers\n+  {\n+    private final Map<HeaderField<?>, Integer> indexes;\n+    private final Object[] values;\n+\n+    Indexed(Map<HeaderField<?>, Integer> indexes, Object[] values)\n     {\n-        if ( this == obj )\n-        {\n-            return true;\n-        }\n-        if ( obj instanceof Headers )\n-        {\n-            Headers that = (Headers) obj;\n-            Iterable<HeaderField<?>> these = this.fields();\n-            Iterable<HeaderField<?>> those = that.fields();\n-            if ( these.equals( those ) )\n-            {\n-                for ( HeaderField<?> field : these )\n-                {\n-                    Object tis = this.get( field );\n-                    Object tat = that.get( field );\n-                    if ( !tis.equals( tat ) )\n-                    {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-        }\n-        return false;\n+      this.indexes = indexes;\n+      this.values = values;\n     }\n \n     @Override\n-    public final String toString()\n+    @SuppressWarnings(\"unchecked\")\n+    public <Value> Value get(HeaderField<Value> field)\n     {\n-        StringBuilder result = new StringBuilder().append( \"Headers{\" );\n-        String pre = \"\";\n-        for ( HeaderField<?> field : fields() )\n-        {\n-            result.append( pre ).append( field ).append( \": \" ).append( get( field ) );\n-            pre = \", \";\n-        }\n-        return result.append( \"}\" ).toString();\n+      Integer index = indexes.get(field);\n+      return index == null ? null : (Value) values[index];\n     }\n \n-    private static class Indexed extends Headers\n+    @Override\n+    public Set<HeaderField<?>> fields()\n     {\n-        private final Map<HeaderField<?>, Integer> indexes;\n-        private final Object[] values;\n-\n-        Indexed( Map<HeaderField<?>, Integer> indexes, Object[] values )\n-        {\n-            this.indexes = indexes;\n-            this.values = values;\n-        }\n+      return indexes.keySet();\n+    }\n+  }\n \n-        @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        public <Value> Value get( HeaderField<Value> field )\n-        {\n-            Integer index = indexes.get( field );\n-            return index == null ? null : (Value) values[index];\n-        }\n+  private static class Simple extends Headers\n+  {\n+    private final Map<HeaderField<?>, Object> headers;\n \n-        @Override\n-        public Set<HeaderField<?>> fields()\n-        {\n-            return indexes.keySet();\n-        }\n+    Simple(Map<HeaderField<?>, Object> headers)\n+    {\n+      this.headers = headers;\n     }\n \n-    private static class Simple extends Headers\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <Value> Value get(HeaderField<Value> field)\n     {\n-        private final Map<HeaderField<?>, Object> headers;\n-\n-        Simple( Map<HeaderField<?>, Object> headers )\n-        {\n-            this.headers = headers;\n-        }\n-\n-        @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        public <Value> Value get( HeaderField<Value> field )\n-        {\n-            return (Value) headers.get( field );\n-        }\n+      return (Value) headers.get(field);\n+    }\n \n-        @Override\n-        public Set<HeaderField<?>> fields()\n-        {\n-            return headers.keySet();\n-        }\n+    @Override\n+    public Set<HeaderField<?>> fields()\n+    {\n+      return headers.keySet();\n     }\n+  }\n \n-    static Map<HeaderField<?>, Object> copy( Headers headers )\n+  static Map<HeaderField<?>, Object> copy(Headers headers)\n+  {\n+    Map<HeaderField<?>, Object> copy = new HashMap<>();\n+    for (HeaderField<?> field : headers.fields())\n     {\n-        Map<HeaderField<?>, Object> copy = new HashMap<>();\n-        for ( HeaderField<?> field : headers.fields() )\n-        {\n-            copy.put( field, headers.get( field ) );\n-        }\n-        return copy;\n+      copy.put(field, headers.get(field));\n     }\n+    return copy;\n+  }\n }\n",
            "diff_size": 204
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4092/Headers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4092/Headers.java\nindex e5afdb67461..9905ff05436 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4092/Headers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4092/Headers.java\n@@ -84,7 +84,8 @@ public abstract class Headers\n         {\n             hash ^= field.hashCode();\n         }\n-        return hash;\n+\n+return hash;\n     }\n \n     @Override\n@@ -94,7 +95,8 @@ public abstract class Headers\n         {\n             return true;\n         }\n-        if ( obj instanceof Headers )\n+\n+if ( obj instanceof Headers )\n         {\n             Headers that = (Headers) obj;\n             Iterable<HeaderField<?>> these = this.fields();\n@@ -126,7 +128,8 @@ public abstract class Headers\n             result.append( pre ).append( field ).append( \": \" ).append( get( field ) );\n             pre = \", \";\n         }\n-        return result.append( \"}\" ).toString();\n+\n+return result.append( \"}\" ).toString();\n     }\n \n     private static class Indexed extends Headers\n@@ -185,6 +188,7 @@ public abstract class Headers\n         {\n             copy.put( field, headers.get( field ) );\n         }\n-        return copy;\n+\n+return copy;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "29",
                    "column": "5",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "47",
                    "column": "9",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "53",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "9",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "66",
                    "column": "5",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "88",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "112",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "112",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "156",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4092/Headers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4092/Headers.java\nindex e5afdb67461..d67a436afe8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4092/Headers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4092/Headers.java\n@@ -25,7 +25,9 @@ import java.util.Set;\n \n public abstract class Headers\n {\n-    public abstract <Value> Value get( HeaderField<Value> field );\n+    public abstract\n+    < Value> Value get( HeaderField<Value> field )\n+    ;\n \n     public static Builder headersBuilder()\n     {\n@@ -34,21 +36,23 @@ public abstract class Headers\n \n     public static class Builder\n     {\n-        private final Map<HeaderField<?>, Object> headers;\n+        private final Map<HeaderField<?>,Object> headers;\n \n-        Builder( Map<HeaderField<?>, Object> headers )\n+        Builder( Map<HeaderField<?>,Object> headers )\n         {\n             this.headers = headers;\n         }\n \n-        public final <Value> Builder put( HeaderField<Value> field, Value value )\n+        public final\n+        < Value> Builder put( HeaderField<Value> field, Value value )\n         {\n             headers.put( field, value );\n             return this;\n         }\n \n-        @SuppressWarnings( \"unchecked\" )\n-        public final <Value> Value get( HeaderField<Value> field )\n+        @ SuppressWarnings( \"unchecked\")\n+        public final\n+        < Value> Value get( HeaderField<Value> field )\n         {\n             return (Value) headers.get( field );\n         }\n@@ -59,19 +63,20 @@ public abstract class Headers\n         }\n     }\n \n-    <Value> void write( HeaderField<Value> field, BigEndianByteArrayBuffer target )\n+    < Value> void write( HeaderField<Value> field, BigEndianByteArrayBuffer target )\n     {\n         field.write( get( field ), target );\n     }\n \n-    public abstract Set<HeaderField<?>> fields();\n+    public abstract Set<HeaderField<?>> fields()\n+    ;\n \n     private Headers()\n     {\n         // internal subclasses\n     }\n \n-    static Headers indexedHeaders( Map<HeaderField<?>, Integer> indexes, Object[] values )\n+    static Headers indexedHeaders( Map<HeaderField<?>,Integer> indexes, Object[] values )\n     {\n         return new Indexed( indexes, values );\n     }\n@@ -80,10 +85,12 @@ public abstract class Headers\n     public final int hashCode()\n     {\n         int hash = 0;\n-        for ( HeaderField<?> field : fields() )\n+        for( HeaderField<?> field : fields()\n+        )\n         {\n             hash ^= field.hashCode();\n         }\n+\n         return hash;\n     }\n \n@@ -94,6 +101,7 @@ public abstract class Headers\n         {\n             return true;\n         }\n+\n         if ( obj instanceof Headers )\n         {\n             Headers that = (Headers) obj;\n@@ -101,18 +109,20 @@ public abstract class Headers\n             Iterable<HeaderField<?>> those = that.fields();\n             if ( these.equals( those ) )\n             {\n-                for ( HeaderField<?> field : these )\n+                for( HeaderField<?> field : these)\n                 {\n                     Object tis = this.get( field );\n                     Object tat = that.get( field );\n-                    if ( !tis.equals( tat ) )\n+                    if ( ! tis.equals( tat ) )\n                     {\n                         return false;\n                     }\n                 }\n+\n                 return true;\n             }\n         }\n+\n         return false;\n     }\n \n@@ -121,31 +131,33 @@ public abstract class Headers\n     {\n         StringBuilder result = new StringBuilder().append( \"Headers{\" );\n         String pre = \"\";\n-        for ( HeaderField<?> field : fields() )\n+        for( HeaderField<?> field : fields()\n+        )\n         {\n             result.append( pre ).append( field ).append( \": \" ).append( get( field ) );\n             pre = \", \";\n         }\n+\n         return result.append( \"}\" ).toString();\n     }\n \n     private static class Indexed extends Headers\n     {\n-        private final Map<HeaderField<?>, Integer> indexes;\n+        private final Map<HeaderField<?>,Integer> indexes;\n         private final Object[] values;\n \n-        Indexed( Map<HeaderField<?>, Integer> indexes, Object[] values )\n+        Indexed( Map<HeaderField<?>,Integer> indexes, Object[] values )\n         {\n             this.indexes = indexes;\n             this.values = values;\n         }\n \n         @Override\n-        @SuppressWarnings( \"unchecked\" )\n+        @ SuppressWarnings( \"unchecked\")\n         public <Value> Value get( HeaderField<Value> field )\n         {\n             Integer index = indexes.get( field );\n-            return index == null ? null : (Value) values[index];\n+            return index == null ? null : (Value) values[ index];\n         }\n \n         @Override\n@@ -157,15 +169,15 @@ public abstract class Headers\n \n     private static class Simple extends Headers\n     {\n-        private final Map<HeaderField<?>, Object> headers;\n+        private final Map<HeaderField<?>,Object> headers;\n \n-        Simple( Map<HeaderField<?>, Object> headers )\n+        Simple( Map<HeaderField<?>,Object> headers )\n         {\n             this.headers = headers;\n         }\n \n         @Override\n-        @SuppressWarnings( \"unchecked\" )\n+        @ SuppressWarnings( \"unchecked\")\n         public <Value> Value get( HeaderField<Value> field )\n         {\n             return (Value) headers.get( field );\n@@ -178,13 +190,15 @@ public abstract class Headers\n         }\n     }\n \n-    static Map<HeaderField<?>, Object> copy( Headers headers )\n+    static Map<HeaderField<?>,Object> copy( Headers headers )\n     {\n-        Map<HeaderField<?>, Object> copy = new HashMap<>();\n-        for ( HeaderField<?> field : headers.fields() )\n+        Map<HeaderField<?>,Object> copy = new HashMap<>();\n+        for( HeaderField<?> field : headers.fields()\n+        )\n         {\n             copy.put( field, headers.get( field ) );\n         }\n+\n         return copy;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}