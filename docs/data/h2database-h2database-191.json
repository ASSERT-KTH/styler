{
    "project_name": "h2database-h2database",
    "error_id": "191",
    "information": {
        "errors": [
            {
                "line": "48",
                "column": "5",
                "severity": "warning",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "     */\n    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n    {\n        String columnNameOverride = null;\n        if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n            columnNameOverride = columnNameOverides[indexOfColumn];",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/191/ColumnNamer.java\nindex 1a93d427731..6ace279da95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/191/ColumnNamer.java\n@@ -44,8 +44,7 @@ public class ColumnNamer {\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides) {\n         String columnNameOverride = null;\n         if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/191/ColumnNamer.java\nindex 1a93d427731..6773dc4dd19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/191/ColumnNamer.java\n@@ -2,6 +2,7 @@\n  * Copyright 2004-2020 H2 Group. Multiple-Licensed under the MPL 2.0,\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  */\n+\n package org.h2.util;\n \n import java.util.HashSet;\n@@ -39,15 +40,16 @@ public class ColumnNamer {\n     /**\n      * Create a standardized column name that isn't null and doesn't have a CR/LF in it.\n      *\n-     * @param columnExp the column expression\n-     * @param indexOfColumn index of column in below array\n+     * @param columnExp          the column expression\n+     * @param indexOfColumn      index of column in below array\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+    public String getColumnName(Expression columnExp, int indexOfColumn,\n+                                String[] columnNameOverides) {\n         String columnNameOverride = null;\n-        if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n+        if (columnNameOverides != null &&\n+                columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n         }\n         return getColumnName(columnExp, indexOfColumn, columnNameOverride);\n@@ -56,32 +58,41 @@ public class ColumnNamer {\n     /**\n      * Create a standardized column name that isn't null and doesn't have a CR/LF in it.\n      *\n-     * @param columnExp the column expression\n-     * @param indexOfColumn index of column in below array\n+     * @param columnExp          the column expression\n+     * @param indexOfColumn      index of column in below array\n      * @param columnNameOverride single overriding column name\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String columnNameOverride) {\n+    public String getColumnName(Expression columnExp, int indexOfColumn,\n+                                String columnNameOverride) {\n         // try a name from the column name override\n         String columnName = getColumnName(columnNameOverride, null);\n         if (columnName == null) {\n             // try a name from the column alias\n-            columnName = getColumnName(columnExp.getAlias(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n+            columnName =\n+                    getColumnName(columnExp.getAlias(session, indexOfColumn),\n+                            DEFAULT_COLUMN_NAME);\n             if (columnName == null) {\n                 // try a name derived from the column expression SQL\n-                columnName = getColumnName(columnExp.getColumnName(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n+                columnName = getColumnName(\n+                        columnExp.getColumnName(session, indexOfColumn),\n+                        DEFAULT_COLUMN_NAME);\n                 if (columnName == null) {\n                     // try a name derived from the column expression plan SQL\n-                    columnName = getColumnName(columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS), DEFAULT_COLUMN_NAME);\n+                    columnName = getColumnName(\n+                            columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS),\n+                            DEFAULT_COLUMN_NAME);\n                     // go with a innocuous default name pattern\n                     if (columnName == null) {\n                         columnName = configuration.getDefaultColumnNamePattern()\n-                                .replace(\"$$\", Integer.toString(indexOfColumn + 1));\n+                                .replace(\"$$\",\n+                                        Integer.toString(indexOfColumn + 1));\n                     }\n                 }\n             }\n         }\n-        if (existingColumnNames.contains(columnName) && configuration.isGenerateUniqueColumnNames()) {\n+        if (existingColumnNames.contains(columnName) &&\n+                configuration.isGenerateUniqueColumnNames()) {\n             columnName = generateUniqueName(columnName);\n         }\n         existingColumnNames.add(columnName);\n@@ -109,7 +120,9 @@ public class ColumnNamer {\n         while (existingColumnNames.contains(newColumnName)) {\n             String loopCountString = \"_\" + loopCount;\n             newColumnName = columnName.substring(0,\n-                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length()))\n+                    Math.min(columnName.length(),\n+                            configuration.getMaxIdentiferLength() -\n+                                    loopCountString.length()))\n                     + loopCountString;\n             loopCount++;\n         }\n@@ -126,12 +139,14 @@ public class ColumnNamer {\n         if (length > configuration.getMaxIdentiferLength() || length == 0) {\n             return false;\n         }\n-        Pattern allowed = configuration.getCompiledRegularExpressionMatchAllowed();\n+        Pattern allowed =\n+                configuration.getCompiledRegularExpressionMatchAllowed();\n         return allowed == null || allowed.matcher(proposedName).matches();\n     }\n \n     private String fixColumnName(String proposedName) {\n-        Pattern disallowed = configuration.getCompiledRegularExpressionMatchDisallowed();\n+        Pattern disallowed =\n+                configuration.getCompiledRegularExpressionMatchDisallowed();\n         if (disallowed == null) {\n             proposedName = StringUtils.replaceAll(proposedName, \"\\u0000\", \"\");\n         } else {\n@@ -139,7 +154,8 @@ public class ColumnNamer {\n         }\n \n         // check size limits - then truncate\n-        int length = proposedName.length(), maxLength = configuration.getMaxIdentiferLength();\n+        int length = proposedName.length(), maxLength =\n+                configuration.getMaxIdentiferLength();\n         if (length > maxLength) {\n             proposedName = proposedName.substring(0, maxLength);\n         }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/191/ColumnNamer.java\nindex 1a93d427731..0417d7c09a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/191/ColumnNamer.java\n@@ -44,8 +44,7 @@ public class ColumnNamer {\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides) {\n         String columnNameOverride = null;\n         if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n@@ -109,9 +108,7 @@ public class ColumnNamer {\n         while (existingColumnNames.contains(newColumnName)) {\n             String loopCountString = \"_\" + loopCount;\n             newColumnName = columnName.substring(0,\n-                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length()))\n-                    + loopCountString;\n-            loopCount++;\n+                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length())) + loopCountString; loopCount++;\n         }\n         return newColumnName;\n     }\n@@ -151,4 +148,4 @@ public class ColumnNamer {\n         return configuration;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/191/ColumnNamer.java\nindex 1a93d427731..a0839bf89b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/191/ColumnNamer.java\n@@ -13,14 +13,14 @@ import org.h2.expression.Expression;\n /**\n  * A factory for column names.\n  */\n+\n+\n public class ColumnNamer {\n \n     private static final String DEFAULT_COLUMN_NAME = \"DEFAULT\";\n-\n     private final Session session;\n-\n     private final ColumnNamerConfiguration configuration;\n-    private final Set<String> existingColumnNames = new HashSet<>();\n+    private final Set<String> existingColumnNames = new HashSet< >();\n \n     public ColumnNamer(Session session) {\n         this.session = session;\n@@ -44,8 +44,9 @@ public class ColumnNamer {\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+\n+\n+    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides) {\n         String columnNameOverride = null;\n         if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n@@ -61,22 +62,26 @@ public class ColumnNamer {\n      * @param columnNameOverride single overriding column name\n      * @return the new column name\n      */\n+\n+\n     public String getColumnName(Expression columnExp, int indexOfColumn, String columnNameOverride) {\n         // try a name from the column name override\n         String columnName = getColumnName(columnNameOverride, null);\n         if (columnName == null) {\n             // try a name from the column alias\n-            columnName = getColumnName(columnExp.getAlias(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n+            columnName = getColumnName(\n+columnExp.getAlias(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n             if (columnName == null) {\n                 // try a name derived from the column expression SQL\n-                columnName = getColumnName(columnExp.getColumnName(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n+                columnName = getColumnName(\n+columnExp.getColumnName(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n                 if (columnName == null) {\n                     // try a name derived from the column expression plan SQL\n-                    columnName = getColumnName(columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS), DEFAULT_COLUMN_NAME);\n+                    columnName = getColumnName(\n+columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS), DEFAULT_COLUMN_NAME);\n                     // go with a innocuous default name pattern\n                     if (columnName == null) {\n-                        columnName = configuration.getDefaultColumnNamePattern()\n-                                .replace(\"$$\", Integer.toString(indexOfColumn + 1));\n+                        columnName = configuration.getDefaultColumnNamePattern().replace(\"$$\", Integer.toString(indexOfColumn + 1));\n                     }\n                 }\n             }\n@@ -108,9 +113,7 @@ public class ColumnNamer {\n         int loopCount = 2;\n         while (existingColumnNames.contains(newColumnName)) {\n             String loopCountString = \"_\" + loopCount;\n-            newColumnName = columnName.substring(0,\n-                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length()))\n-                    + loopCountString;\n+            newColumnName = columnName.substring(0, Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length())) + loopCountString;\n             loopCount++;\n         }\n         return newColumnName;\n@@ -143,12 +146,12 @@ public class ColumnNamer {\n         if (length > maxLength) {\n             proposedName = proposedName.substring(0, maxLength);\n         }\n-\n         return proposedName;\n     }\n \n+\n     public ColumnNamerConfiguration getConfiguration() {\n         return configuration;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/191/ColumnNamer.java\nindex 1a93d427731..6ace279da95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/191/ColumnNamer.java\n@@ -44,8 +44,7 @@ public class ColumnNamer {\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides) {\n         String columnNameOverride = null;\n         if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/191/ColumnNamer.java\nindex 1a93d427731..6ace279da95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/191/ColumnNamer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/191/ColumnNamer.java\n@@ -44,8 +44,7 @@ public class ColumnNamer {\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides) {\n         String columnNameOverride = null;\n         if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}