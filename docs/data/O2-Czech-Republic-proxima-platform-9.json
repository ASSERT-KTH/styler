{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "79",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        serializer.asJsonValue(message));\n    assertEquals(\n        \"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n  }\n\n  @Test",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/9/ProtoSerializerFactoryTest.java\nindex d938fd11ae8..601bc061fea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/9/ProtoSerializerFactoryTest.java\n@@ -77,7 +77,7 @@ public class ProtoSerializerFactoryTest {\n         serializer.asJsonValue(message));\n     assertEquals(\n         \"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n-  }\n+      }\n \n   @Test\n   public void testGetSchemaDescriptor() {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/9/ProtoSerializerFactoryTest.java\nindex d938fd11ae8..684cb882bba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/9/ProtoSerializerFactoryTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.scheme.proto;\n \n import static org.junit.Assert.assertEquals;\n@@ -76,7 +77,8 @@ public class ProtoSerializerFactoryTest {\n         \"{\\n  \\\"gatewayId\\\": \\\"gateway\\\",\\n  \\\"payload\\\": \\\"AA==\\\"\\n}\",\n         serializer.asJsonValue(message));\n     assertEquals(\n-        \"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n+        \"gateway\",\n+        serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n   }\n \n   @Test\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/9/ProtoSerializerFactoryTest.java\nindex d938fd11ae8..4502406e1e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/9/ProtoSerializerFactoryTest.java\n@@ -67,15 +67,16 @@ public class ProtoSerializerFactoryTest {\n \n   @Test\n   public void testJsonValue() {\n-    Event message =\n-        Event.newBuilder()\n+    Event message = Event.newBuilder()\n             .setGatewayId(\"gateway\")\n             .setPayload(ByteString.copyFrom(new byte[] {0}))\n             .build();\n-    assertEquals(\n+\n+assertEquals(\n         \"{\\n  \\\"gatewayId\\\": \\\"gateway\\\",\\n  \\\"payload\\\": \\\"AA==\\\"\\n}\",\n         serializer.asJsonValue(message));\n-    assertEquals(\n+\n+assertEquals(\n         \"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n   }\n \n@@ -84,4 +85,4 @@ public class ProtoSerializerFactoryTest {\n     SchemaTypeDescriptor<Event> descriptor = serializer.getValueSchemaDescriptor();\n     assertEquals(AttributeValueType.STRUCTURE, descriptor.getType());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "'array initialization' child has incorrect indentation level 72, expected level should be one of the following: 40, 42.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "'array initialization rcurly' has incorrect indentation level 0, expected level should be one of the following: 38, 42.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/9/ProtoSerializerFactoryTest.java\nindex d938fd11ae8..8b43aa95ed8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/9/ProtoSerializerFactoryTest.java\n@@ -17,7 +17,6 @@ package cz.o2.proxima.scheme.proto;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-\n import com.google.protobuf.ByteString;\n import cz.o2.proxima.scheme.AttributeValueType;\n import cz.o2.proxima.scheme.SchemaDescriptors.SchemaTypeDescriptor;\n@@ -31,6 +30,8 @@ import org.junit.Before;\n import org.junit.Test;\n \n /** Test for {@link ProtoSerializerFactory}. */\n+\n+\n public class ProtoSerializerFactoryTest {\n \n   private final ValueSerializerFactory factory = new ProtoSerializerFactory();\n@@ -43,19 +44,19 @@ public class ProtoSerializerFactoryTest {\n \n   @Test\n   public void testSerializeAndDeserialize() throws Exception {\n-    Event event = Event.newBuilder().setGatewayId(\"gateway\").build();\n+    Event event = Event.newBuilder().setGatewayId(\"gateway\")\n+                                    .build();\n     byte[] bytes = serializer.serialize(event);\n     Optional<Event> deserialized = serializer.deserialize(bytes);\n     assertTrue(deserialized.isPresent());\n     assertEquals(event, deserialized.get());\n-    assertEquals(\n-        event.getClass().getName(),\n-        factory.getClassName(new URI(\"proto:\" + Event.class.getName())));\n+    assertEquals(event.getClass().getName(), factory.getClassName(new URI(\"proto:\" + Event.class.getName())));\n   }\n \n   @Test\n   public void testToLogString() {\n-    Event event = Event.newBuilder().setGatewayId(\"gateway\").build();\n+    Event event = Event.newBuilder().setGatewayId(\"gateway\")\n+                                    .build();\n     // we have single line string\n     assertEquals(-1, serializer.getLogString(event).indexOf('\\n'));\n   }\n@@ -67,16 +68,13 @@ public class ProtoSerializerFactoryTest {\n \n   @Test\n   public void testJsonValue() {\n-    Event message =\n-        Event.newBuilder()\n-            .setGatewayId(\"gateway\")\n-            .setPayload(ByteString.copyFrom(new byte[] {0}))\n-            .build();\n-    assertEquals(\n-        \"{\\n  \\\"gatewayId\\\": \\\"gateway\\\",\\n  \\\"payload\\\": \\\"AA==\\\"\\n}\",\n-        serializer.asJsonValue(message));\n-    assertEquals(\n-        \"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n+    Event message = Event.newBuilder().setGatewayId(\"gateway\")\n+                                      .setPayload(ByteString.copyFrom(new byte[] {\n+                                                                        0\n+}))\n+                                      .build();\n+    assertEquals(\"{\\n  \\\"gatewayId\\\": \\\"gateway\\\",\\n  \\\"payload\\\": \\\"AA==\\\"\\n}\", serializer.asJsonValue(message));\n+    assertEquals(\"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n   }\n \n   @Test\n@@ -84,4 +82,4 @@ public class ProtoSerializerFactoryTest {\n     SchemaTypeDescriptor<Event> descriptor = serializer.getValueSchemaDescriptor();\n     assertEquals(AttributeValueType.STRUCTURE, descriptor.getType());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/9/ProtoSerializerFactoryTest.java\nindex d938fd11ae8..601bc061fea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/9/ProtoSerializerFactoryTest.java\n@@ -77,7 +77,7 @@ public class ProtoSerializerFactoryTest {\n         serializer.asJsonValue(message));\n     assertEquals(\n         \"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n-  }\n+      }\n \n   @Test\n   public void testGetSchemaDescriptor() {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 8, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "10",
                    "severity": "error",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/9/ProtoSerializerFactoryTest.java\nindex d938fd11ae8..6c2807d1cff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/9/ProtoSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/9/ProtoSerializerFactoryTest.java\n@@ -76,10 +76,9 @@ public class ProtoSerializerFactoryTest {\n         \"{\\n  \\\"gatewayId\\\": \\\"gateway\\\",\\n  \\\"payload\\\": \\\"AA==\\\"\\n}\",\n         serializer.asJsonValue(message));\n     assertEquals(\n-        \"gateway\", serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n-  }\n-\n-  @Test\n+        \"gateway\",\n+        serializer.fromJsonValue(serializer.asJsonValue(message)).getGatewayId());\n+        }@Test\n   public void testGetSchemaDescriptor() {\n     SchemaTypeDescriptor<Event> descriptor = serializer.getValueSchemaDescriptor();\n     assertEquals(AttributeValueType.STRUCTURE, descriptor.getType());\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}