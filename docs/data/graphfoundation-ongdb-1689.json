{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1689",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "30",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "37",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "51",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1689/MethodReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1689/MethodReference.java\nindex 58b13e0ec1f..4f1c4e9bb42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1689/MethodReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1689/MethodReference.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Modifier;\n@@ -26,127 +27,125 @@ import static org.neo4j.codegen.TypeReference.typeReferences;\n \n public class MethodReference\n {\n-    public static MethodReference methodReference( Class<?> owner, Class<?> returns, String name,\n-            Class<?>... parameters )\n-    {\n-        try\n-        {\n-            int modifiers = owner.getMethod( name, parameters ).getModifiers();\n-            return methodReference( typeReference( owner ), typeReference( returns ), name, modifiers, typeReferences( parameters ) );\n-        }\n-        catch ( NoSuchMethodException e )\n-        {\n-            throw new IllegalArgumentException( \"No method with name \" + name, e );\n-        }\n-\n-    }\n-\n-    public static MethodReference methodReference( Class<?> owner, TypeReference returns, String name,\n-            Class<?>... parameters )\n-    {\n-        try\n-        {\n-            int modifiers = owner.getMethod( name, parameters ).getModifiers();\n-            return methodReference( owner, returns, name, modifiers, typeReferences( parameters ) );\n-        }\n-        catch ( NoSuchMethodException e )\n-        {\n-            throw new IllegalArgumentException( \"No method with name \" + name, e );\n-        }\n-\n-    }\n-\n-    private static MethodReference methodReference( Class<?> owner, TypeReference returns, String name, int modifiers,\n-            TypeReference... parameters )\n-    {\n-        return methodReference( typeReference( owner ), returns, name, modifiers, parameters );\n-    }\n-\n-    public static MethodReference methodReference( TypeReference owner, TypeReference returns, String name,\n-            TypeReference... parameters )\n-    {\n-        return new MethodReference( owner, name, returns, Modifier.PUBLIC, parameters );\n-    }\n-\n-    public static MethodReference methodReference( TypeReference owner, TypeReference returns, String name,\n-            int modifiers, TypeReference... parameters )\n-    {\n-        return new MethodReference( owner, name, returns, modifiers, parameters );\n-    }\n-\n-    public static MethodReference constructorReference( Class<?> owner, Class<?> firstParameter, Class<?>... parameters )\n-    {\n-        return constructorReference( typeReference( owner ), typeReferences( firstParameter, parameters ) );\n-    }\n-\n-    public static MethodReference constructorReference( Class<?> owner, TypeReference... parameters )\n-    {\n-        return constructorReference( typeReference( owner ), parameters );\n-    }\n-\n-    public static MethodReference constructorReference( TypeReference owner, TypeReference... parameters )\n-    {\n-        return new MethodReference( owner, \"<init>\", TypeReference.VOID,  Modifier.PUBLIC, parameters );\n-    }\n-\n-    private final TypeReference owner;\n-    private final String name;\n-    private final TypeReference returns;\n-    private final TypeReference[] parameters;\n-    private final int modifiers;\n-\n-    MethodReference( TypeReference owner, String name, TypeReference returns, int modifiers,\n-            TypeReference[] parameters )\n-    {\n-        this.owner = owner;\n-\n-        this.name = name;\n-        this.returns = returns;\n-        this.modifiers = modifiers;\n-        this.parameters = parameters;\n-    }\n-\n-    public String name()\n-    {\n-        return name;\n-    }\n-\n-    public TypeReference owner()\n-    {\n-        return owner;\n-    }\n-\n-    public TypeReference returns()\n-    {\n-        return returns;\n-    }\n-\n-    public TypeReference[] parameters()\n-    {\n-        return parameters;\n-    }\n-\n-    public boolean isConstructor()\n-    {\n-        return \"<init>\".equals( name );\n-    }\n-\n-    public int modifiers()\n-    {\n-        return modifiers;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        StringBuilder result = new StringBuilder().append( \"MethodReference[\" );\n-        writeTo( result );\n-        return result.append( \"]\" ).toString();\n-    }\n-\n-    void writeTo( StringBuilder result )\n-    {\n-        owner.writeTo( result );\n-        result.append( \"#\" ).append( name ).append( \"(...)\" );\n-    }\n+  public static MethodReference methodReference(Class<?> owner, Class<?> returns, String name,\n+                                                Class<?>... parameters)\n+  {\n+    try\n+    {\n+      int modifiers = owner.getMethod(name, parameters).getModifiers();\n+      return methodReference(typeReference(owner), typeReference(returns), name, modifiers, typeReferences(parameters));\n+    } catch (NoSuchMethodException e)\n+    {\n+      throw new IllegalArgumentException(\"No method with name \" + name, e);\n+    }\n+\n+  }\n+\n+  public static MethodReference methodReference(Class<?> owner, TypeReference returns, String name,\n+                                                Class<?>... parameters)\n+  {\n+    try\n+    {\n+      int modifiers = owner.getMethod(name, parameters).getModifiers();\n+      return methodReference(owner, returns, name, modifiers, typeReferences(parameters));\n+    } catch (NoSuchMethodException e)\n+    {\n+      throw new IllegalArgumentException(\"No method with name \" + name, e);\n+    }\n+\n+  }\n+\n+  private static MethodReference methodReference(Class<?> owner, TypeReference returns, String name, int modifiers,\n+                                                 TypeReference... parameters)\n+  {\n+    return methodReference(typeReference(owner), returns, name, modifiers, parameters);\n+  }\n+\n+  public static MethodReference methodReference(TypeReference owner, TypeReference returns, String name,\n+                                                TypeReference... parameters)\n+  {\n+    return new MethodReference(owner, name, returns, Modifier.PUBLIC, parameters);\n+  }\n+\n+  public static MethodReference methodReference(TypeReference owner, TypeReference returns, String name,\n+                                                int modifiers, TypeReference... parameters)\n+  {\n+    return new MethodReference(owner, name, returns, modifiers, parameters);\n+  }\n+\n+  public static MethodReference constructorReference(Class<?> owner, Class<?> firstParameter, Class<?>... parameters)\n+  {\n+    return constructorReference(typeReference(owner), typeReferences(firstParameter, parameters));\n+  }\n+\n+  public static MethodReference constructorReference(Class<?> owner, TypeReference... parameters)\n+  {\n+    return constructorReference(typeReference(owner), parameters);\n+  }\n+\n+  public static MethodReference constructorReference(TypeReference owner, TypeReference... parameters)\n+  {\n+    return new MethodReference(owner, \"<init>\", TypeReference.VOID, Modifier.PUBLIC, parameters);\n+  }\n+\n+  private final TypeReference owner;\n+  private final String name;\n+  private final TypeReference returns;\n+  private final TypeReference[] parameters;\n+  private final int modifiers;\n+\n+  MethodReference(TypeReference owner, String name, TypeReference returns, int modifiers,\n+                  TypeReference[] parameters)\n+  {\n+    this.owner = owner;\n+\n+    this.name = name;\n+    this.returns = returns;\n+    this.modifiers = modifiers;\n+    this.parameters = parameters;\n+  }\n+\n+  public String name()\n+  {\n+    return name;\n+  }\n+\n+  public TypeReference owner()\n+  {\n+    return owner;\n+  }\n+\n+  public TypeReference returns()\n+  {\n+    return returns;\n+  }\n+\n+  public TypeReference[] parameters()\n+  {\n+    return parameters;\n+  }\n+\n+  public boolean isConstructor()\n+  {\n+    return \"<init>\".equals(name);\n+  }\n+\n+  public int modifiers()\n+  {\n+    return modifiers;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder result = new StringBuilder().append(\"MethodReference[\");\n+    writeTo(result);\n+    return result.append(\"]\").toString();\n+  }\n+\n+  void writeTo(StringBuilder result)\n+  {\n+    owner.writeTo(result);\n+    result.append(\"#\").append(name).append(\"(...)\");\n+  }\n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1689/MethodReference.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1689/MethodReference.java\nindex 58b13e0ec1f..cbfc5590880 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1689/MethodReference.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1689/MethodReference.java\n@@ -26,8 +26,7 @@ import static org.neo4j.codegen.TypeReference.typeReferences;\n \n public class MethodReference\n {\n-    public static MethodReference methodReference( Class<?> owner, Class<?> returns, String name,\n-            Class<?>... parameters )\n+    public static MethodReference methodReference( Class<?> owner, Class<?> returns, String name, Class<?>... parameters )\n     {\n         try\n         {\n@@ -38,11 +37,9 @@ public class MethodReference\n         {\n             throw new IllegalArgumentException( \"No method with name \" + name, e );\n         }\n-\n     }\n \n-    public static MethodReference methodReference( Class<?> owner, TypeReference returns, String name,\n-            Class<?>... parameters )\n+    public static MethodReference methodReference( Class<?> owner, TypeReference returns, String name, Class<?>... parameters )\n     {\n         try\n         {\n@@ -53,7 +50,6 @@ public class MethodReference\n         {\n             throw new IllegalArgumentException( \"No method with name \" + name, e );\n         }\n-\n     }\n \n     private static MethodReference methodReference( Class<?> owner, TypeReference returns, String name, int modifiers,\n@@ -68,8 +64,7 @@ public class MethodReference\n         return new MethodReference( owner, name, returns, Modifier.PUBLIC, parameters );\n     }\n \n-    public static MethodReference methodReference( TypeReference owner, TypeReference returns, String name,\n-            int modifiers, TypeReference... parameters )\n+    public static MethodReference methodReference( TypeReference owner, TypeReference returns, String name, int modifiers, TypeReference... parameters )\n     {\n         return new MethodReference( owner, name, returns, modifiers, parameters );\n     }\n@@ -86,7 +81,7 @@ public class MethodReference\n \n     public static MethodReference constructorReference( TypeReference owner, TypeReference... parameters )\n     {\n-        return new MethodReference( owner, \"<init>\", TypeReference.VOID,  Modifier.PUBLIC, parameters );\n+        return new MethodReference( owner, \"<init>\", TypeReference.VOID,Modifier.PUBLIC, parameters );\n     }\n \n     private final TypeReference owner;\n@@ -99,8 +94,7 @@ public class MethodReference\n             TypeReference[] parameters )\n     {\n         this.owner = owner;\n-\n-        this.name = name;\n+this.name = name;\n         this.returns = returns;\n         this.modifiers = modifiers;\n         this.parameters = parameters;\n@@ -149,4 +143,4 @@ public class MethodReference\n         owner.writeTo( result );\n         result.append( \"#\" ).append( name ).append( \"(...)\" );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}