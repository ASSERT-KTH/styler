{
    "project_name": "CESNET-perun",
    "error_id": "332",
    "information": {
        "errors": [
            {
                "line": "144",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\tac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"service\")),\n\t\tac.getFacilityById(parms.readInt(\"facility\")));\n\t\treturn null;\n\t    }\n\t},\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/332/GeneralServiceManagerMethod.java\nindex fa7f6e867f0..19d2c92f600 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/332/GeneralServiceManagerMethod.java\n@@ -142,7 +142,7 @@ public enum GeneralServiceManagerMethod implements ManagerMethod {\n \t\tac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"service\")),\n \t\tac.getFacilityById(parms.readInt(\"facility\")));\n \t\treturn null;\n-\t    }\n+\t}\n \t},\n \n \t/*#\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/332/GeneralServiceManagerMethod.java\nindex fa7f6e867f0..5e3994a4426 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/332/GeneralServiceManagerMethod.java\n@@ -12,434 +12,452 @@ import cz.metacentrum.perun.taskslib.model.ExecService;\n \n public enum GeneralServiceManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Deletes a service.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t */\n-\tdeleteService {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tService service = ac.getServiceById(parms.readInt(\"service\"));\n-\t\t\tac.getGeneralServiceManager().deleteService(ac.getSession(), service);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all services.\n-\t *\n-\t * @return List<Service> All services\n-\t */\n-\tlistServices {\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listServices(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a service with specific <code>id</code>.\n-\t *\n-\t * @param id int Service <code>id</code>\n-\t * @return Service Found service object\n-\t */\n-\tgetService {\n-\t\tpublic Service call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().getService(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns exec services.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return List<ExecService> Exec services\n-\t */\n-\t/*#\n-\t * Returns exec services.\n-\t *\n-\t * @return List<ExecService> Exec services\n-\t */\n-\tlistExecServices {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"service\")) {\n-\t\t\t\treturn ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGeneralServiceManager().listExecServices(ac.getSession());\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns count of exec services.\n-\t * @return int Count of exec services\n-\t */\n-\tcountExecServices {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().countExecServices();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns an exec service with specific <code>id</code>.\n-\t *\n-\t * @param id int Service <code>id</code>\n-\t * @return ExecService Found exec service object\n-\t */\n-\tgetExecService {\n-\t\tpublic ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().getExecService(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Inserts an exec service.\n-\t *\n-\t * @param execService ExecService JSON object\n-\t * @return int new ExecService <code>id</code>\n-\t */\n-\tinsertExecService {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().insertExecService(ac.getSession(),\n-\t\t\t\t\tparms.read(\"execService\", ExecService.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates an exec service.\n-\t *\n-\t * @param execService ExecService JSON object\n-\t * @return ExecService updated ExecService\n-\t */\n-\tupdateExecService {\n-\t\tpublic ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tExecService es = parms.read(\"execService\", ExecService.class);\n-\t\t\tac.getGeneralServiceManager().updateExecService(ac.getSession(), es);\n-\t\t\treturn ac.getGeneralServiceManager().getExecService(ac.getSession(), es.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes an exec service.\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t */\n-\tdeleteExecService {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().deleteExecService(ac.getExecServiceById(parms.readInt(\"execService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Bans exec service on a facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @throw ServiceAlreadyBannedException When service is already banned on facility.\n-\t */\n-\tbanExecServiceOnFacility {\n-\t    public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\tac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"service\")),\n-\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\treturn null;\n-\t    }\n-\t},\n-\n-\t/*#\n-\t * Bans exec service on a destination.\n-\t *\n-\t * @param execService int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\tbanExecServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().banExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")),parms.readInt(\"destination\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of denials for a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ExecService> Exec services\n-\t */\n-\tlistDenialsForFacility {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listDenialsForFacility(ac.getSession(),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of denials for a destination.\n-\t *\n-\t * @param destination int Destination <code>id</code>\n-\t * @return List<ExecService> Exec services\n-\t */\n-\tlistDenialsForDestination {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listDenialsForDestination(ac.getSession(),parms.readInt(\"destination\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this execService denied on the facility?\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the execService is denied on the facility, 0 = false - the execService in NOT denied on the facility\n-\t */\n-\tisExecServiceDeniedOnFacility {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\"))))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this service denied on the facility?\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the service is denied on the facility, 0 = false - the service in NOT denied on the facility\n-\t */\n-\tisServiceDeniedOnFacility {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tList<ExecService> list = ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n-\t\t\tInteger answer = 0;\n-\t\t\tfor (ExecService exec : list) {\n-\t\t\t\tif (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(exec.getId()), ac.getFacilityById(parms.readInt(\"facility\")))) {\n-\t\t\t\t\tanswer = 1;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn answer;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this execService denied on the destination?\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the execService is denied on the destination, 0 = false - the execService in NOT denied on the destination\n-\t */\n-\tisExecServiceDeniedOnDestination {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getGeneralServiceManager().isExecServiceDeniedOnDestination(ac.getExecServiceById(parms.readInt(\"execService\")),parms.readInt(\"destination\")))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Erase all the possible denials on this facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tfreeAllDenialsOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeAllDenialsOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Erase all the possible denials on this destination.\n-\t *\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\tfreeAllDenialsOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeAllDenialsOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Free the denial of the execService on this facility. If the execService was banned\n-\t * on this facility, it will be freed. In case the execService was not banned on\n-\t * this facility, nothing will happen.\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tfreeDenialOfExecServiceOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeDenialOfExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Free the denial of the execService on this destination. If the execService was banned on\n-\t * this destination, it will be freed. In case the execService was not banned on this\n-\t * destination, nothing will happen.\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\tfreeDenialOfExecServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeDenialOfExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")),parms.readInt(\"destination\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates a dependency of one ExecService on other.\n-\t * The execService can not be executed if any of the execServices it depends on is in an unstable (not terminal) state.\n-\t *\n-\t * @param execService int ExecService <code>id</code> to create dependency for\n-\t * @param dependantExecService int ExecService <code>id</code> to depend on\n-\t */\n-\tcreateDependency {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().createDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a dependency.\n-\t *\n-\t * @param dependantExecService int DependantExecService <code>id</code>\n-\t * @param execService int ExecService <code>id</code>\n-\t */\n-\tremoveDependency {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().removeDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Checks whether one execService depends on the other.\n-\t *\n-\t * @param dependantExecService int DependantExecService <code>id</code>\n-\t * @param execService int ExecService <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - yes, there is such a dependency, 0 = false - no, there is not such a dependency\n-\t */\n-\tisThereDependency {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(ac.getGeneralServiceManager().isThereDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\"))))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List execServices depending on the given execService\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @return List<ExecService> A list of execServices that are depending on the given execService.\n-\t */\n-\tlistExecServicesDependingOn {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().listExecServicesDependingOn(ac.getSession(),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List execServices this execService depends on\n-\t *\n-\t * @param dependantExecService int dependantExecService <code>id</code>\n-\t * @return List<ExecService> A list of execServices this execService depends on.\n-\t */\n-\tlistExecServicesThisExecServiceDependsOn {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listExecServicesThisExecServiceDependsOn(\n-\t\t\t\t\tac.getSession(),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tforceServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getGeneralServiceManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getGeneralServiceManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tplanServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getGeneralServiceManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getGeneralServiceManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n-\t * 1 - allowed / 0 - one of service exec services is denied on this facility (=> service is denied).\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ServiceForGUI> list of assigned services with allowed property\n-\t */\n-\tgetFacilityAssignedServicesForGUI {\n-\t\tpublic List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGeneralServiceManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n-\n-\t\t}\n-\t};\n+    /*#\n+     * Deletes a service.\n+     *\n+     * @param service int Service <code>id</code>\n+     */\n+    deleteService {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            Service service = ac.getServiceById(parms.readInt(\"service\"));\n+            ac.getGeneralServiceManager().deleteService(ac.getSession(), service);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Returns all services.\n+     *\n+     * @return List<Service> All services\n+     */\n+    listServices {\n+        public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().listServices(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Returns a service with specific <code>id</code>.\n+     *\n+     * @param id int Service <code>id</code>\n+     * @return Service Found service object\n+     */\n+    getService {\n+        public Service call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().getService(ac.getSession(), parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns exec services.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @return List<ExecService> Exec services\n+     */\n+    /*#\n+     * Returns exec services.\n+     *\n+     * @return List<ExecService> Exec services\n+     */\n+    listExecServices {\n+        public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"service\")) {\n+                return ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n+            } else {\n+                return ac.getGeneralServiceManager().listExecServices(ac.getSession());\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Returns count of exec services.\n+     * @return int Count of exec services\n+     */\n+    countExecServices {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().countExecServices();\n+        }\n+    },\n+\n+    /*#\n+     * Returns an exec service with specific <code>id</code>.\n+     *\n+     * @param id int Service <code>id</code>\n+     * @return ExecService Found exec service object\n+     */\n+    getExecService {\n+        public ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().getExecService(ac.getSession(), parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Inserts an exec service.\n+     *\n+     * @param execService ExecService JSON object\n+     * @return int new ExecService <code>id</code>\n+     */\n+    insertExecService {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().insertExecService(ac.getSession(),\n+                    parms.read(\"execService\", ExecService.class));\n+        }\n+    },\n+\n+    /*#\n+     * Updates an exec service.\n+     *\n+     * @param execService ExecService JSON object\n+     * @return ExecService updated ExecService\n+     */\n+    updateExecService {\n+        public ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ExecService es = parms.read(\"execService\", ExecService.class);\n+            ac.getGeneralServiceManager().updateExecService(ac.getSession(), es);\n+            return ac.getGeneralServiceManager().getExecService(ac.getSession(), es.getId());\n+        }\n+    },\n+\n+    /*#\n+     * Deletes an exec service.\n+     *\n+     * @param execService int ExecService <code>id</code>\n+     */\n+    deleteExecService {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().deleteExecService(ac.getExecServiceById(parms.readInt(\"execService\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Bans exec service on a facility.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @throw ServiceAlreadyBannedException When service is already banned on facility.\n+     */\n+    banExecServiceOnFacility {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"service\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Bans exec service on a destination.\n+     *\n+     * @param execService int Service <code>id</code>\n+     * @param destination int Destination <code>id</code>\n+     */\n+    banExecServiceOnDestination {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().banExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")), parms.readInt(\"destination\"));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of denials for a facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<ExecService> Exec services\n+     */\n+    listDenialsForFacility {\n+        public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().listDenialsForFacility(ac.getSession(),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of denials for a destination.\n+     *\n+     * @param destination int Destination <code>id</code>\n+     * @return List<ExecService> Exec services\n+     */\n+    listDenialsForDestination {\n+        public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().listDenialsForDestination(ac.getSession(), parms.readInt(\"destination\"));\n+        }\n+    },\n+\n+    /*#\n+     * Is this execService denied on the facility?\n+     *\n+     * @param execService int ExecService <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @exampleResponse 1\n+     * @return int 1 = true - the execService is denied on the facility, 0 = false - the execService in NOT denied on the facility\n+     */\n+    isExecServiceDeniedOnFacility {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(parms.readInt(\"execService\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")))) {\n+                return 1;\n+            } else {\n+                return 0;\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Is this service denied on the facility?\n+     *\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @exampleResponse 1\n+     * @return int 1 = true - the service is denied on the facility, 0 = false - the service in NOT denied on the facility\n+     */\n+    isServiceDeniedOnFacility {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            List<ExecService> list = ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n+            Integer answer = 0;\n+            for (ExecService exec : list) {\n+                if (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(exec.getId()), ac.getFacilityById(parms.readInt(\"facility\")))) {\n+                    answer = 1;\n+                }\n+            }\n+            return answer;\n+        }\n+    },\n+\n+    /*#\n+     * Is this execService denied on the destination?\n+     *\n+     * @param execService int ExecService <code>id</code>\n+     * @param destination int Destination <code>id</code>\n+     * @exampleResponse 1\n+     * @return int 1 = true - the execService is denied on the destination, 0 = false - the execService in NOT denied on the destination\n+     */\n+    isExecServiceDeniedOnDestination {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (ac.getGeneralServiceManager().isExecServiceDeniedOnDestination(ac.getExecServiceById(parms.readInt(\"execService\")), parms.readInt(\"destination\"))) {\n+                return 1;\n+            } else {\n+                return 0;\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Erase all the possible denials on this facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     */\n+    freeAllDenialsOnFacility {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().freeAllDenialsOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Erase all the possible denials on this destination.\n+     *\n+     * @param destination int Destination <code>id</code>\n+     */\n+    freeAllDenialsOnDestination {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().freeAllDenialsOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Free the denial of the execService on this facility. If the execService was banned\n+     * on this facility, it will be freed. In case the execService was not banned on\n+     * this facility, nothing will happen.\n+     *\n+     * @param execService int ExecService <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     */\n+    freeDenialOfExecServiceOnFacility {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().freeDenialOfExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Free the denial of the execService on this destination. If the execService was banned on\n+     * this destination, it will be freed. In case the execService was not banned on this\n+     * destination, nothing will happen.\n+     *\n+     * @param execService int ExecService <code>id</code>\n+     * @param destination int Destination <code>id</code>\n+     */\n+    freeDenialOfExecServiceOnDestination {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().freeDenialOfExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")), parms.readInt(\"destination\"));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Creates a dependency of one ExecService on other.\n+     * The execService can not be executed if any of the execServices it depends on is in an unstable (not terminal) state.\n+     *\n+     * @param execService int ExecService <code>id</code> to create dependency for\n+     * @param dependantExecService int ExecService <code>id</code> to depend on\n+     */\n+    createDependency {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().createDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n+                    ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Removes a dependency.\n+     *\n+     * @param dependantExecService int DependantExecService <code>id</code>\n+     * @param execService int ExecService <code>id</code>\n+     */\n+    removeDependency {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().removeDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n+                    ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Checks whether one execService depends on the other.\n+     *\n+     * @param dependantExecService int DependantExecService <code>id</code>\n+     * @param execService int ExecService <code>id</code>\n+     * @exampleResponse 1\n+     * @return int 1 = true - yes, there is such a dependency, 0 = false - no, there is not such a dependency\n+     */\n+    isThereDependency {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (ac.getGeneralServiceManager().isThereDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n+                    ac.getExecServiceById(parms.readInt(\"dependantExecService\")))) {\n+                return 1;\n+            } else {\n+                return 0;\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * List execServices depending on the given execService\n+     *\n+     * @param execService int ExecService <code>id</code>\n+     * @return List<ExecService> A list of execServices that are depending on the given execService.\n+     */\n+    listExecServicesDependingOn {\n+        public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getGeneralServiceManager().listExecServicesDependingOn(ac.getSession(),\n+                    ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * List execServices this execService depends on\n+     *\n+     * @param dependantExecService int dependantExecService <code>id</code>\n+     * @return List<ExecService> A list of execServices this execService depends on.\n+     */\n+    listExecServicesThisExecServiceDependsOn {\n+        public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getGeneralServiceManager().listExecServicesThisExecServiceDependsOn(\n+                    ac.getSession(),\n+                    ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+        }\n+    },\n+\n+    /*#\n+     * Forces service propagation on defined facility.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    /*#\n+     * Forces service propagation on defined facility.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    forceServicePropagation {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"facility\")) {\n+                if (ac.getGeneralServiceManager().forceServicePropagation(\n+                        ac.getSession(),\n+                        ac.getFacilityById(parms.readInt(\"facility\")),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            } else {\n+                if (ac.getGeneralServiceManager().forceServicePropagation(\n+                        ac.getSession(),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Plans service propagation on defined facility.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    /*#\n+     * Plans service propagation on defined facility.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    planServicePropagation {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"facility\")) {\n+                if (ac.getGeneralServiceManager().planServicePropagation(\n+                        ac.getSession(),\n+                        ac.getFacilityById(parms.readInt(\"facility\")),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            } else {\n+                if (ac.getGeneralServiceManager().planServicePropagation(\n+                        ac.getSession(),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n+     * 1 - allowed / 0 - one of service exec services is denied on this facility (=> service is denied).\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<ServiceForGUI> list of assigned services with allowed property\n+     */\n+    getFacilityAssignedServicesForGUI {\n+        public List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getGeneralServiceManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n+\n+        }\n+    };\n \n }\n",
            "diff_size": 447
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/332/GeneralServiceManagerMethod.java\nindex fa7f6e867f0..ec478747b34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/332/GeneralServiceManagerMethod.java\n@@ -4,442 +4,481 @@ import cz.metacentrum.perun.controller.model.ServiceForGUI;\n import cz.metacentrum.perun.core.api.Service;\n import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.rpc.*;\n-\n import java.util.List;\n-\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n import cz.metacentrum.perun.taskslib.model.ExecService;\n \n+\n public enum GeneralServiceManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Deletes a service.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t */\n-\tdeleteService {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tService service = ac.getServiceById(parms.readInt(\"service\"));\n-\t\t\tac.getGeneralServiceManager().deleteService(ac.getSession(), service);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all services.\n-\t *\n-\t * @return List<Service> All services\n-\t */\n-\tlistServices {\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listServices(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a service with specific <code>id</code>.\n-\t *\n-\t * @param id int Service <code>id</code>\n-\t * @return Service Found service object\n-\t */\n-\tgetService {\n-\t\tpublic Service call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().getService(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns exec services.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return List<ExecService> Exec services\n-\t */\n-\t/*#\n-\t * Returns exec services.\n-\t *\n-\t * @return List<ExecService> Exec services\n-\t */\n-\tlistExecServices {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"service\")) {\n-\t\t\t\treturn ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getGeneralServiceManager().listExecServices(ac.getSession());\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns count of exec services.\n-\t * @return int Count of exec services\n-\t */\n-\tcountExecServices {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().countExecServices();\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns an exec service with specific <code>id</code>.\n-\t *\n-\t * @param id int Service <code>id</code>\n-\t * @return ExecService Found exec service object\n-\t */\n-\tgetExecService {\n-\t\tpublic ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().getExecService(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Inserts an exec service.\n-\t *\n-\t * @param execService ExecService JSON object\n-\t * @return int new ExecService <code>id</code>\n-\t */\n-\tinsertExecService {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().insertExecService(ac.getSession(),\n-\t\t\t\t\tparms.read(\"execService\", ExecService.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Updates an exec service.\n-\t *\n-\t * @param execService ExecService JSON object\n-\t * @return ExecService updated ExecService\n-\t */\n-\tupdateExecService {\n-\t\tpublic ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tExecService es = parms.read(\"execService\", ExecService.class);\n-\t\t\tac.getGeneralServiceManager().updateExecService(ac.getSession(), es);\n-\t\t\treturn ac.getGeneralServiceManager().getExecService(ac.getSession(), es.getId());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes an exec service.\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t */\n-\tdeleteExecService {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().deleteExecService(ac.getExecServiceById(parms.readInt(\"execService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Bans exec service on a facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @throw ServiceAlreadyBannedException When service is already banned on facility.\n-\t */\n-\tbanExecServiceOnFacility {\n-\t    public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\tac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"service\")),\n-\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\treturn null;\n-\t    }\n-\t},\n-\n-\t/*#\n-\t * Bans exec service on a destination.\n-\t *\n-\t * @param execService int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\tbanExecServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().banExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")),parms.readInt(\"destination\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of denials for a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ExecService> Exec services\n-\t */\n-\tlistDenialsForFacility {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listDenialsForFacility(ac.getSession(),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of denials for a destination.\n-\t *\n-\t * @param destination int Destination <code>id</code>\n-\t * @return List<ExecService> Exec services\n-\t */\n-\tlistDenialsForDestination {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listDenialsForDestination(ac.getSession(),parms.readInt(\"destination\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this execService denied on the facility?\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the execService is denied on the facility, 0 = false - the execService in NOT denied on the facility\n-\t */\n-\tisExecServiceDeniedOnFacility {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\"))))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this service denied on the facility?\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the service is denied on the facility, 0 = false - the service in NOT denied on the facility\n-\t */\n-\tisServiceDeniedOnFacility {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tList<ExecService> list = ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n-\t\t\tInteger answer = 0;\n-\t\t\tfor (ExecService exec : list) {\n-\t\t\t\tif (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(exec.getId()), ac.getFacilityById(parms.readInt(\"facility\")))) {\n-\t\t\t\t\tanswer = 1;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn answer;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this execService denied on the destination?\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the execService is denied on the destination, 0 = false - the execService in NOT denied on the destination\n-\t */\n-\tisExecServiceDeniedOnDestination {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getGeneralServiceManager().isExecServiceDeniedOnDestination(ac.getExecServiceById(parms.readInt(\"execService\")),parms.readInt(\"destination\")))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Erase all the possible denials on this facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tfreeAllDenialsOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeAllDenialsOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Erase all the possible denials on this destination.\n-\t *\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\tfreeAllDenialsOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeAllDenialsOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Free the denial of the execService on this facility. If the execService was banned\n-\t * on this facility, it will be freed. In case the execService was not banned on\n-\t * this facility, nothing will happen.\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tfreeDenialOfExecServiceOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeDenialOfExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Free the denial of the execService on this destination. If the execService was banned on\n-\t * this destination, it will be freed. In case the execService was not banned on this\n-\t * destination, nothing will happen.\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\tfreeDenialOfExecServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().freeDenialOfExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")),parms.readInt(\"destination\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates a dependency of one ExecService on other.\n-\t * The execService can not be executed if any of the execServices it depends on is in an unstable (not terminal) state.\n-\t *\n-\t * @param execService int ExecService <code>id</code> to create dependency for\n-\t * @param dependantExecService int ExecService <code>id</code> to depend on\n-\t */\n-\tcreateDependency {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().createDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a dependency.\n-\t *\n-\t * @param dependantExecService int DependantExecService <code>id</code>\n-\t * @param execService int ExecService <code>id</code>\n-\t */\n-\tremoveDependency {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().removeDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Checks whether one execService depends on the other.\n-\t *\n-\t * @param dependantExecService int DependantExecService <code>id</code>\n-\t * @param execService int ExecService <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - yes, there is such a dependency, 0 = false - no, there is not such a dependency\n-\t */\n-\tisThereDependency {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(ac.getGeneralServiceManager().isThereDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n-\t\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\"))))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List execServices depending on the given execService\n-\t *\n-\t * @param execService int ExecService <code>id</code>\n-\t * @return List<ExecService> A list of execServices that are depending on the given execService.\n-\t */\n-\tlistExecServicesDependingOn {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getGeneralServiceManager().listExecServicesDependingOn(ac.getSession(),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List execServices this execService depends on\n-\t *\n-\t * @param dependantExecService int dependantExecService <code>id</code>\n-\t * @return List<ExecService> A list of execServices this execService depends on.\n-\t */\n-\tlistExecServicesThisExecServiceDependsOn {\n-\t\tpublic List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getGeneralServiceManager().listExecServicesThisExecServiceDependsOn(\n-\t\t\t\t\tac.getSession(),\n-\t\t\t\t\tac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tforceServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getGeneralServiceManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getGeneralServiceManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tplanServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getGeneralServiceManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getGeneralServiceManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n-\t * 1 - allowed / 0 - one of service exec services is denied on this facility (=> service is denied).\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ServiceForGUI> list of assigned services with allowed property\n-\t */\n-\tgetFacilityAssignedServicesForGUI {\n-\t\tpublic List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getGeneralServiceManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n-\n-\t\t}\n-\t};\n-\n-}\n+ /*#\n+  * Deletes a service.\n+  *\n+  * @param service int Service <code>id</code>\n+  */\n+\n+\n+ deleteService {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   Service service = ac.getServiceById(parms.readInt(\"service\"));\n+   ac.getGeneralServiceManager().deleteService(ac.getSession(), service);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Returns all services.\n+  *\n+  * @return List<Service> All services\n+  */\n+\n+\n+ listServices {\n+  public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().listServices(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Returns a service with specific <code>id</code>.\n+  *\n+  * @param id int Service <code>id</code>\n+  * @return Service Found service object\n+  */\n+\n+\n+ getService {\n+  public Service call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().getService(ac.getSession(), parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns exec services.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @return List<ExecService> Exec services\n+  */\n+ /*#\n+  * Returns exec services.\n+  *\n+  * @return List<ExecService> Exec services\n+  */\n+\n+\n+ listExecServices {\n+  public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"service\")) {\n+    return ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n+   } else {\n+    return ac.getGeneralServiceManager().listExecServices(ac.getSession());\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Returns count of exec services.\n+  * @return int Count of exec services\n+  */\n+\n+\n+ countExecServices {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().countExecServices();\n+  }\n+ },\n+\n+ /*#\n+  * Returns an exec service with specific <code>id</code>.\n+  *\n+  * @param id int Service <code>id</code>\n+  * @return ExecService Found exec service object\n+  */\n+\n+\n+ getExecService {\n+  public ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().getExecService(ac.getSession(), parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Inserts an exec service.\n+  *\n+  * @param execService ExecService JSON object\n+  * @return int new ExecService <code>id</code>\n+  */\n+\n+\n+ insertExecService {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().insertExecService(ac.getSession(), parms.read(\"execService\", ExecService.class));\n+  }\n+ },\n+\n+ /*#\n+  * Updates an exec service.\n+  *\n+  * @param execService ExecService JSON object\n+  * @return ExecService updated ExecService\n+  */\n+\n+\n+ updateExecService {\n+  public ExecService call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ExecService es = parms.read(\"execService\", ExecService.class);\n+   ac.getGeneralServiceManager().updateExecService(ac.getSession(), es);\n+   return ac.getGeneralServiceManager().getExecService(ac.getSession(), es.getId());\n+  }\n+ },\n+\n+ /*#\n+  * Deletes an exec service.\n+  *\n+  * @param execService int ExecService <code>id</code>\n+  */\n+\n+\n+ deleteExecService {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().deleteExecService(ac.getExecServiceById(parms.readInt(\"execService\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Bans exec service on a facility.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @throw ServiceAlreadyBannedException When service is already banned on facility.\n+  */\n+\n+\n+ banExecServiceOnFacility {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(),\n+ac.getExecServiceById(parms.readInt(\"service\")),\n+ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Bans exec service on a destination.\n+  *\n+  * @param execService int Service <code>id</code>\n+  * @param destination int Destination <code>id</code>\n+  */\n+\n+\n+ banExecServiceOnDestination {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().banExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")), parms.readInt(\"destination\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of denials for a facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<ExecService> Exec services\n+  */\n+\n+\n+ listDenialsForFacility {\n+  public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().listDenialsForFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of denials for a destination.\n+  *\n+  * @param destination int Destination <code>id</code>\n+  * @return List<ExecService> Exec services\n+  */\n+\n+\n+ listDenialsForDestination {\n+  public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().listDenialsForDestination(ac.getSession(), parms.readInt(\"destination\"));\n+  }\n+ },\n+\n+ /*#\n+  * Is this execService denied on the facility?\n+  *\n+  * @param execService int ExecService <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @exampleResponse 1\n+  * @return int 1 = true - the execService is denied on the facility, 0 = false - the execService in NOT denied on the facility\n+  */\n+\n+\n+ isExecServiceDeniedOnFacility {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(parms.readInt(\"execService\")), ac.getFacilityById(parms.readInt(\"facility\")))) return 1;\n+   else return 0;\n+  }\n+ },\n+\n+ /*#\n+  * Is this service denied on the facility?\n+  *\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @exampleResponse 1\n+  * @return int 1 = true - the service is denied on the facility, 0 = false - the service in NOT denied on the facility\n+  */\n+\n+\n+ isServiceDeniedOnFacility {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   List<ExecService> list = ac.getGeneralServiceManager().listExecServices(ac.getSession(), parms.readInt(\"service\"));\n+   Integer answer = 0;\n+   for (ExecService exec : list) {\n+    if (ac.getGeneralServiceManager().isExecServiceDeniedOnFacility(ac.getExecServiceById(exec.getId()), ac.getFacilityById(parms.readInt(\"facility\")))) {\n+     answer = 1;\n+    }\n+   }\n+\n+   return answer;\n+  }\n+ },\n+\n+ /*#\n+  * Is this execService denied on the destination?\n+  *\n+  * @param execService int ExecService <code>id</code>\n+  * @param destination int Destination <code>id</code>\n+  * @exampleResponse 1\n+  * @return int 1 = true - the execService is denied on the destination, 0 = false - the execService in NOT denied on the destination\n+  */\n+\n+\n+ isExecServiceDeniedOnDestination {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (ac.getGeneralServiceManager().isExecServiceDeniedOnDestination(ac.getExecServiceById(parms.readInt(\"execService\")), parms.readInt(\"destination\"))) return 1;\n+   else return 0;\n+  }\n+ },\n+\n+ /*#\n+  * Erase all the possible denials on this facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  */\n+\n+\n+ freeAllDenialsOnFacility {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().freeAllDenialsOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Erase all the possible denials on this destination.\n+  *\n+  * @param destination int Destination <code>id</code>\n+  */\n+\n+\n+ freeAllDenialsOnDestination {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().freeAllDenialsOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Free the denial of the execService on this facility. If the execService was banned\n+  * on this facility, it will be freed. In case the execService was not banned on\n+  * this facility, nothing will happen.\n+  *\n+  * @param execService int ExecService <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  */\n+\n+\n+ freeDenialOfExecServiceOnFacility {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().freeDenialOfExecServiceOnFacility(ac.getSession(),\n+ac.getExecServiceById(parms.readInt(\"execService\")),\n+ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Free the denial of the execService on this destination. If the execService was banned on\n+  * this destination, it will be freed. In case the execService was not banned on this\n+  * destination, nothing will happen.\n+  *\n+  * @param execService int ExecService <code>id</code>\n+  * @param destination int Destination <code>id</code>\n+  */\n+\n+\n+ freeDenialOfExecServiceOnDestination {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().freeDenialOfExecServiceOnDestination(ac.getSession(), ac.getExecServiceById(parms.readInt(\"execService\")), parms.readInt(\"destination\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Creates a dependency of one ExecService on other.\n+  * The execService can not be executed if any of the execServices it depends on is in an unstable (not terminal) state.\n+  *\n+  * @param execService int ExecService <code>id</code> to create dependency for\n+  * @param dependantExecService int ExecService <code>id</code> to depend on\n+  */\n+\n+\n+ createDependency {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().createDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n+ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Removes a dependency.\n+  *\n+  * @param dependantExecService int DependantExecService <code>id</code>\n+  * @param execService int ExecService <code>id</code>\n+  */\n+\n+\n+ removeDependency {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().removeDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n+ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Checks whether one execService depends on the other.\n+  *\n+  * @param dependantExecService int DependantExecService <code>id</code>\n+  * @param execService int ExecService <code>id</code>\n+  * @exampleResponse 1\n+  * @return int 1 = true - yes, there is such a dependency, 0 = false - no, there is not such a dependency\n+  */\n+\n+\n+ isThereDependency {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (ac.getGeneralServiceManager().isThereDependency(ac.getExecServiceById(parms.readInt(\"execService\")),\n+ac.getExecServiceById(parms.readInt(\"dependantExecService\")))) return 1;\n+   else return 0;\n+  }\n+ },\n+\n+ /*#\n+  * List execServices depending on the given execService\n+  *\n+  * @param execService int ExecService <code>id</code>\n+  * @return List<ExecService> A list of execServices that are depending on the given execService.\n+  */\n+\n+\n+ listExecServicesDependingOn {\n+  public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getGeneralServiceManager().listExecServicesDependingOn(ac.getSession(), ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * List execServices this execService depends on\n+  *\n+  * @param dependantExecService int dependantExecService <code>id</code>\n+  * @return List<ExecService> A list of execServices this execService depends on.\n+  */\n+\n+\n+ listExecServicesThisExecServiceDependsOn {\n+  public List<ExecService> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().listExecServicesThisExecServiceDependsOn(ac.getSession(), ac.getExecServiceById(parms.readInt(\"dependantExecService\")));\n+  }\n+ },\n+\n+ /*#\n+  * Forces service propagation on defined facility.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+ /*#\n+  * Forces service propagation on defined facility.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+\n+\n+ forceServicePropagation {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"facility\")) {\n+    if (ac.getGeneralServiceManager().forceServicePropagation(ac.getSession(),\n+ac.getFacilityById(parms.readInt(\"facility\")),\n+ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   } else {\n+    if (ac.getGeneralServiceManager().forceServicePropagation(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Plans service propagation on defined facility.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+ /*#\n+  * Plans service propagation on defined facility.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+\n+\n+ planServicePropagation {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"facility\")) {\n+    if (ac.getGeneralServiceManager().planServicePropagation(ac.getSession(),\n+ac.getFacilityById(parms.readInt(\"facility\")),\n+ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   } else {\n+    if (ac.getGeneralServiceManager().planServicePropagation(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n+  * 1 - allowed / 0 - one of service exec services is denied on this facility (=> service is denied).\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<ServiceForGUI> list of assigned services with allowed property\n+  */\n+\n+\n+ getFacilityAssignedServicesForGUI {\n+  public List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getGeneralServiceManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n+  }\n+ };\n+}\n\\ No newline at end of file\n",
            "diff_size": 474
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/332/GeneralServiceManagerMethod.java\nindex fa7f6e867f0..19d2c92f600 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/332/GeneralServiceManagerMethod.java\n@@ -142,7 +142,7 @@ public enum GeneralServiceManagerMethod implements ManagerMethod {\n \t\tac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"service\")),\n \t\tac.getFacilityById(parms.readInt(\"facility\")));\n \t\treturn null;\n-\t    }\n+\t}\n \t},\n \n \t/*#\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/332/GeneralServiceManagerMethod.java\nindex fa7f6e867f0..19d2c92f600 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/332/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/332/GeneralServiceManagerMethod.java\n@@ -142,7 +142,7 @@ public enum GeneralServiceManagerMethod implements ManagerMethod {\n \t\tac.getGeneralServiceManager().banExecServiceOnFacility(ac.getSession(), ac.getExecServiceById(parms.readInt(\"service\")),\n \t\tac.getFacilityById(parms.readInt(\"facility\")));\n \t\treturn null;\n-\t    }\n+\t}\n \t},\n \n \t/*#\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}