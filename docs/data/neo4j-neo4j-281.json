{
    "project_name": "neo4j-neo4j",
    "error_id": "281",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "78",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/281/TransactionApplierFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/281/TransactionApplierFactory.java\nindex 13338f40829..71820c88831 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/281/TransactionApplierFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/281/TransactionApplierFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import java.io.IOException;\n@@ -25,7 +26,7 @@ import org.neo4j.storageengine.api.CommandsToApply;\n \n /**\n  * Responsible for dealing with batches of transactions. See also {@link TransactionApplier}\n- *\n+ * <p>\n  * Typical usage looks like:\n  * <pre>\n  * TransactionApplierFactory applierFactory = getApplierFactory();\n@@ -55,7 +56,7 @@ public interface TransactionApplierFactory\n     /**\n      * Get the suitable {@link TransactionApplier} for a given transaction, and the store which this {@link\n      * TransactionApplierFactory} is associated with.\n-     *\n+     * <p>\n      * Typically you'd want to use this in a try-with-resources block to automatically close the {@link\n      * TransactionApplier} when finished with the transaction, f.ex. as:\n      * <pre>\n@@ -68,11 +69,11 @@ public interface TransactionApplierFactory\n      * }\n      * </pre>\n      *\n-     * @param transaction The transaction which this applier is going to apply. Once we don't have to validate index\n-     * updates anymore, we can change this to simply be the transactionId\n+     * @param transaction  The transaction which this applier is going to apply. Once we don't have to validate index\n+     *                     updates anymore, we can change this to simply be the transactionId\n      * @param batchContext TODO:\n      * @return a {@link TransactionApplier} which can apply this transaction and other commands to the store.\n      * @throws IOException on error.\n      */\n-    TransactionApplier startTx( CommandsToApply transaction, BatchContext batchContext ) throws IOException;\n+    TransactionApplier startTx(CommandsToApply transaction, BatchContext batchContext) throws IOException;\n }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/281/TransactionApplierFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/281/TransactionApplierFactory.java\nindex 13338f40829..9e4fe9a02ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/281/TransactionApplierFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/281/TransactionApplierFactory.java\n@@ -75,4 +75,4 @@ public interface TransactionApplierFactory\n      * @throws IOException on error.\n      */\n     TransactionApplier startTx( CommandsToApply transaction, BatchContext batchContext ) throws IOException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}