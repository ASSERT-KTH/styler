{
    "project_name": "vassalengine-vassal",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "534",
                "column": "20",
                "severity": "error",
                "message": "'(' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "   * @param console potential console command (without any chat livery added to it)\n   */\n  public void send (String msg, String console) {\n    if (!consoleHook(console, \"\", false)) {\n      send(msg);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/27/Chatter.java\nindex ca092f11b57..ff63398dcc6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/27/Chatter.java\n@@ -531,7 +531,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n    * @param msg message to display if not a console command\n    * @param console potential console command (without any chat livery added to it)\n    */\n-  public void send (String msg, String console) {\n+  public void send(String msg, String console) {\n     if (!consoleHook(console, \"\", false)) {\n       send(msg);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/27/Chatter.java\nindex ca092f11b57..2e98aeb87d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/27/Chatter.java\n@@ -15,6 +15,7 @@\n  * License along with this library; if not, copies are available\n  * at http://www.opensource.org.\n  */\n+\n package VASSAL.build.module;\n \n import VASSAL.tools.ProblemDialog;\n@@ -69,16 +70,19 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n   protected StyleSheet style;\n \n   protected JTextField input;\n-  protected JScrollPane scroll = new ScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n-  protected JScrollPane scroll2 = new ScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n-  protected static final String MY_CHAT_COLOR    = \"HTMLChatColor\";          //$NON-NLS-1$ // Different tags to \"restart\" w/ new default scheme\n+  protected JScrollPane scroll =\n+    new ScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n+  protected JScrollPane scroll2 =\n+    new ScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n+  protected static final String MY_CHAT_COLOR = \"HTMLChatColor\";\n+    //$NON-NLS-1$ // Different tags to \"restart\" w/ new default scheme\n   protected static final String OTHER_CHAT_COLOR = \"HTMLotherChatColor\";     //$NON-NLS-1$\n-  protected static final String GAME_MSG1_COLOR  = \"HTMLgameMessage1Color\";  //$NON-NLS-1$\n-  protected static final String GAME_MSG2_COLOR  = \"HTMLgameMessage2Color\";  //$NON-NLS-1$ \n-  protected static final String GAME_MSG3_COLOR  = \"HTMLgameMessage3Color\";  //$NON-NLS-1$ \n-  protected static final String GAME_MSG4_COLOR  = \"HTMLgameMessage4Color\";  //$NON-NLS-1$ \n-  protected static final String GAME_MSG5_COLOR  = \"HTMLgameMessage5Color\";  //$NON-NLS-1$ \n-  protected static final String SYS_MSG_COLOR    = \"HTMLsystemMessageColor\"; //$NON-NLS-1$\n+  protected static final String GAME_MSG1_COLOR = \"HTMLgameMessage1Color\";  //$NON-NLS-1$\n+  protected static final String GAME_MSG2_COLOR = \"HTMLgameMessage2Color\";  //$NON-NLS-1$\n+  protected static final String GAME_MSG3_COLOR = \"HTMLgameMessage3Color\";  //$NON-NLS-1$\n+  protected static final String GAME_MSG4_COLOR = \"HTMLgameMessage4Color\";  //$NON-NLS-1$\n+  protected static final String GAME_MSG5_COLOR = \"HTMLgameMessage5Color\";  //$NON-NLS-1$\n+  protected static final String SYS_MSG_COLOR = \"HTMLsystemMessageColor\"; //$NON-NLS-1$\n \n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n   protected static final String GAME_MSG_COLOR = \"gameMessageColor\"; //NON-NLS\n@@ -95,9 +99,9 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     return Resources.getString(\"Chat.anonymous\"); //$NON-NLS-1$\n   }\n \n-  public Chatter() {    \n+  public Chatter() {\n     setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n-    \n+\n     conversation = new JTextArea(); // For backward override compatibility only.\n \n     //BR// Conversation is now a JTextPane w/ HTMLEditorKit to process HTML, which gives us HTML support \"for free\".\n@@ -115,8 +119,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n       for (int i = 0; i < 15; ++i) {\n         kit.insertHTML(doc, doc.getLength(), \"<br>\", 0, 0, null); //NON-NLS\n       }\n-    } \n-    catch (BadLocationException | IOException ble) {\n+    } catch (BadLocationException | IOException ble) {\n       ErrorDialog.bug(ble);\n     }\n \n@@ -135,7 +138,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n       input.setText(\"\"); //$NON-NLS-1$\n     });\n     input.setMaximumSize(new Dimension(input.getMaximumSize().width, input.getPreferredSize().height));\n-    \n+\n     final FontMetrics fm = getFontMetrics(myFont);\n     final int fontHeight = fm.getHeight();\n \n@@ -145,15 +148,16 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     scroll.getVerticalScrollBar().setUnitIncrement(input.getPreferredSize().height); //Scroll this faster\n     add(scroll);\n     add(input);\n-    \n-    setPreferredSize(new Dimension(input.getMaximumSize().width, input.getPreferredSize().height + conversationPane.getPreferredSize().height));\n+\n+    setPreferredSize(\n+      new Dimension(input.getMaximumSize().width, input.getPreferredSize().height + conversationPane.getPreferredSize().height));\n   }\n-  \n-  \n+\n+\n   /**\n-   * Because our Chatters make themselves visible in their constructor, providing a way for an overriding class to \n+   * Because our Chatters make themselves visible in their constructor, providing a way for an overriding class to\n    * \"turn this chatter off\" is friendlier than What Went Before.\n-   * \n+   *\n    * @param vis - whether this chatter should be visible\n    */\n   protected void setChatterVisible(boolean vis) {\n@@ -161,31 +165,34 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     input.setVisible(vis);\n     scroll.setVisible(vis);\n   }\n-  \n+\n \n   protected String formatChat(String text) {\n     final String id = GlobalOptions.getInstance().getPlayerId();\n-    return String.format(\"&lt;%s&gt; - %s\", id.isEmpty() ? \"(\" + getAnonymousUserName() + \")\" : id, text); //HTML-friendly angle brackets //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n+    return String.format(\"&lt;%s&gt; - %s\", id.isEmpty() ? \"(\" + getAnonymousUserName() + \")\" : id,\n+      text); //HTML-friendly angle brackets //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n   }\n-  \n+\n   public JTextField getInputField() {\n     return input;\n   }\n \n   /**\n    * Styles a chat message based on the player who sent it. Presently just distinguishes a chat message \"from me\" from a chat message \"from anyone else\".\n-   * \n+   * <p>\n    * To make the player colors easy to override in a custom class\n    * (my modules have logic to assign individual player colors -- beyond the scope of the present effort but a perhaps a fun future addition)\n+   *\n    * @param s - chat message from a player\n    * @return - an entry in our CSS style sheet to use for this chat message\n    */\n-  protected String getChatStyle(String s) {   \n+  protected String getChatStyle(String s) {\n     return s.startsWith(formatChat(\"\").trim()) ? \"mychat\" : \"other\"; //NON-NLS\n   }\n-    \n+\n   /**\n    * A hook for inserting a console class that accepts commands\n+   *\n    * @param s            - chat message\n    * @param style        - current style name (contains information that might be useful)\n    * @param html_allowed - flag if html_processing is enabled for this message (allows console to apply security considerations)\n@@ -195,18 +202,17 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n   public boolean consoleHook(String s, String style, boolean html_allowed) {\n     return GameModule.getGameModule().getConsole().exec(s, style, html_allowed);\n   }\n-  \n+\n \n   /**\n    * Display a message in the text area. Ensures we execute in the EDT\n    */\n-  public void show(String s) {  \n+  public void show(String s) {\n     if (SwingUtilities.isEventDispatchThread()) {\n       doShow(s);\n-    }\n-    else {\n+    } else {\n       SwingUtilities.invokeLater(() -> doShow(s));\n-    }      \n+    }\n   }\n \n \n@@ -224,18 +230,15 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n         html_allowed = (QuickColors.getQuickColor(s, \"*\") >= 0) || GlobalOptions.getInstance().chatterHTMLSupport();\n         style = QuickColors.getQuickColorHTMLStyle(s, \"*\");\n         s = QuickColors.stripQuickColorTag(s, \"*\");\n-      }\n-      else if (s.startsWith(\"-\")) {\n+      } else if (s.startsWith(\"-\")) {\n         html_allowed = true;\n         style = (QuickColors.getQuickColor(s, \"-\") >= 0) ? QuickColors.getQuickColorHTMLStyle(s, \"-\") : \"sys\"; //NON-NLS\n         s = QuickColors.stripQuickColorTag(s, \"-\");\n-      }\n-      else {\n+      } else {\n         style = getChatStyle(s);\n         html_allowed = false;\n       }\n-    } \n-    else {\n+    } else {\n       style = \"msg\";  //NON-NLS\n       html_allowed = false;\n     }\n@@ -245,7 +248,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     // (2) Legacy module \"report\" text when not explicitly opted in w/ first character or preference setting \n     if (!html_allowed) {\n       s = s.replaceAll(\"<\", \"&lt;\")  //NON-NLS // This prevents any unwanted tag from functioning\n-           .replaceAll(\">\", \"&gt;\"); //NON-NLS // This makes sure > doesn't break any of our legit <div> tags\n+        .replaceAll(\">\", \"&gt;\"); //NON-NLS // This makes sure > doesn't break any of our legit <div> tags\n     }\n \n     // Now we have to fix up any legacy angle brackets around the word <observer>\n@@ -260,8 +263,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     // messages.\n     try {\n       kit.insertHTML(doc, doc.getLength(), \"\\n<div class=\" + style + \">\" + s + \"</div>\", 0, 0, null); //NON-NLS\n-    } \n-    catch (BadLocationException | IOException ble) {\n+    } catch (BadLocationException | IOException ble) {\n       ErrorDialog.bug(ble);\n     }\n \n@@ -272,30 +274,34 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n   /**\n    * Adds or updates a CSS stylesheet entry. Styles in the color, font type, and font size.\n-   * @param s Style name\n-   * @param f Font to use\n-   * @param c Color for text\n+   *\n+   * @param s           Style name\n+   * @param f           Font to use\n+   * @param c           Color for text\n    * @param font_weight Bold? Italic?\n-   * @param size Font size\n+   * @param size        Font size\n    */\n   protected void addStyle(String s, Font f, Color c, String font_weight, int size) {\n-    if ((style == null) || (c == null)) return;\n+    if ((style == null) || (c == null)) {\n+      return;\n+    }\n     style.addRule(s +\n-                  \" {color:\" +                                                               //NON-NLS\n-                  String.format(\"#%02x%02x%02x\", c.getRed(), c.getGreen(), c.getBlue()) +    //NON-NLS\n-                  \"; font-family:\" +                                                         //NON-NLS\n-                  f.getFamily() + \n-                  \"; font-size:\" +                                                           //NON-NLS\n-                  (size > 0 ? size : f.getSize()) + \n-                  \"; \" +                                                                     //NON-NLS\n-                  ((!font_weight.isBlank()) ? \"font-weight:\" + font_weight + \"; \" : \"\") +    //NON-NLS\n-                  \"}\");                                                                      //NON-NLS\n+      \" {color:\" +                                                               //NON-NLS\n+      String.format(\"#%02x%02x%02x\", c.getRed(), c.getGreen(), c.getBlue()) +    //NON-NLS\n+      \"; font-family:\" +                                                         //NON-NLS\n+      f.getFamily() +\n+      \"; font-size:\" +                                                           //NON-NLS\n+      (size > 0 ? size : f.getSize()) +\n+      \"; \" +                                                                     //NON-NLS\n+      ((!font_weight.isBlank()) ? \"font-weight:\" + font_weight + \"; \" : \"\") +    //NON-NLS\n+      \"}\");                                                                      //NON-NLS\n \n     style.addRule(s + \"color {color:\" + String.format(\"#%02x%02x%02x\", c.getRed(), c.getGreen(), c.getBlue()) + \"; }\"); //NON-NLS\n   }\n \n   /**\n    * Build ourselves a CSS stylesheet from our preference font/color settings.\n+   *\n    * @param f - Font to use for this stylesheet\n    */\n   protected void makeStyleSheet(Font f) {\n@@ -307,19 +313,18 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n       if (myFont == null) {\n         f = new Font(\"SansSerif\", Font.PLAIN, 12); //NON-NLS\n         myFont = f;\n-      } \n-      else {\n+      } else {\n         f = myFont;\n       }\n     }\n-    addStyle(\".msg\",    f, gameMsg,   \"\",     0); //NON-NLS\n-    addStyle(\".msg2\",   f, gameMsg2,  \"\",     0); //NON-NLS\n-    addStyle(\".msg3\",   f, gameMsg3,  \"\",     0); //NON-NLS\n-    addStyle(\".msg4\",   f, gameMsg4,  \"\",     0); //NON-NLS\n-    addStyle(\".msg5\",   f, gameMsg5,  \"\",     0); //NON-NLS\n-    addStyle(\".mychat\", f, myChat,    \"bold\", 0); //NON-NLS\n+    addStyle(\".msg\", f, gameMsg, \"\", 0); //NON-NLS\n+    addStyle(\".msg2\", f, gameMsg2, \"\", 0); //NON-NLS\n+    addStyle(\".msg3\", f, gameMsg3, \"\", 0); //NON-NLS\n+    addStyle(\".msg4\", f, gameMsg4, \"\", 0); //NON-NLS\n+    addStyle(\".msg5\", f, gameMsg5, \"\", 0); //NON-NLS\n+    addStyle(\".mychat\", f, myChat, \"bold\", 0); //NON-NLS\n     addStyle(\".other \", f, otherChat, \"bold\", 0); //NON-NLS\n-    addStyle(\".sys\",    f, systemMsg, \"\",     0); //NON-NLS\n+    addStyle(\".sys\", f, systemMsg, \"\", 0); //NON-NLS\n \n     // A fun extension would be letting the module designer provide extra class styles. \n   }\n@@ -335,8 +340,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n         input.setText(\"XXX\"); //$NON-NLS-1$\n         input.setFont(f);\n         input.setText(\"\"); //$NON-NLS-1$\n-      } \n-      else {\n+      } else {\n         input.setFont(f);\n       }\n     }\n@@ -367,7 +371,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     mod.addKeyStrokeSource(new KeyStrokeSource(this, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT));\n \n     final FontConfigurer chatFont = new FontConfigurer(\"ChatFont\", //NON-NLS\n-                                                       Resources.getString(\"Chatter.chat_font_preference\"));\n+      Resources.getString(\"Chatter.chat_font_preference\"));\n \n     chatFont.addPropertyChangeListener(evt -> setFont((Font) evt.getNewValue()));\n \n@@ -384,7 +388,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     // game message color\n     //\n     final ColorConfigurer gameMsgColor = new ColorConfigurer(GAME_MSG1_COLOR,\n-                                                             Resources.getString(\"Chatter.game_messages_preference\"), Color.black);\n+      Resources.getString(\"Chatter.game_messages_preference\"), Color.black);\n \n     gameMsgColor.addPropertyChangeListener(e -> {\n       gameMsg = (Color) e.getNewValue();\n@@ -397,7 +401,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n     // game message color #2 (messages starting with \"!\") \n     final ColorConfigurer gameMsg2Color = new ColorConfigurer(GAME_MSG2_COLOR,\n-                                                              Resources.getString(\"Chatter.game_messages_preference_2\"), new Color(0, 153, 51));\n+      Resources.getString(\"Chatter.game_messages_preference_2\"), new Color(0, 153, 51));\n \n     gameMsg2Color.addPropertyChangeListener(e -> {\n       gameMsg2 = (Color) e.getNewValue();\n@@ -410,7 +414,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n     // game message color #3 (messages starting with \"?\")\n     final ColorConfigurer gameMsg3Color = new ColorConfigurer(GAME_MSG3_COLOR,\n-                                                              Resources.getString(\"Chatter.game_messages_preference_3\"), new Color(255, 102, 102));\n+      Resources.getString(\"Chatter.game_messages_preference_3\"), new Color(255, 102, 102));\n \n     gameMsg3Color.addPropertyChangeListener(e -> {\n       gameMsg3 = (Color) e.getNewValue();\n@@ -424,7 +428,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n     // game message color #4 (messages starting with \"~\")\n     final ColorConfigurer gameMsg4Color = new ColorConfigurer(GAME_MSG4_COLOR,\n-                                                              Resources.getString(\"Chatter.game_messages_preference_4\"), new Color(255, 0, 0));\n+      Resources.getString(\"Chatter.game_messages_preference_4\"), new Color(255, 0, 0));\n \n     gameMsg4Color.addPropertyChangeListener(e -> {\n       gameMsg4 = (Color) e.getNewValue();\n@@ -438,7 +442,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n     // game message color #5 (messages starting with \"`\")\n     final ColorConfigurer gameMsg5Color = new ColorConfigurer(GAME_MSG5_COLOR,\n-                                                              Resources.getString(\"Chatter.game_messages_preference_5\"), new Color(153, 0, 153));\n+      Resources.getString(\"Chatter.game_messages_preference_5\"), new Color(153, 0, 153));\n \n     gameMsg5Color.addPropertyChangeListener(e -> {\n       gameMsg5 = (Color) e.getNewValue();\n@@ -451,7 +455,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n \n     final ColorConfigurer systemMsgColor = new ColorConfigurer(SYS_MSG_COLOR,\n-                                                               Resources.getString(\"Chatter.system_message_preference\"), new Color(160, 160, 160));\n+      Resources.getString(\"Chatter.system_message_preference\"), new Color(160, 160, 160));\n \n     systemMsgColor.addPropertyChangeListener(e -> {\n       systemMsg = (Color) e.getNewValue();\n@@ -475,7 +479,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n     globalPrefs.addOption(Resources.getString(\"Chatter.chat_window\"), myChatColor);\n \n-    myChat = (Color) globalPrefs.getValue(MY_CHAT_COLOR);    \n+    myChat = (Color) globalPrefs.getValue(MY_CHAT_COLOR);\n \n     final ColorConfigurer otherChatColor = new ColorConfigurer(\n       OTHER_CHAT_COLOR,\n@@ -490,7 +494,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n     globalPrefs.addOption(Resources.getString(\"Chatter.chat_window\"), otherChatColor);\n     otherChat = (Color) globalPrefs.getValue(OTHER_CHAT_COLOR);\n-    \n+\n     makeStyleSheet(myFont);\n   }\n \n@@ -513,13 +517,13 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     }\n     return DisplayText.PREFIX + ((DisplayText) c).getMessage();\n   }\n-  \n-  \n+\n+\n   /**\n    * Displays the message, Also logs and sends to the server a {@link Command}\n-   * that displays this message. \n+   * that displays this message.\n    */\n-  public void send(String msg) {    \n+  public void send(String msg) {\n     if (msg != null && !msg.isEmpty()) {\n       show(msg);\n       GameModule.getGameModule().sendAndLog(new DisplayText(this, msg));\n@@ -528,18 +532,19 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n   /**\n    * Checks first for an intercepted console command; otherwise displays the message\n-   * @param msg message to display if not a console command\n+   *\n+   * @param msg     message to display if not a console command\n    * @param console potential console command (without any chat livery added to it)\n    */\n-  public void send (String msg, String console) {\n+  public void send(String msg, String console) {\n     if (!consoleHook(console, \"\", false)) {\n       send(msg);\n     }\n   }\n-  \n-  \n+\n+\n   /**\n-   * Warning message method -- same as send, but accepts messages from static methods. For reporting soft-fail problems in modules.  \n+   * Warning message method -- same as send, but accepts messages from static methods. For reporting soft-fail problems in modules.\n    */\n   public static void warning(String msg) {\n     final Chatter chatter = GameModule.getGameModule().getChatter();\n@@ -555,23 +560,24 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n     if ((e.getKeyCode() == 0 || e.getKeyCode() == KeyEvent.CHAR_UNDEFINED)\n       && !Character.isISOControl(e.getKeyChar())) {\n-      if ((e.getModifiers() & KeyEvent.ALT_DOWN_MASK) != 0)  {\n+      if ((e.getModifiers() & KeyEvent.ALT_DOWN_MASK) != 0) {\n         return;  // This catches occasional Alt+Key events that should not be forwarded to Chatter\n       }\n       input.setText(input.getText() + e.getKeyChar());\n-    }\n-    else if (e.isOnKeyRelease()) {\n+    } else if (e.isOnKeyRelease()) {\n       switch (e.getKeyCode()) {\n       case KeyEvent.VK_ENTER:\n-        if (!input.getText().isEmpty())\n+        if (!input.getText().isEmpty()) {\n           send(formatChat(input.getText()), input.getText());\n+        }\n         input.setText(\"\"); //$NON-NLS-1$\n         break;\n       case KeyEvent.VK_BACK_SPACE:\n       case KeyEvent.VK_DELETE:\n         final String s = input.getText();\n-        if (!s.isEmpty())\n+        if (!s.isEmpty()) {\n           input.setText(s.substring(0, s.length() - 1));\n+        }\n         break;\n       }\n     }\n@@ -580,7 +586,8 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n \n   /**\n    * This is a {@link Command} object that, when executed, displays\n-   * a text message in the Chatter's text area     */\n+   * a text message in the Chatter's text area\n+   */\n   public static class DisplayText extends Command {\n \n     public static final String PREFIX = \"CHAT\";  //$NON-NLS-1$\n@@ -594,8 +601,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n       if (msg.startsWith(\"<>\")) { //NON-NLS\n         msg = \"&lt;(\" + Chatter.getAnonymousUserName() + \")&gt;\" + s.substring(2); // HTML-friendly //NON-NLS\n         // angle brackets\n-      } \n-      else {\n+      } else {\n         msg = s;\n       }\n     }\n@@ -628,13 +634,17 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n     f.setVisible(true);\n   }\n \n-  /** @deprecated No Replacement */\n+  /**\n+   * @deprecated No Replacement\n+   */\n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n   public void setHandle(@SuppressWarnings(\"unused\") String s) {\n     ProblemDialog.showDeprecated(\"2020-08-06\"); //NON-NLS\n   }\n \n-  /** @deprecated use {@link GlobalOptions#getPlayerId()} */\n+  /**\n+   * @deprecated use {@link GlobalOptions#getPlayerId()}\n+   */\n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n   public String getHandle() {\n     ProblemDialog.showDeprecated(\"2020-08-06\"); //NON-NLS\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/27/Chatter.java\nindex ca092f11b57..ff63398dcc6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/27/Chatter.java\n@@ -531,7 +531,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n    * @param msg message to display if not a console command\n    * @param console potential console command (without any chat livery added to it)\n    */\n-  public void send (String msg, String console) {\n+  public void send(String msg, String console) {\n     if (!consoleHook(console, \"\", false)) {\n       send(msg);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_three_grams/27/Chatter.java\nindex ca092f11b57..ff63398dcc6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/27/Chatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_three_grams/27/Chatter.java\n@@ -531,7 +531,7 @@ public class Chatter extends JPanel implements CommandEncoder, Buildable {\n    * @param msg message to display if not a console command\n    * @param console potential console command (without any chat livery added to it)\n    */\n-  public void send (String msg, String console) {\n+  public void send(String msg, String console) {\n     if (!consoleHook(console, \"\", false)) {\n       send(msg);\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}