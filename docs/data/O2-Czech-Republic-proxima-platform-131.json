{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "131",
    "information": {
        "errors": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 95).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "          .resolve();\n  private final Repository repo = Repository.ofTest(config);\n  private final DirectDataOperator direct = repo.getOrCreateOperator(DirectDataOperator.class);\n  private final EntityDescriptor event = repo.getEntity(\"event\");\n  private final AttributeDescriptor<byte[]> data = event.getAttribute(\"data\");\n  private final EntityDescriptor gateway = repo.getEntity(\"gateway\");",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/131/GlobalWatermarkThroughputLimiterTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/131/GlobalWatermarkThroughputLimiterTest.java\nindex b0cd456f8b2..1467d200a1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/131/GlobalWatermarkThroughputLimiterTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/131/GlobalWatermarkThroughputLimiterTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.storage;\n \n import static org.junit.Assert.*;\n@@ -35,7 +36,8 @@ public class GlobalWatermarkThroughputLimiterTest {\n           .withFallback(ConfigFactory.load(\"test-reference.conf\"))\n           .resolve();\n   private final Repository repo = Repository.ofTest(config);\n-  private final DirectDataOperator direct = repo.getOrCreateOperator(DirectDataOperator.class);\n+  private final DirectDataOperator direct =\n+      repo.getOrCreateOperator(DirectDataOperator.class);\n   private final EntityDescriptor event = repo.getEntity(\"event\");\n   private final AttributeDescriptor<byte[]> data = event.getAttribute(\"data\");\n   private final EntityDescriptor gateway = repo.getEntity(\"gateway\");\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/131/GlobalWatermarkThroughputLimiterTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/131/GlobalWatermarkThroughputLimiterTest.java\nindex b0cd456f8b2..0b23e9da4aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/131/GlobalWatermarkThroughputLimiterTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/131/GlobalWatermarkThroughputLimiterTest.java\n@@ -30,11 +30,10 @@ import org.junit.Test;\n /** Test parsing of {@link cz.o2.proxima.storage.ThroughputLimiter} from config. */\n public class GlobalWatermarkThroughputLimiterTest {\n \n-  private final Config config =\n-      ConfigFactory.load(\"test-limiter.conf\")\n+  private final Config config = ConfigFactory.load(\"test-limiter.conf\")\n           .withFallback(ConfigFactory.load(\"test-reference.conf\"))\n           .resolve();\n-  private final Repository repo = Repository.ofTest(config);\n+private final Repository repo = Repository.ofTest(config);\n   private final DirectDataOperator direct = repo.getOrCreateOperator(DirectDataOperator.class);\n   private final EntityDescriptor event = repo.getEntity(\"event\");\n   private final AttributeDescriptor<byte[]> data = event.getAttribute(\"data\");\n@@ -50,4 +49,4 @@ public class GlobalWatermarkThroughputLimiterTest {\n     assertTrue(reader.isPresent());\n     assertNotEquals(\"LimitedCommitLogReader\", reader.get().getClass().getSimpleName());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/131/GlobalWatermarkThroughputLimiterTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/131/GlobalWatermarkThroughputLimiterTest.java\nindex b0cd456f8b2..72db8daa4a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/131/GlobalWatermarkThroughputLimiterTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/131/GlobalWatermarkThroughputLimiterTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.direct.storage;\n \n import static org.junit.Assert.*;\n-\n import com.typesafe.config.Config;\n import com.typesafe.config.ConfigFactory;\n import cz.o2.proxima.direct.commitlog.CommitLogReader;\n@@ -28,12 +27,12 @@ import java.util.Optional;\n import org.junit.Test;\n \n /** Test parsing of {@link cz.o2.proxima.storage.ThroughputLimiter} from config. */\n+\n+\n public class GlobalWatermarkThroughputLimiterTest {\n \n-  private final Config config =\n-      ConfigFactory.load(\"test-limiter.conf\")\n-          .withFallback(ConfigFactory.load(\"test-reference.conf\"))\n-          .resolve();\n+  private final Config config = ConfigFactory.load(\"test-limiter.conf\").withFallback(ConfigFactory.load(\"test-reference.conf\"))\n+                                                                       .resolve();\n   private final Repository repo = Repository.ofTest(config);\n   private final DirectDataOperator direct = repo.getOrCreateOperator(DirectDataOperator.class);\n   private final EntityDescriptor event = repo.getEntity(\"event\");\n@@ -45,9 +44,11 @@ public class GlobalWatermarkThroughputLimiterTest {\n   public void testEventDataCommitLogLimited() {\n     Optional<CommitLogReader> reader = direct.getCommitLogReader(data);\n     assertTrue(reader.isPresent());\n-    assertEquals(\"LimitedCommitLogReader\", reader.get().getClass().getSimpleName());\n+    assertEquals(\"LimitedCommitLogReader\", reader.get().getClass()\n+                                                       .getSimpleName());\n     reader = direct.getCommitLogReader(armed);\n     assertTrue(reader.isPresent());\n-    assertNotEquals(\"LimitedCommitLogReader\", reader.get().getClass().getSimpleName());\n+    assertNotEquals(\"LimitedCommitLogReader\", reader.get().getClass()\n+                                                          .getSimpleName());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}