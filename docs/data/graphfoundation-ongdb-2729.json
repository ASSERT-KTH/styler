{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2729",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2729/DurationSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2729/DurationSchemaKey.java\nindex c21d7e25617..dc8550bd361 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2729/DurationSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2729/DurationSchemaKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.values.storable.DurationValue;\n@@ -26,99 +27,99 @@ import static java.lang.String.format;\n \n /**\n  * Includes value and entity id (to be able to handle non-unique values). A value can be any {@link DurationValue}.\n- *\n+ * <p>\n  * Durations are tricky, because exactly how long a duration is depends on the start date. We therefore sort them by\n  * average total time in seconds, but keep the original months and days so we can reconstruct the value.\n  */\n class DurationSchemaKey extends NativeSchemaKey<DurationSchemaKey>\n {\n-    /**\n-     * An average month is 30 days, 10 hours and 30 minutes.\n-     * In seconds this is (((30 * 24) + 10) * 60 + 30) * 60 = 2629800\n-     */\n-    private static final long AVG_MONTH_SECONDS = 2_629_800;\n-    private static final long AVG_DAY_SECONDS = 86_400;\n+  /**\n+   * An average month is 30 days, 10 hours and 30 minutes.\n+   * In seconds this is (((30 * 24) + 10) * 60 + 30) * 60 = 2629800\n+   */\n+  private static final long AVG_MONTH_SECONDS = 2_629_800;\n+  private static final long AVG_DAY_SECONDS = 86_400;\n \n-    static final int SIZE =\n-            Long.BYTES +    /* totalAvgSeconds */\n-            Integer.BYTES + /* nanosOfSecond */\n-            Long.BYTES +    /* months */\n-            Long.BYTES +    /* days */\n-            Long.BYTES;     /* entityId */\n+  static final int SIZE =\n+      Long.BYTES +    /* totalAvgSeconds */\n+          Integer.BYTES + /* nanosOfSecond */\n+          Long.BYTES +    /* months */\n+          Long.BYTES +    /* days */\n+          Long.BYTES;     /* entityId */\n \n-    long totalAvgSeconds;\n-    int nanosOfSecond;\n-    long months;\n-    long days;\n+  long totalAvgSeconds;\n+  int nanosOfSecond;\n+  long months;\n+  long days;\n \n-    @Override\n-    public Value asValue()\n-    {\n-        long seconds = totalAvgSeconds - months * AVG_MONTH_SECONDS - days * AVG_DAY_SECONDS;\n-        return DurationValue.duration( months, days, seconds, nanosOfSecond );\n-    }\n+  @Override\n+  public Value asValue()\n+  {\n+    long seconds = totalAvgSeconds - months * AVG_MONTH_SECONDS - days * AVG_DAY_SECONDS;\n+    return DurationValue.duration(months, days, seconds, nanosOfSecond);\n+  }\n \n-    @Override\n-    public void initValueAsLowest()\n-    {\n-        totalAvgSeconds = Long.MIN_VALUE;\n-        nanosOfSecond = Integer.MIN_VALUE;\n-        months = Long.MIN_VALUE;\n-        days = Long.MIN_VALUE;\n-    }\n+  @Override\n+  public void initValueAsLowest()\n+  {\n+    totalAvgSeconds = Long.MIN_VALUE;\n+    nanosOfSecond = Integer.MIN_VALUE;\n+    months = Long.MIN_VALUE;\n+    days = Long.MIN_VALUE;\n+  }\n \n-    @Override\n-    public void initValueAsHighest()\n-    {\n-        totalAvgSeconds = Long.MAX_VALUE;\n-        nanosOfSecond = Integer.MAX_VALUE;\n-        months = Long.MAX_VALUE;\n-        days = Long.MAX_VALUE;\n-    }\n+  @Override\n+  public void initValueAsHighest()\n+  {\n+    totalAvgSeconds = Long.MAX_VALUE;\n+    nanosOfSecond = Integer.MAX_VALUE;\n+    months = Long.MAX_VALUE;\n+    days = Long.MAX_VALUE;\n+  }\n \n-    @Override\n-    public int compareValueTo( DurationSchemaKey other )\n+  @Override\n+  public int compareValueTo(DurationSchemaKey other)\n+  {\n+    int comparison = Long.compare(totalAvgSeconds, other.totalAvgSeconds);\n+    if (comparison == 0)\n     {\n-        int comparison = Long.compare( totalAvgSeconds, other.totalAvgSeconds );\n-        if ( comparison == 0 )\n+      comparison = Integer.compare(nanosOfSecond, other.nanosOfSecond);\n+      if (comparison == 0)\n+      {\n+        comparison = Long.compare(months, other.months);\n+        if (comparison == 0)\n         {\n-            comparison = Integer.compare( nanosOfSecond, other.nanosOfSecond );\n-            if ( comparison == 0 )\n-            {\n-                comparison = Long.compare( months, other.months );\n-                if ( comparison == 0 )\n-                {\n-                    comparison = Long.compare( days, other.days );\n-                }\n-            }\n+          comparison = Long.compare(days, other.days);\n         }\n-        return comparison;\n+      }\n     }\n+    return comparison;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( \"value=%s,entityId=%d,totalAvgSeconds=%d,nanosOfSecond=%d,months=%d,days=%d\",\n-                        asValue(), getEntityId(), totalAvgSeconds, nanosOfSecond, months, days );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"value=%s,entityId=%d,totalAvgSeconds=%d,nanosOfSecond=%d,months=%d,days=%d\",\n+        asValue(), getEntityId(), totalAvgSeconds, nanosOfSecond, months, days);\n+  }\n \n-    @Override\n-    public void writeDuration( long months, long days, long seconds, int nanos )\n-    {   // no-op\n-        this.totalAvgSeconds = months * AVG_MONTH_SECONDS + days * AVG_DAY_SECONDS + seconds;\n-        this.nanosOfSecond = nanos;\n-        this.months = months;\n-        this.days = days;\n-    }\n+  @Override\n+  public void writeDuration(long months, long days, long seconds, int nanos)\n+  {   // no-op\n+    this.totalAvgSeconds = months * AVG_MONTH_SECONDS + days * AVG_DAY_SECONDS + seconds;\n+    this.nanosOfSecond = nanos;\n+    this.months = months;\n+    this.days = days;\n+  }\n \n-    @Override\n-    protected Value assertCorrectType( Value value )\n+  @Override\n+  protected Value assertCorrectType(Value value)\n+  {\n+    if (!(value instanceof DurationValue))\n     {\n-        if ( !(value instanceof DurationValue) )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support DurationValue, tried to create key from \" + value );\n-        }\n-        return value;\n+      throw new IllegalArgumentException(\n+          \"Key layout does only support DurationValue, tried to create key from \" + value);\n     }\n+    return value;\n+  }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2729/DurationSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2729/DurationSchemaKey.java\nindex c21d7e25617..f8776b34d15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2729/DurationSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2729/DurationSchemaKey.java\n@@ -39,14 +39,13 @@ class DurationSchemaKey extends NativeSchemaKey<DurationSchemaKey>\n     private static final long AVG_MONTH_SECONDS = 2_629_800;\n     private static final long AVG_DAY_SECONDS = 86_400;\n \n-    static final int SIZE =\n-            Long.BYTES +    /* totalAvgSeconds */\n+    static final int SIZE = Long.BYTES + /* totalAvgSeconds */\n             Integer.BYTES + /* nanosOfSecond */\n-            Long.BYTES +    /* months */\n-            Long.BYTES +    /* days */\n-            Long.BYTES;     /* entityId */\n-\n-    long totalAvgSeconds;\n+            Long.BYTES + /* months */\n+            Long.BYTES + /* days */\n+            Long.BYTES;\n+/* entityId */\n+long totalAvgSeconds;\n     int nanosOfSecond;\n     long months;\n     long days;\n@@ -98,13 +97,13 @@ class DurationSchemaKey extends NativeSchemaKey<DurationSchemaKey>\n     @Override\n     public String toString()\n     {\n-        return format( \"value=%s,entityId=%d,totalAvgSeconds=%d,nanosOfSecond=%d,months=%d,days=%d\",\n-                        asValue(), getEntityId(), totalAvgSeconds, nanosOfSecond, months, days );\n+        return format( \"value=%s,entityId=%d,totalAvgSeconds=%d,nanosOfSecond=%d,months=%d,days=%d\", asValue(), getEntityId(), totalAvgSeconds, nanosOfSecond, months, days );\n     }\n \n     @Override\n     public void writeDuration( long months, long days, long seconds, int nanos )\n-    {   // no-op\n+    {\n+    // no-op\n         this.totalAvgSeconds = months * AVG_MONTH_SECONDS + days * AVG_DAY_SECONDS + seconds;\n         this.nanosOfSecond = nanos;\n         this.months = months;\n@@ -114,11 +113,11 @@ class DurationSchemaKey extends NativeSchemaKey<DurationSchemaKey>\n     @Override\n     protected Value assertCorrectType( Value value )\n     {\n-        if ( !(value instanceof DurationValue) )\n+        if ( !( value instanceof DurationValue) )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support DurationValue, tried to create key from \" + value );\n+            throw new IllegalArgumentException( \"Key layout does only support DurationValue, tried to create key from \" + value );\n         }\n-        return value;\n+\n+return value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}