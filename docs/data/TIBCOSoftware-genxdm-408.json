{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "408",
    "information": {
        "errors": [
            {
                "line": "38",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl {\n\n\tpublic static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n\t\tif (expr instanceof ConvertibleNodeSetExpr) {\n\t\t\treturn (ConvertibleNodeSetExpr) expr;\n\t\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/408/WrappedNodeSetExpr.java\nindex 1c4d0ec471f..191b4e0cbd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/408/WrappedNodeSetExpr.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n \n public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl {\n \n-\tpublic static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n+public static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n \t\tif (expr instanceof ConvertibleNodeSetExpr) {\n \t\t\treturn (ConvertibleNodeSetExpr) expr;\n \t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/408/WrappedNodeSetExpr.java\nindex 1c4d0ec471f..140677a597e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/408/WrappedNodeSetExpr.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.xpath.v10.expressions;\n \n import org.genxdm.Model;\n@@ -35,78 +36,86 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n \n public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl {\n \n-\tpublic static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n-\t\tif (expr instanceof ConvertibleNodeSetExpr) {\n-\t\t\treturn (ConvertibleNodeSetExpr) expr;\n-\t\t}\n-\t\t\n-\t\treturn new WrappedNodeSetExpr(expr, optimizeFlags);\n-\t}\n-\t\n-\tpublic WrappedNodeSetExpr(NodeSetExpr expr, int optimizeFlags) {\n-\t\tm_nodeSetExpr = expr;\n-\t\tm_optimizeFlags = optimizeFlags;\n-\t}\n-\t\n-\t@Override\n-\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, N contextNode,\n-\t\t\tNodeDynamicContext<N> dynEnv) {\n-\t\treturn m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv);\n-\t}\n+    public static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n+        if (expr instanceof ConvertibleNodeSetExpr) {\n+            return (ConvertibleNodeSetExpr) expr;\n+        }\n+\n+        return new WrappedNodeSetExpr(expr, optimizeFlags);\n+    }\n+\n+    public WrappedNodeSetExpr(NodeSetExpr expr, int optimizeFlags) {\n+        m_nodeSetExpr = expr;\n+        m_optimizeFlags = optimizeFlags;\n+    }\n+\n+    @Override\n+    public <N> NodeIterator<N> nodeIterator(Model<N> model, N contextNode,\n+                                            NodeDynamicContext<N> dynEnv) {\n+        return m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv);\n+    }\n \n     @Override\n     public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n         return m_nodeSetExpr.traverseNodes(contextNode, dynEnv);\n     }\n \n-\t@Override\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleStringExpr() {\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn Converter.toString(m_nodeSetExpr.nodeIterator(model, node, dynEnv), model);\n-\t\t\t}\n+    @Override\n+    public StringExpr makeStringExpr(StaticContext statEnv) {\n+        return new ConvertibleStringExpr() {\n+            public <N> String stringFunction(Model<N> model, final N node,\n+                                             final NodeDynamicContext<N> dynEnv) {\n+                return Converter.toString(m_nodeSetExpr.nodeIterator(model, node, dynEnv), model);\n+            }\n \n             @Override\n-            public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n+            public String stringFunction(TraversingInformer contextNode,\n+                                         TraverserDynamicContext dynEnv) {\n                 return Converter.toString(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+        };\n+    }\n \n-\t@Override\n-\tpublic BooleanExpr makeBooleanExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleBooleanExpr( ) {\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn Converter.toBoolean(m_nodeSetExpr.nodeIterator(model, node, dynEnv));\n-\t\t\t}\n+    @Override\n+    public BooleanExpr makeBooleanExpr(StaticContext statEnv) {\n+        return new ConvertibleBooleanExpr() {\n+            public <N> boolean booleanFunction(Model<N> model, final N node,\n+                                               final NodeDynamicContext<N> dynEnv) {\n+                return Converter.toBoolean(m_nodeSetExpr.nodeIterator(model, node, dynEnv));\n+            }\n \n             @Override\n-            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n-                return Converter.toBooleanFromTraverser(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n+            public boolean booleanFunction(TraversingInformer contextNode,\n+                                           TraverserDynamicContext dynEnv) {\n+                return Converter\n+                    .toBooleanFromTraverser(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+        };\n+    }\n \n-\t@Override\n-\tpublic VariantExpr makeVariantExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleVariantExpr() {\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn new NodeSetVariant<N>(m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv), model);\n-\t\t\t}\n+    @Override\n+    public VariantExpr makeVariantExpr(StaticContext statEnv) {\n+        return new ConvertibleVariantExpr() {\n+            public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode,\n+                                                        final NodeDynamicContext<N> dynEnv) {\n+                return new NodeSetVariant<N>(m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv),\n+                    model);\n+            }\n \n             @Override\n-            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n+            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode,\n+                                                      TraverserDynamicContext dynEnv) {\n                 return new TraverserVariantImpl(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+        };\n+    }\n \n-\t@Override\n-\tpublic int getOptimizeFlags() {\n-\t\treturn m_optimizeFlags;\n-\t}\n+    @Override\n+    public int getOptimizeFlags() {\n+        return m_optimizeFlags;\n+    }\n \n-\tprivate NodeSetExpr m_nodeSetExpr;\n+    private NodeSetExpr m_nodeSetExpr;\n \n-\tprivate int m_optimizeFlags;\n+    private int m_optimizeFlags;\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/408/WrappedNodeSetExpr.java\nindex 1c4d0ec471f..9ed595115db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/408/WrappedNodeSetExpr.java\n@@ -35,78 +35,76 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n \n public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl {\n \n-\tpublic static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n-\t\tif (expr instanceof ConvertibleNodeSetExpr) {\n-\t\t\treturn (ConvertibleNodeSetExpr) expr;\n-\t\t}\n-\t\t\n-\t\treturn new WrappedNodeSetExpr(expr, optimizeFlags);\n-\t}\n-\t\n-\tpublic WrappedNodeSetExpr(NodeSetExpr expr, int optimizeFlags) {\n+    public static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n+    if (expr instanceof ConvertibleNodeSetExpr) {\n+    return (ConvertibleNodeSetExpr) expr;\n+    }\n+return new WrappedNodeSetExpr(expr, optimizeFlags);\n+    }\n+\n+public WrappedNodeSetExpr(NodeSetExpr expr, int optimizeFlags) {\n \t\tm_nodeSetExpr = expr;\n \t\tm_optimizeFlags = optimizeFlags;\n-\t}\n-\t\n-\t@Override\n-\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, N contextNode,\n-\t\t\tNodeDynamicContext<N> dynEnv) {\n-\t\treturn m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv);\n-\t}\n+    }\n+\n+@Override\n+public <N> NodeIterator<N> nodeIterator(Model<N> model, N contextNode, NodeDynamicContext<N> dynEnv) {\n+    return m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv);\n+    }\n \n-    @Override\n+@Override\n     public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n         return m_nodeSetExpr.traverseNodes(contextNode, dynEnv);\n     }\n \n-\t@Override\n+@Override\n \tpublic StringExpr makeStringExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleStringExpr() {\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn Converter.toString(m_nodeSetExpr.nodeIterator(model, node, dynEnv), model);\n-\t\t\t}\n+return new ConvertibleStringExpr() {\n+    public <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n+    return Converter.toString(m_nodeSetExpr.nodeIterator(model, node, dynEnv), model);\n+    }\n \n-            @Override\n+@Override\n             public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n                 return Converter.toString(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+    };\n+    }\n \n \t@Override\n \tpublic BooleanExpr makeBooleanExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleBooleanExpr( ) {\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn Converter.toBoolean(m_nodeSetExpr.nodeIterator(model, node, dynEnv));\n-\t\t\t}\n+return new ConvertibleBooleanExpr() {\n+    public <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n+    return Converter.toBoolean(m_nodeSetExpr.nodeIterator(model, node, dynEnv));\n+    }\n \n-            @Override\n+@Override\n             public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n                 return Converter.toBooleanFromTraverser(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+    };\n+    }\n \n \t@Override\n \tpublic VariantExpr makeVariantExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleVariantExpr() {\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn new NodeSetVariant<N>(m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv), model);\n-\t\t\t}\n+return new ConvertibleVariantExpr() {\n+    public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\n+return new NodeSetVariant<N>(m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv), model);\n+    }\n \n-            @Override\n+@Override\n             public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n                 return new TraverserVariantImpl(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+    };\n+    }\n \n \t@Override\n \tpublic int getOptimizeFlags() {\n-\t\treturn m_optimizeFlags;\n-\t}\n+    return m_optimizeFlags;\n+    }\n \n \tprivate NodeSetExpr m_nodeSetExpr;\n \n \tprivate int m_optimizeFlags;\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/408/WrappedNodeSetExpr.java\nindex 1c4d0ec471f..69a63e2adf6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/408/WrappedNodeSetExpr.java\n@@ -33,80 +33,95 @@ import org.genxdm.xpath.v10.NodeVariant;\n import org.genxdm.xpath.v10.VariantExpr;\n import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n \n-public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl {\n+public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl\n+{\n+    public static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags)\n+    {\n+        if (expr instanceof ConvertibleNodeSetExpr)\n+        {\n+            return (ConvertibleNodeSetExpr)expr;\n+        }\n+        return new WrappedNodeSetExpr(expr, optimizeFlags);\n+    }\n+\n+    public WrappedNodeSetExpr(NodeSetExpr expr, int optimizeFlags)\n+    {\n+        m_nodeSetExpr = expr;\n+        m_optimizeFlags = optimizeFlags;\n+    }\n \n-\tpublic static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n-\t\tif (expr instanceof ConvertibleNodeSetExpr) {\n-\t\t\treturn (ConvertibleNodeSetExpr) expr;\n-\t\t}\n-\t\t\n-\t\treturn new WrappedNodeSetExpr(expr, optimizeFlags);\n-\t}\n-\t\n-\tpublic WrappedNodeSetExpr(NodeSetExpr expr, int optimizeFlags) {\n-\t\tm_nodeSetExpr = expr;\n-\t\tm_optimizeFlags = optimizeFlags;\n-\t}\n-\t\n-\t@Override\n-\tpublic <N> NodeIterator<N> nodeIterator(Model<N> model, N contextNode,\n-\t\t\tNodeDynamicContext<N> dynEnv) {\n-\t\treturn m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv);\n-\t}\n+    @Override\n+    public <N> NodeIterator<N> nodeIterator(Model<N> model, N contextNode, NodeDynamicContext<N> dynEnv)\n+    {\n+        return m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv);\n+    }\n \n     @Override\n-    public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n+    public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+    {\n         return m_nodeSetExpr.traverseNodes(contextNode, dynEnv);\n     }\n \n-\t@Override\n-\tpublic StringExpr makeStringExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleStringExpr() {\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn Converter.toString(m_nodeSetExpr.nodeIterator(model, node, dynEnv), model);\n-\t\t\t}\n+    @Override\n+    public StringExpr makeStringExpr(StaticContext statEnv)\n+    {\n+        return new ConvertibleStringExpr()\n+        {\n+            public <N> String stringFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return Converter.toString(m_nodeSetExpr.nodeIterator(model, node, dynEnv), model);\n+            }\n \n             @Override\n-            public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n+            public String stringFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n                 return Converter.toString(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+        };\n+    }\n \n-\t@Override\n-\tpublic BooleanExpr makeBooleanExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleBooleanExpr( ) {\n-\t\t\tpublic <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn Converter.toBoolean(m_nodeSetExpr.nodeIterator(model, node, dynEnv));\n-\t\t\t}\n+    @Override\n+    public BooleanExpr makeBooleanExpr(StaticContext statEnv)\n+    {\n+        return new ConvertibleBooleanExpr()\n+        {\n+            public <N> boolean booleanFunction(Model<N> model, final N node, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return Converter.toBoolean(m_nodeSetExpr.nodeIterator(model, node, dynEnv));\n+            }\n \n             @Override\n-            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n+            public boolean booleanFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n                 return Converter.toBooleanFromTraverser(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n+        };\n+    }\n \n-\t@Override\n-\tpublic VariantExpr makeVariantExpr(StaticContext statEnv) {\n-\t\treturn new ConvertibleVariantExpr() {\n-\t\t\tpublic <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\n-\t\t\t\treturn new NodeSetVariant<N>(m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv), model);\n-\t\t\t}\n+    @Override\n+    public VariantExpr makeVariantExpr(StaticContext statEnv)\n+    {\n+        return new ConvertibleVariantExpr()\n+        {\n+            public <N> NodeVariant<N> evaluateAsVariant(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return new NodeSetVariant<N>(m_nodeSetExpr.nodeIterator(model, contextNode, dynEnv), model);\n+            }\n \n             @Override\n-            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\n+            public TraverserVariant evaluateAsVariant(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n                 return new TraverserVariantImpl(m_nodeSetExpr.traverseNodes(contextNode, dynEnv));\n             }\n-\t\t};\n-\t}\n-\n-\t@Override\n-\tpublic int getOptimizeFlags() {\n-\t\treturn m_optimizeFlags;\n-\t}\n+        };\n+    }\n \n-\tprivate NodeSetExpr m_nodeSetExpr;\n+    @Override\n+    public int getOptimizeFlags()\n+    {\n+        return m_optimizeFlags;\n+    }\n \n-\tprivate int m_optimizeFlags;\n-}\n+    private NodeSetExpr m_nodeSetExpr;\n+    private int m_optimizeFlags;\n+}\n\\ No newline at end of file\n",
            "diff_size": 88
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/408/WrappedNodeSetExpr.java\nindex 1c4d0ec471f..191b4e0cbd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/408/WrappedNodeSetExpr.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n \n public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl {\n \n-\tpublic static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n+public static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n \t\tif (expr instanceof ConvertibleNodeSetExpr) {\n \t\t\treturn (ConvertibleNodeSetExpr) expr;\n \t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/408/WrappedNodeSetExpr.java\nindex 1c4d0ec471f..bc98794753a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/408/WrappedNodeSetExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/408/WrappedNodeSetExpr.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleNodeSetExpr;\n \n public class WrappedNodeSetExpr extends ConvertibleNodeSetExprImpl {\n \n-\tpublic static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n+    public static ConvertibleNodeSetExpr wrap(NodeSetExpr expr, int optimizeFlags) {\n \t\tif (expr instanceof ConvertibleNodeSetExpr) {\n \t\t\treturn (ConvertibleNodeSetExpr) expr;\n \t\t}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}