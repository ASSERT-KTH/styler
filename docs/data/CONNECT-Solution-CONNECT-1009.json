{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1009",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.auditrepository.nhinc;\n\nimport gov.hhs.fha.nhinc.common.auditlog.LogEventSecureRequestType;\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1009/AuditFileStoreImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1009/AuditFileStoreImpl.java\nindex 4b5b40976b6..a1a409117ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1009/AuditFileStoreImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1009/AuditFileStoreImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditrepository.nhinc;\n \n import gov.hhs.fha.nhinc.common.auditlog.LogEventSecureRequestType;\n@@ -40,37 +41,36 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author tjafri\n  */\n public class AuditFileStoreImpl implements AuditStore {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AuditFileStoreImpl.class);\n-    private static final JAXBContextHandler JAXB_HANDLER = new JAXBContextHandler();\n+  private static final Logger LOG = LoggerFactory.getLogger(AuditFileStoreImpl.class);\n+  private static final JAXBContextHandler JAXB_HANDLER = new JAXBContextHandler();\n \n-    @Override\n-    public boolean saveAuditRecord(LogEventSecureRequestType request, AssertionType assertion) {\n-        String auditLogEntry = getAuditString(request);\n-        LOG.info(auditLogEntry);\n-        return auditLogEntry != null;\n-    }\n+  @Override\n+  public boolean saveAuditRecord(LogEventSecureRequestType request, AssertionType assertion) {\n+    String auditLogEntry = getAuditString(request);\n+    LOG.info(auditLogEntry);\n+    return auditLogEntry != null;\n+  }\n \n-    private String getAuditString(LogEventSecureRequestType request) {\n-        try {\n-            JAXBContext jc = JAXB_HANDLER.getJAXBContext(LogEventSecureRequestType.class);\n-            Marshaller marshaller = jc.createMarshaller();\n+  private String getAuditString(LogEventSecureRequestType request) {\n+    try {\n+      JAXBContext jc = JAXB_HANDLER.getJAXBContext(LogEventSecureRequestType.class);\n+      Marshaller marshaller = jc.createMarshaller();\n \n-            ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n-            baOutStrm.reset();\n-            JAXBElement<LogEventSecureRequestType> oJaxbElement = new JAXBElement<>(new QName(\"uri\", \"local\"),\n-                LogEventSecureRequestType.class, request);\n-            baOutStrm.close();\n-            marshaller.marshal(oJaxbElement, baOutStrm);\n-            return new String(baOutStrm.toByteArray());\n-        } catch (JAXBException | IOException e) {\n-            LOG.error(\"Exception during Blob conversion :\" + e.getLocalizedMessage(), e);\n-        }\n-        return null;\n+      ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n+      baOutStrm.reset();\n+      JAXBElement<LogEventSecureRequestType> oJaxbElement = new JAXBElement<>(new QName(\"uri\", \"local\"),\n+          LogEventSecureRequestType.class, request);\n+      baOutStrm.close();\n+      marshaller.marshal(oJaxbElement, baOutStrm);\n+      return new String(baOutStrm.toByteArray());\n+    } catch (JAXBException | IOException e) {\n+      LOG.error(\"Exception during Blob conversion :\" + e.getLocalizedMessage(), e);\n     }\n+    return null;\n+  }\n \n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1009/AuditFileStoreImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1009/AuditFileStoreImpl.java\nindex 4b5b40976b6..13de3a346db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1009/AuditFileStoreImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1009/AuditFileStoreImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditrepository.nhinc;\n \n import gov.hhs.fha.nhinc.common.auditlog.LogEventSecureRequestType;\n@@ -52,7 +53,8 @@ public class AuditFileStoreImpl implements AuditStore {\n     public boolean saveAuditRecord(LogEventSecureRequestType request, AssertionType assertion) {\n         String auditLogEntry = getAuditString(request);\n         LOG.info(auditLogEntry);\n-        return auditLogEntry != null;\n+\n+return auditLogEntry != null;\n     }\n \n     private String getAuditString(LogEventSecureRequestType request) {\n@@ -62,15 +64,16 @@ public class AuditFileStoreImpl implements AuditStore {\n \n             ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n             baOutStrm.reset();\n-            JAXBElement<LogEventSecureRequestType> oJaxbElement = new JAXBElement<>(new QName(\"uri\", \"local\"),\n-                LogEventSecureRequestType.class, request);\n-            baOutStrm.close();\n+            JAXBElement<LogEventSecureRequestType> oJaxbElement = new JAXBElement<>(new QName(\"uri\", \"local\"), LogEventSecureRequestType.class, request);\n+baOutStrm.close();\n             marshaller.marshal(oJaxbElement, baOutStrm);\n-            return new String(baOutStrm.toByteArray());\n+\n+return new String(baOutStrm.toByteArray());\n         } catch (JAXBException | IOException e) {\n             LOG.error(\"Exception during Blob conversion :\" + e.getLocalizedMessage(), e);\n-        }\n+\n+    }\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "'|' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1009/AuditFileStoreImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1009/AuditFileStoreImpl.java\nindex 4b5b40976b6..4908a9dc9c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1009/AuditFileStoreImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1009/AuditFileStoreImpl.java\n@@ -43,11 +43,14 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author tjafri\n  */\n+\n+\n public class AuditFileStoreImpl implements AuditStore {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AuditFileStoreImpl.class);\n     private static final JAXBContextHandler JAXB_HANDLER = new JAXBContextHandler();\n \n+\n     @Override\n     public boolean saveAuditRecord(LogEventSecureRequestType request, AssertionType assertion) {\n         String auditLogEntry = getAuditString(request);\n@@ -59,18 +62,16 @@ public class AuditFileStoreImpl implements AuditStore {\n         try {\n             JAXBContext jc = JAXB_HANDLER.getJAXBContext(LogEventSecureRequestType.class);\n             Marshaller marshaller = jc.createMarshaller();\n-\n             ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n             baOutStrm.reset();\n-            JAXBElement<LogEventSecureRequestType> oJaxbElement = new JAXBElement<>(new QName(\"uri\", \"local\"),\n-                LogEventSecureRequestType.class, request);\n+            JAXBElement<LogEventSecureRequestType> oJaxbElement = new JAXBElement<>(new QName(\"uri\", \"local\"), LogEventSecureRequestType.class, request);\n             baOutStrm.close();\n             marshaller.marshal(oJaxbElement, baOutStrm);\n             return new String(baOutStrm.toByteArray());\n-        } catch (JAXBException | IOException e) {\n+        } catch (JAXBException|\n+                 IOException e) {\n             LOG.error(\"Exception during Blob conversion :\" + e.getLocalizedMessage(), e);\n         }\n         return null;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}