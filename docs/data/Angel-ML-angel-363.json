{
    "project_name": "Angel-ML-angel",
    "error_id": "363",
    "information": {
        "errors": [
            {
                "line": "62",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 107).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\n  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n    MatrixContext mc = new MatrixContext();\n    mc.setName(name);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/363/ModelContextUtils.java\nindex 0c166db0705..3702cd270ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/363/ModelContextUtils.java\n@@ -60,7 +60,7 @@ public class ModelContextUtils {\n \n \n   public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n+  RowType rowType, Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n     mc.setRowNum(1);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/363/ModelContextUtils.java\nindex 0c166db0705..b3b43223a1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/363/ModelContextUtils.java\n@@ -16,17 +16,17 @@ public class ModelContextUtils {\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      int rowNum) {\n+                                                  int rowNum) {\n     return createMatrixContext(context, rowType, null, rowNum);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass) {\n+                                                  Class<? extends IElement> elemClass) {\n     return createMatrixContext(context, rowType, elemClass, 1);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass, int rowNum) {\n+                                                  Class<? extends IElement> elemClass, int rowNum) {\n     if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n@@ -59,8 +59,10 @@ public class ModelContextUtils {\n   }\n \n \n-  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n+  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context,\n+                                                                         String name,\n+                                                                         RowType rowType,\n+                                                                         Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n     mc.setRowNum(1);\n@@ -89,22 +91,24 @@ public class ModelContextUtils {\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType) {\n+                                                  RowType rowType) {\n     return createMatrixContext(context, name, rowType, null);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, int rowNum) {\n+                                                  RowType rowType, int rowNum) {\n     return createMatrixContext(context, name, rowType, null, rowNum);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass) {\n+                                                  RowType rowType,\n+                                                  Class<? extends IElement> elemClass) {\n     return createMatrixContext(context, name, rowType, elemClass, 1);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n+                                                  RowType rowType,\n+                                                  Class<? extends IElement> elemClass, int rowNum) {\n     if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/363/ModelContextUtils.java\nindex 0c166db0705..bbe3c004051 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/363/ModelContextUtils.java\n@@ -15,19 +15,18 @@ public class ModelContextUtils {\n     return createMatrixContext(context, rowType, null);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      int rowNum) {\n-    return createMatrixContext(context, rowType, null, rowNum);\n+  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType, int rowNum) {\n+  return createMatrixContext(context, rowType, null, rowNum);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n       Class<? extends IElement> elemClass) {\n-    return createMatrixContext(context, rowType, elemClass, 1);\n+  return createMatrixContext(context, rowType, elemClass, 1);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n       Class<? extends IElement> elemClass, int rowNum) {\n-    if (rowType.isComplexValue() && elemClass == null) {\n+  if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n \n@@ -90,22 +89,22 @@ public class ModelContextUtils {\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType) {\n-    return createMatrixContext(context, name, rowType, null);\n+  return createMatrixContext(context, name, rowType, null);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType, int rowNum) {\n-    return createMatrixContext(context, name, rowType, null, rowNum);\n+  return createMatrixContext(context, name, rowType, null, rowNum);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType, Class<? extends IElement> elemClass) {\n-    return createMatrixContext(context, name, rowType, elemClass, 1);\n+  return createMatrixContext(context, name, rowType, elemClass, 1);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n-    if (rowType.isComplexValue() && elemClass == null) {\n+  if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n \n@@ -135,4 +134,4 @@ public class ModelContextUtils {\n \n     return mc;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/363/ModelContextUtils.java\nindex 0c166db0705..3c15afd32e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/363/ModelContextUtils.java\n@@ -15,18 +15,18 @@ public class ModelContextUtils {\n     return createMatrixContext(context, rowType, null);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, RowType rowType, int rowNum) {\n     return createMatrixContext(context, rowType, null, rowNum);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, RowType rowType, Class<? extends IElement> elemClass) {\n     return createMatrixContext(context, rowType, elemClass, 1);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass, int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n     if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n@@ -37,7 +37,6 @@ public class ModelContextUtils {\n     mc.setRowType(rowType);\n     mc.setPartitionNum(context.getPartitionNum());\n     mc.setValidIndexNum(context.getNodeNum());\n-\n     if (elemClass != null) {\n       mc.setValueType(elemClass);\n     }\n@@ -50,24 +49,20 @@ public class ModelContextUtils {\n       mc.setPartitionerClass(ColumnRangePartitioner.class);\n       if (context.getPartitionNum() > 0) {\n         mc.setMaxRowNumInBlock(rowNum);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n+        mc.setMaxColNumInBlock((context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n       }\n     }\n-\n     return mc;\n   }\n \n-\n-  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n+  public static MatrixContext createMatrixContextWithUserDefinePartition(\n+    ModelContext context, String name, RowType rowType, Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n     mc.setRowNum(1);\n     mc.setRowType(rowType);\n     mc.setPartitionNum(context.getPartitionNum());\n     mc.setValidIndexNum(context.getNodeNum());\n-\n     if (partClass != null) {\n       mc.setPartitionClass(partClass);\n     }\n@@ -80,31 +75,29 @@ public class ModelContextUtils {\n       mc.setPartitionerClass(ColumnRangePartitioner.class);\n       if (context.getPartitionNum() > 0) {\n         mc.setMaxRowNumInBlock(1);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n+        mc.setMaxColNumInBlock((context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n       }\n     }\n-\n     return mc;\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType) {\n     return createMatrixContext(context, name, rowType, null);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType, int rowNum) {\n     return createMatrixContext(context, name, rowType, null, rowNum);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType, Class<? extends IElement> elemClass) {\n     return createMatrixContext(context, name, rowType, elemClass, 1);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n     if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n@@ -115,7 +108,6 @@ public class ModelContextUtils {\n     mc.setRowType(rowType);\n     mc.setPartitionNum(context.getPartitionNum());\n     mc.setValidIndexNum(context.getNodeNum());\n-\n     if (elemClass != null) {\n       mc.setValueType(elemClass);\n     }\n@@ -128,11 +120,9 @@ public class ModelContextUtils {\n       mc.setPartitionerClass(ColumnRangePartitioner.class);\n       if (context.getPartitionNum() > 0) {\n         mc.setMaxRowNumInBlock(1);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n+        mc.setMaxColNumInBlock((context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n       }\n     }\n-\n     return mc;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_random/363/ModelContextUtils.java\nindex 0c166db0705..3702cd270ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/363/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_random/363/ModelContextUtils.java\n@@ -60,7 +60,7 @@ public class ModelContextUtils {\n \n \n   public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n+  RowType rowType, Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n     mc.setRowNum(1);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}