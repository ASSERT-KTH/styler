{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3590",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3590/LuceneAllDocumentsReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3590/LuceneAllDocumentsReader.java\nindex 5208b8c2fd2..7b0c26b329a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3590/LuceneAllDocumentsReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3590/LuceneAllDocumentsReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index;\n \n import org.apache.lucene.document.Document;\n@@ -33,33 +34,33 @@ import static java.util.stream.Collectors.toList;\n \n public class LuceneAllDocumentsReader implements BoundedIterable<Document>\n {\n-    private final List<LucenePartitionAllDocumentsReader> partitionReaders;\n+  private final List<LucenePartitionAllDocumentsReader> partitionReaders;\n \n-    public LuceneAllDocumentsReader( List<LucenePartitionAllDocumentsReader> partitionReaders )\n-    {\n-        this.partitionReaders = partitionReaders;\n-    }\n+  public LuceneAllDocumentsReader(List<LucenePartitionAllDocumentsReader> partitionReaders)\n+  {\n+    this.partitionReaders = partitionReaders;\n+  }\n \n-    @Override\n-    public long maxCount()\n-    {\n-        return partitionReaders.stream().mapToLong( LucenePartitionAllDocumentsReader::maxCount ).sum();\n-    }\n+  @Override\n+  public long maxCount()\n+  {\n+    return partitionReaders.stream().mapToLong(LucenePartitionAllDocumentsReader::maxCount).sum();\n+  }\n \n-    @Override\n-    public Iterator<Document> iterator()\n-    {\n-        Iterator<Iterator<Document>> iterators = partitionReaders.stream()\n-                .map( LucenePartitionAllDocumentsReader::iterator )\n-                .collect( toList() )\n-                .iterator();\n+  @Override\n+  public Iterator<Document> iterator()\n+  {\n+    Iterator<Iterator<Document>> iterators = partitionReaders.stream()\n+        .map(LucenePartitionAllDocumentsReader::iterator)\n+        .collect(toList())\n+        .iterator();\n \n-        return Iterators.concat( iterators );\n-    }\n+    return Iterators.concat(iterators);\n+  }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        IOUtils.closeAll( partitionReaders );\n-    }\n+  @Override\n+  public void close() throws IOException\n+  {\n+    IOUtils.closeAll(partitionReaders);\n+  }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3590/LuceneAllDocumentsReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3590/LuceneAllDocumentsReader.java\nindex 5208b8c2fd2..bf9cc552e5c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3590/LuceneAllDocumentsReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3590/LuceneAllDocumentsReader.java\n@@ -49,12 +49,8 @@ public class LuceneAllDocumentsReader implements BoundedIterable<Document>\n     @Override\n     public Iterator<Document> iterator()\n     {\n-        Iterator<Iterator<Document>> iterators = partitionReaders.stream()\n-                .map( LucenePartitionAllDocumentsReader::iterator )\n-                .collect( toList() )\n-                .iterator();\n-\n-        return Iterators.concat( iterators );\n+        Iterator<Iterator<Document>> iterators = partitionReaders.stream().map( LucenePartitionAllDocumentsReader::iterator ).collect( toList() ).iterator();\n+return Iterators.concat( iterators );\n     }\n \n     @Override\n@@ -62,4 +58,4 @@ public class LuceneAllDocumentsReader implements BoundedIterable<Document>\n     {\n         IOUtils.closeAll( partitionReaders );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}