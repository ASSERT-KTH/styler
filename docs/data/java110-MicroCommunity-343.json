{
    "project_name": "java110-MicroCommunity",
    "error_id": "343",
    "information": {
        "errors": [
            {
                "line": "46",
                "column": "103",
                "severity": "error",
                "message": "',' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        //\u83b7\u53d6\u67e5\u8be2\u53c2\u6570\n        JSONObject reqJson = event.getDataFlowContext().getReqJson();\n        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson,DictQueryDto.class));\n        ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(dictDtos), HttpStatus.OK);\n        dataFlowContext.setResponseEntity(responseEntity);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler/343/QueryDictListener.java\nindex e529cf9d8e5..f0fc1ebcc83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler/343/QueryDictListener.java\n@@ -43,7 +43,7 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u67e5\u8be2\u53c2\u6570\n         JSONObject reqJson = event.getDataFlowContext().getReqJson();\n-        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson,DictQueryDto.class));\n+        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson, DictQueryDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(dictDtos), HttpStatus.OK);\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/intellij/343/QueryDictListener.java\nindex e529cf9d8e5..f0fc1ebcc83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/intellij/343/QueryDictListener.java\n@@ -43,7 +43,7 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u67e5\u8be2\u53c2\u6570\n         JSONObject reqJson = event.getDataFlowContext().getReqJson();\n-        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson,DictQueryDto.class));\n+        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson, DictQueryDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(dictDtos), HttpStatus.OK);\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/naturalize/343/QueryDictListener.java\nindex e529cf9d8e5..3c1b4f2cd06 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/naturalize/343/QueryDictListener.java\n@@ -43,7 +43,7 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u67e5\u8be2\u53c2\u6570\n         JSONObject reqJson = event.getDataFlowContext().getReqJson();\n-        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson,DictQueryDto.class));\n+        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson, DictQueryDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(dictDtos), HttpStatus.OK);\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n@@ -52,4 +52,4 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n     public int getOrder() {\n         return 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/codebuff/343/QueryDictListener.java\nindex e529cf9d8e5..5b1d610e25b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/codebuff/343/QueryDictListener.java\n@@ -14,7 +14,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-\n import java.util.List;\n \n /**\n@@ -22,6 +21,8 @@ import java.util.List;\n  * Created by \u79bb\u6b4c\u7b11 on 10/22/2019\n  * <p>\n  */\n+\n+\n @Java110Listener(\"queryDictListener\")\n public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n \n@@ -43,7 +44,7 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u67e5\u8be2\u53c2\u6570\n         JSONObject reqJson = event.getDataFlowContext().getReqJson();\n-        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson,DictQueryDto.class));\n+        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson, DictQueryDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(dictDtos), HttpStatus.OK);\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n@@ -52,4 +53,4 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n     public int getOrder() {\n         return 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_random/343/QueryDictListener.java\nindex e529cf9d8e5..f0fc1ebcc83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_random/343/QueryDictListener.java\n@@ -43,7 +43,7 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u67e5\u8be2\u53c2\u6570\n         JSONObject reqJson = event.getDataFlowContext().getReqJson();\n-        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson,DictQueryDto.class));\n+        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson, DictQueryDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(dictDtos), HttpStatus.OK);\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_three_grams/343/QueryDictListener.java\nindex e529cf9d8e5..f0fc1ebcc83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/343/QueryDictListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_three_grams/343/QueryDictListener.java\n@@ -43,7 +43,7 @@ public class QueryDictListener extends AbstractServiceApiDataFlowListener {\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u67e5\u8be2\u53c2\u6570\n         JSONObject reqJson = event.getDataFlowContext().getReqJson();\n-        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson,DictQueryDto.class));\n+        List<DictDto> dictDtos = this.dictInnerServiceSMO.queryDict(BeanConvertUtil.covertBean(reqJson, DictQueryDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(dictDtos), HttpStatus.OK);\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}