{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "53",
    "information": {
        "errors": [
            {
                "line": "125",
                "column": "39",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    public AvailableFontsResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n        return (AvailableFontsResponse)apiClient.deserialize(response, AvailableFontsResponse.class);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/53/GetAvailableFontsRequest.java\nindex 0dd4ff1c3c4..15b98e39c3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/53/GetAvailableFontsRequest.java\n@@ -122,6 +122,6 @@ public class GetAvailableFontsRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public AvailableFontsResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (AvailableFontsResponse)apiClient.deserialize(response, AvailableFontsResponse.class);\n+        return (AvailableFontsResponse) apiClient.deserialize(response, AvailableFontsResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/53/GetAvailableFontsRequest.java\nindex 0dd4ff1c3c4..a120bb6728e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/53/GetAvailableFontsRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -99,8 +101,8 @@ public class GetAvailableFontsRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -122,6 +124,6 @@ public class GetAvailableFontsRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public AvailableFontsResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (AvailableFontsResponse)apiClient.deserialize(response, AvailableFontsResponse.class);\n+        return (AvailableFontsResponse) apiClient.deserialize(response, AvailableFontsResponse.class);\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/53/GetAvailableFontsRequest.java\nindex 0dd4ff1c3c4..14ff968894a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/53/GetAvailableFontsRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,34 +39,42 @@ import java.util.*;\n /*\n  * Request model for getAvailableFonts operation.\n  */\n+\n+\n public class GetAvailableFontsRequest implements RequestIfc {\n     /*\n      * The folder in cloud storage with custom fonts.\n      */\n-    private String fontsLocation;\n+\n+  private String fontsLocation;\n \n     /*\n      * Initializes a new instance of the GetAvailableFontsRequest class.\n      *\n      * @param String fontsLocation The folder in cloud storage with custom fonts.\n      */\n-    public GetAvailableFontsRequest(String fontsLocation) {\n-        this.fontsLocation = fontsLocation;\n-    }\n+\n+\n+  public GetAvailableFontsRequest(String fontsLocation) {\n+    this.fontsLocation = fontsLocation;\n+  }\n \n     /*\n      * Gets The folder in cloud storage with custom fonts.\n      */\n-    public String getFontsLocation() {\n-        return this.fontsLocation;\n-    }\n+\n+\n+  public String getFontsLocation() {\n+    return this.fontsLocation;\n+  }\n \n     /*\n      * Sets The folder in cloud storage with custom fonts.\n      */\n-    public void setFontsLocation(String value) {\n-        this.fontsLocation = value;\n-    }\n+\n+  public void setFontsLocation(String value) {\n+    this.fontsLocation = value;\n+  }\n \n \n     /*\n@@ -77,43 +84,40 @@ public class GetAvailableFontsRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n \n-        Object localVarPostBody = null;\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n+    Object localVarPostBody = null;\n \n         // create path and map variables\n-        String localVarPath = \"/words/fonts/available\";\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"fontsLocation\", getFontsLocation());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"GET\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/fonts/available\";\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"fontsLocation\", getFontsLocation());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"GET\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return AvailableFontsResponse.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return AvailableFontsResponse.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -121,7 +125,8 @@ public class GetAvailableFontsRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public AvailableFontsResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (AvailableFontsResponse)apiClient.deserialize(response, AvailableFontsResponse.class);\n-    }\n-}\n+\n+  public AvailableFontsResponse deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    return (AvailableFontsResponse) apiClient.deserialize(response, AvailableFontsResponse.class);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/53/GetAvailableFontsRequest.java\nindex 0dd4ff1c3c4..15b98e39c3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/53/GetAvailableFontsRequest.java\n@@ -122,6 +122,6 @@ public class GetAvailableFontsRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public AvailableFontsResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (AvailableFontsResponse)apiClient.deserialize(response, AvailableFontsResponse.class);\n+        return (AvailableFontsResponse) apiClient.deserialize(response, AvailableFontsResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/53/GetAvailableFontsRequest.java\nindex 0dd4ff1c3c4..d57e96c3906 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/53/GetAvailableFontsRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/53/GetAvailableFontsRequest.java\n@@ -122,6 +122,6 @@ public class GetAvailableFontsRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public AvailableFontsResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (AvailableFontsResponse)apiClient.deserialize(response, AvailableFontsResponse.class);\n+        return (AvailableFontsResponse)  apiClient.deserialize(response, AvailableFontsResponse.class);\n     }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}