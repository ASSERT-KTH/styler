{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "70",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 113).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * Returns a set of known languages.\n   *\n   * @param locale Locale to use for language names. Falls back to default JVM locale if given locale is unknown.\n   * @return Set of languages\n   */\n  public Set<Language> getLanguages(String locale) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/70/LanguagesProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/70/LanguagesProvider.java\nindex f3ed75313b5..c9938da1fcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/70/LanguagesProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/70/LanguagesProvider.java\n@@ -37,4 +37,4 @@ public class LanguagesProvider {\n       return new Language(l, languageLocale.getDisplayLanguage(clientLanguage));\n     }).collect(Collectors.toCollection(TreeSet::new));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 33, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 33, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 31, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/70/LanguagesProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/70/LanguagesProvider.java\nindex f3ed75313b5..1e288fc7e5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/70/LanguagesProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/70/LanguagesProvider.java\n@@ -2,7 +2,6 @@ package eu.dzhw.fdz.metadatamanagement.common.service;\n \n import eu.dzhw.fdz.metadatamanagement.common.domain.Language;\n import org.springframework.stereotype.Service;\n-\n import java.util.Locale;\n import java.util.Set;\n import java.util.TreeSet;\n@@ -12,14 +11,16 @@ import java.util.stream.Stream;\n /**\n  * Provides a set of known languages.\n  */\n+\n+\n @Service\n public class LanguagesProvider {\n-\n   private String[] languages;\n \n   /**\n    * Creates a new instance.\n    */\n+\n   public LanguagesProvider() {\n     languages = Locale.getISOLanguages();\n   }\n@@ -30,11 +31,13 @@ public class LanguagesProvider {\n    * @param locale Locale to use for language names. Falls back to default JVM locale if given locale is unknown.\n    * @return Set of languages\n    */\n+\n   public Set<Language> getLanguages(String locale) {\n     Locale clientLanguage = new Locale(locale);\n     return Stream.of(languages).map(l -> {\n-      Locale languageLocale = new Locale(l);\n-      return new Language(l, languageLocale.getDisplayLanguage(clientLanguage));\n-    }).collect(Collectors.toCollection(TreeSet::new));\n+                                 Locale languageLocale = new Locale(l);\n+                                 return new Language(l, languageLocale.getDisplayLanguage(clientLanguage));\n+                               })\n+                               .collect(Collectors.toCollection(TreeSet::new));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}