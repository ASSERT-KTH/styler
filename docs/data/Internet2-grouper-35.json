{
    "project_name": "Internet2-grouper",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 07. March 2004 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/35/BitSetConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/35/BitSetConverter.java\nindex da13e673947..9f9042d0ef5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/35/BitSetConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/35/BitSetConverter.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 07. March 2004 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;\r\n \r\n import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n@@ -43,34 +44,34 @@ import java.util.StringTokenizer;\n  */\r\n public class BitSetConverter implements Converter {\r\n \r\n-    public boolean canConvert(Class type) {\r\n-        return type.equals(BitSet.class);\r\n-    }\r\n+  public boolean canConvert(Class type) {\r\n+    return type.equals(BitSet.class);\r\n+  }\r\n \r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        BitSet bitSet = (BitSet) source;\r\n-        StringBuffer buffer = new StringBuffer();\r\n-        boolean seenFirst = false;\r\n-        for (int i = 0; i < bitSet.length(); i++) {\r\n-            if (bitSet.get(i)) {\r\n-                if (seenFirst) {\r\n-                    buffer.append(',');\r\n-                } else {\r\n-                    seenFirst = true;\r\n-                }\r\n-                buffer.append(i);\r\n-            }\r\n+  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n+    BitSet bitSet = (BitSet) source;\r\n+    StringBuffer buffer = new StringBuffer();\r\n+    boolean seenFirst = false;\r\n+    for (int i = 0; i < bitSet.length(); i++) {\r\n+      if (bitSet.get(i)) {\r\n+        if (seenFirst) {\r\n+          buffer.append(',');\r\n+        } else {\r\n+          seenFirst = true;\r\n         }\r\n-        writer.setValue(buffer.toString());\r\n+        buffer.append(i);\r\n+      }\r\n     }\r\n+    writer.setValue(buffer.toString());\r\n+  }\r\n \r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        BitSet result = new BitSet();\r\n-        StringTokenizer tokenizer = new StringTokenizer(reader.getValue(), \",\", false);\r\n-        while (tokenizer.hasMoreTokens()) {\r\n-            int index = Integer.parseInt(tokenizer.nextToken());\r\n-            result.set(index);\r\n-        }\r\n-        return result;\r\n+  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n+    BitSet result = new BitSet();\r\n+    StringTokenizer tokenizer = new StringTokenizer(reader.getValue(), \",\", false);\r\n+    while (tokenizer.hasMoreTokens()) {\r\n+      int index = Integer.parseInt(tokenizer.nextToken());\r\n+      result.set(index);\r\n     }\r\n+    return result;\r\n+  }\r\n }\r\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/35/BitSetConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/35/BitSetConverter.java\nindex da13e673947..849480a982c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/35/BitSetConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/35/BitSetConverter.java\n@@ -41,9 +41,8 @@ import java.util.StringTokenizer;\n  *\r\n  * @author Joe Walnes\r\n  */\r\n-public class BitSetConverter implements Converter {\r\n-\r\n-    public boolean canConvert(Class type) {\r\n+public class BitSetConverter implements Converter {\n+  public boolean canConvert(Class type) {\r\n         return type.equals(BitSet.class);\r\n     }\r\n \r\n@@ -73,4 +72,4 @@ public class BitSetConverter implements Converter {\n         }\r\n         return result;\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/35/BitSetConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/35/BitSetConverter.java\nindex da13e673947..f1c00e4f375 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/35/BitSetConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/35/BitSetConverter.java\n@@ -24,15 +24,14 @@\n  * \r\n  * Created on 07. March 2004 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\r\n-\r\n-import java.util.BitSet;\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.collections;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+import java.util.BitSet;\n import java.util.StringTokenizer;\r\n \r\n /**\r\n@@ -40,37 +39,43 @@ import java.util.StringTokenizer;\n  * comma delimited list of ones and zeros.\r\n  *\r\n  * @author Joe Walnes\r\n- */\r\n-public class BitSetConverter implements Converter {\r\n-\r\n-    public boolean canConvert(Class type) {\r\n-        return type.equals(BitSet.class);\r\n-    }\r\n-\r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        BitSet bitSet = (BitSet) source;\r\n-        StringBuffer buffer = new StringBuffer();\r\n-        boolean seenFirst = false;\r\n-        for (int i = 0; i < bitSet.length(); i++) {\r\n-            if (bitSet.get(i)) {\r\n-                if (seenFirst) {\r\n-                    buffer.append(',');\r\n-                } else {\r\n-                    seenFirst = true;\r\n-                }\r\n-                buffer.append(i);\r\n-            }\r\n-        }\r\n-        writer.setValue(buffer.toString());\r\n-    }\r\n-\r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        BitSet result = new BitSet();\r\n-        StringTokenizer tokenizer = new StringTokenizer(reader.getValue(), \",\", false);\r\n-        while (tokenizer.hasMoreTokens()) {\r\n-            int index = Integer.parseInt(tokenizer.nextToken());\r\n-            result.set(index);\r\n-        }\r\n-        return result;\r\n-    }\r\n-}\r\n+ */\n+\n+\n+public class BitSetConverter implements Converter {\n+    public boolean canConvert(Class type) {\n+        return type.equals(BitSet.class);\n+    }\n+\n+\n+    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n+        BitSet bitSet = (BitSet) source;\n+        StringBuffer buffer = new StringBuffer();\n+        boolean seenFirst = false;\n+\n+        for (int i = 0; i < bitSet.length(); i++) {\n+            if (bitSet.get(i)) {\n+                if (seenFirst) {\n+                    buffer.append(',');\n+                } else {\n+                    seenFirst = true;\n+                }\n+\n+                buffer.append(i);\n+            }\n+        }\n+\n+        writer.setValue(buffer.toString());\n+    }\n+\n+\n+    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n+        BitSet result = new BitSet();\n+        StringTokenizer tokenizer = new StringTokenizer(reader.getValue(), \",\", false);\n+        while (tokenizer.hasMoreTokens()) {\n+            int index = Integer.parseInt(tokenizer.nextToken());\n+            result.set(index);\n+        }\n+        return result;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}