{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2188",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2188/AbstractStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2188/AbstractStep.java\nindex 6f1a7c194b4..533863ab4da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2188/AbstractStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2188/AbstractStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.util.ArrayList;\n@@ -45,207 +46,207 @@ import static org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS;\n  */\n public abstract class AbstractStep<T> implements Step<T>\n {\n-    public static final ParkStrategy PARK = new ParkStrategy.Park( IS_OS_WINDOWS ? 10_000 : 500, MICROSECONDS );\n-\n-    protected final StageControl control;\n-    private volatile String name;\n-    @SuppressWarnings( \"rawtypes\" )\n-    protected volatile Step downstream;\n-    protected volatile WorkSync<Downstream,SendDownstream> downstreamWorkSync;\n-    private volatile boolean endOfUpstream;\n-    protected volatile Throwable panic;\n-    private volatile boolean completed;\n-    protected int orderingGuarantees;\n-\n-    // Milliseconds awaiting downstream to process batches so that its queue size goes beyond the configured threshold\n-    // If this is big then it means that this step is faster than downstream.\n-    protected final LongAdder downstreamIdleTime = new LongAdder();\n-    // Milliseconds awaiting upstream to hand over batches to this step.\n-    // If this is big then it means that this step is faster than upstream.\n-    protected final LongAdder upstreamIdleTime = new LongAdder();\n-    // Number of batches received, but not yet processed.\n-    protected final AtomicInteger queuedBatches = new AtomicInteger();\n-    // Number of batches fully processed\n-    protected final AtomicLong doneBatches = new AtomicLong();\n-    // Milliseconds spent processing all received batches.\n-    protected final MovingAverage totalProcessingTime;\n-    protected long startTime;\n-    protected long endTime;\n-    protected final List<StatsProvider> additionalStatsProvider;\n-    protected final Runnable healthChecker = this::assertHealthy;\n-    protected final Configuration config;\n-\n-    public AbstractStep( StageControl control, String name, Configuration config,\n-            StatsProvider... additionalStatsProvider )\n-    {\n-        this.control = control;\n-        this.name = name;\n-        this.config = config;\n-        this.totalProcessingTime = new MovingAverage( config.movingAverageSize() );\n-        this.additionalStatsProvider = asList( additionalStatsProvider );\n-    }\n-\n-    @Override\n-    public void start( int orderingGuarantees )\n-    {\n-        this.orderingGuarantees = orderingGuarantees;\n-        resetStats();\n-    }\n-\n-    protected boolean guarantees( int orderingGuaranteeFlag )\n-    {\n-        return (orderingGuarantees & orderingGuaranteeFlag) != 0;\n-    }\n-\n-    @Override\n-    public String name()\n-    {\n-        return name;\n-    }\n-\n-    @Override\n-    public void receivePanic( Throwable cause )\n-    {\n-        this.panic = cause;\n-        this.completed = true;\n-    }\n-\n-    protected boolean stillWorking()\n-    {\n-        if ( isPanic() )\n-        {   // There has been a panic, so we'll just stop working\n-            return false;\n-        }\n-\n-        if ( endOfUpstream && queuedBatches.get() == 0 )\n-        {   // Upstream has run out and we've processed everything upstream sent us\n-            return false;\n-        }\n-\n-        // We're still working\n-        return true;\n-    }\n-\n-    protected boolean isPanic()\n-    {\n-        return panic != null;\n-    }\n-\n-    @Override\n-    public boolean isCompleted()\n-    {\n-        return completed;\n-    }\n-\n-    protected void issuePanic( Throwable cause )\n-    {\n-        issuePanic( cause, true );\n-    }\n-\n-    protected void issuePanic( Throwable cause, boolean rethrow )\n-    {\n-        control.panic( cause );\n-        if ( rethrow )\n-        {\n-            throw new RuntimeException( cause );\n-        }\n-    }\n-\n-    protected void assertHealthy()\n-    {\n-        if ( isPanic() )\n+  public static final ParkStrategy PARK = new ParkStrategy.Park(IS_OS_WINDOWS ? 10_000 : 500, MICROSECONDS);\n+\n+  protected final StageControl control;\n+  private volatile String name;\n+  @SuppressWarnings(\"rawtypes\")\n+  protected volatile Step downstream;\n+  protected volatile WorkSync<Downstream, SendDownstream> downstreamWorkSync;\n+  private volatile boolean endOfUpstream;\n+  protected volatile Throwable panic;\n+  private volatile boolean completed;\n+  protected int orderingGuarantees;\n+\n+  // Milliseconds awaiting downstream to process batches so that its queue size goes beyond the configured threshold\n+  // If this is big then it means that this step is faster than downstream.\n+  protected final LongAdder downstreamIdleTime = new LongAdder();\n+  // Milliseconds awaiting upstream to hand over batches to this step.\n+  // If this is big then it means that this step is faster than upstream.\n+  protected final LongAdder upstreamIdleTime = new LongAdder();\n+  // Number of batches received, but not yet processed.\n+  protected final AtomicInteger queuedBatches = new AtomicInteger();\n+  // Number of batches fully processed\n+  protected final AtomicLong doneBatches = new AtomicLong();\n+  // Milliseconds spent processing all received batches.\n+  protected final MovingAverage totalProcessingTime;\n+  protected long startTime;\n+  protected long endTime;\n+  protected final List<StatsProvider> additionalStatsProvider;\n+  protected final Runnable healthChecker = this::assertHealthy;\n+  protected final Configuration config;\n+\n+  public AbstractStep(StageControl control, String name, Configuration config,\n+                      StatsProvider... additionalStatsProvider)\n+  {\n+    this.control = control;\n+    this.name = name;\n+    this.config = config;\n+    this.totalProcessingTime = new MovingAverage(config.movingAverageSize());\n+    this.additionalStatsProvider = asList(additionalStatsProvider);\n+  }\n+\n+  @Override\n+  public void start(int orderingGuarantees)\n+  {\n+    this.orderingGuarantees = orderingGuarantees;\n+    resetStats();\n+  }\n+\n+  protected boolean guarantees(int orderingGuaranteeFlag)\n+  {\n+    return (orderingGuarantees & orderingGuaranteeFlag) != 0;\n+  }\n+\n+  @Override\n+  public String name()\n+  {\n+    return name;\n+  }\n+\n+  @Override\n+  public void receivePanic(Throwable cause)\n+  {\n+    this.panic = cause;\n+    this.completed = true;\n+  }\n+\n+  protected boolean stillWorking()\n+  {\n+    if (isPanic())\n+    {   // There has been a panic, so we'll just stop working\n+      return false;\n+    }\n+\n+    if (endOfUpstream && queuedBatches.get() == 0)\n+    {   // Upstream has run out and we've processed everything upstream sent us\n+      return false;\n+    }\n+\n+    // We're still working\n+    return true;\n+  }\n+\n+  protected boolean isPanic()\n+  {\n+    return panic != null;\n+  }\n+\n+  @Override\n+  public boolean isCompleted()\n+  {\n+    return completed;\n+  }\n+\n+  protected void issuePanic(Throwable cause)\n+  {\n+    issuePanic(cause, true);\n+  }\n+\n+  protected void issuePanic(Throwable cause, boolean rethrow)\n+  {\n+    control.panic(cause);\n+    if (rethrow)\n+    {\n+      throw new RuntimeException(cause);\n+    }\n+  }\n+\n+  protected void assertHealthy()\n+  {\n+    if (isPanic())\n+    {\n+      throw new RuntimeException(panic);\n+    }\n+  }\n+\n+  @Override\n+  public void setDownstream(Step<?> downstream)\n+  {\n+    assert downstream != this;\n+    this.downstream = downstream;\n+    //noinspection unchecked\n+    this.downstreamWorkSync = new WorkSync<>(new Downstream((Step<Object>) downstream, doneBatches));\n+  }\n+\n+  @Override\n+  public StepStats stats()\n+  {\n+    Collection<StatsProvider> providers = new ArrayList<>();\n+    collectStatsProviders(providers);\n+    return new StepStats(name, stillWorking(), providers);\n+  }\n+\n+  protected void collectStatsProviders(Collection<StatsProvider> into)\n+  {\n+    into.add(new ProcessingStats(doneBatches.get() + queuedBatches.get(), doneBatches.get(),\n+        totalProcessingTime.total(), totalProcessingTime.average() / processors(0),\n+        upstreamIdleTime.sum(), downstreamIdleTime.sum()));\n+    into.addAll(additionalStatsProvider);\n+  }\n+\n+  @Override\n+  public void endOfUpstream()\n+  {\n+    endOfUpstream = true;\n+    checkNotifyEndDownstream();\n+  }\n+\n+  protected void checkNotifyEndDownstream()\n+  {\n+    if (!stillWorking() && !isCompleted())\n+    {\n+      synchronized (this)\n+      {\n+        // Only allow a single thread to notify that we've ended our stream as well as calling done()\n+        // stillWorking(), once false cannot again return true so no need to check\n+        if (!isCompleted())\n         {\n-            throw new RuntimeException( panic );\n+          done();\n+          if (downstream != null)\n+          {\n+            downstream.endOfUpstream();\n+          }\n+          endTime = currentTimeMillis();\n+          completed = true;\n         }\n-    }\n-\n-    @Override\n-    public void setDownstream( Step<?> downstream )\n-    {\n-        assert downstream != this;\n-        this.downstream = downstream;\n-        //noinspection unchecked\n-        this.downstreamWorkSync = new WorkSync<>( new Downstream( (Step<Object>) downstream, doneBatches ) );\n-    }\n-\n-    @Override\n-    public StepStats stats()\n-    {\n-        Collection<StatsProvider> providers = new ArrayList<>();\n-        collectStatsProviders( providers );\n-        return new StepStats( name, stillWorking(), providers );\n-    }\n-\n-    protected void collectStatsProviders( Collection<StatsProvider> into )\n-    {\n-        into.add( new ProcessingStats( doneBatches.get() + queuedBatches.get(), doneBatches.get(),\n-                totalProcessingTime.total(), totalProcessingTime.average() / processors( 0 ),\n-                upstreamIdleTime.sum(), downstreamIdleTime.sum() ) );\n-        into.addAll( additionalStatsProvider );\n-    }\n-\n-    @Override\n-    public void endOfUpstream()\n-    {\n-        endOfUpstream = true;\n-        checkNotifyEndDownstream();\n-    }\n-\n-    protected void checkNotifyEndDownstream()\n-    {\n-        if ( !stillWorking() && !isCompleted() )\n-        {\n-            synchronized ( this )\n-            {\n-                // Only allow a single thread to notify that we've ended our stream as well as calling done()\n-                // stillWorking(), once false cannot again return true so no need to check\n-                if ( !isCompleted() )\n-                {\n-                    done();\n-                    if ( downstream != null )\n-                    {\n-                        downstream.endOfUpstream();\n-                    }\n-                    endTime = currentTimeMillis();\n-                    completed = true;\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Called once, when upstream has run out of batches to send and all received batches have been\n-     * processed successfully.\n-     */\n-    protected void done()\n-    {\n-    }\n-\n-    @Override\n-    public void close() throws Exception\n-    {   // Do nothing by default\n-    }\n-\n-    protected void changeName( String name )\n-    {\n-        this.name = name;\n-    }\n-\n-    protected void resetStats()\n-    {\n-        downstreamIdleTime.reset();\n-        upstreamIdleTime.reset();\n-        queuedBatches.set( 0 );\n-        doneBatches.set( 0 );\n-        totalProcessingTime.reset();\n-        startTime = currentTimeMillis();\n-        endTime = 0;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return format( \"%s[%s, processors:%d, batches:%d\", getClass().getSimpleName(),\n-                name, processors( 0 ), doneBatches.get() );\n-    }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Called once, when upstream has run out of batches to send and all received batches have been\n+   * processed successfully.\n+   */\n+  protected void done()\n+  {\n+  }\n+\n+  @Override\n+  public void close() throws Exception\n+  {   // Do nothing by default\n+  }\n+\n+  protected void changeName(String name)\n+  {\n+    this.name = name;\n+  }\n+\n+  protected void resetStats()\n+  {\n+    downstreamIdleTime.reset();\n+    upstreamIdleTime.reset();\n+    queuedBatches.set(0);\n+    doneBatches.set(0);\n+    totalProcessingTime.reset();\n+    startTime = currentTimeMillis();\n+    endTime = 0;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"%s[%s, processors:%d, batches:%d\", getClass().getSimpleName(),\n+        name, processors(0), doneBatches.get());\n+  }\n }\n",
            "diff_size": 254
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2188/AbstractStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2188/AbstractStep.java\nindex 6f1a7c194b4..bef72d70053 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2188/AbstractStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2188/AbstractStep.java\n@@ -49,7 +49,8 @@ public abstract class AbstractStep<T> implements Step<T>\n \n     protected final StageControl control;\n     private volatile String name;\n-    @SuppressWarnings( \"rawtypes\" )\n+\n+@SuppressWarnings( \"rawtypes\" )\n     protected volatile Step downstream;\n     protected volatile WorkSync<Downstream,SendDownstream> downstreamWorkSync;\n     private volatile boolean endOfUpstream;\n@@ -94,7 +95,7 @@ public abstract class AbstractStep<T> implements Step<T>\n \n     protected boolean guarantees( int orderingGuaranteeFlag )\n     {\n-        return (orderingGuarantees & orderingGuaranteeFlag) != 0;\n+        return ( orderingGuarantees & orderingGuaranteeFlag) != 0;\n     }\n \n     @Override\n@@ -113,12 +114,14 @@ public abstract class AbstractStep<T> implements Step<T>\n     protected boolean stillWorking()\n     {\n         if ( isPanic() )\n-        {   // There has been a panic, so we'll just stop working\n+        {\n+    // There has been a panic, so we'll just stop working\n             return false;\n         }\n \n         if ( endOfUpstream && queuedBatches.get() == 0 )\n-        {   // Upstream has run out and we've processed everything upstream sent us\n+        {\n+    // Upstream has run out and we've processed everything upstream sent us\n             return false;\n         }\n \n@@ -178,10 +181,8 @@ public abstract class AbstractStep<T> implements Step<T>\n \n     protected void collectStatsProviders( Collection<StatsProvider> into )\n     {\n-        into.add( new ProcessingStats( doneBatches.get() + queuedBatches.get(), doneBatches.get(),\n-                totalProcessingTime.total(), totalProcessingTime.average() / processors( 0 ),\n-                upstreamIdleTime.sum(), downstreamIdleTime.sum() ) );\n-        into.addAll( additionalStatsProvider );\n+        into.add( new ProcessingStats( doneBatches.get() + queuedBatches.get(), doneBatches.get(), totalProcessingTime.total(), totalProcessingTime.average() / processors( 0 ), upstreamIdleTime.sum(), downstreamIdleTime.sum() ) );\n+into.addAll( additionalStatsProvider );\n     }\n \n     @Override\n@@ -206,7 +207,8 @@ public abstract class AbstractStep<T> implements Step<T>\n                     {\n                         downstream.endOfUpstream();\n                     }\n-                    endTime = currentTimeMillis();\n+\n+endTime = currentTimeMillis();\n                     completed = true;\n                 }\n             }\n@@ -223,7 +225,8 @@ public abstract class AbstractStep<T> implements Step<T>\n \n     @Override\n     public void close() throws Exception\n-    {   // Do nothing by default\n+    {\n+    // Do nothing by default\n     }\n \n     protected void changeName( String name )\n@@ -248,4 +251,4 @@ public abstract class AbstractStep<T> implements Step<T>\n         return format( \"%s[%s, processors:%d, batches:%d\", getClass().getSimpleName(),\n                 name, processors( 0 ), doneBatches.get() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "36",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "54",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "36",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "121",
                    "column": "27",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "column": "158",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "196",
                    "column": "30",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "198",
                    "column": "13",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "198",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2188/AbstractStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2188/AbstractStep.java\nindex 6f1a7c194b4..0a22a5ad3f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2188/AbstractStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2188/AbstractStep.java\n@@ -25,7 +25,6 @@ import java.util.List;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.LongAdder;\n-\n import org.neo4j.concurrent.WorkSync;\n import org.neo4j.kernel.impl.util.MovingAverage;\n import org.neo4j.unsafe.impl.batchimport.Configuration;\n@@ -33,23 +32,26 @@ import org.neo4j.unsafe.impl.batchimport.executor.ParkStrategy;\n import org.neo4j.unsafe.impl.batchimport.stats.ProcessingStats;\n import org.neo4j.unsafe.impl.batchimport.stats.StatsProvider;\n import org.neo4j.unsafe.impl.batchimport.stats.StepStats;\n-\n import static java.lang.String.format;\n+\n import static java.lang.System.currentTimeMillis;\n+\n import static java.util.Arrays.asList;\n+\n import static java.util.concurrent.TimeUnit.MICROSECONDS;\n+\n import static org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS;\n \n /**\n  * Basic implementation of a {@link Step}. Does the most plumbing job of building a step implementation.\n  */\n-public abstract class AbstractStep<T> implements Step<T>\n-{\n-    public static final ParkStrategy PARK = new ParkStrategy.Park( IS_OS_WINDOWS ? 10_000 : 500, MICROSECONDS );\n \n+public abstract class AbstractStep <T> implements Step<T>\n+{\n+    public static final ParkStrategy PARK = new ParkStrategy. Park( IS_OS_WINDOWS ? 10_000 : 500, MICROSECONDS );\n     protected final StageControl control;\n     private volatile String name;\n-    @SuppressWarnings( \"rawtypes\" )\n+    @ SuppressWarnings( \"rawtypes\")\n     protected volatile Step downstream;\n     protected volatile WorkSync<Downstream,SendDownstream> downstreamWorkSync;\n     private volatile boolean endOfUpstream;\n@@ -72,11 +74,10 @@ public abstract class AbstractStep<T> implements Step<T>\n     protected long startTime;\n     protected long endTime;\n     protected final List<StatsProvider> additionalStatsProvider;\n-    protected final Runnable healthChecker = this::assertHealthy;\n+    protected final Runnable healthChecker = this:: assertHealthy;\n     protected final Configuration config;\n \n-    public AbstractStep( StageControl control, String name, Configuration config,\n-            StatsProvider... additionalStatsProvider )\n+    public AbstractStep( StageControl control, String name, Configuration config, StatsProvider... additionalStatsProvider )\n     {\n         this.control = control;\n         this.name = name;\n@@ -94,7 +95,7 @@ public abstract class AbstractStep<T> implements Step<T>\n \n     protected boolean guarantees( int orderingGuaranteeFlag )\n     {\n-        return (orderingGuarantees & orderingGuaranteeFlag) != 0;\n+        return ( orderingGuarantees& orderingGuaranteeFlag) != 0;\n     }\n \n     @Override\n@@ -117,12 +118,13 @@ public abstract class AbstractStep<T> implements Step<T>\n             return false;\n         }\n \n-        if ( endOfUpstream && queuedBatches.get() == 0 )\n+        if ( endOfUpstream&& queuedBatches.get() == 0 )\n         {   // Upstream has run out and we've processed everything upstream sent us\n             return false;\n         }\n \n         // We're still working\n+\n         return true;\n     }\n \n@@ -178,9 +180,7 @@ public abstract class AbstractStep<T> implements Step<T>\n \n     protected void collectStatsProviders( Collection<StatsProvider> into )\n     {\n-        into.add( new ProcessingStats( doneBatches.get() + queuedBatches.get(), doneBatches.get(),\n-                totalProcessingTime.total(), totalProcessingTime.average() / processors( 0 ),\n-                upstreamIdleTime.sum(), downstreamIdleTime.sum() ) );\n+        into.add( new ProcessingStats( doneBatches.get() + queuedBatches.get(), doneBatches.get(), totalProcessingTime.total(), totalProcessingTime.average()/ processors( 0 ), upstreamIdleTime.sum(), downstreamIdleTime.sum() ) );\n         into.addAll( additionalStatsProvider );\n     }\n \n@@ -193,19 +193,20 @@ public abstract class AbstractStep<T> implements Step<T>\n \n     protected void checkNotifyEndDownstream()\n     {\n-        if ( !stillWorking() && !isCompleted() )\n+        if ( ! stillWorking()&& ! isCompleted() )\n         {\n-            synchronized ( this )\n+            synchronized( this)\n             {\n                 // Only allow a single thread to notify that we've ended our stream as well as calling done()\n                 // stillWorking(), once false cannot again return true so no need to check\n-                if ( !isCompleted() )\n+                if ( ! isCompleted() )\n                 {\n                     done();\n                     if ( downstream != null )\n                     {\n                         downstream.endOfUpstream();\n                     }\n+\n                     endTime = currentTimeMillis();\n                     completed = true;\n                 }\n@@ -217,6 +218,7 @@ public abstract class AbstractStep<T> implements Step<T>\n      * Called once, when upstream has run out of batches to send and all received batches have been\n      * processed successfully.\n      */\n+\n     protected void done()\n     {\n     }\n@@ -245,7 +247,6 @@ public abstract class AbstractStep<T> implements Step<T>\n     @Override\n     public String toString()\n     {\n-        return format( \"%s[%s, processors:%d, batches:%d\", getClass().getSimpleName(),\n-                name, processors( 0 ), doneBatches.get() );\n+        return format( \"%s[%s, processors:%d, batches:%d\", getClass().getSimpleName(), name, processors( 0 ), doneBatches.get() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}