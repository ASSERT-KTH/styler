{
    "project_name": "Angel-ML-angel",
    "error_id": "1162",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1162/BinaryColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1162/BinaryColumnFormat.java\nindex a0740effd54..5460c7bddb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1162/BinaryColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1162/BinaryColumnFormat.java\n@@ -25,114 +25,130 @@ import java.io.IOException;\n  * Binary format: column id, column values\n  */\n public class BinaryColumnFormat extends ColumnFormat {\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(float value : col.colElems) {\n+    for (float value : col.colElems) {\n       output.writeFloat(value);\n     }\n   }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(double value : col.colElems) {\n+    for (double value : col.colElems) {\n       output.writeDouble(value);\n     }\n   }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(int value : col.colElems) {\n+    for (int value : col.colElems) {\n       output.writeInt(value);\n     }\n   }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(long value : col.colElems) {\n+    for (long value : col.colElems) {\n       output.writeLong(value);\n     }\n   }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(float value : col.colElems) {\n+    for (float value : col.colElems) {\n       output.writeFloat(value);\n     }\n   }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(double value : col.colElems) {\n+    for (double value : col.colElems) {\n       output.writeDouble(value);\n     }\n   }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(int value : col.colElems) {\n+    for (int value : col.colElems) {\n       output.writeInt(value);\n     }\n   }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(long value : col.colElems) {\n+    for (long value : col.colElems) {\n       output.writeLong(value);\n     }\n   }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readFloat();\n     }\n   }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readDouble();\n     }\n   }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readInt();\n     }\n   }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readLong();\n     }\n   }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readFloat();\n     }\n   }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readDouble();\n     }\n   }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readInt();\n     }\n   }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readLong();\n     }\n   }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1162/BinaryColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1162/BinaryColumnFormat.java\nindex a0740effd54..1f5b2b4f38f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1162/BinaryColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1162/BinaryColumnFormat.java\n@@ -25,115 +25,131 @@ import java.io.IOException;\n  * Binary format: column id, column values\n  */\n public class BinaryColumnFormat extends ColumnFormat {\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(float value : col.colElems) {\n+    for (float value : col.colElems) {\n       output.writeFloat(value);\n     }\n   }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(double value : col.colElems) {\n+    for (double value : col.colElems) {\n       output.writeDouble(value);\n     }\n   }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(int value : col.colElems) {\n+    for (int value : col.colElems) {\n       output.writeInt(value);\n     }\n   }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(long value : col.colElems) {\n+    for (long value : col.colElems) {\n       output.writeLong(value);\n     }\n   }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(float value : col.colElems) {\n+    for (float value : col.colElems) {\n       output.writeFloat(value);\n     }\n   }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(double value : col.colElems) {\n+    for (double value : col.colElems) {\n       output.writeDouble(value);\n     }\n   }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(int value : col.colElems) {\n+    for (int value : col.colElems) {\n       output.writeInt(value);\n     }\n   }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(long value : col.colElems) {\n+    for (long value : col.colElems) {\n       output.writeLong(value);\n     }\n   }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readFloat();\n     }\n   }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readDouble();\n     }\n   }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readInt();\n     }\n   }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readLong();\n     }\n   }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readFloat();\n     }\n   }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readDouble();\n     }\n   }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readInt();\n     }\n   }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readLong();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1162/BinaryColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1162/BinaryColumnFormat.java\nindex a0740effd54..0fed9f7523a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1162/BinaryColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1162/BinaryColumnFormat.java\n@@ -24,116 +24,136 @@ import java.io.IOException;\n /**\n  * Binary format: column id, column values\n  */\n+\n public class BinaryColumnFormat extends ColumnFormat {\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+\n+\n+  @Override\n+  public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(float value : col.colElems) {\n+    for (float value : col.colElems) {\n       output.writeFloat(value);\n     }\n   }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(double value : col.colElems) {\n+    for (double value : col.colElems) {\n       output.writeDouble(value);\n     }\n   }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(int value : col.colElems) {\n+    for (int value : col.colElems) {\n       output.writeInt(value);\n     }\n   }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     output.writeInt(col.colId);\n-    for(long value : col.colElems) {\n+    for (long value : col.colElems) {\n       output.writeLong(value);\n     }\n   }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(float value : col.colElems) {\n+    for (float value : col.colElems) {\n       output.writeFloat(value);\n     }\n   }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(double value : col.colElems) {\n+    for (double value : col.colElems) {\n       output.writeDouble(value);\n     }\n   }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(int value : col.colElems) {\n+    for (int value : col.colElems) {\n       output.writeInt(value);\n     }\n   }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     output.writeLong(col.colId);\n-    for(long value : col.colElems) {\n+    for (long value : col.colElems) {\n       output.writeLong(value);\n     }\n   }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readFloat();\n     }\n   }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readDouble();\n     }\n   }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readInt();\n     }\n   }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readInt();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readLong();\n     }\n   }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readFloat();\n     }\n   }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readDouble();\n     }\n   }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readInt();\n     }\n   }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     col.colId = input.readLong();\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       col.colElems[i] = input.readLong();\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}