{
    "project_name": "Angel-ML-angel",
    "error_id": "446",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/446/BinaryCSRFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/446/BinaryCSRFormat.java\nindex 9a512543944..f2ab2eca955 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/446/BinaryCSRFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/446/BinaryCSRFormat.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.model.output.format;\n \n import com.tencent.angel.model.PSMatrixLoadContext;\n@@ -36,32 +37,32 @@ public class BinaryCSRFormat extends PSMatrixLoaderSaverImpl {\n \n   @Override\n   public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+                   PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     CSRPartition csrPart = (CSRPartition) part;\n     CSRStorage storage = csrPart.getStorage();\n \n-    if(storage instanceof IntCSRStorage) {\n+    if (storage instanceof IntCSRStorage) {\n       save((IntCSRStorage) storage, output);\n     }\n   }\n \n   public void save(IntCSRStorage storage, DataOutputStream output) throws IOException {\n-    int [] rowOffset = storage.getRowOffsets();\n-    int [] columnIndices = storage.getColumnIndices();\n-    int [] values = storage.getValues();\n+    int[] rowOffset = storage.getRowOffsets();\n+    int[] columnIndices = storage.getColumnIndices();\n+    int[] values = storage.getValues();\n     output.writeInt(rowOffset.length);\n-    for(int i = 0; i < rowOffset.length; i++) {\n+    for (int i = 0; i < rowOffset.length; i++) {\n       output.writeInt(rowOffset[i]);\n     }\n \n     output.writeInt(columnIndices.length);\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    for (int i = 0; i < columnIndices.length; i++) {\n       output.writeInt(columnIndices[i]);\n     }\n \n-    if(values != null) {\n+    if (values != null) {\n       output.writeInt(values.length);\n-      for(int i = 0; i < values.length; i++) {\n+      for (int i = 0; i < values.length; i++) {\n         output.writeInt(values[i]);\n       }\n     } else {\n@@ -71,27 +72,27 @@ public class BinaryCSRFormat extends PSMatrixLoaderSaverImpl {\n \n   @Override\n   public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+                   PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     CSRPartition csrPart = (CSRPartition) part;\n     CSRStorage storage = csrPart.getStorage();\n-    if(storage instanceof IntCSRStorage) {\n+    if (storage instanceof IntCSRStorage) {\n       load((IntCSRStorage) storage, input);\n     }\n   }\n \n   private void load(IntCSRStorage storage, DataInputStream input) throws IOException {\n-    int [] rowOffsets = new int[input.readInt()];\n-    for(int i = 0; i < rowOffsets.length; i++) {\n+    int[] rowOffsets = new int[input.readInt()];\n+    for (int i = 0; i < rowOffsets.length; i++) {\n       rowOffsets[i] = input.readInt();\n     }\n \n-    int [] columnIndices = new int[input.readInt()];\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    int[] columnIndices = new int[input.readInt()];\n+    for (int i = 0; i < columnIndices.length; i++) {\n       columnIndices[i] = input.readInt();\n     }\n \n-    int [] values = new int[input.readInt()];\n-    for(int i = 0; i < values.length; i++) {\n+    int[] values = new int[input.readInt()];\n+    for (int i = 0; i < values.length; i++) {\n       values[i] = input.readInt();\n     }\n   }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/446/BinaryCSRFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/446/BinaryCSRFormat.java\nindex 9a512543944..15654ef16b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/446/BinaryCSRFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/446/BinaryCSRFormat.java\n@@ -40,28 +40,28 @@ public class BinaryCSRFormat extends PSMatrixLoaderSaverImpl {\n     CSRPartition csrPart = (CSRPartition) part;\n     CSRStorage storage = csrPart.getStorage();\n \n-    if(storage instanceof IntCSRStorage) {\n+    if (storage instanceof IntCSRStorage) {\n       save((IntCSRStorage) storage, output);\n     }\n   }\n \n   public void save(IntCSRStorage storage, DataOutputStream output) throws IOException {\n-    int [] rowOffset = storage.getRowOffsets();\n-    int [] columnIndices = storage.getColumnIndices();\n-    int [] values = storage.getValues();\n+    int[] rowOffset = storage.getRowOffsets();\n+    int[] columnIndices = storage.getColumnIndices();\n+    int[] values = storage.getValues();\n     output.writeInt(rowOffset.length);\n-    for(int i = 0; i < rowOffset.length; i++) {\n+    for (int i = 0; i < rowOffset.length; i++) {\n       output.writeInt(rowOffset[i]);\n     }\n \n     output.writeInt(columnIndices.length);\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    for (int i = 0; i < columnIndices.length; i++) {\n       output.writeInt(columnIndices[i]);\n     }\n \n-    if(values != null) {\n+    if (values != null) {\n       output.writeInt(values.length);\n-      for(int i = 0; i < values.length; i++) {\n+      for (int i = 0; i < values.length; i++) {\n         output.writeInt(values[i]);\n       }\n     } else {\n@@ -74,25 +74,25 @@ public class BinaryCSRFormat extends PSMatrixLoaderSaverImpl {\n       PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     CSRPartition csrPart = (CSRPartition) part;\n     CSRStorage storage = csrPart.getStorage();\n-    if(storage instanceof IntCSRStorage) {\n+    if (storage instanceof IntCSRStorage) {\n       load((IntCSRStorage) storage, input);\n     }\n   }\n \n   private void load(IntCSRStorage storage, DataInputStream input) throws IOException {\n-    int [] rowOffsets = new int[input.readInt()];\n-    for(int i = 0; i < rowOffsets.length; i++) {\n+    int[] rowOffsets = new int[input.readInt()];\n+    for (int i = 0; i < rowOffsets.length; i++) {\n       rowOffsets[i] = input.readInt();\n     }\n \n-    int [] columnIndices = new int[input.readInt()];\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    int[] columnIndices = new int[input.readInt()];\n+    for (int i = 0; i < columnIndices.length; i++) {\n       columnIndices[i] = input.readInt();\n     }\n \n-    int [] values = new int[input.readInt()];\n-    for(int i = 0; i < values.length; i++) {\n+    int[] values = new int[input.readInt()];\n+    for (int i = 0; i < values.length; i++) {\n       values[i] = input.readInt();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/446/BinaryCSRFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/446/BinaryCSRFormat.java\nindex 9a512543944..30d4e15447c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/446/BinaryCSRFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/446/BinaryCSRFormat.java\n@@ -35,33 +35,31 @@ public class BinaryCSRFormat extends PSMatrixLoaderSaverImpl {\n   }\n \n   @Override\n-  public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  public void save(\n+    ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     CSRPartition csrPart = (CSRPartition) part;\n     CSRStorage storage = csrPart.getStorage();\n-\n-    if(storage instanceof IntCSRStorage) {\n+    if (storage instanceof IntCSRStorage) {\n       save((IntCSRStorage) storage, output);\n     }\n   }\n \n   public void save(IntCSRStorage storage, DataOutputStream output) throws IOException {\n-    int [] rowOffset = storage.getRowOffsets();\n-    int [] columnIndices = storage.getColumnIndices();\n-    int [] values = storage.getValues();\n+    int[] rowOffset = storage.getRowOffsets();\n+    int[] columnIndices = storage.getColumnIndices();\n+    int[] values = storage.getValues();\n     output.writeInt(rowOffset.length);\n-    for(int i = 0; i < rowOffset.length; i++) {\n+    for (int i = 0; i < rowOffset.length; i++) {\n       output.writeInt(rowOffset[i]);\n     }\n-\n     output.writeInt(columnIndices.length);\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    for (int i = 0; i < columnIndices.length; i++) {\n       output.writeInt(columnIndices[i]);\n     }\n \n-    if(values != null) {\n+    if (values != null) {\n       output.writeInt(values.length);\n-      for(int i = 0; i < values.length; i++) {\n+      for (int i = 0; i < values.length; i++) {\n         output.writeInt(values[i]);\n       }\n     } else {\n@@ -70,29 +68,30 @@ public class BinaryCSRFormat extends PSMatrixLoaderSaverImpl {\n   }\n \n   @Override\n-  public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  public void load(\n+    ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     CSRPartition csrPart = (CSRPartition) part;\n     CSRStorage storage = csrPart.getStorage();\n-    if(storage instanceof IntCSRStorage) {\n+    if (storage instanceof IntCSRStorage) {\n       load((IntCSRStorage) storage, input);\n     }\n   }\n \n   private void load(IntCSRStorage storage, DataInputStream input) throws IOException {\n-    int [] rowOffsets = new int[input.readInt()];\n-    for(int i = 0; i < rowOffsets.length; i++) {\n+    int[] rowOffsets = new int[input.readInt()];\n+    for (int i = 0; i < rowOffsets.length; i++) {\n       rowOffsets[i] = input.readInt();\n     }\n \n-    int [] columnIndices = new int[input.readInt()];\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    int[] columnIndices = new int[input.readInt()];\n+    for (int i = 0; i < columnIndices.length; i++) {\n       columnIndices[i] = input.readInt();\n     }\n \n-    int [] values = new int[input.readInt()];\n-    for(int i = 0; i < values.length; i++) {\n+    int[] values = new int[input.readInt()];\n+    for (int i = 0; i < values.length; i++) {\n       values[i] = input.readInt();\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}