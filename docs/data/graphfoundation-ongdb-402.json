{
    "project_name": "graphfoundation-ongdb",
    "error_id": "402",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/402/FreeIdFilteredIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/402/FreeIdFilteredIdGeneratorFactory.java\nindex 9987b458e33..c5be2b662e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/402/FreeIdFilteredIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/402/FreeIdFilteredIdGeneratorFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state.machines.id;\n \n import java.io.File;\n@@ -31,44 +32,44 @@ import org.neo4j.kernel.impl.store.id.IdType;\n \n public class FreeIdFilteredIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private Map<IdType, IdGenerator> delegatedGenerator = new HashMap<>();\n-    private final IdGeneratorFactory delegate;\n-    private final BooleanSupplier freeIdCondition;\n+  private Map<IdType, IdGenerator> delegatedGenerator = new HashMap<>();\n+  private final IdGeneratorFactory delegate;\n+  private final BooleanSupplier freeIdCondition;\n \n-    public FreeIdFilteredIdGeneratorFactory( IdGeneratorFactory delegate, BooleanSupplier freeIdCondition )\n-    {\n-        this.delegate = delegate;\n-        this.freeIdCondition = freeIdCondition;\n-    }\n+  public FreeIdFilteredIdGeneratorFactory(IdGeneratorFactory delegate, BooleanSupplier freeIdCondition)\n+  {\n+    this.delegate = delegate;\n+    this.freeIdCondition = freeIdCondition;\n+  }\n \n-    @Override\n-    public IdGenerator open( File filename, IdType idType, LongSupplier highId, long maxId )\n-    {\n-        FreeIdFilteredIdGenerator freeIdFilteredIdGenerator =\n-                new FreeIdFilteredIdGenerator( delegate.open( filename, idType, highId, maxId ), freeIdCondition );\n-        delegatedGenerator.put( idType, freeIdFilteredIdGenerator );\n-        return freeIdFilteredIdGenerator;\n-    }\n+  @Override\n+  public IdGenerator open(File filename, IdType idType, LongSupplier highId, long maxId)\n+  {\n+    FreeIdFilteredIdGenerator freeIdFilteredIdGenerator =\n+        new FreeIdFilteredIdGenerator(delegate.open(filename, idType, highId, maxId), freeIdCondition);\n+    delegatedGenerator.put(idType, freeIdFilteredIdGenerator);\n+    return freeIdFilteredIdGenerator;\n+  }\n \n-    @Override\n-    public IdGenerator open( File filename, int grabSize, IdType idType, LongSupplier highId, long maxId )\n-    {\n-        FreeIdFilteredIdGenerator freeIdFilteredIdGenerator =\n-                new FreeIdFilteredIdGenerator( delegate.open( filename, grabSize, idType, highId, maxId ),\n-                        freeIdCondition );\n-        delegatedGenerator.put( idType, freeIdFilteredIdGenerator );\n-        return freeIdFilteredIdGenerator;\n-    }\n+  @Override\n+  public IdGenerator open(File filename, int grabSize, IdType idType, LongSupplier highId, long maxId)\n+  {\n+    FreeIdFilteredIdGenerator freeIdFilteredIdGenerator =\n+        new FreeIdFilteredIdGenerator(delegate.open(filename, grabSize, idType, highId, maxId),\n+            freeIdCondition);\n+    delegatedGenerator.put(idType, freeIdFilteredIdGenerator);\n+    return freeIdFilteredIdGenerator;\n+  }\n \n-    @Override\n-    public void create( File filename, long highId, boolean throwIfFileExists )\n-    {\n-        delegate.create( filename, highId, throwIfFileExists );\n-    }\n+  @Override\n+  public void create(File filename, long highId, boolean throwIfFileExists)\n+  {\n+    delegate.create(filename, highId, throwIfFileExists);\n+  }\n \n-    @Override\n-    public IdGenerator get( IdType idType )\n-    {\n-        return delegatedGenerator.get( idType );\n-    }\n+  @Override\n+  public IdGenerator get(IdType idType)\n+  {\n+    return delegatedGenerator.get(idType);\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/402/FreeIdFilteredIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/402/FreeIdFilteredIdGeneratorFactory.java\nindex 9987b458e33..95187e3b54b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/402/FreeIdFilteredIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/402/FreeIdFilteredIdGeneratorFactory.java\n@@ -31,7 +31,7 @@ import org.neo4j.kernel.impl.store.id.IdType;\n \n public class FreeIdFilteredIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private Map<IdType, IdGenerator> delegatedGenerator = new HashMap<>();\n+    private Map<IdType,IdGenerator> delegatedGenerator = new HashMap<>();\n     private final IdGeneratorFactory delegate;\n     private final BooleanSupplier freeIdCondition;\n \n@@ -44,19 +44,17 @@ public class FreeIdFilteredIdGeneratorFactory implements IdGeneratorFactory\n     @Override\n     public IdGenerator open( File filename, IdType idType, LongSupplier highId, long maxId )\n     {\n-        FreeIdFilteredIdGenerator freeIdFilteredIdGenerator =\n-                new FreeIdFilteredIdGenerator( delegate.open( filename, idType, highId, maxId ), freeIdCondition );\n-        delegatedGenerator.put( idType, freeIdFilteredIdGenerator );\n+        FreeIdFilteredIdGenerator freeIdFilteredIdGenerator = new FreeIdFilteredIdGenerator( delegate.open( filename, idType, highId, maxId ), freeIdCondition );\n+delegatedGenerator.put( idType, freeIdFilteredIdGenerator );\n         return freeIdFilteredIdGenerator;\n     }\n \n     @Override\n     public IdGenerator open( File filename, int grabSize, IdType idType, LongSupplier highId, long maxId )\n     {\n-        FreeIdFilteredIdGenerator freeIdFilteredIdGenerator =\n-                new FreeIdFilteredIdGenerator( delegate.open( filename, grabSize, idType, highId, maxId ),\n+        FreeIdFilteredIdGenerator freeIdFilteredIdGenerator = new FreeIdFilteredIdGenerator( delegate.open( filename, grabSize, idType, highId, maxId ),\n                         freeIdCondition );\n-        delegatedGenerator.put( idType, freeIdFilteredIdGenerator );\n+delegatedGenerator.put( idType, freeIdFilteredIdGenerator );\n         return freeIdFilteredIdGenerator;\n     }\n \n@@ -71,4 +69,4 @@ public class FreeIdFilteredIdGeneratorFactory implements IdGeneratorFactory\n     {\n         return delegatedGenerator.get( idType );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}