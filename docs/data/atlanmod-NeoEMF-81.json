{
    "project_name": "atlanmod-NeoEMF",
    "error_id": "81",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "warning",
                "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "    protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n            IdConverters.withLong()::convert,\n            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n\n    /**\n     * The property key used to define the index of an edge.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/81/AbstractBlueprintsBackend.java\nindex bb9fb594241..74820a0bb4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/81/AbstractBlueprintsBackend.java\n@@ -56,8 +56,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+            IdConverters.withLong()::convert,o -> IdConverters.withLong().revert(Long.class.cast(o\n+\n+            )\n+            ));\n \n     /**\n      * The property key used to define the index of an edge.\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/81/AbstractBlueprintsBackend.java\nindex bb9fb594241..ce6da849130 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/81/AbstractBlueprintsBackend.java\n@@ -56,8 +56,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+        IdConverters.withLong()::convert,\n+        o -> IdConverters.withLong().revert(Long.class.cast(o)));\n \n     /**\n      * The property key used to define the index of an edge.\n@@ -99,8 +99,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     private final Cache<Id, Vertex> verticesCache = CacheBuilder.builder()\n-            .softValues()\n-            .build();\n+        .softValues()\n+        .build();\n \n     /**\n      * A set that holds indexed {@link ClassBean}.\n@@ -136,7 +136,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Constructs a new {@code AbstractBlueprintsBackend} wrapping the provided {@code baseGraph}.\n      *\n      * @param baseGraph the base {@link KeyIndexableGraph} used to access the database\n-     *\n      * @see BlueprintsBackendFactory\n      */\n     protected AbstractBlueprintsBackend(KeyIndexableGraph baseGraph) {\n@@ -154,7 +153,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Builds the {@link Id} used to identify a {@link ClassBean} {@link Vertex}.\n      *\n      * @param metaClass the {@link ClassBean} to build an {@link Id} from\n-     *\n      * @return the create {@link Id}\n      */\n     @Nonnull\n@@ -166,17 +164,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Retrieves the base graph of the {@code graph}.\n      *\n      * @param graph the graph from which to retrieve the base graph\n-     *\n      * @return the base graph of the {@code graph}, or {@code graph} is it is not a wrapper.\n-     *\n      * @see com.tinkerpop.blueprints.Features#isWrapper\n      * @see WrapperGraph\n      */\n     @Nonnull\n     private Graph getOrigin(Graph graph) {\n         return graph.getFeatures().isWrapper\n-                ? getOrigin(WrapperGraph.class.cast(graph).getBaseGraph())\n-                : graph;\n+            ? getOrigin(WrapperGraph.class.cast(graph).getBaseGraph())\n+            : graph;\n     }\n \n     /**\n@@ -184,7 +180,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @param feature the feature associated with the property\n      * @param suffix  the suffix of the property\n-     *\n      * @return the formatted property\n      */\n     @Nonnull\n@@ -196,36 +191,33 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Formats a label.\n      *\n      * @param feature the feature associated with the label\n-     *\n      * @return the formatted label\n      */\n     @Nonnull\n     // TODO Can cause a massive overhead (metaClassNameOf)\n     protected String formatLabel(FeatureBean feature) {\n         return requireUniqueLabels\n-                ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id())\n-                : Integer.toString(feature.id());\n+            ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id())\n+            : Integer.toString(feature.id());\n     }\n \n     /**\n      * Retrieves or create an index for the given {@code name}.\n      *\n      * @param name the name of the index\n-     *\n      * @return the index\n      */\n     @Nonnull\n     private Index<Vertex> getOrCreateIndex(String name) {\n         return Optional.ofNullable(graph.getIndex(name, Vertex.class))\n-                .orElseGet(() -> graph.createIndex(name, Vertex.class));\n+            .orElseGet(() -> graph.createIndex(name, Vertex.class));\n     }\n \n     @Override\n     public void save() {\n         if (graph.getFeatures().supportsTransactions) {\n             graph.commit();\n-        }\n-        else {\n+        } else {\n             graph.shutdown();\n         }\n     }\n@@ -260,15 +252,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Edge> edges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         return MoreIterables.onlyElement(edges)\n-                .map(e -> SingleFeatureBean.of(\n-                        AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()),\n-                        e.getProperty(PROPERTY_FEATURE_NAME)));\n+            .map(e -> SingleFeatureBean.of(\n+                AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()),\n+                e.getProperty(PROPERTY_FEATURE_NAME)));\n     }\n \n     @Override\n@@ -280,10 +272,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         Vertex containerVertex = getOrCreate(container.owner());\n \n         Iterable<Edge> containmentEdges = containmentVertex.query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         containmentEdges.forEach(Edge::remove);\n \n@@ -302,10 +294,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Edge> containmentEdges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         containmentEdges.forEach(Edge::remove);\n     }\n@@ -322,15 +314,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Vertex> metaClassVertices = vertex.get().query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .vertices();\n+            .labels(EDGE_INSTANCE_OF)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .vertices();\n \n         return MoreIterables.onlyElement(metaClassVertices)\n-                .map(v -> ClassBean.of(\n-                        v.getProperty(PROPERTY_CLASS_NAME),\n-                        v.getProperty(PROPERTY_CLASS_URI)));\n+            .map(v -> ClassBean.of(\n+                v.getProperty(PROPERTY_CLASS_NAME),\n+                v.getProperty(PROPERTY_CLASS_URI)));\n     }\n \n     @Override\n@@ -342,10 +334,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n \n         // Check the presence of a meta-class\n         Iterable<Edge> instanceEdges = vertex.query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_INSTANCE_OF)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         if (MoreIterables.onlyElement(instanceEdges).isPresent()) {\n             return false;\n@@ -375,19 +367,18 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n     @Override\n     public Iterable<Id> allInstancesOf(Set<ClassBean> metaClasses) {\n         return metaClasses.stream()\n-                .map(mc -> metaClassIndex.get(PROPERTY_CLASS_NAME, mc.name()))\n-                .flatMap(MoreIterables::stream)\n-                .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n-                .flatMap(MoreIterables::stream)\n-                .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n-                .collect(Collectors.toSet());\n+            .map(mc -> metaClassIndex.get(PROPERTY_CLASS_NAME, mc.name()))\n+            .flatMap(MoreIterables::stream)\n+            .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n+            .flatMap(MoreIterables::stream)\n+            .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n      * Returns the name of the meta-class of the specified {@code id}.\n      *\n      * @param id the identifier\n-     *\n      * @return the name of the meta-class\n      */\n     @Nonnull\n@@ -400,7 +391,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Retrieves the {@link Vertex} corresponding to the provided {@code id}.\n      *\n      * @param id the {@link Id} of the element to find\n-     *\n      * @return an {@link Optional} containing the {@link Vertex}, or {@link Optional#empty()} if it doesn't exist\n      */\n     @Nonnull\n@@ -413,14 +403,13 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * created.\n      *\n      * @param id the {@link Id} of the element to find, or create\n-     *\n      * @return the {@link Vertex}\n      */\n     @Nonnull\n     protected Vertex getOrCreate(Id id) {\n         return verticesCache.get(id, i ->\n-                Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i)))\n-                        .orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n+            Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i)))\n+                .orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n     }\n \n     /**\n@@ -467,13 +456,12 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n          * Creates a new {@link SmartIdEdge} from another {@link Edge}.\n          *\n          * @param edge the base edge\n-         *\n          * @return an {@link SmartIdEdge}\n          */\n         private Edge createFrom(@Nullable Edge edge) {\n             return Optional.ofNullable(edge)\n-                    .map(SmartIdEdge::new)\n-                    .orElse(null);\n+                .map(SmartIdEdge::new)\n+                .orElse(null);\n         }\n \n         /**\n@@ -503,9 +491,9 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n                 super.remove();\n \n                 Iterable<Edge> edges = referencedVertex.query()\n-                        .direction(Direction.IN)\n-                        .limit(1)\n-                        .edges();\n+                    .direction(Direction.IN)\n+                    .limit(1)\n+                    .edges();\n \n                 if (MoreIterables.isEmpty(edges)) {\n                     // If the Vertex has no more incoming edges remove it from the DB\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/81/AbstractBlueprintsBackend.java\nindex bb9fb594241..ac6dfffb559 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/81/AbstractBlueprintsBackend.java\n@@ -56,8 +56,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+            IdConverters.withLong()::convert, o -> IdConverters.withLong().revert(Long.class.cast(o)));\n \n     /**\n      * The property key used to define the index of an edge.\n@@ -514,4 +513,4 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "366",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 80, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "367",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 80, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "368",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 80, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "369",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 80, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "370",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 80, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "371",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 80, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "372",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 76, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/codebuff/81/AbstractBlueprintsBackend.java\nindex bb9fb594241..40ab765b288 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/codebuff/81/AbstractBlueprintsBackend.java\n@@ -19,7 +19,6 @@ import com.tinkerpop.blueprints.util.GraphHelper;\n import com.tinkerpop.blueprints.util.wrappers.WrapperGraph;\n import com.tinkerpop.blueprints.util.wrappers.id.IdEdge;\n import com.tinkerpop.blueprints.util.wrappers.id.IdGraph;\n-\n import fr.inria.atlanmod.commons.cache.Cache;\n import fr.inria.atlanmod.commons.cache.CacheBuilder;\n import fr.inria.atlanmod.commons.collect.MoreIterables;\n@@ -31,12 +30,10 @@ import fr.inria.atlanmod.neoemf.data.bean.ClassBean;\n import fr.inria.atlanmod.neoemf.data.bean.FeatureBean;\n import fr.inria.atlanmod.neoemf.data.bean.SingleFeatureBean;\n import fr.inria.atlanmod.neoemf.data.mapping.DataMapper;\n-\n import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import javax.annotation.ParametersAreNonnullByDefault;\n@@ -46,6 +43,8 @@ import static fr.inria.atlanmod.commons.Preconditions.checkNotNull;\n /**\n  * An abstract {@link BlueprintsBackend} that provides overall behavior for the management of a Blueprints database.\n  */\n+\n+\n @ParametersAreNonnullByDefault\n abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend implements BlueprintsBackend {\n \n@@ -54,53 +53,68 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * <p>\n      * This converter is specific to Blueprints which returns each identifier as an {@link Object}.\n      */\n+\n+\n     @Nonnull\n-    protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+    protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(IdConverters.withLong()::convert, o -> IdConverters.withLong().revert(Long.class.cast(o)));\n \n     /**\n      * The property key used to define the index of an edge.\n      */\n+\n+\n     protected static final String PROPERTY_INDEX = \"_p\";\n \n     /**\n      * The property key used to define the number of edges with a specific label.\n      */\n+\n+\n     protected static final String PROPERTY_SIZE = \"_s\";\n \n     /**\n      * The label used to define container {@link Edge}s.\n      */\n+\n+\n     private static final String EDGE_CONTAINER = \"_c\";\n \n     /**\n      * The label of type conformance {@link Edge}s.\n      */\n+\n+\n     private static final String EDGE_INSTANCE_OF = \"_i\";\n \n     /**\n      * The property key used to define the name of the the opposite containing feature in container {@link Edge}s.\n      */\n+\n+\n     private static final String PROPERTY_FEATURE_NAME = \"_cn\";\n \n     /**\n      * The property key used to define the name of meta-class {@link Vertex}s.\n      */\n+\n+\n     private static final String PROPERTY_CLASS_NAME = \"_in\";\n \n     /**\n      * The property key used to define the URI of meta-class {@link Vertex}s.\n      */\n+\n+\n     private static final String PROPERTY_CLASS_URI = \"_iu\";\n \n     /**\n      * In-memory cache that holds recently loaded {@link Vertex}s, identified by the associated object {@link Id}.\n      */\n+\n+\n     @Nonnull\n-    private final Cache<Id, Vertex> verticesCache = CacheBuilder.builder()\n-            .softValues()\n-            .build();\n+    private final Cache<Id, Vertex> verticesCache = CacheBuilder.builder().softValues()\n+                                                                          .build();\n \n     /**\n      * A set that holds indexed {@link ClassBean}.\n@@ -108,18 +122,24 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * @see #metaClassIndex\n      * @see #innerCopyTo(DataMapper)\n      */\n+\n+\n     @Nonnull\n     private final Set<ClassBean> metaClassSet;\n \n     /**\n      * Index containing meta-classes.\n      */\n+\n+\n     @Nonnull\n     private final Index<Vertex> metaClassIndex;\n \n     /**\n      * The Blueprints graph.\n      */\n+\n+\n     @Nonnull\n     private final IdGraph<KeyIndexableGraph> graph;\n \n@@ -130,6 +150,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * if it appears in a different Vertex/Edge. A simple {@link Integer} cause some troubles because they appear in\n      * different {@link com.tinkerpop.blueprints.Element} but don't represent the same thing.\n      */\n+\n+\n     private final boolean requireUniqueLabels;\n \n     /**\n@@ -139,13 +161,12 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @see BlueprintsBackendFactory\n      */\n+\n+\n     protected AbstractBlueprintsBackend(KeyIndexableGraph baseGraph) {\n         checkNotNull(baseGraph);\n-\n         graph = new SmartIdGraph(baseGraph);\n-\n         requireUniqueLabels = TinkerGraph.class.isInstance(getOrigin(baseGraph));\n-\n         metaClassSet = new HashSet<>();\n         metaClassIndex = getOrCreateIndex(\"instances\");\n     }\n@@ -157,6 +178,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return the create {@link Id}\n      */\n+\n     @Nonnull\n     private static Id generateClassId(ClassBean metaClass) {\n         return Id.getProvider().generate(metaClass.name() + metaClass.uri());\n@@ -172,11 +194,11 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * @see com.tinkerpop.blueprints.Features#isWrapper\n      * @see WrapperGraph\n      */\n+\n     @Nonnull\n     private Graph getOrigin(Graph graph) {\n-        return graph.getFeatures().isWrapper\n-                ? getOrigin(WrapperGraph.class.cast(graph).getBaseGraph())\n-                : graph;\n+        return graph.getFeatures().isWrapper ? getOrigin(WrapperGraph.class.cast(graph)\n+                                                                           .getBaseGraph()) : graph;\n     }\n \n     /**\n@@ -187,6 +209,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return the formatted property\n      */\n+\n     @Nonnull\n     protected String formatProperty(FeatureBean feature, Object suffix) {\n         return formatLabel(feature) + ':' + String.valueOf(suffix);\n@@ -199,12 +222,11 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return the formatted label\n      */\n+\n     @Nonnull\n     // TODO Can cause a massive overhead (metaClassNameOf)\n     protected String formatLabel(FeatureBean feature) {\n-        return requireUniqueLabels\n-                ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id())\n-                : Integer.toString(feature.id());\n+        return requireUniqueLabels ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id()) : Integer.toString(feature.id());\n     }\n \n     /**\n@@ -214,10 +236,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return the index\n      */\n+\n     @Nonnull\n     private Index<Vertex> getOrCreateIndex(String name) {\n-        return Optional.ofNullable(graph.getIndex(name, Vertex.class))\n-                .orElseGet(() -> graph.createIndex(name, Vertex.class));\n+        return Optional.ofNullable(graph.getIndex(name, Vertex.class)).orElseGet(() -> graph.createIndex(name, Vertex.class));\n     }\n \n     @Override\n@@ -238,11 +260,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n     @Override\n     protected void innerCopyTo(DataMapper target) {\n         AbstractBlueprintsBackend to = AbstractBlueprintsBackend.class.cast(target);\n-\n         GraphHelper.copyGraph(graph, to.graph);\n-\n         metaClassSet.forEach(m -> {\n             Id id = generateClassId(m);\n+\n             Vertex vertex = get(id).<IllegalStateException>orElseThrow(IllegalStateException::new);\n             to.metaClassIndex.put(PROPERTY_CLASS_NAME, m.name(), vertex);\n         });\n@@ -254,21 +275,16 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         checkNotNull(id);\n \n         Optional<Vertex> containmentVertex = get(id);\n-\n         if (!containmentVertex.isPresent()) {\n             return Optional.empty();\n         }\n \n         Iterable<Edge> edges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n-\n-        return MoreIterables.onlyElement(edges)\n-                .map(e -> SingleFeatureBean.of(\n-                        AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()),\n-                        e.getProperty(PROPERTY_FEATURE_NAME)));\n+                                                      .labels(EDGE_CONTAINER)\n+                                                      .direction(Direction.OUT)\n+                                                      .limit(1)\n+                                                      .edges();\n+        return MoreIterables.onlyElement(edges).map(e -> SingleFeatureBean.of(AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()), e.getProperty(PROPERTY_FEATURE_NAME)));\n     }\n \n     @Override\n@@ -277,14 +293,13 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         checkNotNull(container);\n \n         Vertex containmentVertex = getOrCreate(id);\n-        Vertex containerVertex = getOrCreate(container.owner());\n \n-        Iterable<Edge> containmentEdges = containmentVertex.query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+        Vertex containerVertex = getOrCreate(container.owner());\n \n+        Iterable<Edge> containmentEdges = containmentVertex.query().labels(EDGE_CONTAINER)\n+                                                                   .direction(Direction.OUT)\n+                                                                   .limit(1)\n+                                                                   .edges();\n         containmentEdges.forEach(Edge::remove);\n \n         Edge edge = containmentVertex.addEdge(EDGE_CONTAINER, containerVertex);\n@@ -296,17 +311,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         checkNotNull(id);\n \n         Optional<Vertex> containmentVertex = get(id);\n-\n         if (!containmentVertex.isPresent()) {\n             return;\n         }\n \n         Iterable<Edge> containmentEdges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n-\n+                                                                 .labels(EDGE_CONTAINER)\n+                                                                 .direction(Direction.OUT)\n+                                                                 .limit(1)\n+                                                                 .edges();\n         containmentEdges.forEach(Edge::remove);\n     }\n \n@@ -316,21 +329,16 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         checkNotNull(id);\n \n         Optional<Vertex> vertex = get(id);\n-\n         if (!vertex.isPresent()) {\n             return Optional.empty();\n         }\n \n         Iterable<Vertex> metaClassVertices = vertex.get().query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .vertices();\n-\n-        return MoreIterables.onlyElement(metaClassVertices)\n-                .map(v -> ClassBean.of(\n-                        v.getProperty(PROPERTY_CLASS_NAME),\n-                        v.getProperty(PROPERTY_CLASS_URI)));\n+                                                         .labels(EDGE_INSTANCE_OF)\n+                                                         .direction(Direction.OUT)\n+                                                         .limit(1)\n+                                                         .vertices();\n+        return MoreIterables.onlyElement(metaClassVertices).map(v -> ClassBean.of(v.getProperty(PROPERTY_CLASS_NAME), v.getProperty(PROPERTY_CLASS_URI)));\n     }\n \n     @Override\n@@ -341,46 +349,42 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         Vertex vertex = getOrCreate(id);\n \n         // Check the presence of a meta-class\n-        Iterable<Edge> instanceEdges = vertex.query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n \n+        Iterable<Edge> instanceEdges = vertex.query().labels(EDGE_INSTANCE_OF)\n+                                                     .direction(Direction.OUT)\n+                                                     .limit(1)\n+                                                     .edges();\n         if (MoreIterables.onlyElement(instanceEdges).isPresent()) {\n             return false;\n         }\n \n         // Retrieve or create the meta-class and store it in the index\n+\n         Iterable<Vertex> instanceVertices = metaClassIndex.get(PROPERTY_CLASS_NAME, metaClass.name());\n \n         Vertex metaClassVertex = MoreIterables.onlyElement(instanceVertices).orElseGet(() -> {\n-            Vertex mcv = graph.addVertex(AS_LONG_OBJECT.convert(generateClassId(metaClass)));\n-            mcv.setProperty(PROPERTY_CLASS_NAME, metaClass.name());\n-            mcv.setProperty(PROPERTY_CLASS_URI, metaClass.uri());\n-\n-            metaClassIndex.put(PROPERTY_CLASS_NAME, metaClass.name(), mcv);\n-            metaClassSet.add(metaClass);\n-\n-            return mcv;\n-        });\n+                                                                                Vertex mcv = graph.addVertex(AS_LONG_OBJECT.convert(generateClassId(metaClass)));\n+                                                                                mcv.setProperty(PROPERTY_CLASS_NAME, metaClass.name());\n+                                                                                mcv.setProperty(PROPERTY_CLASS_URI, metaClass.uri());\n+                                                                                metaClassIndex.put(PROPERTY_CLASS_NAME, metaClass.name(), mcv);\n+                                                                                metaClassSet.add(metaClass);\n+                                                                                return mcv;\n+                                                                            });\n \n         // Defines the meta-class\n         vertex.addEdge(EDGE_INSTANCE_OF, metaClassVertex);\n-\n         return true;\n     }\n \n     @Nonnull\n     @Override\n     public Iterable<Id> allInstancesOf(Set<ClassBean> metaClasses) {\n-        return metaClasses.stream()\n-                .map(mc -> metaClassIndex.get(PROPERTY_CLASS_NAME, mc.name()))\n-                .flatMap(MoreIterables::stream)\n-                .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n-                .flatMap(MoreIterables::stream)\n-                .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n-                .collect(Collectors.toSet());\n+        return metaClasses.stream().map(mc -> metaClassIndex.get(PROPERTY_CLASS_NAME, mc.name()))\n+                                   .flatMap(MoreIterables::stream)\n+                                   .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n+                                   .flatMap(MoreIterables::stream)\n+                                   .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n+                                   .collect(Collectors.toSet());\n     }\n \n     /**\n@@ -390,10 +394,12 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return the name of the meta-class\n      */\n+\n     @Nonnull\n     private String metaClassNameOf(Id id) {\n         // If the meta-class is not defined, the identifier represents the 'ROOT' element\n-        return metaClassOf(id).map(ClassBean::name).orElse(\":\");\n+        return metaClassOf(id).map(ClassBean::name)\n+                              .orElse(\":\");\n     }\n \n     /**\n@@ -403,6 +409,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return an {@link Optional} containing the {@link Vertex}, or {@link Optional#empty()} if it doesn't exist\n      */\n+\n     @Nonnull\n     protected Optional<Vertex> get(Id id) {\n         return Optional.ofNullable(verticesCache.get(id, i -> graph.getVertex(AS_LONG_OBJECT.convert(i))));\n@@ -416,11 +423,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return the {@link Vertex}\n      */\n+\n     @Nonnull\n     protected Vertex getOrCreate(Id id) {\n-        return verticesCache.get(id, i ->\n-                Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i)))\n-                        .orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n+        return verticesCache.get(id, i -> Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i))).orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n     }\n \n     /**\n@@ -431,6 +437,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @return the underlying Blueprints {@link IdGraph}\n      */\n+\n     @Nonnull\n     @SuppressWarnings(\"unchecked\")\n     public <T> T getGraph() {\n@@ -440,6 +447,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n     /**\n      * An {@link IdGraph} that automatically removes unused {@link Vertex}.\n      */\n+\n     @ParametersAreNonnullByDefault\n     private static class SmartIdGraph extends IdGraph<KeyIndexableGraph> {\n \n@@ -448,6 +456,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n          *\n          * @param baseGraph the base graph\n          */\n+\n+\n         public SmartIdGraph(KeyIndexableGraph baseGraph) {\n             super(baseGraph, true, false);\n             enforceUniqueIds(false);\n@@ -470,15 +480,17 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n          *\n          * @return an {@link SmartIdEdge}\n          */\n+\n+\n         private Edge createFrom(@Nullable Edge edge) {\n-            return Optional.ofNullable(edge)\n-                    .map(SmartIdEdge::new)\n-                    .orElse(null);\n+            return Optional.ofNullable(edge).map(SmartIdEdge::new)\n+                                            .orElse(null);\n         }\n \n         /**\n          * An {@link IdEdge} that automatically removes {@link Vertex} that are no longer referenced.\n          */\n+\n         @ParametersAreNonnullByDefault\n         private class SmartIdEdge extends IdEdge {\n \n@@ -487,6 +499,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n              *\n              * @param edge the base edge\n              */\n+\n+\n             public SmartIdEdge(Edge edge) {\n                 super(edge, SmartIdGraph.this);\n             }\n@@ -497,16 +511,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n              * If the {@link Edge} references a {@link Vertex} with no more incoming {@link Edge}, the referenced {@link\n              * Vertex} is removed as well.\n              */\n+\n             @Override\n             public void remove() {\n                 Vertex referencedVertex = getVertex(Direction.IN);\n                 super.remove();\n \n-                Iterable<Edge> edges = referencedVertex.query()\n-                        .direction(Direction.IN)\n-                        .limit(1)\n-                        .edges();\n-\n+                Iterable<Edge> edges = referencedVertex.query().direction(Direction.IN)\n+                                                               .limit(1)\n+                                                               .edges();\n                 if (MoreIterables.isEmpty(edges)) {\n                     // If the Vertex has no more incoming edges remove it from the DB\n                     referencedVertex.remove();\n@@ -514,4 +527,4 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 148
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/81/AbstractBlueprintsBackend.java\nindex bb9fb594241..74820a0bb4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/81/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/81/AbstractBlueprintsBackend.java\n@@ -56,8 +56,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+            IdConverters.withLong()::convert,o -> IdConverters.withLong().revert(Long.class.cast(o\n+\n+            )\n+            ));\n \n     /**\n      * The property key used to define the index of an edge.\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}