{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3909",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3909/RelationshipChangesForNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3909/RelationshipChangesForNode.java\nindex 717a1396c70..fdea1ec782e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3909/RelationshipChangesForNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3909/RelationshipChangesForNode.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.state;\n \n import java.util.ArrayList;\n@@ -53,522 +54,522 @@ import static org.neo4j.collection.primitive.PrimitiveLongCollections.toPrimitiv\n  */\n public class RelationshipChangesForNode\n {\n-    /**\n-     * Allows this data structure to work both for tracking removals and additions.\n-     */\n-    public enum DiffStrategy\n-    {\n-        REMOVE\n+  /**\n+   * Allows this data structure to work both for tracking removals and additions.\n+   */\n+  public enum DiffStrategy\n+  {\n+    REMOVE\n+        {\n+          @Override\n+          int augmentDegree(int degree, int diff)\n+          {\n+            return degree - diff;\n+          }\n+\n+          @Override\n+          RelationshipIterator augmentPrimitiveIterator(RelationshipIterator original,\n+                                                        Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome)\n+          {\n+            throw new UnsupportedOperationException();\n+          }\n+\n+          @Override\n+          PrimitiveLongIterator getPrimitiveIterator(Iterator<Set<Long>> diff)\n+          {\n+            throw new UnsupportedOperationException();\n+          }\n+        },\n+    ADD\n+        {\n+          @Override\n+          int augmentDegree(int degree, int diff)\n+          {\n+            return degree + diff;\n+          }\n+\n+          @Override\n+          RelationshipIterator augmentPrimitiveIterator(final RelationshipIterator original,\n+                                                        final Iterator<Set<Long>> diff, final RelationshipVisitor.Home txStateRelationshipHome)\n+          {\n+            if (!diff.hasNext())\n+            {\n+              return original;\n+            }\n+\n+            return new RelationshipIterator()\n+            {\n+              private Iterator<Long> currentSetOfAddedRels;\n+\n+              @Override\n+              public boolean hasNext()\n+              {\n+                return original.hasNext() || (currentSetOfAddedRels().hasNext());\n+              }\n+\n+              private Iterator<Long> currentSetOfAddedRels()\n+              {\n+                while (diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels\n+                    .hasNext()))\n                 {\n-                    @Override\n-                    int augmentDegree( int degree, int diff )\n-                    {\n-                        return degree - diff;\n-                    }\n-\n-                    @Override\n-                    RelationshipIterator augmentPrimitiveIterator( RelationshipIterator original,\n-                            Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome )\n-                    {\n-                        throw new UnsupportedOperationException();\n-                    }\n-\n-                    @Override\n-                    PrimitiveLongIterator getPrimitiveIterator( Iterator<Set<Long>> diff )\n-                    {\n-                        throw new UnsupportedOperationException();\n-                    }\n-                },\n-        ADD\n+                  currentSetOfAddedRels = diff.next().iterator();\n+                }\n+                return currentSetOfAddedRels;\n+              }\n+\n+              @Override\n+              public long next()\n+              {\n+                return original.hasNext() ? original.next() : currentSetOfAddedRels().next();\n+              }\n+\n+              @Override\n+              public <EXCEPTION extends Exception> boolean relationshipVisit(long relationshipId,\n+                                                                             RelationshipVisitor<EXCEPTION> visitor) throws EXCEPTION\n+              {\n+                RelationshipVisitor.Home home = currentSetOfAddedRels != null ?\n+                    txStateRelationshipHome : original;\n+                return home.relationshipVisit(relationshipId, visitor);\n+              }\n+            };\n+          }\n+\n+          @Override\n+          PrimitiveLongIterator getPrimitiveIterator(final Iterator<Set<Long>> diff)\n+          {\n+            if (!diff.hasNext())\n+            {\n+              return PrimitiveLongCollections.emptyIterator();\n+            }\n+\n+            return new PrimitiveLongCollections.PrimitiveLongBaseIterator()\n+            {\n+              private Iterator<Long> currentSetOfAddedRels;\n+\n+              @Override\n+              protected boolean fetchNext()\n+              {\n+                Iterator<Long> iterator = currentSetOfAddedRels();\n+                return iterator.hasNext() && next(iterator.next());\n+              }\n+\n+              private Iterator<Long> currentSetOfAddedRels()\n+              {\n+                while (diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels\n+                    .hasNext()))\n                 {\n-                    @Override\n-                    int augmentDegree( int degree, int diff )\n-                    {\n-                        return degree + diff;\n-                    }\n-\n-                    @Override\n-                    RelationshipIterator augmentPrimitiveIterator( final RelationshipIterator original,\n-                            final Iterator<Set<Long>> diff, final RelationshipVisitor.Home txStateRelationshipHome )\n-                    {\n-                        if ( !diff.hasNext() )\n-                        {\n-                            return original;\n-                        }\n-\n-                        return new RelationshipIterator()\n-                        {\n-                            private Iterator<Long> currentSetOfAddedRels;\n-\n-                            @Override\n-                            public boolean hasNext()\n-                            {\n-                                return original.hasNext() || (currentSetOfAddedRels().hasNext());\n-                            }\n-\n-                            private Iterator<Long> currentSetOfAddedRels()\n-                            {\n-                                while ( diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels\n-                                        .hasNext()) )\n-                                {\n-                                    currentSetOfAddedRels = diff.next().iterator();\n-                                }\n-                                return currentSetOfAddedRels;\n-                            }\n-\n-                            @Override\n-                            public long next()\n-                            {\n-                                return original.hasNext() ? original.next() : currentSetOfAddedRels().next();\n-                            }\n-\n-                            @Override\n-                            public <EXCEPTION extends Exception> boolean relationshipVisit( long relationshipId,\n-                                    RelationshipVisitor<EXCEPTION> visitor ) throws EXCEPTION\n-                            {\n-                                RelationshipVisitor.Home home = currentSetOfAddedRels != null ?\n-                                        txStateRelationshipHome : original;\n-                                return home.relationshipVisit( relationshipId, visitor );\n-                            }\n-                        };\n-                    }\n-\n-                    @Override\n-                    PrimitiveLongIterator getPrimitiveIterator( final Iterator<Set<Long>> diff )\n-                    {\n-                        if ( !diff.hasNext() )\n-                        {\n-                            return PrimitiveLongCollections.emptyIterator();\n-                        }\n-\n-                        return new PrimitiveLongCollections.PrimitiveLongBaseIterator()\n-                        {\n-                            private Iterator<Long> currentSetOfAddedRels;\n-\n-                            @Override\n-                            protected boolean fetchNext()\n-                            {\n-                                Iterator<Long> iterator = currentSetOfAddedRels();\n-                                return iterator.hasNext() && next( iterator.next() );\n-                            }\n-\n-                            private Iterator<Long> currentSetOfAddedRels()\n-                            {\n-                                while ( diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels\n-                                        .hasNext()) )\n-                                {\n-                                    currentSetOfAddedRels = diff.next().iterator();\n-                                }\n-                                return currentSetOfAddedRels;\n-                            }\n-                        };\n-                    }\n-                };\n-\n-        abstract int augmentDegree( int degree, int diff );\n-\n-        abstract RelationshipIterator augmentPrimitiveIterator( RelationshipIterator original,\n-                Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome );\n-\n-        abstract PrimitiveLongIterator getPrimitiveIterator( Iterator<Set<Long>> diff );\n-    }\n+                  currentSetOfAddedRels = diff.next().iterator();\n+                }\n+                return currentSetOfAddedRels;\n+              }\n+            };\n+          }\n+        };\n \n-    private final DiffStrategy diffStrategy;\n-    private final Home relationshipHome;\n+    abstract int augmentDegree(int degree, int diff);\n \n-    private Map<Integer /* Type */, Set<Long /* Id */>> outgoing;\n-    private Map<Integer /* Type */, Set<Long /* Id */>> incoming;\n-    private Map<Integer /* Type */, Set<Long /* Id */>> loops;\n+    abstract RelationshipIterator augmentPrimitiveIterator(RelationshipIterator original,\n+                                                           Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome);\n \n-    private int totalOutgoing;\n-    private int totalIncoming;\n-    private int totalLoops;\n+    abstract PrimitiveLongIterator getPrimitiveIterator(Iterator<Set<Long>> diff);\n+  }\n \n-    public RelationshipChangesForNode( DiffStrategy diffStrategy, RelationshipVisitor.Home relationshipHome )\n-    {\n-        this.diffStrategy = diffStrategy;\n-        this.relationshipHome = relationshipHome;\n-    }\n+  private final DiffStrategy diffStrategy;\n+  private final Home relationshipHome;\n \n-    public void addRelationship( long relId, int typeId, Direction direction )\n-    {\n-        Map<Integer, Set<Long>> relTypeToRelsMap = getTypeToRelMapForDirection( direction );\n-        Set<Long> rels =\n-                relTypeToRelsMap.computeIfAbsent( typeId, k -> Collections.newSetFromMap( new VersionedHashMap<>() ) );\n+  private Map<Integer /* Type */, Set<Long /* Id */>> outgoing;\n+  private Map<Integer /* Type */, Set<Long /* Id */>> incoming;\n+  private Map<Integer /* Type */, Set<Long /* Id */>> loops;\n \n-        rels.add( relId );\n+  private int totalOutgoing;\n+  private int totalIncoming;\n+  private int totalLoops;\n \n-        switch ( direction )\n-        {\n-            case INCOMING:\n-                totalIncoming++;\n-                break;\n-            case OUTGOING:\n-                totalOutgoing++;\n-                break;\n-            case BOTH:\n-                totalLoops++;\n-                break;\n-            default:\n-                throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n-    }\n+  public RelationshipChangesForNode(DiffStrategy diffStrategy, RelationshipVisitor.Home relationshipHome)\n+  {\n+    this.diffStrategy = diffStrategy;\n+    this.relationshipHome = relationshipHome;\n+  }\n \n-    public boolean removeRelationship( long relId, int typeId, Direction direction )\n-    {\n-        Map<Integer, Set<Long>> relTypeToRelsMap = getTypeToRelMapForDirection( direction );\n-        Set<Long> rels = relTypeToRelsMap.get( typeId );\n-        if ( rels != null )\n-        {\n-            if ( rels.remove( relId ) )\n-            {\n-                if ( rels.isEmpty() )\n-                {\n-                    relTypeToRelsMap.remove( typeId );\n-                }\n+  public void addRelationship(long relId, int typeId, Direction direction)\n+  {\n+    Map<Integer, Set<Long>> relTypeToRelsMap = getTypeToRelMapForDirection(direction);\n+    Set<Long> rels =\n+        relTypeToRelsMap.computeIfAbsent(typeId, k -> Collections.newSetFromMap(new VersionedHashMap<>()));\n \n-                switch ( direction )\n-                {\n-                    case INCOMING:\n-                        totalIncoming--;\n-                        break;\n-                    case OUTGOING:\n-                        totalOutgoing--;\n-                        break;\n-                    case BOTH:\n-                        totalLoops--;\n-                        break;\n-                    default:\n-                        throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-                }\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    public RelationshipIterator augmentRelationships( Direction direction, RelationshipIterator rels )\n-    {\n-        return augmentRelationships( direction, rels, ALL_TYPES );\n-    }\n+    rels.add(relId);\n \n-    public RelationshipIterator augmentRelationships( Direction direction, int[] types, RelationshipIterator rels )\n+    switch (direction)\n     {\n-        return augmentRelationships( direction, rels, typeFilter( types ) );\n+      case INCOMING:\n+        totalIncoming++;\n+        break;\n+      case OUTGOING:\n+        totalOutgoing++;\n+        break;\n+      case BOTH:\n+        totalLoops++;\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n     }\n+  }\n \n-    public RelationshipIterator augmentRelationships( Direction direction, RelationshipIterator rels,\n-            Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> typeFilter )\n+  public boolean removeRelationship(long relId, int typeId, Direction direction)\n+  {\n+    Map<Integer, Set<Long>> relTypeToRelsMap = getTypeToRelMapForDirection(direction);\n+    Set<Long> rels = relTypeToRelsMap.get(typeId);\n+    if (rels != null)\n     {\n-        switch ( direction )\n+      if (rels.remove(relId))\n+      {\n+        if (rels.isEmpty())\n         {\n-            case INCOMING:\n-                if ( incoming != null && !incoming.isEmpty() )\n-                {\n-                    rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( incoming ),\n-                            relationshipHome );\n-                }\n-                break;\n-            case OUTGOING:\n-                if ( outgoing != null && !outgoing.isEmpty() )\n-                {\n-                    rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( outgoing ),\n-                            relationshipHome );\n-                }\n-                break;\n-            case BOTH:\n-                if ( outgoing != null && !outgoing.isEmpty() )\n-                {\n-                    rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( outgoing ),\n-                            relationshipHome );\n-                }\n-                if ( incoming != null && !incoming.isEmpty() )\n-                {\n-                    rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( incoming ),\n-                            relationshipHome );\n-                }\n-                break;\n-\n-            default:\n-                throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n+          relTypeToRelsMap.remove(typeId);\n         }\n \n-        // Loops are always included\n-        if ( loops != null && !loops.isEmpty() )\n+        switch (direction)\n         {\n-            rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( loops ), relationshipHome );\n+          case INCOMING:\n+            totalIncoming--;\n+            break;\n+          case OUTGOING:\n+            totalOutgoing--;\n+            break;\n+          case BOTH:\n+            totalLoops--;\n+            break;\n+          default:\n+            throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n         }\n-\n-        return rels;\n+        return true;\n+      }\n     }\n-\n-    public int augmentDegree( Direction direction, int degree )\n+    return false;\n+  }\n+\n+  public RelationshipIterator augmentRelationships(Direction direction, RelationshipIterator rels)\n+  {\n+    return augmentRelationships(direction, rels, ALL_TYPES);\n+  }\n+\n+  public RelationshipIterator augmentRelationships(Direction direction, int[] types, RelationshipIterator rels)\n+  {\n+    return augmentRelationships(direction, rels, typeFilter(types));\n+  }\n+\n+  public RelationshipIterator augmentRelationships(Direction direction, RelationshipIterator rels,\n+                                                   Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> typeFilter)\n+  {\n+    switch (direction)\n     {\n-        switch ( direction )\n+      case INCOMING:\n+        if (incoming != null && !incoming.isEmpty())\n         {\n-            case INCOMING:\n-                return diffStrategy.augmentDegree( degree, totalIncoming + totalLoops );\n-            case OUTGOING:\n-                return diffStrategy.augmentDegree( degree, totalOutgoing + totalLoops );\n-            default:\n-                return diffStrategy.augmentDegree( degree, totalIncoming + totalOutgoing + totalLoops );\n+          rels = diffStrategy.augmentPrimitiveIterator(rels, typeFilter.apply(incoming),\n+              relationshipHome);\n         }\n-    }\n-\n-    public int augmentDegree( Direction direction, int degree, int typeId )\n-    {\n-        switch ( direction )\n+        break;\n+      case OUTGOING:\n+        if (outgoing != null && !outgoing.isEmpty())\n         {\n-            case INCOMING:\n-                if ( incoming != null && incoming.containsKey( typeId ) )\n-                {\n-                    degree = diffStrategy.augmentDegree( degree, incoming.get( typeId ).size() );\n-                }\n-                break;\n-            case OUTGOING:\n-                if ( outgoing != null && outgoing.containsKey( typeId ) )\n-                {\n-                    degree = diffStrategy.augmentDegree( degree, outgoing.get( typeId ).size() );\n-                }\n-                break;\n-            case BOTH:\n-                if ( outgoing != null && outgoing.containsKey( typeId ) )\n-                {\n-                    degree = diffStrategy.augmentDegree( degree, outgoing.get( typeId ).size() );\n-                }\n-                if ( incoming != null && incoming.containsKey( typeId ) )\n-                {\n-                    degree = diffStrategy.augmentDegree( degree, incoming.get( typeId ).size() );\n-                }\n-                break;\n-\n-            default:\n-                throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n+          rels = diffStrategy.augmentPrimitiveIterator(rels, typeFilter.apply(outgoing),\n+              relationshipHome);\n         }\n-\n-        // Loops are always included\n-        if ( loops != null && loops.containsKey( typeId ) )\n+        break;\n+      case BOTH:\n+        if (outgoing != null && !outgoing.isEmpty())\n+        {\n+          rels = diffStrategy.augmentPrimitiveIterator(rels, typeFilter.apply(outgoing),\n+              relationshipHome);\n+        }\n+        if (incoming != null && !incoming.isEmpty())\n         {\n-            degree = diffStrategy.augmentDegree( degree, loops.get( typeId ).size() );\n+          rels = diffStrategy.augmentPrimitiveIterator(rels, typeFilter.apply(incoming),\n+              relationshipHome);\n         }\n-        return degree;\n+        break;\n+\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n     }\n \n-    public int augmentDegree( RelationshipDirection direction, int degree, int typeId )\n+    // Loops are always included\n+    if (loops != null && !loops.isEmpty())\n     {\n-        switch ( direction )\n-        {\n-        case INCOMING:\n-            if ( incoming != null && incoming.containsKey( typeId ) )\n-            {\n-                return diffStrategy.augmentDegree( degree, incoming.get( typeId ).size() );\n-            }\n-            break;\n-        case OUTGOING:\n-            if ( outgoing != null && outgoing.containsKey( typeId ) )\n-            {\n-                return diffStrategy.augmentDegree( degree, outgoing.get( typeId ).size() );\n-            }\n-            break;\n-        case LOOP:\n-            if ( loops != null && loops.containsKey( typeId ) )\n-            {\n-                return diffStrategy.augmentDegree( degree, loops.get( typeId ).size() );\n-            }\n-            break;\n+      rels = diffStrategy.augmentPrimitiveIterator(rels, typeFilter.apply(loops), relationshipHome);\n+    }\n \n-        default:\n-            throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n+    return rels;\n+  }\n \n-        return degree;\n+  public int augmentDegree(Direction direction, int degree)\n+  {\n+    switch (direction)\n+    {\n+      case INCOMING:\n+        return diffStrategy.augmentDegree(degree, totalIncoming + totalLoops);\n+      case OUTGOING:\n+        return diffStrategy.augmentDegree(degree, totalOutgoing + totalLoops);\n+      default:\n+        return diffStrategy.augmentDegree(degree, totalIncoming + totalOutgoing + totalLoops);\n     }\n+  }\n \n-    public PrimitiveIntSet relationshipTypes()\n+  public int augmentDegree(Direction direction, int degree, int typeId)\n+  {\n+    switch (direction)\n     {\n-        PrimitiveIntSet types = Primitive.intSet();\n-        if ( outgoing != null && !outgoing.isEmpty() )\n+      case INCOMING:\n+        if (incoming != null && incoming.containsKey(typeId))\n+        {\n+          degree = diffStrategy.augmentDegree(degree, incoming.get(typeId).size());\n+        }\n+        break;\n+      case OUTGOING:\n+        if (outgoing != null && outgoing.containsKey(typeId))\n         {\n-            outgoing.keySet().forEach( types::add );\n+          degree = diffStrategy.augmentDegree(degree, outgoing.get(typeId).size());\n         }\n-        if ( incoming != null && !incoming.isEmpty() )\n+        break;\n+      case BOTH:\n+        if (outgoing != null && outgoing.containsKey(typeId))\n         {\n-            incoming.keySet().forEach( types::add );\n+          degree = diffStrategy.augmentDegree(degree, outgoing.get(typeId).size());\n         }\n-        if ( loops != null && !loops.isEmpty() )\n+        if (incoming != null && incoming.containsKey(typeId))\n         {\n-            loops.keySet().forEach( types::add );\n+          degree = diffStrategy.augmentDegree(degree, incoming.get(typeId).size());\n         }\n-        return types;\n+        break;\n+\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n     }\n \n-    public void clear()\n+    // Loops are always included\n+    if (loops != null && loops.containsKey(typeId))\n     {\n-        if ( outgoing != null )\n+      degree = diffStrategy.augmentDegree(degree, loops.get(typeId).size());\n+    }\n+    return degree;\n+  }\n+\n+  public int augmentDegree(RelationshipDirection direction, int degree, int typeId)\n+  {\n+    switch (direction)\n+    {\n+      case INCOMING:\n+        if (incoming != null && incoming.containsKey(typeId))\n         {\n-            outgoing.clear();\n+          return diffStrategy.augmentDegree(degree, incoming.get(typeId).size());\n         }\n-        if ( incoming != null )\n+        break;\n+      case OUTGOING:\n+        if (outgoing != null && outgoing.containsKey(typeId))\n         {\n-            incoming.clear();\n+          return diffStrategy.augmentDegree(degree, outgoing.get(typeId).size());\n         }\n-        if ( loops != null )\n+        break;\n+      case LOOP:\n+        if (loops != null && loops.containsKey(typeId))\n         {\n-            loops.clear();\n+          return diffStrategy.augmentDegree(degree, loops.get(typeId).size());\n         }\n-    }\n+        break;\n \n-    private Map<Integer /* Type */, Set<Long /* Id */>> outgoing()\n-    {\n-        if ( outgoing == null )\n-        {\n-            outgoing = new VersionedHashMap<>();\n-        }\n-        return outgoing;\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n     }\n \n-    private Map<Integer /* Type */, Set<Long /* Id */>> incoming()\n+    return degree;\n+  }\n+\n+  public PrimitiveIntSet relationshipTypes()\n+  {\n+    PrimitiveIntSet types = Primitive.intSet();\n+    if (outgoing != null && !outgoing.isEmpty())\n     {\n-        if ( incoming == null )\n-        {\n-            incoming = new VersionedHashMap<>();\n-        }\n-        return incoming;\n+      outgoing.keySet().forEach(types::add);\n     }\n-\n-    private Map<Integer /* Type */, Set<Long /* Id */>> loops()\n+    if (incoming != null && !incoming.isEmpty())\n     {\n-        if ( loops == null )\n-        {\n-            loops = new VersionedHashMap<>();\n-        }\n-        return loops;\n+      incoming.keySet().forEach(types::add);\n     }\n-\n-    private Map<Integer, Set<Long>> getTypeToRelMapForDirection( Direction direction )\n+    if (loops != null && !loops.isEmpty())\n     {\n-        Map<Integer /* Type */, Set<Long /* Id */>> relTypeToRelsMap = null;\n-        switch ( direction )\n-        {\n-            case INCOMING:\n-                relTypeToRelsMap = incoming();\n-                break;\n-            case OUTGOING:\n-                relTypeToRelsMap = outgoing();\n-                break;\n-            case BOTH:\n-                relTypeToRelsMap = loops();\n-                break;\n-            default:\n-                throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n-        return relTypeToRelsMap;\n+      loops.keySet().forEach(types::add);\n     }\n+    return types;\n+  }\n \n-    private Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> typeFilter( int[] types )\n+  public void clear()\n+  {\n+    if (outgoing != null)\n     {\n-        return relationshipsByType -> new PrefetchingIterator<Set<Long>>()\n-        {\n-            private final PrimitiveIntIterator iterTypes = PrimitiveIntCollections.iterator( types );\n-\n-            @Override\n-            protected Set<Long> fetchNextOrNull()\n-            {\n-                while ( iterTypes.hasNext() )\n-                {\n-                    Set<Long> relsByType = relationshipsByType.get( iterTypes.next() );\n-                    if ( relsByType != null )\n-                    {\n-                        return relsByType;\n-                    }\n-                }\n-                return null;\n-            }\n-        };\n+      outgoing.clear();\n     }\n-\n-    private static final Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> ALL_TYPES =\n-            integerSetMap -> integerSetMap.values().iterator();\n-\n-    private Iterator<Set<Long>> diffs( Function<Map<Integer,Set<Long>>,Iterator<Set<Long>>> filter,\n-            Map<Integer,Set<Long>>... maps )\n+    if (incoming != null)\n     {\n-        Collection<Set<Long>> result = new ArrayList<>();\n-        for ( Map<Integer,Set<Long>> map : maps )\n-        {\n-            if ( map != null )\n-            {\n-                Iterator<Set<Long>> diffSet = filter.apply( map );\n-                while ( diffSet.hasNext() )\n-                {\n-                    result.add( diffSet.next() );\n-                }\n-            }\n-        }\n-        return result.iterator();\n+      incoming.clear();\n     }\n-\n-    public PrimitiveLongIterator getRelationships( Direction direction )\n+    if (loops != null)\n     {\n-        return getRelationships( direction, ALL_TYPES );\n+      loops.clear();\n     }\n+  }\n \n-    public PrimitiveLongIterator getRelationships( Direction direction, int[] types )\n+  private Map<Integer /* Type */, Set<Long /* Id */>> outgoing()\n+  {\n+    if (outgoing == null)\n     {\n-        return getRelationships( direction, typeFilter( types ) );\n+      outgoing = new VersionedHashMap<>();\n     }\n+    return outgoing;\n+  }\n \n-    public PrimitiveLongIterator getRelationships()\n+  private Map<Integer /* Type */, Set<Long /* Id */>> incoming()\n+  {\n+    if (incoming == null)\n     {\n-        return PrimitiveLongCollections.concat(\n-                primitiveIds( incoming ),\n-                primitiveIds( outgoing ),\n-                primitiveIds( loops ) );\n+      incoming = new VersionedHashMap<>();\n     }\n+    return incoming;\n+  }\n \n-    public PrimitiveLongIterator getRelationships( RelationshipDirection direction, int type )\n+  private Map<Integer /* Type */, Set<Long /* Id */>> loops()\n+  {\n+    if (loops == null)\n     {\n-        switch ( direction )\n-        {\n-        case INCOMING:\n-            return incoming != null ? primitiveIdsByType( incoming, type ) : emptyIterator();\n-        case OUTGOING:\n-            return outgoing != null ? primitiveIdsByType( outgoing, type ) : emptyIterator();\n-        case LOOP:\n-            return loops != null ? primitiveIdsByType( loops, type ) : emptyIterator();\n-        default:\n-            throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n+      loops = new VersionedHashMap<>();\n     }\n+    return loops;\n+  }\n \n-    private PrimitiveLongIterator primitiveIds( Map<Integer, Set<Long>> map )\n+  private Map<Integer, Set<Long>> getTypeToRelMapForDirection(Direction direction)\n+  {\n+    Map<Integer /* Type */, Set<Long /* Id */>> relTypeToRelsMap = null;\n+    switch (direction)\n     {\n-        return map == null ? emptyIterator() :\n-               toPrimitiveIterator( Iterators.flatMap( Set::iterator, map.values().iterator() ) );\n+      case INCOMING:\n+        relTypeToRelsMap = incoming();\n+        break;\n+      case OUTGOING:\n+        relTypeToRelsMap = outgoing();\n+        break;\n+      case BOTH:\n+        relTypeToRelsMap = loops();\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n     }\n+    return relTypeToRelsMap;\n+  }\n \n-    private PrimitiveLongIterator primitiveIdsByType( Map<Integer, Set<Long>> map, int type )\n+  private Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> typeFilter(int[] types)\n+  {\n+    return relationshipsByType -> new PrefetchingIterator<Set<Long>>()\n     {\n-        Set<Long> relationships = map.get( type );\n-        return relationships == null ? emptyIterator() : toPrimitiveIterator( relationships.iterator() );\n-    }\n+      private final PrimitiveIntIterator iterTypes = PrimitiveIntCollections.iterator(types);\n \n-    private PrimitiveLongIterator getRelationships( Direction direction,\n-            Function<Map<Integer,Set<Long>>,Iterator<Set<Long>>> types )\n+      @Override\n+      protected Set<Long> fetchNextOrNull()\n+      {\n+        while (iterTypes.hasNext())\n+        {\n+          Set<Long> relsByType = relationshipsByType.get(iterTypes.next());\n+          if (relsByType != null)\n+          {\n+            return relsByType;\n+          }\n+        }\n+        return null;\n+      }\n+    };\n+  }\n+\n+  private static final Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> ALL_TYPES =\n+      integerSetMap -> integerSetMap.values().iterator();\n+\n+  private Iterator<Set<Long>> diffs(Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> filter,\n+                                    Map<Integer, Set<Long>>... maps)\n+  {\n+    Collection<Set<Long>> result = new ArrayList<>();\n+    for (Map<Integer, Set<Long>> map : maps)\n     {\n-        switch ( direction )\n+      if (map != null)\n+      {\n+        Iterator<Set<Long>> diffSet = filter.apply(map);\n+        while (diffSet.hasNext())\n         {\n-        case INCOMING:\n-            return incoming != null || loops != null ? diffStrategy.getPrimitiveIterator(\n-                    diffs( types, incoming, loops ) ) : emptyIterator();\n-        case OUTGOING:\n-            return outgoing != null || loops != null ? diffStrategy.getPrimitiveIterator(\n-                    diffs( types, outgoing, loops ) ) : emptyIterator();\n-        case BOTH:\n-            return outgoing != null || incoming != null || loops != null ? diffStrategy.getPrimitiveIterator(\n-                    diffs( types, outgoing, incoming, loops ) ) : emptyIterator();\n-        default:\n-            throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n+          result.add(diffSet.next());\n         }\n+      }\n+    }\n+    return result.iterator();\n+  }\n+\n+  public PrimitiveLongIterator getRelationships(Direction direction)\n+  {\n+    return getRelationships(direction, ALL_TYPES);\n+  }\n+\n+  public PrimitiveLongIterator getRelationships(Direction direction, int[] types)\n+  {\n+    return getRelationships(direction, typeFilter(types));\n+  }\n+\n+  public PrimitiveLongIterator getRelationships()\n+  {\n+    return PrimitiveLongCollections.concat(\n+        primitiveIds(incoming),\n+        primitiveIds(outgoing),\n+        primitiveIds(loops));\n+  }\n+\n+  public PrimitiveLongIterator getRelationships(RelationshipDirection direction, int type)\n+  {\n+    switch (direction)\n+    {\n+      case INCOMING:\n+        return incoming != null ? primitiveIdsByType(incoming, type) : emptyIterator();\n+      case OUTGOING:\n+        return outgoing != null ? primitiveIdsByType(outgoing, type) : emptyIterator();\n+      case LOOP:\n+        return loops != null ? primitiveIdsByType(loops, type) : emptyIterator();\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n+    }\n+  }\n+\n+  private PrimitiveLongIterator primitiveIds(Map<Integer, Set<Long>> map)\n+  {\n+    return map == null ? emptyIterator() :\n+        toPrimitiveIterator(Iterators.flatMap(Set::iterator, map.values().iterator()));\n+  }\n+\n+  private PrimitiveLongIterator primitiveIdsByType(Map<Integer, Set<Long>> map, int type)\n+  {\n+    Set<Long> relationships = map.get(type);\n+    return relationships == null ? emptyIterator() : toPrimitiveIterator(relationships.iterator());\n+  }\n+\n+  private PrimitiveLongIterator getRelationships(Direction direction,\n+                                                 Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> types)\n+  {\n+    switch (direction)\n+    {\n+      case INCOMING:\n+        return incoming != null || loops != null ? diffStrategy.getPrimitiveIterator(\n+            diffs(types, incoming, loops)) : emptyIterator();\n+      case OUTGOING:\n+        return outgoing != null || loops != null ? diffStrategy.getPrimitiveIterator(\n+            diffs(types, outgoing, loops)) : emptyIterator();\n+      case BOTH:\n+        return outgoing != null || incoming != null || loops != null ? diffStrategy.getPrimitiveIterator(\n+            diffs(types, outgoing, incoming, loops)) : emptyIterator();\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + direction);\n     }\n+  }\n }\n",
            "diff_size": 731
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "557",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3909/RelationshipChangesForNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3909/RelationshipChangesForNode.java\nindex 717a1396c70..4d2f930b287 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3909/RelationshipChangesForNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3909/RelationshipChangesForNode.java\n@@ -59,7 +59,7 @@ public class RelationshipChangesForNode\n     public enum DiffStrategy\n     {\n         REMOVE\n-                {\n+{\n                     @Override\n                     int augmentDegree( int degree, int diff )\n                     {\n@@ -67,8 +67,7 @@ public class RelationshipChangesForNode\n                     }\n \n                     @Override\n-                    RelationshipIterator augmentPrimitiveIterator( RelationshipIterator original,\n-                            Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome )\n+                    RelationshipIterator augmentPrimitiveIterator( RelationshipIterator original, Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome )\n                     {\n                         throw new UnsupportedOperationException();\n                     }\n@@ -78,9 +77,8 @@ public class RelationshipChangesForNode\n                     {\n                         throw new UnsupportedOperationException();\n                     }\n-                },\n-        ADD\n-                {\n+                }, ADD\n+{\n                     @Override\n                     int augmentDegree( int degree, int diff )\n                     {\n@@ -88,8 +86,7 @@ public class RelationshipChangesForNode\n                     }\n \n                     @Override\n-                    RelationshipIterator augmentPrimitiveIterator( final RelationshipIterator original,\n-                            final Iterator<Set<Long>> diff, final RelationshipVisitor.Home txStateRelationshipHome )\n+                    RelationshipIterator augmentPrimitiveIterator( final RelationshipIterator original, final Iterator<Set<Long>> diff, final RelationshipVisitor.Home txStateRelationshipHome )\n                     {\n                         if ( !diff.hasNext() )\n                         {\n@@ -103,17 +100,17 @@ public class RelationshipChangesForNode\n                             @Override\n                             public boolean hasNext()\n                             {\n-                                return original.hasNext() || (currentSetOfAddedRels().hasNext());\n+                                return original.hasNext() || (currentSetOfAddedRels().hasNext() );\n                             }\n \n                             private Iterator<Long> currentSetOfAddedRels()\n                             {\n-                                while ( diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels\n-                                        .hasNext()) )\n+                                while ( diff.hasNext() && ( currentSetOfAddedRels == null || !currentSetOfAddedRels.hasNext()) )\n                                 {\n                                     currentSetOfAddedRels = diff.next().iterator();\n                                 }\n-                                return currentSetOfAddedRels;\n+\n+return currentSetOfAddedRels;\n                             }\n \n                             @Override\n@@ -123,12 +120,10 @@ public class RelationshipChangesForNode\n                             }\n \n                             @Override\n-                            public <EXCEPTION extends Exception> boolean relationshipVisit( long relationshipId,\n-                                    RelationshipVisitor<EXCEPTION> visitor ) throws EXCEPTION\n-                            {\n-                                RelationshipVisitor.Home home = currentSetOfAddedRels != null ?\n-                                        txStateRelationshipHome : original;\n-                                return home.relationshipVisit( relationshipId, visitor );\n+                            public <EXCEPTION extends Exception> boolean relationshipVisit( long relationshipId, RelationshipVisitor<EXCEPTION> visitor ) throws EXCEPTION\n+{\n+                                RelationshipVisitor.Home home = currentSetOfAddedRels != null ? txStateRelationshipHome : original;\n+return home.relationshipVisit( relationshipId, visitor );\n                             }\n                         };\n                     }\n@@ -154,31 +149,29 @@ public class RelationshipChangesForNode\n \n                             private Iterator<Long> currentSetOfAddedRels()\n                             {\n-                                while ( diff.hasNext() && (currentSetOfAddedRels == null || !currentSetOfAddedRels\n-                                        .hasNext()) )\n+                                while ( diff.hasNext() && ( currentSetOfAddedRels == null || !currentSetOfAddedRels.hasNext()) )\n                                 {\n                                     currentSetOfAddedRels = diff.next().iterator();\n                                 }\n-                                return currentSetOfAddedRels;\n+\n+return currentSetOfAddedRels;\n                             }\n                         };\n                     }\n                 };\n \n-        abstract int augmentDegree( int degree, int diff );\n-\n-        abstract RelationshipIterator augmentPrimitiveIterator( RelationshipIterator original,\n-                Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome );\n+abstract int augmentDegree( int degree, int diff );\n \n-        abstract PrimitiveLongIterator getPrimitiveIterator( Iterator<Set<Long>> diff );\n+        abstract RelationshipIterator augmentPrimitiveIterator( RelationshipIterator original, Iterator<Set<Long>> diff, RelationshipVisitor.Home txStateRelationshipHome );\n+    abstract PrimitiveLongIterator getPrimitiveIterator( Iterator<Set<Long>> diff );\n     }\n \n     private final DiffStrategy diffStrategy;\n     private final Home relationshipHome;\n \n-    private Map<Integer /* Type */, Set<Long /* Id */>> outgoing;\n-    private Map<Integer /* Type */, Set<Long /* Id */>> incoming;\n-    private Map<Integer /* Type */, Set<Long /* Id */>> loops;\n+    private Map<Integer/* Type */, Set<Long/* Id */>> outgoing;\n+    private Map<Integer/* Type */, Set<Long/* Id */>> incoming;\n+    private Map<Integer/* Type */, Set<Long/* Id */>> loops;\n \n     private int totalOutgoing;\n     private int totalIncoming;\n@@ -193,14 +186,11 @@ public class RelationshipChangesForNode\n     public void addRelationship( long relId, int typeId, Direction direction )\n     {\n         Map<Integer, Set<Long>> relTypeToRelsMap = getTypeToRelMapForDirection( direction );\n-        Set<Long> rels =\n-                relTypeToRelsMap.computeIfAbsent( typeId, k -> Collections.newSetFromMap( new VersionedHashMap<>() ) );\n-\n-        rels.add( relId );\n-\n-        switch ( direction )\n+        Set<Long> rels = relTypeToRelsMap.computeIfAbsent( typeId, k -> Collections.newSetFromMap( new VersionedHashMap<>() ) );\n+rels.add( relId );\n+switch ( direction )\n         {\n-            case INCOMING:\n+case INCOMING:\n                 totalIncoming++;\n                 break;\n             case OUTGOING:\n@@ -211,7 +201,7 @@ public class RelationshipChangesForNode\n                 break;\n             default:\n                 throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n+    }\n     }\n \n     public boolean removeRelationship( long relId, int typeId, Direction direction )\n@@ -229,7 +219,7 @@ public class RelationshipChangesForNode\n \n                 switch ( direction )\n                 {\n-                    case INCOMING:\n+case INCOMING:\n                         totalIncoming--;\n                         break;\n                     case OUTGOING:\n@@ -240,7 +230,7 @@ public class RelationshipChangesForNode\n                         break;\n                     default:\n                         throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-                }\n+    }\n                 return true;\n             }\n         }\n@@ -257,12 +247,11 @@ public class RelationshipChangesForNode\n         return augmentRelationships( direction, rels, typeFilter( types ) );\n     }\n \n-    public RelationshipIterator augmentRelationships( Direction direction, RelationshipIterator rels,\n-            Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> typeFilter )\n+    public RelationshipIterator augmentRelationships( Direction direction, RelationshipIterator rels, Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> typeFilter )\n     {\n         switch ( direction )\n         {\n-            case INCOMING:\n+case INCOMING:\n                 if ( incoming != null && !incoming.isEmpty() )\n                 {\n                     rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( incoming ),\n@@ -282,16 +271,16 @@ public class RelationshipChangesForNode\n                     rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( outgoing ),\n                             relationshipHome );\n                 }\n-                if ( incoming != null && !incoming.isEmpty() )\n+\n+if ( incoming != null && !incoming.isEmpty() )\n                 {\n                     rels = diffStrategy.augmentPrimitiveIterator( rels, typeFilter.apply( incoming ),\n                             relationshipHome );\n                 }\n                 break;\n-\n-            default:\n+    default:\n                 throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n+    }\n \n         // Loops are always included\n         if ( loops != null && !loops.isEmpty() )\n@@ -306,20 +295,20 @@ public class RelationshipChangesForNode\n     {\n         switch ( direction )\n         {\n-            case INCOMING:\n+case INCOMING:\n                 return diffStrategy.augmentDegree( degree, totalIncoming + totalLoops );\n             case OUTGOING:\n                 return diffStrategy.augmentDegree( degree, totalOutgoing + totalLoops );\n             default:\n                 return diffStrategy.augmentDegree( degree, totalIncoming + totalOutgoing + totalLoops );\n-        }\n+    }\n     }\n \n     public int augmentDegree( Direction direction, int degree, int typeId )\n     {\n         switch ( direction )\n         {\n-            case INCOMING:\n+case INCOMING:\n                 if ( incoming != null && incoming.containsKey( typeId ) )\n                 {\n                     degree = diffStrategy.augmentDegree( degree, incoming.get( typeId ).size() );\n@@ -336,22 +325,23 @@ public class RelationshipChangesForNode\n                 {\n                     degree = diffStrategy.augmentDegree( degree, outgoing.get( typeId ).size() );\n                 }\n-                if ( incoming != null && incoming.containsKey( typeId ) )\n+\n+if ( incoming != null && incoming.containsKey( typeId ) )\n                 {\n                     degree = diffStrategy.augmentDegree( degree, incoming.get( typeId ).size() );\n                 }\n                 break;\n-\n-            default:\n+    default:\n                 throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n+    }\n \n         // Loops are always included\n         if ( loops != null && loops.containsKey( typeId ) )\n         {\n             degree = diffStrategy.augmentDegree( degree, loops.get( typeId ).size() );\n         }\n-        return degree;\n+\n+return degree;\n     }\n \n     public int augmentDegree( RelationshipDirection direction, int degree, int typeId )\n@@ -376,8 +366,7 @@ public class RelationshipChangesForNode\n                 return diffStrategy.augmentDegree( degree, loops.get( typeId ).size() );\n             }\n             break;\n-\n-        default:\n+    default:\n             throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n         }\n \n@@ -391,15 +380,18 @@ public class RelationshipChangesForNode\n         {\n             outgoing.keySet().forEach( types::add );\n         }\n-        if ( incoming != null && !incoming.isEmpty() )\n+\n+if ( incoming != null && !incoming.isEmpty() )\n         {\n             incoming.keySet().forEach( types::add );\n         }\n-        if ( loops != null && !loops.isEmpty() )\n+\n+if ( loops != null && !loops.isEmpty() )\n         {\n             loops.keySet().forEach( types::add );\n         }\n-        return types;\n+\n+return types;\n     }\n \n     public void clear()\n@@ -408,49 +400,54 @@ public class RelationshipChangesForNode\n         {\n             outgoing.clear();\n         }\n-        if ( incoming != null )\n+\n+if ( incoming != null )\n         {\n             incoming.clear();\n         }\n-        if ( loops != null )\n+\n+if ( loops != null )\n         {\n             loops.clear();\n         }\n     }\n \n-    private Map<Integer /* Type */, Set<Long /* Id */>> outgoing()\n+    private Map<Integer/* Type */, Set<Long/* Id */>> outgoing()\n     {\n         if ( outgoing == null )\n         {\n             outgoing = new VersionedHashMap<>();\n         }\n-        return outgoing;\n+\n+return outgoing;\n     }\n \n-    private Map<Integer /* Type */, Set<Long /* Id */>> incoming()\n+    private Map<Integer/* Type */, Set<Long/* Id */>> incoming()\n     {\n         if ( incoming == null )\n         {\n             incoming = new VersionedHashMap<>();\n         }\n-        return incoming;\n+\n+return incoming;\n     }\n \n-    private Map<Integer /* Type */, Set<Long /* Id */>> loops()\n+    private Map<Integer/* Type */, Set<Long/* Id */>> loops()\n     {\n         if ( loops == null )\n         {\n             loops = new VersionedHashMap<>();\n         }\n-        return loops;\n+\n+return loops;\n     }\n \n     private Map<Integer, Set<Long>> getTypeToRelMapForDirection( Direction direction )\n     {\n-        Map<Integer /* Type */, Set<Long /* Id */>> relTypeToRelsMap = null;\n+        Map<Integer/* Type */, Set<Long/* Id */>> relTypeToRelsMap = null;\n         switch ( direction )\n         {\n-            case INCOMING:\n+case INCOMING:\n                 relTypeToRelsMap = incoming();\n                 break;\n             case OUTGOING:\n@@ -461,7 +458,7 @@ public class RelationshipChangesForNode\n                 break;\n             default:\n                 throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n-        }\n+    }\n         return relTypeToRelsMap;\n     }\n \n@@ -490,8 +487,7 @@ public class RelationshipChangesForNode\n     private static final Function<Map<Integer, Set<Long>>, Iterator<Set<Long>>> ALL_TYPES =\n             integerSetMap -> integerSetMap.values().iterator();\n \n-    private Iterator<Set<Long>> diffs( Function<Map<Integer,Set<Long>>,Iterator<Set<Long>>> filter,\n-            Map<Integer,Set<Long>>... maps )\n+private Iterator<Set<Long>> diffs( Function<Map<Integer,Set<Long>>, Iterator<Set<Long>>> filter, Map<Integer,Set<Long>>... maps )\n     {\n         Collection<Set<Long>> result = new ArrayList<>();\n         for ( Map<Integer,Set<Long>> map : maps )\n@@ -520,10 +516,7 @@ public class RelationshipChangesForNode\n \n     public PrimitiveLongIterator getRelationships()\n     {\n-        return PrimitiveLongCollections.concat(\n-                primitiveIds( incoming ),\n-                primitiveIds( outgoing ),\n-                primitiveIds( loops ) );\n+        return PrimitiveLongCollections.concat( primitiveIds( incoming ), primitiveIds( outgoing ), primitiveIds( loops ) );\n     }\n \n     public PrimitiveLongIterator getRelationships( RelationshipDirection direction, int type )\n@@ -543,8 +536,7 @@ public class RelationshipChangesForNode\n \n     private PrimitiveLongIterator primitiveIds( Map<Integer, Set<Long>> map )\n     {\n-        return map == null ? emptyIterator() :\n-               toPrimitiveIterator( Iterators.flatMap( Set::iterator, map.values().iterator() ) );\n+        return map == null ? emptyIterator() : toPrimitiveIterator( Iterators.flatMap( Set::iterator, map.values().iterator() ) );\n     }\n \n     private PrimitiveLongIterator primitiveIdsByType( Map<Integer, Set<Long>> map, int type )\n@@ -553,22 +545,18 @@ public class RelationshipChangesForNode\n         return relationships == null ? emptyIterator() : toPrimitiveIterator( relationships.iterator() );\n     }\n \n-    private PrimitiveLongIterator getRelationships( Direction direction,\n-            Function<Map<Integer,Set<Long>>,Iterator<Set<Long>>> types )\n+    private PrimitiveLongIterator getRelationships( Direction direction, Function<Map<Integer,Set<Long>>, Iterator<Set<Long>>> types )\n     {\n         switch ( direction )\n         {\n         case INCOMING:\n-            return incoming != null || loops != null ? diffStrategy.getPrimitiveIterator(\n-                    diffs( types, incoming, loops ) ) : emptyIterator();\n-        case OUTGOING:\n-            return outgoing != null || loops != null ? diffStrategy.getPrimitiveIterator(\n-                    diffs( types, outgoing, loops ) ) : emptyIterator();\n-        case BOTH:\n-            return outgoing != null || incoming != null || loops != null ? diffStrategy.getPrimitiveIterator(\n-                    diffs( types, outgoing, incoming, loops ) ) : emptyIterator();\n-        default:\n+            return incoming != null || loops != null ? diffStrategy.getPrimitiveIterator( diffs( types, incoming, loops ) ) : emptyIterator();\n+    case OUTGOING:\n+            return outgoing != null || loops != null ? diffStrategy.getPrimitiveIterator( diffs( types, outgoing, loops ) ) : emptyIterator();\n+    case BOTH:\n+            return outgoing != null || incoming != null || loops != null ? diffStrategy.getPrimitiveIterator( diffs( types, outgoing, incoming, loops ) ) : emptyIterator();\n+    default:\n             throw new IllegalArgumentException( \"Unknown direction: \" + direction );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}