{
    "project_name": "wso2-attic-commons",
    "error_id": "279",
    "information": {
        "errors": [
            {
                "line": "144",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 166).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private static final String DEFAULT_HIBERNATE_DIALECT = \"org.hibernate.dialect.DerbyDialect\";\n\n    private static final HashMap<String, DialectFactory.VersionInsensitiveMapper> HIBERNATE_DIALECTS = new HashMap<String, DialectFactory.VersionInsensitiveMapper>();\n\n    static {\n        // Hibernate has a nice table that resolves the dialect from the",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/279/BpelDAOConnectionFactoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/279/BpelDAOConnectionFactoryImpl.java\nindex bb50cb169c6..fb4a353aee1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/279/BpelDAOConnectionFactoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/279/BpelDAOConnectionFactoryImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.daohib.bpel;\n \n import org.apache.commons.logging.Log;\n@@ -43,176 +44,184 @@ import java.util.Enumeration;\n  * implementation.\n  */\n public class BpelDAOConnectionFactoryImpl implements BpelDAOConnectionFactoryJDBC {\n-    private static final Log __log = LogFactory.getLog(BpelDAOConnectionFactoryImpl.class);\n+  private static final Log __log = LogFactory.getLog(BpelDAOConnectionFactoryImpl.class);\n \n-    protected SessionManager _sessionManager;\n+  protected SessionManager _sessionManager;\n \n-    private DataSource _ds;\n+  private DataSource _ds;\n \n-    private TransactionManager _tm;\n+  private TransactionManager _tm;\n \n-    /**\n-     * Constructor.\n-     */\n-    public BpelDAOConnectionFactoryImpl() {\n-    }\n+  /**\n+   * Constructor.\n+   */\n+  public BpelDAOConnectionFactoryImpl() {\n+  }\n \n-    public BpelDAOConnection getConnection() {\n-        try {\n-            return new BpelDAOConnectionImpl(_sessionManager);\n-        } catch (HibernateException e) {\n-            __log.error(\"DbError\", e);\n-            throw e;\n-        }\n+  public BpelDAOConnection getConnection() {\n+    try {\n+      return new BpelDAOConnectionImpl(_sessionManager);\n+    } catch (HibernateException e) {\n+      __log.error(\"DbError\", e);\n+      throw e;\n+    }\n+  }\n+\n+  /**\n+   * @see org.apache.ode.bpel.dao.BpelDAOConnectionFactory#init(java.util.Properties)\n+   */\n+  public void init(Properties initialProps) {\n+    if (_ds == null) {\n+      String errmsg = \"setDataSource() not called!\";\n+      __log.fatal(errmsg);\n+      throw new IllegalStateException(errmsg);\n     }\n \n-    /**\n-     * @see org.apache.ode.bpel.dao.BpelDAOConnectionFactory#init(java.util.Properties)\n-     */\n-    public void init(Properties initialProps) {\n-        if (_ds == null) {\n-            String errmsg = \"setDataSource() not called!\";\n-            __log.fatal(errmsg);\n-            throw new IllegalStateException(errmsg);\n-        }\n+    if (_tm == null) {\n+      String errmsg = \"setTransactionManager() not called!\";\n+      __log.fatal(errmsg);\n+      throw new IllegalStateException(errmsg);\n+    }\n \n-        if (_tm == null) {\n-            String errmsg = \"setTransactionManager() not called!\";\n-            __log.fatal(errmsg);\n-            throw new IllegalStateException(errmsg);\n-        }\n+    if (initialProps == null) {\n+      initialProps = new Properties();\n+    }\n+    // Don't want to pollute original properties\n+    Properties properties = new Properties(initialProps);\n+    for (Object prop : initialProps.keySet()) {\n+      properties.put(prop, initialProps.get(prop));\n+    }\n \n-        if (initialProps == null) initialProps = new Properties();\n-        // Don't want to pollute original properties\n-        Properties properties = new Properties(initialProps);\n-        for (Object prop : initialProps.keySet()) {\n-            properties.put(prop, initialProps.get(prop));\n-        }\n+    // Note that we don't allow the following properties to be overriden by\n+    // the client.\n+    if (properties.containsKey(Environment.CONNECTION_PROVIDER)) {\n+      __log.warn(\"Ignoring user-specified Hibernate property: \" + Environment.CONNECTION_PROVIDER);\n+    }\n+    if (properties.containsKey(Environment.TRANSACTION_MANAGER_STRATEGY)) {\n+      __log.warn(\"Ignoring user-specified Hibernate property: \" + Environment.TRANSACTION_MANAGER_STRATEGY);\n+    }\n+    if (properties.containsKey(Environment.SESSION_FACTORY_NAME)) {\n+      __log.warn(\"Ignoring user-specified Hibernate property: \" + Environment.SESSION_FACTORY_NAME);\n+    }\n \n-        // Note that we don't allow the following properties to be overriden by\n-        // the client.\n-        if (properties.containsKey(Environment.CONNECTION_PROVIDER))\n-            __log.warn(\"Ignoring user-specified Hibernate property: \" + Environment.CONNECTION_PROVIDER);\n-        if (properties.containsKey(Environment.TRANSACTION_MANAGER_STRATEGY))\n-            __log.warn(\"Ignoring user-specified Hibernate property: \" + Environment.TRANSACTION_MANAGER_STRATEGY);\n-        if (properties.containsKey(Environment.SESSION_FACTORY_NAME))\n-            __log.warn(\"Ignoring user-specified Hibernate property: \" + Environment.SESSION_FACTORY_NAME);\n-\n-        properties.put(Environment.CONNECTION_PROVIDER, DataSourceConnectionProvider.class.getName());\n-        properties.put(Environment.TRANSACTION_MANAGER_STRATEGY, HibernateTransactionManagerLookup.class.getName());\n-        properties.put(Environment.TRANSACTION_STRATEGY, \"org.hibernate.transaction.JTATransactionFactory\");\n-        properties.put(Environment.CURRENT_SESSION_CONTEXT_CLASS, \"jta\");\n-\n-        // Guess Hibernate dialect if not specified in hibernate.properties\n-        if (properties.get(Environment.DIALECT) == null) {\n-            try {\n-                properties.put(Environment.DIALECT, guessDialect(_ds));\n-            } catch (Exception ex) {\n-                String errmsg = \"Unable to detect Hibernate dialect!\";\n-\n-                if (__log.isDebugEnabled())\n-                    __log.debug(errmsg, ex);\n-\n-                __log.error(errmsg);\n-            }\n-        }\n+    properties.put(Environment.CONNECTION_PROVIDER, DataSourceConnectionProvider.class.getName());\n+    properties.put(Environment.TRANSACTION_MANAGER_STRATEGY, HibernateTransactionManagerLookup.class.getName());\n+    properties.put(Environment.TRANSACTION_STRATEGY, \"org.hibernate.transaction.JTATransactionFactory\");\n+    properties.put(Environment.CURRENT_SESSION_CONTEXT_CLASS, \"jta\");\n \n-        // Isolation levels override\n-        if (System.getProperty(\"ode.connection.isolation\") != null) {\n-            String level = System.getProperty(\"ode.connection.isolation\", \"2\");\n-            properties.put(Environment.ISOLATION, level);\n-        }\n+    // Guess Hibernate dialect if not specified in hibernate.properties\n+    if (properties.get(Environment.DIALECT) == null) {\n+      try {\n+        properties.put(Environment.DIALECT, guessDialect(_ds));\n+      } catch (Exception ex) {\n+        String errmsg = \"Unable to detect Hibernate dialect!\";\n \n         if (__log.isDebugEnabled()) {\n-            Enumeration names = properties.propertyNames();\n-            __log.debug(\"Properties passed to Hibernate:\");\n-            while (names.hasMoreElements()) {\n-                String name = (String) names.nextElement();\n-                __log.debug(name + \"=\" + properties.getProperty(name));\n-            }\n+          __log.debug(errmsg, ex);\n         }\n-        SessionManager sm = createSessionManager(properties, _ds, _tm);\n-        _sessionManager = sm;\n-    }\n \n-    protected SessionManager createSessionManager(Properties properties, DataSource ds, TransactionManager tm) {\n-        return new SessionManager(properties, ds, tm);\n+        __log.error(errmsg);\n+      }\n     }\n \n-    private static final String DEFAULT_HIBERNATE_DIALECT = \"org.hibernate.dialect.DerbyDialect\";\n-\n-    private static final HashMap<String, DialectFactory.VersionInsensitiveMapper> HIBERNATE_DIALECTS = new HashMap<String, DialectFactory.VersionInsensitiveMapper>();\n-\n-    static {\n-        // Hibernate has a nice table that resolves the dialect from the\n-        // database\n-        // product name,\n-        // but doesn't include all the drivers. So this is supplementary, and\n-        // some\n-        // day in the\n-        // future they'll add more drivers and we can get rid of this.\n-        // Drivers already recognized by Hibernate:\n-        // HSQL Database Engine\n-        // DB2/NT\n-        // MySQL\n-        // PostgreSQL\n-        // Microsoft SQL Server Database, Microsoft SQL Server\n-        // Sybase SQL Server\n-        // Informix Dynamic Server\n-        // Oracle 8 and Oracle >8\n-        HIBERNATE_DIALECTS.put(\"Apache Derby\", new DialectFactory.VersionInsensitiveMapper(\n-                \"org.hibernate.dialect.DerbyDialect\"));\n+    // Isolation levels override\n+    if (System.getProperty(\"ode.connection.isolation\") != null) {\n+      String level = System.getProperty(\"ode.connection.isolation\", \"2\");\n+      properties.put(Environment.ISOLATION, level);\n     }\n \n-    public void shutdown() {\n-        // Not too much to do for hibernate.\n+    if (__log.isDebugEnabled()) {\n+      Enumeration names = properties.propertyNames();\n+      __log.debug(\"Properties passed to Hibernate:\");\n+      while (names.hasMoreElements()) {\n+        String name = (String) names.nextElement();\n+        __log.debug(name + \"=\" + properties.getProperty(name));\n+      }\n     }\n-\n-    private String guessDialect(DataSource dataSource) throws Exception {\n-        String dialect = null;\n-        // Open a connection and use that connection to figure out database\n-        // product name/version number in order to decide which Hibernate\n-        // dialect to use.\n-        Connection conn = dataSource.getConnection();\n-        try {\n-            DatabaseMetaData metaData = conn.getMetaData();\n-            if (metaData != null) {\n-                String dbProductName = metaData.getDatabaseProductName();\n-                int dbMajorVer = metaData.getDatabaseMajorVersion();\n-                __log.info(\"Using database \" + dbProductName + \" major version \" + dbMajorVer);\n-                DialectFactory.DatabaseDialectMapper mapper = HIBERNATE_DIALECTS.get(dbProductName);\n-                if (mapper != null) {\n-                    dialect = mapper.getDialectClass(dbMajorVer);\n-                } else {\n-                    Dialect hbDialect = DialectFactory.determineDialect(dbProductName, dbMajorVer);\n-                    if (hbDialect != null)\n-                        dialect = hbDialect.getClass().getName();\n-                }\n-            }\n-        } finally {\n-            conn.close();\n+    SessionManager sm = createSessionManager(properties, _ds, _tm);\n+    _sessionManager = sm;\n+  }\n+\n+  protected SessionManager createSessionManager(Properties properties, DataSource ds, TransactionManager tm) {\n+    return new SessionManager(properties, ds, tm);\n+  }\n+\n+  private static final String DEFAULT_HIBERNATE_DIALECT = \"org.hibernate.dialect.DerbyDialect\";\n+\n+  private static final HashMap<String, DialectFactory.VersionInsensitiveMapper> HIBERNATE_DIALECTS =\n+    new HashMap<String, DialectFactory.VersionInsensitiveMapper>();\n+\n+  static {\n+    // Hibernate has a nice table that resolves the dialect from the\n+    // database\n+    // product name,\n+    // but doesn't include all the drivers. So this is supplementary, and\n+    // some\n+    // day in the\n+    // future they'll add more drivers and we can get rid of this.\n+    // Drivers already recognized by Hibernate:\n+    // HSQL Database Engine\n+    // DB2/NT\n+    // MySQL\n+    // PostgreSQL\n+    // Microsoft SQL Server Database, Microsoft SQL Server\n+    // Sybase SQL Server\n+    // Informix Dynamic Server\n+    // Oracle 8 and Oracle >8\n+    HIBERNATE_DIALECTS.put(\"Apache Derby\", new DialectFactory.VersionInsensitiveMapper(\n+      \"org.hibernate.dialect.DerbyDialect\"));\n+  }\n+\n+  public void shutdown() {\n+    // Not too much to do for hibernate.\n+  }\n+\n+  private String guessDialect(DataSource dataSource) throws Exception {\n+    String dialect = null;\n+    // Open a connection and use that connection to figure out database\n+    // product name/version number in order to decide which Hibernate\n+    // dialect to use.\n+    Connection conn = dataSource.getConnection();\n+    try {\n+      DatabaseMetaData metaData = conn.getMetaData();\n+      if (metaData != null) {\n+        String dbProductName = metaData.getDatabaseProductName();\n+        int dbMajorVer = metaData.getDatabaseMajorVersion();\n+        __log.info(\"Using database \" + dbProductName + \" major version \" + dbMajorVer);\n+        DialectFactory.DatabaseDialectMapper mapper = HIBERNATE_DIALECTS.get(dbProductName);\n+        if (mapper != null) {\n+          dialect = mapper.getDialectClass(dbMajorVer);\n+        } else {\n+          Dialect hbDialect = DialectFactory.determineDialect(dbProductName, dbMajorVer);\n+          if (hbDialect != null) {\n+            dialect = hbDialect.getClass().getName();\n+          }\n         }\n+      }\n+    } finally {\n+      conn.close();\n+    }\n \n-        if (dialect == null) {\n-            __log.info(\"Cannot determine hibernate dialect for this database: using the default one.\");\n-            dialect = DEFAULT_HIBERNATE_DIALECT;\n-        }\n+    if (dialect == null) {\n+      __log.info(\"Cannot determine hibernate dialect for this database: using the default one.\");\n+      dialect = DEFAULT_HIBERNATE_DIALECT;\n+    }\n \n-        return dialect;\n+    return dialect;\n \n-    }\n+  }\n \n-    public void setDataSource(DataSource ds) {\n-        _ds = ds;\n-    }\n+  public void setDataSource(DataSource ds) {\n+    _ds = ds;\n+  }\n \n-    public void setTransactionManager(Object tm) {\n-        _tm = (TransactionManager) tm;\n+  public void setTransactionManager(Object tm) {\n+    _tm = (TransactionManager) tm;\n \n-    }\n+  }\n \n-    public void setUnmanagedDataSource(DataSource ds) {\n-        // Hibernate doesn't use this.\n-    }\n+  public void setUnmanagedDataSource(DataSource ds) {\n+    // Hibernate doesn't use this.\n+  }\n \n }\n",
            "diff_size": 206
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/279/BpelDAOConnectionFactoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/279/BpelDAOConnectionFactoryImpl.java\nindex bb50cb169c6..48a0933b926 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/279/BpelDAOConnectionFactoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/279/BpelDAOConnectionFactoryImpl.java\n@@ -82,7 +82,8 @@ public class BpelDAOConnectionFactoryImpl implements BpelDAOConnectionFactoryJDB\n             throw new IllegalStateException(errmsg);\n         }\n \n-        if (initialProps == null) initialProps = new Properties();\n+        if (initialProps == null)\n+    initialProps = new Properties();\n         // Don't want to pollute original properties\n         Properties properties = new Properties(initialProps);\n         for (Object prop : initialProps.keySet()) {\n@@ -215,4 +216,4 @@ public class BpelDAOConnectionFactoryImpl implements BpelDAOConnectionFactoryJDB\n         // Hibernate doesn't use this.\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}