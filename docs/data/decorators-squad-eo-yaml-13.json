{
    "project_name": "decorators-squad-eo-yaml",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "104",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            line -> line.trimmed().startsWith(\"!!\")\n        ).iterator();\n        if(!iterator.hasNext()) {\n            read = new ReadPlainScalar(all, new YamlLine.NullYamlLine());\n        } else {\n            read = new ReadPlainScalar(all, iterator.next());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/13/RtYamlInput.java\nindex d7bb749f24d..848c5dae6cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/13/RtYamlInput.java\n@@ -101,7 +101,7 @@ final class RtYamlInput implements YamlInput {\n             line -> line.trimmed().startsWith(\"%\"),\n             line -> line.trimmed().startsWith(\"!!\")\n         ).iterator();\n-        if(!iterator.hasNext()) {\n+        if (!iterator.hasNext()) {\n             read = new ReadPlainScalar(all, new YamlLine.NullYamlLine());\n         } else {\n             read = new ReadPlainScalar(all, iterator.next());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/13/RtYamlInput.java\nindex d7bb749f24d..cac86f00769 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/13/RtYamlInput.java\n@@ -1,17 +1,17 @@\n /**\n  * Copyright (c) 2016-2020, Mihai Emil Andronache\n  * All rights reserved.\n- *\n+ * <p>\n  * Redistribution and use in source and binary forms, with or without\n- *  modification, are permitted provided that the following conditions are met:\n+ * modification, are permitted provided that the following conditions are met:\n  * Redistributions of source code must retain the above copyright notice, this\n- *  list of conditions and the following disclaimer.\n- *  Redistributions in binary form must reproduce the above copyright notice,\n- *  this list of conditions and the following disclaimer in the documentation\n- *  and/or other materials provided with the distribution.\n+ * list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n  * Neither the name of the copyright holder nor the names of its\n- *  contributors may be used to endorse or promote products derived from\n- *  this software without specific prior written permission.\n+ * contributors may be used to endorse or promote products derived from\n+ * this software without specific prior written permission.\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n@@ -25,6 +25,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n package com.amihaiemil.eoyaml;\n \n import java.io.BufferedReader;\n@@ -101,7 +102,7 @@ final class RtYamlInput implements YamlInput {\n             line -> line.trimmed().startsWith(\"%\"),\n             line -> line.trimmed().startsWith(\"!!\")\n         ).iterator();\n-        if(!iterator.hasNext()) {\n+        if (!iterator.hasNext()) {\n             read = new ReadPlainScalar(all, new YamlLine.NullYamlLine());\n         } else {\n             read = new ReadPlainScalar(all, iterator.next());\n@@ -190,7 +191,7 @@ final class RtYamlInput implements YamlInput {\n      * @param line Line.\n      * @return Boolean.\n      */\n-    private boolean mappingStartsAtDash(final String line){\n+    private boolean mappingStartsAtDash(final String line) {\n         //line without indentation.\n         final String trimmed = line.trim();\n         final boolean escapedScalar = trimmed.matches(\"^[ ]*-[ ]*\\\".*\\\"$\")\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "152",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/13/RtYamlInput.java\nindex d7bb749f24d..93e2d9667f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/13/RtYamlInput.java\n@@ -101,7 +101,7 @@ final class RtYamlInput implements YamlInput {\n             line -> line.trimmed().startsWith(\"%\"),\n             line -> line.trimmed().startsWith(\"!!\")\n         ).iterator();\n-        if(!iterator.hasNext()) {\n+        if (!iterator.hasNext()) {\n             read = new ReadPlainScalar(all, new YamlLine.NullYamlLine());\n         } else {\n             read = new ReadPlainScalar(all, iterator.next());\n@@ -129,8 +129,7 @@ final class RtYamlInput implements YamlInput {\n         final List<YamlLine> lines = new ArrayList<>();\n         try (\n             BufferedReader reader = new BufferedReader(\n-                new InputStreamReader(this.source)\n-            )\n+                new InputStreamReader(this.source))\n         ) {\n             String line;\n             int number = 0;\n@@ -150,7 +149,7 @@ final class RtYamlInput implements YamlInput {\n                         .limit(new RtYamlLine(line, number).indentation())\n                         .reduce((acc, space) -> acc + space)\n                         .orElse(\"\");\n-                    final YamlLine sequenceLine = new RtYamlLine(\n+final YamlLine sequenceLine = new RtYamlLine(\n                         seqIndent + \"-\",\n                         number\n                     );\n@@ -190,11 +189,11 @@ final class RtYamlInput implements YamlInput {\n      * @param line Line.\n      * @return Boolean.\n      */\n-    private boolean mappingStartsAtDash(final String line){\n+    private boolean mappingStartsAtDash(final String line) {\n         //line without indentation.\n         final String trimmed = line.trim();\n         final boolean escapedScalar = trimmed.matches(\"^[ ]*-[ ]*\\\".*\\\"$\")\n             || trimmed.matches(\"^[ ]*-[ ]*'.*'$\");\n         return trimmed.matches(\"^[ ]*-.*:.+$\") && !escapedScalar;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 269).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "14",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "109",
                    "column": "58",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "143",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "18",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "column": "135",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 90).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "column": "83",
                    "severity": "error",
                    "message": "'++' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "166",
                    "column": "26",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "171",
                    "column": "26",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "column": "40",
                    "severity": "error",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/13/RtYamlInput.java\nindex d7bb749f24d..318ac37f2f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/13/RtYamlInput.java\n@@ -42,23 +42,31 @@ import java.util.stream.Stream;\n  * @version $Id: 315e0823b164d68af635bfab1f882045b8d724d0 $\n  * @since 1.0.0\n  */\n+\n+\n final class RtYamlInput implements YamlInput {\n \n     /**\n      * Source of the input.\n      */\n+\n+\n     private final InputStream source;\n \n     /**\n      * If set to true, we will try to guess the correct indentation\n      * of misplaced lines.\n      */\n+\n+\n     private final boolean guessIndentation;\n \n     /**\n      * Ctor.\n      * @param source Given source.\n      */\n+\n+\n     RtYamlInput(final InputStream source) {\n         this(source, false);\n     }\n@@ -69,7 +77,10 @@ final class RtYamlInput implements YamlInput {\n      * @param guessIndentation If set to true, we will try to guess\n      *  the correct indentation of misplaced lines.\n      */\n-    RtYamlInput(final InputStream source, final boolean guessIndentation) {\n+\n+\n+    RtYamlInput(final InputStream source,\n+                final boolean guessIndentation) {\n         this.source = source;\n         this.guessIndentation = guessIndentation;\n     }\n@@ -93,16 +104,9 @@ final class RtYamlInput implements YamlInput {\n     public Scalar readPlainScalar() throws IOException {\n         final ReadPlainScalar read;\n         final AllYamlLines all = this.readInput();\n-        final Iterator<YamlLine> iterator = new Skip(\n-            all,\n-            line -> line.trimmed().startsWith(\"#\"),\n-            line -> line.trimmed().startsWith(\"---\"),\n-            line -> line.trimmed().startsWith(\"...\"),\n-            line -> line.trimmed().startsWith(\"%\"),\n-            line -> line.trimmed().startsWith(\"!!\")\n-        ).iterator();\n-        if(!iterator.hasNext()) {\n-            read = new ReadPlainScalar(all, new YamlLine.NullYamlLine());\n+        final Iterator<YamlLine> iterator = new Skip(all, line-> line.trimmed().startsWith(\"#\"), line-> line.trimmed().startsWith(\"---\"), line-> line.trimmed().startsWith(\"...\"), line-> line.trimmed().startsWith(\"%\"), line-> line.trimmed().startsWith(\"!!\")).iterator();\n+        if (! iterator.hasNext()) {\n+            read = new ReadPlainScalar(all, new YamlLine. NullYamlLine());\n         } else {\n             read = new ReadPlainScalar(all, iterator.next());\n         }\n@@ -111,12 +115,16 @@ final class RtYamlInput implements YamlInput {\n \n     @Override\n     public Scalar readFoldedBlockScalar() throws IOException {\n-        return new ReadFoldedBlockScalar(this.readInput());\n+        return new ReadFoldedBlockScalar(\n+            this.readInput()\n+        );\n     }\n \n     @Override\n     public Scalar readLiteralBlockScalar() throws IOException {\n-        return new ReadLiteralBlockScalar(this.readInput());\n+        return new ReadLiteralBlockScalar(\n+            this.readInput()\n+        );\n     }\n \n     /**\n@@ -125,17 +133,17 @@ final class RtYamlInput implements YamlInput {\n      * @throws IOException If something goes wrong while reading the input.\n      * @todo #447:60min Refactor solution for #447 by using lines iterators.\n      */\n+\n     private AllYamlLines readInput() throws IOException {\n         final List<YamlLine> lines = new ArrayList<>();\n-        try (\n-            BufferedReader reader = new BufferedReader(\n-                new InputStreamReader(this.source)\n-            )\n-        ) {\n+        try (BufferedReader reader = new BufferedReader(\n+                 new InputStreamReader(\n+                     this.source\n+                 )\n+             ) ) {\n             String line;\n             int number = 0;\n-            while ((line = reader.readLine()) != null) {\n-\n+            while((line = reader.readLine()) != null) {\n                 if (this.mappingStartsAtDash(line)) {\n \n                     // if line starts with a sequence (\"-\") and the first\n@@ -145,30 +153,22 @@ final class RtYamlInput implements YamlInput {\n                     // next line with correct indentation relative to \"-\".\n                     // see bug:\n                     // https://github.com/decorators-squad/eo-yaml/issues/447\n-\n-                    final String seqIndent = Stream.iterate(\" \", s -> s)\n-                        .limit(new RtYamlLine(line, number).indentation())\n-                        .reduce((acc, space) -> acc + space)\n-                        .orElse(\"\");\n-                    final YamlLine sequenceLine = new RtYamlLine(\n-                        seqIndent + \"-\",\n-                        number\n-                    );\n+                    final String seqIndent = Stream.iterate(\" \", s-> s).limit(new RtYamlLine(line, number).indentation()).reduce((acc,space)-> acc + space).orElse(\"\");\n+                    final YamlLine sequenceLine = new RtYamlLine(seqIndent + \"-\", number);\n                     lines.add(sequenceLine);\n \n                     // 2 spaces offset\n                     final String offset = \"  \";\n                     final String keyValueIndent = seqIndent + offset;\n-                    final YamlLine keyValueLine = new RtYamlLine(\n-                        keyValueIndent + line.split(\"-\")[1].trim(),\n-                        ++number\n-                    );\n-                    if (!keyValueLine.toString().trim().isEmpty()) {\n+                    final YamlLine keyValueLine = new RtYamlLine(keyValueIndent + line.split(\n+                                                                     \"-\"\n+                                                                 )[ 1 ].trim(), ++ number);\n+                    if (! keyValueLine.toString().trim().isEmpty()) {\n                         lines.add(keyValueLine);\n                     }\n                 } else {\n                     final YamlLine current = new RtYamlLine(line, number);\n-                    if (!current.toString().trim().isEmpty()) {\n+                    if (! current.toString().trim().isEmpty()) {\n                         lines.add(current);\n                     }\n                 }\n@@ -190,11 +190,15 @@ final class RtYamlInput implements YamlInput {\n      * @param line Line.\n      * @return Boolean.\n      */\n-    private boolean mappingStartsAtDash(final String line){\n+\n+    private boolean mappingStartsAtDash(final String line) {\n         //line without indentation.\n         final String trimmed = line.trim();\n-        final boolean escapedScalar = trimmed.matches(\"^[ ]*-[ ]*\\\".*\\\"$\")\n-            || trimmed.matches(\"^[ ]*-[ ]*'.*'$\");\n-        return trimmed.matches(\"^[ ]*-.*:.+$\") && !escapedScalar;\n+        final boolean escapedScalar = trimmed.matches(\n+                                          \"^[ ]*-[ ]*\\\".*\\\"$\")|| trimmed.matches(\n+                                          \"^[ ]*-[ ]*'.*'$\");\n+        return trimmed.matches(\n+                   \"^[ ]*-.*:.+$\") && ! escapedScalar;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/13/RtYamlInput.java\nindex d7bb749f24d..848c5dae6cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/13/RtYamlInput.java\n@@ -101,7 +101,7 @@ final class RtYamlInput implements YamlInput {\n             line -> line.trimmed().startsWith(\"%\"),\n             line -> line.trimmed().startsWith(\"!!\")\n         ).iterator();\n-        if(!iterator.hasNext()) {\n+        if (!iterator.hasNext()) {\n             read = new ReadPlainScalar(all, new YamlLine.NullYamlLine());\n         } else {\n             read = new ReadPlainScalar(all, iterator.next());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/13/RtYamlInput.java\nindex d7bb749f24d..848c5dae6cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/13/RtYamlInput.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/13/RtYamlInput.java\n@@ -101,7 +101,7 @@ final class RtYamlInput implements YamlInput {\n             line -> line.trimmed().startsWith(\"%\"),\n             line -> line.trimmed().startsWith(\"!!\")\n         ).iterator();\n-        if(!iterator.hasNext()) {\n+        if (!iterator.hasNext()) {\n             read = new ReadPlainScalar(all, new YamlLine.NullYamlLine());\n         } else {\n             read = new ReadPlainScalar(all, iterator.next());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}