{
    "project_name": "Internet2-grouper",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "90",
                "column": "34",
                "severity": "warning",
                "message": "';' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "                return TRY_FAILED; // fail\n            } catch (IllegalAccessException xill) {\n                return TRY_FAILED;// fail\n            }\n        }\n        return TRY_FAILED;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/15/PropertySetExecutor.java\nindex 277b801a562..d6528b28282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/15/PropertySetExecutor.java\n@@ -87,7 +87,7 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n             } catch (InvocationTargetException xinvoke) {\r\n                 return TRY_FAILED; // fail\r\n             } catch (IllegalAccessException xill) {\r\n-                return TRY_FAILED;// fail\r\n+                return TRY_FAILED; // fail\r\n             }\r\n         }\r\n         return TRY_FAILED;\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "92",
                    "column": "26",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/15/PropertySetExecutor.java\nindex 277b801a562..0b11b2e8581 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/15/PropertySetExecutor.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -31,95 +31,97 @@\n  */\r\n \r\n package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\r\n+\r\n import java.lang.reflect.InvocationTargetException;\r\n+\r\n /**\r\n  * Specialized executor to set a property in an object.\r\n  * @since 2.0\r\n  */\r\n public final class PropertySetExecutor extends AbstractExecutor.Set {\r\n-    /** Index of the first character of the set{p,P}roperty. */\r\n-    private static final int SET_START_INDEX = 3;\r\n-    /** The property. */\r\n-    private final String property;\r\n+  /** Index of the first character of the set{p,P}roperty. */\r\n+  private static final int SET_START_INDEX = 3;\r\n+  /** The property. */\r\n+  private final String property;\r\n \r\n-    /**\r\n-     * Creates an instance by attempting discovery of the set method.\r\n-     * @param is the introspector\r\n-     * @param clazz the class to introspect\r\n-     * @param identifier the property to set\r\n-     * @param arg the value to set into the property\r\n-     */\r\n-    public PropertySetExecutor(Introspector is, Class<?> clazz, String identifier, Object arg) {\r\n-        super(clazz, discover(is, clazz, identifier, arg));\r\n-        property = identifier;\r\n+  /**\r\n+   * Creates an instance by attempting discovery of the set method.\r\n+   * @param is the introspector\r\n+   * @param clazz the class to introspect\r\n+   * @param identifier the property to set\r\n+   * @param arg the value to set into the property\r\n+   */\r\n+  public PropertySetExecutor(Introspector is, Class<?> clazz, String identifier, Object arg) {\r\n+    super(clazz, discover(is, clazz, identifier, arg));\r\n+    property = identifier;\r\n \r\n-    }\r\n+  }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object getTargetProperty() {\r\n-        return property;\r\n-    }\r\n+  /** {@inheritDoc} */\r\n+  @Override\r\n+  public Object getTargetProperty() {\r\n+    return property;\r\n+  }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object execute(Object o, Object arg)\r\n-            throws IllegalAccessException, InvocationTargetException {\r\n-        Object[] pargs = {arg};\r\n-        if (method != null) {\r\n-            method.invoke(o, pargs);\r\n-        }\r\n-        return arg;\r\n+  /** {@inheritDoc} */\r\n+  @Override\r\n+  public Object execute(Object o, Object arg)\r\n+    throws IllegalAccessException, InvocationTargetException {\r\n+    Object[] pargs = {arg};\r\n+    if (method != null) {\r\n+      method.invoke(o, pargs);\r\n     }\r\n+    return arg;\r\n+  }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object tryExecute(Object o, Object identifier, Object arg) {\r\n-        if (o != null && method != null\r\n-            // ensure method name matches the property name\r\n-            && property.equals(identifier)\r\n-            // object class should be same as executor's method declaring class\r\n-            && objectClass.equals(o.getClass())\r\n-            // we are guaranteed the method has one parameter since it is a set(x)\r\n-            && (arg == null || method.getParameterTypes()[0].equals(arg.getClass()))) {\r\n-            try {\r\n-                return execute(o, arg);\r\n-            } catch (InvocationTargetException xinvoke) {\r\n-                return TRY_FAILED; // fail\r\n-            } catch (IllegalAccessException xill) {\r\n-                return TRY_FAILED;// fail\r\n-            }\r\n-        }\r\n-        return TRY_FAILED;\r\n+  /** {@inheritDoc} */\r\n+  @Override\r\n+  public Object tryExecute(Object o, Object identifier, Object arg) {\r\n+    if (o != null && method != null\r\n+      // ensure method name matches the property name\r\n+      && property.equals(identifier)\r\n+      // object class should be same as executor's method declaring class\r\n+      && objectClass.equals(o.getClass())\r\n+      // we are guaranteed the method has one parameter since it is a set(x)\r\n+      && (arg == null || method.getParameterTypes()[0].equals(arg.getClass()))) {\r\n+      try {\r\n+        return execute(o, arg);\r\n+      } catch (InvocationTargetException xinvoke) {\r\n+        return TRY_FAILED; // fail\r\n+      } catch (IllegalAccessException xill) {\r\n+        return TRY_FAILED;// fail\r\n+      }\r\n     }\r\n+    return TRY_FAILED;\r\n+  }\r\n \r\n \r\n-    /**\r\n-     * Discovers the method for a {@link PropertySet}.\r\n-     * <p>The method to be found should be named \"set{P,p}property.</p>\r\n-     *@param is the introspector\r\n-     *@param clazz the class to find the get method from\r\n-     *@param property the name of the property to set\r\n-     *@param arg the value to assign to the property\r\n-     *@return the method if found, null otherwise\r\n-     */\r\n-    private static java.lang.reflect.Method discover(Introspector is,\r\n-            final Class<?> clazz, String property, Object arg) {\r\n-        // first, we introspect for the set<identifier> setter method\r\n-        Object[] params = {arg};\r\n-        StringBuilder sb = new StringBuilder(\"set\");\r\n-        sb.append(property);\r\n-        // uppercase nth char\r\n-        char c = sb.charAt(SET_START_INDEX);\r\n-        sb.setCharAt(SET_START_INDEX, Character.toUpperCase(c));\r\n-        java.lang.reflect.Method method = is.getMethod(clazz, sb.toString(), params);\r\n-        // lowercase nth char\r\n-        if (method == null) {\r\n-            sb.setCharAt(SET_START_INDEX, Character.toLowerCase(c));\r\n-            method = is.getMethod(clazz, sb.toString(), params);\r\n-        }\r\n-\r\n-        return method;\r\n+  /**\r\n+   * Discovers the method for a {@link PropertySet}.\r\n+   * <p>The method to be found should be named \"set{P,p}property.</p>\r\n+   *@param is the introspector\r\n+   *@param clazz the class to find the get method from\r\n+   *@param property the name of the property to set\r\n+   *@param arg the value to assign to the property\r\n+   *@return the method if found, null otherwise\r\n+   */\r\n+  private static java.lang.reflect.Method discover(Introspector is,\r\n+                                                   final Class<?> clazz, String property, Object arg) {\r\n+    // first, we introspect for the set<identifier> setter method\r\n+    Object[] params = {arg};\r\n+    StringBuilder sb = new StringBuilder(\"set\");\r\n+    sb.append(property);\r\n+    // uppercase nth char\r\n+    char c = sb.charAt(SET_START_INDEX);\r\n+    sb.setCharAt(SET_START_INDEX, Character.toUpperCase(c));\r\n+    java.lang.reflect.Method method = is.getMethod(clazz, sb.toString(), params);\r\n+    // lowercase nth char\r\n+    if (method == null) {\r\n+      sb.setCharAt(SET_START_INDEX, Character.toLowerCase(c));\r\n+      method = is.getMethod(clazz, sb.toString(), params);\r\n     }\r\n+\r\n+    return method;\r\n+  }\r\n }\r\n \r\n",
            "diff_size": 87
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 104.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/15/PropertySetExecutor.java\nindex 277b801a562..9767118e3d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/15/PropertySetExecutor.java\n@@ -51,8 +51,7 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n      */\r\n     public PropertySetExecutor(Introspector is, Class<?> clazz, String identifier, Object arg) {\r\n         super(clazz, discover(is, clazz, identifier, arg));\r\n-        property = identifier;\r\n-\r\n+        property = identifier;\n     }\r\n \r\n     /** {@inheritDoc} */\r\n@@ -81,20 +80,19 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n             // object class should be same as executor's method declaring class\r\n             && objectClass.equals(o.getClass())\r\n             // we are guaranteed the method has one parameter since it is a set(x)\r\n-            && (arg == null || method.getParameterTypes()[0].equals(arg.getClass()))) {\r\n-            try {\r\n+            && (arg == null || method.getParameterTypes()[0].equals(arg.getClass()))) {\n+    try {\r\n                 return execute(o, arg);\r\n             } catch (InvocationTargetException xinvoke) {\r\n                 return TRY_FAILED; // fail\r\n             } catch (IllegalAccessException xill) {\r\n-                return TRY_FAILED;// fail\r\n+                return TRY_FAILED; // fail\r\n             }\r\n         }\r\n         return TRY_FAILED;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n+    }\n+\n+/**\r\n      * Discovers the method for a {@link PropertySet}.\r\n      * <p>The method to be found should be named \"set{P,p}property.</p>\r\n      *@param is the introspector\r\n@@ -121,5 +119,4 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n \r\n         return method;\r\n     }\r\n-}\r\n-\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 12, expected is 16, indentation should be the same level as line 93.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "99",
                    "column": "34",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/15/PropertySetExecutor.java\nindex 277b801a562..cc985d15557 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/15/PropertySetExecutor.java\n@@ -30,16 +30,20 @@\n  * limitations under the License.\r\n  */\r\n \r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\r\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\n+\n import java.lang.reflect.InvocationTargetException;\r\n /**\r\n  * Specialized executor to set a property in an object.\r\n  * @since 2.0\r\n- */\r\n+ */\n+\n+\n public final class PropertySetExecutor extends AbstractExecutor.Set {\r\n-    /** Index of the first character of the set{p,P}roperty. */\r\n+    /** Index of the first character of the set{p,P}roperty. */\n+\n     private static final int SET_START_INDEX = 3;\r\n-    /** The property. */\r\n+    /** The property. */\n     private final String property;\r\n \r\n     /**\r\n@@ -48,49 +52,54 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n      * @param clazz the class to introspect\r\n      * @param identifier the property to set\r\n      * @param arg the value to set into the property\r\n-     */\r\n-    public PropertySetExecutor(Introspector is, Class<?> clazz, String identifier, Object arg) {\r\n-        super(clazz, discover(is, clazz, identifier, arg));\r\n-        property = identifier;\r\n-\r\n+     */\n+\n+    public PropertySetExecutor(Introspector is, Class<?> clazz, String identifier, Object arg) {\n+    super(clazz, discover(is, clazz, identifier, arg));\n+\n+    property = identifier;\n     }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object getTargetProperty() {\r\n-        return property;\r\n+    /** {@inheritDoc} */\n+\n+    @Override\n+    public Object getTargetProperty() {\n+        return property;\n     }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object execute(Object o, Object arg)\r\n-            throws IllegalAccessException, InvocationTargetException {\r\n-        Object[] pargs = {arg};\r\n-        if (method != null) {\r\n-            method.invoke(o, pargs);\r\n-        }\r\n-        return arg;\r\n+    /** {@inheritDoc} */\n+\n+\n+    @Override\n+    public Object execute(Object o, Object arg) throws IllegalAccessException, InvocationTargetException {\n+        Object[] pargs = { arg };\n+\n+        if (method != null) {\n+            method.invoke(o, pargs);\n+        }\n+        return arg;\n     }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object tryExecute(Object o, Object identifier, Object arg) {\r\n+    /** {@inheritDoc} */\n+\n+\n+    @Override\n+    public Object tryExecute(Object o, Object identifier, Object arg) {\n         if (o != null && method != null\r\n-            // ensure method name matches the property name\r\n+            // ensure method name matches the property name\n             && property.equals(identifier)\r\n-            // object class should be same as executor's method declaring class\r\n-            && objectClass.equals(o.getClass())\r\n-            // we are guaranteed the method has one parameter since it is a set(x)\r\n-            && (arg == null || method.getParameterTypes()[0].equals(arg.getClass()))) {\r\n-            try {\r\n-                return execute(o, arg);\r\n-            } catch (InvocationTargetException xinvoke) {\r\n-                return TRY_FAILED; // fail\r\n-            } catch (IllegalAccessException xill) {\r\n-                return TRY_FAILED;// fail\r\n-            }\r\n-        }\r\n-        return TRY_FAILED;\r\n+            // object class should be same as executor's method declaring class && objectClass.equals(o.getClass())\r\n+            // we are guaranteed the method has one parameter since it is a set(x)\n+                && (arg == null || method.getParameterTypes()[0].equals(arg.getClass()))) {\n+            try {\n+                return execute(o, arg);\n+            } catch (InvocationTargetException xinvoke) {\n+                return TRY_FAILED; // fail\n+            } catch (IllegalAccessException xill) {\n+                return TRY_FAILED;// fail\n+            }\n+        }\n+        return TRY_FAILED;\n     }\r\n \r\n \r\n@@ -102,24 +111,28 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n      *@param property the name of the property to set\r\n      *@param arg the value to assign to the property\r\n      *@return the method if found, null otherwise\r\n-     */\r\n-    private static java.lang.reflect.Method discover(Introspector is,\r\n-            final Class<?> clazz, String property, Object arg) {\r\n-        // first, we introspect for the set<identifier> setter method\r\n-        Object[] params = {arg};\r\n-        StringBuilder sb = new StringBuilder(\"set\");\r\n+     */\n+\n+\n+    private static java.lang.reflect.Method discover(Introspector is,\n+                                                     final Class<?> clazz, String property, Object arg) {\r\n+        // first, we introspect for the set<identifier> setter method\n+        Object[] params = { arg };\n+        StringBuilder sb = new StringBuilder(\"set\");\n         sb.append(property);\r\n-        // uppercase nth char\r\n-        char c = sb.charAt(SET_START_INDEX);\r\n-        sb.setCharAt(SET_START_INDEX, Character.toUpperCase(c));\r\n+        // uppercase nth char\n+\n+        char c = sb.charAt(SET_START_INDEX);\n+        sb.setCharAt(SET_START_INDEX,\n+                     Character.toUpperCase(c));\n         java.lang.reflect.Method method = is.getMethod(clazz, sb.toString(), params);\r\n-        // lowercase nth char\r\n-        if (method == null) {\r\n-            sb.setCharAt(SET_START_INDEX, Character.toLowerCase(c));\r\n-            method = is.getMethod(clazz, sb.toString(), params);\r\n-        }\r\n-\r\n-        return method;\r\n-    }\r\n-}\r\n-\r\n+        // lowercase nth char\n+\n+        if (method == null) {\n+            sb.setCharAt(SET_START_INDEX,\n+                         Character.toLowerCase(c));\n+            method = is.getMethod(clazz, sb.toString(), params);\n+        }\n+        return method;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/15/PropertySetExecutor.java\nindex 277b801a562..d6528b28282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/15/PropertySetExecutor.java\n@@ -87,7 +87,7 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n             } catch (InvocationTargetException xinvoke) {\r\n                 return TRY_FAILED; // fail\r\n             } catch (IllegalAccessException xill) {\r\n-                return TRY_FAILED;// fail\r\n+                return TRY_FAILED; // fail\r\n             }\r\n         }\r\n         return TRY_FAILED;\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/15/PropertySetExecutor.java\nindex 277b801a562..d6528b28282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/15/PropertySetExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/15/PropertySetExecutor.java\n@@ -87,7 +87,7 @@ public final class PropertySetExecutor extends AbstractExecutor.Set {\n             } catch (InvocationTargetException xinvoke) {\r\n                 return TRY_FAILED; // fail\r\n             } catch (IllegalAccessException xill) {\r\n-                return TRY_FAILED;// fail\r\n+                return TRY_FAILED; // fail\r\n             }\r\n         }\r\n         return TRY_FAILED;\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}