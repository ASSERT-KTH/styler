{
    "project_name": "Stratio-bdt",
    "error_id": "90",
    "information": {
        "errors": [
            {
                "line": "766",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param zNode path at zookeeper\n     */\n    @When(\"^I remove the zNode '(.+?)'$\")\n    public void removeZNode(String zNode) throws Exception {\n        commonspec.getZookeeperSecClient().delete(zNode);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "766",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/90/WhenGSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/90/WhenGSpec.java\nindex 42ed50689e8..8e8d5fced8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/90/WhenGSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/90/WhenGSpec.java\n@@ -94,7 +94,9 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @When(\"^I drag '([^:]*?):(.+?)' and drop it to '([^:]*?):(.+?)'$\")\n-    public void seleniumDrag(String smethod, String source, String dmethod, String destination) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void seleniumDrag(String smethod, String source, String dmethod, String destination)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         Actions builder = new Actions(commonspec.getDriver());\n \n         List<WebElement> sourceElement = commonspec.locateElement(smethod, source, 1);\n@@ -113,13 +115,15 @@ public class WhenGSpec extends BaseGSpec {\n     public void seleniumClick(Integer index) throws InterruptedException {\n \n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         }\n     }\n@@ -134,15 +138,19 @@ public class WhenGSpec extends BaseGSpec {\n     public void seleniumDoubleClick(Integer index) throws InterruptedException {\n         Actions action = new Actions(commonspec.getDriver());\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n \n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n         }\n     }\n \n@@ -153,10 +161,13 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I clear the content on text input at index '(\\\\d+?)'$\")\n     public void seleniumClear(Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).isTextField(commonspec.getTextFieldCondition());\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements().get(index))\n+            .isTextField(commonspec.getTextFieldCondition());\n \n         commonspec.getPreviousWebElements().getPreviousWebElements().get(index).clear();\n     }\n@@ -169,11 +180,14 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I delete the text '(.+?)' on the element on index '(\\\\d+?)'( and replace it for '(.+?)')?$\")\n     public void seleniumDelete(String text, Integer index, String foo, String replacement) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n         Actions actions = new Actions(commonspec.getDriver());\n-        actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index), (text.length() / 2), 0);\n+        actions\n+            .moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index),\n+                (text.length() / 2), 0);\n         for (int i = 0; i < (text.length() / 2); i++) {\n             actions.sendKeys(Keys.ARROW_LEFT);\n             actions.build().perform();\n@@ -197,18 +211,21 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I type '(.+?)' on the element on index '(\\\\d+?)'$\")\n     public void seleniumType(@Transform(NullableStringConverter.class) String text, Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n         while (text.length() > 0) {\n             Actions actions = new Actions(commonspec.getDriver());\n             if (-1 == text.indexOf(\"\\\\n\")) {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n                 actions.click();\n                 actions.sendKeys(text);\n                 actions.build().perform();\n                 text = \"\";\n             } else {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n                 actions.click();\n                 actions.sendKeys(text.substring(0, text.indexOf(\"\\\\n\")));\n                 actions.build().perform();\n@@ -232,10 +249,12 @@ public class WhenGSpec extends BaseGSpec {\n      * @param index\n      */\n     @When(\"^I send '(.+?)'( on the element on index '(\\\\d+?)')?$\")\n-    public void seleniumKeys(@Transform(ArrayListConverter.class) List<String> strokes, String foo, Integer index) {\n+    public void seleniumKeys(@Transform(ArrayListConverter.class) List<String> strokes, String foo,\n+                             Integer index) {\n         if (index != null) {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n         }\n         assertThat(strokes).isNotEmpty();\n \n@@ -247,15 +266,21 @@ public class WhenGSpec extends BaseGSpec {\n                 }\n                 Keys[] csa = csl.toArray(new Keys[csl.size()]);\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa).perform();\n+                    new Actions(commonspec.getDriver())\n+                        .sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa)\n+                        .perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(csa);\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+                        .sendKeys(csa);\n                 }\n             } else {\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), Keys.valueOf(stroke)).perform();\n+                    new Actions(commonspec.getDriver())\n+                        .sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")),\n+                            Keys.valueOf(stroke)).perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(Keys.valueOf(stroke));\n+                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+                        .sendKeys(Keys.valueOf(stroke));\n                 }\n             }\n         }\n@@ -317,7 +342,9 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I send a '(.+?)' request to '(.+?)'( with user and password '(.+:.+?)')? based on '([^:]+?)'( as '(json|string)')? with:$\")\n-    public void sendRequest(String requestType, String endPoint, String foo, String loginInfo, String baseData, String baz, String type, DataTable modifications) throws Exception {\n+    public void sendRequest(String requestType, String endPoint, String foo, String loginInfo,\n+                            String baseData, String baz, String type, DataTable modifications)\n+        throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n@@ -333,8 +360,11 @@ public class WhenGSpec extends BaseGSpec {\n         }\n \n \n-        commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-        Future<Response> response = commonspec.generateRequest(requestType, false, user, password, endPoint, modifiedData, type, \"\");\n+        commonspec.getLogger()\n+            .debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint,\n+                modifiedData, type);\n+        Future<Response> response = commonspec\n+            .generateRequest(requestType, false, user, password, endPoint, modifiedData, type, \"\");\n \n         // Save response\n         commonspec.getLogger().debug(\"Saving response\");\n@@ -355,7 +385,9 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I send a '(.+?)' request to '(.+?)'( with user and password '(.+:.+?)')?( based on '([^:]+?)')?( as '(json|string)')?$\")\n-    public void sendRequestNoDataTable(String requestType, String endPoint, String foo, String loginInfo, String bar, String baseData, String baz, String type) throws Exception {\n+    public void sendRequestNoDataTable(String requestType, String endPoint, String foo,\n+                                       String loginInfo, String bar, String baseData, String baz,\n+                                       String type) throws Exception {\n         Future<Response> response;\n         String user = null;\n         String password = null;\n@@ -369,10 +401,13 @@ public class WhenGSpec extends BaseGSpec {\n             // Retrieve data\n             String retrievedData = commonspec.retrieveData(baseData, type);\n             // Generate request\n-            response = commonspec.generateRequest(requestType, false, user, password, endPoint, retrievedData, type, \"\");\n+            response = commonspec\n+                .generateRequest(requestType, false, user, password, endPoint, retrievedData, type,\n+                    \"\");\n         } else {\n             // Generate request\n-            response = commonspec.generateRequest(requestType, false, user, password, endPoint, \"\", type, \"\");\n+            response = commonspec\n+                .generateRequest(requestType, false, user, password, endPoint, \"\", type, \"\");\n         }\n \n         // Save response\n@@ -391,7 +426,9 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)'( so that the response( does not)? contains '(.+?)')?$\")\n-    public void sendRequestTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String foo, String contains, String responseVal) throws Exception {\n+    public void sendRequestTimeout(Integer timeout, Integer wait, String requestType,\n+                                   String endPoint, String foo, String contains, String responseVal)\n+        throws Exception {\n \n         AssertionError ex = null;\n         String type = \"\";\n@@ -411,7 +448,8 @@ public class WhenGSpec extends BaseGSpec {\n                 if (found && searchUntilContains) {\n                     break;\n                 }\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, \"\", type, \"\");\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint, \"\", type, \"\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n                 try {\n@@ -420,13 +458,15 @@ public class WhenGSpec extends BaseGSpec {\n                         found = true;\n                         timeout = i;\n                     } else {\n-                        assertThat(commonspec.getResponse().getResponse()).doesNotContain(responseVal);\n+                        assertThat(commonspec.getResponse().getResponse())\n+                            .doesNotContain(responseVal);\n                         found = false;\n                         timeout = i;\n                     }\n                 } catch (AssertionError e) {\n                     if (!found) {\n-                        commonspec.getLogger().info(\"Response value not found after \" + i + \" seconds\");\n+                        commonspec.getLogger()\n+                            .info(\"Response value not found after \" + i + \" seconds\");\n                     } else {\n                         commonspec.getLogger().info(\"Response value found after \" + i + \" seconds\");\n                     }\n@@ -441,14 +481,17 @@ public class WhenGSpec extends BaseGSpec {\n                 throw (ex);\n             }\n             if (searchUntilContains) {\n-                commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+                commonspec.getLogger()\n+                    .info(\"Success! Response value found after \" + timeout + \" seconds\");\n             } else {\n-                commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+                commonspec.getLogger()\n+                    .info(\"Success! Response value not found after \" + timeout + \" seconds\");\n             }\n         } else {\n \n             for (int i = 0; (i <= timeout); i += wait) {\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, \"\", type, \"\");\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint, \"\", type, \"\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n                 try {\n@@ -468,7 +511,8 @@ public class WhenGSpec extends BaseGSpec {\n     }\n \n     @When(\"^I login to '(.+?)' based on '([^:]+?)' as '(json|string)' with:$\")\n-    public void loginUser(String endPoint, String baseData, String type, DataTable modifications) throws Exception {\n+    public void loginUser(String endPoint, String baseData, String type, DataTable modifications)\n+        throws Exception {\n         sendRequest(\"POST\", endPoint, null, null, baseData, \"\", type, modifications);\n     }\n \n@@ -489,7 +533,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications all data in \"where\" clause. Where schema is \"empty\", query has not a where clause. So it is necessary to provide an empty table. Example:  ||.\n      */\n     @When(\"^I execute a query over fields '(.+?)' with schema '(.+?)' of type '(json|string)' with magic_column '(.+?)' from table: '(.+?)' using keyspace: '(.+?)' with:$\")\n-    public void sendQueryOfType(String fields, String schema, String type, String magic_column, String table, String keyspace, DataTable modifications) {\n+    public void sendQueryOfType(String fields, String schema, String type, String magic_column,\n+                                String table, String keyspace, DataTable modifications) {\n         try {\n             commonspec.setResultsType(\"cassandra\");\n             commonspec.getCassandraClient().useKeyspace(keyspace);\n@@ -503,14 +548,17 @@ public class WhenGSpec extends BaseGSpec {\n \n             } else if (!schema.equals(\"empty\") && magic_column.equals(\"empty\")) {\n                 String retrievedData = commonspec.retrieveData(schema, type);\n-                String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n+                String modifiedData =\n+                    commonspec.modifyData(retrievedData, type, modifications).toString();\n                 query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + modifiedData + \";\";\n \n \n             } else {\n                 String retrievedData = commonspec.retrieveData(schema, type);\n-                String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-                query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + magic_column + \" = '\" + modifiedData + \"';\";\n+                String modifiedData =\n+                    commonspec.modifyData(retrievedData, type, modifications).toString();\n+                query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + magic_column + \" = '\" +\n+                    modifiedData + \"';\";\n \n             }\n             commonspec.getLogger().debug(\"query: {}\", query);\n@@ -534,13 +582,15 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications modifications to perform in query\n      */\n     @When(\"^I execute a query '(.+?)' of type '(json|string)' in mongo '(.+?)' database using collection '(.+?)' with:$\")\n-    public void sendQueryOfType(String query, String type, String database, String collection, DataTable modifications) throws Exception {\n+    public void sendQueryOfType(String query, String type, String database, String collection,\n+                                DataTable modifications) throws Exception {\n         try {\n             commonspec.setResultsType(\"mongo\");\n             String retrievedData = commonspec.retrieveData(query, type);\n             String modifiedData = commonspec.modifyData(retrievedData, type, modifications);\n             commonspec.getMongoDBClient().connectToMongoDBDataBase(database);\n-            DBCollection dbCollection = commonspec.getMongoDBClient().getMongoDBCollection(collection);\n+            DBCollection dbCollection =\n+                commonspec.getMongoDBClient().getMongoDBCollection(collection);\n             DBObject dbObject = (DBObject) JSON.parse(modifiedData);\n             DBCursor cursor = dbCollection.find(dbObject);\n             commonspec.setMongoResults(cursor);\n@@ -560,13 +610,13 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I execute an elasticsearch query over index '(.*?)' and mapping '(.*?)' and column '(.*?)' with value '(.*?)' to '(.*?)'$\")\n     public void elasticSearchQueryWithFilter(String indexName, String mappingName, String\n-            columnName, String filterType, String value) {\n+        columnName, String filterType, String value) {\n         try {\n             commonspec.setResultsType(\"elasticsearch\");\n             commonspec.setElasticsearchResults(\n-                    commonspec.getElasticSearchClient()\n-                            .searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName,\n-                                    value, filterType)\n+                commonspec.getElasticSearchClient()\n+                    .searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName,\n+                        value, filterType)\n             );\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n@@ -588,11 +638,14 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications data introduced for query fields defined on schema\n      */\n     @When(\"^I create a Cassandra index named '(.+?)' with schema '(.+?)' of type '(json|string)' in table '(.+?)' using magic_column '(.+?)' using keyspace '(.+?)' with:$\")\n-    public void createCustomMapping(String index_name, String schema, String type, String table, String magic_column, String keyspace, DataTable modifications) throws Exception {\n+    public void createCustomMapping(String index_name, String schema, String type, String table,\n+                                    String magic_column, String keyspace, DataTable modifications)\n+        throws Exception {\n         String retrievedData = commonspec.retrieveData(schema, type);\n         String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-        String query = \"CREATE CUSTOM INDEX \" + index_name + \" ON \" + keyspace + \".\" + table + \"(\" + magic_column + \") \"\n-                + \"USING 'com.stratio.cassandra.lucene.Index' WITH OPTIONS = \" + modifiedData;\n+        String query = \"CREATE CUSTOM INDEX \" + index_name + \" ON \" + keyspace + \".\" + table + \"(\" +\n+            magic_column + \") \"\n+            + \"USING 'com.stratio.cassandra.lucene.Index' WITH OPTIONS = \" + modifiedData;\n         commonspec.getLogger().debug(\"Will execute a cassandra query: {}\", query);\n         commonspec.getCassandraClient().executeQuery(query);\n     }\n@@ -704,7 +757,8 @@ public class WhenGSpec extends BaseGSpec {\n                 commonspec.getLogger().debug(\"Alphabetical criteria selected.\");\n                 comparator = new Comparator<JsonValue>() {\n                     public int compare(JsonValue json1, JsonValue json2) {\n-                        int res = String.CASE_INSENSITIVE_ORDER.compare(json1.toString(), json2.toString());\n+                        int res = String.CASE_INSENSITIVE_ORDER\n+                            .compare(json1.toString(), json2.toString());\n                         if (res == 0) {\n                             res = json1.toString().compareTo(json2.toString());\n                         }\n@@ -758,6 +812,7 @@ public class WhenGSpec extends BaseGSpec {\n     public void topicToFile(String topic_name, String filename, String header) throws Exception {\n         commonspec.getKafkaUtils().resultsToFile(topic_name, filename, header);\n     }\n+\n     /**\n      * Delete zPath, it should be empty\n      *\n@@ -778,7 +833,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param ephemeral if it's created as ephemeral or not\n      */\n     @When(\"^I create the zNode '(.+?)'( with content '(.+?)')? which (IS|IS NOT) ephemeral$\")\n-    public void createZNode(String path, String foo, String content, boolean ephemeral) throws Exception {\n+    public void createZNode(String path, String foo, String content, boolean ephemeral)\n+        throws Exception {\n         if (content != null) {\n             commonspec.getZookeeperSecClient().zCreate(path, content, ephemeral);\n         } else {\n@@ -832,7 +888,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I index a document in the index named '(.+?)' using the mapping named '(.+?)' with key '(.+?)' and value '(.+?)'$\")\n-    public void indexElasticsearchDocument(String indexName, String mappingName, String key, String value) throws Exception {\n+    public void indexElasticsearchDocument(String indexName, String mappingName, String key,\n+                                           String value) throws Exception {\n         ArrayList<XContentBuilder> mappingsource = new ArrayList<XContentBuilder>();\n         XContentBuilder builder = jsonBuilder().startObject().field(key, value).endObject();\n         mappingsource.add(builder);\n@@ -888,7 +945,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I create file '(.+?)' based on '(.+?)' as '(.+?)' with:$\")\n-    public void createFile(String fileName, String baseData, String type, DataTable modifications) throws Exception {\n+    public void createFile(String fileName, String baseData, String type, DataTable modifications)\n+        throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n@@ -897,15 +955,18 @@ public class WhenGSpec extends BaseGSpec {\n         String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n \n         // Create file (temporary) and set path to be accessible within test\n-        File tempDirectory = new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n+        File tempDirectory =\n+            new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n         commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n+        Writer out = new BufferedWriter(\n+            new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n         try {\n             out.write(modifiedData);\n         } catch (Exception e) {\n-            commonspec.getLogger().error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n+            commonspec.getLogger()\n+                .error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n         } finally {\n             out.close();\n         }\n@@ -923,7 +984,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications modifications to perform in the content of the file\n      */\n     @When(\"^I read file '(.+?)' as '(.+?)' and save it in environment variable '(.+?)' with:$\")\n-    public void readFileToVariable(String baseData, String type, String envVar, DataTable modifications) throws Exception {\n+    public void readFileToVariable(String baseData, String type, String envVar,\n+                                   DataTable modifications) throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n@@ -944,7 +1006,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param envVar   name of the variable where to store the result\n      */\n     @When(\"^I read file '(.+?)' as '(.+?)' and save it in environment variable '(.+?)'$\")\n-    public void readFileToVariableNoDataTable(String baseData, String type, String envVar) throws Exception {\n+    public void readFileToVariableNoDataTable(String baseData, String type, String envVar)\n+        throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n@@ -957,7 +1020,8 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I search in LDAP using the filter '(.+?)' and the baseDn '(.+?)'$\")\n     public void searchLDAP(String filter, String baseDn) throws Exception {\n-        this.commonspec.setPreviousLdapResults(commonspec.getLdapUtils().search(new SearchRequest(baseDn, filter)));\n+        this.commonspec.setPreviousLdapResults(\n+            commonspec.getLdapUtils().search(new SearchRequest(baseDn, filter)));\n     }\n \n     /**\n@@ -972,15 +1036,18 @@ public class WhenGSpec extends BaseGSpec {\n         String retrievedData = commonspec.asYaml(fileToConvert);\n \n         // Create file (temporary) and set path to be accessible within test\n-        File tempDirectory = new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n+        File tempDirectory =\n+            new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n         commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n+        Writer out = new BufferedWriter(\n+            new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n         try {\n             out.write(retrievedData);\n         } catch (Exception e) {\n-            commonspec.getLogger().error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n+            commonspec.getLogger()\n+                .error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n             throw new RuntimeException(\"Custom file {} hasn't been created\");\n         } finally {\n             out.close();\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/90/WhenGSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/90/WhenGSpec.java\nindex 42ed50689e8..4ced359df2e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/90/WhenGSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/90/WhenGSpec.java\n@@ -52,7 +52,6 @@ import java.util.regex.Pattern;\n import static com.stratio.qa.assertions.Assertions.assertThat;\n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n \n-\n /**\n  * Generic When Specs.\n  *\n@@ -566,8 +565,7 @@ public class WhenGSpec extends BaseGSpec {\n             commonspec.setElasticsearchResults(\n                     commonspec.getElasticSearchClient()\n                             .searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName,\n-                                    value, filterType)\n-            );\n+                                    value, filterType));\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n             commonspec.getLogger().debug(e.toString());\n@@ -758,7 +756,8 @@ public class WhenGSpec extends BaseGSpec {\n     public void topicToFile(String topic_name, String filename, String header) throws Exception {\n         commonspec.getKafkaUtils().resultsToFile(topic_name, filename, header);\n     }\n-    /**\n+\n+/**\n      * Delete zPath, it should be empty\n      *\n      * @param zNode path at zookeeper\n@@ -967,8 +966,7 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I convert the json file '(.+?)' to yaml file '(.+?)'$\")\n     public void convertJsonToYaml(String fileToConvert, String fileName) throws Exception {\n-\n-        // Retrieve data\n+    // Retrieve data\n         String retrievedData = commonspec.asYaml(fileToConvert);\n \n         // Create file (temporary) and set path to be accessible within test\n@@ -1073,4 +1071,4 @@ public class WhenGSpec extends BaseGSpec {\n         Assertions.assertThat(value).as(\"Inactive frameworks\").doesNotContain(framework);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "766",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "766",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}