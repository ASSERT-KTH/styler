{
    "project_name": "OpenEMS-openems",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "393",
                "column": "74",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\t@Override\n\tpublic String debugLog() {\n\t\treturn this.stateMachine.getCurrentState().asCamelCase() + //\n\t\t\t\t\"|\" + this.getCurrentState().asCamelCase();\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "393",
                    "column": "74",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "393",
                    "column": "62",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/25/KacoBlueplanetGridsaveImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/25/KacoBlueplanetGridsaveImpl.java\nindex 683b841489d..09664047a0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/25/KacoBlueplanetGridsaveImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/intellij/25/KacoBlueplanetGridsaveImpl.java\n@@ -64,421 +64,421 @@ import io.openems.edge.timedata.api.utils.CalculateEnergyFromPower;\n \n @Designate(ocd = Config.class, factory = true)\n @Component(//\n-\t\tname = \"Battery-Inverter.Kaco.BlueplanetGridsave\", //\n-\t\timmediate = true, //\n-\t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE //\n+    name = \"Battery-Inverter.Kaco.BlueplanetGridsave\", //\n+    immediate = true, //\n+    configurationPolicy = ConfigurationPolicy.REQUIRE //\n )\n public class KacoBlueplanetGridsaveImpl extends AbstractSunSpecBatteryInverter implements KacoBlueplanetGridsave,\n-\t\tManagedSymmetricBatteryInverter, SymmetricBatteryInverter, OpenemsComponent, TimedataProvider, StartStoppable {\n-\n-\tprivate static final int UNIT_ID = 1;\n-\tprivate static final int READ_FROM_MODBUS_BLOCK = 1;\n-\n-\t@Reference\n-\tprivate Cycle cycle;\n-\n-\t@Reference\n-\tprivate ConfigurationAdmin cm;\n-\n-\t@Reference\n-\tprivate ComponentManager componentManager;\n-\n-\t@Reference(policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.OPTIONAL)\n-\tprivate volatile Timedata timedata = null;\n-\n-\tprivate final Logger log = LoggerFactory.getLogger(KacoBlueplanetGridsaveImpl.class);\n-\n-\tprivate final CalculateEnergyFromPower calculateChargeEnergy = new CalculateEnergyFromPower(this,\n-\t\t\tSymmetricBatteryInverter.ChannelId.ACTIVE_CHARGE_ENERGY);\n-\tprivate final CalculateEnergyFromPower calculateDischargeEnergy = new CalculateEnergyFromPower(this,\n-\t\t\tSymmetricBatteryInverter.ChannelId.ACTIVE_DISCHARGE_ENERGY);\n-\n-\t/**\n-\t * Manages the {@link State}s of the StateMachine.\n-\t */\n-\tprivate final StateMachine stateMachine = new StateMachine(State.UNDEFINED);\n-\n-\tprivate Config config;\n-\n-\t/**\n-\t * Kaco 92 does not have model 64203.\n-\t */\n-\tprivate boolean hasSunSpecModel64203 = false;\n-\n-\t/**\n-\t * Active SunSpec models for KACO blueplanet gridsave. Commented models are\n-\t * available but not used currently.\n-\t */\n-\tprivate static final Map<SunSpecModel, Priority> ACTIVE_MODELS = ImmutableMap.<SunSpecModel, Priority>builder()\n-\t\t\t.put(DefaultSunSpecModel.S_1, Priority.LOW) //\n-\t\t\t.put(DefaultSunSpecModel.S_103, Priority.LOW) //\n-\t\t\t.put(DefaultSunSpecModel.S_121, Priority.LOW) //\n-\t\t\t.put(KacoSunSpecModel.S_64201, Priority.HIGH) //\n-\t\t\t.put(KacoSunSpecModel.S_64202, Priority.LOW) //\n-\t\t\t.put(KacoSunSpecModel.S_64203, Priority.LOW) //\n-\t\t\t.put(KacoSunSpecModel.S_64204, Priority.LOW) //\n-\t\t\t.build();\n-\n-\t// Further available SunSpec blocks provided by KACO blueplanet are:\n-\t// .put(SunSpecModel.S_113, Priority.LOW) //\n-\t// .put(SunSpecModel.S_120, Priority.LOW) //\n-\t// .put(SunSpecModel.S_122, Priority.LOW) //\n-\t// .put(SunSpecModel.S_123, Priority.LOW) //\n-\t// .put(SunSpecModel.S_126, Priority.LOW) //\n-\t// .put(SunSpecModel.S_129, Priority.LOW) //\n-\t// .put(SunSpecModel.S_130, Priority.LOW) //\n-\t// .put(SunSpecModel.S_132, Priority.LOW) //\n-\t// .put(SunSpecModel.S_135, Priority.LOW) //\n-\t// .put(SunSpecModel.S_136, Priority.LOW) //\n-\t// .put(SunSpecModel.S_160, Priority.LOW) //\n-\n-\t@Activate\n-\tpublic KacoBlueplanetGridsaveImpl() throws OpenemsException {\n-\t\tsuper(//\n-\t\t\t\tACTIVE_MODELS, //\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tSymmetricBatteryInverter.ChannelId.values(), //\n-\t\t\t\tManagedSymmetricBatteryInverter.ChannelId.values(), //\n-\t\t\t\tStartStoppable.ChannelId.values(), //\n-\t\t\t\tKacoBlueplanetGridsave.ChannelId.values() //\n-\t\t);\n-\t\tthis._setGridMode(GridMode.ON_GRID);\n-\t}\n-\n-\t@Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n-\tprotected void setModbus(BridgeModbus modbus) {\n-\t\tsuper.setModbus(modbus);\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) throws OpenemsException {\n-\t\tif (super.activate(context, config.id(), config.alias(), config.enabled(), UNIT_ID, this.cm, \"Modbus\",\n-\t\t\t\tconfig.modbus_id(), READ_FROM_MODBUS_BLOCK)) {\n-\t\t\treturn;\n-\t\t}\n-\t\tthis.config = config;\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\t@Override\n-\tpublic void run(Battery battery, int setActivePower, int setReactivePower) throws OpenemsNamedException {\n-\t\t// Store the current State\n-\t\tthis.channel(KacoBlueplanetGridsave.ChannelId.STATE_MACHINE).setNextValue(this.stateMachine.getCurrentState());\n-\n-\t\t// Initialize 'Start-Stop' Channel\n-\t\tthis._setStartStop(StartStop.UNDEFINED);\n-\n-\t\t// Stop early if initialization is not finished\n-\t\tif (!this.isSunSpecInitializationCompleted()) {\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t// Set Display Information\n-\t\tthis.setDisplayInformation(battery);\n-\n-\t\t// Set Battery Limits\n-\t\tthis.setBatteryLimits(battery);\n-\n-\t\t// Calculate the Energy values from ActivePower.\n-\t\tthis.calculateEnergy();\n-\n-\t\tif (this.config.activateWatchdog()) {\n-\t\t\t// Trigger the Watchdog\n-\t\t\tthis.triggerWatchdog();\n-\t\t}\n-\n-\t\t// Set State-Channels\n-\t\tthis.setStateChannels();\n-\n-\t\t// Prepare Context\n-\t\tContext context = new Context(this, battery, this.config, setActivePower, setReactivePower);\n-\n-\t\t// Call the StateMachine\n-\t\ttry {\n-\t\t\tthis.stateMachine.run(context);\n-\n-\t\t\tthis.channel(KacoBlueplanetGridsave.ChannelId.RUN_FAILED).setNextValue(false);\n-\n-\t\t} catch (OpenemsNamedException e) {\n-\t\t\tthis.channel(KacoBlueplanetGridsave.ChannelId.RUN_FAILED).setNextValue(true);\n-\t\t\tthis.logError(this.log, \"StateMachine failed: \" + e.getMessage());\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic BatteryInverterConstraint[] getStaticConstraints() throws OpenemsException {\n-\t\tif (this.stateMachine.getCurrentState() == State.RUNNING) {\n-\t\t\treturn BatteryInverterConstraint.NO_CONSTRAINTS;\n-\n-\t\t} else {\n-\t\t\t// Block any power as long as we are not RUNNING\n-\t\t\treturn new BatteryInverterConstraint[] { //\n-\t\t\t\t\tnew BatteryInverterConstraint(\"KACO inverter not ready\", Phase.ALL, Pwr.REACTIVE, //\n-\t\t\t\t\t\t\tRelationship.EQUALS, 0d), //\n-\t\t\t\t\tnew BatteryInverterConstraint(\"KACO inverter not ready\", Phase.ALL, Pwr.ACTIVE, //\n-\t\t\t\t\t\t\tRelationship.EQUALS, 0d) //\n-\t\t\t};\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Sets the Battery Limits.\n-\t * \n-\t * @param battery the linked {@link Battery}\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprivate void setBatteryLimits(Battery battery) throws OpenemsNamedException {\n-\t\t// Discharge Min Voltage\n-\t\tFloatWriteChannel disMinVChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.DIS_MIN_V_0);\n-\t\tInteger dischargeMinVoltage = battery.getDischargeMinVoltage().get();\n-\t\tif (Objects.equal(dischargeMinVoltage, 0)) {\n-\t\t\tdischargeMinVoltage = null; // according to setup manual DIS_MIN_V must not be zero\n-\t\t}\n-\t\tdisMinVChannel.setNextWriteValueFromObject(dischargeMinVoltage);\n-\n-\t\t// Charge Max Voltage\n-\t\tFloatWriteChannel chaMaxVChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.CHA_MAX_V_0);\n-\t\tInteger chargeMaxVoltage = battery.getChargeMaxVoltage().get();\n-\t\tif (Objects.equal(chargeMaxVoltage, 0)) {\n-\t\t\tchargeMaxVoltage = null; // according to setup manual CHA_MAX_V must not be zero\n-\t\t}\n-\t\tchaMaxVChannel.setNextWriteValueFromObject(chargeMaxVoltage);\n-\n-\t\t// Discharge Max Current\n-\t\t// negative value is corrected as zero\n-\t\tFloatWriteChannel disMaxAChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.DIS_MAX_A_0);\n-\t\tdisMaxAChannel.setNextWriteValue(Math.max(0F, battery.getDischargeMaxCurrent().orElse(0)));\n-\n-\t\t// Charge Max Current\n-\t\t// negative value is corrected as zero\n-\t\tFloatWriteChannel chaMaxAChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.CHA_MAX_A_0);\n-\t\tchaMaxAChannel.setNextWriteValue(Math.max(0F, battery.getChargeMaxCurrent().orElse(0)));\n-\n-\t\t// Activate Battery values\n-\t\tEnumWriteChannel enLimitChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.EN_LIMIT_0);\n-\t\tenLimitChannel.setNextWriteValue(S64202EnLimit.ACTIVATE);\n-\t}\n-\n-\t/**\n-\t * Sets the information that is shown on the Display, like State-of-Charge,\n-\t * State-of-Health and Max-Cell-Temperature.\n-\t * \n-\t * @param battery the linked {@link Battery}\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprivate void setDisplayInformation(Battery battery) throws OpenemsNamedException {\n-\t\tif (this.hasSunSpecModel64203) {\n-\t\t\t// State-of-Charge\n-\t\t\tFloatWriteChannel batSocChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64203.BAT_SOC_0);\n-\t\t\tbatSocChannel.setNextWriteValueFromObject(battery.getSoc().get());\n-\n-\t\t\t// State-of-Health\n-\t\t\tFloatWriteChannel batSohChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64203.BAT_SOH_0);\n-\t\t\tbatSohChannel.setNextWriteValueFromObject(battery.getSoh().get());\n-\n-\t\t\t// Max-Cell-Temperature\n-\t\t\tFloatWriteChannel batTempChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64203.BAT_TEMP_0);\n-\t\t\tbatTempChannel.setNextWriteValueFromObject(battery.getMaxCellTemperature().get());\n-\t\t}\n-\t}\n-\n-\tprivate Instant lastTriggerWatchdog = Instant.MIN;\n-\n-\t/**\n-\t * Triggers the Watchdog after WATCHDOG_TRIGGER passed.\n-\t * \n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprivate void triggerWatchdog() throws OpenemsNamedException {\n-\t\tInstant now = Instant.now(this.componentManager.getClock());\n-\t\tif (Duration.between(this.lastTriggerWatchdog, now)\n-\t\t\t\t.getSeconds() >= KacoBlueplanetGridsave.WATCHDOG_TRIGGER_SECONDS) {\n-\t\t\tIntegerWriteChannel watchdogChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64201.WATCHDOG);\n-\t\t\twatchdogChannel.setNextWriteValue(KacoBlueplanetGridsave.WATCHDOG_TIMEOUT_SECONDS);\n-\t\t\tthis.lastTriggerWatchdog = now;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Sets the State-Channels, e.g. Warnings and Faults.\n-\t * \n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprivate void setStateChannels() throws OpenemsNamedException {\n-\t\t/*\n-\t\t * INVERTER_CURRENT_STATE_FAULT\n-\t\t */\n-\t\tStateChannel inverterCurrentStateChannel = this\n-\t\t\t\t.channel(KacoBlueplanetGridsave.ChannelId.INVERTER_CURRENT_STATE_FAULT);\n-\t\tswitch (this.getCurrentState()) {\n-\t\tcase FAULT:\n-\t\tcase UNDEFINED:\n-\t\tcase NO_ERROR_PENDING:\n-\t\t\tinverterCurrentStateChannel.setNextValue(true);\n-\t\t\tbreak;\n-\t\tcase GRID_CONNECTED:\n-\t\tcase GRID_PRE_CONNECTED:\n-\t\tcase MPPT:\n-\t\tcase OFF:\n-\t\tcase PRECHARGE:\n-\t\tcase SHUTTING_DOWN:\n-\t\tcase SLEEPING:\n-\t\tcase STANDBY:\n-\t\tcase STARTING:\n-\t\tcase THROTTLED:\n-\t\t\tinverterCurrentStateChannel.setNextValue(false);\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Mark SunSpec initialization completed; this takes some time at startup.\n-\t */\n-\t@Override\n-\tprotected void onSunSpecInitializationCompleted() {\n-\t\tthis.addCopyListener(//\n-\t\t\t\tthis.getSunSpecChannel(DefaultSunSpecModel.S121.W_MAX).get(), //\n-\t\t\t\tSymmetricBatteryInverter.ChannelId.MAX_APPARENT_POWER //\n-\t\t);\n-\t\tthis.addCopyListener(//\n-\t\t\t\tthis.getSunSpecChannel(KacoSunSpecModel.S64201.W).get(), //\n-\t\t\t\tSymmetricBatteryInverter.ChannelId.ACTIVE_POWER //\n-\t\t);\n-\t\tthis.addCopyListener(//\n-\t\t\t\tthis.getSunSpecChannel(KacoSunSpecModel.S64201.V_AR).get(), //\n-\t\t\t\tSymmetricBatteryInverter.ChannelId.REACTIVE_POWER //\n-\t\t);\n-\t}\n-\n-\t@Override\n-\tpublic S64201CurrentState getCurrentState() {\n-\t\tOptional<EnumReadChannel> channel = this.getSunSpecChannel(KacoSunSpecModel.S64201.CURRENT_STATE);\n-\t\tif (channel.isPresent()) {\n-\t\t\treturn channel.get().value().asEnum();\n-\t\t} else {\n-\t\t\treturn S64201CurrentState.UNDEFINED;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tprotected SunSpecModel getSunSpecModel(int blockId) throws IllegalArgumentException {\n-\t\treturn KacoSunSpecModel.valueOf(\"S_\" + blockId);\n-\t}\n-\n-\t/**\n-\t * Calculate the Power-Precision from the Max Apparent Power using the SetPoint\n-\t * scale-factor.\n-\t */\n-\t@Override\n-\tpublic int getPowerPrecision() {\n-\t\tOptional<IntegerReadChannel> scalefactorChannel = this.getSunSpecChannel(KacoSunSpecModel.S64201.W_SET_PCT_SF);\n-\t\tif (!scalefactorChannel.isPresent()) {\n-\t\t\treturn 1;\n-\t\t}\n-\t\tValue<Integer> scalefactor = scalefactorChannel.get().value();\n-\t\tValue<Integer> maxApparentPower = this.getMaxApparentPower();\n-\t\tif (!scalefactor.isDefined() || !maxApparentPower.isDefined()) {\n-\t\t\treturn 1;\n-\t\t}\n-\t\t// Take one percent (0.01) of MaxApparentPower and then apply scalefactor\n-\t\treturn (int) (maxApparentPower.get() * 0.01 * Math.pow(10, scalefactor.get()));\n-\t}\n-\n-\t@Override\n-\tpublic String debugLog() {\n-\t\treturn this.stateMachine.getCurrentState().asCamelCase() + //\n-\t\t\t\t\"|\" + this.getCurrentState().asCamelCase();\n-\t}\n-\n-\tprivate final AtomicReference<StartStop> startStopTarget = new AtomicReference<StartStop>(StartStop.UNDEFINED);\n-\n-\t@Override\n-\tpublic void setStartStop(StartStop value) {\n-\t\tif (this.startStopTarget.getAndSet(value) != value) {\n-\t\t\t// Set only if value changed\n-\t\t\tthis.stateMachine.forceNextState(State.UNDEFINED);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic StartStop getStartStopTarget() {\n-\t\tswitch (this.config.startStop()) {\n-\t\tcase AUTO:\n-\t\t\t// read StartStop-Channel\n-\t\t\treturn this.startStopTarget.get();\n-\n-\t\tcase START:\n-\t\t\t// force START\n-\t\t\treturn StartStop.START;\n-\n-\t\tcase STOP:\n-\t\t\t// force STOP\n-\t\t\treturn StartStop.STOP;\n-\t\t}\n-\n-\t\tassert false;\n-\t\treturn StartStop.UNDEFINED; // can never happen\n-\t}\n-\n-\t/**\n-\t * Adds a Copy-Listener. It listens on setNextValue() and copies the value to\n-\t * the target channel.\n-\t * \n-\t * @param <T>             the Channel type\n-\t * @param sourceChannel   the source Channel\n-\t * @param targetChannelId the target ChannelId\n-\t */\n-\tprivate <T> void addCopyListener(Channel<T> sourceChannel,\n-\t\t\tio.openems.edge.common.channel.ChannelId targetChannelId) {\n-\t\tConsumer<Value<T>> callback = (value) -> {\n-\t\t\tChannel<T> targetChannel = this.channel(targetChannelId);\n-\t\t\ttargetChannel.setNextValue(value);\n-\t\t};\n-\t\tsourceChannel.onSetNextValue(callback);\n-\t\tcallback.accept(sourceChannel.getNextValue());\n-\t}\n-\n-\t@Override\n-\tpublic <T extends Channel<?>> T getSunSpecChannelOrError(SunSpecPoint point) throws OpenemsException {\n-\t\treturn super.getSunSpecChannelOrError(point);\n-\t}\n-\n-\t/**\n-\t * Calculate the Energy values from ActivePower.\n-\t */\n-\tprivate void calculateEnergy() {\n-\t\t// Calculate Energy\n-\t\tInteger activePower = this.getActivePower().get();\n-\t\tif (activePower == null) {\n-\t\t\t// Not available\n-\t\t\tthis.calculateChargeEnergy.update(null);\n-\t\t\tthis.calculateDischargeEnergy.update(null);\n-\t\t} else if (activePower > 0) {\n-\t\t\t// Buy-From-Grid\n-\t\t\tthis.calculateChargeEnergy.update(0);\n-\t\t\tthis.calculateDischargeEnergy.update(activePower);\n-\t\t} else {\n-\t\t\t// Sell-To-Grid\n-\t\t\tthis.calculateChargeEnergy.update(activePower * -1);\n-\t\t\tthis.calculateDischargeEnergy.update(0);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Timedata getTimedata() {\n-\t\treturn this.timedata;\n-\t}\n-\n-\tprotected void addBlock(int startAddress, SunSpecModel model, Priority priority) throws OpenemsException {\n-\t\tsuper.addBlock(startAddress, model, priority);\n-\n-\t\t// Mark S_64203 as available\n-\t\tif (model.equals(KacoSunSpecModel.S_64203)) {\n-\t\t\tthis.hasSunSpecModel64203 = true;\n-\t\t}\n-\t}\n+    ManagedSymmetricBatteryInverter, SymmetricBatteryInverter, OpenemsComponent, TimedataProvider, StartStoppable {\n+\n+  private static final int UNIT_ID = 1;\n+  private static final int READ_FROM_MODBUS_BLOCK = 1;\n+\n+  @Reference\n+  private Cycle cycle;\n+\n+  @Reference\n+  private ConfigurationAdmin cm;\n+\n+  @Reference\n+  private ComponentManager componentManager;\n+\n+  @Reference(policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.OPTIONAL)\n+  private volatile Timedata timedata = null;\n+\n+  private final Logger log = LoggerFactory.getLogger(KacoBlueplanetGridsaveImpl.class);\n+\n+  private final CalculateEnergyFromPower calculateChargeEnergy = new CalculateEnergyFromPower(this,\n+      SymmetricBatteryInverter.ChannelId.ACTIVE_CHARGE_ENERGY);\n+  private final CalculateEnergyFromPower calculateDischargeEnergy = new CalculateEnergyFromPower(this,\n+      SymmetricBatteryInverter.ChannelId.ACTIVE_DISCHARGE_ENERGY);\n+\n+  /**\n+   * Manages the {@link State}s of the StateMachine.\n+   */\n+  private final StateMachine stateMachine = new StateMachine(State.UNDEFINED);\n+\n+  private Config config;\n+\n+  /**\n+   * Kaco 92 does not have model 64203.\n+   */\n+  private boolean hasSunSpecModel64203 = false;\n+\n+  /**\n+   * Active SunSpec models for KACO blueplanet gridsave. Commented models are\n+   * available but not used currently.\n+   */\n+  private static final Map<SunSpecModel, Priority> ACTIVE_MODELS = ImmutableMap.<SunSpecModel, Priority>builder()\n+      .put(DefaultSunSpecModel.S_1, Priority.LOW) //\n+      .put(DefaultSunSpecModel.S_103, Priority.LOW) //\n+      .put(DefaultSunSpecModel.S_121, Priority.LOW) //\n+      .put(KacoSunSpecModel.S_64201, Priority.HIGH) //\n+      .put(KacoSunSpecModel.S_64202, Priority.LOW) //\n+      .put(KacoSunSpecModel.S_64203, Priority.LOW) //\n+      .put(KacoSunSpecModel.S_64204, Priority.LOW) //\n+      .build();\n+\n+  // Further available SunSpec blocks provided by KACO blueplanet are:\n+  // .put(SunSpecModel.S_113, Priority.LOW) //\n+  // .put(SunSpecModel.S_120, Priority.LOW) //\n+  // .put(SunSpecModel.S_122, Priority.LOW) //\n+  // .put(SunSpecModel.S_123, Priority.LOW) //\n+  // .put(SunSpecModel.S_126, Priority.LOW) //\n+  // .put(SunSpecModel.S_129, Priority.LOW) //\n+  // .put(SunSpecModel.S_130, Priority.LOW) //\n+  // .put(SunSpecModel.S_132, Priority.LOW) //\n+  // .put(SunSpecModel.S_135, Priority.LOW) //\n+  // .put(SunSpecModel.S_136, Priority.LOW) //\n+  // .put(SunSpecModel.S_160, Priority.LOW) //\n+\n+  @Activate\n+  public KacoBlueplanetGridsaveImpl() throws OpenemsException {\n+    super(//\n+        ACTIVE_MODELS, //\n+        OpenemsComponent.ChannelId.values(), //\n+        SymmetricBatteryInverter.ChannelId.values(), //\n+        ManagedSymmetricBatteryInverter.ChannelId.values(), //\n+        StartStoppable.ChannelId.values(), //\n+        KacoBlueplanetGridsave.ChannelId.values() //\n+    );\n+    this._setGridMode(GridMode.ON_GRID);\n+  }\n+\n+  @Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n+  protected void setModbus(BridgeModbus modbus) {\n+    super.setModbus(modbus);\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) throws OpenemsException {\n+    if (super.activate(context, config.id(), config.alias(), config.enabled(), UNIT_ID, this.cm, \"Modbus\",\n+        config.modbus_id(), READ_FROM_MODBUS_BLOCK)) {\n+      return;\n+    }\n+    this.config = config;\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  @Override\n+  public void run(Battery battery, int setActivePower, int setReactivePower) throws OpenemsNamedException {\n+    // Store the current State\n+    this.channel(KacoBlueplanetGridsave.ChannelId.STATE_MACHINE).setNextValue(this.stateMachine.getCurrentState());\n+\n+    // Initialize 'Start-Stop' Channel\n+    this._setStartStop(StartStop.UNDEFINED);\n+\n+    // Stop early if initialization is not finished\n+    if (!this.isSunSpecInitializationCompleted()) {\n+      return;\n+    }\n+\n+    // Set Display Information\n+    this.setDisplayInformation(battery);\n+\n+    // Set Battery Limits\n+    this.setBatteryLimits(battery);\n+\n+    // Calculate the Energy values from ActivePower.\n+    this.calculateEnergy();\n+\n+    if (this.config.activateWatchdog()) {\n+      // Trigger the Watchdog\n+      this.triggerWatchdog();\n+    }\n+\n+    // Set State-Channels\n+    this.setStateChannels();\n+\n+    // Prepare Context\n+    Context context = new Context(this, battery, this.config, setActivePower, setReactivePower);\n+\n+    // Call the StateMachine\n+    try {\n+      this.stateMachine.run(context);\n+\n+      this.channel(KacoBlueplanetGridsave.ChannelId.RUN_FAILED).setNextValue(false);\n+\n+    } catch (OpenemsNamedException e) {\n+      this.channel(KacoBlueplanetGridsave.ChannelId.RUN_FAILED).setNextValue(true);\n+      this.logError(this.log, \"StateMachine failed: \" + e.getMessage());\n+    }\n+  }\n+\n+  @Override\n+  public BatteryInverterConstraint[] getStaticConstraints() throws OpenemsException {\n+    if (this.stateMachine.getCurrentState() == State.RUNNING) {\n+      return BatteryInverterConstraint.NO_CONSTRAINTS;\n+\n+    } else {\n+      // Block any power as long as we are not RUNNING\n+      return new BatteryInverterConstraint[] { //\n+          new BatteryInverterConstraint(\"KACO inverter not ready\", Phase.ALL, Pwr.REACTIVE, //\n+              Relationship.EQUALS, 0d), //\n+          new BatteryInverterConstraint(\"KACO inverter not ready\", Phase.ALL, Pwr.ACTIVE, //\n+              Relationship.EQUALS, 0d) //\n+      };\n+    }\n+  }\n+\n+  /**\n+   * Sets the Battery Limits.\n+   *\n+   * @param battery the linked {@link Battery}\n+   * @throws OpenemsNamedException on error\n+   */\n+  private void setBatteryLimits(Battery battery) throws OpenemsNamedException {\n+    // Discharge Min Voltage\n+    FloatWriteChannel disMinVChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.DIS_MIN_V_0);\n+    Integer dischargeMinVoltage = battery.getDischargeMinVoltage().get();\n+    if (Objects.equal(dischargeMinVoltage, 0)) {\n+      dischargeMinVoltage = null; // according to setup manual DIS_MIN_V must not be zero\n+    }\n+    disMinVChannel.setNextWriteValueFromObject(dischargeMinVoltage);\n+\n+    // Charge Max Voltage\n+    FloatWriteChannel chaMaxVChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.CHA_MAX_V_0);\n+    Integer chargeMaxVoltage = battery.getChargeMaxVoltage().get();\n+    if (Objects.equal(chargeMaxVoltage, 0)) {\n+      chargeMaxVoltage = null; // according to setup manual CHA_MAX_V must not be zero\n+    }\n+    chaMaxVChannel.setNextWriteValueFromObject(chargeMaxVoltage);\n+\n+    // Discharge Max Current\n+    // negative value is corrected as zero\n+    FloatWriteChannel disMaxAChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.DIS_MAX_A_0);\n+    disMaxAChannel.setNextWriteValue(Math.max(0F, battery.getDischargeMaxCurrent().orElse(0)));\n+\n+    // Charge Max Current\n+    // negative value is corrected as zero\n+    FloatWriteChannel chaMaxAChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.CHA_MAX_A_0);\n+    chaMaxAChannel.setNextWriteValue(Math.max(0F, battery.getChargeMaxCurrent().orElse(0)));\n+\n+    // Activate Battery values\n+    EnumWriteChannel enLimitChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64202.EN_LIMIT_0);\n+    enLimitChannel.setNextWriteValue(S64202EnLimit.ACTIVATE);\n+  }\n+\n+  /**\n+   * Sets the information that is shown on the Display, like State-of-Charge,\n+   * State-of-Health and Max-Cell-Temperature.\n+   *\n+   * @param battery the linked {@link Battery}\n+   * @throws OpenemsNamedException on error\n+   */\n+  private void setDisplayInformation(Battery battery) throws OpenemsNamedException {\n+    if (this.hasSunSpecModel64203) {\n+      // State-of-Charge\n+      FloatWriteChannel batSocChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64203.BAT_SOC_0);\n+      batSocChannel.setNextWriteValueFromObject(battery.getSoc().get());\n+\n+      // State-of-Health\n+      FloatWriteChannel batSohChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64203.BAT_SOH_0);\n+      batSohChannel.setNextWriteValueFromObject(battery.getSoh().get());\n+\n+      // Max-Cell-Temperature\n+      FloatWriteChannel batTempChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64203.BAT_TEMP_0);\n+      batTempChannel.setNextWriteValueFromObject(battery.getMaxCellTemperature().get());\n+    }\n+  }\n+\n+  private Instant lastTriggerWatchdog = Instant.MIN;\n+\n+  /**\n+   * Triggers the Watchdog after WATCHDOG_TRIGGER passed.\n+   *\n+   * @throws OpenemsNamedException on error\n+   */\n+  private void triggerWatchdog() throws OpenemsNamedException {\n+    Instant now = Instant.now(this.componentManager.getClock());\n+    if (Duration.between(this.lastTriggerWatchdog, now)\n+        .getSeconds() >= KacoBlueplanetGridsave.WATCHDOG_TRIGGER_SECONDS) {\n+      IntegerWriteChannel watchdogChannel = this.getSunSpecChannelOrError(KacoSunSpecModel.S64201.WATCHDOG);\n+      watchdogChannel.setNextWriteValue(KacoBlueplanetGridsave.WATCHDOG_TIMEOUT_SECONDS);\n+      this.lastTriggerWatchdog = now;\n+    }\n+  }\n+\n+  /**\n+   * Sets the State-Channels, e.g. Warnings and Faults.\n+   *\n+   * @throws OpenemsNamedException on error\n+   */\n+  private void setStateChannels() throws OpenemsNamedException {\n+    /*\n+     * INVERTER_CURRENT_STATE_FAULT\n+     */\n+    StateChannel inverterCurrentStateChannel = this\n+        .channel(KacoBlueplanetGridsave.ChannelId.INVERTER_CURRENT_STATE_FAULT);\n+    switch (this.getCurrentState()) {\n+      case FAULT:\n+      case UNDEFINED:\n+      case NO_ERROR_PENDING:\n+        inverterCurrentStateChannel.setNextValue(true);\n+        break;\n+      case GRID_CONNECTED:\n+      case GRID_PRE_CONNECTED:\n+      case MPPT:\n+      case OFF:\n+      case PRECHARGE:\n+      case SHUTTING_DOWN:\n+      case SLEEPING:\n+      case STANDBY:\n+      case STARTING:\n+      case THROTTLED:\n+        inverterCurrentStateChannel.setNextValue(false);\n+        break;\n+    }\n+  }\n+\n+  /**\n+   * Mark SunSpec initialization completed; this takes some time at startup.\n+   */\n+  @Override\n+  protected void onSunSpecInitializationCompleted() {\n+    this.addCopyListener(//\n+        this.getSunSpecChannel(DefaultSunSpecModel.S121.W_MAX).get(), //\n+        SymmetricBatteryInverter.ChannelId.MAX_APPARENT_POWER //\n+    );\n+    this.addCopyListener(//\n+        this.getSunSpecChannel(KacoSunSpecModel.S64201.W).get(), //\n+        SymmetricBatteryInverter.ChannelId.ACTIVE_POWER //\n+    );\n+    this.addCopyListener(//\n+        this.getSunSpecChannel(KacoSunSpecModel.S64201.V_AR).get(), //\n+        SymmetricBatteryInverter.ChannelId.REACTIVE_POWER //\n+    );\n+  }\n+\n+  @Override\n+  public S64201CurrentState getCurrentState() {\n+    Optional<EnumReadChannel> channel = this.getSunSpecChannel(KacoSunSpecModel.S64201.CURRENT_STATE);\n+    if (channel.isPresent()) {\n+      return channel.get().value().asEnum();\n+    } else {\n+      return S64201CurrentState.UNDEFINED;\n+    }\n+  }\n+\n+  @Override\n+  protected SunSpecModel getSunSpecModel(int blockId) throws IllegalArgumentException {\n+    return KacoSunSpecModel.valueOf(\"S_\" + blockId);\n+  }\n+\n+  /**\n+   * Calculate the Power-Precision from the Max Apparent Power using the SetPoint\n+   * scale-factor.\n+   */\n+  @Override\n+  public int getPowerPrecision() {\n+    Optional<IntegerReadChannel> scalefactorChannel = this.getSunSpecChannel(KacoSunSpecModel.S64201.W_SET_PCT_SF);\n+    if (!scalefactorChannel.isPresent()) {\n+      return 1;\n+    }\n+    Value<Integer> scalefactor = scalefactorChannel.get().value();\n+    Value<Integer> maxApparentPower = this.getMaxApparentPower();\n+    if (!scalefactor.isDefined() || !maxApparentPower.isDefined()) {\n+      return 1;\n+    }\n+    // Take one percent (0.01) of MaxApparentPower and then apply scalefactor\n+    return (int) (maxApparentPower.get() * 0.01 * Math.pow(10, scalefactor.get()));\n+  }\n+\n+  @Override\n+  public String debugLog() {\n+    return this.stateMachine.getCurrentState().asCamelCase() + //\n+        \"|\" + this.getCurrentState().asCamelCase();\n+  }\n+\n+  private final AtomicReference<StartStop> startStopTarget = new AtomicReference<StartStop>(StartStop.UNDEFINED);\n+\n+  @Override\n+  public void setStartStop(StartStop value) {\n+    if (this.startStopTarget.getAndSet(value) != value) {\n+      // Set only if value changed\n+      this.stateMachine.forceNextState(State.UNDEFINED);\n+    }\n+  }\n+\n+  @Override\n+  public StartStop getStartStopTarget() {\n+    switch (this.config.startStop()) {\n+      case AUTO:\n+        // read StartStop-Channel\n+        return this.startStopTarget.get();\n+\n+      case START:\n+        // force START\n+        return StartStop.START;\n+\n+      case STOP:\n+        // force STOP\n+        return StartStop.STOP;\n+    }\n+\n+    assert false;\n+    return StartStop.UNDEFINED; // can never happen\n+  }\n+\n+  /**\n+   * Adds a Copy-Listener. It listens on setNextValue() and copies the value to\n+   * the target channel.\n+   *\n+   * @param <T>             the Channel type\n+   * @param sourceChannel   the source Channel\n+   * @param targetChannelId the target ChannelId\n+   */\n+  private <T> void addCopyListener(Channel<T> sourceChannel,\n+                                   io.openems.edge.common.channel.ChannelId targetChannelId) {\n+    Consumer<Value<T>> callback = (value) -> {\n+      Channel<T> targetChannel = this.channel(targetChannelId);\n+      targetChannel.setNextValue(value);\n+    };\n+    sourceChannel.onSetNextValue(callback);\n+    callback.accept(sourceChannel.getNextValue());\n+  }\n+\n+  @Override\n+  public <T extends Channel<?>> T getSunSpecChannelOrError(SunSpecPoint point) throws OpenemsException {\n+    return super.getSunSpecChannelOrError(point);\n+  }\n+\n+  /**\n+   * Calculate the Energy values from ActivePower.\n+   */\n+  private void calculateEnergy() {\n+    // Calculate Energy\n+    Integer activePower = this.getActivePower().get();\n+    if (activePower == null) {\n+      // Not available\n+      this.calculateChargeEnergy.update(null);\n+      this.calculateDischargeEnergy.update(null);\n+    } else if (activePower > 0) {\n+      // Buy-From-Grid\n+      this.calculateChargeEnergy.update(0);\n+      this.calculateDischargeEnergy.update(activePower);\n+    } else {\n+      // Sell-To-Grid\n+      this.calculateChargeEnergy.update(activePower * -1);\n+      this.calculateDischargeEnergy.update(0);\n+    }\n+  }\n+\n+  @Override\n+  public Timedata getTimedata() {\n+    return this.timedata;\n+  }\n+\n+  protected void addBlock(int startAddress, SunSpecModel model, Priority priority) throws OpenemsException {\n+    super.addBlock(startAddress, model, priority);\n+\n+    // Mark S_64203 as available\n+    if (model.equals(KacoSunSpecModel.S_64203)) {\n+      this.hasSunSpecModel64203 = true;\n+    }\n+  }\n }\n",
            "diff_size": 415
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "393",
                    "column": "74",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/25/KacoBlueplanetGridsaveImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/25/KacoBlueplanetGridsaveImpl.java\nindex 683b841489d..c5d38c202b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/errored/1/25/KacoBlueplanetGridsaveImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/OpenEMS-openems/naturalize/25/KacoBlueplanetGridsaveImpl.java\n@@ -314,7 +314,7 @@ public class KacoBlueplanetGridsaveImpl extends AbstractSunSpecBatteryInverter i\n \t\t */\n \t\tStateChannel inverterCurrentStateChannel = this\n \t\t\t\t.channel(KacoBlueplanetGridsave.ChannelId.INVERTER_CURRENT_STATE_FAULT);\n-\t\tswitch (this.getCurrentState()) {\n+switch (this.getCurrentState()) {\n \t\tcase FAULT:\n \t\tcase UNDEFINED:\n \t\tcase NO_ERROR_PENDING:\n@@ -481,4 +481,4 @@ public class KacoBlueplanetGridsaveImpl extends AbstractSunSpecBatteryInverter i\n \t\t\tthis.hasSunSpecModel64203 = true;\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "393",
                    "column": "74",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "393",
                    "column": "74",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}