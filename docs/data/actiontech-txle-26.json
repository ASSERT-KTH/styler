{
    "project_name": "actiontech-txle",
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "53",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "  private IKafkaMessageRepository kafkaMessageRepository;\n\n\t@Autowired\n    private TxleMetrics txleMetrics;\n\n\t@Autowired",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "56",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/26/TxConsistentService.java\nindex 07643d415c9..d3fb2070e6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/26/TxConsistentService.java\n@@ -50,7 +50,7 @@ public class TxConsistentService {\n   @Autowired\n   private IKafkaMessageRepository kafkaMessageRepository;\n \n-\t@Autowired\n+  @Autowired\n     private TxleMetrics txleMetrics;\n \n \t@Autowired\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "206",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/26/TxConsistentService.java\nindex 07643d415c9..12dc737aea6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/26/TxConsistentService.java\n@@ -41,167 +41,167 @@ import static org.apache.servicecomb.saga.alpha.core.TaskStatus.NEW;\n import static org.apache.servicecomb.saga.common.EventType.*;\n \n public class TxConsistentService {\n-  private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n-  private final TxEventRepository eventRepository;\n-  private final CommandRepository commandRepository;\n-  private final TxTimeoutRepository timeoutRepository;\n+    private final TxEventRepository eventRepository;\n+    private final CommandRepository commandRepository;\n+    private final TxTimeoutRepository timeoutRepository;\n \n-  @Autowired\n-  private IKafkaMessageRepository kafkaMessageRepository;\n+    @Autowired\n+    private IKafkaMessageRepository kafkaMessageRepository;\n \n-\t@Autowired\n+    @Autowired\n     private TxleMetrics txleMetrics;\n \n-\t@Autowired\n-\tprivate ITxleCache txleCache;\n-\n-\t@Autowired\n-\tprivate ITxEventAdditionService eventAdditionService;\n-\n-\tprivate final List<String> types = Arrays.asList(TxEndedEvent.name(), TxAbortedEvent.name());\n-\n-  public TxConsistentService(TxEventRepository eventRepository, CommandRepository commandRepository, TxTimeoutRepository timeoutRepository) {\n-    this.eventRepository = eventRepository;\n-    this.commandRepository = commandRepository;\n-    this.timeoutRepository = timeoutRepository;\n-  }\n-\n-  public boolean handle(TxEvent event) {\n-\t  // start duration.\n-\t  txleMetrics.startMarkTxDuration(event);\n-\t  if (types.contains(event.type()) && isGlobalTxAborted(event)) {\n-\t\t  LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\",\n-\t\t\t\t  event.type(), event.globalTxId());\n-\t\t  // end duration.\n-\t\t  txleMetrics.endMarkTxDuration(event);\n-\t\t  return false;\n-\t  }\n-\n-\t  eventRepository.save(event);\n-\t  // end duration.\n-\t  txleMetrics.endMarkTxDuration(event);\n-\n-\t  return true;\n-  }\n-\n-\t/**\n-\t * handle the event. support transaction pause/continue/auto-continue.\n-\t *\n-\t * @param event event for global/sub transaction\n-\t * @return result\n-\t * @author Gannalyo\n-\t */\n-\tpublic int handleSupportTxPause(TxEvent event) {\n-\t\t// start duration.\n-\t\ttxleMetrics.startMarkTxDuration(event);\n-\t\t// child transaction count\n-\t\ttxleMetrics.countChildTxNumber(event);\n-\n-\t\tString globalTxId = event.globalTxId(), localTxId = event.localTxId(), type = event.type();\n-\t\tif (!types.contains(type) && isGlobalTxAborted(event)) {\n-\t\t\tLOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", type, globalTxId);\n-\t\t\t// Should return wrong result in case of aborted transaction, even though all of businesses were completed.\n-\t\t\tif (SagaEndedEvent.name().equals(type)) {\n-\t\t\t\teventRepository.save(event);\n-\t\t\t}\n-\t\t\ttxleMetrics.countTxNumber(event, false, event.retries() > 0);\n-\t\t\t// end duration.\n-\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t\treturn -1;\n-\t\t}\n+    @Autowired\n+    private ITxleCache txleCache;\n+\n+    @Autowired\n+    private ITxEventAdditionService eventAdditionService;\n+\n+    private final List<String> types = Arrays.asList(TxEndedEvent.name(), TxAbortedEvent.name());\n+\n+    public TxConsistentService(TxEventRepository eventRepository, CommandRepository commandRepository, TxTimeoutRepository timeoutRepository) {\n+        this.eventRepository = eventRepository;\n+        this.commandRepository = commandRepository;\n+        this.timeoutRepository = timeoutRepository;\n+    }\n+\n+    public boolean handle(TxEvent event) {\n+        // start duration.\n+        txleMetrics.startMarkTxDuration(event);\n+        if (types.contains(event.type()) && isGlobalTxAborted(event)) {\n+            LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\",\n+                    event.type(), event.globalTxId());\n+            // end duration.\n+            txleMetrics.endMarkTxDuration(event);\n+            return false;\n+        }\n+\n+        eventRepository.save(event);\n+        // end duration.\n+        txleMetrics.endMarkTxDuration(event);\n+\n+        return true;\n+    }\n+\n+    /**\n+     * handle the event. support transaction pause/continue/auto-continue.\n+     *\n+     * @param event event for global/sub transaction\n+     * @return result\n+     * @author Gannalyo\n+     */\n+    public int handleSupportTxPause(TxEvent event) {\n+        // start duration.\n+        txleMetrics.startMarkTxDuration(event);\n+        // child transaction count\n+        txleMetrics.countChildTxNumber(event);\n+\n+        String globalTxId = event.globalTxId(), localTxId = event.localTxId(), type = event.type();\n+        if (!types.contains(type) && isGlobalTxAborted(event)) {\n+            LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", type, globalTxId);\n+            // Should return wrong result in case of aborted transaction, even though all of businesses were completed.\n+            if (SagaEndedEvent.name().equals(type)) {\n+                eventRepository.save(event);\n+            }\n+            txleMetrics.countTxNumber(event, false, event.retries() > 0);\n+            // end duration.\n+            txleMetrics.endMarkTxDuration(event);\n+            return -1;\n+        }\n+\n+        /**\n+         * To save event only when the status of the global transaction is not paused.\n+         * If not, return to client immediately, and client will do something, like sending again.\n+         */\n+        boolean isPaused = isGlobalTxPaused(globalTxId, type);\n+        if (!isPaused) {\n+            CurrentThreadContext.put(globalTxId, event);\n+\n+            // We could intercept this method or use the Observer Design model on it, the aim is to handle some operations around it, but apparently, it is not easy to maintain code, so we reserved this idea.\n+            // \u4fdd\u5b58\u4e8b\u4ef6\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u67d0\u5b50\u4e8b\u52a1\u7684\u67d0\u79cd\u4e8b\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u5219\u4e0d\u518d\u4fdd\u5b58\u3002\u5982\uff1a\u68c0\u6d4b\u67d0\u4e8b\u52a1\u8d85\u65f6\u540e\uff0c\u82e5\u5728\u4e0b\u6b21\u68c0\u6d4b\u65f6\u505a\u51fa\u8865\u507f\u5904\u7406\uff0c\u5219\u4f1a\u4fdd\u5b58\u591a\u6761\u8d85\u65f6\u4e8b\u4ef6\u4fe1\u606f\uff0c\u4e3a\u907f\u514d\u5219\u5148\u68c0\u6d4b\u662f\u5426\u5b58\u5728\n+            try {\n+                eventRepository.save(event);\n+\n+                // \u6b64\u5904\u7ee7\u7eed\u68c0\u6d4b\u8d85\u65f6\u7684\u610f\u4e49\u662f\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u6267\u884c\u5168\u5c40\u4e8b\u52a1\u4e2d\u6b64\u5b50\u4e8b\u52a1\u540e\u9762\u5176\u5b83\u5b50\u4e8b\u52a1\n+                if (TxEndedEvent.name().equals(type)) {\n+                    // \u82e5\u5b9a\u65f6\u5668\u68c0\u6d4b\u8d85\u65f6\u540e\u7ed3\u675f\u4e86\u5f53\u524d\u5168\u5c40\u4e8b\u52a1\uff0c\u4f46\u8d85\u65f6\u5b50\u4e8b\u52a1\u7684\u624d\u521a\u521a\u5b8c\u6210\uff0c\u6b64\u65f6\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u662f\u5426\u5df2\u7ecf\u7ec8\u6b62\uff0c\u5982\u679c\u7ec8\u6b62\uff0c\u5219\u8865\u507f\u5f53\u524d\u521a\u521a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n+                    if (isGlobalTxAborted(event)) {\n+                        // subA ok, timeout, compensate subA, subB ok without exception(need to save ended even though aborted), compensate subB.\n+                        commandRepository.saveWillCompensateCmdForCurSubTx(globalTxId, localTxId);\n+                    } else {\n+                        // \u7531\u4e8e\u5b9a\u65f6\u626b\u63cf\u5668\u4e2d\u68c0\u6d4b\u8d85\u65f6\u4f1a\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\uff0c\u5982\u5b9a\u65f6\u5668\u4e2d\u4efb\u52a1\u97003s\u5b8c\u6210\uff0c\u4f46\u67d0\u4e8b\u52a1\u8d85\u65f6\u8bbe\u7f6e\u7684\u662f2\u79d2\uff0c\u6b64\u65f6\u8fd8\u672a\u7b49\u5bf9\u8be5\u4e8b\u7269\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u4e8b\u52a1\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u5728\u6b63\u5e38\u7ed3\u675f\u524d\u9700\u68c0\u6d4b\u662f\u5426\u8d85\u65f6\n+                        // \u5982\u679c\u6709\u503c\uff0c\u8bf4\u660e\u5728EventScanner\u4e2d\u5df2\u68c0\u6d4b\u5230\u5e76\u5904\u7406\u4e86\n+                        TxEvent unhandleTimeoutEvent = eventRepository.findTimeoutEventsBeforeEnding(globalTxId);\n+                        if (unhandleTimeoutEvent != null) {\n+                            // ps: \u5728\u672a\u4fdd\u5b58event\u524d\uff0c\u5c06\u5176\u8f6c\u6362\u6210timeout\uff0ctimeout\u4e2d\u5c06\u65e0\u6cd5\u83b7\u53d6\u5230event\u7684id\u503c(\u9ed8\u8ba4\u4e3a-1)\uff0c\u6545\u4e0a\u4e00\u884c\u4ee3\u7801\u67e5\u8be2\u5df2\u4fdd\u5b58\u7684\u8d85\u65f6\u4e8b\u4ef6\u8bb0\u5f55\n+                            TxTimeout txTimeout = txTimeoutOf(unhandleTimeoutEvent);\n+                            try {\n+                                LOG.debug(\"TxConsistentService Detected the Timeout {}.\", txTimeout);\n+                                // \u7ed3\u675f\u5168\u5c40\u4e8b\u52a1\u524d\uff0c\u68c0\u6d4b\u5230\u8d85\u65f6\uff0c\u4fdd\u5b58\u8d85\u65f6\u8bb0\u5f55\n+                                timeoutRepository.save(txTimeout);\n+                                TxEvent abortedEvent = toTxAbortedEvent(txTimeout);\n+                                if (!eventRepository.checkIsExistsEventType(globalTxId, localTxId, abortedEvent.type())) {\n+                                    // \u4f9d\u636e\u8d85\u65f6\u8bb0\u5f55\u751f\u6210\u5f02\u5e38\u4e8b\u4ef6\n+                                    eventRepository.save(abortedEvent);\n+                                    txleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n+                                }\n+                            } catch (Exception e) {\n+                                LOG.error(\"Failed to save timeout {} in method 'TxConsistentService.handleSupportTxPause()'.\", txTimeout, e);\n+                            } finally {\n+                                // \u4fdd\u5b58\u8d85\u65f6\u60c5\u51b5\u4e0b\u7684\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u5f53\u524d\u8d85\u65f6\u5168\u5c40\u4e8b\u52a1\u4e0b\u7684\u6240\u6709\u5e94\u8be5\u8865\u507f\u7684\u5b50\u4e8b\u4ef6\u7684\u5f85\u8865\u507f\u547d\u4ee4 By Gannalyo\n+                                commandRepository.saveWillCompensateCommandsForTimeout(globalTxId);\n+                            }\n+                        }\n+                    }\n+                }\n \n-\t\t/**\n-\t\t * To save event only when the status of the global transaction is not paused.\n-\t\t * If not, return to client immediately, and client will do something, like sending again.\n-\t\t */\n-\t\tboolean isPaused = isGlobalTxPaused(globalTxId, type);\n-\t\tif (!isPaused) {\n-\t\t\tCurrentThreadContext.put(globalTxId, event);\n-\n-\t\t\t// We could intercept this method or use the Observer Design model on it, the aim is to handle some operations around it, but apparently, it is not easy to maintain code, so we reserved this idea.\n-\t\t\t// \u4fdd\u5b58\u4e8b\u4ef6\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u67d0\u5b50\u4e8b\u52a1\u7684\u67d0\u79cd\u4e8b\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u5219\u4e0d\u518d\u4fdd\u5b58\u3002\u5982\uff1a\u68c0\u6d4b\u67d0\u4e8b\u52a1\u8d85\u65f6\u540e\uff0c\u82e5\u5728\u4e0b\u6b21\u68c0\u6d4b\u65f6\u505a\u51fa\u8865\u507f\u5904\u7406\uff0c\u5219\u4f1a\u4fdd\u5b58\u591a\u6761\u8d85\u65f6\u4e8b\u4ef6\u4fe1\u606f\uff0c\u4e3a\u907f\u514d\u5219\u5148\u68c0\u6d4b\u662f\u5426\u5b58\u5728\n-\t\t\ttry {\n-\t\t\t\teventRepository.save(event);\n-\n-\t\t\t\t// \u6b64\u5904\u7ee7\u7eed\u68c0\u6d4b\u8d85\u65f6\u7684\u610f\u4e49\u662f\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u6267\u884c\u5168\u5c40\u4e8b\u52a1\u4e2d\u6b64\u5b50\u4e8b\u52a1\u540e\u9762\u5176\u5b83\u5b50\u4e8b\u52a1\n-\t\t\t\tif (TxEndedEvent.name().equals(type)) {\n-\t\t\t\t\t// \u82e5\u5b9a\u65f6\u5668\u68c0\u6d4b\u8d85\u65f6\u540e\u7ed3\u675f\u4e86\u5f53\u524d\u5168\u5c40\u4e8b\u52a1\uff0c\u4f46\u8d85\u65f6\u5b50\u4e8b\u52a1\u7684\u624d\u521a\u521a\u5b8c\u6210\uff0c\u6b64\u65f6\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u662f\u5426\u5df2\u7ecf\u7ec8\u6b62\uff0c\u5982\u679c\u7ec8\u6b62\uff0c\u5219\u8865\u507f\u5f53\u524d\u521a\u521a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n-\t\t\t\t\tif (isGlobalTxAborted(event)) {\n-\t\t\t\t\t\t// subA ok, timeout, compensate subA, subB ok without exception(need to save ended even though aborted), compensate subB.\n-\t\t\t\t\t\tcommandRepository.saveWillCompensateCmdForCurSubTx(globalTxId, localTxId);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// \u7531\u4e8e\u5b9a\u65f6\u626b\u63cf\u5668\u4e2d\u68c0\u6d4b\u8d85\u65f6\u4f1a\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\uff0c\u5982\u5b9a\u65f6\u5668\u4e2d\u4efb\u52a1\u97003s\u5b8c\u6210\uff0c\u4f46\u67d0\u4e8b\u52a1\u8d85\u65f6\u8bbe\u7f6e\u7684\u662f2\u79d2\uff0c\u6b64\u65f6\u8fd8\u672a\u7b49\u5bf9\u8be5\u4e8b\u7269\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u4e8b\u52a1\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u5728\u6b63\u5e38\u7ed3\u675f\u524d\u9700\u68c0\u6d4b\u662f\u5426\u8d85\u65f6\n-\t\t\t\t\t\t// \u5982\u679c\u6709\u503c\uff0c\u8bf4\u660e\u5728EventScanner\u4e2d\u5df2\u68c0\u6d4b\u5230\u5e76\u5904\u7406\u4e86\n-\t\t\t\t\t\tTxEvent unhandleTimeoutEvent = eventRepository.findTimeoutEventsBeforeEnding(globalTxId);\n-\t\t\t\t\t\tif (unhandleTimeoutEvent != null) {\n-\t\t\t\t\t\t\t// ps: \u5728\u672a\u4fdd\u5b58event\u524d\uff0c\u5c06\u5176\u8f6c\u6362\u6210timeout\uff0ctimeout\u4e2d\u5c06\u65e0\u6cd5\u83b7\u53d6\u5230event\u7684id\u503c(\u9ed8\u8ba4\u4e3a-1)\uff0c\u6545\u4e0a\u4e00\u884c\u4ee3\u7801\u67e5\u8be2\u5df2\u4fdd\u5b58\u7684\u8d85\u65f6\u4e8b\u4ef6\u8bb0\u5f55\n-\t\t\t\t\t\t\tTxTimeout txTimeout = txTimeoutOf(unhandleTimeoutEvent);\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tLOG.debug(\"TxConsistentService Detected the Timeout {}.\", txTimeout);\n-\t\t\t\t\t\t\t\t// \u7ed3\u675f\u5168\u5c40\u4e8b\u52a1\u524d\uff0c\u68c0\u6d4b\u5230\u8d85\u65f6\uff0c\u4fdd\u5b58\u8d85\u65f6\u8bb0\u5f55\n-\t\t\t\t\t\t\t\ttimeoutRepository.save(txTimeout);\n-\t\t\t\t\t\t\t\tTxEvent abortedEvent = toTxAbortedEvent(txTimeout);\n-\t\t\t\t\t\t\t\tif (!eventRepository.checkIsExistsEventType(globalTxId, localTxId, abortedEvent.type())) {\n-\t\t\t\t\t\t\t\t\t// \u4f9d\u636e\u8d85\u65f6\u8bb0\u5f55\u751f\u6210\u5f02\u5e38\u4e8b\u4ef6\n-\t\t\t\t\t\t\t\t\teventRepository.save(abortedEvent);\n-\t\t\t\t\t\t\t\t\ttxleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\t\tLOG.error(\"Failed to save timeout {} in method 'TxConsistentService.handleSupportTxPause()'.\", txTimeout, e);\n-\t\t\t\t\t\t\t} finally {\n-\t\t\t\t\t\t\t\t// \u4fdd\u5b58\u8d85\u65f6\u60c5\u51b5\u4e0b\u7684\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u5f53\u524d\u8d85\u65f6\u5168\u5c40\u4e8b\u52a1\u4e0b\u7684\u6240\u6709\u5e94\u8be5\u8865\u507f\u7684\u5b50\u4e8b\u4ef6\u7684\u5f85\u8865\u507f\u547d\u4ee4 By Gannalyo\n-\t\t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsForTimeout(globalTxId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tif (TxAbortedEvent.name().equals(type)) {\n-\t\t\t\t\t// \u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\u3002\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u6807\u8bc6\u7b49\u4e8e\u5b50\u4e8b\u52a1\u6807\u8bc6\u60c5\u51b5\u7684\u5f02\u5e38\uff0c\u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u3002\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u5219\u9700\u9a8c\u8bc1\u662f\u5426\u662f\u5b50\u4e8b\u52a1\u7684\u6700\u7ec8\u5f02\u5e38\u3002\n-\t\t\t\t\tif (globalTxId.equals(localTxId) || eventRepository.checkTxIsAborted(globalTxId, localTxId)) {\n-\t\t\t\t\t\ttxleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n-\t\t\t\t\t\tif (!globalTxId.equals(localTxId)) {\n-\t\t\t\t\t\t\t// \u5f53\u51fa\u73b0\u975e\u8d85\u65f6\u7684\u5f02\u5e38\u60c5\u51b5\u65f6\u8bb0\u5f55\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u8d85\u65f6\u5f02\u5e38\u7531\u5b9a\u65f6\u5668\u8d1f\u8d23\n-\t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u540e\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n-\t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u68c0\u6d4b\u8d85\u65f6SQL\u8ffd\u52a0\u3010\u65e0TxAbortedEvent\u6761\u4ef6\u3011\n-\t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u524d\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n-\t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u5931\u8d25\u65f6\u672c\u5730\u4f1a\u7acb\u5373\u5c06global\u548clocal\u7684id\u8bb0\u5f55\u5230\u7f13\u5b58\u4e2d\uff0c\u540e\u7eed\u8d85\u65f6\u8865\u507f\u4f1a\u5148\u5bf9\u6bd4\u8be5\u7f13\u5b58\uff0c\u4e0d\u5b58\u5728\u518d\u8865\u507f\n-\t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u524d\uff0c\u5b9a\u65f6\u5668\u68c0\u6d4b\u5230\u8d85\u65f6\u5e76\u4e14\u8fdb\u884c\u4e86\u8865\u507f\uff0c\u4e4b\u540e\u5b50\u4e8b\u52a1\u4e2d\u6267\u884c\u5931\u8d25\uff0c\u53c8\u8fdb\u884c\u4e86\u672c\u5730\u56de\u6eda\uff0c\u5373\u591a\u56de\u6eda\u4e86\u4e00\u6b21\n-\t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u8d85\u65f6\u53ea\u5bf9\u5df2\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\u8fdb\u884c\u8865\u507f\uff0c\u672a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\uff0c\u5982\u679c\u540e\u7eed\u5931\u8d25\u4e86\u5219\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\uff0c\u5982\u679c\u6210\u529f\u7ed3\u675f\uff0c\u5219\u5728\u7ed3\u675f\u65f6\u4f1a\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u6216\u8d85\u65f6\uff0c\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u5df2\u7ec8\u6b62\u4e86\uff0c\u5219\u56de\u6eda\u5f53\u524d\u6210\u529f\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n-\t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsForException(globalTxId, localTxId);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// \u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u7ec8\u6b62\n-\t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsWhenGlobalTxAborted(globalTxId);\n-\t\t\t\t\t\t\tTxEvent sagaEndedEvent = new TxEvent(event.serviceName(), event.instanceId(), globalTxId, globalTxId, null, SagaEndedEvent.name(), \"\", event.category(), new byte[0]);\n-\t\t\t\t\t\t\teventRepository.save(sagaEndedEvent);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOG.error(\"Failed to save event globalTxId {} localTxId {} type {}\", globalTxId, localTxId, type, e);\n-\t\t\t} finally {\n-\t\t\t\ttxleMetrics.countTxNumber(event, false, event.retries() > 0);\n-\t\t\t\t// end duration.\n-\t\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t\t}\n-\n-\t\t\treturn 1;\n-\t\t}\n+                if (TxAbortedEvent.name().equals(type)) {\n+                    // \u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\u3002\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u6807\u8bc6\u7b49\u4e8e\u5b50\u4e8b\u52a1\u6807\u8bc6\u60c5\u51b5\u7684\u5f02\u5e38\uff0c\u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u3002\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u5219\u9700\u9a8c\u8bc1\u662f\u5426\u662f\u5b50\u4e8b\u52a1\u7684\u6700\u7ec8\u5f02\u5e38\u3002\n+                    if (globalTxId.equals(localTxId) || eventRepository.checkTxIsAborted(globalTxId, localTxId)) {\n+                        txleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n+                        if (!globalTxId.equals(localTxId)) {\n+                            // \u5f53\u51fa\u73b0\u975e\u8d85\u65f6\u7684\u5f02\u5e38\u60c5\u51b5\u65f6\u8bb0\u5f55\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u8d85\u65f6\u5f02\u5e38\u7531\u5b9a\u65f6\u5668\u8d1f\u8d23\n+                            // \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u540e\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n+                            // \u89e3\u51b3\u529e\u6cd5\uff1a\u68c0\u6d4b\u8d85\u65f6SQL\u8ffd\u52a0\u3010\u65e0TxAbortedEvent\u6761\u4ef6\u3011\n+                            // \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u524d\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n+                            // \u89e3\u51b3\u529e\u6cd5\uff1a\u5931\u8d25\u65f6\u672c\u5730\u4f1a\u7acb\u5373\u5c06global\u548clocal\u7684id\u8bb0\u5f55\u5230\u7f13\u5b58\u4e2d\uff0c\u540e\u7eed\u8d85\u65f6\u8865\u507f\u4f1a\u5148\u5bf9\u6bd4\u8be5\u7f13\u5b58\uff0c\u4e0d\u5b58\u5728\u518d\u8865\u507f\n+                            // \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u524d\uff0c\u5b9a\u65f6\u5668\u68c0\u6d4b\u5230\u8d85\u65f6\u5e76\u4e14\u8fdb\u884c\u4e86\u8865\u507f\uff0c\u4e4b\u540e\u5b50\u4e8b\u52a1\u4e2d\u6267\u884c\u5931\u8d25\uff0c\u53c8\u8fdb\u884c\u4e86\u672c\u5730\u56de\u6eda\uff0c\u5373\u591a\u56de\u6eda\u4e86\u4e00\u6b21\n+                            // \u89e3\u51b3\u529e\u6cd5\uff1a\u8d85\u65f6\u53ea\u5bf9\u5df2\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\u8fdb\u884c\u8865\u507f\uff0c\u672a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\uff0c\u5982\u679c\u540e\u7eed\u5931\u8d25\u4e86\u5219\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\uff0c\u5982\u679c\u6210\u529f\u7ed3\u675f\uff0c\u5219\u5728\u7ed3\u675f\u65f6\u4f1a\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u6216\u8d85\u65f6\uff0c\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u5df2\u7ec8\u6b62\u4e86\uff0c\u5219\u56de\u6eda\u5f53\u524d\u6210\u529f\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n+                            commandRepository.saveWillCompensateCommandsForException(globalTxId, localTxId);\n+                        } else {\n+                            // \u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u7ec8\u6b62\n+                            commandRepository.saveWillCompensateCommandsWhenGlobalTxAborted(globalTxId);\n+                            TxEvent sagaEndedEvent = new TxEvent(event.serviceName(), event.instanceId(), globalTxId, globalTxId, null, SagaEndedEvent.name(), \"\", event.category(), new byte[0]);\n+                            eventRepository.save(sagaEndedEvent);\n+                        }\n+                    }\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Failed to save event globalTxId {} localTxId {} type {}\", globalTxId, localTxId, type, e);\n+            } finally {\n+                txleMetrics.countTxNumber(event, false, event.retries() > 0);\n+                // end duration.\n+                txleMetrics.endMarkTxDuration(event);\n+            }\n \n-\t\t// end duration.\n-\t\ttxleMetrics.endMarkTxDuration(event);\n+            return 1;\n+        }\n \n-\t\treturn 0;\n-\t}\n+        // end duration.\n+        txleMetrics.endMarkTxDuration(event);\n \n-  private boolean isGlobalTxAborted(TxEvent event) {\n-\tif (SagaStartedEvent.name().equals(event.type())) {\n-\t\treturn false;\n-\t}\n+        return 0;\n+    }\n+\n+    private boolean isGlobalTxAborted(TxEvent event) {\n+        if (SagaStartedEvent.name().equals(event.type())) {\n+            return false;\n+        }\n //    return !eventRepository.findTransactions(event.globalTxId(), TxAbortedEvent.name()).isEmpty();\n-    return txleCache.getTxAbortStatus(event.globalTxId());\n-    // \u5148\u67e5\u8be2\u662f\u5426\u542bAborted\u4e8b\u4ef6\uff0c\u5982\u679c\u542b\u6709\u518d\u786e\u5b9a\u662f\u5426\u4e3a\u91cd\u8bd5\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u4e00\u4e0b\u5b50\u90fd\u786e\u5b9a\u597d\uff0c\u56e0\u4e3a\u5b58\u5728\u5f02\u5e38\u4e8b\u4ef6\u7684\u4e0d\u591a\uff0c\u8fd9\u6837\u6027\u80fd\u4e0a\u4f1a\u5feb\u4e9b\n+        return txleCache.getTxAbortStatus(event.globalTxId());\n+        // \u5148\u67e5\u8be2\u662f\u5426\u542bAborted\u4e8b\u4ef6\uff0c\u5982\u679c\u542b\u6709\u518d\u786e\u5b9a\u662f\u5426\u4e3a\u91cd\u8bd5\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u4e00\u4e0b\u5b50\u90fd\u786e\u5b9a\u597d\uff0c\u56e0\u4e3a\u5b58\u5728\u5f02\u5e38\u4e8b\u4ef6\u7684\u4e0d\u591a\uff0c\u8fd9\u6837\u6027\u80fd\u4e0a\u4f1a\u5feb\u4e9b\n     /*TxEvent abortedTxEvent = eventRepository.selectAbortedTxEvent(event.globalTxId());\n \tif (abortedTxEvent != null) {\n \t\tif (abortedTxEvent.globalTxId().equals(abortedTxEvent.localTxId())) {\n@@ -212,14 +212,14 @@ public class TxConsistentService {\n \t\treturn eventRepository.checkTxIsAborted(abortedTxEvent.globalTxId(), abortedTxEvent.localTxId());\n \t}\n   \treturn false;*/\n-  }\n-\n-\tpublic boolean isGlobalTxPaused(String globalTxId, String type) {\n-\t\tif (SagaEndedEvent.name().equals(type)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tboolean isPaused = false;\n-\t\ttry {\n+    }\n+\n+    public boolean isGlobalTxPaused(String globalTxId, String type) {\n+        if (SagaEndedEvent.name().equals(type)) {\n+            return false;\n+        }\n+        boolean isPaused = false;\n+        try {\n             final String pauseAllGlobalTxKey = TxleConstants.constructConfigCacheKey(null, null, ConfigCenterType.PauseGlobalTx.toInteger());\n             if (txleCache.getConfigCache().getOrDefault(pauseAllGlobalTxKey, false)) {\n                 // paused all global transactions.\n@@ -267,86 +267,86 @@ public class TxConsistentService {\n                 }\n             }\n         } catch (Exception e) {\n-\t\t\tLOG.error(\"Fail to execute the method 'isGlobalTxPaused'.\", e);\n-\t\t}\n-\t\treturn isPaused;\n-\t}\n-\n-\tpublic Set<String> fetchLocalTxIdOfEndedGlobalTx(Set<String> localTxIdSet) {\n-\t\treturn eventRepository.selectEndedGlobalTx(localTxIdSet);\n-\t}\n-\n-\tpublic boolean saveKafkaMessage(KafkaMessage message) {\n-\t\treturn kafkaMessageRepository.save(message);\n-\t}\n-\n-\tprivate TxTimeout txTimeoutOf(TxEvent event) {\n-\t\treturn new TxTimeout(\n-\t\t\t\tevent.id(),\n-\t\t\t\tevent.serviceName(),\n-\t\t\t\tevent.instanceId(),\n-\t\t\t\tevent.globalTxId(),\n-\t\t\t\tevent.localTxId(),\n-\t\t\t\tevent.parentTxId(),\n-\t\t\t\tevent.type(),\n-\t\t\t\tevent.expiryTime(),\n-\t\t\t\tNEW.name(),\n-\t\t\t\tevent.category()\n-\t\t);\n-\t}\n-\n-\tprivate TxEvent toTxAbortedEvent(TxTimeout timeout) {\n-\t\treturn new TxEvent(\n-\t\t\t\ttimeout.serviceName(),\n-\t\t\t\ttimeout.instanceId(),\n-\t\t\t\ttimeout.globalTxId(),\n-\t\t\t\ttimeout.localTxId(),\n-\t\t\t\ttimeout.parentTxId(),\n-\t\t\t\tTxAbortedEvent.name(),\n-\t\t\t\t\"\",\n-\t\t\t\ttimeout.category(),\n-\t\t\t\t(\"Transaction timeout\").getBytes());\n-\t}\n-\n-\tpublic boolean registerGlobalTx(TxEvent event) {\n-\t\ttry {\n-\t\t\ttxleMetrics.startMarkTxDuration(event);\n-\t\t\teventRepository.save(event);\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.error(\"Failed to register global transaction [{}].\", event, e);\n-\t\t\treturn false;\n-\t\t} finally {\n-\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean registerSubTx(TxEvent subTxEvent, TxEventAddition subTxEventAddition) {\n-\t\ttry {\n-\t\t\ttxleMetrics.countChildTxNumber(subTxEvent);\n-\t\t\ttxleMetrics.startMarkTxDuration(subTxEvent);\n-\n-\t\t\teventRepository.save(subTxEvent);\n-\n-\t\t\tif (subTxEventAddition != null) {\n-\t\t\t\teventAdditionService.save(subTxEventAddition);\n-\t\t\t}\n-\n-\t\t\tif (TxCompensatedEvent.name().equals(subTxEvent.type())) {\n-\t\t\t\teventAdditionService.updateCompensateStatus(subTxEvent.instanceId(), subTxEvent.globalTxId(), subTxEvent.localTxId());\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.error(\"Failed to register global transaction [{}].\", subTxEvent, e);\n-\t\t\treturn false;\n-\t\t} finally {\n-\t\t\ttxleMetrics.countTxNumber(subTxEvent, false, subTxEvent.retries() > 0);\n-\t\t\ttxleMetrics.endMarkTxDuration(subTxEvent);\n-\t\t}\n-\t\treturn true;\n-\t}\n+            LOG.error(\"Fail to execute the method 'isGlobalTxPaused'.\", e);\n+        }\n+        return isPaused;\n+    }\n+\n+    public Set<String> fetchLocalTxIdOfEndedGlobalTx(Set<String> localTxIdSet) {\n+        return eventRepository.selectEndedGlobalTx(localTxIdSet);\n+    }\n+\n+    public boolean saveKafkaMessage(KafkaMessage message) {\n+        return kafkaMessageRepository.save(message);\n+    }\n+\n+    private TxTimeout txTimeoutOf(TxEvent event) {\n+        return new TxTimeout(\n+                event.id(),\n+                event.serviceName(),\n+                event.instanceId(),\n+                event.globalTxId(),\n+                event.localTxId(),\n+                event.parentTxId(),\n+                event.type(),\n+                event.expiryTime(),\n+                NEW.name(),\n+                event.category()\n+        );\n+    }\n+\n+    private TxEvent toTxAbortedEvent(TxTimeout timeout) {\n+        return new TxEvent(\n+                timeout.serviceName(),\n+                timeout.instanceId(),\n+                timeout.globalTxId(),\n+                timeout.localTxId(),\n+                timeout.parentTxId(),\n+                TxAbortedEvent.name(),\n+                \"\",\n+                timeout.category(),\n+                (\"Transaction timeout\").getBytes());\n+    }\n+\n+    public boolean registerGlobalTx(TxEvent event) {\n+        try {\n+            txleMetrics.startMarkTxDuration(event);\n+            eventRepository.save(event);\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to register global transaction [{}].\", event, e);\n+            return false;\n+        } finally {\n+            txleMetrics.endMarkTxDuration(event);\n+        }\n+        return true;\n+    }\n+\n+    public boolean registerSubTx(TxEvent subTxEvent, TxEventAddition subTxEventAddition) {\n+        try {\n+            txleMetrics.countChildTxNumber(subTxEvent);\n+            txleMetrics.startMarkTxDuration(subTxEvent);\n+\n+            eventRepository.save(subTxEvent);\n+\n+            if (subTxEventAddition != null) {\n+                eventAdditionService.save(subTxEventAddition);\n+            }\n \n-\tpublic boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n-\t\treturn eventRepository.checkIsExistsEventType(globalTxId, localTxId, type);\n-\t}\n+            if (TxCompensatedEvent.name().equals(subTxEvent.type())) {\n+                eventAdditionService.updateCompensateStatus(subTxEvent.instanceId(), subTxEvent.globalTxId(), subTxEvent.localTxId());\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to register global transaction [{}].\", subTxEvent, e);\n+            return false;\n+        } finally {\n+            txleMetrics.countTxNumber(subTxEvent, false, subTxEvent.retries() > 0);\n+            txleMetrics.endMarkTxDuration(subTxEvent);\n+        }\n+        return true;\n+    }\n+\n+    public boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n+        return eventRepository.checkIsExistsEventType(globalTxId, localTxId, type);\n+    }\n \n }\n",
            "diff_size": 301
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/naturalize/26/TxConsistentService.java\nindex 07643d415c9..87649d9cd54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/naturalize/26/TxConsistentService.java\n@@ -50,10 +50,10 @@ public class TxConsistentService {\n   @Autowired\n   private IKafkaMessageRepository kafkaMessageRepository;\n \n-\t@Autowired\n-    private TxleMetrics txleMetrics;\n+@Autowired\n+private TxleMetrics txleMetrics;\n \n-\t@Autowired\n+@Autowired\n \tprivate ITxleCache txleCache;\n \n \t@Autowired\n@@ -61,31 +61,31 @@ public class TxConsistentService {\n \n \tprivate final List<String> types = Arrays.asList(TxEndedEvent.name(), TxAbortedEvent.name());\n \n-  public TxConsistentService(TxEventRepository eventRepository, CommandRepository commandRepository, TxTimeoutRepository timeoutRepository) {\n+public TxConsistentService(TxEventRepository eventRepository, CommandRepository commandRepository, TxTimeoutRepository timeoutRepository) {\n     this.eventRepository = eventRepository;\n     this.commandRepository = commandRepository;\n     this.timeoutRepository = timeoutRepository;\n   }\n \n   public boolean handle(TxEvent event) {\n-\t  // start duration.\n+    // start duration.\n \t  txleMetrics.startMarkTxDuration(event);\n \t  if (types.contains(event.type()) && isGlobalTxAborted(event)) {\n-\t\t  LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\",\n-\t\t\t\t  event.type(), event.globalTxId());\n-\t\t  // end duration.\n+    LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", event.type(), event.globalTxId());\n+\n+// end duration.\n \t\t  txleMetrics.endMarkTxDuration(event);\n \t\t  return false;\n-\t  }\n+    }\n \n \t  eventRepository.save(event);\n \t  // end duration.\n \t  txleMetrics.endMarkTxDuration(event);\n \n \t  return true;\n-  }\n+    }\n \n-\t/**\n+/**\n \t * handle the event. support transaction pause/continue/auto-continue.\n \t *\n \t * @param event event for global/sub transaction\n@@ -93,23 +93,23 @@ public class TxConsistentService {\n \t * @author Gannalyo\n \t */\n \tpublic int handleSupportTxPause(TxEvent event) {\n-\t\t// start duration.\n+    // start duration.\n \t\ttxleMetrics.startMarkTxDuration(event);\n \t\t// child transaction count\n \t\ttxleMetrics.countChildTxNumber(event);\n \n \t\tString globalTxId = event.globalTxId(), localTxId = event.localTxId(), type = event.type();\n \t\tif (!types.contains(type) && isGlobalTxAborted(event)) {\n-\t\t\tLOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", type, globalTxId);\n+    LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", type, globalTxId);\n \t\t\t// Should return wrong result in case of aborted transaction, even though all of businesses were completed.\n \t\t\tif (SagaEndedEvent.name().equals(type)) {\n-\t\t\t\teventRepository.save(event);\n-\t\t\t}\n+    eventRepository.save(event);\n+    }\n \t\t\ttxleMetrics.countTxNumber(event, false, event.retries() > 0);\n \t\t\t// end duration.\n \t\t\ttxleMetrics.endMarkTxDuration(event);\n \t\t\treturn -1;\n-\t\t}\n+    }\n \n \t\t/**\n \t\t * To save event only when the status of the global transaction is not paused.\n@@ -117,52 +117,52 @@ public class TxConsistentService {\n \t\t */\n \t\tboolean isPaused = isGlobalTxPaused(globalTxId, type);\n \t\tif (!isPaused) {\n-\t\t\tCurrentThreadContext.put(globalTxId, event);\n+    CurrentThreadContext.put(globalTxId, event);\n \n \t\t\t// We could intercept this method or use the Observer Design model on it, the aim is to handle some operations around it, but apparently, it is not easy to maintain code, so we reserved this idea.\n \t\t\t// \u4fdd\u5b58\u4e8b\u4ef6\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u67d0\u5b50\u4e8b\u52a1\u7684\u67d0\u79cd\u4e8b\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u5219\u4e0d\u518d\u4fdd\u5b58\u3002\u5982\uff1a\u68c0\u6d4b\u67d0\u4e8b\u52a1\u8d85\u65f6\u540e\uff0c\u82e5\u5728\u4e0b\u6b21\u68c0\u6d4b\u65f6\u505a\u51fa\u8865\u507f\u5904\u7406\uff0c\u5219\u4f1a\u4fdd\u5b58\u591a\u6761\u8d85\u65f6\u4e8b\u4ef6\u4fe1\u606f\uff0c\u4e3a\u907f\u514d\u5219\u5148\u68c0\u6d4b\u662f\u5426\u5b58\u5728\n \t\t\ttry {\n-\t\t\t\teventRepository.save(event);\n+    eventRepository.save(event);\n \n \t\t\t\t// \u6b64\u5904\u7ee7\u7eed\u68c0\u6d4b\u8d85\u65f6\u7684\u610f\u4e49\u662f\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u6267\u884c\u5168\u5c40\u4e8b\u52a1\u4e2d\u6b64\u5b50\u4e8b\u52a1\u540e\u9762\u5176\u5b83\u5b50\u4e8b\u52a1\n \t\t\t\tif (TxEndedEvent.name().equals(type)) {\n-\t\t\t\t\t// \u82e5\u5b9a\u65f6\u5668\u68c0\u6d4b\u8d85\u65f6\u540e\u7ed3\u675f\u4e86\u5f53\u524d\u5168\u5c40\u4e8b\u52a1\uff0c\u4f46\u8d85\u65f6\u5b50\u4e8b\u52a1\u7684\u624d\u521a\u521a\u5b8c\u6210\uff0c\u6b64\u65f6\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u662f\u5426\u5df2\u7ecf\u7ec8\u6b62\uff0c\u5982\u679c\u7ec8\u6b62\uff0c\u5219\u8865\u507f\u5f53\u524d\u521a\u521a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n+    // \u82e5\u5b9a\u65f6\u5668\u68c0\u6d4b\u8d85\u65f6\u540e\u7ed3\u675f\u4e86\u5f53\u524d\u5168\u5c40\u4e8b\u52a1\uff0c\u4f46\u8d85\u65f6\u5b50\u4e8b\u52a1\u7684\u624d\u521a\u521a\u5b8c\u6210\uff0c\u6b64\u65f6\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u662f\u5426\u5df2\u7ecf\u7ec8\u6b62\uff0c\u5982\u679c\u7ec8\u6b62\uff0c\u5219\u8865\u507f\u5f53\u524d\u521a\u521a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n \t\t\t\t\tif (isGlobalTxAborted(event)) {\n-\t\t\t\t\t\t// subA ok, timeout, compensate subA, subB ok without exception(need to save ended even though aborted), compensate subB.\n+    // subA ok, timeout, compensate subA, subB ok without exception(need to save ended even though aborted), compensate subB.\n \t\t\t\t\t\tcommandRepository.saveWillCompensateCmdForCurSubTx(globalTxId, localTxId);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// \u7531\u4e8e\u5b9a\u65f6\u626b\u63cf\u5668\u4e2d\u68c0\u6d4b\u8d85\u65f6\u4f1a\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\uff0c\u5982\u5b9a\u65f6\u5668\u4e2d\u4efb\u52a1\u97003s\u5b8c\u6210\uff0c\u4f46\u67d0\u4e8b\u52a1\u8d85\u65f6\u8bbe\u7f6e\u7684\u662f2\u79d2\uff0c\u6b64\u65f6\u8fd8\u672a\u7b49\u5bf9\u8be5\u4e8b\u7269\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u4e8b\u52a1\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u5728\u6b63\u5e38\u7ed3\u675f\u524d\u9700\u68c0\u6d4b\u662f\u5426\u8d85\u65f6\n+    } else {\n+    // \u7531\u4e8e\u5b9a\u65f6\u626b\u63cf\u5668\u4e2d\u68c0\u6d4b\u8d85\u65f6\u4f1a\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\uff0c\u5982\u5b9a\u65f6\u5668\u4e2d\u4efb\u52a1\u97003s\u5b8c\u6210\uff0c\u4f46\u67d0\u4e8b\u52a1\u8d85\u65f6\u8bbe\u7f6e\u7684\u662f2\u79d2\uff0c\u6b64\u65f6\u8fd8\u672a\u7b49\u5bf9\u8be5\u4e8b\u7269\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u4e8b\u52a1\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u5728\u6b63\u5e38\u7ed3\u675f\u524d\u9700\u68c0\u6d4b\u662f\u5426\u8d85\u65f6\n \t\t\t\t\t\t// \u5982\u679c\u6709\u503c\uff0c\u8bf4\u660e\u5728EventScanner\u4e2d\u5df2\u68c0\u6d4b\u5230\u5e76\u5904\u7406\u4e86\n \t\t\t\t\t\tTxEvent unhandleTimeoutEvent = eventRepository.findTimeoutEventsBeforeEnding(globalTxId);\n \t\t\t\t\t\tif (unhandleTimeoutEvent != null) {\n-\t\t\t\t\t\t\t// ps: \u5728\u672a\u4fdd\u5b58event\u524d\uff0c\u5c06\u5176\u8f6c\u6362\u6210timeout\uff0ctimeout\u4e2d\u5c06\u65e0\u6cd5\u83b7\u53d6\u5230event\u7684id\u503c(\u9ed8\u8ba4\u4e3a-1)\uff0c\u6545\u4e0a\u4e00\u884c\u4ee3\u7801\u67e5\u8be2\u5df2\u4fdd\u5b58\u7684\u8d85\u65f6\u4e8b\u4ef6\u8bb0\u5f55\n+    // ps: \u5728\u672a\u4fdd\u5b58event\u524d\uff0c\u5c06\u5176\u8f6c\u6362\u6210timeout\uff0ctimeout\u4e2d\u5c06\u65e0\u6cd5\u83b7\u53d6\u5230event\u7684id\u503c(\u9ed8\u8ba4\u4e3a-1)\uff0c\u6545\u4e0a\u4e00\u884c\u4ee3\u7801\u67e5\u8be2\u5df2\u4fdd\u5b58\u7684\u8d85\u65f6\u4e8b\u4ef6\u8bb0\u5f55\n \t\t\t\t\t\t\tTxTimeout txTimeout = txTimeoutOf(unhandleTimeoutEvent);\n \t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tLOG.debug(\"TxConsistentService Detected the Timeout {}.\", txTimeout);\n+    LOG.debug(\"TxConsistentService Detected the Timeout {}.\", txTimeout);\n \t\t\t\t\t\t\t\t// \u7ed3\u675f\u5168\u5c40\u4e8b\u52a1\u524d\uff0c\u68c0\u6d4b\u5230\u8d85\u65f6\uff0c\u4fdd\u5b58\u8d85\u65f6\u8bb0\u5f55\n \t\t\t\t\t\t\t\ttimeoutRepository.save(txTimeout);\n \t\t\t\t\t\t\t\tTxEvent abortedEvent = toTxAbortedEvent(txTimeout);\n \t\t\t\t\t\t\t\tif (!eventRepository.checkIsExistsEventType(globalTxId, localTxId, abortedEvent.type())) {\n-\t\t\t\t\t\t\t\t\t// \u4f9d\u636e\u8d85\u65f6\u8bb0\u5f55\u751f\u6210\u5f02\u5e38\u4e8b\u4ef6\n+    // \u4f9d\u636e\u8d85\u65f6\u8bb0\u5f55\u751f\u6210\u5f02\u5e38\u4e8b\u4ef6\n \t\t\t\t\t\t\t\t\teventRepository.save(abortedEvent);\n \t\t\t\t\t\t\t\t\ttxleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\t\tLOG.error(\"Failed to save timeout {} in method 'TxConsistentService.handleSupportTxPause()'.\", txTimeout, e);\n-\t\t\t\t\t\t\t} finally {\n-\t\t\t\t\t\t\t\t// \u4fdd\u5b58\u8d85\u65f6\u60c5\u51b5\u4e0b\u7684\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u5f53\u524d\u8d85\u65f6\u5168\u5c40\u4e8b\u52a1\u4e0b\u7684\u6240\u6709\u5e94\u8be5\u8865\u507f\u7684\u5b50\u4e8b\u4ef6\u7684\u5f85\u8865\u507f\u547d\u4ee4 By Gannalyo\n+    }\n+    } catch (Exception e) {\n+    LOG.error(\"Failed to save timeout {} in method 'TxConsistentService.handleSupportTxPause()'.\", txTimeout, e);\n+    } finally {\n+    // \u4fdd\u5b58\u8d85\u65f6\u60c5\u51b5\u4e0b\u7684\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u5f53\u524d\u8d85\u65f6\u5168\u5c40\u4e8b\u52a1\u4e0b\u7684\u6240\u6709\u5e94\u8be5\u8865\u507f\u7684\u5b50\u4e8b\u4ef6\u7684\u5f85\u8865\u507f\u547d\u4ee4 By Gannalyo\n \t\t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsForTimeout(globalTxId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+    }\n+    }\n+    }\n+    }\n \n \t\t\t\tif (TxAbortedEvent.name().equals(type)) {\n-\t\t\t\t\t// \u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\u3002\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u6807\u8bc6\u7b49\u4e8e\u5b50\u4e8b\u52a1\u6807\u8bc6\u60c5\u51b5\u7684\u5f02\u5e38\uff0c\u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u3002\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u5219\u9700\u9a8c\u8bc1\u662f\u5426\u662f\u5b50\u4e8b\u52a1\u7684\u6700\u7ec8\u5f02\u5e38\u3002\n+    // \u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\u3002\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u6807\u8bc6\u7b49\u4e8e\u5b50\u4e8b\u52a1\u6807\u8bc6\u60c5\u51b5\u7684\u5f02\u5e38\uff0c\u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u3002\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u5219\u9700\u9a8c\u8bc1\u662f\u5426\u662f\u5b50\u4e8b\u52a1\u7684\u6700\u7ec8\u5f02\u5e38\u3002\n \t\t\t\t\tif (globalTxId.equals(localTxId) || eventRepository.checkTxIsAborted(globalTxId, localTxId)) {\n-\t\t\t\t\t\ttxleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n+    txleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n \t\t\t\t\t\tif (!globalTxId.equals(localTxId)) {\n-\t\t\t\t\t\t\t// \u5f53\u51fa\u73b0\u975e\u8d85\u65f6\u7684\u5f02\u5e38\u60c5\u51b5\u65f6\u8bb0\u5f55\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u8d85\u65f6\u5f02\u5e38\u7531\u5b9a\u65f6\u5668\u8d1f\u8d23\n+    // \u5f53\u51fa\u73b0\u975e\u8d85\u65f6\u7684\u5f02\u5e38\u60c5\u51b5\u65f6\u8bb0\u5f55\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u8d85\u65f6\u5f02\u5e38\u7531\u5b9a\u65f6\u5668\u8d1f\u8d23\n \t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u540e\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n \t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u68c0\u6d4b\u8d85\u65f6SQL\u8ffd\u52a0\u3010\u65e0TxAbortedEvent\u6761\u4ef6\u3011\n \t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u524d\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n@@ -170,36 +170,36 @@ public class TxConsistentService {\n \t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u524d\uff0c\u5b9a\u65f6\u5668\u68c0\u6d4b\u5230\u8d85\u65f6\u5e76\u4e14\u8fdb\u884c\u4e86\u8865\u507f\uff0c\u4e4b\u540e\u5b50\u4e8b\u52a1\u4e2d\u6267\u884c\u5931\u8d25\uff0c\u53c8\u8fdb\u884c\u4e86\u672c\u5730\u56de\u6eda\uff0c\u5373\u591a\u56de\u6eda\u4e86\u4e00\u6b21\n \t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u8d85\u65f6\u53ea\u5bf9\u5df2\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\u8fdb\u884c\u8865\u507f\uff0c\u672a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\uff0c\u5982\u679c\u540e\u7eed\u5931\u8d25\u4e86\u5219\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\uff0c\u5982\u679c\u6210\u529f\u7ed3\u675f\uff0c\u5219\u5728\u7ed3\u675f\u65f6\u4f1a\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u6216\u8d85\u65f6\uff0c\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u5df2\u7ec8\u6b62\u4e86\uff0c\u5219\u56de\u6eda\u5f53\u524d\u6210\u529f\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n \t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsForException(globalTxId, localTxId);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// \u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u7ec8\u6b62\n+    } else {\n+    // \u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u7ec8\u6b62\n \t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsWhenGlobalTxAborted(globalTxId);\n \t\t\t\t\t\t\tTxEvent sagaEndedEvent = new TxEvent(event.serviceName(), event.instanceId(), globalTxId, globalTxId, null, SagaEndedEvent.name(), \"\", event.category(), new byte[0]);\n \t\t\t\t\t\t\teventRepository.save(sagaEndedEvent);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOG.error(\"Failed to save event globalTxId {} localTxId {} type {}\", globalTxId, localTxId, type, e);\n-\t\t\t} finally {\n-\t\t\t\ttxleMetrics.countTxNumber(event, false, event.retries() > 0);\n+    }\n+    }\n+    }\n+    } catch (Exception e) {\n+    LOG.error(\"Failed to save event globalTxId {} localTxId {} type {}\", globalTxId, localTxId, type, e);\n+    } finally {\n+    txleMetrics.countTxNumber(event, false, event.retries() > 0);\n \t\t\t\t// end duration.\n \t\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t\t}\n+    }\n \n \t\t\treturn 1;\n-\t\t}\n+    }\n \n \t\t// end duration.\n \t\ttxleMetrics.endMarkTxDuration(event);\n \n \t\treturn 0;\n-\t}\n+    }\n \n-  private boolean isGlobalTxAborted(TxEvent event) {\n-\tif (SagaStartedEvent.name().equals(event.type())) {\n-\t\treturn false;\n-\t}\n-//    return !eventRepository.findTransactions(event.globalTxId(), TxAbortedEvent.name()).isEmpty();\n+private boolean isGlobalTxAborted(TxEvent event) {\n+    if (SagaStartedEvent.name().equals(event.type())) {\n+    return false;\n+    }\n+    //    return !eventRepository.findTransactions(event.globalTxId(), TxAbortedEvent.name()).isEmpty();\n     return txleCache.getTxAbortStatus(event.globalTxId());\n     // \u5148\u67e5\u8be2\u662f\u5426\u542bAborted\u4e8b\u4ef6\uff0c\u5982\u679c\u542b\u6709\u518d\u786e\u5b9a\u662f\u5426\u4e3a\u91cd\u8bd5\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u4e00\u4e0b\u5b50\u90fd\u786e\u5b9a\u597d\uff0c\u56e0\u4e3a\u5b58\u5728\u5f02\u5e38\u4e8b\u4ef6\u7684\u4e0d\u591a\uff0c\u8fd9\u6837\u6027\u80fd\u4e0a\u4f1a\u5feb\u4e9b\n     /*TxEvent abortedTxEvent = eventRepository.selectAbortedTxEvent(event.globalTxId());\n@@ -214,13 +214,13 @@ public class TxConsistentService {\n   \treturn false;*/\n   }\n \n-\tpublic boolean isGlobalTxPaused(String globalTxId, String type) {\n-\t\tif (SagaEndedEvent.name().equals(type)) {\n-\t\t\treturn false;\n-\t\t}\n+public boolean isGlobalTxPaused(String globalTxId, String type) {\n+    if (SagaEndedEvent.name().equals(type)) {\n+    return false;\n+    }\n \t\tboolean isPaused = false;\n \t\ttry {\n-            final String pauseAllGlobalTxKey = TxleConstants.constructConfigCacheKey(null, null, ConfigCenterType.PauseGlobalTx.toInteger());\n+    final String pauseAllGlobalTxKey = TxleConstants.constructConfigCacheKey(null, null, ConfigCenterType.PauseGlobalTx.toInteger());\n             if (txleCache.getConfigCache().getOrDefault(pauseAllGlobalTxKey, false)) {\n                 // paused all global transactions.\n                 return true;\n@@ -258,7 +258,7 @@ public class TxConsistentService {\n                             // was due, create the event 'SagaAutoContinueEvent' to make event to continue running.\n                             eventRepository.save(new TxEvent(event.serviceName(), event.instanceId(), event.globalTxId(), event.localTxId(), event.parentTxId(),\n                                     AdditionalEventType.SagaAutoContinuedEvent.name(), \"\", 0, \"\", 0, event.category(), event.payloads()));\n-                            isPaused = false;\n+isPaused = false;\n                         } catch (Exception e) {\n                             isPaused = true;\n                             LOG.error(\"Fail to save the event 'SagaAutoContinuedEvent'.\", e);\n@@ -267,22 +267,21 @@ public class TxConsistentService {\n                 }\n             }\n         } catch (Exception e) {\n-\t\t\tLOG.error(\"Fail to execute the method 'isGlobalTxPaused'.\", e);\n-\t\t}\n+    LOG.error(\"Fail to execute the method 'isGlobalTxPaused'.\", e);\n+    }\n \t\treturn isPaused;\n-\t}\n+    }\n \n \tpublic Set<String> fetchLocalTxIdOfEndedGlobalTx(Set<String> localTxIdSet) {\n-\t\treturn eventRepository.selectEndedGlobalTx(localTxIdSet);\n-\t}\n+    return eventRepository.selectEndedGlobalTx(localTxIdSet);\n+    }\n \n \tpublic boolean saveKafkaMessage(KafkaMessage message) {\n-\t\treturn kafkaMessageRepository.save(message);\n-\t}\n+    return kafkaMessageRepository.save(message);\n+    }\n \n \tprivate TxTimeout txTimeoutOf(TxEvent event) {\n-\t\treturn new TxTimeout(\n-\t\t\t\tevent.id(),\n+  return new TxTimeout(event.id(),\n \t\t\t\tevent.serviceName(),\n \t\t\t\tevent.instanceId(),\n \t\t\t\tevent.globalTxId(),\n@@ -291,13 +290,11 @@ public class TxConsistentService {\n \t\t\t\tevent.type(),\n \t\t\t\tevent.expiryTime(),\n \t\t\t\tNEW.name(),\n-\t\t\t\tevent.category()\n-\t\t);\n-\t}\n+\t\t\t\tevent.category());\n+    }\n \n \tprivate TxEvent toTxAbortedEvent(TxTimeout timeout) {\n-\t\treturn new TxEvent(\n-\t\t\t\ttimeout.serviceName(),\n+  return new TxEvent(timeout.serviceName(),\n \t\t\t\ttimeout.instanceId(),\n \t\t\t\ttimeout.globalTxId(),\n \t\t\t\ttimeout.localTxId(),\n@@ -306,47 +303,46 @@ public class TxConsistentService {\n \t\t\t\t\"\",\n \t\t\t\ttimeout.category(),\n \t\t\t\t(\"Transaction timeout\").getBytes());\n-\t}\n+    }\n \n \tpublic boolean registerGlobalTx(TxEvent event) {\n-\t\ttry {\n-\t\t\ttxleMetrics.startMarkTxDuration(event);\n+    try {\n+    txleMetrics.startMarkTxDuration(event);\n \t\t\teventRepository.save(event);\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.error(\"Failed to register global transaction [{}].\", event, e);\n+    } catch (Exception e) {\n+    LOG.error(\"Failed to register global transaction [{}].\", event, e);\n \t\t\treturn false;\n-\t\t} finally {\n-\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t}\n+    } finally {\n+    txleMetrics.endMarkTxDuration(event);\n+    }\n \t\treturn true;\n-\t}\n+    }\n \n \tpublic boolean registerSubTx(TxEvent subTxEvent, TxEventAddition subTxEventAddition) {\n-\t\ttry {\n-\t\t\ttxleMetrics.countChildTxNumber(subTxEvent);\n+    try {\n+    txleMetrics.countChildTxNumber(subTxEvent);\n \t\t\ttxleMetrics.startMarkTxDuration(subTxEvent);\n \n \t\t\teventRepository.save(subTxEvent);\n \n \t\t\tif (subTxEventAddition != null) {\n-\t\t\t\teventAdditionService.save(subTxEventAddition);\n-\t\t\t}\n+    eventAdditionService.save(subTxEventAddition);\n+    }\n \n \t\t\tif (TxCompensatedEvent.name().equals(subTxEvent.type())) {\n-\t\t\t\teventAdditionService.updateCompensateStatus(subTxEvent.instanceId(), subTxEvent.globalTxId(), subTxEvent.localTxId());\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.error(\"Failed to register global transaction [{}].\", subTxEvent, e);\n+    eventAdditionService.updateCompensateStatus(subTxEvent.instanceId(), subTxEvent.globalTxId(), subTxEvent.localTxId());\n+    }\n+    } catch (Exception e) {\n+    LOG.error(\"Failed to register global transaction [{}].\", subTxEvent, e);\n \t\t\treturn false;\n-\t\t} finally {\n-\t\t\ttxleMetrics.countTxNumber(subTxEvent, false, subTxEvent.retries() > 0);\n+    } finally {\n+    txleMetrics.countTxNumber(subTxEvent, false, subTxEvent.retries() > 0);\n \t\t\ttxleMetrics.endMarkTxDuration(subTxEvent);\n-\t\t}\n+    }\n \t\treturn true;\n-\t}\n+    }\n \n \tpublic boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n-\t\treturn eventRepository.checkIsExistsEventType(globalTxId, localTxId, type);\n-\t}\n-\n-}\n+    return eventRepository.checkIsExistsEventType(globalTxId, localTxId, type);\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 99
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/26/TxConsistentService.java\nindex 07643d415c9..bd200a62570 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/26/TxConsistentService.java\n@@ -29,7 +29,6 @@ import org.apache.servicecomb.saga.common.TxleConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-\n import java.lang.invoke.MethodHandles;\n import java.util.Arrays;\n import java.util.Date;\n@@ -40,192 +39,185 @@ import java.util.concurrent.atomic.AtomicBoolean;\n import static org.apache.servicecomb.saga.alpha.core.TaskStatus.NEW;\n import static org.apache.servicecomb.saga.common.EventType.*;\n \n-public class TxConsistentService {\n-  private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n-  private final TxEventRepository eventRepository;\n-  private final CommandRepository commandRepository;\n-  private final TxTimeoutRepository timeoutRepository;\n+public class TxConsistentService {\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+    private final TxEventRepository eventRepository;\n+    private final CommandRepository commandRepository;\n+    private final TxTimeoutRepository timeoutRepository;\n \n-  @Autowired\n-  private IKafkaMessageRepository kafkaMessageRepository;\n+    @Autowired\n+    private IKafkaMessageRepository kafkaMessageRepository;\n \n-\t@Autowired\n+    @Autowired\n     private TxleMetrics txleMetrics;\n \n-\t@Autowired\n-\tprivate ITxleCache txleCache;\n-\n-\t@Autowired\n-\tprivate ITxEventAdditionService eventAdditionService;\n-\n-\tprivate final List<String> types = Arrays.asList(TxEndedEvent.name(), TxAbortedEvent.name());\n-\n-  public TxConsistentService(TxEventRepository eventRepository, CommandRepository commandRepository, TxTimeoutRepository timeoutRepository) {\n-    this.eventRepository = eventRepository;\n-    this.commandRepository = commandRepository;\n-    this.timeoutRepository = timeoutRepository;\n-  }\n-\n-  public boolean handle(TxEvent event) {\n-\t  // start duration.\n-\t  txleMetrics.startMarkTxDuration(event);\n-\t  if (types.contains(event.type()) && isGlobalTxAborted(event)) {\n-\t\t  LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\",\n-\t\t\t\t  event.type(), event.globalTxId());\n-\t\t  // end duration.\n-\t\t  txleMetrics.endMarkTxDuration(event);\n-\t\t  return false;\n-\t  }\n-\n-\t  eventRepository.save(event);\n-\t  // end duration.\n-\t  txleMetrics.endMarkTxDuration(event);\n-\n-\t  return true;\n-  }\n-\n-\t/**\n-\t * handle the event. support transaction pause/continue/auto-continue.\n-\t *\n-\t * @param event event for global/sub transaction\n-\t * @return result\n-\t * @author Gannalyo\n-\t */\n-\tpublic int handleSupportTxPause(TxEvent event) {\n-\t\t// start duration.\n-\t\ttxleMetrics.startMarkTxDuration(event);\n-\t\t// child transaction count\n-\t\ttxleMetrics.countChildTxNumber(event);\n-\n-\t\tString globalTxId = event.globalTxId(), localTxId = event.localTxId(), type = event.type();\n-\t\tif (!types.contains(type) && isGlobalTxAborted(event)) {\n-\t\t\tLOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", type, globalTxId);\n-\t\t\t// Should return wrong result in case of aborted transaction, even though all of businesses were completed.\n-\t\t\tif (SagaEndedEvent.name().equals(type)) {\n-\t\t\t\teventRepository.save(event);\n-\t\t\t}\n-\t\t\ttxleMetrics.countTxNumber(event, false, event.retries() > 0);\n-\t\t\t// end duration.\n-\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t\treturn -1;\n-\t\t}\n-\n-\t\t/**\n-\t\t * To save event only when the status of the global transaction is not paused.\n-\t\t * If not, return to client immediately, and client will do something, like sending again.\n-\t\t */\n-\t\tboolean isPaused = isGlobalTxPaused(globalTxId, type);\n-\t\tif (!isPaused) {\n-\t\t\tCurrentThreadContext.put(globalTxId, event);\n-\n-\t\t\t// We could intercept this method or use the Observer Design model on it, the aim is to handle some operations around it, but apparently, it is not easy to maintain code, so we reserved this idea.\n-\t\t\t// \u4fdd\u5b58\u4e8b\u4ef6\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u67d0\u5b50\u4e8b\u52a1\u7684\u67d0\u79cd\u4e8b\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u5219\u4e0d\u518d\u4fdd\u5b58\u3002\u5982\uff1a\u68c0\u6d4b\u67d0\u4e8b\u52a1\u8d85\u65f6\u540e\uff0c\u82e5\u5728\u4e0b\u6b21\u68c0\u6d4b\u65f6\u505a\u51fa\u8865\u507f\u5904\u7406\uff0c\u5219\u4f1a\u4fdd\u5b58\u591a\u6761\u8d85\u65f6\u4e8b\u4ef6\u4fe1\u606f\uff0c\u4e3a\u907f\u514d\u5219\u5148\u68c0\u6d4b\u662f\u5426\u5b58\u5728\n-\t\t\ttry {\n-\t\t\t\teventRepository.save(event);\n-\n-\t\t\t\t// \u6b64\u5904\u7ee7\u7eed\u68c0\u6d4b\u8d85\u65f6\u7684\u610f\u4e49\u662f\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u6267\u884c\u5168\u5c40\u4e8b\u52a1\u4e2d\u6b64\u5b50\u4e8b\u52a1\u540e\u9762\u5176\u5b83\u5b50\u4e8b\u52a1\n-\t\t\t\tif (TxEndedEvent.name().equals(type)) {\n-\t\t\t\t\t// \u82e5\u5b9a\u65f6\u5668\u68c0\u6d4b\u8d85\u65f6\u540e\u7ed3\u675f\u4e86\u5f53\u524d\u5168\u5c40\u4e8b\u52a1\uff0c\u4f46\u8d85\u65f6\u5b50\u4e8b\u52a1\u7684\u624d\u521a\u521a\u5b8c\u6210\uff0c\u6b64\u65f6\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u662f\u5426\u5df2\u7ecf\u7ec8\u6b62\uff0c\u5982\u679c\u7ec8\u6b62\uff0c\u5219\u8865\u507f\u5f53\u524d\u521a\u521a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n-\t\t\t\t\tif (isGlobalTxAborted(event)) {\n-\t\t\t\t\t\t// subA ok, timeout, compensate subA, subB ok without exception(need to save ended even though aborted), compensate subB.\n-\t\t\t\t\t\tcommandRepository.saveWillCompensateCmdForCurSubTx(globalTxId, localTxId);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// \u7531\u4e8e\u5b9a\u65f6\u626b\u63cf\u5668\u4e2d\u68c0\u6d4b\u8d85\u65f6\u4f1a\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\uff0c\u5982\u5b9a\u65f6\u5668\u4e2d\u4efb\u52a1\u97003s\u5b8c\u6210\uff0c\u4f46\u67d0\u4e8b\u52a1\u8d85\u65f6\u8bbe\u7f6e\u7684\u662f2\u79d2\uff0c\u6b64\u65f6\u8fd8\u672a\u7b49\u5bf9\u8be5\u4e8b\u7269\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u4e8b\u52a1\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u5728\u6b63\u5e38\u7ed3\u675f\u524d\u9700\u68c0\u6d4b\u662f\u5426\u8d85\u65f6\n-\t\t\t\t\t\t// \u5982\u679c\u6709\u503c\uff0c\u8bf4\u660e\u5728EventScanner\u4e2d\u5df2\u68c0\u6d4b\u5230\u5e76\u5904\u7406\u4e86\n-\t\t\t\t\t\tTxEvent unhandleTimeoutEvent = eventRepository.findTimeoutEventsBeforeEnding(globalTxId);\n-\t\t\t\t\t\tif (unhandleTimeoutEvent != null) {\n-\t\t\t\t\t\t\t// ps: \u5728\u672a\u4fdd\u5b58event\u524d\uff0c\u5c06\u5176\u8f6c\u6362\u6210timeout\uff0ctimeout\u4e2d\u5c06\u65e0\u6cd5\u83b7\u53d6\u5230event\u7684id\u503c(\u9ed8\u8ba4\u4e3a-1)\uff0c\u6545\u4e0a\u4e00\u884c\u4ee3\u7801\u67e5\u8be2\u5df2\u4fdd\u5b58\u7684\u8d85\u65f6\u4e8b\u4ef6\u8bb0\u5f55\n-\t\t\t\t\t\t\tTxTimeout txTimeout = txTimeoutOf(unhandleTimeoutEvent);\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tLOG.debug(\"TxConsistentService Detected the Timeout {}.\", txTimeout);\n-\t\t\t\t\t\t\t\t// \u7ed3\u675f\u5168\u5c40\u4e8b\u52a1\u524d\uff0c\u68c0\u6d4b\u5230\u8d85\u65f6\uff0c\u4fdd\u5b58\u8d85\u65f6\u8bb0\u5f55\n-\t\t\t\t\t\t\t\ttimeoutRepository.save(txTimeout);\n-\t\t\t\t\t\t\t\tTxEvent abortedEvent = toTxAbortedEvent(txTimeout);\n-\t\t\t\t\t\t\t\tif (!eventRepository.checkIsExistsEventType(globalTxId, localTxId, abortedEvent.type())) {\n-\t\t\t\t\t\t\t\t\t// \u4f9d\u636e\u8d85\u65f6\u8bb0\u5f55\u751f\u6210\u5f02\u5e38\u4e8b\u4ef6\n-\t\t\t\t\t\t\t\t\teventRepository.save(abortedEvent);\n-\t\t\t\t\t\t\t\t\ttxleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\t\tLOG.error(\"Failed to save timeout {} in method 'TxConsistentService.handleSupportTxPause()'.\", txTimeout, e);\n-\t\t\t\t\t\t\t} finally {\n-\t\t\t\t\t\t\t\t// \u4fdd\u5b58\u8d85\u65f6\u60c5\u51b5\u4e0b\u7684\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u5f53\u524d\u8d85\u65f6\u5168\u5c40\u4e8b\u52a1\u4e0b\u7684\u6240\u6709\u5e94\u8be5\u8865\u507f\u7684\u5b50\u4e8b\u4ef6\u7684\u5f85\u8865\u507f\u547d\u4ee4 By Gannalyo\n-\t\t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsForTimeout(globalTxId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tif (TxAbortedEvent.name().equals(type)) {\n-\t\t\t\t\t// \u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\u3002\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u6807\u8bc6\u7b49\u4e8e\u5b50\u4e8b\u52a1\u6807\u8bc6\u60c5\u51b5\u7684\u5f02\u5e38\uff0c\u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u3002\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u5219\u9700\u9a8c\u8bc1\u662f\u5426\u662f\u5b50\u4e8b\u52a1\u7684\u6700\u7ec8\u5f02\u5e38\u3002\n-\t\t\t\t\tif (globalTxId.equals(localTxId) || eventRepository.checkTxIsAborted(globalTxId, localTxId)) {\n-\t\t\t\t\t\ttxleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n-\t\t\t\t\t\tif (!globalTxId.equals(localTxId)) {\n-\t\t\t\t\t\t\t// \u5f53\u51fa\u73b0\u975e\u8d85\u65f6\u7684\u5f02\u5e38\u60c5\u51b5\u65f6\u8bb0\u5f55\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u8d85\u65f6\u5f02\u5e38\u7531\u5b9a\u65f6\u5668\u8d1f\u8d23\n-\t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u540e\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n-\t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u68c0\u6d4b\u8d85\u65f6SQL\u8ffd\u52a0\u3010\u65e0TxAbortedEvent\u6761\u4ef6\u3011\n-\t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u524d\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n-\t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u5931\u8d25\u65f6\u672c\u5730\u4f1a\u7acb\u5373\u5c06global\u548clocal\u7684id\u8bb0\u5f55\u5230\u7f13\u5b58\u4e2d\uff0c\u540e\u7eed\u8d85\u65f6\u8865\u507f\u4f1a\u5148\u5bf9\u6bd4\u8be5\u7f13\u5b58\uff0c\u4e0d\u5b58\u5728\u518d\u8865\u507f\n-\t\t\t\t\t\t\t// \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u524d\uff0c\u5b9a\u65f6\u5668\u68c0\u6d4b\u5230\u8d85\u65f6\u5e76\u4e14\u8fdb\u884c\u4e86\u8865\u507f\uff0c\u4e4b\u540e\u5b50\u4e8b\u52a1\u4e2d\u6267\u884c\u5931\u8d25\uff0c\u53c8\u8fdb\u884c\u4e86\u672c\u5730\u56de\u6eda\uff0c\u5373\u591a\u56de\u6eda\u4e86\u4e00\u6b21\n-\t\t\t\t\t\t\t// \u89e3\u51b3\u529e\u6cd5\uff1a\u8d85\u65f6\u53ea\u5bf9\u5df2\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\u8fdb\u884c\u8865\u507f\uff0c\u672a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\uff0c\u5982\u679c\u540e\u7eed\u5931\u8d25\u4e86\u5219\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\uff0c\u5982\u679c\u6210\u529f\u7ed3\u675f\uff0c\u5219\u5728\u7ed3\u675f\u65f6\u4f1a\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u6216\u8d85\u65f6\uff0c\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u5df2\u7ec8\u6b62\u4e86\uff0c\u5219\u56de\u6eda\u5f53\u524d\u6210\u529f\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n-\t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsForException(globalTxId, localTxId);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// \u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u7ec8\u6b62\n-\t\t\t\t\t\t\tcommandRepository.saveWillCompensateCommandsWhenGlobalTxAborted(globalTxId);\n-\t\t\t\t\t\t\tTxEvent sagaEndedEvent = new TxEvent(event.serviceName(), event.instanceId(), globalTxId, globalTxId, null, SagaEndedEvent.name(), \"\", event.category(), new byte[0]);\n-\t\t\t\t\t\t\teventRepository.save(sagaEndedEvent);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOG.error(\"Failed to save event globalTxId {} localTxId {} type {}\", globalTxId, localTxId, type, e);\n-\t\t\t} finally {\n-\t\t\t\ttxleMetrics.countTxNumber(event, false, event.retries() > 0);\n-\t\t\t\t// end duration.\n-\t\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t\t}\n-\n-\t\t\treturn 1;\n-\t\t}\n-\n-\t\t// end duration.\n-\t\ttxleMetrics.endMarkTxDuration(event);\n-\n-\t\treturn 0;\n-\t}\n-\n-  private boolean isGlobalTxAborted(TxEvent event) {\n-\tif (SagaStartedEvent.name().equals(event.type())) {\n-\t\treturn false;\n-\t}\n+    @Autowired\n+    private ITxleCache txleCache;\n+\n+    @Autowired\n+    private ITxEventAdditionService eventAdditionService;\n+    private final List<String> types = Arrays.asList(TxEndedEvent.name(), TxAbortedEvent.name());\n+\n+    public TxConsistentService(TxEventRepository eventRepository, CommandRepository commandRepository, TxTimeoutRepository timeoutRepository) {\n+        this.eventRepository = eventRepository;\n+        this.commandRepository = commandRepository;\n+        this.timeoutRepository = timeoutRepository;\n+    }\n+\n+    public boolean handle(TxEvent event) {\n+      // start duration.\n+        txleMetrics.startMarkTxDuration(event);\n+        if (types.contains(event.type()) && isGlobalTxAborted(event)) {\n+            LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", event.type(), event.globalTxId());\n+          // end duration.\n+            txleMetrics.endMarkTxDuration(event);\n+            return false;\n+        }\n+        eventRepository.save(event);\n+      // end duration.\n+        txleMetrics.endMarkTxDuration(event);\n+        return true;\n+    }\n+\n+    /**\n+     * handle the event. support transaction pause/continue/auto-continue.\n+     *\n+     * @param event event for global/sub transaction\n+     * @return result\n+     * @author Gannalyo\n+     */\n+\n+    public int handleSupportTxPause(TxEvent event) {\n+        // start duration.\n+        txleMetrics.startMarkTxDuration(event);\n+        // child transaction count\n+        txleMetrics.countChildTxNumber(event);\n+        String globalTxId = event.globalTxId(), localTxId = event.localTxId(), type = event.type();\n+        if (!types.contains(type) && isGlobalTxAborted(event)) {\n+            LOG.info(\"Transaction event {} rejected, because its parent with globalTxId {} was already aborted\", type, globalTxId);\n+            // Should return wrong result in case of aborted transaction, even though all of businesses were completed.\n+            if (SagaEndedEvent.name().equals(type)) {\n+                eventRepository.save(event);\n+            }\n+            txleMetrics.countTxNumber(event, false, event.retries() > 0);\n+            // end duration.\n+            txleMetrics.endMarkTxDuration(event);\n+            return -1;\n+        }\n+\n+        /**\n+         * To save event only when the status of the global transaction is not paused.\n+         * If not, return to client immediately, and client will do something, like sending again.\n+         */\n+        boolean isPaused = isGlobalTxPaused(globalTxId, type);\n+        if (!isPaused) {\n+            CurrentThreadContext.put(globalTxId, event);\n+\n+            // We could intercept this method or use the Observer Design model on it, the aim is to handle some operations around it, but apparently, it is not easy to maintain code, so we reserved this idea.\n+            // \u4fdd\u5b58\u4e8b\u4ef6\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u67d0\u5b50\u4e8b\u52a1\u7684\u67d0\u79cd\u4e8b\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u5219\u4e0d\u518d\u4fdd\u5b58\u3002\u5982\uff1a\u68c0\u6d4b\u67d0\u4e8b\u52a1\u8d85\u65f6\u540e\uff0c\u82e5\u5728\u4e0b\u6b21\u68c0\u6d4b\u65f6\u505a\u51fa\u8865\u507f\u5904\u7406\uff0c\u5219\u4f1a\u4fdd\u5b58\u591a\u6761\u8d85\u65f6\u4e8b\u4ef6\u4fe1\u606f\uff0c\u4e3a\u907f\u514d\u5219\u5148\u68c0\u6d4b\u662f\u5426\u5b58\u5728\n+\n+            try {\n+                eventRepository.save(event);\n+\n+                // \u6b64\u5904\u7ee7\u7eed\u68c0\u6d4b\u8d85\u65f6\u7684\u610f\u4e49\u662f\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u6267\u884c\u5168\u5c40\u4e8b\u52a1\u4e2d\u6b64\u5b50\u4e8b\u52a1\u540e\u9762\u5176\u5b83\u5b50\u4e8b\u52a1\n+                if (TxEndedEvent.name().equals(type)) {\n+                    // \u82e5\u5b9a\u65f6\u5668\u68c0\u6d4b\u8d85\u65f6\u540e\u7ed3\u675f\u4e86\u5f53\u524d\u5168\u5c40\u4e8b\u52a1\uff0c\u4f46\u8d85\u65f6\u5b50\u4e8b\u52a1\u7684\u624d\u521a\u521a\u5b8c\u6210\uff0c\u6b64\u65f6\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u662f\u5426\u5df2\u7ecf\u7ec8\u6b62\uff0c\u5982\u679c\u7ec8\u6b62\uff0c\u5219\u8865\u507f\u5f53\u524d\u521a\u521a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n+                    if (isGlobalTxAborted(event)) {\n+                        // subA ok, timeout, compensate subA, subB ok without exception(need to save ended even though aborted), compensate subB.\n+                        commandRepository.saveWillCompensateCmdForCurSubTx(globalTxId, localTxId);\n+                    } else {\n+                        // \u7531\u4e8e\u5b9a\u65f6\u626b\u63cf\u5668\u4e2d\u68c0\u6d4b\u8d85\u65f6\u4f1a\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\uff0c\u5982\u5b9a\u65f6\u5668\u4e2d\u4efb\u52a1\u97003s\u5b8c\u6210\uff0c\u4f46\u67d0\u4e8b\u52a1\u8d85\u65f6\u8bbe\u7f6e\u7684\u662f2\u79d2\uff0c\u6b64\u65f6\u8fd8\u672a\u7b49\u5bf9\u8be5\u4e8b\u7269\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u4e8b\u52a1\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5\u6b64\u5904\u5728\u6b63\u5e38\u7ed3\u675f\u524d\u9700\u68c0\u6d4b\u662f\u5426\u8d85\u65f6\n+                        // \u5982\u679c\u6709\u503c\uff0c\u8bf4\u660e\u5728EventScanner\u4e2d\u5df2\u68c0\u6d4b\u5230\u5e76\u5904\u7406\u4e86\n+                        TxEvent unhandleTimeoutEvent = eventRepository.findTimeoutEventsBeforeEnding(globalTxId);\n+                        if (unhandleTimeoutEvent != null) {\n+                            // ps: \u5728\u672a\u4fdd\u5b58event\u524d\uff0c\u5c06\u5176\u8f6c\u6362\u6210timeout\uff0ctimeout\u4e2d\u5c06\u65e0\u6cd5\u83b7\u53d6\u5230event\u7684id\u503c(\u9ed8\u8ba4\u4e3a-1)\uff0c\u6545\u4e0a\u4e00\u884c\u4ee3\u7801\u67e5\u8be2\u5df2\u4fdd\u5b58\u7684\u8d85\u65f6\u4e8b\u4ef6\u8bb0\u5f55\n+                            TxTimeout txTimeout = txTimeoutOf(unhandleTimeoutEvent);\n+                            try {\n+                                LOG.debug(\"TxConsistentService Detected the Timeout {}.\", txTimeout);\n+                                // \u7ed3\u675f\u5168\u5c40\u4e8b\u52a1\u524d\uff0c\u68c0\u6d4b\u5230\u8d85\u65f6\uff0c\u4fdd\u5b58\u8d85\u65f6\u8bb0\u5f55\n+                                timeoutRepository.save(txTimeout);\n+                                TxEvent abortedEvent = toTxAbortedEvent(txTimeout);\n+                                if (!eventRepository.checkIsExistsEventType(globalTxId, localTxId, abortedEvent.type())) {\n+                                    // \u4f9d\u636e\u8d85\u65f6\u8bb0\u5f55\u751f\u6210\u5f02\u5e38\u4e8b\u4ef6\n+                                    eventRepository.save(abortedEvent);\n+                                    txleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n+                                }\n+                            } catch (Exception e) {\n+                                LOG.error(\"Failed to save timeout {} in method 'TxConsistentService.handleSupportTxPause()'.\", txTimeout, e);\n+                            } finally {\n+                                // \u4fdd\u5b58\u8d85\u65f6\u60c5\u51b5\u4e0b\u7684\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u5f53\u524d\u8d85\u65f6\u5168\u5c40\u4e8b\u52a1\u4e0b\u7684\u6240\u6709\u5e94\u8be5\u8865\u507f\u7684\u5b50\u4e8b\u4ef6\u7684\u5f85\u8865\u507f\u547d\u4ee4 By Gannalyo\n+                                commandRepository.saveWillCompensateCommandsForTimeout(globalTxId);\n+                            }\n+                        }\n+                    }\n+                }\n+                if (TxAbortedEvent.name().equals(type)) {\n+                    // \u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\u3002\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u6807\u8bc6\u7b49\u4e8e\u5b50\u4e8b\u52a1\u6807\u8bc6\u60c5\u51b5\u7684\u5f02\u5e38\uff0c\u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u3002\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u5219\u9700\u9a8c\u8bc1\u662f\u5426\u662f\u5b50\u4e8b\u52a1\u7684\u6700\u7ec8\u5f02\u5e38\u3002\n+                    if (globalTxId.equals(localTxId) || eventRepository.checkTxIsAborted(globalTxId, localTxId)) {\n+                        txleCache.putDistributedTxAbortStatusCache(globalTxId, true, 2);\n+                        if (!globalTxId.equals(localTxId)) {\n+                            // \u5f53\u51fa\u73b0\u975e\u8d85\u65f6\u7684\u5f02\u5e38\u60c5\u51b5\u65f6\u8bb0\u5f55\u5f85\u8865\u507f\u547d\u4ee4\uff0c\u8d85\u65f6\u5f02\u5e38\u7531\u5b9a\u65f6\u5668\u8d1f\u8d23\n+                            // \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u540e\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n+                            // \u89e3\u51b3\u529e\u6cd5\uff1a\u68c0\u6d4b\u8d85\u65f6SQL\u8ffd\u52a0\u3010\u65e0TxAbortedEvent\u6761\u4ef6\u3011\n+                            // \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u65f6\uff0c\u672c\u5730\u4e8b\u52a1\u56de\u6eda\uff0c\u8bb0\u5f55\u5f02\u5e38\u4e8b\u4ef6\u3010\u524d\u3011\uff0c\u88ab\u68c0\u6d4b\u4e3a\u8d85\u65f6\uff0c\u5219\u8be5\u5931\u8d25\u7684\u5b50\u4e8b\u52a1\u53c8\u88ab\u56de\u6eda\u4e00\u6b21\n+                            // \u89e3\u51b3\u529e\u6cd5\uff1a\u5931\u8d25\u65f6\u672c\u5730\u4f1a\u7acb\u5373\u5c06global\u548clocal\u7684id\u8bb0\u5f55\u5230\u7f13\u5b58\u4e2d\uff0c\u540e\u7eed\u8d85\u65f6\u8865\u507f\u4f1a\u5148\u5bf9\u6bd4\u8be5\u7f13\u5b58\uff0c\u4e0d\u5b58\u5728\u518d\u8865\u507f\n+                            // \u5e26\u6709\u8d85\u65f6\u7684\u5b50\u4e8b\u52a1\u6267\u884c\u5931\u8d25\u524d\uff0c\u5b9a\u65f6\u5668\u68c0\u6d4b\u5230\u8d85\u65f6\u5e76\u4e14\u8fdb\u884c\u4e86\u8865\u507f\uff0c\u4e4b\u540e\u5b50\u4e8b\u52a1\u4e2d\u6267\u884c\u5931\u8d25\uff0c\u53c8\u8fdb\u884c\u4e86\u672c\u5730\u56de\u6eda\uff0c\u5373\u591a\u56de\u6eda\u4e86\u4e00\u6b21\n+                            // \u89e3\u51b3\u529e\u6cd5\uff1a\u8d85\u65f6\u53ea\u5bf9\u5df2\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\u8fdb\u884c\u8865\u507f\uff0c\u672a\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\uff0c\u5982\u679c\u540e\u7eed\u5931\u8d25\u4e86\u5219\u65e0\u9700\u4efb\u4f55\u64cd\u4f5c\uff0c\u5982\u679c\u6210\u529f\u7ed3\u675f\uff0c\u5219\u5728\u7ed3\u675f\u65f6\u4f1a\u68c0\u6d4b\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u6216\u8d85\u65f6\uff0c\u5982\u679c\u5168\u5c40\u4e8b\u52a1\u5df2\u7ec8\u6b62\u4e86\uff0c\u5219\u56de\u6eda\u5f53\u524d\u6210\u529f\u5b8c\u6210\u7684\u5b50\u4e8b\u52a1\n+                            commandRepository.saveWillCompensateCommandsForException(globalTxId, localTxId);\n+                        } else {\n+                            // \u8bf4\u660e\u662f\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\u7ec8\u6b62\n+                            commandRepository.saveWillCompensateCommandsWhenGlobalTxAborted(globalTxId);\n+                            TxEvent sagaEndedEvent = new TxEvent(event.serviceName(), event.instanceId(), globalTxId, globalTxId, null, SagaEndedEvent.name(), \"\", event.category(), new byte[0]);\n+                            eventRepository.save(sagaEndedEvent);\n+                        }\n+                    }\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Failed to save event globalTxId {} localTxId {} type {}\", globalTxId, localTxId, type, e);\n+            } finally {\n+                txleMetrics.countTxNumber(event, false, event.retries() > 0);\n+                // end duration.\n+                txleMetrics.endMarkTxDuration(event);\n+            }\n+            return 1;\n+        }\n+\n+        // end duration.\n+        txleMetrics.endMarkTxDuration(event);\n+        return 0;\n+    }\n+\n+    private boolean isGlobalTxAborted(TxEvent event) {\n+        if (SagaStartedEvent.name().equals(event.type())) {\n+            return false;\n+        }\n //    return !eventRepository.findTransactions(event.globalTxId(), TxAbortedEvent.name()).isEmpty();\n-    return txleCache.getTxAbortStatus(event.globalTxId());\n+        return txleCache.getTxAbortStatus(event.globalTxId());\n     // \u5148\u67e5\u8be2\u662f\u5426\u542bAborted\u4e8b\u4ef6\uff0c\u5982\u679c\u542b\u6709\u518d\u786e\u5b9a\u662f\u5426\u4e3a\u91cd\u8bd5\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u4e00\u4e0b\u5b50\u90fd\u786e\u5b9a\u597d\uff0c\u56e0\u4e3a\u5b58\u5728\u5f02\u5e38\u4e8b\u4ef6\u7684\u4e0d\u591a\uff0c\u8fd9\u6837\u6027\u80fd\u4e0a\u4f1a\u5feb\u4e9b\n     /*TxEvent abortedTxEvent = eventRepository.selectAbortedTxEvent(event.globalTxId());\n-\tif (abortedTxEvent != null) {\n-\t\tif (abortedTxEvent.globalTxId().equals(abortedTxEvent.localTxId())) {\n-\t\t\t// \u8bf4\u660e\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\uff0c\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u7ee7\u7eed\u9a8c\u8bc1\u662f\u5426\u91cd\u8bd5\u4e2d\u7684\u5f02\u5e38\u8fd8\u662f\u91cd\u8bd5\u5b8c\u6210\u6700\u7ec8\u5f02\u5e38\n-\t\t\treturn true;\n-\t\t}\n-\t\t// \t\u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\n-\t\treturn eventRepository.checkTxIsAborted(abortedTxEvent.globalTxId(), abortedTxEvent.localTxId());\n-\t}\n-  \treturn false;*/\n-  }\n-\n-\tpublic boolean isGlobalTxPaused(String globalTxId, String type) {\n-\t\tif (SagaEndedEvent.name().equals(type)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tboolean isPaused = false;\n-\t\ttry {\n+    if (abortedTxEvent != null) {\n+        if (abortedTxEvent.globalTxId().equals(abortedTxEvent.localTxId())) {\n+            // \u8bf4\u660e\u5168\u5c40\u4e8b\u52a1\u5f02\u5e38\uff0c\u5426\u5219\u8bf4\u660e\u5b50\u4e8b\u52a1\u5f02\u5e38\uff0c\u7ee7\u7eed\u9a8c\u8bc1\u662f\u5426\u91cd\u8bd5\u4e2d\u7684\u5f02\u5e38\u8fd8\u662f\u91cd\u8bd5\u5b8c\u6210\u6700\u7ec8\u5f02\u5e38\n+            return true;\n+        }\n+        //  \u9a8c\u8bc1\u662f\u5426\u6700\u7ec8\u5f02\u5e38\uff0c\u5373\u6392\u9664\u975e\u6700\u540e\u4e00\u6b21\u91cd\u8bd5\u65f6\u7684\u5f02\u5e38\n+        return eventRepository.checkTxIsAborted(abortedTxEvent.globalTxId(), abortedTxEvent.localTxId());\n+    }\n+    return false;*/\n+    }\n+\n+    public boolean isGlobalTxPaused(String globalTxId, String type) {\n+        if (SagaEndedEvent.name().equals(type)) {\n+            return false;\n+        }\n+        boolean isPaused = false;\n+        try {\n             final String pauseAllGlobalTxKey = TxleConstants.constructConfigCacheKey(null, null, ConfigCenterType.PauseGlobalTx.toInteger());\n             if (txleCache.getConfigCache().getOrDefault(pauseAllGlobalTxKey, false)) {\n                 // paused all global transactions.\n                 return true;\n             }\n-\n             if (!txleCache.getTxSuspendStatus(globalTxId)) {\n                 // return false directly if it's not suspended.\n                 return false;\n@@ -235,7 +227,6 @@ public class TxConsistentService {\n                 if (typeList == null || typeList.isEmpty()) {\n                     return false;\n                 }\n-\n                 AtomicBoolean isContainPauseEvent = new AtomicBoolean(false);\n                 typeList.forEach(t -> {\n                     if (AdditionalEventType.SagaPausedEvent.name().equals(t) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(t)) {\n@@ -256,8 +247,7 @@ public class TxConsistentService {\n                     if (event.expiryTime().compareTo(new Date()) < 1) {\n                         try {\n                             // was due, create the event 'SagaAutoContinueEvent' to make event to continue running.\n-                            eventRepository.save(new TxEvent(event.serviceName(), event.instanceId(), event.globalTxId(), event.localTxId(), event.parentTxId(),\n-                                    AdditionalEventType.SagaAutoContinuedEvent.name(), \"\", 0, \"\", 0, event.category(), event.payloads()));\n+                            eventRepository.save(new TxEvent(event.serviceName(), event.instanceId(), event.globalTxId(), event.localTxId(), event.parentTxId(), AdditionalEventType.SagaAutoContinuedEvent.name(), \"\", 0, \"\", 0, event.category(), event.payloads()));\n                             isPaused = false;\n                         } catch (Exception e) {\n                             isPaused = true;\n@@ -267,86 +257,74 @@ public class TxConsistentService {\n                 }\n             }\n         } catch (Exception e) {\n-\t\t\tLOG.error(\"Fail to execute the method 'isGlobalTxPaused'.\", e);\n-\t\t}\n-\t\treturn isPaused;\n-\t}\n-\n-\tpublic Set<String> fetchLocalTxIdOfEndedGlobalTx(Set<String> localTxIdSet) {\n-\t\treturn eventRepository.selectEndedGlobalTx(localTxIdSet);\n-\t}\n-\n-\tpublic boolean saveKafkaMessage(KafkaMessage message) {\n-\t\treturn kafkaMessageRepository.save(message);\n-\t}\n-\n-\tprivate TxTimeout txTimeoutOf(TxEvent event) {\n-\t\treturn new TxTimeout(\n-\t\t\t\tevent.id(),\n-\t\t\t\tevent.serviceName(),\n-\t\t\t\tevent.instanceId(),\n-\t\t\t\tevent.globalTxId(),\n-\t\t\t\tevent.localTxId(),\n-\t\t\t\tevent.parentTxId(),\n-\t\t\t\tevent.type(),\n-\t\t\t\tevent.expiryTime(),\n-\t\t\t\tNEW.name(),\n-\t\t\t\tevent.category()\n-\t\t);\n-\t}\n-\n-\tprivate TxEvent toTxAbortedEvent(TxTimeout timeout) {\n-\t\treturn new TxEvent(\n-\t\t\t\ttimeout.serviceName(),\n-\t\t\t\ttimeout.instanceId(),\n-\t\t\t\ttimeout.globalTxId(),\n-\t\t\t\ttimeout.localTxId(),\n-\t\t\t\ttimeout.parentTxId(),\n-\t\t\t\tTxAbortedEvent.name(),\n-\t\t\t\t\"\",\n-\t\t\t\ttimeout.category(),\n-\t\t\t\t(\"Transaction timeout\").getBytes());\n-\t}\n-\n-\tpublic boolean registerGlobalTx(TxEvent event) {\n-\t\ttry {\n-\t\t\ttxleMetrics.startMarkTxDuration(event);\n-\t\t\teventRepository.save(event);\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.error(\"Failed to register global transaction [{}].\", event, e);\n-\t\t\treturn false;\n-\t\t} finally {\n-\t\t\ttxleMetrics.endMarkTxDuration(event);\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean registerSubTx(TxEvent subTxEvent, TxEventAddition subTxEventAddition) {\n-\t\ttry {\n-\t\t\ttxleMetrics.countChildTxNumber(subTxEvent);\n-\t\t\ttxleMetrics.startMarkTxDuration(subTxEvent);\n-\n-\t\t\teventRepository.save(subTxEvent);\n-\n-\t\t\tif (subTxEventAddition != null) {\n-\t\t\t\teventAdditionService.save(subTxEventAddition);\n-\t\t\t}\n-\n-\t\t\tif (TxCompensatedEvent.name().equals(subTxEvent.type())) {\n-\t\t\t\teventAdditionService.updateCompensateStatus(subTxEvent.instanceId(), subTxEvent.globalTxId(), subTxEvent.localTxId());\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tLOG.error(\"Failed to register global transaction [{}].\", subTxEvent, e);\n-\t\t\treturn false;\n-\t\t} finally {\n-\t\t\ttxleMetrics.countTxNumber(subTxEvent, false, subTxEvent.retries() > 0);\n-\t\t\ttxleMetrics.endMarkTxDuration(subTxEvent);\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\tpublic boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n-\t\treturn eventRepository.checkIsExistsEventType(globalTxId, localTxId, type);\n-\t}\n-\n-}\n+            LOG.error(\"Fail to execute the method 'isGlobalTxPaused'.\", e);\n+        }\n+        return isPaused;\n+    }\n+\n+    public Set<String> fetchLocalTxIdOfEndedGlobalTx(Set<String> localTxIdSet) {\n+        return eventRepository.selectEndedGlobalTx(localTxIdSet);\n+    }\n+\n+    public boolean saveKafkaMessage(KafkaMessage message) {\n+        return kafkaMessageRepository.save(message);\n+    }\n+\n+    private TxTimeout txTimeoutOf(TxEvent event) {\n+        return new TxTimeout(\n+            event.id(),\n+            event.serviceName(),\n+            event.instanceId(),\n+            event.globalTxId(),\n+            event.localTxId(),\n+            event.parentTxId(),\n+            event.type(),\n+            event.expiryTime(),\n+            NEW.name(),\n+            event.category()\n+        );\n+    }\n+\n+    private TxEvent toTxAbortedEvent(TxTimeout timeout) {\n+        return new TxEvent(timeout.serviceName(), timeout.instanceId(), timeout.globalTxId(), timeout.localTxId(), timeout.parentTxId(), TxAbortedEvent.name(), \"\", timeout.category(), (\"Transaction timeout\").getBytes());\n+    }\n+\n+    public boolean registerGlobalTx(TxEvent event) {\n+        try {\n+            txleMetrics.startMarkTxDuration(event);\n+            eventRepository.save(event);\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to register global transaction [{}].\", event, e);\n+            return false;\n+        } finally {\n+            txleMetrics.endMarkTxDuration(event);\n+        }\n+        return true;\n+    }\n+\n+    public boolean registerSubTx(TxEvent subTxEvent, TxEventAddition subTxEventAddition) {\n+        try {\n+            txleMetrics.countChildTxNumber(subTxEvent);\n+            txleMetrics.startMarkTxDuration(subTxEvent);\n+            eventRepository.save(subTxEvent);\n+            if (subTxEventAddition != null) {\n+                eventAdditionService.save(subTxEventAddition);\n+            }\n+            if (TxCompensatedEvent.name().equals(subTxEvent.type())) {\n+                eventAdditionService.updateCompensateStatus(subTxEvent.instanceId(), subTxEvent.globalTxId(), subTxEvent.localTxId());\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to register global transaction [{}].\", subTxEvent, e);\n+            return false;\n+        } finally {\n+            txleMetrics.countTxNumber(subTxEvent, false, subTxEvent.retries() > 0);\n+            txleMetrics.endMarkTxDuration(subTxEvent);\n+        }\n+        return true;\n+    }\n+\n+    public boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n+        return eventRepository.checkIsExistsEventType(globalTxId, localTxId, type);\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 262
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/26/TxConsistentService.java\nindex 07643d415c9..d3fb2070e6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/26/TxConsistentService.java\n@@ -50,7 +50,7 @@ public class TxConsistentService {\n   @Autowired\n   private IKafkaMessageRepository kafkaMessageRepository;\n \n-\t@Autowired\n+  @Autowired\n     private TxleMetrics txleMetrics;\n \n \t@Autowired\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "56",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/26/TxConsistentService.java\nindex 07643d415c9..d3fb2070e6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/26/TxConsistentService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/26/TxConsistentService.java\n@@ -50,7 +50,7 @@ public class TxConsistentService {\n   @Autowired\n   private IKafkaMessageRepository kafkaMessageRepository;\n \n-\t@Autowired\n+  @Autowired\n     private TxleMetrics txleMetrics;\n \n \t@Autowired\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}