{
    "project_name": "ManfredTremmel-gwt-bean-validators",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "14",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * the License.\n */\npackage org.springframework.data.domain;\n\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/styler/21/Chunk.java\nindex 09f3a0cba0f..c1b5723b249 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/styler/21/Chunk.java\n@@ -11,6 +11,7 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n package org.springframework.data.domain;\n \n import org.springframework.lang.Nullable;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/intellij/21/Chunk.java\nindex 09f3a0cba0f..14abb2d7b1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/intellij/21/Chunk.java\n@@ -11,6 +11,7 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n package org.springframework.data.domain;\n \n import org.springframework.lang.Nullable;\n@@ -41,7 +42,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n   /**\n    * Creates a new {@link Chunk} with the given content and the given governing {@link Pageable}.\n    *\n-   * @param content must not be {@literal null}.\n+   * @param content  must not be {@literal null}.\n    * @param pageable must not be {@literal null}.\n    */\n   public Chunk(final List<T> content, final Pageable pageable) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "224",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/naturalize/21/Chunk.java\nindex 09f3a0cba0f..5b4181adff3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/naturalize/21/Chunk.java\n@@ -11,6 +11,7 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n package org.springframework.data.domain;\n \n import org.springframework.lang.Nullable;\n@@ -45,8 +46,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    * @param pageable must not be {@literal null}.\n    */\n   public Chunk(final List<T> content, final Pageable pageable) {\n-\n-    Assert.notNull(content, \"Content must not be null!\");\n+  Assert.notNull(content, \"Content must not be null!\");\n     Assert.notNull(pageable, \"Pageable must not be null!\");\n \n     this.content.addAll(content);\n@@ -185,8 +185,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    * @return\n    */\n   protected <U> List<U> getConvertedContent(final Function<? super T, ? extends U> converter) {\n-\n-    Assert.notNull(converter, \"Function must not be null!\");\n+  Assert.notNull(converter, \"Function must not be null!\");\n \n     return stream().map(converter::apply).collect(Collectors.toList());\n   }\n@@ -222,12 +221,11 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    */\n   @Override\n   public int hashCode() {\n-\n-    int result = 17;\n+  int result = 17;\n \n     result += 31 * this.pageable.hashCode();\n     result += 31 * this.content.hashCode();\n \n     return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/codebuff/21/Chunk.java\nindex 09f3a0cba0f..41ab212d69e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/codebuff/21/Chunk.java\n@@ -15,7 +15,6 @@ package org.springframework.data.domain;\n \n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n-\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -31,11 +30,17 @@ import java.util.stream.Collectors;\n  * @author Christoph Strobl\n  * @since 1.8\n  */\n+\n+\n abstract class Chunk<T> implements Slice<T>, Serializable {\n \n+\n   private static final long serialVersionUID = 867755909294344406L;\n \n+\n   private final List<T> content = new ArrayList<>();\n+\n+\n   private final Pageable pageable;\n \n   /**\n@@ -44,11 +49,12 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    * @param content must not be {@literal null}.\n    * @param pageable must not be {@literal null}.\n    */\n-  public Chunk(final List<T> content, final Pageable pageable) {\n \n+\n+  public Chunk(final List<T> content,\n+                          final Pageable pageable) {\n     Assert.notNull(content, \"Content must not be null!\");\n     Assert.notNull(pageable, \"Pageable must not be null!\");\n-\n     this.content.addAll(content);\n     this.pageable = pageable;\n   }\n@@ -58,6 +64,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#getNumber()\n    */\n+\n   @Override\n   public int getNumber() {\n     return this.pageable.isPaged() ? this.pageable.getPageNumber() : 0;\n@@ -68,6 +75,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#getSize()\n    */\n+\n   @Override\n   public int getSize() {\n     return this.pageable.isPaged() ? this.pageable.getPageSize() : 0;\n@@ -78,6 +86,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#getNumberOfElements()\n    */\n+\n   @Override\n   public int getNumberOfElements() {\n     return this.content.size();\n@@ -88,6 +97,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#hasPrevious()\n    */\n+\n   @Override\n   public boolean hasPrevious() {\n     return this.getNumber() > 0;\n@@ -98,6 +108,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#isFirst()\n    */\n+\n   @Override\n   public boolean isFirst() {\n     return !this.hasPrevious();\n@@ -108,6 +119,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#isLast()\n    */\n+\n   @Override\n   public boolean isLast() {\n     return !hasNext();\n@@ -118,6 +130,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#nextPageable()\n    */\n+\n   @Override\n   public Pageable nextPageable() {\n     return hasNext() ? this.pageable.next() : Pageable.unpaged();\n@@ -128,6 +141,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#previousPageable()\n    */\n+\n   @Override\n   public Pageable previousPageable() {\n     return this.hasPrevious() ? this.pageable.previousOrFirst() : Pageable.unpaged();\n@@ -138,6 +152,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#hasContent()\n    */\n+\n   @Override\n   public boolean hasContent() {\n     return !this.content.isEmpty();\n@@ -148,6 +163,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#getContent()\n    */\n+\n   @Override\n   public List<T> getContent() {\n     return Collections.unmodifiableList(this.content);\n@@ -158,6 +174,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see org.springframework.data.domain.Slice#getSort()\n    */\n+\n   @Override\n   public Sort getSort() {\n     return this.pageable.getSort();\n@@ -173,6 +190,7 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see java.lang.Iterable#iterator()\n    */\n+\n   @Override\n   public Iterator<T> iterator() {\n     return this.content.iterator();\n@@ -184,10 +202,9 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    * @param converter must not be {@literal null}.\n    * @return\n    */\n-  protected <U> List<U> getConvertedContent(final Function<? super T, ? extends U> converter) {\n \n+  protected <U> List<U> getConvertedContent(final Function<? super T, ? extends U> converter) {\n     Assert.notNull(converter, \"Function must not be null!\");\n-\n     return stream().map(converter::apply).collect(Collectors.toList());\n   }\n \n@@ -196,22 +213,18 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see java.lang.Object#equals(java.lang.Object)\n    */\n+\n   @Override\n   public boolean equals(@Nullable final Object obj) {\n-\n     if (this == obj) {\n       return true;\n     }\n-\n     if (!(obj instanceof Chunk<?>)) {\n       return false;\n     }\n-\n     final Chunk<?> that = (Chunk<?>) obj;\n-\n     final boolean contentEqual = this.content.equals(that.content);\n     final boolean pageableEqual = this.pageable.equals(that.pageable);\n-\n     return contentEqual && pageableEqual;\n   }\n \n@@ -220,14 +233,12 @@ abstract class Chunk<T> implements Slice<T>, Serializable {\n    *\n    * @see java.lang.Object#hashCode()\n    */\n+\n   @Override\n   public int hashCode() {\n-\n     int result = 17;\n-\n     result += 31 * this.pageable.hashCode();\n     result += 31 * this.content.hashCode();\n-\n     return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/styler_random/21/Chunk.java\nindex 09f3a0cba0f..c1b5723b249 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/styler_random/21/Chunk.java\n@@ -11,6 +11,7 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n package org.springframework.data.domain;\n \n import org.springframework.lang.Nullable;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/styler_three_grams/21/Chunk.java\nindex 09f3a0cba0f..c1b5723b249 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/errored/1/21/Chunk.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ManfredTremmel-gwt-bean-validators/styler_three_grams/21/Chunk.java\n@@ -11,6 +11,7 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n package org.springframework.data.domain;\n \n import org.springframework.lang.Nullable;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}