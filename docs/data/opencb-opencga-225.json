{
    "project_name": "opencb-opencga",
    "error_id": "225",
    "information": {
        "errors": [
            {
                "line": "58",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    protected VariantMetadata makeVariantMetadata(VariantQueryProjection queryFields, QueryOptions queryOptions) throws StorageEngineException {\n        VariantMetadata metadata = super.makeVariantMetadata(queryFields, queryOptions);\n        if (queryOptions != null) {\n            if (queryOptions.getBoolean(BASIC_METADATA, false)) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/225/CatalogVariantMetadataFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/225/CatalogVariantMetadataFactory.java\nindex fbe1790b4f7..9ab1ab97e95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/225/CatalogVariantMetadataFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/225/CatalogVariantMetadataFactory.java\n@@ -28,140 +28,141 @@ import java.util.stream.Collectors;\n  */\n public final class CatalogVariantMetadataFactory extends VariantMetadataFactory {\n \n-    private static final QueryOptions SAMPLE_QUERY_OPTIONS = new QueryOptions(QueryOptions.INCLUDE,\n-            Arrays.asList(\n-                    SampleDBAdaptor.QueryParams.UID.key(),\n-                    SampleDBAdaptor.QueryParams.ID.key(),\n-                    SampleDBAdaptor.QueryParams.DESCRIPTION.key(),\n-                    SampleDBAdaptor.QueryParams.ANNOTATION_SETS.key()\n-            ));\n-    private static final QueryOptions INDIVIDUAL_QUERY_OPTIONS = new QueryOptions(QueryOptions.INCLUDE,\n-            Arrays.asList(\n-                    IndividualDBAdaptor.QueryParams.UID.key(),\n-                    IndividualDBAdaptor.QueryParams.ID.key(),\n-                    IndividualDBAdaptor.QueryParams.SEX.key(),\n-                    IndividualDBAdaptor.QueryParams.MOTHER.key(),\n-                    IndividualDBAdaptor.QueryParams.FATHER.key()\n-            ));\n-    public static final int CATALOG_QUERY_BATCH_SIZE = 1000;\n-    public static final String BASIC_METADATA = \"basic\";\n-    private final CatalogManager catalogManager;\n-    private final String sessionId;\n-\n-    public CatalogVariantMetadataFactory(CatalogManager catalogManager, VariantDBAdaptor dbAdaptor, String sessionId) {\n-        super(dbAdaptor.getMetadataManager());\n-        this.catalogManager = catalogManager;\n-        this.sessionId = sessionId;\n-    }\n-\n-    @Override\n-    protected VariantMetadata makeVariantMetadata(VariantQueryProjection queryFields, QueryOptions queryOptions) throws StorageEngineException {\n-        VariantMetadata metadata = super.makeVariantMetadata(queryFields, queryOptions);\n-        if (queryOptions != null) {\n-            if (queryOptions.getBoolean(BASIC_METADATA, false)) {\n-                // If request BasicMetadata, do not return extra catalog information, neither samples in cohorts\n-                for (VariantStudyMetadata variantStudyMetadata : metadata.getStudies()) {\n-                    for (Cohort cohort : variantStudyMetadata.getCohorts()) {\n-                        cohort.setSampleIds(Collections.emptyList());\n-                    }\n-                }\n-                return metadata;\n-            }\n+  private static final QueryOptions SAMPLE_QUERY_OPTIONS = new QueryOptions(QueryOptions.INCLUDE,\n+      Arrays.asList(\n+          SampleDBAdaptor.QueryParams.UID.key(),\n+          SampleDBAdaptor.QueryParams.ID.key(),\n+          SampleDBAdaptor.QueryParams.DESCRIPTION.key(),\n+          SampleDBAdaptor.QueryParams.ANNOTATION_SETS.key()\n+      ));\n+  private static final QueryOptions INDIVIDUAL_QUERY_OPTIONS = new QueryOptions(QueryOptions.INCLUDE,\n+      Arrays.asList(\n+          IndividualDBAdaptor.QueryParams.UID.key(),\n+          IndividualDBAdaptor.QueryParams.ID.key(),\n+          IndividualDBAdaptor.QueryParams.SEX.key(),\n+          IndividualDBAdaptor.QueryParams.MOTHER.key(),\n+          IndividualDBAdaptor.QueryParams.FATHER.key()\n+      ));\n+  public static final int CATALOG_QUERY_BATCH_SIZE = 1000;\n+  public static final String BASIC_METADATA = \"basic\";\n+  private final CatalogManager catalogManager;\n+  private final String sessionId;\n+\n+  public CatalogVariantMetadataFactory(CatalogManager catalogManager, VariantDBAdaptor dbAdaptor, String sessionId) {\n+    super(dbAdaptor.getMetadataManager());\n+    this.catalogManager = catalogManager;\n+    this.sessionId = sessionId;\n+  }\n+\n+  @Override\n+  protected VariantMetadata makeVariantMetadata(VariantQueryProjection queryFields, QueryOptions queryOptions)\n+      throws StorageEngineException {\n+    VariantMetadata metadata = super.makeVariantMetadata(queryFields, queryOptions);\n+    if (queryOptions != null) {\n+      if (queryOptions.getBoolean(BASIC_METADATA, false)) {\n+        // If request BasicMetadata, do not return extra catalog information, neither samples in cohorts\n+        for (VariantStudyMetadata variantStudyMetadata : metadata.getStudies()) {\n+          for (Cohort cohort : variantStudyMetadata.getCohorts()) {\n+            cohort.setSampleIds(Collections.emptyList());\n+          }\n         }\n+        return metadata;\n+      }\n+    }\n \n-        try {\n-            for (VariantStudyMetadata studyMetadata : metadata.getStudies()) {\n-                String studyId = studyMetadata.getId();\n-                fillStudy(studyId, studyMetadata);\n-\n-                List<org.opencb.biodata.models.metadata.Individual> individuals = new ArrayList<>(CATALOG_QUERY_BATCH_SIZE);\n-                List<org.opencb.biodata.models.metadata.Sample> samples = new ArrayList<>(CATALOG_QUERY_BATCH_SIZE);\n-                Iterator<org.opencb.biodata.models.metadata.Individual> iterator = studyMetadata.getIndividuals().iterator();\n-                while (iterator.hasNext()) {\n-                    org.opencb.biodata.models.metadata.Individual individual = iterator.next();\n-                    individuals.add(individual);\n-                    samples.addAll(individual.getSamples());\n-                    if (individuals.size() >= CATALOG_QUERY_BATCH_SIZE || !iterator.hasNext()) {\n-                        fillIndividuals(studyId, individuals);\n-                        individuals.clear();\n-                    }\n-                    if (samples.size() >= CATALOG_QUERY_BATCH_SIZE || !iterator.hasNext()) {\n-                        fillSamples(studyId, samples);\n-                        samples.clear();\n-                    }\n-                }\n-            }\n-        } catch (CatalogException e) {\n-            throw new StorageEngineException(\"Error generating VariantMetadata\", e);\n+    try {\n+      for (VariantStudyMetadata studyMetadata : metadata.getStudies()) {\n+        String studyId = studyMetadata.getId();\n+        fillStudy(studyId, studyMetadata);\n+\n+        List<org.opencb.biodata.models.metadata.Individual> individuals = new ArrayList<>(CATALOG_QUERY_BATCH_SIZE);\n+        List<org.opencb.biodata.models.metadata.Sample> samples = new ArrayList<>(CATALOG_QUERY_BATCH_SIZE);\n+        Iterator<org.opencb.biodata.models.metadata.Individual> iterator = studyMetadata.getIndividuals().iterator();\n+        while (iterator.hasNext()) {\n+          org.opencb.biodata.models.metadata.Individual individual = iterator.next();\n+          individuals.add(individual);\n+          samples.addAll(individual.getSamples());\n+          if (individuals.size() >= CATALOG_QUERY_BATCH_SIZE || !iterator.hasNext()) {\n+            fillIndividuals(studyId, individuals);\n+            individuals.clear();\n+          }\n+          if (samples.size() >= CATALOG_QUERY_BATCH_SIZE || !iterator.hasNext()) {\n+            fillSamples(studyId, samples);\n+            samples.clear();\n+          }\n         }\n-        return metadata;\n+      }\n+    } catch (CatalogException e) {\n+      throw new StorageEngineException(\"Error generating VariantMetadata\", e);\n     }\n+    return metadata;\n+  }\n \n-    private void fillStudy(String studyId, VariantStudyMetadata studyMetadata) throws CatalogException {\n-        QueryOptions options = new QueryOptions(QueryOptions.INCLUDE, SampleDBAdaptor.QueryParams.DESCRIPTION.key());\n+  private void fillStudy(String studyId, VariantStudyMetadata studyMetadata) throws CatalogException {\n+    QueryOptions options = new QueryOptions(QueryOptions.INCLUDE, SampleDBAdaptor.QueryParams.DESCRIPTION.key());\n \n-        // Just add file description\n-        Study study = catalogManager.getStudyManager().get(studyId, options, sessionId).first();\n-        studyMetadata.setDescription(study.getDescription());\n-    }\n+    // Just add file description\n+    Study study = catalogManager.getStudyManager().get(studyId, options, sessionId).first();\n+    studyMetadata.setDescription(study.getDescription());\n+  }\n \n-    private void fillIndividuals(String studyId, List<org.opencb.biodata.models.metadata.Individual> individuals) throws CatalogException {\n-        Map<String, org.opencb.biodata.models.metadata.Individual> individualMap = individuals\n-                .stream()\n-                .collect(Collectors.toMap(org.opencb.biodata.models.metadata.Individual::getId, i -> i));\n-        Query query = new Query(IndividualDBAdaptor.QueryParams.ID.key(), new ArrayList<>(individualMap.keySet()));\n+  private void fillIndividuals(String studyId, List<org.opencb.biodata.models.metadata.Individual> individuals) throws CatalogException {\n+    Map<String, org.opencb.biodata.models.metadata.Individual> individualMap = individuals\n+        .stream()\n+        .collect(Collectors.toMap(org.opencb.biodata.models.metadata.Individual::getId, i -> i));\n+    Query query = new Query(IndividualDBAdaptor.QueryParams.ID.key(), new ArrayList<>(individualMap.keySet()));\n \n-        List<Individual> catalogIndividuals = catalogManager.getIndividualManager()\n-                .search(studyId, query, INDIVIDUAL_QUERY_OPTIONS, sessionId).getResults();\n+    List<Individual> catalogIndividuals = catalogManager.getIndividualManager()\n+        .search(studyId, query, INDIVIDUAL_QUERY_OPTIONS, sessionId).getResults();\n \n-        for (Individual catalogIndividual : catalogIndividuals) {\n-            org.opencb.biodata.models.metadata.Individual individual = individualMap.get(catalogIndividual.getId());\n+    for (Individual catalogIndividual : catalogIndividuals) {\n+      org.opencb.biodata.models.metadata.Individual individual = individualMap.get(catalogIndividual.getId());\n \n-            individual.setSex(catalogIndividual.getSex().name());\n+      individual.setSex(catalogIndividual.getSex().name());\n //            individual.setFamily(catalogIndividual.getFamily());\n \n-            if (catalogIndividual.getPhenotypes() != null && !catalogIndividual.getPhenotypes().isEmpty()) {\n-                individual.setPhenotype(catalogIndividual.getPhenotypes().get(0).getId());\n-            }\n+      if (catalogIndividual.getPhenotypes() != null && !catalogIndividual.getPhenotypes().isEmpty()) {\n+        individual.setPhenotype(catalogIndividual.getPhenotypes().get(0).getId());\n+      }\n \n-            if (catalogIndividual.getMother() != null) {\n-                individual.setMother(catalogIndividual.getMother().getId());\n-            }\n-            if (catalogIndividual.getFather() != null) {\n-                individual.setFather(catalogIndividual.getFather().getId());\n-            }\n-        }\n+      if (catalogIndividual.getMother() != null) {\n+        individual.setMother(catalogIndividual.getMother().getId());\n+      }\n+      if (catalogIndividual.getFather() != null) {\n+        individual.setFather(catalogIndividual.getFather().getId());\n+      }\n     }\n-\n-    private void fillSamples(String studyId, List<org.opencb.biodata.models.metadata.Sample> samples) throws CatalogException {\n-        Map<String, org.opencb.biodata.models.metadata.Sample> samplesMap = samples\n-                .stream()\n-                .collect(Collectors.toMap(org.opencb.biodata.models.metadata.Sample::getId, i -> i));\n-        Query query = new Query(SampleDBAdaptor.QueryParams.ID.key(), new ArrayList<>(samplesMap.keySet()));\n-\n-        List<Sample> catalogSamples = catalogManager.getSampleManager().search(studyId, query, SAMPLE_QUERY_OPTIONS, sessionId)\n-                .getResults();\n-        for (Sample catalogSample : catalogSamples) {\n-            org.opencb.biodata.models.metadata.Sample sample = samplesMap.get(catalogSample.getId());\n-\n-            List<AnnotationSet> annotationSets = catalogSample.getAnnotationSets();\n-            if (annotationSets != null) {\n-                sample.setAnnotations(new LinkedHashMap<>(sample.getAnnotations()));\n-                for (AnnotationSet annotationSet : annotationSets) {\n-                    String prefix = annotationSets.size() > 1 ? annotationSet.getName() + '.' : \"\";\n-                    Map<String, Object> annotations = annotationSet.getAnnotations();\n-                    for (Map.Entry<String, Object> annotationEntry : annotations.entrySet()) {\n-                        Object value = annotationEntry.getValue();\n-                        String stringValue;\n-                        if (value instanceof Collection) {\n-                            stringValue = ((Collection<?>) value).stream().map(Object::toString).collect(Collectors.joining(\",\"));\n-                        } else {\n-                            stringValue = value.toString();\n-                        }\n-                        sample.getAnnotations().put(prefix + annotationEntry.getKey(), stringValue);\n-                    }\n-                }\n+  }\n+\n+  private void fillSamples(String studyId, List<org.opencb.biodata.models.metadata.Sample> samples) throws CatalogException {\n+    Map<String, org.opencb.biodata.models.metadata.Sample> samplesMap = samples\n+        .stream()\n+        .collect(Collectors.toMap(org.opencb.biodata.models.metadata.Sample::getId, i -> i));\n+    Query query = new Query(SampleDBAdaptor.QueryParams.ID.key(), new ArrayList<>(samplesMap.keySet()));\n+\n+    List<Sample> catalogSamples = catalogManager.getSampleManager().search(studyId, query, SAMPLE_QUERY_OPTIONS, sessionId)\n+        .getResults();\n+    for (Sample catalogSample : catalogSamples) {\n+      org.opencb.biodata.models.metadata.Sample sample = samplesMap.get(catalogSample.getId());\n+\n+      List<AnnotationSet> annotationSets = catalogSample.getAnnotationSets();\n+      if (annotationSets != null) {\n+        sample.setAnnotations(new LinkedHashMap<>(sample.getAnnotations()));\n+        for (AnnotationSet annotationSet : annotationSets) {\n+          String prefix = annotationSets.size() > 1 ? annotationSet.getName() + '.' : \"\";\n+          Map<String, Object> annotations = annotationSet.getAnnotations();\n+          for (Map.Entry<String, Object> annotationEntry : annotations.entrySet()) {\n+            Object value = annotationEntry.getValue();\n+            String stringValue;\n+            if (value instanceof Collection) {\n+              stringValue = ((Collection<?>) value).stream().map(Object::toString).collect(Collectors.joining(\",\"));\n+            } else {\n+              stringValue = value.toString();\n             }\n+            sample.getAnnotations().put(prefix + annotationEntry.getKey(), stringValue);\n+          }\n         }\n+      }\n     }\n+  }\n }\n",
            "diff_size": 130
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/225/CatalogVariantMetadataFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/225/CatalogVariantMetadataFactory.java\nindex fbe1790b4f7..a7902e70521 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/225/CatalogVariantMetadataFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/225/CatalogVariantMetadataFactory.java\n@@ -164,4 +164,4 @@ public final class CatalogVariantMetadataFactory extends VariantMetadataFactory\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "column": "143",
                    "severity": "error",
                    "message": "'{' at column 143 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "58",
                    "column": "143",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/225/CatalogVariantMetadataFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/225/CatalogVariantMetadataFactory.java\nindex fbe1790b4f7..31153c46c3f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/225/CatalogVariantMetadataFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/225/CatalogVariantMetadataFactory.java\n@@ -55,8 +55,7 @@ public final class CatalogVariantMetadataFactory extends VariantMetadataFactory\n     }\n \n     @Override\n-    protected VariantMetadata makeVariantMetadata(VariantQueryProjection queryFields, QueryOptions queryOptions) throws StorageEngineException {\n-        VariantMetadata metadata = super.makeVariantMetadata(queryFields, queryOptions);\n+    protected VariantMetadata makeVariantMetadata(VariantQueryProjection queryFields, QueryOptions queryOptions) throws StorageEngineException{ VariantMetadata metadata = super.makeVariantMetadata(queryFields, queryOptions);\n         if (queryOptions != null) {\n             if (queryOptions.getBoolean(BASIC_METADATA, false)) {\n                 // If request BasicMetadata, do not return extra catalog information, neither samples in cohorts\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}