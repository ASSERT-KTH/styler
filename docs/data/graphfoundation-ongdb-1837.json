{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1837",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1837/SlotSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1837/SlotSelector.java\nindex 88777069d40..ff39e07ef37 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1837/SlotSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1837/SlotSelector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.Arrays;\n@@ -31,62 +32,62 @@ import org.neo4j.values.storable.ValueGroup;\n  */\n public interface SlotSelector\n {\n-    SlotSelector nullInstance = new NullInstance();\n+  SlotSelector nullInstance = new NullInstance();\n \n-    int INSTANCE_COUNT = 5;\n+  int INSTANCE_COUNT = 5;\n \n-    int UNKNOWN = -1;\n-    int STRING = 0;\n-    int NUMBER = 1;\n-    int SPATIAL = 2;\n-    int TEMPORAL = 3;\n-    int LUCENE = 4;\n+  int UNKNOWN = -1;\n+  int STRING = 0;\n+  int NUMBER = 1;\n+  int SPATIAL = 2;\n+  int TEMPORAL = 3;\n+  int LUCENE = 4;\n \n-    void validateSatisfied( IndexProvider[] instances );\n+  void validateSatisfied(IndexProvider[] instances);\n \n-    /**\n-     * Selects a slot to use based on the given values. The values can be anything that can yield a {@link ValueGroup value group},\n-     * which is what the {@code groupOf} function extracts from each value.\n-     *\n-     * @param values values, something which can yield a {@link ValueGroup}.\n-     * @param groupOf {@link Function} to get {@link ValueGroup} for the given values.\n-     * @param <V> type of value to extract {@link ValueGroup} from.\n-     * @return a slot number, or {@link #UNKNOWN} if no single slot could be selected. This typically means that all slots are needed.\n-     */\n-    <V> int selectSlot( V[] values, Function<V,ValueGroup> groupOf );\n+  /**\n+   * Selects a slot to use based on the given values. The values can be anything that can yield a {@link ValueGroup value group},\n+   * which is what the {@code groupOf} function extracts from each value.\n+   *\n+   * @param values  values, something which can yield a {@link ValueGroup}.\n+   * @param groupOf {@link Function} to get {@link ValueGroup} for the given values.\n+   * @param <V>     type of value to extract {@link ValueGroup} from.\n+   * @return a slot number, or {@link #UNKNOWN} if no single slot could be selected. This typically means that all slots are needed.\n+   */\n+  <V> int selectSlot(V[] values, Function<V, ValueGroup> groupOf);\n \n-    /**\n-     * Standard utility method for typical implementation of {@link SlotSelector#validateSatisfied(IndexProvider[])}.\n-     *\n-     * @param instances instances to validate.\n-     * @param aliveIndex slots to ensure have been initialized with non-empty instances.\n-     */\n-    static void validateSelectorInstances( Object[] instances, int... aliveIndex )\n+  /**\n+   * Standard utility method for typical implementation of {@link SlotSelector#validateSatisfied(IndexProvider[])}.\n+   *\n+   * @param instances  instances to validate.\n+   * @param aliveIndex slots to ensure have been initialized with non-empty instances.\n+   */\n+  static void validateSelectorInstances(Object[] instances, int... aliveIndex)\n+  {\n+    for (int i = 0; i < instances.length; i++)\n     {\n-        for ( int i = 0; i < instances.length; i++ )\n-        {\n-            boolean expected = PrimitiveIntCollections.contains( aliveIndex, i );\n-            boolean actual = instances[i] != IndexProvider.EMPTY;\n-            if ( expected != actual )\n-            {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\",\n-                                Arrays.toString( aliveIndex ), Arrays.toString( instances ) ) );\n-            }\n-        }\n+      boolean expected = PrimitiveIntCollections.contains(aliveIndex, i);\n+      boolean actual = instances[i] != IndexProvider.EMPTY;\n+      if (expected != actual)\n+      {\n+        throw new IllegalArgumentException(\n+            String.format(\"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\",\n+                Arrays.toString(aliveIndex), Arrays.toString(instances)));\n+      }\n     }\n+  }\n \n-    class NullInstance implements SlotSelector\n-    {\n-        @Override\n-        public void validateSatisfied( IndexProvider[] instances )\n-        {   // no-op\n-        }\n+  class NullInstance implements SlotSelector\n+  {\n+    @Override\n+    public void validateSatisfied(IndexProvider[] instances)\n+    {   // no-op\n+    }\n \n-        @Override\n-        public <V> int selectSlot( V[] values, Function<V,ValueGroup> groupOf )\n-        {\n-            throw new UnsupportedOperationException( \"NullInstance cannot select a slot for you. Please use the real deal.\" );\n-        }\n+    @Override\n+    public <V> int selectSlot(V[] values, Function<V, ValueGroup> groupOf)\n+    {\n+      throw new UnsupportedOperationException(\"NullInstance cannot select a slot for you. Please use the real deal.\");\n     }\n+  }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1837/SlotSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1837/SlotSelector.java\nindex 88777069d40..b1e25633989 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1837/SlotSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1837/SlotSelector.java\n@@ -69,10 +69,9 @@ public interface SlotSelector\n             boolean actual = instances[i] != IndexProvider.EMPTY;\n             if ( expected != actual )\n             {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\",\n+                throw new IllegalArgumentException( String.format( \"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\",\n                                 Arrays.toString( aliveIndex ), Arrays.toString( instances ) ) );\n-            }\n+    }\n         }\n     }\n \n@@ -80,7 +79,8 @@ public interface SlotSelector\n     {\n         @Override\n         public void validateSatisfied( IndexProvider[] instances )\n-        {   // no-op\n+        {\n+    // no-op\n         }\n \n         @Override\n@@ -89,4 +89,4 @@ public interface SlotSelector\n             throw new UnsupportedOperationException( \"NullInstance cannot select a slot for you. Please use the real deal.\" );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "5",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 285).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 332).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 289).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 361).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 346).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 317).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 293).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 495).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 293).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 289).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 285).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1837/SlotSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1837/SlotSelector.java\nindex 88777069d40..c1ff112dd75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1837/SlotSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1837/SlotSelector.java\n@@ -21,7 +21,6 @@ package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.Arrays;\n import java.util.function.Function;\n-\n import org.neo4j.collection.primitive.PrimitiveIntCollections;\n import org.neo4j.kernel.api.index.IndexProvider;\n import org.neo4j.values.storable.ValueGroup;\n@@ -29,20 +28,19 @@ import org.neo4j.values.storable.ValueGroup;\n /**\n  * Given a set of values selects a slot to use.\n  */\n+\n public interface SlotSelector\n {\n     SlotSelector nullInstance = new NullInstance();\n-\n     int INSTANCE_COUNT = 5;\n-\n-    int UNKNOWN = -1;\n+    int UNKNOWN = - 1;\n     int STRING = 0;\n     int NUMBER = 1;\n     int SPATIAL = 2;\n     int TEMPORAL = 3;\n     int LUCENE = 4;\n-\n-    void validateSatisfied( IndexProvider[] instances );\n+    void validateSatisfied( IndexProvider[] instances )\n+    ;\n \n     /**\n      * Selects a slot to use based on the given values. The values can be anything that can yield a {@link ValueGroup value group},\n@@ -53,28 +51,26 @@ public interface SlotSelector\n      * @param <V> type of value to extract {@link ValueGroup} from.\n      * @return a slot number, or {@link #UNKNOWN} if no single slot could be selected. This typically means that all slots are needed.\n      */\n-    <V> int selectSlot( V[] values, Function<V,ValueGroup> groupOf );\n+    < V> int selectSlot( V[] values, Function<V,ValueGroup> groupOf )\n+    ;\n \n     /**\n      * Standard utility method for typical implementation of {@link SlotSelector#validateSatisfied(IndexProvider[])}.\n      *\n      * @param instances instances to validate.\n      * @param aliveIndex slots to ensure have been initialized with non-empty instances.\n-     */\n-    static void validateSelectorInstances( Object[] instances, int... aliveIndex )\n-    {\n-        for ( int i = 0; i < instances.length; i++ )\n-        {\n-            boolean expected = PrimitiveIntCollections.contains( aliveIndex, i );\n-            boolean actual = instances[i] != IndexProvider.EMPTY;\n-            if ( expected != actual )\n-            {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\",\n-                                Arrays.toString( aliveIndex ), Arrays.toString( instances ) ) );\n-            }\n-        }\n-    }\n+     */ static void validateSelectorInstances( Object[] instances, int... aliveIndex )\n+                                                                                                                                                                                                                                                                                            {\n+                                                                                                                                                                                                                                                                                                for ( int i = 0; i < instances.length; i++ )\n+                                                                                                                                                                                                                                                                                                {\n+                                                                                                                                                                                                                                                                                                    boolean expected = PrimitiveIntCollections.contains( aliveIndex, i );\n+                                                                                                                                                                                                                                                                                                    boolean actual = instances[ i] != IndexProvider.EMPTY;\n+                                                                                                                                                                                                                                                                                                    if ( expected != actual )\n+                                                                                                                                                                                                                                                                                                    {\n+                                                                                                                                                                                                                                                                                                        throw new IllegalArgumentException( String.format( \"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\", Arrays.toString( aliveIndex ), Arrays.toString( instances ) ) );\n+                                                                                                                                                                                                                                                                                                    }\n+                                                                                                                                                                                                                                                                                                }\n+                                                                                                                                                                                                                                                                                            }\n \n     class NullInstance implements SlotSelector\n     {\n@@ -89,4 +85,5 @@ public interface SlotSelector\n             throw new UnsupportedOperationException( \"NullInstance cannot select a slot for you. Please use the real deal.\" );\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}