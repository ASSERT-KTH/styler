{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3806",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3806/TwoPhaseNodeForRelationshipLocking.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3806/TwoPhaseNodeForRelationshipLocking.java\nindex db053c752b9..ffb5969ba61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3806/TwoPhaseNodeForRelationshipLocking.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3806/TwoPhaseNodeForRelationshipLocking.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import java.util.Arrays;\n@@ -38,115 +39,115 @@ import static org.neo4j.kernel.api.StatementConstants.NO_SUCH_RELATIONSHIP;\n \n class TwoPhaseNodeForRelationshipLocking\n {\n-    private final ThrowingConsumer<Long,KernelException> relIdAction;\n-\n-    private long firstRelId;\n-    private long[] sortedNodeIds;\n-    private static final long[] EMPTY = new long[0];\n-    private final Locks.Client locks;\n-    private final LockTracer lockTracer;\n-\n-    TwoPhaseNodeForRelationshipLocking(\n-            ThrowingConsumer<Long,KernelException> relIdAction, Locks.Client locks,\n-            LockTracer lockTracer )\n-    {\n-        this.relIdAction = relIdAction;\n-        this.locks = locks;\n-        this.lockTracer = lockTracer;\n-    }\n-\n-    void lockAllNodesAndConsumeRelationships( long nodeId, final Transaction transaction, NodeCursor nodes ) throws KernelException\n+  private final ThrowingConsumer<Long, KernelException> relIdAction;\n+\n+  private long firstRelId;\n+  private long[] sortedNodeIds;\n+  private static final long[] EMPTY = new long[0];\n+  private final Locks.Client locks;\n+  private final LockTracer lockTracer;\n+\n+  TwoPhaseNodeForRelationshipLocking(\n+      ThrowingConsumer<Long, KernelException> relIdAction, Locks.Client locks,\n+      LockTracer lockTracer)\n+  {\n+    this.relIdAction = relIdAction;\n+    this.locks = locks;\n+    this.lockTracer = lockTracer;\n+  }\n+\n+  void lockAllNodesAndConsumeRelationships(long nodeId, final Transaction transaction, NodeCursor nodes) throws KernelException\n+  {\n+    boolean retry;\n+    do\n     {\n-        boolean retry;\n-        do\n+      retry = false;\n+      firstRelId = NO_SUCH_RELATIONSHIP;\n+\n+      // lock all the nodes involved by following the node id ordering\n+      collectAndSortNodeIds(nodeId, transaction, nodes);\n+      lockAllNodes(sortedNodeIds);\n+\n+      // perform the action on each relationship, we will retry if the the relationship iterator contains\n+      // new relationships\n+      org.neo4j.internal.kernel.api.Read read = transaction.dataRead();\n+      read.singleNode(nodeId, nodes);\n+      //if the node is not there, someone else probably deleted it, just ignore\n+      if (nodes.next())\n+      {\n+        try (RelationshipSelectionCursor rels =\n+                 RelationshipSelections.allCursor(transaction.cursors(), nodes, null))\n         {\n-            retry = false;\n-            firstRelId = NO_SUCH_RELATIONSHIP;\n-\n-            // lock all the nodes involved by following the node id ordering\n-            collectAndSortNodeIds( nodeId, transaction, nodes );\n-            lockAllNodes( sortedNodeIds );\n-\n-            // perform the action on each relationship, we will retry if the the relationship iterator contains\n-            // new relationships\n-            org.neo4j.internal.kernel.api.Read read = transaction.dataRead();\n-            read.singleNode( nodeId, nodes );\n-            //if the node is not there, someone else probably deleted it, just ignore\n-            if ( nodes.next() )\n-            {\n-                try ( RelationshipSelectionCursor rels =\n-                              RelationshipSelections.allCursor( transaction.cursors(), nodes, null ) )\n-                {\n-                    boolean first = true;\n-                    while ( rels.next() && !retry )\n-                    {\n-                        retry = performAction( rels.relationshipReference(), first );\n-                        first = false;\n-                    }\n-                }\n-            }\n+          boolean first = true;\n+          while (rels.next() && !retry)\n+          {\n+            retry = performAction(rels.relationshipReference(), first);\n+            first = false;\n+          }\n         }\n-        while ( retry );\n+      }\n     }\n+    while (retry);\n+  }\n \n-    private void collectAndSortNodeIds( long nodeId, Transaction transaction, NodeCursor nodes )\n-    {\n-        PrimitiveLongSet nodeIdSet = Primitive.longSet();\n-        nodeIdSet.add( nodeId );\n+  private void collectAndSortNodeIds(long nodeId, Transaction transaction, NodeCursor nodes)\n+  {\n+    PrimitiveLongSet nodeIdSet = Primitive.longSet();\n+    nodeIdSet.add(nodeId);\n \n-        org.neo4j.internal.kernel.api.Read read = transaction.dataRead();\n-        read.singleNode( nodeId, nodes );\n-        if ( !nodes.next() )\n-        {\n-            this.sortedNodeIds = EMPTY;\n-            return;\n-        }\n-        try ( RelationshipSelectionCursor rels =\n-                      RelationshipSelections.allCursor( transaction.cursors(), nodes, null ) )\n+    org.neo4j.internal.kernel.api.Read read = transaction.dataRead();\n+    read.singleNode(nodeId, nodes);\n+    if (!nodes.next())\n+    {\n+      this.sortedNodeIds = EMPTY;\n+      return;\n+    }\n+    try (RelationshipSelectionCursor rels =\n+             RelationshipSelections.allCursor(transaction.cursors(), nodes, null))\n+    {\n+      while (rels.next())\n+      {\n+        if (firstRelId == NO_SUCH_RELATIONSHIP)\n         {\n-            while ( rels.next() )\n-            {\n-                if ( firstRelId == NO_SUCH_RELATIONSHIP )\n-                {\n-                    firstRelId = rels.relationshipReference();\n-                }\n-\n-                nodeIdSet.add( rels.sourceNodeReference() );\n-                nodeIdSet.add( rels.targetNodeReference() );\n-            }\n+          firstRelId = rels.relationshipReference();\n         }\n \n-        long[] nodeIds = PrimitiveArrays.of( nodeIdSet );\n-        Arrays.sort( nodeIds );\n-        this.sortedNodeIds = nodeIds;\n-    }\n-\n-    private void lockAllNodes( long[] nodeIds )\n-    {\n-        locks.acquireExclusive( lockTracer, ResourceTypes.NODE, nodeIds );\n+        nodeIdSet.add(rels.sourceNodeReference());\n+        nodeIdSet.add(rels.targetNodeReference());\n+      }\n     }\n \n-    private void unlockAllNodes( long[] nodeIds )\n+    long[] nodeIds = PrimitiveArrays.of(nodeIdSet);\n+    Arrays.sort(nodeIds);\n+    this.sortedNodeIds = nodeIds;\n+  }\n+\n+  private void lockAllNodes(long[] nodeIds)\n+  {\n+    locks.acquireExclusive(lockTracer, ResourceTypes.NODE, nodeIds);\n+  }\n+\n+  private void unlockAllNodes(long[] nodeIds)\n+  {\n+    locks.releaseExclusive(ResourceTypes.NODE, nodeIds);\n+  }\n+\n+  private boolean performAction(long rel, boolean first)\n+      throws KernelException\n+  {\n+    if (first)\n     {\n-        locks.releaseExclusive( ResourceTypes.NODE, nodeIds );\n+      if (rel != firstRelId)\n+      {\n+        // if the first relationship is not the same someone added some new rels, so we need to\n+        // lock them all again\n+        unlockAllNodes(sortedNodeIds);\n+        sortedNodeIds = null;\n+        return true;\n+      }\n     }\n \n-    private boolean performAction( long rel, boolean first )\n-            throws KernelException\n-    {\n-        if ( first )\n-        {\n-            if ( rel != firstRelId )\n-            {\n-                // if the first relationship is not the same someone added some new rels, so we need to\n-                // lock them all again\n-                unlockAllNodes( sortedNodeIds );\n-                sortedNodeIds = null;\n-                return true;\n-            }\n-        }\n-\n-        relIdAction.accept( rel );\n-        return false;\n-    }\n+    relIdAction.accept(rel);\n+    return false;\n+  }\n }\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3806/TwoPhaseNodeForRelationshipLocking.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3806/TwoPhaseNodeForRelationshipLocking.java\nindex db053c752b9..7de4fa3ec0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3806/TwoPhaseNodeForRelationshipLocking.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3806/TwoPhaseNodeForRelationshipLocking.java\n@@ -46,8 +46,7 @@ class TwoPhaseNodeForRelationshipLocking\n     private final Locks.Client locks;\n     private final LockTracer lockTracer;\n \n-    TwoPhaseNodeForRelationshipLocking(\n-            ThrowingConsumer<Long,KernelException> relIdAction, Locks.Client locks,\n+    TwoPhaseNodeForRelationshipLocking( ThrowingConsumer<Long,KernelException> relIdAction, Locks.Client locks,\n             LockTracer lockTracer )\n     {\n         this.relIdAction = relIdAction;\n@@ -74,9 +73,8 @@ class TwoPhaseNodeForRelationshipLocking\n             //if the node is not there, someone else probably deleted it, just ignore\n             if ( nodes.next() )\n             {\n-                try ( RelationshipSelectionCursor rels =\n-                              RelationshipSelections.allCursor( transaction.cursors(), nodes, null ) )\n-                {\n+                try ( RelationshipSelectionCursor rels = RelationshipSelections.allCursor( transaction.cursors(), nodes, null ) )\n+{\n                     boolean first = true;\n                     while ( rels.next() && !retry )\n                     {\n@@ -93,17 +91,15 @@ class TwoPhaseNodeForRelationshipLocking\n     {\n         PrimitiveLongSet nodeIdSet = Primitive.longSet();\n         nodeIdSet.add( nodeId );\n-\n-        org.neo4j.internal.kernel.api.Read read = transaction.dataRead();\n+org.neo4j.internal.kernel.api.Read read = transaction.dataRead();\n         read.singleNode( nodeId, nodes );\n         if ( !nodes.next() )\n         {\n             this.sortedNodeIds = EMPTY;\n             return;\n         }\n-        try ( RelationshipSelectionCursor rels =\n-                      RelationshipSelections.allCursor( transaction.cursors(), nodes, null ) )\n-        {\n+        try ( RelationshipSelectionCursor rels = RelationshipSelections.allCursor( transaction.cursors(), nodes, null ) )\n+{\n             while ( rels.next() )\n             {\n                 if ( firstRelId == NO_SUCH_RELATIONSHIP )\n@@ -131,9 +127,8 @@ class TwoPhaseNodeForRelationshipLocking\n         locks.releaseExclusive( ResourceTypes.NODE, nodeIds );\n     }\n \n-    private boolean performAction( long rel, boolean first )\n-            throws KernelException\n-    {\n+    private boolean performAction( long rel, boolean first ) throws KernelException\n+{\n         if ( first )\n         {\n             if ( rel != firstRelId )\n@@ -149,4 +144,4 @@ class TwoPhaseNodeForRelationshipLocking\n         relIdAction.accept( rel );\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}