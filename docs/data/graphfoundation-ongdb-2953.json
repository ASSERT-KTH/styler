{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2953",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "79",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2953/IdRangeIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2953/IdRangeIterator.java\nindex 1dc9b5793be..b0d910aae18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2953/IdRangeIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2953/IdRangeIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.id;\n \n import java.util.Arrays;\n@@ -28,95 +29,94 @@ import static org.neo4j.collection.primitive.PrimitiveLongCollections.EMPTY_LONG\n \n public class IdRangeIterator implements IdSequence\n {\n-    public static final IdRangeIterator EMPTY_ID_RANGE_ITERATOR =\n-            new IdRangeIterator( new IdRange( EMPTY_LONG_ARRAY, 0, 0 ) )\n-            {\n-                @Override\n-                public long nextId()\n-                {\n-                    return VALUE_REPRESENTING_NULL;\n-                }\n-            };\n+  public static final IdRangeIterator EMPTY_ID_RANGE_ITERATOR =\n+      new IdRangeIterator(new IdRange(EMPTY_LONG_ARRAY, 0, 0))\n+      {\n+        @Override\n+        public long nextId()\n+        {\n+          return VALUE_REPRESENTING_NULL;\n+        }\n+      };\n \n-    public static final long VALUE_REPRESENTING_NULL = -1;\n-    private int position;\n-    private final long[] defrag;\n-    private final long start;\n-    private final int length;\n+  public static final long VALUE_REPRESENTING_NULL = -1;\n+  private int position;\n+  private final long[] defrag;\n+  private final long start;\n+  private final int length;\n \n-    public IdRangeIterator( IdRange idRange )\n-    {\n-        this.defrag = idRange.getDefragIds();\n-        this.start = idRange.getRangeStart();\n-        this.length = idRange.getRangeLength();\n-    }\n+  public IdRangeIterator(IdRange idRange)\n+  {\n+    this.defrag = idRange.getDefragIds();\n+    this.start = idRange.getRangeStart();\n+    this.length = idRange.getRangeLength();\n+  }\n \n-    @Override\n-    public long nextId()\n+  @Override\n+  public long nextId()\n+  {\n+    try\n     {\n-        try\n-        {\n-            if ( position < defrag.length )\n-            {\n-                return defrag[position];\n-            }\n-\n-            long candidate = nextRangeCandidate();\n-            if ( IdValidator.isReservedId( candidate ) )\n-            {\n-                position++;\n-                candidate = nextRangeCandidate();\n-            }\n-            return candidate;\n-        }\n-        finally\n-        {\n-            ++position;\n-        }\n-    }\n+      if (position < defrag.length)\n+      {\n+        return defrag[position];\n+      }\n \n-    @Override\n-    public IdRange nextIdBatch( int size )\n+      long candidate = nextRangeCandidate();\n+      if (IdValidator.isReservedId(candidate))\n+      {\n+        position++;\n+        candidate = nextRangeCandidate();\n+      }\n+      return candidate;\n+    } finally\n     {\n-        int sizeLeft = size;\n-        long[] rangeDefrag = EMPTY_LONG_ARRAY;\n-        if ( position < defrag.length )\n-        {\n-            // There are defragged ids to grab\n-            int numberOfDefrags = min( sizeLeft, defrag.length - position );\n-            rangeDefrag = Arrays.copyOfRange( defrag, position, numberOfDefrags + position );\n-            position += numberOfDefrags;\n-            sizeLeft -= numberOfDefrags;\n-        }\n-\n-        long rangeStart = 0;\n-        int rangeLength = 0;\n-        int rangeOffset = currentRangeOffset();\n-        int rangeAvailable = length - rangeOffset;\n-        if ( sizeLeft > 0 && rangeAvailable > 0 )\n-        {\n-            rangeStart = start + rangeOffset;\n-            rangeLength = min( rangeAvailable, sizeLeft );\n-            position += rangeLength;\n-        }\n-        return new IdRange( rangeDefrag, rangeStart, rangeLength );\n+      ++position;\n     }\n+  }\n \n-    private long nextRangeCandidate()\n+  @Override\n+  public IdRange nextIdBatch(int size)\n+  {\n+    int sizeLeft = size;\n+    long[] rangeDefrag = EMPTY_LONG_ARRAY;\n+    if (position < defrag.length)\n     {\n-        int offset = currentRangeOffset();\n-        return (offset < length) ? (start + offset) : VALUE_REPRESENTING_NULL;\n+      // There are defragged ids to grab\n+      int numberOfDefrags = min(sizeLeft, defrag.length - position);\n+      rangeDefrag = Arrays.copyOfRange(defrag, position, numberOfDefrags + position);\n+      position += numberOfDefrags;\n+      sizeLeft -= numberOfDefrags;\n     }\n \n-    private int currentRangeOffset()\n+    long rangeStart = 0;\n+    int rangeLength = 0;\n+    int rangeOffset = currentRangeOffset();\n+    int rangeAvailable = length - rangeOffset;\n+    if (sizeLeft > 0 && rangeAvailable > 0)\n     {\n-        return position - defrag.length;\n+      rangeStart = start + rangeOffset;\n+      rangeLength = min(rangeAvailable, sizeLeft);\n+      position += rangeLength;\n     }\n+    return new IdRange(rangeDefrag, rangeStart, rangeLength);\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return \"IdRangeIterator[start:\" + start + \", length:\" + length + \", position:\" + position + \", defrag:\" +\n-                Arrays.toString( defrag ) + \"]\";\n-    }\n+  private long nextRangeCandidate()\n+  {\n+    int offset = currentRangeOffset();\n+    return (offset < length) ? (start + offset) : VALUE_REPRESENTING_NULL;\n+  }\n+\n+  private int currentRangeOffset()\n+  {\n+    return position - defrag.length;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"IdRangeIterator[start:\" + start + \", length:\" + length + \", position:\" + position + \", defrag:\" +\n+        Arrays.toString(defrag) + \"]\";\n+  }\n }\n",
            "diff_size": 114
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2953/IdRangeIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2953/IdRangeIterator.java\nindex 1dc9b5793be..664ce05e5dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2953/IdRangeIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2953/IdRangeIterator.java\n@@ -28,8 +28,7 @@ import static org.neo4j.collection.primitive.PrimitiveLongCollections.EMPTY_LONG\n \n public class IdRangeIterator implements IdSequence\n {\n-    public static final IdRangeIterator EMPTY_ID_RANGE_ITERATOR =\n-            new IdRangeIterator( new IdRange( EMPTY_LONG_ARRAY, 0, 0 ) )\n+    public static final IdRangeIterator EMPTY_ID_RANGE_ITERATOR = new IdRangeIterator( new IdRange( EMPTY_LONG_ARRAY, 0, 0 ) )\n             {\n                 @Override\n                 public long nextId()\n@@ -38,7 +37,7 @@ public class IdRangeIterator implements IdSequence\n                 }\n             };\n \n-    public static final long VALUE_REPRESENTING_NULL = -1;\n+public static final long VALUE_REPRESENTING_NULL = -1;\n     private int position;\n     private final long[] defrag;\n     private final long start;\n@@ -67,7 +66,8 @@ public class IdRangeIterator implements IdSequence\n                 position++;\n                 candidate = nextRangeCandidate();\n             }\n-            return candidate;\n+\n+return candidate;\n         }\n         finally\n         {\n@@ -105,7 +105,7 @@ public class IdRangeIterator implements IdSequence\n     private long nextRangeCandidate()\n     {\n         int offset = currentRangeOffset();\n-        return (offset < length) ? (start + offset) : VALUE_REPRESENTING_NULL;\n+        return ( offset < length) ? (start + offset) : VALUE_REPRESENTING_NULL;\n     }\n \n     private int currentRangeOffset()\n@@ -116,7 +116,6 @@ public class IdRangeIterator implements IdSequence\n     @Override\n     public String toString()\n     {\n-        return \"IdRangeIterator[start:\" + start + \", length:\" + length + \", position:\" + position + \", defrag:\" +\n-                Arrays.toString( defrag ) + \"]\";\n+        return \"IdRangeIterator[start:\" + start + \", length:\" + length + \", position:\" + position + \", defrag:\" + Arrays.toString( defrag ) + \"]\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}