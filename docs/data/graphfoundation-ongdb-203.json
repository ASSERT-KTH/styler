{
    "project_name": "graphfoundation-ongdb",
    "error_id": "203",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "96",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/203/DummyRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/203/DummyRequest.java\nindex 1f601840efb..ab13095e3ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/203/DummyRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/203/DummyRequest.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state.machines.dummy;\n \n import java.io.IOException;\n@@ -32,69 +33,67 @@ import org.neo4j.storageengine.api.WritableChannel;\n \n public class DummyRequest implements CoreReplicatedContent\n {\n-    private final byte[] data;\n+  private final byte[] data;\n \n-    public DummyRequest( byte[] data )\n-    {\n-        this.data = data;\n-    }\n+  public DummyRequest(byte[] data)\n+  {\n+    this.data = data;\n+  }\n \n-    @Override\n-    public boolean hasSize()\n-    {\n-        return true;\n-    }\n+  @Override\n+  public boolean hasSize()\n+  {\n+    return true;\n+  }\n \n-    @Override\n-    public long size()\n-    {\n-        return data.length;\n-    }\n+  @Override\n+  public long size()\n+  {\n+    return data.length;\n+  }\n \n-    public long byteCount()\n-    {\n-        return data != null ? data.length : 0;\n-    }\n+  public long byteCount()\n+  {\n+    return data != null ? data.length : 0;\n+  }\n+\n+  @Override\n+  public void dispatch(CommandDispatcher commandDispatcher, long commandIndex, Consumer<Result> callback)\n+  {\n+    commandDispatcher.dispatch(this, commandIndex, callback);\n+  }\n+\n+  public static class Marshal extends SafeChannelMarshal<DummyRequest>\n+  {\n+    public static final Marshal INSTANCE = new Marshal();\n \n     @Override\n-    public void dispatch( CommandDispatcher commandDispatcher, long commandIndex, Consumer<Result> callback )\n+    public void marshal(DummyRequest dummy, WritableChannel channel) throws IOException\n     {\n-        commandDispatcher.dispatch( this, commandIndex, callback );\n+      if (dummy.data != null)\n+      {\n+        channel.putInt(dummy.data.length);\n+        channel.put(dummy.data, dummy.data.length);\n+      } else\n+      {\n+        channel.putInt(0);\n+      }\n     }\n \n-    public static class Marshal extends SafeChannelMarshal<DummyRequest>\n+    @Override\n+    protected DummyRequest unmarshal0(ReadableChannel channel) throws IOException\n     {\n-        public static final Marshal INSTANCE = new Marshal();\n-\n-        @Override\n-        public void marshal( DummyRequest dummy, WritableChannel channel ) throws IOException\n-        {\n-            if ( dummy.data != null )\n-            {\n-                channel.putInt( dummy.data.length );\n-                channel.put( dummy.data, dummy.data.length );\n-            }\n-            else\n-            {\n-                channel.putInt( 0 );\n-            }\n-        }\n-\n-        @Override\n-        protected DummyRequest unmarshal0( ReadableChannel channel ) throws IOException\n-        {\n-            int length = channel.getInt();\n-            byte[] data;\n-            if ( length > 0 )\n-            {\n-                data = new byte[length];\n-                channel.get( data, length );\n-            }\n-            else\n-            {\n-                data = null;\n-            }\n-            return new DummyRequest( data );\n-        }\n+      int length = channel.getInt();\n+      byte[] data;\n+      if (length > 0)\n+      {\n+        data = new byte[length];\n+        channel.get(data, length);\n+      } else\n+      {\n+        data = null;\n+      }\n+      return new DummyRequest(data);\n     }\n+  }\n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/203/DummyRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/203/DummyRequest.java\nindex 1f601840efb..ccc3df161c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/203/DummyRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/203/DummyRequest.java\n@@ -97,4 +97,4 @@ public class DummyRequest implements CoreReplicatedContent\n             return new DummyRequest( data );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}