{
    "project_name": "neo4j-neo4j",
    "error_id": "1446",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "89",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1446/TransactionIdStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1446/TransactionIdStore.java\nindex 92249f8a462..624d1232c66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1446/TransactionIdStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1446/TransactionIdStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api;\n \n import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n@@ -42,7 +43,7 @@ public interface TransactionIdStore\n {\n     /**\n      * Tx id counting starting from this value (this value means no transaction ever committed).\n-     *\n+     * <p>\n      * Note that a read only transaction will get txId = 0.\n      */\n     long BASE_TX_ID = 1;\n@@ -79,12 +80,13 @@ public interface TransactionIdStore\n      * Signals that a transaction with the given transaction id has been committed (i.e. appended to a log).\n      * Calls to this method may come in out-of-transaction-id order. The highest transaction id\n      * seen given to this method will be visible in {@link #getLastCommittedTransactionId()}.\n-     * @param transactionId the applied transaction id.\n-     * @param checksum checksum of the transaction.\n+     *\n+     * @param transactionId   the applied transaction id.\n+     * @param checksum        checksum of the transaction.\n      * @param commitTimestamp the timestamp of the transaction commit.\n-     * @param cursorTracer underlying page cursor tracer\n+     * @param cursorTracer    underlying page cursor tracer\n      */\n-    void transactionCommitted( long transactionId, int checksum, long commitTimestamp, PageCursorTracer cursorTracer );\n+    void transactionCommitted(long transactionId, int checksum, long commitTimestamp, PageCursorTracer cursorTracer);\n \n     /**\n      * @return highest seen {@link #transactionCommitted(long, int, long, PageCursorTracer)}  committed transaction id}.\n@@ -128,40 +130,42 @@ public interface TransactionIdStore\n     /**\n      * Used by recovery, where last committed/closed transaction ids are set.\n      * Perhaps this shouldn't be exposed like this?\n-     * @param transactionId transaction id that will be the last closed/committed id.\n-     * @param checksum checksum of the transaction.\n+     *\n+     * @param transactionId   transaction id that will be the last closed/committed id.\n+     * @param checksum        checksum of the transaction.\n      * @param commitTimestamp the timestamp of the transaction commit.\n-     * @param byteOffset offset in the log file where the committed entry has been written.\n-     * @param logVersion version of log the committed entry has been written into.\n-     * @param cursorTracer underlying page cursor tracer.\n+     * @param byteOffset      offset in the log file where the committed entry has been written.\n+     * @param logVersion      version of log the committed entry has been written into.\n+     * @param cursorTracer    underlying page cursor tracer.\n      */\n-    void setLastCommittedAndClosedTransactionId( long transactionId, int checksum, long commitTimestamp, long byteOffset, long logVersion,\n-            PageCursorTracer cursorTracer );\n+    void setLastCommittedAndClosedTransactionId(long transactionId, int checksum, long commitTimestamp, long byteOffset, long logVersion,\n+                                                PageCursorTracer cursorTracer);\n \n     /**\n      * Signals that a transaction with the given transaction id has been fully applied. Calls to this method\n      * may come in out-of-transaction-id order.\n+     *\n      * @param transactionId the applied transaction id.\n-     * @param logVersion version of log the committed entry has been written into.\n-     * @param byteOffset offset in the log file where start writing the next log entry.\n-     * @param cursorTracer underlying page cursor tracer\n+     * @param logVersion    version of log the committed entry has been written into.\n+     * @param byteOffset    offset in the log file where start writing the next log entry.\n+     * @param cursorTracer  underlying page cursor tracer\n      */\n-    void transactionClosed( long transactionId, long logVersion, long byteOffset, PageCursorTracer cursorTracer );\n+    void transactionClosed(long transactionId, long logVersion, long byteOffset, PageCursorTracer cursorTracer);\n \n     /**\n      * Unconditionally set last closed transaction info. Should be used for cases where last closed transaction info should be\n      * set or overwritten.\n      *\n      * @param transactionId new last closed transaction id.\n-     * @param logVersion new last closed transaction log version\n-     * @param byteOffset new last closed transaction offset\n-     * @param missingLogs flag to record missing logs date\n-     * @param cursorTracer underlying page cursor tracer\n+     * @param logVersion    new last closed transaction log version\n+     * @param byteOffset    new last closed transaction offset\n+     * @param missingLogs   flag to record missing logs date\n+     * @param cursorTracer  underlying page cursor tracer\n      */\n-    void resetLastClosedTransaction( long transactionId, long logVersion, long byteOffset, boolean missingLogs, PageCursorTracer cursorTracer );\n+    void resetLastClosedTransaction(long transactionId, long logVersion, long byteOffset, boolean missingLogs, PageCursorTracer cursorTracer);\n \n     /**\n      * Forces the transaction id counters to persistent storage.\n      */\n-    void flush( PageCursorTracer cursorTracer );\n+    void flush(PageCursorTracer cursorTracer);\n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}