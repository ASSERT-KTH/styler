{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "434",
    "information": {
        "errors": [
            {
                "line": "216",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 104).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * @throws BigQueryException upon failure\n   */\n  public Page<List<FieldValue>> list(BigQuery.TableDataListOption... options) throws BigQueryException {\n    return bigquery.listTableData(tableId(), options);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/434/Table.java\nindex de32baa82da..309f313ec4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/434/Table.java\n@@ -213,7 +213,8 @@ public final class Table extends TableInfo {\n    * @param options table data list options\n    * @throws BigQueryException upon failure\n    */\n-  public Page<List<FieldValue>> list(BigQuery.TableDataListOption... options) throws BigQueryException {\n+  public Page<List<FieldValue>> list(\n+      BigQuery.TableDataListOption... options) throws BigQueryException {\n     return bigquery.listTableData(tableId(), options);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/434/Table.java\nindex de32baa82da..0080ac8c265 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/434/Table.java\n@@ -190,16 +190,17 @@ public final class Table extends TableInfo {\n   /**\n    * Insert rows into the table.\n    *\n-   * @param rows rows to be inserted\n-   * @param skipInvalidRows whether to insert all valid rows, even if invalid rows exist. If not set\n-   *     the entire insert operation will fail if rows to be inserted contain an invalid row\n+   * @param rows                rows to be inserted\n+   * @param skipInvalidRows     whether to insert all valid rows, even if invalid rows exist. If not set\n+   *                            the entire insert operation will fail if rows to be inserted contain an invalid row\n    * @param ignoreUnknownValues whether to accept rows that contain values that do not match the\n-   *     schema. The unknown values are ignored. If not set, rows with unknown values are considered\n-   *     to be invalid\n+   *                            schema. The unknown values are ignored. If not set, rows with unknown values are considered\n+   *                            to be invalid\n    * @throws BigQueryException upon failure\n    */\n   public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-      boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+                                  boolean skipInvalidRows, boolean ignoreUnknownValues)\n+      throws BigQueryException {\n     InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n         .skipInvalidRows(skipInvalidRows)\n         .ignoreUnknownValues(ignoreUnknownValues)\n@@ -213,7 +214,8 @@ public final class Table extends TableInfo {\n    * @param options table data list options\n    * @throws BigQueryException upon failure\n    */\n-  public Page<List<FieldValue>> list(BigQuery.TableDataListOption... options) throws BigQueryException {\n+  public Page<List<FieldValue>> list(BigQuery.TableDataListOption... options)\n+      throws BigQueryException {\n     return bigquery.listTableData(tableId(), options);\n   }\n \n@@ -222,8 +224,8 @@ public final class Table extends TableInfo {\n    * started {@link Job} object.\n    *\n    * @param destinationDataset the user-defined id of the destination dataset\n-   * @param destinationTable the user-defined id of the destination table\n-   * @param options job options\n+   * @param destinationTable   the user-defined id of the destination table\n+   * @param options            job options\n    * @throws BigQueryException upon failure\n    */\n   public Job copy(String destinationDataset, String destinationTable, BigQuery.JobOption... options)\n@@ -236,7 +238,7 @@ public final class Table extends TableInfo {\n    * started {@link Job} object.\n    *\n    * @param destinationTable the destination table of the copy job\n-   * @param options job options\n+   * @param options          job options\n    * @throws BigQueryException upon failure\n    */\n   public Job copy(TableId destinationTable, BigQuery.JobOption... options)\n@@ -249,10 +251,10 @@ public final class Table extends TableInfo {\n    * Starts a BigQuery Job to extract the current table to the provided destination URI. Returns the\n    * started {@link Job} object.\n    *\n-   * @param format the format of the extracted data\n+   * @param format         the format of the extracted data\n    * @param destinationUri the fully-qualified Google Cloud Storage URI (e.g. gs://bucket/path)\n-   *     where the extracted table should be written\n-   * @param options job options\n+   *                       where the extracted table should be written\n+   * @param options        job options\n    * @throws BigQueryException upon failure\n    */\n   public Job extract(String format, String destinationUri, BigQuery.JobOption... options)\n@@ -264,10 +266,10 @@ public final class Table extends TableInfo {\n    * Starts a BigQuery Job to extract the current table to the provided destination URIs. Returns\n    * the started {@link Job} object.\n    *\n-   * @param format the format of the exported data\n+   * @param format          the format of the exported data\n    * @param destinationUris the fully-qualified Google Cloud Storage URIs (e.g. gs://bucket/path)\n-   *     where the extracted table should be written\n-   * @param options job options\n+   *                        where the extracted table should be written\n+   * @param options         job options\n    * @throws BigQueryException upon failure\n    */\n   public Job extract(String format, List<String> destinationUris, BigQuery.JobOption... options)\n@@ -281,10 +283,10 @@ public final class Table extends TableInfo {\n    * Starts a BigQuery Job to load data into the current table from the provided source URI. Returns\n    * the started {@link Job} object.\n    *\n-   * @param format the format of the data to load\n+   * @param format    the format of the data to load\n    * @param sourceUri the fully-qualified Google Cloud Storage URI (e.g. gs://bucket/path) from\n-   *     which to load the data\n-   * @param options job options\n+   *                  which to load the data\n+   * @param options   job options\n    * @throws BigQueryException upon failure\n    */\n   public Job load(FormatOptions format, String sourceUri, BigQuery.JobOption... options)\n@@ -296,10 +298,10 @@ public final class Table extends TableInfo {\n    * Starts a BigQuery Job to load data into the current table from the provided source URIs.\n    * Returns the started {@link Job} object.\n    *\n-   * @param format the format of the exported data\n+   * @param format     the format of the exported data\n    * @param sourceUris the fully-qualified Google Cloud Storage URIs (e.g. gs://bucket/path) from\n-   *     which to load the data\n-   * @param options job options\n+   *                   which to load the data\n+   * @param options    job options\n    * @throws BigQueryException upon failure\n    */\n   public Job load(FormatOptions format, List<String> sourceUris, BigQuery.JobOption... options)\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "201",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/434/Table.java\nindex de32baa82da..7f9b05434d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/434/Table.java\n@@ -198,8 +198,7 @@ public final class Table extends TableInfo {\n    *     to be invalid\n    * @throws BigQueryException upon failure\n    */\n-  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-      boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n     InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n         .skipInvalidRows(skipInvalidRows)\n         .ignoreUnknownValues(ignoreUnknownValues)\n@@ -340,4 +339,4 @@ public final class Table extends TableInfo {\n   static Table fromPb(BigQuery bigquery, com.google.api.services.bigquery.model.Table tablePb) {\n     return new Table(bigquery, new TableInfo.BuilderImpl(tablePb));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "207",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "208",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "246",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "262",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "278",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "308",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/434/Table.java\nindex de32baa82da..2148b0d6559 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/434/Table.java\n@@ -20,7 +20,6 @@ import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.collect.ImmutableList;\n import com.google.gcloud.Page;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.util.List;\n@@ -35,16 +34,18 @@ import java.util.Objects;\n  * {@link TableInfo}.\n  * </p>\n  */\n+\n+\n public final class Table extends TableInfo {\n \n   private static final long serialVersionUID = 5744556727066570096L;\n-\n   private final BigQueryOptions options;\n   private transient BigQuery bigquery;\n \n   /**\n    * A builder for {@code Table} objects.\n    */\n+\n   public static class Builder extends TableInfo.Builder {\n \n     private final BigQuery bigquery;\n@@ -139,6 +140,7 @@ public final class Table extends TableInfo {\n    * @return {@code true} if this table exists, {@code false} otherwise\n    * @throws BigQueryException upon failure\n    */\n+\n   public boolean exists() {\n     return bigquery.getTable(tableId(), BigQuery.TableOption.fields()) != null;\n   }\n@@ -150,6 +152,7 @@ public final class Table extends TableInfo {\n    * @return a {@code Table} object with latest information or {@code null} if not found\n    * @throws BigQueryException upon failure\n    */\n+\n   public Table reload(BigQuery.TableOption... options) {\n     return bigquery.getTable(tableId(), options);\n   }\n@@ -162,6 +165,7 @@ public final class Table extends TableInfo {\n    * @return a {@code Table} object with updated information\n    * @throws BigQueryException upon failure\n    */\n+\n   public Table update(BigQuery.TableOption... options) {\n     return bigquery.update(this, options);\n   }\n@@ -172,6 +176,7 @@ public final class Table extends TableInfo {\n    * @return {@code true} if table was deleted, {@code false} if it was not found\n    * @throws BigQueryException upon failure\n    */\n+\n   public boolean delete() {\n     return bigquery.delete(tableId());\n   }\n@@ -182,8 +187,8 @@ public final class Table extends TableInfo {\n    * @param rows rows to be inserted\n    * @throws BigQueryException upon failure\n    */\n-  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows)\n-      throws BigQueryException {\n+\n+  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows) throws BigQueryException {\n     return bigquery.insertAll(InsertAllRequest.of(tableId(), rows));\n   }\n \n@@ -198,12 +203,9 @@ public final class Table extends TableInfo {\n    *     to be invalid\n    * @throws BigQueryException upon failure\n    */\n-  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows,\n-      boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n-    InsertAllRequest request = InsertAllRequest.builder(tableId(), rows)\n-        .skipInvalidRows(skipInvalidRows)\n-        .ignoreUnknownValues(ignoreUnknownValues)\n-        .build();\n+\n+  public InsertAllResponse insert(Iterable<InsertAllRequest.RowToInsert> rows, boolean skipInvalidRows, boolean ignoreUnknownValues) throws BigQueryException {\n+    InsertAllRequest request = InsertAllRequest.builder(tableId(), rows).skipInvalidRows(skipInvalidRows).ignoreUnknownValues(ignoreUnknownValues).build();\n     return bigquery.insertAll(request);\n   }\n \n@@ -213,6 +215,7 @@ public final class Table extends TableInfo {\n    * @param options table data list options\n    * @throws BigQueryException upon failure\n    */\n+\n   public Page<List<FieldValue>> list(BigQuery.TableDataListOption... options) throws BigQueryException {\n     return bigquery.listTableData(tableId(), options);\n   }\n@@ -226,8 +229,8 @@ public final class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job copy(String destinationDataset, String destinationTable, BigQuery.JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job copy(String destinationDataset, String destinationTable, BigQuery.JobOption... options) throws BigQueryException {\n     return copy(TableId.of(destinationDataset, destinationTable), options);\n   }\n \n@@ -239,8 +242,8 @@ public final class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job copy(TableId destinationTable, BigQuery.JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job copy(TableId destinationTable, BigQuery.JobOption... options) throws BigQueryException {\n     CopyJobConfiguration configuration = CopyJobConfiguration.of(destinationTable, tableId());\n     return bigquery.create(JobInfo.of(configuration), options);\n   }\n@@ -255,8 +258,8 @@ public final class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job extract(String format, String destinationUri, BigQuery.JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job extract(String format, String destinationUri, BigQuery.JobOption... options) throws BigQueryException {\n     return extract(format, ImmutableList.of(destinationUri), options);\n   }\n \n@@ -270,10 +273,9 @@ public final class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job extract(String format, List<String> destinationUris, BigQuery.JobOption... options)\n-      throws BigQueryException {\n-    ExtractJobConfiguration extractConfiguration =\n-        ExtractJobConfiguration.of(tableId(), destinationUris, format);\n+\n+  public Job extract(String format, List<String> destinationUris, BigQuery.JobOption... options) throws BigQueryException {\n+    ExtractJobConfiguration extractConfiguration = ExtractJobConfiguration.of(tableId(), destinationUris, format);\n     return bigquery.create(JobInfo.of(extractConfiguration), options);\n   }\n \n@@ -287,8 +289,8 @@ public final class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job load(FormatOptions format, String sourceUri, BigQuery.JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job load(FormatOptions format, String sourceUri, BigQuery.JobOption... options) throws BigQueryException {\n     return load(format, ImmutableList.of(sourceUri), options);\n   }\n \n@@ -302,8 +304,8 @@ public final class Table extends TableInfo {\n    * @param options job options\n    * @throws BigQueryException upon failure\n    */\n-  public Job load(FormatOptions format, List<String> sourceUris, BigQuery.JobOption... options)\n-      throws BigQueryException {\n+\n+  public Job load(FormatOptions format, List<String> sourceUris, BigQuery.JobOption... options) throws BigQueryException {\n     LoadJobConfiguration loadConfig = LoadJobConfiguration.of(tableId(), sourceUris, format);\n     return bigquery.create(JobInfo.of(loadConfig), options);\n   }\n@@ -311,6 +313,7 @@ public final class Table extends TableInfo {\n   /**\n    * Returns the table's {@code BigQuery} object used to issue requests.\n    */\n+\n   public BigQuery bigquery() {\n     return bigquery;\n   }\n@@ -323,8 +326,8 @@ public final class Table extends TableInfo {\n   @Override\n   public boolean equals(Object obj) {\n     return obj instanceof Table\n-        && Objects.equals(toPb(), ((Table) obj).toPb())\n-        && Objects.equals(options, ((Table) obj).options);\n+      && Objects.equals(toPb(), ((Table) obj).toPb())\n+      && Objects.equals(options, ((Table) obj).options);\n   }\n \n   @Override\n@@ -340,4 +343,4 @@ public final class Table extends TableInfo {\n   static Table fromPb(BigQuery bigquery, com.google.api.services.bigquery.model.Table tablePb) {\n     return new Table(bigquery, new TableInfo.BuilderImpl(tablePb));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/434/Table.java\nindex de32baa82da..309f313ec4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/434/Table.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/434/Table.java\n@@ -213,7 +213,8 @@ public final class Table extends TableInfo {\n    * @param options table data list options\n    * @throws BigQueryException upon failure\n    */\n-  public Page<List<FieldValue>> list(BigQuery.TableDataListOption... options) throws BigQueryException {\n+  public Page<List<FieldValue>> list(\n+      BigQuery.TableDataListOption... options) throws BigQueryException {\n     return bigquery.listTableData(tableId(), options);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "216",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}