{
    "project_name": "opencb-opencga",
    "error_id": "443",
    "information": {
        "errors": [
            {
                "line": "197",
                "column": "27",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        });\n\n        step(\"index\", ()->{\n            if (indexResults) {\n                indexResults(outputFile);\n            } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/443/SampleVariantStatsAnalysis.java\nindex 01f4398c862..4e87d1e07d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/443/SampleVariantStatsAnalysis.java\n@@ -194,7 +194,7 @@ public class SampleVariantStatsAnalysis extends OpenCgaAnalysis {\n             addFile(outputFile, FileResult.FileType.JSON);\n         });\n \n-        step(\"index\", ()->{\n+        step(\"index\", ()-> {\n             if (indexResults) {\n                 indexResults(outputFile);\n             } else {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/443/SampleVariantStatsAnalysis.java\nindex 01f4398c862..20e0460e6ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/443/SampleVariantStatsAnalysis.java\n@@ -23,212 +23,217 @@ import java.nio.file.Path;\n import java.util.*;\n \n @org.opencb.opencga.core.annotations.Analysis(id = SampleVariantStatsAnalysis.ID, type = Analysis.AnalysisType.VARIANT,\n-        steps = {SampleVariantStatsAnalysis.ID, \"index\"},\n-        description = \"Compute sample variant stats for the selected list of samples.\")\n+    steps = {SampleVariantStatsAnalysis.ID, \"index\"},\n+    description = \"Compute sample variant stats for the selected list of samples.\")\n public class SampleVariantStatsAnalysis extends OpenCgaAnalysis {\n \n-    public static final String ID = \"sample-variant-stats\";\n-    public static final String VARIABLE_SET_ID = \"OPENCGA_SAMPLE_VARIANT_STATS\";\n-    private String study;\n-    private Query samplesQuery;\n-    private List<String> sampleNames;\n-    private String individual;\n-    private String family;\n-    private ArrayList<String> checkedSamplesList;\n-    private boolean indexResults = false;\n-    private Path outputFile;\n-\n-    /**\n-     * Study of the samples.\n-     * @param study Study id\n-     * @return this\n-     */\n-    public SampleVariantStatsAnalysis setStudy(String study) {\n-        this.study = study;\n-        return this;\n+  public static final String ID = \"sample-variant-stats\";\n+  public static final String VARIABLE_SET_ID = \"OPENCGA_SAMPLE_VARIANT_STATS\";\n+  private String study;\n+  private Query samplesQuery;\n+  private List<String> sampleNames;\n+  private String individual;\n+  private String family;\n+  private ArrayList<String> checkedSamplesList;\n+  private boolean indexResults = false;\n+  private Path outputFile;\n+\n+  /**\n+   * Study of the samples.\n+   *\n+   * @param study Study id\n+   * @return this\n+   */\n+  public SampleVariantStatsAnalysis setStudy(String study) {\n+    this.study = study;\n+    return this;\n+  }\n+\n+  /**\n+   * List of samples.\n+   *\n+   * @param sampleNames Sample names\n+   * @return this\n+   */\n+  public SampleVariantStatsAnalysis setSampleNames(List<String> sampleNames) {\n+    this.sampleNames = sampleNames;\n+    return this;\n+  }\n+\n+  /**\n+   * Samples query to select samples to be used.\n+   *\n+   * @param samplesQuery Samples query\n+   * @return this\n+   */\n+  public SampleVariantStatsAnalysis setSamplesQuery(Query samplesQuery) {\n+    this.samplesQuery = samplesQuery;\n+    return this;\n+  }\n+\n+  /**\n+   * Select samples from this individual.\n+   *\n+   * @param individualId individual\n+   * @return this\n+   */\n+  public SampleVariantStatsAnalysis setIndividual(String individualId) {\n+    this.individual = individualId;\n+    return this;\n+  }\n+\n+  /**\n+   * Select samples form the individuals of this family.\n+   *\n+   * @param family family\n+   * @return this\n+   */\n+  public SampleVariantStatsAnalysis setFamily(String family) {\n+    this.family = family;\n+    return this;\n+  }\n+\n+  /**\n+   * Index results in catalog.\n+   * Create an AnnotationSet for the VariableSet {@link #VARIABLE_SET_ID}\n+   * containing the SampleVariantStats.\n+   *\n+   * @param indexResults index results\n+   * @return boolean\n+   */\n+  public SampleVariantStatsAnalysis setIndexResults(boolean indexResults) {\n+    this.indexResults = indexResults;\n+    return this;\n+  }\n+\n+  @Override\n+  protected void check() throws AnalysisException {\n+    super.check();\n+    setUpStorageEngineExecutor(study);\n+\n+    Set<String> allSamples = new HashSet<>();\n+\n+    if (study == null || study.isEmpty()) {\n+      throw new AnalysisException(\"Missing study\");\n     }\n-\n-    /**\n-     * List of samples.\n-     * @param sampleNames Sample names\n-     * @return this\n-     */\n-    public SampleVariantStatsAnalysis setSampleNames(List<String> sampleNames) {\n-        this.sampleNames = sampleNames;\n-        return this;\n-    }\n-\n-    /**\n-     * Samples query to select samples to be used.\n-     * @param samplesQuery Samples query\n-     * @return this\n-     */\n-    public SampleVariantStatsAnalysis setSamplesQuery(Query samplesQuery) {\n-        this.samplesQuery = samplesQuery;\n-        return this;\n-    }\n-\n-    /**\n-     * Select samples from this individual.\n-     * @param individualId individual\n-     * @return this\n-     */\n-    public SampleVariantStatsAnalysis setIndividual(String individualId) {\n-        this.individual = individualId;\n-        return this;\n+    try {\n+      study = catalogManager.getStudyManager().get(study, null, sessionId).first().getFqn();\n+    } catch (CatalogException e) {\n+      throw new AnalysisException(e);\n     }\n \n-    /**\n-     * Select samples form the individuals of this family.\n-     * @param family family\n-     * @return this\n-     */\n-    public SampleVariantStatsAnalysis setFamily(String family) {\n-        this.family = family;\n-        return this;\n-    }\n-\n-    /**\n-     * Index results in catalog.\n-     * Create an AnnotationSet for the VariableSet {@link #VARIABLE_SET_ID}\n-     * containing the SampleVariantStats.\n-     *\n-     * @param indexResults index results\n-     * @return boolean\n-     */\n-    public SampleVariantStatsAnalysis setIndexResults(boolean indexResults) {\n-        this.indexResults = indexResults;\n-        return this;\n-    }\n-\n-    @Override\n-    protected void check() throws AnalysisException {\n-        super.check();\n-        setUpStorageEngineExecutor(study);\n-\n-        Set<String> allSamples = new HashSet<>();\n-\n-        if (study == null || study.isEmpty()) {\n-            throw new AnalysisException(\"Missing study\");\n-        }\n-        try {\n-            study = catalogManager.getStudyManager().get(study, null, sessionId).first().getFqn();\n-        } catch (CatalogException e) {\n-            throw new AnalysisException(e);\n-        }\n-\n-        try {\n-            if (CollectionUtils.isNotEmpty(sampleNames)) {\n-                catalogManager.getSampleManager().get(study, sampleNames, new QueryOptions(), sessionId)\n-                        .getResults()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .forEach(allSamples::add);\n-            }\n-            if (samplesQuery != null) {\n-                catalogManager.getSampleManager().search(study, samplesQuery, new QueryOptions(), sessionId)\n-                        .getResults()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .forEach(allSamples::add);\n-            }\n-            if (StringUtils.isNotEmpty(individual)) {\n-                Query query = new Query(SampleDBAdaptor.QueryParams.INDIVIDUAL.key(), individual);\n-                catalogManager.getSampleManager().search(study, query, new QueryOptions(), sessionId)\n-                        .getResults()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .forEach(allSamples::add);\n-            }\n-            if (StringUtils.isNotEmpty(family)) {\n-                Family family = catalogManager.getFamilyManager().get(study, this.family, null, sessionId).first();\n-                List<String> individualIds = new ArrayList<>(family.getMembers().size());\n-                for (Individual member : family.getMembers()) {\n-                    individualIds.add(member.getId());\n-                }\n-                Query query = new Query(SampleDBAdaptor.QueryParams.INDIVIDUAL.key(), individualIds);\n-                catalogManager.getSampleManager().search(study, query, new QueryOptions(), sessionId)\n-                        .getResults()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .forEach(allSamples::add);\n-            }\n-\n-            // Remove non-indexed samples\n-            Set<String> indexedSamples = variantStorageManager.getIndexedSamples(study, sessionId);\n-            allSamples.removeIf(s -> !indexedSamples.contains(s));\n-\n-        } catch (CatalogException e) {\n-            throw new AnalysisException(e);\n-        }\n-        checkedSamplesList = new ArrayList<>(allSamples);\n-        checkedSamplesList.sort(String::compareTo);\n-\n-        if (allSamples.isEmpty()) {\n-            throw new AnalysisException(\"Missing samples!\");\n-        }\n-\n-        // check read permission\n-        try {\n-            variantStorageManager.checkQueryPermissions(\n-                    new Query()\n-                            .append(VariantQueryParam.STUDY.key(), study)\n-                            .append(VariantQueryParam.INCLUDE_SAMPLE.key(), checkedSamplesList),\n-                    new QueryOptions(),\n-                    sessionId);\n-        } catch (CatalogException | StorageEngineException e) {\n-            throw new AnalysisException(e);\n+    try {\n+      if (CollectionUtils.isNotEmpty(sampleNames)) {\n+        catalogManager.getSampleManager().get(study, sampleNames, new QueryOptions(), sessionId)\n+            .getResults()\n+            .stream()\n+            .map(Sample::getId)\n+            .forEach(allSamples::add);\n+      }\n+      if (samplesQuery != null) {\n+        catalogManager.getSampleManager().search(study, samplesQuery, new QueryOptions(), sessionId)\n+            .getResults()\n+            .stream()\n+            .map(Sample::getId)\n+            .forEach(allSamples::add);\n+      }\n+      if (StringUtils.isNotEmpty(individual)) {\n+        Query query = new Query(SampleDBAdaptor.QueryParams.INDIVIDUAL.key(), individual);\n+        catalogManager.getSampleManager().search(study, query, new QueryOptions(), sessionId)\n+            .getResults()\n+            .stream()\n+            .map(Sample::getId)\n+            .forEach(allSamples::add);\n+      }\n+      if (StringUtils.isNotEmpty(family)) {\n+        Family family = catalogManager.getFamilyManager().get(study, this.family, null, sessionId).first();\n+        List<String> individualIds = new ArrayList<>(family.getMembers().size());\n+        for (Individual member : family.getMembers()) {\n+          individualIds.add(member.getId());\n         }\n-        outputFile = outDir.resolve(getId() + \".json\");\n+        Query query = new Query(SampleDBAdaptor.QueryParams.INDIVIDUAL.key(), individualIds);\n+        catalogManager.getSampleManager().search(study, query, new QueryOptions(), sessionId)\n+            .getResults()\n+            .stream()\n+            .map(Sample::getId)\n+            .forEach(allSamples::add);\n+      }\n+\n+      // Remove non-indexed samples\n+      Set<String> indexedSamples = variantStorageManager.getIndexedSamples(study, sessionId);\n+      allSamples.removeIf(s -> !indexedSamples.contains(s));\n+\n+    } catch (CatalogException e) {\n+      throw new AnalysisException(e);\n     }\n+    checkedSamplesList = new ArrayList<>(allSamples);\n+    checkedSamplesList.sort(String::compareTo);\n \n-    @Override\n-    protected void exec() throws AnalysisException {\n-        step(getId(), () -> {\n-            getAnalysisExecutor(SampleVariantStatsAnalysisExecutor.class)\n-                    .setOutputFile(outputFile)\n-                    .setStudy(study)\n-                    .setSampleNames(checkedSamplesList)\n-                    .exec();\n-\n-            addFile(outputFile, FileResult.FileType.JSON);\n-        });\n-\n-        step(\"index\", ()->{\n-            if (indexResults) {\n-                indexResults(outputFile);\n-            } else {\n-                skipStep();\n-            }\n-        });\n+    if (allSamples.isEmpty()) {\n+      throw new AnalysisException(\"Missing samples!\");\n     }\n \n-    private void indexResults(Path outputFile) throws AnalysisException {\n-        List<SampleVariantStats> stats = new ArrayList<>(checkedSamplesList.size());\n-        try {\n-            JacksonUtils.getDefaultObjectMapper()\n-                    .readerFor(SampleVariantStats.class)\n-                    .<SampleVariantStats>readValues(outputFile.toFile())\n-                    .forEachRemaining(stats::add);\n-\n-            try {\n-                catalogManager.getStudyManager().getVariableSet(study, VARIABLE_SET_ID, new QueryOptions(), sessionId);\n-            } catch (CatalogException e) {\n-                // Assume variable set not found. Try to create\n-                List<Variable> variables = AvroToAnnotationConverter.convertToVariableSet(SampleVariantStats.getClassSchema());\n-                catalogManager.getStudyManager()\n-                        .createVariableSet(study, VARIABLE_SET_ID, VARIABLE_SET_ID, true, false, \"\", Collections.emptyMap(), variables,\n-                        Collections.singletonList(VariableSet.AnnotableDataModels.SAMPLE), sessionId);\n-            }\n-\n-            for (SampleVariantStats sampleStats : stats) {\n-                AnnotationSet annotationSet = AvroToAnnotationConverter.convertToAnnotationSet(sampleStats, VARIABLE_SET_ID);\n-                catalogManager.getSampleManager()\n-                        .addAnnotationSet(study, sampleStats.getId(), annotationSet, new QueryOptions(), sessionId);\n-            }\n-        } catch (IOException | CatalogException e) {\n-            throw new AnalysisException(e);\n-        }\n+    // check read permission\n+    try {\n+      variantStorageManager.checkQueryPermissions(\n+          new Query()\n+              .append(VariantQueryParam.STUDY.key(), study)\n+              .append(VariantQueryParam.INCLUDE_SAMPLE.key(), checkedSamplesList),\n+          new QueryOptions(),\n+          sessionId);\n+    } catch (CatalogException | StorageEngineException e) {\n+      throw new AnalysisException(e);\n+    }\n+    outputFile = outDir.resolve(getId() + \".json\");\n+  }\n+\n+  @Override\n+  protected void exec() throws AnalysisException {\n+    step(getId(), () -> {\n+      getAnalysisExecutor(SampleVariantStatsAnalysisExecutor.class)\n+          .setOutputFile(outputFile)\n+          .setStudy(study)\n+          .setSampleNames(checkedSamplesList)\n+          .exec();\n+\n+      addFile(outputFile, FileResult.FileType.JSON);\n+    });\n+\n+    step(\"index\", () -> {\n+      if (indexResults) {\n+        indexResults(outputFile);\n+      } else {\n+        skipStep();\n+      }\n+    });\n+  }\n+\n+  private void indexResults(Path outputFile) throws AnalysisException {\n+    List<SampleVariantStats> stats = new ArrayList<>(checkedSamplesList.size());\n+    try {\n+      JacksonUtils.getDefaultObjectMapper()\n+          .readerFor(SampleVariantStats.class)\n+          .<SampleVariantStats>readValues(outputFile.toFile())\n+          .forEachRemaining(stats::add);\n+\n+      try {\n+        catalogManager.getStudyManager().getVariableSet(study, VARIABLE_SET_ID, new QueryOptions(), sessionId);\n+      } catch (CatalogException e) {\n+        // Assume variable set not found. Try to create\n+        List<Variable> variables = AvroToAnnotationConverter.convertToVariableSet(SampleVariantStats.getClassSchema());\n+        catalogManager.getStudyManager()\n+            .createVariableSet(study, VARIABLE_SET_ID, VARIABLE_SET_ID, true, false, \"\", Collections.emptyMap(), variables,\n+                Collections.singletonList(VariableSet.AnnotableDataModels.SAMPLE), sessionId);\n+      }\n+\n+      for (SampleVariantStats sampleStats : stats) {\n+        AnnotationSet annotationSet = AvroToAnnotationConverter.convertToAnnotationSet(sampleStats, VARIABLE_SET_ID);\n+        catalogManager.getSampleManager()\n+            .addAnnotationSet(study, sampleStats.getId(), annotationSet, new QueryOptions(), sessionId);\n+      }\n+    } catch (IOException | CatalogException e) {\n+      throw new AnalysisException(e);\n     }\n+  }\n \n }\n",
            "diff_size": 315
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/443/SampleVariantStatsAnalysis.java\nindex 01f4398c862..8330e183388 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/443/SampleVariantStatsAnalysis.java\n@@ -194,7 +194,7 @@ public class SampleVariantStatsAnalysis extends OpenCgaAnalysis {\n             addFile(outputFile, FileResult.FileType.JSON);\n         });\n \n-        step(\"index\", ()->{\n+        step(\"index\", () -> {\n             if (indexResults) {\n                 indexResults(outputFile);\n             } else {\n@@ -231,4 +231,4 @@ public class SampleVariantStatsAnalysis extends OpenCgaAnalysis {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/443/SampleVariantStatsAnalysis.java\nindex 01f4398c862..4e87d1e07d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/443/SampleVariantStatsAnalysis.java\n@@ -194,7 +194,7 @@ public class SampleVariantStatsAnalysis extends OpenCgaAnalysis {\n             addFile(outputFile, FileResult.FileType.JSON);\n         });\n \n-        step(\"index\", ()->{\n+        step(\"index\", ()-> {\n             if (indexResults) {\n                 indexResults(outputFile);\n             } else {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/443/SampleVariantStatsAnalysis.java\nindex 01f4398c862..4e87d1e07d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/443/SampleVariantStatsAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/443/SampleVariantStatsAnalysis.java\n@@ -194,7 +194,7 @@ public class SampleVariantStatsAnalysis extends OpenCgaAnalysis {\n             addFile(outputFile, FileResult.FileType.JSON);\n         });\n \n-        step(\"index\", ()->{\n+        step(\"index\", ()-> {\n             if (indexResults) {\n                 indexResults(outputFile);\n             } else {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}