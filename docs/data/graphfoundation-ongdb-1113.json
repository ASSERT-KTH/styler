{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1113",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "127",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "222",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "238",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "250",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "274",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "320",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "341",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "509",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "542",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "575",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "635",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "649",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "649",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "741",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "741",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "785",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "785",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "804",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "804",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "879",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "881",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "897",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "897",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "916",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "945",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "982",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "982",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "987",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "987",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "988",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "988",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "991",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "995",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "995",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "997",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "997",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1001",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1001",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1026",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1026",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1035",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1035",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1037",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1037",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1045",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1045",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1045",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1048",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1056",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1056",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1056",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1058",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1058",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1113/JSONArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1113/JSONArray.java\nindex 32c1098288f..4d9463438a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1113/JSONArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1113/JSONArray.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.util.json;\n \n /*\n@@ -104,977 +105,957 @@ import java.util.Map;\n public class JSONArray\n {\n \n-    /**\n-     * The arrayList where the JSONArray's properties are kept.\n-     */\n-    private ArrayList<Object> myArrayList;\n-\n-    /**\n-     * Construct an empty JSONArray.\n-     */\n-    public JSONArray()\n+  /**\n+   * The arrayList where the JSONArray's properties are kept.\n+   */\n+  private ArrayList<Object> myArrayList;\n+\n+  /**\n+   * Construct an empty JSONArray.\n+   */\n+  public JSONArray()\n+  {\n+    this.myArrayList = new ArrayList<>();\n+  }\n+\n+  /**\n+   * Construct a JSONArray from a JSONTokener.\n+   *\n+   * @param x A JSONTokener\n+   * @throws JSONException If there is a syntax error.\n+   */\n+  public JSONArray(JSONTokener x) throws JSONException\n+  {\n+    this();\n+    char c = x.nextClean();\n+    char q;\n+    if (c == '[')\n     {\n-        this.myArrayList = new ArrayList<>();\n-    }\n-\n-    /**\n-     * Construct a JSONArray from a JSONTokener.\n-     *\n-     * @param x A JSONTokener\n-     * @throws JSONException If there is a syntax error.\n-     */\n-    public JSONArray( JSONTokener x ) throws JSONException\n+      q = ']';\n+    } else if (c == '(')\n     {\n-        this();\n-        char c = x.nextClean();\n-        char q;\n-        if ( c == '[' )\n-        {\n-            q = ']';\n-        }\n-        else if ( c == '(' )\n-        {\n-            q = ')';\n-        }\n-        else\n-        {\n-            throw x.syntaxError( \"A JSONArray text must start with '['\" );\n-        }\n-        if ( x.nextClean() == ']' )\n-        {\n-            return;\n-        }\n-        x.back();\n-        for ( ; ; )\n-        {\n-            if ( x.nextClean() == ',' )\n-            {\n-                x.back();\n-                this.myArrayList.add( null );\n-            }\n-            else\n-            {\n-                x.back();\n-                this.myArrayList.add( x.nextValue() );\n-            }\n-            c = x.nextClean();\n-            switch ( c )\n-            {\n-            case ';':\n-            case ',':\n-                if ( x.nextClean() == ']' )\n-                {\n-                    return;\n-                }\n-                x.back();\n-                break;\n-            case ']':\n-            case ')':\n-                if ( q != c )\n-                {\n-                    throw x.syntaxError( \"Expected a '\" + new Character( q ) + \"'\" );\n-                }\n-                return;\n-            default:\n-                throw x.syntaxError( \"Expected a ',' or ']'\" );\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Construct a JSONArray from a source JSON text.\n-     *\n-     * @param source A string that begins with\n-     * <code>[</code>&nbsp;<small>(left bracket)</small>\n-     * and ends with <code>]</code>&nbsp;<small>(right bracket)</small>.\n-     * @throws JSONException If there is a syntax error.\n-     */\n-    public JSONArray( String source ) throws JSONException\n+      q = ')';\n+    } else\n     {\n-        this( new JSONTokener( source ) );\n+      throw x.syntaxError(\"A JSONArray text must start with '['\");\n     }\n-\n-    /**\n-     * Construct a JSONArray from a Collection.\n-     *\n-     * @param collection A Collection.\n-     */\n-    public JSONArray( Collection collection )\n+    if (x.nextClean() == ']')\n     {\n-        this.myArrayList = (collection == null) ? new ArrayList() : new ArrayList( collection );\n+      return;\n     }\n-\n-    /**\n-     * Construct a JSONArray from a collection of beans.\n-     * The collection should have Java Beans.\n-     */\n-\n-    public JSONArray( Collection collection, boolean includeSuperClass )\n+    x.back();\n+    for (; ; )\n     {\n-        this.myArrayList = new ArrayList<>();\n-        if ( collection != null )\n-        {\n-            Iterator iter = collection.iterator();\n-            while ( iter.hasNext() )\n-            {\n-                Object o = iter.next();\n-                if ( o instanceof Map )\n-                {\n-                    this.myArrayList.add( new JSONObject( (Map) o, includeSuperClass ) );\n-                }\n-                else if ( !JSONObject.isStandardProperty( o.getClass() ) )\n-                {\n-                    this.myArrayList.add( new JSONObject( o, includeSuperClass ) );\n-                }\n-                else\n-                {\n-                    this.myArrayList.add( o );\n-                }\n-            }\n-        }\n+      if (x.nextClean() == ',')\n+      {\n+        x.back();\n+        this.myArrayList.add(null);\n+      } else\n+      {\n+        x.back();\n+        this.myArrayList.add(x.nextValue());\n+      }\n+      c = x.nextClean();\n+      switch (c)\n+      {\n+        case ';':\n+        case ',':\n+          if (x.nextClean() == ']')\n+          {\n+            return;\n+          }\n+          x.back();\n+          break;\n+        case ']':\n+        case ')':\n+          if (q != c)\n+          {\n+            throw x.syntaxError(\"Expected a '\" + new Character(q) + \"'\");\n+          }\n+          return;\n+        default:\n+          throw x.syntaxError(\"Expected a ',' or ']'\");\n+      }\n     }\n-\n-    /**\n-     * Construct a JSONArray from an array\n-     *\n-     * @throws JSONException If not an array.\n-     */\n-    public JSONArray( Object array ) throws JSONException\n+  }\n+\n+  /**\n+   * Construct a JSONArray from a source JSON text.\n+   *\n+   * @param source A string that begins with\n+   *               <code>[</code>&nbsp;<small>(left bracket)</small>\n+   *               and ends with <code>]</code>&nbsp;<small>(right bracket)</small>.\n+   * @throws JSONException If there is a syntax error.\n+   */\n+  public JSONArray(String source) throws JSONException\n+  {\n+    this(new JSONTokener(source));\n+  }\n+\n+  /**\n+   * Construct a JSONArray from a Collection.\n+   *\n+   * @param collection A Collection.\n+   */\n+  public JSONArray(Collection collection)\n+  {\n+    this.myArrayList = (collection == null) ? new ArrayList() : new ArrayList(collection);\n+  }\n+\n+  /**\n+   * Construct a JSONArray from a collection of beans.\n+   * The collection should have Java Beans.\n+   */\n+\n+  public JSONArray(Collection collection, boolean includeSuperClass)\n+  {\n+    this.myArrayList = new ArrayList<>();\n+    if (collection != null)\n     {\n-        this();\n-        if ( array.getClass().isArray() )\n+      Iterator iter = collection.iterator();\n+      while (iter.hasNext())\n+      {\n+        Object o = iter.next();\n+        if (o instanceof Map)\n         {\n-            int length = Array.getLength( array );\n-            for ( int i = 0; i < length; i += 1 )\n-            {\n-                this.put( Array.get( array, i ) );\n-            }\n-        }\n-        else\n-        {\n-            throw new JSONException( \"JSONArray initial value should be a string or collection or array.\" );\n-        }\n-    }\n-\n-    /**\n-     * Construct a JSONArray from an array with a bean.\n-     * The array should have Java Beans.\n-     *\n-     * @throws JSONException If not an array.\n-     */\n-    public JSONArray( Object array, boolean includeSuperClass ) throws JSONException\n-    {\n-        this();\n-        if ( array.getClass().isArray() )\n+          this.myArrayList.add(new JSONObject((Map) o, includeSuperClass));\n+        } else if (!JSONObject.isStandardProperty(o.getClass()))\n         {\n-            int length = Array.getLength( array );\n-            for ( int i = 0; i < length; i += 1 )\n-            {\n-                Object o = Array.get( array, i );\n-                if ( JSONObject.isStandardProperty( o.getClass() ) )\n-                {\n-                    this.myArrayList.add( o );\n-                }\n-                else\n-                {\n-                    this.myArrayList.add( new JSONObject( o, includeSuperClass ) );\n-                }\n-            }\n-        }\n-        else\n+          this.myArrayList.add(new JSONObject(o, includeSuperClass));\n+        } else\n         {\n-            throw new JSONException( \"JSONArray initial value should be a string or collection or array.\" );\n+          this.myArrayList.add(o);\n         }\n+      }\n     }\n-\n-    public List<Object> toList()\n+  }\n+\n+  /**\n+   * Construct a JSONArray from an array\n+   *\n+   * @throws JSONException If not an array.\n+   */\n+  public JSONArray(Object array) throws JSONException\n+  {\n+    this();\n+    if (array.getClass().isArray())\n     {\n-        return Collections.unmodifiableList( myArrayList );\n-    }\n-\n-    /**\n-     * Get the object value associated with an index.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return An object value.\n-     * @throws JSONException If there is no value for the index.\n-     */\n-    public Object get( int index ) throws JSONException\n+      int length = Array.getLength(array);\n+      for (int i = 0; i < length; i += 1)\n+      {\n+        this.put(Array.get(array, i));\n+      }\n+    } else\n     {\n-        Object o = opt( index );\n-        if ( o == null )\n-        {\n-            throw new JSONException( \"JSONArray[\" + index + \"] not found.\" );\n-        }\n-        return o;\n+      throw new JSONException(\"JSONArray initial value should be a string or collection or array.\");\n     }\n-\n-    /**\n-     * Get the boolean value associated with an index.\n-     * The string values \"true\" and \"false\" are converted to boolean.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The truth.\n-     * @throws JSONException If there is no value for the index or if the\n-     * value is not convertable to boolean.\n-     */\n-    public boolean getBoolean( int index ) throws JSONException\n+  }\n+\n+  /**\n+   * Construct a JSONArray from an array with a bean.\n+   * The array should have Java Beans.\n+   *\n+   * @throws JSONException If not an array.\n+   */\n+  public JSONArray(Object array, boolean includeSuperClass) throws JSONException\n+  {\n+    this();\n+    if (array.getClass().isArray())\n     {\n-        Object o = get( index );\n-        if ( o.equals( Boolean.FALSE ) || (o instanceof String && ((String) o).equalsIgnoreCase( \"false\" )) )\n+      int length = Array.getLength(array);\n+      for (int i = 0; i < length; i += 1)\n+      {\n+        Object o = Array.get(array, i);\n+        if (JSONObject.isStandardProperty(o.getClass()))\n         {\n-            return false;\n-        }\n-        else if ( o.equals( Boolean.TRUE ) || (o instanceof String && ((String) o).equalsIgnoreCase( \"true\" )) )\n+          this.myArrayList.add(o);\n+        } else\n         {\n-            return true;\n+          this.myArrayList.add(new JSONObject(o, includeSuperClass));\n         }\n-        throw new JSONException( \"JSONArray[\" + index + \"] is not a Boolean.\" );\n-    }\n-\n-    /**\n-     * Get the double value associated with an index.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The value.\n-     * @throws JSONException If the key is not found or if the value cannot\n-     * be converted to a number.\n-     */\n-    public double getDouble( int index ) throws JSONException\n+      }\n+    } else\n     {\n-        Object o = get( index );\n-        try\n-        {\n-            return o instanceof Number ? ((Number) o).doubleValue() : Double.valueOf( (String) o ).doubleValue();\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new JSONException( \"JSONArray[\" + index + \"] is not a number.\" );\n-        }\n+      throw new JSONException(\"JSONArray initial value should be a string or collection or array.\");\n     }\n-\n-    /**\n-     * Get the int value associated with an index.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The value.\n-     * @throws JSONException If the key is not found or if the value cannot\n-     * be converted to a number.\n-     * if the value cannot be converted to a number.\n-     */\n-    public int getInt( int index ) throws JSONException\n+  }\n+\n+  public List<Object> toList()\n+  {\n+    return Collections.unmodifiableList(myArrayList);\n+  }\n+\n+  /**\n+   * Get the object value associated with an index.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return An object value.\n+   * @throws JSONException If there is no value for the index.\n+   */\n+  public Object get(int index) throws JSONException\n+  {\n+    Object o = opt(index);\n+    if (o == null)\n     {\n-        Object o = get( index );\n-        return o instanceof Number ? ((Number) o).intValue() : (int) getDouble( index );\n+      throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n     }\n-\n-    /**\n-     * Get the JSONArray associated with an index.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return A JSONArray value.\n-     * @throws JSONException If there is no value for the index. or if the\n-     * value is not a JSONArray\n-     */\n-    public JSONArray getJSONArray( int index ) throws JSONException\n+    return o;\n+  }\n+\n+  /**\n+   * Get the boolean value associated with an index.\n+   * The string values \"true\" and \"false\" are converted to boolean.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The truth.\n+   * @throws JSONException If there is no value for the index or if the\n+   *                       value is not convertable to boolean.\n+   */\n+  public boolean getBoolean(int index) throws JSONException\n+  {\n+    Object o = get(index);\n+    if (o.equals(Boolean.FALSE) || (o instanceof String && ((String) o).equalsIgnoreCase(\"false\")))\n     {\n-        Object o = get( index );\n-        if ( o instanceof JSONArray )\n-        {\n-            return (JSONArray) o;\n-        }\n-        throw new JSONException( \"JSONArray[\" + index + \"] is not a JSONArray.\" );\n-    }\n-\n-    /**\n-     * Get the JSONObject associated with an index.\n-     *\n-     * @param index subscript\n-     * @return A JSONObject value.\n-     * @throws JSONException If there is no value for the index or if the\n-     * value is not a JSONObject\n-     */\n-    public JSONObject getJSONObject( int index ) throws JSONException\n+      return false;\n+    } else if (o.equals(Boolean.TRUE) || (o instanceof String && ((String) o).equalsIgnoreCase(\"true\")))\n     {\n-        Object o = get( index );\n-        if ( o instanceof JSONObject )\n-        {\n-            return (JSONObject) o;\n-        }\n-        throw new JSONException( \"JSONArray[\" + index + \"] is not a JSONObject.\" );\n+      return true;\n     }\n-\n-    /**\n-     * Get the long value associated with an index.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The value.\n-     * @throws JSONException If the key is not found or if the value cannot\n-     * be converted to a number.\n-     */\n-    public long getLong( int index ) throws JSONException\n+    throw new JSONException(\"JSONArray[\" + index + \"] is not a Boolean.\");\n+  }\n+\n+  /**\n+   * Get the double value associated with an index.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The value.\n+   * @throws JSONException If the key is not found or if the value cannot\n+   *                       be converted to a number.\n+   */\n+  public double getDouble(int index) throws JSONException\n+  {\n+    Object o = get(index);\n+    try\n     {\n-        Object o = get( index );\n-        return o instanceof Number ? ((Number) o).longValue() : (long) getDouble( index );\n-    }\n-\n-    /**\n-     * Get the string associated with an index.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return A string value.\n-     * @throws JSONException If there is no value for the index.\n-     */\n-    public String getString( int index ) throws JSONException\n+      return o instanceof Number ? ((Number) o).doubleValue() : Double.valueOf((String) o).doubleValue();\n+    } catch (Exception e)\n     {\n-        return get( index ).toString();\n+      throw new JSONException(\"JSONArray[\" + index + \"] is not a number.\");\n     }\n-\n-    /**\n-     * Determine if the value is null.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return true if the value at the index is null, or if there is no value.\n-     */\n-    public boolean isNull( int index )\n+  }\n+\n+  /**\n+   * Get the int value associated with an index.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The value.\n+   * @throws JSONException If the key is not found or if the value cannot\n+   *                       be converted to a number.\n+   *                       if the value cannot be converted to a number.\n+   */\n+  public int getInt(int index) throws JSONException\n+  {\n+    Object o = get(index);\n+    return o instanceof Number ? ((Number) o).intValue() : (int) getDouble(index);\n+  }\n+\n+  /**\n+   * Get the JSONArray associated with an index.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return A JSONArray value.\n+   * @throws JSONException If there is no value for the index. or if the\n+   *                       value is not a JSONArray\n+   */\n+  public JSONArray getJSONArray(int index) throws JSONException\n+  {\n+    Object o = get(index);\n+    if (o instanceof JSONArray)\n     {\n-        return JSONObject.NULL.equals( opt( index ) );\n+      return (JSONArray) o;\n     }\n-\n-    /**\n-     * Make a string from the contents of this JSONArray. The\n-     * <code>separator</code> string is inserted between each element.\n-     * Warning: This method assumes that the data structure is acyclical.\n-     *\n-     * @param separator A string that will be inserted between the elements.\n-     * @return a string.\n-     * @throws JSONException If the array contains an invalid number.\n-     */\n-    public String join( String separator ) throws JSONException\n+    throw new JSONException(\"JSONArray[\" + index + \"] is not a JSONArray.\");\n+  }\n+\n+  /**\n+   * Get the JSONObject associated with an index.\n+   *\n+   * @param index subscript\n+   * @return A JSONObject value.\n+   * @throws JSONException If there is no value for the index or if the\n+   *                       value is not a JSONObject\n+   */\n+  public JSONObject getJSONObject(int index) throws JSONException\n+  {\n+    Object o = get(index);\n+    if (o instanceof JSONObject)\n     {\n-        int len = length();\n-        StringBuilder sb = new StringBuilder();\n-\n-        for ( int i = 0; i < len; i += 1 )\n-        {\n-            if ( i > 0 )\n-            {\n-                sb.append( separator );\n-            }\n-            sb.append( JSONObject.valueToString( this.myArrayList.get( i ) ) );\n-        }\n-        return sb.toString();\n+      return (JSONObject) o;\n     }\n-\n-    /**\n-     * Get the number of elements in the JSONArray, included nulls.\n-     *\n-     * @return The length (or size).\n-     */\n-    public int length()\n+    throw new JSONException(\"JSONArray[\" + index + \"] is not a JSONObject.\");\n+  }\n+\n+  /**\n+   * Get the long value associated with an index.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The value.\n+   * @throws JSONException If the key is not found or if the value cannot\n+   *                       be converted to a number.\n+   */\n+  public long getLong(int index) throws JSONException\n+  {\n+    Object o = get(index);\n+    return o instanceof Number ? ((Number) o).longValue() : (long) getDouble(index);\n+  }\n+\n+  /**\n+   * Get the string associated with an index.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return A string value.\n+   * @throws JSONException If there is no value for the index.\n+   */\n+  public String getString(int index) throws JSONException\n+  {\n+    return get(index).toString();\n+  }\n+\n+  /**\n+   * Determine if the value is null.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return true if the value at the index is null, or if there is no value.\n+   */\n+  public boolean isNull(int index)\n+  {\n+    return JSONObject.NULL.equals(opt(index));\n+  }\n+\n+  /**\n+   * Make a string from the contents of this JSONArray. The\n+   * <code>separator</code> string is inserted between each element.\n+   * Warning: This method assumes that the data structure is acyclical.\n+   *\n+   * @param separator A string that will be inserted between the elements.\n+   * @return a string.\n+   * @throws JSONException If the array contains an invalid number.\n+   */\n+  public String join(String separator) throws JSONException\n+  {\n+    int len = length();\n+    StringBuilder sb = new StringBuilder();\n+\n+    for (int i = 0; i < len; i += 1)\n     {\n-        return this.myArrayList.size();\n+      if (i > 0)\n+      {\n+        sb.append(separator);\n+      }\n+      sb.append(JSONObject.valueToString(this.myArrayList.get(i)));\n     }\n-\n-    /**\n-     * Get the optional object value associated with an index.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return An object value, or null if there is no\n-     * object at that index.\n-     */\n-    public Object opt( int index )\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Get the number of elements in the JSONArray, included nulls.\n+   *\n+   * @return The length (or size).\n+   */\n+  public int length()\n+  {\n+    return this.myArrayList.size();\n+  }\n+\n+  /**\n+   * Get the optional object value associated with an index.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return An object value, or null if there is no\n+   * object at that index.\n+   */\n+  public Object opt(int index)\n+  {\n+    return (index < 0 || index >= length()) ? null : this.myArrayList.get(index);\n+  }\n+\n+  /**\n+   * Get the optional boolean value associated with an index.\n+   * It returns false if there is no value at that index,\n+   * or if the value is not Boolean.TRUE or the String \"true\".\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The truth.\n+   */\n+  public boolean optBoolean(int index)\n+  {\n+    return optBoolean(index, false);\n+  }\n+\n+  /**\n+   * Get the optional boolean value associated with an index.\n+   * It returns the defaultValue if there is no value at that index or if\n+   * it is not a Boolean or the String \"true\" or \"false\" (case insensitive).\n+   *\n+   * @param index        The index must be between 0 and length() - 1.\n+   * @param defaultValue A boolean default.\n+   * @return The truth.\n+   */\n+  public boolean optBoolean(int index, boolean defaultValue)\n+  {\n+    try\n     {\n-        return (index < 0 || index >= length()) ? null : this.myArrayList.get( index );\n-    }\n-\n-    /**\n-     * Get the optional boolean value associated with an index.\n-     * It returns false if there is no value at that index,\n-     * or if the value is not Boolean.TRUE or the String \"true\".\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The truth.\n-     */\n-    public boolean optBoolean( int index )\n+      return getBoolean(index);\n+    } catch (Exception e)\n     {\n-        return optBoolean( index, false );\n+      return defaultValue;\n     }\n-\n-    /**\n-     * Get the optional boolean value associated with an index.\n-     * It returns the defaultValue if there is no value at that index or if\n-     * it is not a Boolean or the String \"true\" or \"false\" (case insensitive).\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @param defaultValue A boolean default.\n-     * @return The truth.\n-     */\n-    public boolean optBoolean( int index, boolean defaultValue )\n+  }\n+\n+  /**\n+   * Get the optional double value associated with an index.\n+   * NaN is returned if there is no value for the index,\n+   * or if the value is not a number and cannot be converted to a number.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The value.\n+   */\n+  public double optDouble(int index)\n+  {\n+    return optDouble(index, Double.NaN);\n+  }\n+\n+  /**\n+   * Get the optional double value associated with an index.\n+   * The defaultValue is returned if there is no value for the index,\n+   * or if the value is not a number and cannot be converted to a number.\n+   *\n+   * @param index        subscript\n+   * @param defaultValue The default value.\n+   * @return The value.\n+   */\n+  public double optDouble(int index, double defaultValue)\n+  {\n+    try\n     {\n-        try\n-        {\n-            return getBoolean( index );\n-        }\n-        catch ( Exception e )\n-        {\n-            return defaultValue;\n-        }\n-    }\n-\n-    /**\n-     * Get the optional double value associated with an index.\n-     * NaN is returned if there is no value for the index,\n-     * or if the value is not a number and cannot be converted to a number.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The value.\n-     */\n-    public double optDouble( int index )\n+      return getDouble(index);\n+    } catch (Exception e)\n     {\n-        return optDouble( index, Double.NaN );\n+      return defaultValue;\n     }\n-\n-    /**\n-     * Get the optional double value associated with an index.\n-     * The defaultValue is returned if there is no value for the index,\n-     * or if the value is not a number and cannot be converted to a number.\n-     *\n-     * @param index subscript\n-     * @param defaultValue The default value.\n-     * @return The value.\n-     */\n-    public double optDouble( int index, double defaultValue )\n+  }\n+\n+  /**\n+   * Get the optional int value associated with an index.\n+   * Zero is returned if there is no value for the index,\n+   * or if the value is not a number and cannot be converted to a number.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The value.\n+   */\n+  public int optInt(int index)\n+  {\n+    return optInt(index, 0);\n+  }\n+\n+  /**\n+   * Get the optional int value associated with an index.\n+   * The defaultValue is returned if there is no value for the index,\n+   * or if the value is not a number and cannot be converted to a number.\n+   *\n+   * @param index        The index must be between 0 and length() - 1.\n+   * @param defaultValue The default value.\n+   * @return The value.\n+   */\n+  public int optInt(int index, int defaultValue)\n+  {\n+    try\n     {\n-        try\n-        {\n-            return getDouble( index );\n-        }\n-        catch ( Exception e )\n-        {\n-            return defaultValue;\n-        }\n-    }\n-\n-    /**\n-     * Get the optional int value associated with an index.\n-     * Zero is returned if there is no value for the index,\n-     * or if the value is not a number and cannot be converted to a number.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The value.\n-     */\n-    public int optInt( int index )\n-    {\n-        return optInt( index, 0 );\n-    }\n-\n-    /**\n-     * Get the optional int value associated with an index.\n-     * The defaultValue is returned if there is no value for the index,\n-     * or if the value is not a number and cannot be converted to a number.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @param defaultValue The default value.\n-     * @return The value.\n-     */\n-    public int optInt( int index, int defaultValue )\n-    {\n-        try\n-        {\n-            return getInt( index );\n-        }\n-        catch ( Exception e )\n-        {\n-            return defaultValue;\n-        }\n-    }\n-\n-    /**\n-     * Get the optional JSONArray associated with an index.\n-     *\n-     * @param index subscript\n-     * @return A JSONArray value, or null if the index has no value,\n-     * or if the value is not a JSONArray.\n-     */\n-    public JSONArray optJSONArray( int index )\n-    {\n-        Object o = opt( index );\n-        return o instanceof JSONArray ? (JSONArray) o : null;\n-    }\n-\n-    /**\n-     * Get the optional JSONObject associated with an index.\n-     * Null is returned if the key is not found, or null if the index has\n-     * no value, or if the value is not a JSONObject.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return A JSONObject value.\n-     */\n-    public JSONObject optJSONObject( int index )\n-    {\n-        Object o = opt( index );\n-        return o instanceof JSONObject ? (JSONObject) o : null;\n-    }\n-\n-    /**\n-     * Get the optional long value associated with an index.\n-     * Zero is returned if there is no value for the index,\n-     * or if the value is not a number and cannot be converted to a number.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return The value.\n-     */\n-    public long optLong( int index )\n-    {\n-        return optLong( index, 0 );\n-    }\n-\n-    /**\n-     * Get the optional long value associated with an index.\n-     * The defaultValue is returned if there is no value for the index,\n-     * or if the value is not a number and cannot be converted to a number.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @param defaultValue The default value.\n-     * @return The value.\n-     */\n-    public long optLong( int index, long defaultValue )\n+      return getInt(index);\n+    } catch (Exception e)\n     {\n-        try\n-        {\n-            return getLong( index );\n-        }\n-        catch ( Exception e )\n-        {\n-            return defaultValue;\n-        }\n+      return defaultValue;\n     }\n-\n-    /**\n-     * Get the optional string value associated with an index. It returns an\n-     * empty string if there is no value at that index. If the value\n-     * is not a string and is not null, then it is coverted to a string.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @return A String value.\n-     */\n-    public String optString( int index )\n+  }\n+\n+  /**\n+   * Get the optional JSONArray associated with an index.\n+   *\n+   * @param index subscript\n+   * @return A JSONArray value, or null if the index has no value,\n+   * or if the value is not a JSONArray.\n+   */\n+  public JSONArray optJSONArray(int index)\n+  {\n+    Object o = opt(index);\n+    return o instanceof JSONArray ? (JSONArray) o : null;\n+  }\n+\n+  /**\n+   * Get the optional JSONObject associated with an index.\n+   * Null is returned if the key is not found, or null if the index has\n+   * no value, or if the value is not a JSONObject.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return A JSONObject value.\n+   */\n+  public JSONObject optJSONObject(int index)\n+  {\n+    Object o = opt(index);\n+    return o instanceof JSONObject ? (JSONObject) o : null;\n+  }\n+\n+  /**\n+   * Get the optional long value associated with an index.\n+   * Zero is returned if there is no value for the index,\n+   * or if the value is not a number and cannot be converted to a number.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return The value.\n+   */\n+  public long optLong(int index)\n+  {\n+    return optLong(index, 0);\n+  }\n+\n+  /**\n+   * Get the optional long value associated with an index.\n+   * The defaultValue is returned if there is no value for the index,\n+   * or if the value is not a number and cannot be converted to a number.\n+   *\n+   * @param index        The index must be between 0 and length() - 1.\n+   * @param defaultValue The default value.\n+   * @return The value.\n+   */\n+  public long optLong(int index, long defaultValue)\n+  {\n+    try\n     {\n-        return optString( index, \"\" );\n-    }\n-\n-    /**\n-     * Get the optional string associated with an index.\n-     * The defaultValue is returned if the key is not found.\n-     *\n-     * @param index The index must be between 0 and length() - 1.\n-     * @param defaultValue The default value.\n-     * @return A String value.\n-     */\n-    public String optString( int index, String defaultValue )\n+      return getLong(index);\n+    } catch (Exception e)\n     {\n-        Object o = opt( index );\n-        return o != null ? o.toString() : defaultValue;\n+      return defaultValue;\n     }\n-\n-    /**\n-     * Append a boolean value. This increases the array's length by one.\n-     *\n-     * @param value A boolean value.\n-     * @return this.\n-     */\n-    public JSONArray put( boolean value )\n+  }\n+\n+  /**\n+   * Get the optional string value associated with an index. It returns an\n+   * empty string if there is no value at that index. If the value\n+   * is not a string and is not null, then it is coverted to a string.\n+   *\n+   * @param index The index must be between 0 and length() - 1.\n+   * @return A String value.\n+   */\n+  public String optString(int index)\n+  {\n+    return optString(index, \"\");\n+  }\n+\n+  /**\n+   * Get the optional string associated with an index.\n+   * The defaultValue is returned if the key is not found.\n+   *\n+   * @param index        The index must be between 0 and length() - 1.\n+   * @param defaultValue The default value.\n+   * @return A String value.\n+   */\n+  public String optString(int index, String defaultValue)\n+  {\n+    Object o = opt(index);\n+    return o != null ? o.toString() : defaultValue;\n+  }\n+\n+  /**\n+   * Append a boolean value. This increases the array's length by one.\n+   *\n+   * @param value A boolean value.\n+   * @return this.\n+   */\n+  public JSONArray put(boolean value)\n+  {\n+    put(value ? Boolean.TRUE : Boolean.FALSE);\n+    return this;\n+  }\n+\n+  /**\n+   * Put a value in the JSONArray, where the value will be a\n+   * JSONArray which is produced from a Collection.\n+   *\n+   * @param value A Collection value.\n+   * @return this.\n+   */\n+  public JSONArray put(Collection value)\n+  {\n+    put(new JSONArray(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Append a double value. This increases the array's length by one.\n+   *\n+   * @param value A double value.\n+   * @return this.\n+   * @throws JSONException if the value is not finite.\n+   */\n+  public JSONArray put(double value) throws JSONException\n+  {\n+    Double d = value;\n+    JSONObject.testValidity(d);\n+    put(d);\n+    return this;\n+  }\n+\n+  /**\n+   * Append an int value. This increases the array's length by one.\n+   *\n+   * @param value An int value.\n+   * @return this.\n+   */\n+  public JSONArray put(int value)\n+  {\n+    put(Integer.valueOf(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Append an long value. This increases the array's length by one.\n+   *\n+   * @param value A long value.\n+   * @return this.\n+   */\n+  public JSONArray put(long value)\n+  {\n+    put(Long.valueOf(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Put a value in the JSONArray, where the value will be a\n+   * JSONObject which is produced from a Map.\n+   *\n+   * @param value A Map value.\n+   * @return this.\n+   */\n+  public JSONArray put(Map value)\n+  {\n+    put(new JSONObject(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Append an object value. This increases the array's length by one.\n+   *\n+   * @param value An object value.  The value should be a\n+   *              Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n+   *              JSONObject.NULL object.\n+   * @return this.\n+   */\n+  public JSONArray put(Object value)\n+  {\n+    this.myArrayList.add(value);\n+    return this;\n+  }\n+\n+  /**\n+   * Put or replace a boolean value in the JSONArray. If the index is greater\n+   * than the length of the JSONArray, then null elements will be added as\n+   * necessary to pad it out.\n+   *\n+   * @param index The subscript.\n+   * @param value A boolean value.\n+   * @return this.\n+   * @throws JSONException If the index is negative.\n+   */\n+  public JSONArray put(int index, boolean value) throws JSONException\n+  {\n+    put(index, value ? Boolean.TRUE : Boolean.FALSE);\n+    return this;\n+  }\n+\n+  /**\n+   * Put a value in the JSONArray, where the value will be a\n+   * JSONArray which is produced from a Collection.\n+   *\n+   * @param index The subscript.\n+   * @param value A Collection value.\n+   * @return this.\n+   * @throws JSONException If the index is negative or if the value is\n+   *                       not finite.\n+   */\n+  public JSONArray put(int index, Collection value) throws JSONException\n+  {\n+    put(index, new JSONArray(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Put or replace a double value. If the index is greater than the length of\n+   * the JSONArray, then null elements will be added as necessary to pad\n+   * it out.\n+   *\n+   * @param index The subscript.\n+   * @param value A double value.\n+   * @return this.\n+   * @throws JSONException If the index is negative or if the value is\n+   *                       not finite.\n+   */\n+  public JSONArray put(int index, double value) throws JSONException\n+  {\n+    put(index, new Double(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Put or replace an int value. If the index is greater than the length of\n+   * the JSONArray, then null elements will be added as necessary to pad\n+   * it out.\n+   *\n+   * @param index The subscript.\n+   * @param value An int value.\n+   * @return this.\n+   * @throws JSONException If the index is negative.\n+   */\n+  public JSONArray put(int index, int value) throws JSONException\n+  {\n+    put(index, Integer.valueOf(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Put or replace a long value. If the index is greater than the length of\n+   * the JSONArray, then null elements will be added as necessary to pad\n+   * it out.\n+   *\n+   * @param index The subscript.\n+   * @param value A long value.\n+   * @return this.\n+   * @throws JSONException If the index is negative.\n+   */\n+  public JSONArray put(int index, long value) throws JSONException\n+  {\n+    put(index, Long.valueOf(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Put a value in the JSONArray, where the value will be a\n+   * JSONObject which is produced from a Map.\n+   *\n+   * @param index The subscript.\n+   * @param value The Map value.\n+   * @return this.\n+   * @throws JSONException If the index is negative or if the the value is\n+   *                       an invalid number.\n+   */\n+  public JSONArray put(int index, Map value) throws JSONException\n+  {\n+    put(index, new JSONObject(value));\n+    return this;\n+  }\n+\n+  /**\n+   * Put or replace an object value in the JSONArray. If the index is greater\n+   * than the length of the JSONArray, then null elements will be added as\n+   * necessary to pad it out.\n+   *\n+   * @param index The subscript.\n+   * @param value The value to put into the array. The value should be a\n+   *              Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n+   *              JSONObject.NULL object.\n+   * @return this.\n+   * @throws JSONException If the index is negative or if the the value is\n+   *                       an invalid number.\n+   */\n+  public JSONArray put(int index, Object value) throws JSONException\n+  {\n+    JSONObject.testValidity(value);\n+    if (index < 0)\n     {\n-        put( value ? Boolean.TRUE : Boolean.FALSE );\n-        return this;\n+      throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n     }\n-\n-    /**\n-     * Put a value in the JSONArray, where the value will be a\n-     * JSONArray which is produced from a Collection.\n-     *\n-     * @param value A Collection value.\n-     * @return this.\n-     */\n-    public JSONArray put( Collection value )\n+    if (index < length())\n     {\n-        put( new JSONArray( value ) );\n-        return this;\n-    }\n-\n-    /**\n-     * Append a double value. This increases the array's length by one.\n-     *\n-     * @param value A double value.\n-     * @return this.\n-     * @throws JSONException if the value is not finite.\n-     */\n-    public JSONArray put( double value ) throws JSONException\n+      this.myArrayList.set(index, value);\n+    } else\n     {\n-        Double d = value;\n-        JSONObject.testValidity( d );\n-        put( d );\n-        return this;\n+      while (index != length())\n+      {\n+        put(JSONObject.NULL);\n+      }\n+      put(value);\n     }\n-\n-    /**\n-     * Append an int value. This increases the array's length by one.\n-     *\n-     * @param value An int value.\n-     * @return this.\n-     */\n-    public JSONArray put( int value )\n+    return this;\n+  }\n+\n+  /**\n+   * Remove a index and close the hole.\n+   *\n+   * @param index The index of the element to be removed.\n+   * @return The value that was associated with the index,\n+   * or null if there was no value.\n+   */\n+  public Object remove(int index)\n+  {\n+    Object o = opt(index);\n+    this.myArrayList.remove(index);\n+    return o;\n+  }\n+\n+  /**\n+   * Produce a JSONObject by combining a JSONArray of names with the values\n+   * of this JSONArray.\n+   *\n+   * @param names A JSONArray containing a list of key strings. These will be\n+   *              paired with the values.\n+   * @return A JSONObject, or null if there are no names or if this JSONArray\n+   * has no values.\n+   * @throws JSONException If any of the names are null.\n+   */\n+  public JSONObject toJSONObject(JSONArray names) throws JSONException\n+  {\n+    if (names == null || names.length() == 0 || length() == 0)\n     {\n-        put( Integer.valueOf( value ) );\n-        return this;\n+      return null;\n     }\n-\n-    /**\n-     * Append an long value. This increases the array's length by one.\n-     *\n-     * @param value A long value.\n-     * @return this.\n-     */\n-    public JSONArray put( long value )\n+    JSONObject jo = new JSONObject();\n+    for (int i = 0; i < names.length(); i += 1)\n     {\n-        put( Long.valueOf( value ) );\n-        return this;\n+      jo.put(names.getString(i), this.opt(i));\n     }\n-\n-    /**\n-     * Put a value in the JSONArray, where the value will be a\n-     * JSONObject which is produced from a Map.\n-     *\n-     * @param value A Map value.\n-     * @return this.\n-     */\n-    public JSONArray put( Map value )\n+    return jo;\n+  }\n+\n+  /**\n+   * Make a JSON text of this JSONArray. For compactness, no\n+   * unnecessary whitespace is added. If it is not possible to produce a\n+   * syntactically correct JSON text then null will be returned instead. This\n+   * could occur if the array contains an invalid number.\n+   * <p>\n+   * Warning: This method assumes that the data structure is acyclical.\n+   *\n+   * @return a printable, displayable, transmittable\n+   * representation of the array.\n+   */\n+  @Override\n+  public String toString()\n+  {\n+    try\n     {\n-        put( new JSONObject( value ) );\n-        return this;\n-    }\n-\n-    /**\n-     * Append an object value. This increases the array's length by one.\n-     *\n-     * @param value An object value.  The value should be a\n-     * Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n-     * JSONObject.NULL object.\n-     * @return this.\n-     */\n-    public JSONArray put( Object value )\n+      return '[' + join(\",\") + ']';\n+    } catch (Exception e)\n     {\n-        this.myArrayList.add( value );\n-        return this;\n+      return null;\n     }\n-\n-    /**\n-     * Put or replace a boolean value in the JSONArray. If the index is greater\n-     * than the length of the JSONArray, then null elements will be added as\n-     * necessary to pad it out.\n-     *\n-     * @param index The subscript.\n-     * @param value A boolean value.\n-     * @return this.\n-     * @throws JSONException If the index is negative.\n-     */\n-    public JSONArray put( int index, boolean value ) throws JSONException\n+  }\n+\n+  /**\n+   * Make a prettyprinted JSON text of this JSONArray.\n+   * Warning: This method assumes that the data structure is acyclical.\n+   *\n+   * @param indentFactor The number of spaces to add to each level of\n+   *                     indentation.\n+   * @return a printable, displayable, transmittable\n+   * representation of the object, beginning\n+   * with <code>[</code>&nbsp;<small>(left bracket)</small> and ending\n+   * with <code>]</code>&nbsp;<small>(right bracket)</small>.\n+   * @throws JSONException\n+   */\n+  public String toString(int indentFactor) throws JSONException\n+  {\n+    return toString(indentFactor, 0);\n+  }\n+\n+  /**\n+   * Make a prettyprinted JSON text of this JSONArray.\n+   * Warning: This method assumes that the data structure is acyclical.\n+   *\n+   * @param indentFactor The number of spaces to add to each level of\n+   *                     indentation.\n+   * @param indent       The indention of the top level.\n+   * @return a printable, displayable, transmittable\n+   * representation of the array.\n+   * @throws JSONException\n+   */\n+  String toString(int indentFactor, int indent) throws JSONException\n+  {\n+    int len = length();\n+    if (len == 0)\n     {\n-        put( index, value ? Boolean.TRUE : Boolean.FALSE );\n-        return this;\n+      return \"[]\";\n     }\n-\n-    /**\n-     * Put a value in the JSONArray, where the value will be a\n-     * JSONArray which is produced from a Collection.\n-     *\n-     * @param index The subscript.\n-     * @param value A Collection value.\n-     * @return this.\n-     * @throws JSONException If the index is negative or if the value is\n-     * not finite.\n-     */\n-    public JSONArray put( int index, Collection value ) throws JSONException\n+    int i;\n+    StringBuilder sb = new StringBuilder(\"[\");\n+    if (len == 1)\n     {\n-        put( index, new JSONArray( value ) );\n-        return this;\n-    }\n-\n-    /**\n-     * Put or replace a double value. If the index is greater than the length of\n-     * the JSONArray, then null elements will be added as necessary to pad\n-     * it out.\n-     *\n-     * @param index The subscript.\n-     * @param value A double value.\n-     * @return this.\n-     * @throws JSONException If the index is negative or if the value is\n-     * not finite.\n-     */\n-    public JSONArray put( int index, double value ) throws JSONException\n+      sb.append(JSONObject.valueToString(this.myArrayList.get(0), indentFactor, indent));\n+    } else\n     {\n-        put( index, new Double( value ) );\n-        return this;\n-    }\n-\n-    /**\n-     * Put or replace an int value. If the index is greater than the length of\n-     * the JSONArray, then null elements will be added as necessary to pad\n-     * it out.\n-     *\n-     * @param index The subscript.\n-     * @param value An int value.\n-     * @return this.\n-     * @throws JSONException If the index is negative.\n-     */\n-    public JSONArray put( int index, int value ) throws JSONException\n-    {\n-        put( index, Integer.valueOf( value ) );\n-        return this;\n-    }\n-\n-    /**\n-     * Put or replace a long value. If the index is greater than the length of\n-     * the JSONArray, then null elements will be added as necessary to pad\n-     * it out.\n-     *\n-     * @param index The subscript.\n-     * @param value A long value.\n-     * @return this.\n-     * @throws JSONException If the index is negative.\n-     */\n-    public JSONArray put( int index, long value ) throws JSONException\n-    {\n-        put( index, Long.valueOf( value ) );\n-        return this;\n-    }\n-\n-    /**\n-     * Put a value in the JSONArray, where the value will be a\n-     * JSONObject which is produced from a Map.\n-     *\n-     * @param index The subscript.\n-     * @param value The Map value.\n-     * @return this.\n-     * @throws JSONException If the index is negative or if the the value is\n-     * an invalid number.\n-     */\n-    public JSONArray put( int index, Map value ) throws JSONException\n-    {\n-        put( index, new JSONObject( value ) );\n-        return this;\n-    }\n-\n-    /**\n-     * Put or replace an object value in the JSONArray. If the index is greater\n-     * than the length of the JSONArray, then null elements will be added as\n-     * necessary to pad it out.\n-     *\n-     * @param index The subscript.\n-     * @param value The value to put into the array. The value should be a\n-     * Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n-     * JSONObject.NULL object.\n-     * @return this.\n-     * @throws JSONException If the index is negative or if the the value is\n-     * an invalid number.\n-     */\n-    public JSONArray put( int index, Object value ) throws JSONException\n-    {\n-        JSONObject.testValidity( value );\n-        if ( index < 0 )\n+      int newindent = indent + indentFactor;\n+      sb.append('\\n');\n+      for (i = 0; i < len; i += 1)\n+      {\n+        if (i > 0)\n         {\n-            throw new JSONException( \"JSONArray[\" + index + \"] not found.\" );\n+          sb.append(\",\\n\");\n         }\n-        if ( index < length() )\n+        for (int j = 0; j < newindent; j += 1)\n         {\n-            this.myArrayList.set( index, value );\n+          sb.append(' ');\n         }\n-        else\n-        {\n-            while ( index != length() )\n-            {\n-                put( JSONObject.NULL );\n-            }\n-            put( value );\n-        }\n-        return this;\n+        sb.append(JSONObject.valueToString(this.myArrayList.get(i), indentFactor, newindent));\n+      }\n+      sb.append('\\n');\n+      for (i = 0; i < indent; i += 1)\n+      {\n+        sb.append(' ');\n+      }\n     }\n-\n-    /**\n-     * Remove a index and close the hole.\n-     *\n-     * @param index The index of the element to be removed.\n-     * @return The value that was associated with the index,\n-     * or null if there was no value.\n-     */\n-    public Object remove( int index )\n+    sb.append(']');\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Write the contents of the JSONArray as JSON text to a writer.\n+   * For compactness, no whitespace is added.\n+   * <p>\n+   * Warning: This method assumes that the data structure is acyclical.\n+   *\n+   * @return The writer.\n+   * @throws JSONException\n+   */\n+  public Writer write(Writer writer) throws JSONException\n+  {\n+    try\n     {\n-        Object o = opt( index );\n-        this.myArrayList.remove( index );\n-        return o;\n-    }\n+      boolean b = false;\n+      int len = length();\n \n-    /**\n-     * Produce a JSONObject by combining a JSONArray of names with the values\n-     * of this JSONArray.\n-     *\n-     * @param names A JSONArray containing a list of key strings. These will be\n-     * paired with the values.\n-     * @return A JSONObject, or null if there are no names or if this JSONArray\n-     * has no values.\n-     * @throws JSONException If any of the names are null.\n-     */\n-    public JSONObject toJSONObject( JSONArray names ) throws JSONException\n-    {\n-        if ( names == null || names.length() == 0 || length() == 0 )\n-        {\n-            return null;\n-        }\n-        JSONObject jo = new JSONObject();\n-        for ( int i = 0; i < names.length(); i += 1 )\n-        {\n-            jo.put( names.getString( i ), this.opt( i ) );\n-        }\n-        return jo;\n-    }\n+      writer.write('[');\n \n-    /**\n-     * Make a JSON text of this JSONArray. For compactness, no\n-     * unnecessary whitespace is added. If it is not possible to produce a\n-     * syntactically correct JSON text then null will be returned instead. This\n-     * could occur if the array contains an invalid number.\n-     * <p>\n-     * Warning: This method assumes that the data structure is acyclical.\n-     *\n-     * @return a printable, displayable, transmittable\n-     * representation of the array.\n-     */\n-    @Override\n-    public String toString()\n-    {\n-        try\n+      for (int i = 0; i < len; i += 1)\n+      {\n+        if (b)\n         {\n-            return '[' + join( \",\" ) + ']';\n+          writer.write(',');\n         }\n-        catch ( Exception e )\n+        Object v = this.myArrayList.get(i);\n+        if (v instanceof JSONObject)\n         {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Make a prettyprinted JSON text of this JSONArray.\n-     * Warning: This method assumes that the data structure is acyclical.\n-     *\n-     * @param indentFactor The number of spaces to add to each level of\n-     * indentation.\n-     * @return a printable, displayable, transmittable\n-     * representation of the object, beginning\n-     * with <code>[</code>&nbsp;<small>(left bracket)</small> and ending\n-     * with <code>]</code>&nbsp;<small>(right bracket)</small>.\n-     * @throws JSONException\n-     */\n-    public String toString( int indentFactor ) throws JSONException\n-    {\n-        return toString( indentFactor, 0 );\n-    }\n-\n-    /**\n-     * Make a prettyprinted JSON text of this JSONArray.\n-     * Warning: This method assumes that the data structure is acyclical.\n-     *\n-     * @param indentFactor The number of spaces to add to each level of\n-     * indentation.\n-     * @param indent The indention of the top level.\n-     * @return a printable, displayable, transmittable\n-     * representation of the array.\n-     * @throws JSONException\n-     */\n-    String toString( int indentFactor, int indent ) throws JSONException\n-    {\n-        int len = length();\n-        if ( len == 0 )\n+          ((JSONObject) v).write(writer);\n+        } else if (v instanceof JSONArray)\n         {\n-            return \"[]\";\n-        }\n-        int i;\n-        StringBuilder sb = new StringBuilder( \"[\" );\n-        if ( len == 1 )\n-        {\n-            sb.append( JSONObject.valueToString( this.myArrayList.get( 0 ), indentFactor, indent ) );\n-        }\n-        else\n+          ((JSONArray) v).write(writer);\n+        } else\n         {\n-            int newindent = indent + indentFactor;\n-            sb.append( '\\n' );\n-            for ( i = 0; i < len; i += 1 )\n-            {\n-                if ( i > 0 )\n-                {\n-                    sb.append( \",\\n\" );\n-                }\n-                for ( int j = 0; j < newindent; j += 1 )\n-                {\n-                    sb.append( ' ' );\n-                }\n-                sb.append( JSONObject.valueToString( this.myArrayList.get( i ), indentFactor, newindent ) );\n-            }\n-            sb.append( '\\n' );\n-            for ( i = 0; i < indent; i += 1 )\n-            {\n-                sb.append( ' ' );\n-            }\n+          writer.write(JSONObject.valueToString(v));\n         }\n-        sb.append( ']' );\n-        return sb.toString();\n-    }\n-\n-    /**\n-     * Write the contents of the JSONArray as JSON text to a writer.\n-     * For compactness, no whitespace is added.\n-     * <p>\n-     * Warning: This method assumes that the data structure is acyclical.\n-     *\n-     * @return The writer.\n-     * @throws JSONException\n-     */\n-    public Writer write( Writer writer ) throws JSONException\n+        b = true;\n+      }\n+      writer.write(']');\n+      return writer;\n+    } catch (IOException e)\n     {\n-        try\n-        {\n-            boolean b = false;\n-            int len = length();\n-\n-            writer.write( '[' );\n-\n-            for ( int i = 0; i < len; i += 1 )\n-            {\n-                if ( b )\n-                {\n-                    writer.write( ',' );\n-                }\n-                Object v = this.myArrayList.get( i );\n-                if ( v instanceof JSONObject )\n-                {\n-                    ((JSONObject) v).write( writer );\n-                }\n-                else if ( v instanceof JSONArray )\n-                {\n-                    ((JSONArray) v).write( writer );\n-                }\n-                else\n-                {\n-                    writer.write( JSONObject.valueToString( v ) );\n-                }\n-                b = true;\n-            }\n-            writer.write( ']' );\n-            return writer;\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new JSONException( e );\n-        }\n+      throw new JSONException(e);\n     }\n+  }\n }\n",
            "diff_size": 1463
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "369",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1113/JSONArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1113/JSONArray.java\nindex 32c1098288f..69c6c811461 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1113/JSONArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1113/JSONArray.java\n@@ -103,7 +103,6 @@ import java.util.Map;\n  */\n public class JSONArray\n {\n-\n     /**\n      * The arrayList where the JSONArray's properties are kept.\n      */\n@@ -127,7 +126,7 @@ public class JSONArray\n     {\n         this();\n         char c = x.nextClean();\n-        char q;\n+        charq;\n         if ( c == '[' )\n         {\n             q = ']';\n@@ -140,7 +139,8 @@ public class JSONArray\n         {\n             throw x.syntaxError( \"A JSONArray text must start with '['\" );\n         }\n-        if ( x.nextClean() == ']' )\n+\n+if ( x.nextClean() == ']' )\n         {\n             return;\n         }\n@@ -157,7 +157,8 @@ public class JSONArray\n                 x.back();\n                 this.myArrayList.add( x.nextValue() );\n             }\n-            c = x.nextClean();\n+\n+c = x.nextClean();\n             switch ( c )\n             {\n             case ';':\n@@ -201,15 +202,14 @@ public class JSONArray\n      */\n     public JSONArray( Collection collection )\n     {\n-        this.myArrayList = (collection == null) ? new ArrayList() : new ArrayList( collection );\n+        this.myArrayList = (collection == null ) ? new ArrayList() : new ArrayList( collection );\n     }\n \n     /**\n      * Construct a JSONArray from a collection of beans.\n      * The collection should have Java Beans.\n      */\n-\n-    public JSONArray( Collection collection, boolean includeSuperClass )\n+public JSONArray( Collection collection, boolean includeSuperClass )\n     {\n         this.myArrayList = new ArrayList<>();\n         if ( collection != null )\n@@ -306,7 +306,8 @@ public class JSONArray\n         {\n             throw new JSONException( \"JSONArray[\" + index + \"] not found.\" );\n         }\n-        return o;\n+\n+return o;\n     }\n \n     /**\n@@ -321,11 +322,11 @@ public class JSONArray\n     public boolean getBoolean( int index ) throws JSONException\n     {\n         Object o = get( index );\n-        if ( o.equals( Boolean.FALSE ) || (o instanceof String && ((String) o).equalsIgnoreCase( \"false\" )) )\n+        if ( o.equals( Boolean.FALSE ) || ( o instanceof String && ((String) o).equalsIgnoreCase( \"false\" )) )\n         {\n             return false;\n         }\n-        else if ( o.equals( Boolean.TRUE ) || (o instanceof String && ((String) o).equalsIgnoreCase( \"true\" )) )\n+        else if ( o.equals( Boolean.TRUE ) || ( o instanceof String && ((String) o).equalsIgnoreCase( \"true\" )) )\n         {\n             return true;\n         }\n@@ -345,7 +346,7 @@ public class JSONArray\n         Object o = get( index );\n         try\n         {\n-            return o instanceof Number ? ((Number) o).doubleValue() : Double.valueOf( (String) o ).doubleValue();\n+            return o instanceof Number ? ((Number) o).doubleValue() : Double.valueOf( (String) o).doubleValue();\n         }\n         catch ( Exception e )\n         {\n@@ -365,7 +366,7 @@ public class JSONArray\n     public int getInt( int index ) throws JSONException\n     {\n         Object o = get( index );\n-        return o instanceof Number ? ((Number) o).intValue() : (int) getDouble( index );\n+        return o instanceof Number ? ((Number) o).intValue() : ( int) getDouble( index );\n     }\n \n     /**\n@@ -454,8 +455,7 @@ public class JSONArray\n     {\n         int len = length();\n         StringBuilder sb = new StringBuilder();\n-\n-        for ( int i = 0; i < len; i += 1 )\n+for ( int i = 0; i < len; i += 1 )\n         {\n             if ( i > 0 )\n             {\n@@ -463,7 +463,8 @@ public class JSONArray\n             }\n             sb.append( JSONObject.valueToString( this.myArrayList.get( i ) ) );\n         }\n-        return sb.toString();\n+\n+return sb.toString();\n     }\n \n     /**\n@@ -485,7 +486,7 @@ public class JSONArray\n      */\n     public Object opt( int index )\n     {\n-        return (index < 0 || index >= length()) ? null : this.myArrayList.get( index );\n+        return ( index < 0 || index >= length()) ? null : this.myArrayList.get( index );\n     }\n \n     /**\n@@ -886,7 +887,8 @@ public class JSONArray\n         {\n             throw new JSONException( \"JSONArray[\" + index + \"] not found.\" );\n         }\n-        if ( index < length() )\n+\n+if ( index < length() )\n         {\n             this.myArrayList.set( index, value );\n         }\n@@ -896,7 +898,8 @@ public class JSONArray\n             {\n                 put( JSONObject.NULL );\n             }\n-            put( value );\n+\n+put( value );\n         }\n         return this;\n     }\n@@ -931,12 +934,14 @@ public class JSONArray\n         {\n             return null;\n         }\n-        JSONObject jo = new JSONObject();\n+\n+JSONObject jo = new JSONObject();\n         for ( int i = 0; i < names.length(); i += 1 )\n         {\n             jo.put( names.getString( i ), this.opt( i ) );\n         }\n-        return jo;\n+\n+return jo;\n     }\n \n     /**\n@@ -1045,16 +1050,15 @@ public class JSONArray\n         {\n             boolean b = false;\n             int len = length();\n-\n-            writer.write( '[' );\n-\n-            for ( int i = 0; i < len; i += 1 )\n+writer.write( '[' );\n+for ( int i = 0; i < len; i += 1 )\n             {\n                 if ( b )\n                 {\n                     writer.write( ',' );\n                 }\n-                Object v = this.myArrayList.get( i );\n+\n+Object v = this.myArrayList.get( i );\n                 if ( v instanceof JSONObject )\n                 {\n                     ((JSONObject) v).write( writer );\n@@ -1067,7 +1071,8 @@ public class JSONArray\n                 {\n                     writer.write( JSONObject.valueToString( v ) );\n                 }\n-                b = true;\n+\n+b = true;\n             }\n             writer.write( ']' );\n             return writer;\n@@ -1077,4 +1082,4 @@ public class JSONArray\n             throw new JSONException( e );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "231",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "231",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "39",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "345",
                    "column": "63",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "350",
                    "column": "38",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "350",
                    "column": "62",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "524",
                    "column": "27",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "958",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "958",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "997",
                    "column": "27",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "997",
                    "column": "49",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "1028",
                    "column": "23",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1113/JSONArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1113/JSONArray.java\nindex 32c1098288f..1c0542e0823 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1113/JSONArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1113/JSONArray.java\n@@ -101,6 +101,7 @@ import java.util.Map;\n  * @author JSON.org\n  * @version 2009-04-13\n  */\n+\n public class JSONArray\n {\n \n@@ -112,6 +113,7 @@ public class JSONArray\n     /**\n      * Construct an empty JSONArray.\n      */\n+\n     public JSONArray()\n     {\n         this.myArrayList = new ArrayList<>();\n@@ -123,29 +125,34 @@ public class JSONArray\n      * @param x A JSONTokener\n      * @throws JSONException If there is a syntax error.\n      */\n-    public JSONArray( JSONTokener x ) throws JSONException\n+\n+    public JSONArray( JSONTokener x )\n+    throws JSONException\n     {\n-        this();\n+        this ();\n         char c = x.nextClean();\n         char q;\n         if ( c == '[' )\n         {\n             q = ']';\n         }\n-        else if ( c == '(' )\n+        else\n+        if ( c == '(' )\n         {\n             q = ')';\n         }\n         else\n-        {\n-            throw x.syntaxError( \"A JSONArray text must start with '['\" );\n-        }\n+            {\n+                throw x.syntaxError( \"A JSONArray text must start with '['\" );\n+            }\n+\n         if ( x.nextClean() == ']' )\n         {\n             return;\n         }\n+\n         x.back();\n-        for ( ; ; )\n+        for (;;)\n         {\n             if ( x.nextClean() == ',' )\n             {\n@@ -157,6 +164,7 @@ public class JSONArray\n                 x.back();\n                 this.myArrayList.add( x.nextValue() );\n             }\n+\n             c = x.nextClean();\n             switch ( c )\n             {\n@@ -166,6 +174,7 @@ public class JSONArray\n                 {\n                     return;\n                 }\n+\n                 x.back();\n                 break;\n             case ']':\n@@ -174,6 +183,7 @@ public class JSONArray\n                 {\n                     throw x.syntaxError( \"Expected a '\" + new Character( q ) + \"'\" );\n                 }\n+\n                 return;\n             default:\n                 throw x.syntaxError( \"Expected a ',' or ']'\" );\n@@ -189,9 +199,11 @@ public class JSONArray\n      * and ends with <code>]</code>&nbsp;<small>(right bracket)</small>.\n      * @throws JSONException If there is a syntax error.\n      */\n-    public JSONArray( String source ) throws JSONException\n+\n+    public JSONArray( String source )\n+    throws JSONException\n     {\n-        this( new JSONTokener( source ) );\n+        this ( new JSONTokener( source ) );\n     }\n \n     /**\n@@ -199,9 +211,10 @@ public class JSONArray\n      *\n      * @param collection A Collection.\n      */\n+\n     public JSONArray( Collection collection )\n     {\n-        this.myArrayList = (collection == null) ? new ArrayList() : new ArrayList( collection );\n+        this.myArrayList = ( collection == null) ? new ArrayList() : new ArrayList( collection );\n     }\n \n     /**\n@@ -215,21 +228,22 @@ public class JSONArray\n         if ( collection != null )\n         {\n             Iterator iter = collection.iterator();\n-            while ( iter.hasNext() )\n+            while( iter.hasNext())\n             {\n                 Object o = iter.next();\n                 if ( o instanceof Map )\n                 {\n                     this.myArrayList.add( new JSONObject( (Map) o, includeSuperClass ) );\n                 }\n-                else if ( !JSONObject.isStandardProperty( o.getClass() ) )\n+                else\n+                if ( ! JSONObject.isStandardProperty( o.getClass() ) )\n                 {\n                     this.myArrayList.add( new JSONObject( o, includeSuperClass ) );\n                 }\n                 else\n-                {\n-                    this.myArrayList.add( o );\n-                }\n+                    {\n+                        this.myArrayList.add( o );\n+                    }\n             }\n         }\n     }\n@@ -239,9 +253,11 @@ public class JSONArray\n      *\n      * @throws JSONException If not an array.\n      */\n-    public JSONArray( Object array ) throws JSONException\n+\n+    public JSONArray( Object array )\n+    throws JSONException\n     {\n-        this();\n+        this ();\n         if ( array.getClass().isArray() )\n         {\n             int length = Array.getLength( array );\n@@ -262,9 +278,11 @@ public class JSONArray\n      *\n      * @throws JSONException If not an array.\n      */\n-    public JSONArray( Object array, boolean includeSuperClass ) throws JSONException\n+\n+    public JSONArray( Object array, boolean includeSuperClass )\n+    throws JSONException\n     {\n-        this();\n+        this ();\n         if ( array.getClass().isArray() )\n         {\n             int length = Array.getLength( array );\n@@ -299,6 +317,7 @@ public class JSONArray\n      * @return An object value.\n      * @throws JSONException If there is no value for the index.\n      */\n+\n     public Object get( int index ) throws JSONException\n     {\n         Object o = opt( index );\n@@ -306,6 +325,7 @@ public class JSONArray\n         {\n             throw new JSONException( \"JSONArray[\" + index + \"] not found.\" );\n         }\n+\n         return o;\n     }\n \n@@ -318,17 +338,20 @@ public class JSONArray\n      * @throws JSONException If there is no value for the index or if the\n      * value is not convertable to boolean.\n      */\n+\n     public boolean getBoolean( int index ) throws JSONException\n     {\n         Object o = get( index );\n-        if ( o.equals( Boolean.FALSE ) || (o instanceof String && ((String) o).equalsIgnoreCase( \"false\" )) )\n+        if ( o.equals( Boolean.FALSE )|| ( o instanceof String&& ((String) o).equalsIgnoreCase( \"false\" )) )\n         {\n             return false;\n         }\n-        else if ( o.equals( Boolean.TRUE ) || (o instanceof String && ((String) o).equalsIgnoreCase( \"true\" )) )\n+        else\n+        if ( o.equals( Boolean.TRUE )|| ( o instanceof String&& ((String) o).equalsIgnoreCase( \"true\" )) )\n         {\n             return true;\n         }\n+\n         throw new JSONException( \"JSONArray[\" + index + \"] is not a Boolean.\" );\n     }\n \n@@ -340,6 +363,7 @@ public class JSONArray\n      * @throws JSONException If the key is not found or if the value cannot\n      * be converted to a number.\n      */\n+\n     public double getDouble( int index ) throws JSONException\n     {\n         Object o = get( index );\n@@ -362,6 +386,7 @@ public class JSONArray\n      * be converted to a number.\n      * if the value cannot be converted to a number.\n      */\n+\n     public int getInt( int index ) throws JSONException\n     {\n         Object o = get( index );\n@@ -376,6 +401,7 @@ public class JSONArray\n      * @throws JSONException If there is no value for the index. or if the\n      * value is not a JSONArray\n      */\n+\n     public JSONArray getJSONArray( int index ) throws JSONException\n     {\n         Object o = get( index );\n@@ -383,6 +409,7 @@ public class JSONArray\n         {\n             return (JSONArray) o;\n         }\n+\n         throw new JSONException( \"JSONArray[\" + index + \"] is not a JSONArray.\" );\n     }\n \n@@ -394,6 +421,7 @@ public class JSONArray\n      * @throws JSONException If there is no value for the index or if the\n      * value is not a JSONObject\n      */\n+\n     public JSONObject getJSONObject( int index ) throws JSONException\n     {\n         Object o = get( index );\n@@ -401,6 +429,7 @@ public class JSONArray\n         {\n             return (JSONObject) o;\n         }\n+\n         throw new JSONException( \"JSONArray[\" + index + \"] is not a JSONObject.\" );\n     }\n \n@@ -412,6 +441,7 @@ public class JSONArray\n      * @throws JSONException If the key is not found or if the value cannot\n      * be converted to a number.\n      */\n+\n     public long getLong( int index ) throws JSONException\n     {\n         Object o = get( index );\n@@ -425,6 +455,7 @@ public class JSONArray\n      * @return A string value.\n      * @throws JSONException If there is no value for the index.\n      */\n+\n     public String getString( int index ) throws JSONException\n     {\n         return get( index ).toString();\n@@ -436,6 +467,7 @@ public class JSONArray\n      * @param index The index must be between 0 and length() - 1.\n      * @return true if the value at the index is null, or if there is no value.\n      */\n+\n     public boolean isNull( int index )\n     {\n         return JSONObject.NULL.equals( opt( index ) );\n@@ -450,19 +482,21 @@ public class JSONArray\n      * @return a string.\n      * @throws JSONException If the array contains an invalid number.\n      */\n+\n     public String join( String separator ) throws JSONException\n     {\n         int len = length();\n         StringBuilder sb = new StringBuilder();\n-\n         for ( int i = 0; i < len; i += 1 )\n         {\n             if ( i > 0 )\n             {\n                 sb.append( separator );\n             }\n+\n             sb.append( JSONObject.valueToString( this.myArrayList.get( i ) ) );\n         }\n+\n         return sb.toString();\n     }\n \n@@ -471,6 +505,7 @@ public class JSONArray\n      *\n      * @return The length (or size).\n      */\n+\n     public int length()\n     {\n         return this.myArrayList.size();\n@@ -483,9 +518,10 @@ public class JSONArray\n      * @return An object value, or null if there is no\n      * object at that index.\n      */\n+\n     public Object opt( int index )\n     {\n-        return (index < 0 || index >= length()) ? null : this.myArrayList.get( index );\n+        return ( index < 0|| index >= length()) ? null : this.myArrayList.get( index );\n     }\n \n     /**\n@@ -496,6 +532,7 @@ public class JSONArray\n      * @param index The index must be between 0 and length() - 1.\n      * @return The truth.\n      */\n+\n     public boolean optBoolean( int index )\n     {\n         return optBoolean( index, false );\n@@ -510,6 +547,7 @@ public class JSONArray\n      * @param defaultValue A boolean default.\n      * @return The truth.\n      */\n+\n     public boolean optBoolean( int index, boolean defaultValue )\n     {\n         try\n@@ -530,6 +568,7 @@ public class JSONArray\n      * @param index The index must be between 0 and length() - 1.\n      * @return The value.\n      */\n+\n     public double optDouble( int index )\n     {\n         return optDouble( index, Double.NaN );\n@@ -544,6 +583,7 @@ public class JSONArray\n      * @param defaultValue The default value.\n      * @return The value.\n      */\n+\n     public double optDouble( int index, double defaultValue )\n     {\n         try\n@@ -564,6 +604,7 @@ public class JSONArray\n      * @param index The index must be between 0 and length() - 1.\n      * @return The value.\n      */\n+\n     public int optInt( int index )\n     {\n         return optInt( index, 0 );\n@@ -578,6 +619,7 @@ public class JSONArray\n      * @param defaultValue The default value.\n      * @return The value.\n      */\n+\n     public int optInt( int index, int defaultValue )\n     {\n         try\n@@ -597,6 +639,7 @@ public class JSONArray\n      * @return A JSONArray value, or null if the index has no value,\n      * or if the value is not a JSONArray.\n      */\n+\n     public JSONArray optJSONArray( int index )\n     {\n         Object o = opt( index );\n@@ -611,6 +654,7 @@ public class JSONArray\n      * @param index The index must be between 0 and length() - 1.\n      * @return A JSONObject value.\n      */\n+\n     public JSONObject optJSONObject( int index )\n     {\n         Object o = opt( index );\n@@ -625,6 +669,7 @@ public class JSONArray\n      * @param index The index must be between 0 and length() - 1.\n      * @return The value.\n      */\n+\n     public long optLong( int index )\n     {\n         return optLong( index, 0 );\n@@ -639,6 +684,7 @@ public class JSONArray\n      * @param defaultValue The default value.\n      * @return The value.\n      */\n+\n     public long optLong( int index, long defaultValue )\n     {\n         try\n@@ -659,6 +705,7 @@ public class JSONArray\n      * @param index The index must be between 0 and length() - 1.\n      * @return A String value.\n      */\n+\n     public String optString( int index )\n     {\n         return optString( index, \"\" );\n@@ -672,6 +719,7 @@ public class JSONArray\n      * @param defaultValue The default value.\n      * @return A String value.\n      */\n+\n     public String optString( int index, String defaultValue )\n     {\n         Object o = opt( index );\n@@ -684,6 +732,7 @@ public class JSONArray\n      * @param value A boolean value.\n      * @return this.\n      */\n+\n     public JSONArray put( boolean value )\n     {\n         put( value ? Boolean.TRUE : Boolean.FALSE );\n@@ -697,6 +746,7 @@ public class JSONArray\n      * @param value A Collection value.\n      * @return this.\n      */\n+\n     public JSONArray put( Collection value )\n     {\n         put( new JSONArray( value ) );\n@@ -710,6 +760,7 @@ public class JSONArray\n      * @return this.\n      * @throws JSONException if the value is not finite.\n      */\n+\n     public JSONArray put( double value ) throws JSONException\n     {\n         Double d = value;\n@@ -724,6 +775,7 @@ public class JSONArray\n      * @param value An int value.\n      * @return this.\n      */\n+\n     public JSONArray put( int value )\n     {\n         put( Integer.valueOf( value ) );\n@@ -736,6 +788,7 @@ public class JSONArray\n      * @param value A long value.\n      * @return this.\n      */\n+\n     public JSONArray put( long value )\n     {\n         put( Long.valueOf( value ) );\n@@ -749,6 +802,7 @@ public class JSONArray\n      * @param value A Map value.\n      * @return this.\n      */\n+\n     public JSONArray put( Map value )\n     {\n         put( new JSONObject( value ) );\n@@ -763,6 +817,7 @@ public class JSONArray\n      * JSONObject.NULL object.\n      * @return this.\n      */\n+\n     public JSONArray put( Object value )\n     {\n         this.myArrayList.add( value );\n@@ -779,6 +834,7 @@ public class JSONArray\n      * @return this.\n      * @throws JSONException If the index is negative.\n      */\n+\n     public JSONArray put( int index, boolean value ) throws JSONException\n     {\n         put( index, value ? Boolean.TRUE : Boolean.FALSE );\n@@ -795,6 +851,7 @@ public class JSONArray\n      * @throws JSONException If the index is negative or if the value is\n      * not finite.\n      */\n+\n     public JSONArray put( int index, Collection value ) throws JSONException\n     {\n         put( index, new JSONArray( value ) );\n@@ -812,6 +869,7 @@ public class JSONArray\n      * @throws JSONException If the index is negative or if the value is\n      * not finite.\n      */\n+\n     public JSONArray put( int index, double value ) throws JSONException\n     {\n         put( index, new Double( value ) );\n@@ -828,6 +886,7 @@ public class JSONArray\n      * @return this.\n      * @throws JSONException If the index is negative.\n      */\n+\n     public JSONArray put( int index, int value ) throws JSONException\n     {\n         put( index, Integer.valueOf( value ) );\n@@ -844,6 +903,7 @@ public class JSONArray\n      * @return this.\n      * @throws JSONException If the index is negative.\n      */\n+\n     public JSONArray put( int index, long value ) throws JSONException\n     {\n         put( index, Long.valueOf( value ) );\n@@ -860,6 +920,7 @@ public class JSONArray\n      * @throws JSONException If the index is negative or if the the value is\n      * an invalid number.\n      */\n+\n     public JSONArray put( int index, Map value ) throws JSONException\n     {\n         put( index, new JSONObject( value ) );\n@@ -879,6 +940,7 @@ public class JSONArray\n      * @throws JSONException If the index is negative or if the the value is\n      * an invalid number.\n      */\n+\n     public JSONArray put( int index, Object value ) throws JSONException\n     {\n         JSONObject.testValidity( value );\n@@ -886,18 +948,21 @@ public class JSONArray\n         {\n             throw new JSONException( \"JSONArray[\" + index + \"] not found.\" );\n         }\n+\n         if ( index < length() )\n         {\n             this.myArrayList.set( index, value );\n         }\n         else\n         {\n-            while ( index != length() )\n+            while( index != length())\n             {\n                 put( JSONObject.NULL );\n             }\n+\n             put( value );\n         }\n+\n         return this;\n     }\n \n@@ -908,6 +973,7 @@ public class JSONArray\n      * @return The value that was associated with the index,\n      * or null if there was no value.\n      */\n+\n     public Object remove( int index )\n     {\n         Object o = opt( index );\n@@ -925,17 +991,20 @@ public class JSONArray\n      * has no values.\n      * @throws JSONException If any of the names are null.\n      */\n+\n     public JSONObject toJSONObject( JSONArray names ) throws JSONException\n     {\n-        if ( names == null || names.length() == 0 || length() == 0 )\n+        if ( names == null|| names.length() == 0|| length() == 0 )\n         {\n             return null;\n         }\n+\n         JSONObject jo = new JSONObject();\n         for ( int i = 0; i < names.length(); i += 1 )\n         {\n             jo.put( names.getString( i ), this.opt( i ) );\n         }\n+\n         return jo;\n     }\n \n@@ -950,12 +1019,13 @@ public class JSONArray\n      * @return a printable, displayable, transmittable\n      * representation of the array.\n      */\n+\n     @Override\n     public String toString()\n     {\n         try\n         {\n-            return '[' + join( \",\" ) + ']';\n+            return '['+ join( \",\" ) + ']';\n         }\n         catch ( Exception e )\n         {\n@@ -975,6 +1045,7 @@ public class JSONArray\n      * with <code>]</code>&nbsp;<small>(right bracket)</small>.\n      * @throws JSONException\n      */\n+\n     public String toString( int indentFactor ) throws JSONException\n     {\n         return toString( indentFactor, 0 );\n@@ -991,6 +1062,7 @@ public class JSONArray\n      * representation of the array.\n      * @throws JSONException\n      */\n+\n     String toString( int indentFactor, int indent ) throws JSONException\n     {\n         int len = length();\n@@ -998,6 +1070,7 @@ public class JSONArray\n         {\n             return \"[]\";\n         }\n+\n         int i;\n         StringBuilder sb = new StringBuilder( \"[\" );\n         if ( len == 1 )\n@@ -1014,18 +1087,22 @@ public class JSONArray\n                 {\n                     sb.append( \",\\n\" );\n                 }\n+\n                 for ( int j = 0; j < newindent; j += 1 )\n                 {\n                     sb.append( ' ' );\n                 }\n+\n                 sb.append( JSONObject.valueToString( this.myArrayList.get( i ), indentFactor, newindent ) );\n             }\n+\n             sb.append( '\\n' );\n             for ( i = 0; i < indent; i += 1 )\n             {\n                 sb.append( ' ' );\n             }\n         }\n+\n         sb.append( ']' );\n         return sb.toString();\n     }\n@@ -1039,36 +1116,39 @@ public class JSONArray\n      * @return The writer.\n      * @throws JSONException\n      */\n+\n     public Writer write( Writer writer ) throws JSONException\n     {\n         try\n         {\n             boolean b = false;\n             int len = length();\n-\n             writer.write( '[' );\n-\n             for ( int i = 0; i < len; i += 1 )\n             {\n                 if ( b )\n                 {\n                     writer.write( ',' );\n                 }\n+\n                 Object v = this.myArrayList.get( i );\n                 if ( v instanceof JSONObject )\n                 {\n                     ((JSONObject) v).write( writer );\n                 }\n-                else if ( v instanceof JSONArray )\n+                else\n+                if ( v instanceof JSONArray )\n                 {\n                     ((JSONArray) v).write( writer );\n                 }\n                 else\n-                {\n-                    writer.write( JSONObject.valueToString( v ) );\n-                }\n+                    {\n+                        writer.write( JSONObject.valueToString( v ) );\n+                    }\n+\n                 b = true;\n             }\n+\n             writer.write( ']' );\n             return writer;\n         }\n@@ -1077,4 +1157,4 @@ public class JSONArray\n             throw new JSONException( e );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 116
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}