{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2659",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2659/LuceneDocumentStructure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2659/LuceneDocumentStructure.java\nindex f2ee65311d9..d7221f61b5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2659/LuceneDocumentStructure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2659/LuceneDocumentStructure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -56,286 +57,285 @@ import static org.apache.lucene.document.Field.Store.YES;\n \n public class LuceneDocumentStructure\n {\n-    private static final boolean USE_LUCENE_STANDARD_PREFIX_QUERY =\n-            FeatureToggles.flag( LuceneDocumentStructure.class, \"lucene.standard.prefix.query\", false );\n-\n-    public static final String NODE_ID_KEY = \"id\";\n-\n-    private static final ThreadLocal<DocWithId> perThreadDocument = ThreadLocal.withInitial( DocWithId::new );\n-    public static final String DELIMITER = \"\\u001F\";\n-\n-    private LuceneDocumentStructure()\n-    {\n-    }\n-\n-    private static DocWithId reuseDocument( long nodeId )\n+  private static final boolean USE_LUCENE_STANDARD_PREFIX_QUERY =\n+      FeatureToggles.flag(LuceneDocumentStructure.class, \"lucene.standard.prefix.query\", false);\n+\n+  public static final String NODE_ID_KEY = \"id\";\n+\n+  private static final ThreadLocal<DocWithId> perThreadDocument = ThreadLocal.withInitial(DocWithId::new);\n+  public static final String DELIMITER = \"\\u001F\";\n+\n+  private LuceneDocumentStructure()\n+  {\n+  }\n+\n+  private static DocWithId reuseDocument(long nodeId)\n+  {\n+    DocWithId doc = perThreadDocument.get();\n+    doc.setId(nodeId);\n+    return doc;\n+  }\n+\n+  public static Document documentRepresentingProperties(long nodeId, Value... values)\n+  {\n+    DocWithId document = reuseDocument(nodeId);\n+    document.setValues(values);\n+    return document.document;\n+  }\n+\n+  public static String encodedStringValuesForSampling(Value... values)\n+  {\n+    StringBuilder sb = new StringBuilder();\n+    String sep = \"\";\n+    for (Value value : values)\n     {\n-        DocWithId doc = perThreadDocument.get();\n-        doc.setId( nodeId );\n-        return doc;\n+      sb.append(sep);\n+      sep = DELIMITER;\n+      ValueEncoding encoding = ValueEncoding.forValue(value);\n+      sb.append(encoding.encodeField(encoding.key(), value).stringValue());\n     }\n-\n-    public static Document documentRepresentingProperties( long nodeId, Value... values )\n+    return sb.toString();\n+  }\n+\n+  public static MatchAllDocsQuery newScanQuery()\n+  {\n+    return new MatchAllDocsQuery();\n+  }\n+\n+  public static Query newSeekQuery(Value... values)\n+  {\n+    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n+    for (int i = 0; i < values.length; i++)\n     {\n-        DocWithId document = reuseDocument( nodeId );\n-        document.setValues( values );\n-        return document.document;\n+      ValueEncoding encoding = ValueEncoding.forValue(values[i]);\n+      builder.add(encoding.encodeQuery(values[i], i), BooleanClause.Occur.MUST);\n     }\n-\n-    public static String encodedStringValuesForSampling( Value... values )\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Range queries are always inclusive, in order to do exclusive range queries the result must be filtered after the\n+   * fact. The reason we can't do inclusive range queries is that longs are coerced to doubles in the index.\n+   */\n+  public static NumericRangeQuery<Double> newInclusiveNumericRangeSeekQuery(Number lower, Number upper)\n+  {\n+    Double min = lower != null ? lower.doubleValue() : null;\n+    Double max = upper != null ? upper.doubleValue() : null;\n+    return NumericRangeQuery.newDoubleRange(ValueEncoding.Number.key(0), min, max, true, true);\n+  }\n+\n+  public static Query newRangeSeekByStringQuery(String lower, boolean includeLower,\n+                                                String upper, boolean includeUpper)\n+  {\n+    boolean includeLowerBoundary = StringUtils.EMPTY.equals(lower) || includeLower;\n+    boolean includeUpperBoundary = StringUtils.EMPTY.equals(upper) || includeUpper;\n+    TermRangeQuery termRangeQuery = TermRangeQuery.newStringRange(ValueEncoding.String.key(0), lower, upper,\n+        includeLowerBoundary, includeUpperBoundary);\n+\n+    if ((includeLowerBoundary != includeLower) || (includeUpperBoundary != includeUpper))\n     {\n-        StringBuilder sb = new StringBuilder();\n-        String sep = \"\";\n-        for ( Value value : values )\n-        {\n-            sb.append( sep );\n-            sep = DELIMITER;\n-            ValueEncoding encoding = ValueEncoding.forValue( value );\n-            sb.append( encoding.encodeField( encoding.key(), value ).stringValue() );\n-        }\n-        return sb.toString();\n+      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n+      builder.setDisableCoord(true);\n+      if (includeLowerBoundary != includeLower)\n+      {\n+        builder.add(new TermQuery(new Term(ValueEncoding.String.key(0), lower)), BooleanClause.Occur\n+            .MUST_NOT);\n+      }\n+      if (includeUpperBoundary != includeUpper)\n+      {\n+        builder.add(new TermQuery(new Term(ValueEncoding.String.key(0), upper)), BooleanClause.Occur\n+            .MUST_NOT);\n+      }\n+      builder.add(termRangeQuery, BooleanClause.Occur.FILTER);\n+      return new ConstantScoreQuery(builder.build());\n     }\n-\n-    public static MatchAllDocsQuery newScanQuery()\n+    return termRangeQuery;\n+  }\n+\n+  public static Query newWildCardStringQuery(String searchFor)\n+  {\n+    String searchTerm = QueryParser.escape(searchFor);\n+    Term term = new Term(ValueEncoding.String.key(0), \"*\" + searchTerm + \"*\");\n+\n+    return new WildcardQuery(term);\n+  }\n+\n+  public static Query newRangeSeekByPrefixQuery(String prefix)\n+  {\n+    Term term = new Term(ValueEncoding.String.key(0), prefix);\n+    return USE_LUCENE_STANDARD_PREFIX_QUERY ? new PrefixQuery(term) :\n+        new PrefixMultiTermsQuery(term);\n+  }\n+\n+  public static Query newSuffixStringQuery(String suffix)\n+  {\n+    String searchTerm = QueryParser.escape(suffix);\n+    Term term = new Term(ValueEncoding.String.key(0), \"*\" + searchTerm);\n+\n+    return new WildcardQuery(term);\n+  }\n+\n+  public static Term newTermForChangeOrRemove(long nodeId)\n+  {\n+    return new Term(NODE_ID_KEY, \"\" + nodeId);\n+  }\n+\n+  public static long getNodeId(Document from)\n+  {\n+    return Long.parseLong(from.get(NODE_ID_KEY));\n+  }\n+\n+  /**\n+   * Filters the given {@link Terms terms} to include only terms that were created using fields from\n+   * {@link ValueEncoding#encodeField(String, Value)}. Internal lucene terms like those created for indexing numeric values\n+   * (see javadoc for {@link NumericRangeQuery} class) are skipped. In other words this method returns\n+   * {@link TermsEnum} over all terms for the given field that were created using {@link ValueEncoding}.\n+   *\n+   * @param terms    the terms to be filtered\n+   * @param fieldKey the corresponding {@link ValueEncoding#key(int) field key}\n+   * @return terms enum over all inserted terms\n+   * @throws IOException if it is not possible to obtain {@link TermsEnum}\n+   * @see NumericRangeQuery\n+   * @see org.apache.lucene.analysis.NumericTokenStream\n+   * @see NumericUtils#PRECISION_STEP_DEFAULT\n+   * @see NumericUtils#filterPrefixCodedLongs(TermsEnum)\n+   */\n+  public static TermsEnum originalTerms(Terms terms, String fieldKey) throws IOException\n+  {\n+    TermsEnum termsEnum = terms.iterator();\n+    return ValueEncoding.forKey(fieldKey) == ValueEncoding.Number\n+        ? NumericUtils.filterPrefixCodedLongs(termsEnum)\n+        : termsEnum;\n+  }\n+\n+  /**\n+   * Simple implementation of prefix query that mimics old lucene way of handling prefix queries.\n+   * According to benchmarks this implementation is faster then\n+   * {@link org.apache.lucene.search.PrefixQuery} because we do not construct automaton  which is\n+   * extremely expensive.\n+   */\n+  private static class PrefixMultiTermsQuery extends MultiTermQuery\n+  {\n+    private Term term;\n+\n+    PrefixMultiTermsQuery(Term term)\n     {\n-        return new MatchAllDocsQuery();\n+      super(term.field());\n+      this.term = term;\n     }\n \n-    public static Query newSeekQuery( Value... values )\n+    @Override\n+    protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException\n     {\n-        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-        for ( int i = 0; i < values.length; i++ )\n-        {\n-            ValueEncoding encoding = ValueEncoding.forValue( values[i] );\n-            builder.add( encoding.encodeQuery( values[i], i ), BooleanClause.Occur.MUST );\n-        }\n-        return builder.build();\n+      return term.bytes().length == 0 ? terms.iterator() : new PrefixTermsEnum(terms.iterator(), term.bytes());\n     }\n \n-    /**\n-     * Range queries are always inclusive, in order to do exclusive range queries the result must be filtered after the\n-     * fact. The reason we can't do inclusive range queries is that longs are coerced to doubles in the index.\n-     */\n-    public static NumericRangeQuery<Double> newInclusiveNumericRangeSeekQuery( Number lower, Number upper )\n+    @Override\n+    public String toString(String field)\n     {\n-        Double min = lower != null ? lower.doubleValue() : null;\n-        Double max = upper != null ? upper.doubleValue() : null;\n-        return NumericRangeQuery.newDoubleRange( ValueEncoding.Number.key( 0 ), min, max, true, true );\n+      return getClass().getSimpleName() + \", term:\" + term + \", field:\" + field;\n     }\n \n-    public static Query newRangeSeekByStringQuery( String lower, boolean includeLower,\n-            String upper, boolean includeUpper )\n+    private static class PrefixTermsEnum extends FilteredTermsEnum\n     {\n-        boolean includeLowerBoundary = StringUtils.EMPTY.equals( lower ) || includeLower;\n-        boolean includeUpperBoundary = StringUtils.EMPTY.equals( upper ) || includeUpper;\n-        TermRangeQuery termRangeQuery = TermRangeQuery.newStringRange( ValueEncoding.String.key( 0 ), lower, upper,\n-                includeLowerBoundary, includeUpperBoundary );\n-\n-        if ( (includeLowerBoundary != includeLower) || (includeUpperBoundary != includeUpper) )\n-        {\n-            BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-            builder.setDisableCoord(true);\n-            if ( includeLowerBoundary != includeLower )\n-            {\n-                builder.add( new TermQuery( new Term( ValueEncoding.String.key( 0 ), lower ) ), BooleanClause.Occur\n-                        .MUST_NOT );\n-            }\n-            if ( includeUpperBoundary != includeUpper )\n-            {\n-                builder.add( new TermQuery( new Term( ValueEncoding.String.key( 0 ), upper ) ), BooleanClause.Occur\n-                        .MUST_NOT );\n-            }\n-            builder.add( termRangeQuery, BooleanClause.Occur.FILTER );\n-            return new ConstantScoreQuery( builder.build() );\n-        }\n-        return termRangeQuery;\n+      private BytesRef prefix;\n+\n+      PrefixTermsEnum(TermsEnum termEnum, BytesRef prefix)\n+      {\n+        super(termEnum);\n+        this.prefix = prefix;\n+        setInitialSeekTerm(this.prefix);\n+      }\n+\n+      @Override\n+      protected AcceptStatus accept(BytesRef term)\n+      {\n+        return StringHelper.startsWith(term, prefix) ? AcceptStatus.YES : AcceptStatus.END;\n+      }\n     }\n+  }\n \n-    public static Query newWildCardStringQuery( String searchFor )\n-    {\n-        String searchTerm = QueryParser.escape( searchFor );\n-        Term term = new Term( ValueEncoding.String.key( 0 ), \"*\" + searchTerm + \"*\" );\n+  public static Field encodeValueField(Value value)\n+  {\n+    ValueEncoding encoding = ValueEncoding.forValue(value);\n+    return encoding.encodeField(encoding.key(), value);\n+  }\n \n-        return new WildcardQuery( term );\n-    }\n+  public static boolean useFieldForUniquenessVerification(String fieldName)\n+  {\n+    return !LuceneDocumentStructure.NODE_ID_KEY.equals(fieldName) &&\n+        ValueEncoding.fieldPropertyNumber(fieldName) == 0;\n+  }\n \n-    public static Query newRangeSeekByPrefixQuery( String prefix )\n-    {\n-        Term term = new Term( ValueEncoding.String.key( 0 ), prefix );\n-        return USE_LUCENE_STANDARD_PREFIX_QUERY ? new PrefixQuery( term ) :\n-                                     new PrefixMultiTermsQuery( term );\n-    }\n+  private static class DocWithId\n+  {\n+    private final Document document;\n \n-    public static Query newSuffixStringQuery( String suffix )\n-    {\n-        String searchTerm = QueryParser.escape( suffix );\n-        Term term = new Term( ValueEncoding.String.key( 0 ), \"*\" + searchTerm );\n+    private final Field idField;\n+    private final Field idValueField;\n \n-        return new WildcardQuery( term );\n-    }\n+    private Field[] reusableValueFields = new Field[0];\n \n-    public static Term newTermForChangeOrRemove( long nodeId )\n+    private DocWithId()\n     {\n-        return new Term( NODE_ID_KEY, \"\" + nodeId );\n+      idField = new StringField(NODE_ID_KEY, \"\", YES);\n+      idValueField = new NumericDocValuesField(NODE_ID_KEY, 0L);\n+      document = new Document();\n+      document.add(idField);\n+      document.add(idValueField);\n     }\n \n-    public static long getNodeId( Document from )\n+    private void setId(long id)\n     {\n-        return Long.parseLong( from.get( NODE_ID_KEY ) );\n+      idField.setStringValue(Long.toString(id));\n+      idValueField.setLongValue(id);\n     }\n \n-    /**\n-     * Filters the given {@link Terms terms} to include only terms that were created using fields from\n-     * {@link ValueEncoding#encodeField(String, Value)}. Internal lucene terms like those created for indexing numeric values\n-     * (see javadoc for {@link NumericRangeQuery} class) are skipped. In other words this method returns\n-     * {@link TermsEnum} over all terms for the given field that were created using {@link ValueEncoding}.\n-     *\n-     * @param terms the terms to be filtered\n-     * @param fieldKey the corresponding {@link ValueEncoding#key(int) field key}\n-     * @return terms enum over all inserted terms\n-     * @throws IOException if it is not possible to obtain {@link TermsEnum}\n-     * @see NumericRangeQuery\n-     * @see org.apache.lucene.analysis.NumericTokenStream\n-     * @see NumericUtils#PRECISION_STEP_DEFAULT\n-     * @see NumericUtils#filterPrefixCodedLongs(TermsEnum)\n-     */\n-    public static TermsEnum originalTerms( Terms terms, String fieldKey ) throws IOException\n+    private void setValues(Value... values)\n     {\n-        TermsEnum termsEnum = terms.iterator();\n-        return ValueEncoding.forKey( fieldKey ) == ValueEncoding.Number\n-               ? NumericUtils.filterPrefixCodedLongs( termsEnum )\n-               : termsEnum;\n+      removeAllValueFields();\n+      int neededLength = values.length * ValueEncoding.values().length;\n+      if (reusableValueFields.length < neededLength)\n+      {\n+        reusableValueFields = new Field[neededLength];\n+      }\n+\n+      for (int i = 0; i < values.length; i++)\n+      {\n+        Field reusableField = getFieldWithValue(i, values[i]);\n+        document.add(reusableField);\n+      }\n     }\n \n-    /**\n-     * Simple implementation of prefix query that mimics old lucene way of handling prefix queries.\n-     * According to benchmarks this implementation is faster then\n-     * {@link org.apache.lucene.search.PrefixQuery} because we do not construct automaton  which is\n-     * extremely expensive.\n-     */\n-    private static class PrefixMultiTermsQuery extends MultiTermQuery\n+    private void removeAllValueFields()\n     {\n-        private Term term;\n-\n-        PrefixMultiTermsQuery( Term term )\n-        {\n-            super( term.field() );\n-            this.term = term;\n-        }\n-\n-        @Override\n-        protected TermsEnum getTermsEnum( Terms terms, AttributeSource atts ) throws IOException\n-        {\n-            return term.bytes().length == 0 ? terms.iterator() : new PrefixTermsEnum( terms.iterator(), term.bytes() );\n-        }\n-\n-        @Override\n-        public String toString( String field )\n+      Iterator<IndexableField> it = document.getFields().iterator();\n+      while (it.hasNext())\n+      {\n+        IndexableField field = it.next();\n+        String fieldName = field.name();\n+        if (!fieldName.equals(NODE_ID_KEY))\n         {\n-            return getClass().getSimpleName() + \", term:\" + term + \", field:\" + field;\n+          it.remove();\n         }\n-\n-        private static class PrefixTermsEnum extends FilteredTermsEnum\n-        {\n-            private BytesRef prefix;\n-\n-            PrefixTermsEnum( TermsEnum termEnum, BytesRef prefix )\n-            {\n-                super( termEnum );\n-                this.prefix = prefix;\n-                setInitialSeekTerm( this.prefix );\n-            }\n-\n-            @Override\n-            protected AcceptStatus accept( BytesRef term )\n-            {\n-                return StringHelper.startsWith( term, prefix ) ? AcceptStatus.YES : AcceptStatus.END;\n-            }\n-        }\n-    }\n-\n-    public static Field encodeValueField( Value value )\n-    {\n-        ValueEncoding encoding = ValueEncoding.forValue( value );\n-        return encoding.encodeField( encoding.key(), value );\n-    }\n-\n-    public static boolean useFieldForUniquenessVerification( String fieldName )\n-    {\n-        return !LuceneDocumentStructure.NODE_ID_KEY.equals( fieldName ) &&\n-                ValueEncoding.fieldPropertyNumber( fieldName ) == 0;\n+      }\n     }\n \n-    private static class DocWithId\n+    private Field getFieldWithValue(int propertyNumber, Value value)\n     {\n-        private final Document document;\n-\n-        private final Field idField;\n-        private final Field idValueField;\n-\n-        private Field[] reusableValueFields = new Field[0];\n-\n-        private DocWithId()\n-        {\n-            idField = new StringField( NODE_ID_KEY, \"\", YES );\n-            idValueField = new NumericDocValuesField( NODE_ID_KEY, 0L );\n-            document = new Document();\n-            document.add( idField );\n-            document.add( idValueField );\n-        }\n-\n-        private void setId( long id )\n-        {\n-            idField.setStringValue( Long.toString( id ) );\n-            idValueField.setLongValue( id );\n-        }\n-\n-        private void setValues( Value... values )\n-        {\n-            removeAllValueFields();\n-            int neededLength = values.length * ValueEncoding.values().length;\n-            if ( reusableValueFields.length < neededLength )\n-            {\n-                reusableValueFields = new Field[neededLength];\n-            }\n-\n-            for ( int i = 0; i < values.length; i++ )\n-            {\n-                Field reusableField = getFieldWithValue( i, values[i] );\n-                document.add( reusableField );\n-            }\n-        }\n-\n-        private void removeAllValueFields()\n-        {\n-            Iterator<IndexableField> it = document.getFields().iterator();\n-            while ( it.hasNext() )\n-            {\n-                IndexableField field = it.next();\n-                String fieldName = field.name();\n-                if ( !fieldName.equals( NODE_ID_KEY ) )\n-                {\n-                    it.remove();\n-                }\n-            }\n-        }\n-\n-        private Field getFieldWithValue( int propertyNumber, Value value )\n-        {\n-            ValueEncoding encoding = ValueEncoding.forValue( value );\n-            int reuseId = propertyNumber * ValueEncoding.values().length + encoding.ordinal();\n-            String key = encoding.key( propertyNumber );\n-            Field reusableField = reusableValueFields[reuseId];\n-            if ( reusableField == null )\n-            {\n-                reusableField = encoding.encodeField( key, value );\n-                reusableValueFields[reuseId] = reusableField;\n-            }\n-            else\n-            {\n-                encoding.setFieldValue( value, reusableField );\n-            }\n-            return reusableField;\n-        }\n+      ValueEncoding encoding = ValueEncoding.forValue(value);\n+      int reuseId = propertyNumber * ValueEncoding.values().length + encoding.ordinal();\n+      String key = encoding.key(propertyNumber);\n+      Field reusableField = reusableValueFields[reuseId];\n+      if (reusableField == null)\n+      {\n+        reusableField = encoding.encodeField(key, value);\n+        reusableValueFields[reuseId] = reusableField;\n+      } else\n+      {\n+        encoding.setFieldValue(value, reusableField);\n+      }\n+      return reusableField;\n     }\n+  }\n }\n",
            "diff_size": 387
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "261",
                    "column": "73",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2659/LuceneDocumentStructure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2659/LuceneDocumentStructure.java\nindex f2ee65311d9..57d1356615e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2659/LuceneDocumentStructure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2659/LuceneDocumentStructure.java\n@@ -56,10 +56,9 @@ import static org.apache.lucene.document.Field.Store.YES;\n \n public class LuceneDocumentStructure\n {\n-    private static final boolean USE_LUCENE_STANDARD_PREFIX_QUERY =\n-            FeatureToggles.flag( LuceneDocumentStructure.class, \"lucene.standard.prefix.query\", false );\n+    private static final boolean USE_LUCENE_STANDARD_PREFIX_QUERY = FeatureToggles.flag( LuceneDocumentStructure.class, \"lucene.standard.prefix.query\", false );\n \n-    public static final String NODE_ID_KEY = \"id\";\n+public static final String NODE_ID_KEY = \"id\";\n \n     private static final ThreadLocal<DocWithId> perThreadDocument = ThreadLocal.withInitial( DocWithId::new );\n     public static final String DELIMITER = \"\\u001F\";\n@@ -93,7 +92,8 @@ public class LuceneDocumentStructure\n             ValueEncoding encoding = ValueEncoding.forValue( value );\n             sb.append( encoding.encodeField( encoding.key(), value ).stringValue() );\n         }\n-        return sb.toString();\n+\n+return sb.toString();\n     }\n \n     public static MatchAllDocsQuery newScanQuery()\n@@ -109,7 +109,8 @@ public class LuceneDocumentStructure\n             ValueEncoding encoding = ValueEncoding.forValue( values[i] );\n             builder.add( encoding.encodeQuery( values[i], i ), BooleanClause.Occur.MUST );\n         }\n-        return builder.build();\n+\n+return builder.build();\n     }\n \n     /**\n@@ -130,48 +131,44 @@ public class LuceneDocumentStructure\n         boolean includeUpperBoundary = StringUtils.EMPTY.equals( upper ) || includeUpper;\n         TermRangeQuery termRangeQuery = TermRangeQuery.newStringRange( ValueEncoding.String.key( 0 ), lower, upper,\n                 includeLowerBoundary, includeUpperBoundary );\n-\n-        if ( (includeLowerBoundary != includeLower) || (includeUpperBoundary != includeUpper) )\n+if ( (includeLowerBoundary != includeLower) || (includeUpperBoundary != includeUpper) )\n         {\n             BooleanQuery.Builder builder = new BooleanQuery.Builder();\n             builder.setDisableCoord(true);\n             if ( includeLowerBoundary != includeLower )\n             {\n-                builder.add( new TermQuery( new Term( ValueEncoding.String.key( 0 ), lower ) ), BooleanClause.Occur\n-                        .MUST_NOT );\n+                builder.add( new TermQuery( new Term( ValueEncoding.String.key( 0 ), lower ) ), BooleanClause.Occur.MUST_NOT );\n             }\n-            if ( includeUpperBoundary != includeUpper )\n+\n+if ( includeUpperBoundary != includeUpper )\n             {\n-                builder.add( new TermQuery( new Term( ValueEncoding.String.key( 0 ), upper ) ), BooleanClause.Occur\n-                        .MUST_NOT );\n+                builder.add( new TermQuery( new Term( ValueEncoding.String.key( 0 ), upper ) ), BooleanClause.Occur.MUST_NOT );\n             }\n             builder.add( termRangeQuery, BooleanClause.Occur.FILTER );\n             return new ConstantScoreQuery( builder.build() );\n         }\n-        return termRangeQuery;\n+\n+return termRangeQuery;\n     }\n \n     public static Query newWildCardStringQuery( String searchFor )\n     {\n         String searchTerm = QueryParser.escape( searchFor );\n         Term term = new Term( ValueEncoding.String.key( 0 ), \"*\" + searchTerm + \"*\" );\n-\n-        return new WildcardQuery( term );\n+return new WildcardQuery( term );\n     }\n \n     public static Query newRangeSeekByPrefixQuery( String prefix )\n     {\n         Term term = new Term( ValueEncoding.String.key( 0 ), prefix );\n-        return USE_LUCENE_STANDARD_PREFIX_QUERY ? new PrefixQuery( term ) :\n-                                     new PrefixMultiTermsQuery( term );\n+        return USE_LUCENE_STANDARD_PREFIX_QUERY ? new PrefixQuery( term ) : new PrefixMultiTermsQuery( term );\n     }\n \n     public static Query newSuffixStringQuery( String suffix )\n     {\n         String searchTerm = QueryParser.escape( suffix );\n         Term term = new Term( ValueEncoding.String.key( 0 ), \"*\" + searchTerm );\n-\n-        return new WildcardQuery( term );\n+return new WildcardQuery( term );\n     }\n \n     public static Term newTermForChangeOrRemove( long nodeId )\n@@ -202,9 +199,7 @@ public class LuceneDocumentStructure\n     public static TermsEnum originalTerms( Terms terms, String fieldKey ) throws IOException\n     {\n         TermsEnum termsEnum = terms.iterator();\n-        return ValueEncoding.forKey( fieldKey ) == ValueEncoding.Number\n-               ? NumericUtils.filterPrefixCodedLongs( termsEnum )\n-               : termsEnum;\n+        return ValueEncoding.forKey( fieldKey ) == ValueEncoding.Number ? NumericUtils.filterPrefixCodedLongs( termsEnum ) : termsEnum;\n     }\n \n     /**\n@@ -243,7 +238,8 @@ public class LuceneDocumentStructure\n             {\n                 super( termEnum );\n                 this.prefix = prefix;\n-                setInitialSeekTerm( this.prefix );\n+\n+setInitialSeekTerm( this.prefix );\n             }\n \n             @Override\n@@ -262,8 +258,7 @@ public class LuceneDocumentStructure\n \n     public static boolean useFieldForUniquenessVerification( String fieldName )\n     {\n-        return !LuceneDocumentStructure.NODE_ID_KEY.equals( fieldName ) &&\n-                ValueEncoding.fieldPropertyNumber( fieldName ) == 0;\n+        return !LuceneDocumentStructure.NODE_ID_KEY.equals( fieldName ) &&ValueEncoding.fieldPropertyNumber( fieldName ) == 0;\n     }\n \n     private static class DocWithId\n@@ -335,7 +330,8 @@ public class LuceneDocumentStructure\n             {\n                 encoding.setFieldValue( value, reusableField );\n             }\n-            return reusableField;\n+\n+return reusableField;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}