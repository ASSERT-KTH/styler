{
    "project_name": "Angel-ML-angel",
    "error_id": "567",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/567/ChannelPool2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/567/ChannelPool2.java\nindex 3f8ef960dff..c2763f1b4b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/567/ChannelPool2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/567/ChannelPool2.java\n@@ -93,10 +93,10 @@ public class ChannelPool2 {\n    * @throws TimeoutException\n    */\n   public NettyChannel getChannel(long timeoutMs) {\n-    if(channels.isEmpty()) {\n+    if (channels.isEmpty()) {\n       lock.lock();\n       try {\n-        if(channels.isEmpty()) {\n+        if (channels.isEmpty()) {\n           init(timeoutMs);\n         }\n       } finally {\n@@ -108,7 +108,7 @@ public class ChannelPool2 {\n   }\n \n   private void init(long timeoutMs) {\n-    for(int i = 0; i < param.maxActive; i++) {\n+    for (int i = 0; i < param.maxActive; i++) {\n       channels.add(createChannel(timeoutMs));\n     }\n   }\n@@ -198,7 +198,8 @@ public class ChannelPool2 {\n     }\n   }\n \n-  @Override public String toString() {\n+  @Override\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     int usableNum = 0;\n     try {\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/567/ChannelPool2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/567/ChannelPool2.java\nindex 3f8ef960dff..217b724bf2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/567/ChannelPool2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/567/ChannelPool2.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.common.transport;\n \n import com.tencent.angel.common.location.Location;\n@@ -108,7 +107,7 @@ public class ChannelPool2 {\n   }\n \n   private void init(long timeoutMs) {\n-    for(int i = 0; i < param.maxActive; i++) {\n+    for (int i = 0; i < param.maxActive; i++) {\n       channels.add(createChannel(timeoutMs));\n     }\n   }\n@@ -181,10 +180,10 @@ public class ChannelPool2 {\n     try {\n       lock.lock();\n       int size = channels.size();\n-      for (int i = 0; i < size; ) {\n+      for (int i = 0; i < size;) {\n         if (channels.size() > param.minActive && channels.get(i).isUseable()\n             && (ts - channels.get(i).getLastUseTs()) > param.maxIdleTimeMs) {\n-          LOG.info(\"channel \" + channels.get(i) + \" will be closed, as it not use over \"\n+  LOG.info(\"channel \" + channels.get(i) + \" will be closed, as it not use over \"\n               + (ts - channels.get(i).getLastUseTs()) + \" ms\");\n           channels.get(i).close();\n           channels.remove(i);\n@@ -198,7 +197,8 @@ public class ChannelPool2 {\n     }\n   }\n \n-  @Override public String toString() {\n+  @Override\n+public String toString() {\n     StringBuilder sb = new StringBuilder();\n     int usableNum = 0;\n     try {\n@@ -219,4 +219,4 @@ public class ChannelPool2 {\n     sb.append(\"channelToken=\").append(channelToken);\n     return sb.toString();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/567/ChannelPool2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/567/ChannelPool2.java\nindex 3f8ef960dff..a79209c6b82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/567/ChannelPool2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/567/ChannelPool2.java\n@@ -34,7 +34,9 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * Channel pool to a server\n  */\n+\n public class ChannelPool2 {\n+\n   private static final Log LOG = LogFactory.getLog(ChannelPool.class);\n   /**\n    * Active channels in the pool\n@@ -60,7 +62,6 @@ public class ChannelPool2 {\n    * Lock\n    */\n   private final Lock lock;\n-\n   private final Random r = new Random();\n \n   /**\n@@ -75,6 +76,7 @@ public class ChannelPool2 {\n    * @param loc       server location\n    * @param param     pool parameters\n    */\n+\n   public ChannelPool2(Bootstrap bootstrap, Location loc, ChannelPoolParam param) {\n     this.bootstrap = bootstrap;\n     this.loc = loc;\n@@ -92,23 +94,23 @@ public class ChannelPool2 {\n    * @throws InterruptedException\n    * @throws TimeoutException\n    */\n+\n   public NettyChannel getChannel(long timeoutMs) {\n-    if(channels.isEmpty()) {\n+    if (channels.isEmpty()) {\n       lock.lock();\n       try {\n-        if(channels.isEmpty()) {\n+        if (channels.isEmpty()) {\n           init(timeoutMs);\n         }\n       } finally {\n         lock.unlock();\n       }\n     }\n-\n     return channels.get(Math.abs(r.nextInt()) % channels.size());\n   }\n \n   private void init(long timeoutMs) {\n-    for(int i = 0; i < param.maxActive; i++) {\n+    for (int i = 0; i < param.maxActive; i++) {\n       channels.add(createChannel(timeoutMs));\n     }\n   }\n@@ -132,6 +134,7 @@ public class ChannelPool2 {\n    * @throws InterruptedException\n    * @throws TimeoutException\n    */\n+\n   private Channel connect(long timeoutMs) throws InterruptedException, TimeoutException {\n     ChannelFuture connectFuture = bootstrap.connect(loc.getIp(), loc.getPort());\n     int ticks = Math.max(1, (int) (timeoutMs / 10));\n@@ -154,16 +157,17 @@ public class ChannelPool2 {\n    *\n    * @param channel channel\n    */\n-  public void releaseChannel(NettyChannel channel) {\n \n-  }\n+  public void releaseChannel(NettyChannel channel) {}\n \n   /**\n    * Remove all channels in the pool\n    */\n+\n   public void removeChannels() {\n     try {\n       lock.lock();\n+\n       int size = channels.size();\n       for (int i = 0; i < size; i++) {\n         channels.get(i).close();\n@@ -176,16 +180,16 @@ public class ChannelPool2 {\n   /**\n    * Check the idle times of all channels are over limit or not\n    */\n+\n   public void check() {\n     long ts = System.currentTimeMillis();\n     try {\n       lock.lock();\n+\n       int size = channels.size();\n-      for (int i = 0; i < size; ) {\n-        if (channels.size() > param.minActive && channels.get(i).isUseable()\n-            && (ts - channels.get(i).getLastUseTs()) > param.maxIdleTimeMs) {\n-          LOG.info(\"channel \" + channels.get(i) + \" will be closed, as it not use over \"\n-              + (ts - channels.get(i).getLastUseTs()) + \" ms\");\n+      for (int i = 0; i < size;) {\n+        if (channels.size() > param.minActive && channels.get(i).isUseable() && (ts - channels.get(i).getLastUseTs()) > param.maxIdleTimeMs) {\n+          LOG.info(\"channel \" + channels.get(i) + \" will be closed, as it not use over \" + (ts - channels.get(i).getLastUseTs()) + \" ms\");\n           channels.get(i).close();\n           channels.remove(i);\n           size = channels.size();\n@@ -198,11 +202,13 @@ public class ChannelPool2 {\n     }\n   }\n \n-  @Override public String toString() {\n+  @Override\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     int usableNum = 0;\n     try {\n       lock.lock();\n+\n       int size = channels.size();\n       for (int i = 0; i < size; i++) {\n         if (channels.get(i).isUseable()) {\n@@ -212,11 +218,11 @@ public class ChannelPool2 {\n     } finally {\n       lock.unlock();\n     }\n-\n     sb.append(\"loc=\").append(loc).append(\",\");\n     sb.append(\"channel number=\").append(channels.size()).append(\",\");\n     sb.append(\"channel usable number=\").append(usableNum).append(\",\");\n     sb.append(\"channelToken=\").append(channelToken);\n     return sb.toString();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}