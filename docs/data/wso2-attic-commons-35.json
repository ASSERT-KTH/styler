{
    "project_name": "wso2-attic-commons",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "172",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 137).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n                public Long execute(EntityManager em) {\n                    Query query = em.createNamedQuery((getCurrentProject().isNew()) ? \"project.new.countByName\" : \"project.countByName\");\n                    query.setParameter(\"name\", newName);\n                    if (!currentProject.isNew()) {\n                        query.setParameter(\"currentProject\", getCurrentProject());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/35/ProjectManager.java\nindex e3f86b038e3..41dc4a52322 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/35/ProjectManager.java\n@@ -169,8 +169,9 @@ public class ProjectManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((getCurrentProject().isNew()) ? \"project.new.countByName\" : \"project.countByName\");\n-                    query.setParameter(\"name\", newName);\n+                    Query query = em.createNamedQuery((getCurrentProject().isNew()\n+                    ) ? \"project.new.countByName\" : \"project.countByName\");\n+                query.setParameter(\"name\", newName);\n                     if (!currentProject.isNew()) {\n                         query.setParameter(\"currentProject\", getCurrentProject());\n                     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/35/ProjectManager.java\nindex e3f86b038e3..b933086028c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/35/ProjectManager.java\n@@ -65,148 +65,149 @@ import javax.faces.context.ExternalContext;\n @SessionScoped\n public class ProjectManager extends AbstractManager implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    private Project currentProject;\n-\n-    @PostConstruct\n-    public void construct() {\n-        Project project = new Project();\n-        setCurrentProject(project);\n-    }\n-\n-    @PreDestroy\n-    public void destroy() {\n-        currentProject = null;\n-        FacesContext context = FacesContext.getCurrentInstance();\n-        if (null != context) {\n-            ExternalContext extContext = context.getExternalContext();\n-            if (null != extContext) {\n-                Map sessionMap = extContext.getSessionMap();\n-                if (null != sessionMap) {\n-                    sessionMap.remove(\"projectManager\");\n-                }\n-            }\n+  private static final long serialVersionUID = 1L;\n+  private Project currentProject;\n+\n+  @PostConstruct\n+  public void construct() {\n+    Project project = new Project();\n+    setCurrentProject(project);\n+  }\n+\n+  @PreDestroy\n+  public void destroy() {\n+    currentProject = null;\n+    FacesContext context = FacesContext.getCurrentInstance();\n+    if (null != context) {\n+      ExternalContext extContext = context.getExternalContext();\n+      if (null != extContext) {\n+        Map sessionMap = extContext.getSessionMap();\n+        if (null != sessionMap) {\n+          sessionMap.remove(\"projectManager\");\n         }\n+      }\n     }\n-\n-    public String create() {\n-        Project project = new Project();\n-        setCurrentProject(project);\n-        return \"create\";\n-    }\n-\n-    public String save() {\n-        if (getCurrentProject() != null) {\n-            try {\n-                Project merged = doInTransaction(new PersistenceAction<Project>() {\n-\n-                    public Project execute(EntityManager em) {\n-                        Project toSave = getCurrentProject();\n-                        if (toSave.isNew()) {\n-                            em.persist(toSave);\n-                        } else if (!em.contains(currentProject)) {\n-                            return em.merge(toSave);\n-                        }\n-                        return toSave;\n-                    }\n-                });\n-                if (!currentProject.equals(merged)) {\n-                    setCurrentProject(merged);\n-                }\n-            } catch (Exception e) {\n-                getLogger(getClass()).log(Level.SEVERE, \"Error on try to save Project: \" + getCurrentProject(), e);\n-                addMessage(\"Error on try to save Project\", FacesMessage.SEVERITY_ERROR);\n-                return null;\n+  }\n+\n+  public String create() {\n+    Project project = new Project();\n+    setCurrentProject(project);\n+    return \"create\";\n+  }\n+\n+  public String save() {\n+    if (getCurrentProject() != null) {\n+      try {\n+        Project merged = doInTransaction(new PersistenceAction<Project>() {\n+\n+          public Project execute(EntityManager em) {\n+            Project toSave = getCurrentProject();\n+            if (toSave.isNew()) {\n+              em.persist(toSave);\n+            } else if (!em.contains(currentProject)) {\n+              return em.merge(toSave);\n             }\n+            return toSave;\n+          }\n+        });\n+        if (!currentProject.equals(merged)) {\n+          setCurrentProject(merged);\n         }\n-        return \"show\";\n-    }\n-\n-    public String edit(Project project) {\n-        setCurrentProject(project);\n-        // Using implicity navigation, this request come from /projects/show.xhtml and directs to /project/edit.xhtml\n-        return \"edit\";\n+      } catch (Exception e) {\n+        getLogger(getClass()).log(Level.SEVERE, \"Error on try to save Project: \" + getCurrentProject(), e);\n+        addMessage(\"Error on try to save Project\", FacesMessage.SEVERITY_ERROR);\n+        return null;\n+      }\n     }\n-\n-    public String remove(final Project project) {\n-        if (project != null) {\n-            try {\n-                doInTransaction(new PersistenceActionWithoutResult() {\n-\n-                    public void execute(EntityManager em) {\n-                        Query query = em.createNamedQuery(\"task.remove.ByProject\");\n-                        query.setParameter(\"project\", project);\n-                        query.executeUpdate();\n-\n-                        query = em.createNamedQuery(\"story.remove.ByProject\");\n-                        query.setParameter(\"project\", project);\n-                        query.executeUpdate();\n-\n-                        query = em.createNamedQuery(\"sprint.remove.ByProject\");\n-                        query.setParameter(\"project\", project);\n-                        query.executeUpdate();\n-                        \n-                        Object toRemove = em.find(Project.class, project.getId());\n-                        assert(null != toRemove);\n-\n-                        em.remove(toRemove);\n-                    }\n-                });\n-            } catch (Exception e) {\n-                getLogger(getClass()).log(Level.SEVERE, \"Error on try to remove Project: \" + getCurrentProject(), e);\n-                addMessage(\"Error on try to remove Project\", FacesMessage.SEVERITY_ERROR);\n-                return null;\n-            }\n-        }\n-        // Using implicity navigation, this request come from /projects/show.xhtml and directs to /project/show.xhtml\n-        // could be null instead\n-        return \"show\";\n+    return \"show\";\n+  }\n+\n+  public String edit(Project project) {\n+    setCurrentProject(project);\n+    // Using implicity navigation, this request come from /projects/show.xhtml and directs to /project/edit.xhtml\n+    return \"edit\";\n+  }\n+\n+  public String remove(final Project project) {\n+    if (project != null) {\n+      try {\n+        doInTransaction(new PersistenceActionWithoutResult() {\n+\n+          public void execute(EntityManager em) {\n+            Query query = em.createNamedQuery(\"task.remove.ByProject\");\n+            query.setParameter(\"project\", project);\n+            query.executeUpdate();\n+\n+            query = em.createNamedQuery(\"story.remove.ByProject\");\n+            query.setParameter(\"project\", project);\n+            query.executeUpdate();\n+\n+            query = em.createNamedQuery(\"sprint.remove.ByProject\");\n+            query.setParameter(\"project\", project);\n+            query.executeUpdate();\n+\n+            Object toRemove = em.find(Project.class, project.getId());\n+            assert (null != toRemove);\n+\n+            em.remove(toRemove);\n+          }\n+        });\n+      } catch (Exception e) {\n+        getLogger(getClass()).log(Level.SEVERE, \"Error on try to remove Project: \" + getCurrentProject(), e);\n+        addMessage(\"Error on try to remove Project\", FacesMessage.SEVERITY_ERROR);\n+        return null;\n+      }\n     }\n-\n-    public void checkUniqueProjectName(FacesContext context, UIComponent component, Object newValue) {\n-        final String newName = (String) newValue;\n-        try {\n-            Long count = doInTransaction(new PersistenceAction<Long>() {\n-\n-                public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((getCurrentProject().isNew()) ? \"project.new.countByName\" : \"project.countByName\");\n-                    query.setParameter(\"name\", newName);\n-                    if (!currentProject.isNew()) {\n-                        query.setParameter(\"currentProject\", getCurrentProject());\n-                    }\n-                    return (Long) query.getSingleResult();\n-                }\n-            });\n-            if (count != null && count > 0) {\n-                throw new ValidatorException(getFacesMessageForKey(\"project.form.label.name.unique\"));\n-            }\n-        } catch (ManagerException ex) {\n-            Logger.getLogger(ProjectManager.class.getName()).log(Level.SEVERE, null, ex);\n+    // Using implicity navigation, this request come from /projects/show.xhtml and directs to /project/show.xhtml\n+    // could be null instead\n+    return \"show\";\n+  }\n+\n+  public void checkUniqueProjectName(FacesContext context, UIComponent component, Object newValue) {\n+    final String newName = (String) newValue;\n+    try {\n+      Long count = doInTransaction(new PersistenceAction<Long>() {\n+\n+        public Long execute(EntityManager em) {\n+          Query query =\n+            em.createNamedQuery((getCurrentProject().isNew()) ? \"project.new.countByName\" : \"project.countByName\");\n+          query.setParameter(\"name\", newName);\n+          if (!currentProject.isNew()) {\n+            query.setParameter(\"currentProject\", getCurrentProject());\n+          }\n+          return (Long) query.getSingleResult();\n         }\n+      });\n+      if (count != null && count > 0) {\n+        throw new ValidatorException(getFacesMessageForKey(\"project.form.label.name.unique\"));\n+      }\n+    } catch (ManagerException ex) {\n+      Logger.getLogger(ProjectManager.class.getName()).log(Level.SEVERE, null, ex);\n     }\n-\n-    public String cancelEdit() {\n-        // Implicity navigation, this request come from /projects/edit.xhtml and directs to /project/show.xhtml\n-        return \"show\";\n-    }\n-\n-    public String showSprints(Project project) {\n-        setCurrentProject(project);\n-        // Implicity navigation, this request come from /projects/show.xhtml and directs to /project/showSprints.xhtml\n-        return \"showSprints\";\n-    }\n-\n-    public Project getCurrentProject() {\n-        return currentProject;\n-    }\n-\n-    public void setCurrentProject(Project currentProject) {\n-        this.currentProject = currentProject;\n-    }\n-\n-    public String viewSprints() {\n-        return \"/sprint/show\";\n-    }\n+  }\n+\n+  public String cancelEdit() {\n+    // Implicity navigation, this request come from /projects/edit.xhtml and directs to /project/show.xhtml\n+    return \"show\";\n+  }\n+\n+  public String showSprints(Project project) {\n+    setCurrentProject(project);\n+    // Implicity navigation, this request come from /projects/show.xhtml and directs to /project/showSprints.xhtml\n+    return \"showSprints\";\n+  }\n+\n+  public Project getCurrentProject() {\n+    return currentProject;\n+  }\n+\n+  public void setCurrentProject(Project currentProject) {\n+    this.currentProject = currentProject;\n+  }\n+\n+  public String viewSprints() {\n+    return \"/sprint/show\";\n+  }\n \n \n }\n",
            "diff_size": 151
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/35/ProjectManager.java\nindex e3f86b038e3..52c1314c0d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/35/ProjectManager.java\n@@ -145,9 +145,8 @@ public class ProjectManager extends AbstractManager implements Serializable {\n                         query = em.createNamedQuery(\"sprint.remove.ByProject\");\n                         query.setParameter(\"project\", project);\n                         query.executeUpdate();\n-                        \n-                        Object toRemove = em.find(Project.class, project.getId());\n-                        assert(null != toRemove);\n+Object toRemove = em.find(Project.class, project.getId());\n+assert(null != toRemove);\n \n                         em.remove(toRemove);\n                     }\n@@ -209,4 +208,4 @@ public class ProjectManager extends AbstractManager implements Serializable {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/35/ProjectManager.java\nindex e3f86b038e3..41dc4a52322 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/35/ProjectManager.java\n@@ -169,8 +169,9 @@ public class ProjectManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((getCurrentProject().isNew()) ? \"project.new.countByName\" : \"project.countByName\");\n-                    query.setParameter(\"name\", newName);\n+                    Query query = em.createNamedQuery((getCurrentProject().isNew()\n+                    ) ? \"project.new.countByName\" : \"project.countByName\");\n+                query.setParameter(\"name\", newName);\n                     if (!currentProject.isNew()) {\n                         query.setParameter(\"currentProject\", getCurrentProject());\n                     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/35/ProjectManager.java\nindex e3f86b038e3..de5da9c0053 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/35/ProjectManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/35/ProjectManager.java\n@@ -169,8 +169,9 @@ public class ProjectManager extends AbstractManager implements Serializable {\n             Long count = doInTransaction(new PersistenceAction<Long>() {\n \n                 public Long execute(EntityManager em) {\n-                    Query query = em.createNamedQuery((getCurrentProject().isNew()) ? \"project.new.countByName\" : \"project.countByName\");\n-                    query.setParameter(\"name\", newName);\n+                    Query query = em.createNamedQuery(\n+                            (getCurrentProject().isNew() ) ? \"project.new.countByName\" :\"project.countByName\")\n+                    ;query.setParameter(\"name\", newName);\n                     if (!currentProject.isNew()) {\n                         query.setParameter(\"currentProject\", getCurrentProject());\n                     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}