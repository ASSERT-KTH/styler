{
    "project_name": "Chaklader-Multi-threading",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "18",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class FutureScrapper extends CommonScrapper {\n\n\tprivate final List<String> urlList;\n\tprivate final ExecutorService executor;\n\n\tpublic FutureScrapper(final String urlFile, final ExecutorService executor)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler/13/FutureScrapper.java\nindex 30603fcb36e..c923474ac44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler/13/FutureScrapper.java\n@@ -15,7 +15,7 @@ import com.asynch.util.CommonUtils;\n \r\n public class FutureScrapper extends CommonScrapper {\r\n \r\n-\tprivate final List<String> urlList;\r\n+private final List<String> urlList;\r\n \tprivate final ExecutorService executor;\r\n \r\n \tpublic FutureScrapper(final String urlFile, final ExecutorService executor)\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/intellij/13/FutureScrapper.java\nindex 30603fcb36e..4c4a493be36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/intellij/13/FutureScrapper.java\n@@ -15,38 +15,38 @@ import com.asynch.util.CommonUtils;\n \r\n public class FutureScrapper extends CommonScrapper {\r\n \r\n-\tprivate final List<String> urlList;\r\n-\tprivate final ExecutorService executor;\r\n-\r\n-\tpublic FutureScrapper(final String urlFile, final ExecutorService executor)\r\n-\t\t\tthrows IOException {\r\n-\t\tthis.urlList = CommonUtils.getLinks(urlFile);\r\n-\t\tthis.executor = executor;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void process() {\r\n-\t\tfinal List<Future<Result>> futureList = new ArrayList<>(10);\r\n-\t\tfor (final String url : urlList) {\r\n-\t\t\tfutureList.add(executor.submit(invokeCallable(url)));\r\n-\t\t}\r\n-\r\n-\t\tfutureList.stream().map(future -> {\r\n-\t\t\ttry {\r\n-\t\t\t\treturn future.get();\r\n-\t\t\t} catch (Exception e) {\r\n-\t\t\t\t// TODO Auto-generated catch block\r\n-\t\t\t\te.printStackTrace();\r\n-\t\t\t\treturn null;\r\n-\t\t\t}\r\n-\t\t}).forEach(System.out::println);\r\n-\t}\r\n-\r\n-\tprivate Callable<Result> invokeCallable(final String url) {\r\n-\t\treturn () -> {\r\n-\t\t\tfinal Tuple tuple = getPageSource(url);\r\n-\t\t\tfinal Article article = fetchArticle(tuple);\r\n-\t\t\treturn getResult(article);\r\n-\t\t};\r\n-\t}\r\n+    private final List<String> urlList;\r\n+    private final ExecutorService executor;\r\n+\r\n+    public FutureScrapper(final String urlFile, final ExecutorService executor)\r\n+            throws IOException {\r\n+        this.urlList = CommonUtils.getLinks(urlFile);\r\n+        this.executor = executor;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void process() {\r\n+        final List<Future<Result>> futureList = new ArrayList<>(10);\r\n+        for (final String url : urlList) {\r\n+            futureList.add(executor.submit(invokeCallable(url)));\r\n+        }\r\n+\r\n+        futureList.stream().map(future -> {\r\n+            try {\r\n+                return future.get();\r\n+            } catch (Exception e) {\r\n+                // TODO Auto-generated catch block\r\n+                e.printStackTrace();\r\n+                return null;\r\n+            }\r\n+        }).forEach(System.out::println);\r\n+    }\r\n+\r\n+    private Callable<Result> invokeCallable(final String url) {\r\n+        return () -> {\r\n+            final Tuple tuple = getPageSource(url);\r\n+            final Article article = fetchArticle(tuple);\r\n+            return getResult(article);\r\n+        };\r\n+    }\r\n }\r\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                },
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/naturalize/13/FutureScrapper.java\nindex 30603fcb36e..6be8c32f65a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/naturalize/13/FutureScrapper.java\n@@ -13,40 +13,40 @@ import com.asynch.common.Tuple;\n import com.asynch.util.CommonUtils;\r\n \r\n \r\n-public class FutureScrapper extends CommonScrapper {\r\n-\r\n-\tprivate final List<String> urlList;\r\n+public class FutureScrapper extends CommonScrapper {\n+\n+    private final List<String> urlList;\r\n \tprivate final ExecutorService executor;\r\n \r\n-\tpublic FutureScrapper(final String urlFile, final ExecutorService executor)\r\n-\t\t\tthrows IOException {\r\n-\t\tthis.urlList = CommonUtils.getLinks(urlFile);\r\n-\t\tthis.executor = executor;\r\n-\t}\r\n+\tpublic FutureScrapper(final String urlFile, final ExecutorService executor) throws IOException {\n+    this.urlList = CommonUtils.getLinks(urlFile);\r\n+\t\tthis.executor = executor;\n+    }\r\n \r\n \t@Override\r\n-\tpublic void process() {\r\n-\t\tfinal List<Future<Result>> futureList = new ArrayList<>(10);\r\n-\t\tfor (final String url : urlList) {\r\n-\t\t\tfutureList.add(executor.submit(invokeCallable(url)));\r\n-\t\t}\r\n-\r\n-\t\tfutureList.stream().map(future -> {\r\n-\t\t\ttry {\r\n-\t\t\t\treturn future.get();\r\n-\t\t\t} catch (Exception e) {\r\n-\t\t\t\t// TODO Auto-generated catch block\r\n+\tpublic void process() {\n+  final List<Future<Result>> futureList = new ArrayList<>(10);\r\n+\t\tfor (final String url : urlList) {\n+    futureList.add(executor.submit(invokeCallable(url)));\n+    }\r\n+\r\n+\t\tfutureList.stream().map(future -> {\n+    try {\n+    return future.get();\n+    } catch (Exception e) {\n+    // TODO Auto-generated catch block\r\n \t\t\t\te.printStackTrace();\r\n-\t\t\t\treturn null;\r\n-\t\t\t}\r\n-\t\t}).forEach(System.out::println);\r\n-\t}\r\n-\r\n-\tprivate Callable<Result> invokeCallable(final String url) {\r\n-\t\treturn () -> {\r\n-\t\t\tfinal Tuple tuple = getPageSource(url);\r\n+\t\t\t\treturn null;\n+  }\n+\n+    }).forEach(System.out::println);\n+    }\r\n+\r\n+\tprivate Callable<Result> invokeCallable(final String url) {\n+    return () -> {\n+    final Tuple tuple = getPageSource(url);\r\n \t\t\tfinal Article article = fetchArticle(tuple);\r\n-\t\t\treturn getResult(article);\r\n-\t\t};\r\n-\t}\r\n-}\r\n+\t\t\treturn getResult(article);\n+    };\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/codebuff/13/FutureScrapper.java\nindex 30603fcb36e..3a91ad83e2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/codebuff/13/FutureScrapper.java\n@@ -1,52 +1,48 @@\n-package com.asynch.crawl;\r\n-\r\n-import java.io.IOException;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.concurrent.Callable;\r\n-import java.util.concurrent.ExecutorService;\r\n-import java.util.concurrent.Future;\r\n-\r\n-import com.asynch.common.Article;\r\n-import com.asynch.common.Result;\r\n-import com.asynch.common.Tuple;\r\n-import com.asynch.util.CommonUtils;\r\n-\r\n-\r\n-public class FutureScrapper extends CommonScrapper {\r\n-\r\n-\tprivate final List<String> urlList;\r\n-\tprivate final ExecutorService executor;\r\n-\r\n-\tpublic FutureScrapper(final String urlFile, final ExecutorService executor)\r\n-\t\t\tthrows IOException {\r\n-\t\tthis.urlList = CommonUtils.getLinks(urlFile);\r\n-\t\tthis.executor = executor;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic void process() {\r\n-\t\tfinal List<Future<Result>> futureList = new ArrayList<>(10);\r\n-\t\tfor (final String url : urlList) {\r\n-\t\t\tfutureList.add(executor.submit(invokeCallable(url)));\r\n-\t\t}\r\n-\r\n-\t\tfutureList.stream().map(future -> {\r\n-\t\t\ttry {\r\n-\t\t\t\treturn future.get();\r\n-\t\t\t} catch (Exception e) {\r\n-\t\t\t\t// TODO Auto-generated catch block\r\n-\t\t\t\te.printStackTrace();\r\n-\t\t\t\treturn null;\r\n-\t\t\t}\r\n-\t\t}).forEach(System.out::println);\r\n-\t}\r\n-\r\n-\tprivate Callable<Result> invokeCallable(final String url) {\r\n-\t\treturn () -> {\r\n-\t\t\tfinal Tuple tuple = getPageSource(url);\r\n-\t\t\tfinal Article article = fetchArticle(tuple);\r\n-\t\t\treturn getResult(article);\r\n-\t\t};\r\n-\t}\r\n-}\r\n+package com.asynch.crawl;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import com.asynch.common.Article;\n+import com.asynch.common.Result;\n+import com.asynch.common.Tuple;\n+import com.asynch.util.CommonUtils;\n+\n+public class FutureScrapper extends CommonScrapper {\n+\n+    private final List<String> urlList;\n+    private final ExecutorService executor;\n+\n+    public FutureScrapper(final String urlFile, final ExecutorService executor) throws IOException {\n+        this.urlList = CommonUtils.getLinks(urlFile);\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    public void process() {\n+        final List<Future<Result>> futureList = new ArrayList<>(10);\n+        for (final String url : urlList) {\n+            futureList.add(executor.submit(invokeCallable(url)));\n+        }\n+        futureList.stream().map(future -> {\n+                               try {\n+                                   return future.get();\n+                               } catch (Exception e) {\r\n+                // TODO Auto-generated catch block\n+                                   e.printStackTrace();\n+                                   return null;\n+                               }\n+                           }).forEach(System.out::println);\n+    }\n+\n+    private Callable<Result> invokeCallable(final String url) {\n+        return () -> {\n+            final Tuple tuple = getPageSource(url);\n+            final Article article = fetchArticle(tuple);\n+            return getResult(article);\n+        };\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler_random/13/FutureScrapper.java\nindex 30603fcb36e..c923474ac44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler_random/13/FutureScrapper.java\n@@ -15,7 +15,7 @@ import com.asynch.util.CommonUtils;\n \r\n public class FutureScrapper extends CommonScrapper {\r\n \r\n-\tprivate final List<String> urlList;\r\n+private final List<String> urlList;\r\n \tprivate final ExecutorService executor;\r\n \r\n \tpublic FutureScrapper(final String urlFile, final ExecutorService executor)\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler_three_grams/13/FutureScrapper.java\nindex 30603fcb36e..48728aed497 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/13/FutureScrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler_three_grams/13/FutureScrapper.java\n@@ -15,7 +15,7 @@ import com.asynch.util.CommonUtils;\n \r\n public class FutureScrapper extends CommonScrapper {\r\n \r\n-\tprivate final List<String> urlList;\r\n+    private final List<String> urlList;\r\n \tprivate final ExecutorService executor;\r\n \r\n \tpublic FutureScrapper(final String urlFile, final ExecutorService executor)\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}