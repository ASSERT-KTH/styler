{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3925",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "163",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "193",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "216",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "235",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "256",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "262",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "317",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "322",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "322",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "337",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "358",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "445",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "451",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "466",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3925/ExecutionResultSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3925/ExecutionResultSerializer.java\nindex b4865f70820..04d96b84bdf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3925/ExecutionResultSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3925/ExecutionResultSerializer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.transactional;\n \n import org.codehaus.jackson.JsonFactory;\n@@ -58,440 +59,419 @@ import static org.neo4j.server.rest.domain.JsonHelper.writeValue;\n  */\n public class ExecutionResultSerializer\n {\n-    public ExecutionResultSerializer( OutputStream output, URI baseUri, LogProvider logProvider,\n-            TransitionalPeriodTransactionMessContainer container )\n-    {\n-        this.baseUri = baseUri;\n-        this.log = logProvider.getLog( getClass() );\n-        this.container = container;\n-        JSON_FACTORY.setCodec( new Neo4jJsonCodec( container ) );\n-        JsonGenerator generator = null;\n-        try\n-        {\n-            generator = JSON_FACTORY.createJsonGenerator( output );\n-        }\n-        catch ( IOException e )\n-        {\n-            loggedIOException( e );\n-        }\n-        this.out = generator;\n+  public ExecutionResultSerializer(OutputStream output, URI baseUri, LogProvider logProvider,\n+                                   TransitionalPeriodTransactionMessContainer container)\n+  {\n+    this.baseUri = baseUri;\n+    this.log = logProvider.getLog(getClass());\n+    this.container = container;\n+    JSON_FACTORY.setCodec(new Neo4jJsonCodec(container));\n+    JsonGenerator generator = null;\n+    try\n+    {\n+      generator = JSON_FACTORY.createJsonGenerator(output);\n+    } catch (IOException e)\n+    {\n+      loggedIOException(e);\n     }\n-\n-    /**\n-     * Will always get called at most once, and is the first method to get called. This method is not allowed\n-     * to throw exceptions. If there are network errors or similar, the handler should take appropriate action,\n-     * but never fail this method.\n-     */\n-    public void transactionCommitUri( URI commitUri )\n+    this.out = generator;\n+  }\n+\n+  /**\n+   * Will always get called at most once, and is the first method to get called. This method is not allowed\n+   * to throw exceptions. If there are network errors or similar, the handler should take appropriate action,\n+   * but never fail this method.\n+   */\n+  public void transactionCommitUri(URI commitUri)\n+  {\n+    try\n     {\n-        try\n-        {\n-            ensureDocumentOpen();\n-            out.writeStringField( \"commit\", commitUri.toString() );\n-        }\n-        catch ( IOException e )\n-        {\n-            loggedIOException( e );\n-        }\n+      ensureDocumentOpen();\n+      out.writeStringField(\"commit\", commitUri.toString());\n+    } catch (IOException e)\n+    {\n+      loggedIOException(e);\n     }\n-\n-    /**\n-     * Will get called at most once per statement. Throws IOException so that upstream executor can decide whether\n-     * to execute further statements.\n-     */\n-    public void statementResult( Result result, boolean includeStats, ResultDataContent... resultDataContents )\n-            throws IOException\n+  }\n+\n+  /**\n+   * Will get called at most once per statement. Throws IOException so that upstream executor can decide whether\n+   * to execute further statements.\n+   */\n+  public void statementResult(Result result, boolean includeStats, ResultDataContent... resultDataContents)\n+      throws IOException\n+  {\n+    try\n     {\n-        try\n-        {\n-            ensureResultsFieldOpen();\n-            out.writeStartObject();\n-            try\n-            {\n-                Iterable<String> columns = result.columns();\n-                writeColumns( columns );\n-                writeRows( columns, result, configureWriters( resultDataContents ) );\n-                if ( includeStats )\n-                {\n-                    writeStats( result.getQueryStatistics() );\n-                }\n-                if ( result.getQueryExecutionType().requestedExecutionPlanDescription() )\n-                {\n-                    writeRootPlanDescription( result.getExecutionPlanDescription() );\n-                }\n-            }\n-            finally\n-            {\n-                out.writeEndObject(); // </result>\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw loggedIOException( e );\n-        }\n+      ensureResultsFieldOpen();\n+      out.writeStartObject();\n+      try\n+      {\n+        Iterable<String> columns = result.columns();\n+        writeColumns(columns);\n+        writeRows(columns, result, configureWriters(resultDataContents));\n+        if (includeStats)\n+        {\n+          writeStats(result.getQueryStatistics());\n+        }\n+        if (result.getQueryExecutionType().requestedExecutionPlanDescription())\n+        {\n+          writeRootPlanDescription(result.getExecutionPlanDescription());\n+        }\n+      } finally\n+      {\n+        out.writeEndObject(); // </result>\n+      }\n+    } catch (IOException e)\n+    {\n+      throw loggedIOException(e);\n     }\n+  }\n \n-    public void notifications( Iterable<Notification> notifications ) throws IOException\n+  public void notifications(Iterable<Notification> notifications) throws IOException\n+  {\n+    //don't add anything if notifications are empty\n+    if (!notifications.iterator().hasNext())\n     {\n-        //don't add anything if notifications are empty\n-        if ( !notifications.iterator().hasNext() )\n-        {\n-            return;\n-        }\n-\n-        try\n-        {\n-            ensureResultsFieldClosed();\n-\n-            out.writeArrayFieldStart( \"notifications\" );\n-            try\n-            {\n-                for ( Notification notification : notifications )\n-                {\n-                    out.writeStartObject();\n-                    try\n-                    {\n-                        out.writeStringField( \"code\", notification.getCode() );\n-                        out.writeStringField( \"severity\", notification.getSeverity().toString() );\n-                        out.writeStringField( \"title\", notification.getTitle() );\n-                        out.writeStringField( \"description\", notification.getDescription() );\n-                        writePosition( notification.getPosition() );\n-\n-                    }\n-                    finally\n-                    {\n-                        out.writeEndObject();\n-                    }\n-                }\n-\n-            }\n-            finally\n-            {\n-                out.writeEndArray();\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw loggedIOException( e );\n-        }\n+      return;\n     }\n \n-    private void writePosition( InputPosition position ) throws IOException\n+    try\n     {\n-        //do not add position if empty\n-        if ( position == InputPosition.empty )\n-        {\n-            return;\n-        }\n-\n-        out.writeObjectFieldStart( \"position\" );\n-        try\n-        {\n-            out.writeNumberField( \"offset\", position.getOffset() );\n-            out.writeNumberField( \"line\", position.getLine() );\n-            out.writeNumberField( \"column\", position.getColumn() );\n-        }\n-        finally\n-        {\n+      ensureResultsFieldClosed();\n+\n+      out.writeArrayFieldStart(\"notifications\");\n+      try\n+      {\n+        for (Notification notification : notifications)\n+        {\n+          out.writeStartObject();\n+          try\n+          {\n+            out.writeStringField(\"code\", notification.getCode());\n+            out.writeStringField(\"severity\", notification.getSeverity().toString());\n+            out.writeStringField(\"title\", notification.getTitle());\n+            out.writeStringField(\"description\", notification.getDescription());\n+            writePosition(notification.getPosition());\n+\n+          } finally\n+          {\n             out.writeEndObject();\n+          }\n         }\n-    }\n \n-    private void writeStats( QueryStatistics stats ) throws IOException\n+      } finally\n+      {\n+        out.writeEndArray();\n+      }\n+    } catch (IOException e)\n     {\n-        out.writeObjectFieldStart( \"stats\" );\n-        try\n-        {\n-            out.writeBooleanField( \"contains_updates\", stats.containsUpdates() );\n-            out.writeNumberField( \"nodes_created\", stats.getNodesCreated() );\n-            out.writeNumberField( \"nodes_deleted\", stats.getNodesDeleted() );\n-            out.writeNumberField( \"properties_set\", stats.getPropertiesSet() );\n-            out.writeNumberField( \"relationships_created\", stats.getRelationshipsCreated() );\n-            out.writeNumberField( \"relationship_deleted\", stats.getRelationshipsDeleted() );\n-            out.writeNumberField( \"labels_added\", stats.getLabelsAdded() );\n-            out.writeNumberField( \"labels_removed\", stats.getLabelsRemoved() );\n-            out.writeNumberField( \"indexes_added\", stats.getIndexesAdded() );\n-            out.writeNumberField( \"indexes_removed\", stats.getIndexesRemoved() );\n-            out.writeNumberField( \"constraints_added\", stats.getConstraintsAdded() );\n-            out.writeNumberField( \"constraints_removed\", stats.getConstraintsRemoved() );\n-        }\n-        finally\n-        {\n-            out.writeEndObject();\n-        }\n+      throw loggedIOException(e);\n     }\n+  }\n \n-    private void writeRootPlanDescription( ExecutionPlanDescription planDescription ) throws IOException\n+  private void writePosition(InputPosition position) throws IOException\n+  {\n+    //do not add position if empty\n+    if (position == InputPosition.empty)\n     {\n-        out.writeObjectFieldStart( \"plan\" );\n-        try\n-        {\n-            out.writeObjectFieldStart( \"root\" );\n-            try\n-            {\n-                writePlanDescriptionObjectBody( planDescription );\n-            }\n-            finally\n-            {\n-                out.writeEndObject();\n-            }\n-        }\n-        finally\n-        {\n-            out.writeEndObject();\n-        }\n+      return;\n     }\n \n-    private void writePlanDescriptionObjectBody( ExecutionPlanDescription planDescription ) throws IOException\n+    out.writeObjectFieldStart(\"position\");\n+    try\n     {\n-        out.writeStringField( \"operatorType\", planDescription.getName() );\n-        writePlanArgs( planDescription );\n-        writePlanIdentifiers( planDescription );\n-\n-        List<ExecutionPlanDescription> children = planDescription.getChildren();\n-        out.writeArrayFieldStart( \"children\" );\n-        try\n-        {\n-            for ( ExecutionPlanDescription child : children )\n-            {\n-                out.writeStartObject();\n-                try\n-                {\n-                    writePlanDescriptionObjectBody( child );\n-                }\n-                finally\n-                {\n-                    out.writeEndObject();\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            out.writeEndArray();\n-        }\n+      out.writeNumberField(\"offset\", position.getOffset());\n+      out.writeNumberField(\"line\", position.getLine());\n+      out.writeNumberField(\"column\", position.getColumn());\n+    } finally\n+    {\n+      out.writeEndObject();\n     }\n+  }\n \n-    private void writePlanArgs( ExecutionPlanDescription planDescription ) throws IOException\n+  private void writeStats(QueryStatistics stats) throws IOException\n+  {\n+    out.writeObjectFieldStart(\"stats\");\n+    try\n     {\n-        for ( Map.Entry<String, Object> entry : planDescription.getArguments().entrySet() )\n-        {\n-            String fieldName = entry.getKey();\n-            Object fieldValue = entry.getValue();\n-\n-            out.writeFieldName( fieldName );\n-            writeValue( out, fieldValue );\n-        }\n+      out.writeBooleanField(\"contains_updates\", stats.containsUpdates());\n+      out.writeNumberField(\"nodes_created\", stats.getNodesCreated());\n+      out.writeNumberField(\"nodes_deleted\", stats.getNodesDeleted());\n+      out.writeNumberField(\"properties_set\", stats.getPropertiesSet());\n+      out.writeNumberField(\"relationships_created\", stats.getRelationshipsCreated());\n+      out.writeNumberField(\"relationship_deleted\", stats.getRelationshipsDeleted());\n+      out.writeNumberField(\"labels_added\", stats.getLabelsAdded());\n+      out.writeNumberField(\"labels_removed\", stats.getLabelsRemoved());\n+      out.writeNumberField(\"indexes_added\", stats.getIndexesAdded());\n+      out.writeNumberField(\"indexes_removed\", stats.getIndexesRemoved());\n+      out.writeNumberField(\"constraints_added\", stats.getConstraintsAdded());\n+      out.writeNumberField(\"constraints_removed\", stats.getConstraintsRemoved());\n+    } finally\n+    {\n+      out.writeEndObject();\n     }\n+  }\n \n-    private void writePlanIdentifiers( ExecutionPlanDescription planDescription ) throws IOException\n+  private void writeRootPlanDescription(ExecutionPlanDescription planDescription) throws IOException\n+  {\n+    out.writeObjectFieldStart(\"plan\");\n+    try\n     {\n-        out.writeArrayFieldStart( \"identifiers\" );\n-        for ( String id : planDescription.getIdentifiers() )\n-        {\n-            out.writeString( id );\n-        }\n-        out.writeEndArray();\n+      out.writeObjectFieldStart(\"root\");\n+      try\n+      {\n+        writePlanDescriptionObjectBody(planDescription);\n+      } finally\n+      {\n+        out.writeEndObject();\n+      }\n+    } finally\n+    {\n+      out.writeEndObject();\n     }\n+  }\n+\n+  private void writePlanDescriptionObjectBody(ExecutionPlanDescription planDescription) throws IOException\n+  {\n+    out.writeStringField(\"operatorType\", planDescription.getName());\n+    writePlanArgs(planDescription);\n+    writePlanIdentifiers(planDescription);\n \n-    /**\n-     * Will get called once if any errors occurred,\n-     * after {@link #statementResult(org.neo4j.graphdb.Result, boolean, ResultDataContent...)}  statementResults}\n-     * has been called This method is not allowed to throw exceptions. If there are network errors or similar, the\n-     * handler should take appropriate action, but never fail this method.\n-     * @param errors the errors to write\n-     */\n-    public void errors( Iterable<? extends Neo4jError> errors )\n+    List<ExecutionPlanDescription> children = planDescription.getChildren();\n+    out.writeArrayFieldStart(\"children\");\n+    try\n     {\n+      for (ExecutionPlanDescription child : children)\n+      {\n+        out.writeStartObject();\n         try\n         {\n-            ensureDocumentOpen();\n-            ensureResultsFieldClosed();\n-            out.writeArrayFieldStart( \"errors\" );\n-            try\n-            {\n-                for ( Neo4jError error : errors )\n-                {\n-                    try\n-                    {\n-                        out.writeStartObject();\n-                        out.writeObjectField( \"code\", error.status().code().serialize() );\n-                        out.writeObjectField( \"message\", error.getMessage() );\n-                        if ( error.shouldSerializeStackTrace() )\n-                        {\n-                            out.writeObjectField( \"stackTrace\", error.getStackTraceAsString() );\n-                        }\n-                    }\n-                    finally\n-                    {\n-                        out.writeEndObject();\n-                    }\n-                }\n-            }\n-            finally\n-            {\n-                out.writeEndArray();\n-                currentState = State.ERRORS_WRITTEN;\n-            }\n-        }\n-        catch ( IOException e )\n+          writePlanDescriptionObjectBody(child);\n+        } finally\n         {\n-            loggedIOException( e );\n+          out.writeEndObject();\n         }\n+      }\n+    } finally\n+    {\n+      out.writeEndArray();\n     }\n+  }\n \n-    public void transactionStatus( long expiryDate )\n+  private void writePlanArgs(ExecutionPlanDescription planDescription) throws IOException\n+  {\n+    for (Map.Entry<String, Object> entry : planDescription.getArguments().entrySet())\n     {\n-        try\n-        {\n-            ensureDocumentOpen();\n-            ensureResultsFieldClosed();\n-            out.writeObjectFieldStart( \"transaction\" );\n-            out.writeStringField( \"expires\", RFC1123.formatDate( new Date( expiryDate ) ) );\n-            out.writeEndObject();\n-        }\n-        catch ( IOException e )\n-        {\n-            loggedIOException( e );\n-        }\n+      String fieldName = entry.getKey();\n+      Object fieldValue = entry.getValue();\n+\n+      out.writeFieldName(fieldName);\n+      writeValue(out, fieldValue);\n     }\n+  }\n \n-    /**\n-     * This method must be called exactly once, and no method must be called after calling this method.\n-     * This method may not fail.\n-     */\n-    public void finish()\n+  private void writePlanIdentifiers(ExecutionPlanDescription planDescription) throws IOException\n+  {\n+    out.writeArrayFieldStart(\"identifiers\");\n+    for (String id : planDescription.getIdentifiers())\n     {\n-        try\n-        {\n-            ensureDocumentOpen();\n-            if ( currentState != State.ERRORS_WRITTEN )\n+      out.writeString(id);\n+    }\n+    out.writeEndArray();\n+  }\n+\n+  /**\n+   * Will get called once if any errors occurred,\n+   * after {@link #statementResult(org.neo4j.graphdb.Result, boolean, ResultDataContent...)}  statementResults}\n+   * has been called This method is not allowed to throw exceptions. If there are network errors or similar, the\n+   * handler should take appropriate action, but never fail this method.\n+   *\n+   * @param errors the errors to write\n+   */\n+  public void errors(Iterable<? extends Neo4jError> errors)\n+  {\n+    try\n+    {\n+      ensureDocumentOpen();\n+      ensureResultsFieldClosed();\n+      out.writeArrayFieldStart(\"errors\");\n+      try\n+      {\n+        for (Neo4jError error : errors)\n+        {\n+          try\n+          {\n+            out.writeStartObject();\n+            out.writeObjectField(\"code\", error.status().code().serialize());\n+            out.writeObjectField(\"message\", error.getMessage());\n+            if (error.shouldSerializeStackTrace())\n             {\n-                errors( Collections.emptyList() );\n+              out.writeObjectField(\"stackTrace\", error.getStackTraceAsString());\n             }\n+          } finally\n+          {\n             out.writeEndObject();\n-            out.flush();\n-        }\n-        catch ( IOException e )\n-        {\n-            loggedIOException( e );\n+          }\n         }\n+      } finally\n+      {\n+        out.writeEndArray();\n+        currentState = State.ERRORS_WRITTEN;\n+      }\n+    } catch (IOException e)\n+    {\n+      loggedIOException(e);\n     }\n+  }\n \n-    private ResultDataContentWriter configureWriters( ResultDataContent[] specifiers )\n+  public void transactionStatus(long expiryDate)\n+  {\n+    try\n     {\n-        if ( specifiers == null || specifiers.length == 0 )\n-        {\n-            return ResultDataContent.row.writer( baseUri ); // default\n-        }\n-        if ( specifiers.length == 1 )\n-        {\n-            return specifiers[0].writer( baseUri );\n-        }\n-        ResultDataContentWriter[] writers = new ResultDataContentWriter[specifiers.length];\n-        for ( int i = 0; i < specifiers.length; i++ )\n-        {\n-            writers[i] = specifiers[i].writer( baseUri );\n-        }\n-        return new AggregatingWriter( writers );\n+      ensureDocumentOpen();\n+      ensureResultsFieldClosed();\n+      out.writeObjectFieldStart(\"transaction\");\n+      out.writeStringField(\"expires\", RFC1123.formatDate(new Date(expiryDate)));\n+      out.writeEndObject();\n+    } catch (IOException e)\n+    {\n+      loggedIOException(e);\n     }\n+  }\n+\n+  /**\n+   * This method must be called exactly once, and no method must be called after calling this method.\n+   * This method may not fail.\n+   */\n+  public void finish()\n+  {\n+    try\n+    {\n+      ensureDocumentOpen();\n+      if (currentState != State.ERRORS_WRITTEN)\n+      {\n+        errors(Collections.emptyList());\n+      }\n+      out.writeEndObject();\n+      out.flush();\n+    } catch (IOException e)\n+    {\n+      loggedIOException(e);\n+    }\n+  }\n \n-    private enum State\n+  private ResultDataContentWriter configureWriters(ResultDataContent[] specifiers)\n+  {\n+    if (specifiers == null || specifiers.length == 0)\n+    {\n+      return ResultDataContent.row.writer(baseUri); // default\n+    }\n+    if (specifiers.length == 1)\n+    {\n+      return specifiers[0].writer(baseUri);\n+    }\n+    ResultDataContentWriter[] writers = new ResultDataContentWriter[specifiers.length];\n+    for (int i = 0; i < specifiers.length; i++)\n     {\n-        EMPTY, DOCUMENT_OPEN, RESULTS_OPEN, RESULTS_CLOSED, ERRORS_WRITTEN\n+      writers[i] = specifiers[i].writer(baseUri);\n     }\n+    return new AggregatingWriter(writers);\n+  }\n \n-    private State currentState = State.EMPTY;\n+  private enum State\n+  {\n+    EMPTY, DOCUMENT_OPEN, RESULTS_OPEN, RESULTS_CLOSED, ERRORS_WRITTEN\n+  }\n \n-    private static final JsonFactory JSON_FACTORY = new JsonFactory().disable( JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM );\n-    private final JsonGenerator out;\n-    private final URI baseUri;\n-    private final Log log;\n-    private final TransitionalPeriodTransactionMessContainer container;\n+  private State currentState = State.EMPTY;\n \n-    private void ensureDocumentOpen() throws IOException\n+  private static final JsonFactory JSON_FACTORY = new JsonFactory().disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);\n+  private final JsonGenerator out;\n+  private final URI baseUri;\n+  private final Log log;\n+  private final TransitionalPeriodTransactionMessContainer container;\n+\n+  private void ensureDocumentOpen() throws IOException\n+  {\n+    if (currentState == State.EMPTY)\n     {\n-        if ( currentState == State.EMPTY )\n-        {\n-            out.writeStartObject();\n-            currentState = State.DOCUMENT_OPEN;\n-        }\n+      out.writeStartObject();\n+      currentState = State.DOCUMENT_OPEN;\n     }\n+  }\n \n-    private void ensureResultsFieldOpen() throws IOException\n+  private void ensureResultsFieldOpen() throws IOException\n+  {\n+    ensureDocumentOpen();\n+    if (currentState == State.DOCUMENT_OPEN)\n     {\n-        ensureDocumentOpen();\n-        if ( currentState == State.DOCUMENT_OPEN )\n-        {\n-            out.writeArrayFieldStart( \"results\" );\n-            currentState = State.RESULTS_OPEN;\n-        }\n+      out.writeArrayFieldStart(\"results\");\n+      currentState = State.RESULTS_OPEN;\n     }\n+  }\n \n-    private void ensureResultsFieldClosed() throws IOException\n+  private void ensureResultsFieldClosed() throws IOException\n+  {\n+    ensureResultsFieldOpen();\n+    if (currentState == State.RESULTS_OPEN)\n     {\n-        ensureResultsFieldOpen();\n-        if ( currentState == State.RESULTS_OPEN )\n-        {\n-            out.writeEndArray();\n-            currentState = State.RESULTS_CLOSED;\n-        }\n+      out.writeEndArray();\n+      currentState = State.RESULTS_CLOSED;\n     }\n+  }\n \n-    private void writeRows( final Iterable<String> columns, Result data, final ResultDataContentWriter writer )\n-            throws IOException\n+  private void writeRows(final Iterable<String> columns, Result data, final ResultDataContentWriter writer)\n+      throws IOException\n+  {\n+    out.writeArrayFieldStart(\"data\");\n+    try\n     {\n-        out.writeArrayFieldStart( \"data\" );\n+      data.accept(row ->\n+      {\n+        out.writeStartObject();\n         try\n         {\n-            data.accept( row ->\n-            {\n-                out.writeStartObject();\n-                try\n-                {\n-                    try ( TransactionStateChecker txStateChecker = TransactionStateChecker.create( container ) )\n-                    {\n-                        writer.write( out, columns, row, txStateChecker );\n-                    }\n-                }\n-                finally\n-                {\n-                    out.writeEndObject();\n-                }\n-                return true;\n-            } );\n-        }\n-        finally\n+          try (TransactionStateChecker txStateChecker = TransactionStateChecker.create(container))\n+          {\n+            writer.write(out, columns, row, txStateChecker);\n+          }\n+        } finally\n         {\n-            out.writeEndArray(); // </data>\n+          out.writeEndObject();\n         }\n+        return true;\n+      });\n+    } finally\n+    {\n+      out.writeEndArray(); // </data>\n     }\n+  }\n \n-    private void writeColumns( Iterable<String> columns ) throws IOException\n+  private void writeColumns(Iterable<String> columns) throws IOException\n+  {\n+    try\n     {\n-        try\n-        {\n-            out.writeArrayFieldStart( \"columns\" );\n-            for ( String key : columns )\n-            {\n-                out.writeString( key );\n-            }\n-        }\n-        finally\n-        {\n-            out.writeEndArray(); // </columns>\n-        }\n+      out.writeArrayFieldStart(\"columns\");\n+      for (String key : columns)\n+      {\n+        out.writeString(key);\n+      }\n+    } finally\n+    {\n+      out.writeEndArray(); // </columns>\n     }\n+  }\n \n-    private IOException loggedIOException( IOException exception )\n+  private IOException loggedIOException(IOException exception)\n+  {\n+    if (Exceptions.contains(exception, \"Broken pipe\", IOException.class))\n     {\n-        if ( Exceptions.contains( exception, \"Broken pipe\", IOException.class ) )\n-        {\n-            log.error( \"Unable to reply to request, because the client has closed the connection (Broken pipe).\" );\n-        }\n-        else\n-        {\n-            log.error( \"Failed to generate JSON output.\", exception );\n-        }\n-        return exception;\n+      log.error(\"Unable to reply to request, because the client has closed the connection (Broken pipe).\");\n+    } else\n+    {\n+      log.error(\"Failed to generate JSON output.\", exception);\n     }\n+    return exception;\n+  }\n }\n",
            "diff_size": 537
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3925/ExecutionResultSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3925/ExecutionResultSerializer.java\nindex b4865f70820..4cee5ac1461 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3925/ExecutionResultSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3925/ExecutionResultSerializer.java\n@@ -99,9 +99,8 @@ public class ExecutionResultSerializer\n      * Will get called at most once per statement. Throws IOException so that upstream executor can decide whether\n      * to execute further statements.\n      */\n-    public void statementResult( Result result, boolean includeStats, ResultDataContent... resultDataContents )\n-            throws IOException\n-    {\n+    public void statementResult( Result result, boolean includeStats, ResultDataContent... resultDataContents ) throws IOException\n+{\n         try\n         {\n             ensureResultsFieldOpen();\n@@ -115,7 +114,8 @@ public class ExecutionResultSerializer\n                 {\n                     writeStats( result.getQueryStatistics() );\n                 }\n-                if ( result.getQueryExecutionType().requestedExecutionPlanDescription() )\n+\n+if ( result.getQueryExecutionType().requestedExecutionPlanDescription() )\n                 {\n                     writeRootPlanDescription( result.getExecutionPlanDescription() );\n                 }\n@@ -142,8 +142,7 @@ public class ExecutionResultSerializer\n         try\n         {\n             ensureResultsFieldClosed();\n-\n-            out.writeArrayFieldStart( \"notifications\" );\n+out.writeArrayFieldStart( \"notifications\" );\n             try\n             {\n                 for ( Notification notification : notifications )\n@@ -156,15 +155,13 @@ public class ExecutionResultSerializer\n                         out.writeStringField( \"title\", notification.getTitle() );\n                         out.writeStringField( \"description\", notification.getDescription() );\n                         writePosition( notification.getPosition() );\n-\n-                    }\n+    }\n                     finally\n                     {\n                         out.writeEndObject();\n                     }\n                 }\n-\n-            }\n+    }\n             finally\n             {\n                 out.writeEndArray();\n@@ -273,12 +270,11 @@ public class ExecutionResultSerializer\n \n     private void writePlanArgs( ExecutionPlanDescription planDescription ) throws IOException\n     {\n-        for ( Map.Entry<String, Object> entry : planDescription.getArguments().entrySet() )\n+        for ( Map.Entry<String,Object> entry : planDescription.getArguments().entrySet() )\n         {\n             String fieldName = entry.getKey();\n             Object fieldValue = entry.getValue();\n-\n-            out.writeFieldName( fieldName );\n+out.writeFieldName( fieldName );\n             writeValue( out, fieldValue );\n         }\n     }\n@@ -383,11 +379,13 @@ public class ExecutionResultSerializer\n         {\n             return ResultDataContent.row.writer( baseUri ); // default\n         }\n-        if ( specifiers.length == 1 )\n+\n+if ( specifiers.length == 1 )\n         {\n             return specifiers[0].writer( baseUri );\n         }\n-        ResultDataContentWriter[] writers = new ResultDataContentWriter[specifiers.length];\n+\n+ResultDataContentWriter[] writers = new ResultDataContentWriter[specifiers.length];\n         for ( int i = 0; i < specifiers.length; i++ )\n         {\n             writers[i] = specifiers[i].writer( baseUri );\n@@ -437,9 +435,8 @@ public class ExecutionResultSerializer\n         }\n     }\n \n-    private void writeRows( final Iterable<String> columns, Result data, final ResultDataContentWriter writer )\n-            throws IOException\n-    {\n+    private void writeRows( final Iterable<String> columns, Result data, final ResultDataContentWriter writer ) throws IOException\n+{\n         out.writeArrayFieldStart( \"data\" );\n         try\n         {\n@@ -492,6 +489,7 @@ public class ExecutionResultSerializer\n         {\n             log.error( \"Failed to generate JSON output.\", exception );\n         }\n-        return exception;\n+\n+return exception;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}