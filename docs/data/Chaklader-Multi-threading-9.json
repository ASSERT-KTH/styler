{
    "project_name": "Chaklader-Multi-threading",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 176).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private final CountDownLatch completedThreadCounter;\n\n    WaitingWorker(final List<String> outputScraper, final CountDownLatch readyThreadCounter, final CountDownLatch callingThreadBlocker, CountDownLatch completedThreadCounter) {\n\n        this.outputScraper = outputScraper;\n        this.readyThreadCounter = readyThreadCounter;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "13",
                    "column": "36",
                    "severity": "error",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "13",
                    "column": "36",
                    "severity": "error",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "13",
                    "column": "92",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler/9/WaitingWorker.java\nindex 4aee5cf89ac..43c5d86e52e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler/9/WaitingWorker.java\n@@ -10,9 +10,10 @@ public class WaitingWorker implements Runnable {\n     private final CountDownLatch callingThreadBlocker;\n     private final CountDownLatch completedThreadCounter;\n \n-    WaitingWorker(final List<String> outputScraper, final CountDownLatch readyThreadCounter, final CountDownLatch callingThreadBlocker, CountDownLatch completedThreadCounter) {\n+    WaitingWorker(finalList<String >outputScraper , finalCountDownLatch readyThreadCounter ,final CountDownLatch\n+        callingThreadBlocker, CountDownLatch completedThreadCounter) {\n \n-        this.outputScraper = outputScraper;\n+         this.outputScraper .outputScraper = outputScraper;\n         this.readyThreadCounter = readyThreadCounter;\n         this.callingThreadBlocker = callingThreadBlocker;\n         this.completedThreadCounter = completedThreadCounter;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/intellij/9/WaitingWorker.java\nindex 4aee5cf89ac..0f63fad17ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/intellij/9/WaitingWorker.java\n@@ -10,7 +10,9 @@ public class WaitingWorker implements Runnable {\n     private final CountDownLatch callingThreadBlocker;\n     private final CountDownLatch completedThreadCounter;\n \n-    WaitingWorker(final List<String> outputScraper, final CountDownLatch readyThreadCounter, final CountDownLatch callingThreadBlocker, CountDownLatch completedThreadCounter) {\n+    WaitingWorker(final List<String> outputScraper, final CountDownLatch readyThreadCounter,\n+                  final CountDownLatch callingThreadBlocker,\n+                  CountDownLatch completedThreadCounter) {\n \n         this.outputScraper = outputScraper;\n         this.readyThreadCounter = readyThreadCounter;\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/naturalize/9/WaitingWorker.java\nindex 4aee5cf89ac..ddcd1635dfa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/naturalize/9/WaitingWorker.java\n@@ -31,4 +31,4 @@ public class WaitingWorker implements Runnable {\n             completedThreadCounter.countDown();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/codebuff/9/WaitingWorker.java\nindex 4aee5cf89ac..e082bfff7d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/codebuff/9/WaitingWorker.java\n@@ -11,7 +11,6 @@ public class WaitingWorker implements Runnable {\n     private final CountDownLatch completedThreadCounter;\n \n     WaitingWorker(final List<String> outputScraper, final CountDownLatch readyThreadCounter, final CountDownLatch callingThreadBlocker, CountDownLatch completedThreadCounter) {\n-\n         this.outputScraper = outputScraper;\n         this.readyThreadCounter = readyThreadCounter;\n         this.callingThreadBlocker = callingThreadBlocker;\n@@ -22,6 +21,7 @@ public class WaitingWorker implements Runnable {\n     public void run() {\n         // Mark this thread as read / started\n         readyThreadCounter.countDown();\n+\n         try {\n             callingThreadBlocker.await();\n             outputScraper.add(\"Counted down\");\n@@ -31,4 +31,4 @@ public class WaitingWorker implements Runnable {\n             completedThreadCounter.countDown();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "13",
                    "column": "36",
                    "severity": "error",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "13",
                    "column": "36",
                    "severity": "error",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "13",
                    "column": "92",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler_three_grams/9/WaitingWorker.java\nindex 4aee5cf89ac..43c5d86e52e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/errored/1/9/WaitingWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Multi-threading/styler_three_grams/9/WaitingWorker.java\n@@ -10,9 +10,10 @@ public class WaitingWorker implements Runnable {\n     private final CountDownLatch callingThreadBlocker;\n     private final CountDownLatch completedThreadCounter;\n \n-    WaitingWorker(final List<String> outputScraper, final CountDownLatch readyThreadCounter, final CountDownLatch callingThreadBlocker, CountDownLatch completedThreadCounter) {\n+    WaitingWorker(finalList<String >outputScraper , finalCountDownLatch readyThreadCounter ,final CountDownLatch\n+        callingThreadBlocker, CountDownLatch completedThreadCounter) {\n \n-        this.outputScraper = outputScraper;\n+         this.outputScraper .outputScraper = outputScraper;\n         this.readyThreadCounter = readyThreadCounter;\n         this.callingThreadBlocker = callingThreadBlocker;\n         this.completedThreadCounter = completedThreadCounter;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}