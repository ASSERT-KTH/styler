{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3255",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3255/PageCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3255/PageCursor.java\nindex b3765f28d67..51c47e29fef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3255/PageCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3255/PageCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import java.io.File;\n@@ -67,332 +68,332 @@ import java.nio.ByteBuffer;\n  */\n public abstract class PageCursor implements AutoCloseable\n {\n-    public static final long UNBOUND_PAGE_ID = -1;\n-    public static final int UNBOUND_PAGE_SIZE = -1;\n-\n-    /**\n-     * Get the signed byte at the current page offset, and then increment the offset by one.\n-     */\n-    public abstract byte getByte();\n-\n-    /**\n-     * Get the signed byte at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract byte getByte( int offset );\n-\n-    /**\n-     * Set the signed byte at the current offset into the page, and then increment the offset by one.\n-     */\n-    public abstract void putByte( byte value );\n-\n-    /**\n-     * Set the signed byte at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract void putByte( int offset, byte value );\n-\n-    /**\n-     * Get the signed long at the current page offset, and then increment the offset by one.\n-     */\n-    public abstract long getLong();\n-\n-    /**\n-     * Get the signed long at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract long getLong( int offset );\n-\n-    /**\n-     * Set the signed long at the current offset into the page, and then increment the offset by one.\n-     */\n-    public abstract void putLong( long value );\n-\n-    /**\n-     * Set the signed long at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract void putLong( int offset, long value );\n-\n-    /**\n-     * Get the signed int at the current page offset, and then increment the offset by one.\n-     */\n-    public abstract int getInt();\n-\n-    /**\n-     * Get the signed int at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract int getInt( int offset );\n-\n-    /**\n-     * Set the signed int at the current offset into the page, and then increment the offset by one.\n-     */\n-    public abstract void putInt( int value );\n-\n-    /**\n-     * Set the signed int at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract void putInt( int offset, int value );\n-\n-    /**\n-     * Fill the given array with bytes from the page, beginning at the current offset into the page,\n-     * and then increment the current offset by the length of the array.\n-     */\n-    public abstract void getBytes( byte[] data );\n-\n-    /**\n-     * Read the given length of bytes from the page into the given array, starting from the current offset into the\n-     * page, and writing from the given array offset, and then increment the current offset by the length argument.\n-     */\n-    public abstract void getBytes( byte[] data, int arrayOffset, int length );\n-\n-    /**\n-     * Write out all the bytes of the given array into the page, beginning at the current offset into the page,\n-     * and then increment the current offset by the length of the array.\n-     */\n-    public abstract void putBytes( byte[] data );\n-\n-    /**\n-     * Write out the given length of bytes from the given offset into the the given array of bytes, into the page,\n-     * beginning at the current offset into the page, and then increment the current offset by the length argument.\n-     */\n-    public abstract void putBytes( byte[] data, int arrayOffset, int length );\n-\n-    /**\n-     * Set the given number of bytes to the given value, beginning at current offset into the page.\n-     */\n-    public abstract void putBytes( int bytes, byte value );\n-\n-    /**\n-     * Get the signed short at the current page offset, and then increment the offset by one.\n-     */\n-    public abstract short getShort();\n-\n-    /**\n-     * Get the signed short at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract short getShort( int offset );\n-\n-    /**\n-     * Set the signed short at the current offset into the page, and then increment the offset by one.\n-     */\n-    public abstract void putShort( short value );\n-\n-    /**\n-     * Set the signed short at the given offset into the page.\n-     * Leaves the current page offset unchanged.\n-     */\n-    public abstract void putShort( int offset, short value );\n-\n-    /**\n-     * Set the current offset into the page, for interacting with the page through the read and write methods that do\n-     * not take a specific offset as an argument.\n-     */\n-    public abstract void setOffset( int offset );\n-\n-    /**\n-     * Get the current offset into the page, which is the location on the page where the next interaction would take\n-     * place through the read and write methods that do not take a specific offset as an argument.\n-     */\n-    public abstract int getOffset();\n-\n-    /**\n-     * Get the file page id that the cursor is currently positioned at, or\n-     * UNBOUND_PAGE_ID if next() has not yet been called on this cursor, or returned false.\n-     * A call to rewind() will make the current page id unbound as well, until\n-     * next() is called.\n-     */\n-    public abstract long getCurrentPageId();\n-\n-    /**\n-     * Get the file page size of the page that the cursor is currently positioned at,\n-     * or UNBOUND_PAGE_SIZE if next() has not yet been called on this cursor, or returned false.\n-     * A call to rewind() will make the current page unbound as well, until next() is called.\n-     */\n-    public abstract int getCurrentPageSize();\n-\n-    /**\n-     * Get the file the cursor is currently bound to, or {@code null} if next() has not yet been called on this\n-     * cursor, or returned false.\n-     * A call to rewind() will make the cursor unbound as well, until next() is called.\n-     */\n-    public abstract File getCurrentFile();\n-\n-    /**\n-     * Rewinds the cursor to its initial condition, as if freshly returned from\n-     * an equivalent io() call. In other words, the next call to next() will\n-     * move the cursor to the starting page that was specified in the io() that\n-     * produced the cursor.\n-     */\n-    public abstract void rewind();\n-\n-    /**\n-     * Moves the cursor to the next page, if any, and returns true when it is\n-     * ready to be processed. Returns false if there are no more pages to be\n-     * processed. For instance, if the cursor was requested with PF_NO_GROW\n-     * and the page most recently processed was the last page in the file.\n-     * <p>\n-     * <strong>NOTE: When using read locks, read operations can be inconsistent\n-     * and may return completely random data. The data returned from a\n-     * read-locked page cursor should not be interpreted until after\n-     * {@link #shouldRetry()} has returned {@code false}.</strong>\n-     * Not interpreting the data also implies that you cannot throw exceptions\n-     * from data validation errors until after {@link #shouldRetry()} has told\n-     * you that your read was consistent.\n-     */\n-    public abstract boolean next() throws IOException;\n-\n-    /**\n-     * Moves the cursor to the page specified by the given pageId, if any,\n-     * and returns true when it is ready to be processed. Returns false if\n-     * for instance, the cursor was requested with PF_NO_GROW and the page\n-     * most recently processed was the last page in the file.\n-     * <p>\n-     * <strong>NOTE: When using read locks, read operations can be inconsistent\n-     * and may return completely random data. The data returned from a\n-     * read-locked page cursor should not be interpreted until after\n-     * {@link #shouldRetry()} has returned {@code false}.</strong>\n-     * Not interpreting the data also implies that you cannot throw exceptions\n-     * from data validation errors until after {@link #shouldRetry()} has told\n-     * you that your read was consistent.\n-     */\n-    public abstract boolean next( long pageId ) throws IOException;\n-\n-    /**\n-     * Relinquishes all resources associated with this cursor, including the\n-     * cursor itself, and any linked cursors opened through it. The cursor cannot be used after this call.\n-     *\n-     * @see AutoCloseable#close()\n-     */\n-    @Override\n-    public abstract void close();\n-\n-    /**\n-     * Returns true if the page has entered an inconsistent state since the last call to next() or shouldRetry().\n-     * <p>\n-     * If this method returns true, the in-page offset of the cursor will be reset to zero.\n-     * <p>\n-     * Note that {@link PagedFile#PF_SHARED_WRITE_LOCK write locked} cursors never conflict with each other, nor with\n-     * eviction, and thus technically don't require a {@code shouldRetry} check. This method always returns\n-     * {@code false} for write-locking cursors.\n-     * <p>\n-     * Cursors that are {@link PagedFile#PF_SHARED_READ_LOCK read locked} must <em>always</em> perform their reads in a\n-     * {@code shouldRetry} loop, and avoid interpreting the data they read until {@code shouldRetry} has confirmed that\n-     * the reads were consistent.\n-     *\n-     * @throws IOException If the page was evicted while doing IO, the cursor will have\n-     * to do a page fault to get the page back.\n-     * This may throw an IOException.\n-     */\n-    public abstract boolean shouldRetry() throws IOException;\n-\n-    /**\n-     * Copy the specified number of bytes from the given offset of this page, to the given offset of the target page.\n-     * <p>\n-     * If the length reaches beyond the end of either cursor, then only as many bytes as are available in this cursor,\n-     * or can fit in the target cursor, are actually copied.\n-     * <p>\n-     * <strong>Note</strong> that {@code copyTo} is only guaranteed to work when both target and source cursor are from\n-     * the <em>same</em> page cache implementation. Using wrappers, delegates or mixing cursor implementations may\n-     * produce unspecified errors.\n-     *\n-     * @param sourceOffset The offset into this page to copy from.\n-     * @param targetCursor The cursor the data will be copied to.\n-     * @param targetOffset The offset into the target cursor to copy to.\n-     * @param lengthInBytes The number of bytes to copy.\n-     * @return The number of bytes actually copied.\n-     */\n-    public abstract int copyTo( int sourceOffset, PageCursor targetCursor, int targetOffset, int lengthInBytes );\n-\n-    /**\n-     * Copy bytes from the specified offset in this page, into the given buffer, until either the limit of the buffer\n-     * is reached, or the end of the page is reached. The actual number of bytes copied is returned.\n-     *\n-     * @param sourceOffset The offset into this page to copy from.\n-     * @param targetBuffer The buffer the data will be copied to.\n-     * @return The number of bytes actually copied.\n-     */\n-    public abstract int copyTo( int sourceOffset, ByteBuffer targetBuffer );\n-\n-    /**\n-     * Shift the specified number of bytes starting from given offset the specified number of bytes to the left or\n-     * right. The area\n-     * left behind after the shift is not padded and thus is left with garbage.\n-     * <p>\n-     * Out of bounds flag is raised if either start or end of either source range or target range fall outside end of\n-     * this cursor\n-     * or if length is negative.\n-     *\n-     * @param sourceOffset The offset into this page to start moving from.\n-     * @param length The number of bytes to move.\n-     * @param shift How many steps, in terms of number of bytes, to shift. Can be both positive and negative.\n-     */\n-    public abstract void shiftBytes( int sourceOffset, int length, int shift );\n-\n-    /**\n-     * Discern whether an out-of-bounds access has occurred since the last call to {@link #next()} or\n-     * {@link #next(long)}, or since the last call to {@link #shouldRetry()} that returned {@code true}, or since the\n-     * last call to this method.\n-     *\n-     * @return {@code true} if an access was out of bounds, or the {@link #raiseOutOfBounds()} method has been called.\n-     */\n-    public abstract boolean checkAndClearBoundsFlag();\n-\n-    /**\n-     * Check if a cursor error has been set on this or any linked cursor, and if so, remove it from the cursor\n-     * and throw it as a {@link CursorException}.\n-     */\n-    public abstract void checkAndClearCursorException() throws CursorException;\n-\n-    /**\n-     * Explicitly raise the out-of-bounds flag.\n-     *\n-     * @see #checkAndClearBoundsFlag()\n-     */\n-    public abstract void raiseOutOfBounds();\n-\n-    /**\n-     * Set an error condition on the cursor with the given message.\n-     * <p>\n-     * This will make calls to {@link #checkAndClearCursorException()} throw a {@link CursorException} with the given\n-     * message, unless the error has gotten cleared by a {@link #shouldRetry()} call that returned {@code true},\n-     * a call to {@link #next()} or {@link #next(long)}, or the cursor is closed.\n-     *\n-     * @param message The message of the {@link CursorException} that {@link #checkAndClearCursorException()} will\n-     * throw.\n-     */\n-    public abstract void setCursorException( String message );\n-\n-    /**\n-     * Unconditionally clear any error condition that has been set on this or any linked cursor, without throwing an\n-     * exception.\n-     */\n-    public abstract void clearCursorException();\n-\n-    /**\n-     * Open a new page cursor with the same pf_flags as this cursor, as if calling the {@link PagedFile#io(long, int)}\n-     * on the relevant paged file. This cursor will then also delegate to the linked cursor when checking\n-     * {@link #shouldRetry()} and {@link #checkAndClearBoundsFlag()}.\n-     * <p>\n-     * Opening a linked cursor on a cursor that already has a linked cursor, will close the older linked cursor.\n-     * Closing a cursor also closes any linked cursor.\n-     *\n-     * @param pageId The page id that the linked cursor will be placed at after its first call to {@link #next()}.\n-     * @return A cursor that is linked with this cursor.\n-     */\n-    public abstract PageCursor openLinkedCursor( long pageId ) throws IOException;\n-\n-    /**\n-     * Sets all bytes in this page to zero, as if this page was newly allocated at the end of the file.\n-     */\n-    public abstract void zapPage();\n-\n-    /**\n-     * @return {@code true} if this page cursor was opened with {@link PagedFile#PF_SHARED_WRITE_LOCK},\n-     * {@code false} otherwise.\n-     */\n-    public abstract boolean isWriteLocked();\n+  public static final long UNBOUND_PAGE_ID = -1;\n+  public static final int UNBOUND_PAGE_SIZE = -1;\n+\n+  /**\n+   * Get the signed byte at the current page offset, and then increment the offset by one.\n+   */\n+  public abstract byte getByte();\n+\n+  /**\n+   * Get the signed byte at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract byte getByte(int offset);\n+\n+  /**\n+   * Set the signed byte at the current offset into the page, and then increment the offset by one.\n+   */\n+  public abstract void putByte(byte value);\n+\n+  /**\n+   * Set the signed byte at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract void putByte(int offset, byte value);\n+\n+  /**\n+   * Get the signed long at the current page offset, and then increment the offset by one.\n+   */\n+  public abstract long getLong();\n+\n+  /**\n+   * Get the signed long at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract long getLong(int offset);\n+\n+  /**\n+   * Set the signed long at the current offset into the page, and then increment the offset by one.\n+   */\n+  public abstract void putLong(long value);\n+\n+  /**\n+   * Set the signed long at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract void putLong(int offset, long value);\n+\n+  /**\n+   * Get the signed int at the current page offset, and then increment the offset by one.\n+   */\n+  public abstract int getInt();\n+\n+  /**\n+   * Get the signed int at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract int getInt(int offset);\n+\n+  /**\n+   * Set the signed int at the current offset into the page, and then increment the offset by one.\n+   */\n+  public abstract void putInt(int value);\n+\n+  /**\n+   * Set the signed int at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract void putInt(int offset, int value);\n+\n+  /**\n+   * Fill the given array with bytes from the page, beginning at the current offset into the page,\n+   * and then increment the current offset by the length of the array.\n+   */\n+  public abstract void getBytes(byte[] data);\n+\n+  /**\n+   * Read the given length of bytes from the page into the given array, starting from the current offset into the\n+   * page, and writing from the given array offset, and then increment the current offset by the length argument.\n+   */\n+  public abstract void getBytes(byte[] data, int arrayOffset, int length);\n+\n+  /**\n+   * Write out all the bytes of the given array into the page, beginning at the current offset into the page,\n+   * and then increment the current offset by the length of the array.\n+   */\n+  public abstract void putBytes(byte[] data);\n+\n+  /**\n+   * Write out the given length of bytes from the given offset into the the given array of bytes, into the page,\n+   * beginning at the current offset into the page, and then increment the current offset by the length argument.\n+   */\n+  public abstract void putBytes(byte[] data, int arrayOffset, int length);\n+\n+  /**\n+   * Set the given number of bytes to the given value, beginning at current offset into the page.\n+   */\n+  public abstract void putBytes(int bytes, byte value);\n+\n+  /**\n+   * Get the signed short at the current page offset, and then increment the offset by one.\n+   */\n+  public abstract short getShort();\n+\n+  /**\n+   * Get the signed short at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract short getShort(int offset);\n+\n+  /**\n+   * Set the signed short at the current offset into the page, and then increment the offset by one.\n+   */\n+  public abstract void putShort(short value);\n+\n+  /**\n+   * Set the signed short at the given offset into the page.\n+   * Leaves the current page offset unchanged.\n+   */\n+  public abstract void putShort(int offset, short value);\n+\n+  /**\n+   * Set the current offset into the page, for interacting with the page through the read and write methods that do\n+   * not take a specific offset as an argument.\n+   */\n+  public abstract void setOffset(int offset);\n+\n+  /**\n+   * Get the current offset into the page, which is the location on the page where the next interaction would take\n+   * place through the read and write methods that do not take a specific offset as an argument.\n+   */\n+  public abstract int getOffset();\n+\n+  /**\n+   * Get the file page id that the cursor is currently positioned at, or\n+   * UNBOUND_PAGE_ID if next() has not yet been called on this cursor, or returned false.\n+   * A call to rewind() will make the current page id unbound as well, until\n+   * next() is called.\n+   */\n+  public abstract long getCurrentPageId();\n+\n+  /**\n+   * Get the file page size of the page that the cursor is currently positioned at,\n+   * or UNBOUND_PAGE_SIZE if next() has not yet been called on this cursor, or returned false.\n+   * A call to rewind() will make the current page unbound as well, until next() is called.\n+   */\n+  public abstract int getCurrentPageSize();\n+\n+  /**\n+   * Get the file the cursor is currently bound to, or {@code null} if next() has not yet been called on this\n+   * cursor, or returned false.\n+   * A call to rewind() will make the cursor unbound as well, until next() is called.\n+   */\n+  public abstract File getCurrentFile();\n+\n+  /**\n+   * Rewinds the cursor to its initial condition, as if freshly returned from\n+   * an equivalent io() call. In other words, the next call to next() will\n+   * move the cursor to the starting page that was specified in the io() that\n+   * produced the cursor.\n+   */\n+  public abstract void rewind();\n+\n+  /**\n+   * Moves the cursor to the next page, if any, and returns true when it is\n+   * ready to be processed. Returns false if there are no more pages to be\n+   * processed. For instance, if the cursor was requested with PF_NO_GROW\n+   * and the page most recently processed was the last page in the file.\n+   * <p>\n+   * <strong>NOTE: When using read locks, read operations can be inconsistent\n+   * and may return completely random data. The data returned from a\n+   * read-locked page cursor should not be interpreted until after\n+   * {@link #shouldRetry()} has returned {@code false}.</strong>\n+   * Not interpreting the data also implies that you cannot throw exceptions\n+   * from data validation errors until after {@link #shouldRetry()} has told\n+   * you that your read was consistent.\n+   */\n+  public abstract boolean next() throws IOException;\n+\n+  /**\n+   * Moves the cursor to the page specified by the given pageId, if any,\n+   * and returns true when it is ready to be processed. Returns false if\n+   * for instance, the cursor was requested with PF_NO_GROW and the page\n+   * most recently processed was the last page in the file.\n+   * <p>\n+   * <strong>NOTE: When using read locks, read operations can be inconsistent\n+   * and may return completely random data. The data returned from a\n+   * read-locked page cursor should not be interpreted until after\n+   * {@link #shouldRetry()} has returned {@code false}.</strong>\n+   * Not interpreting the data also implies that you cannot throw exceptions\n+   * from data validation errors until after {@link #shouldRetry()} has told\n+   * you that your read was consistent.\n+   */\n+  public abstract boolean next(long pageId) throws IOException;\n+\n+  /**\n+   * Relinquishes all resources associated with this cursor, including the\n+   * cursor itself, and any linked cursors opened through it. The cursor cannot be used after this call.\n+   *\n+   * @see AutoCloseable#close()\n+   */\n+  @Override\n+  public abstract void close();\n+\n+  /**\n+   * Returns true if the page has entered an inconsistent state since the last call to next() or shouldRetry().\n+   * <p>\n+   * If this method returns true, the in-page offset of the cursor will be reset to zero.\n+   * <p>\n+   * Note that {@link PagedFile#PF_SHARED_WRITE_LOCK write locked} cursors never conflict with each other, nor with\n+   * eviction, and thus technically don't require a {@code shouldRetry} check. This method always returns\n+   * {@code false} for write-locking cursors.\n+   * <p>\n+   * Cursors that are {@link PagedFile#PF_SHARED_READ_LOCK read locked} must <em>always</em> perform their reads in a\n+   * {@code shouldRetry} loop, and avoid interpreting the data they read until {@code shouldRetry} has confirmed that\n+   * the reads were consistent.\n+   *\n+   * @throws IOException If the page was evicted while doing IO, the cursor will have\n+   *                     to do a page fault to get the page back.\n+   *                     This may throw an IOException.\n+   */\n+  public abstract boolean shouldRetry() throws IOException;\n+\n+  /**\n+   * Copy the specified number of bytes from the given offset of this page, to the given offset of the target page.\n+   * <p>\n+   * If the length reaches beyond the end of either cursor, then only as many bytes as are available in this cursor,\n+   * or can fit in the target cursor, are actually copied.\n+   * <p>\n+   * <strong>Note</strong> that {@code copyTo} is only guaranteed to work when both target and source cursor are from\n+   * the <em>same</em> page cache implementation. Using wrappers, delegates or mixing cursor implementations may\n+   * produce unspecified errors.\n+   *\n+   * @param sourceOffset  The offset into this page to copy from.\n+   * @param targetCursor  The cursor the data will be copied to.\n+   * @param targetOffset  The offset into the target cursor to copy to.\n+   * @param lengthInBytes The number of bytes to copy.\n+   * @return The number of bytes actually copied.\n+   */\n+  public abstract int copyTo(int sourceOffset, PageCursor targetCursor, int targetOffset, int lengthInBytes);\n+\n+  /**\n+   * Copy bytes from the specified offset in this page, into the given buffer, until either the limit of the buffer\n+   * is reached, or the end of the page is reached. The actual number of bytes copied is returned.\n+   *\n+   * @param sourceOffset The offset into this page to copy from.\n+   * @param targetBuffer The buffer the data will be copied to.\n+   * @return The number of bytes actually copied.\n+   */\n+  public abstract int copyTo(int sourceOffset, ByteBuffer targetBuffer);\n+\n+  /**\n+   * Shift the specified number of bytes starting from given offset the specified number of bytes to the left or\n+   * right. The area\n+   * left behind after the shift is not padded and thus is left with garbage.\n+   * <p>\n+   * Out of bounds flag is raised if either start or end of either source range or target range fall outside end of\n+   * this cursor\n+   * or if length is negative.\n+   *\n+   * @param sourceOffset The offset into this page to start moving from.\n+   * @param length       The number of bytes to move.\n+   * @param shift        How many steps, in terms of number of bytes, to shift. Can be both positive and negative.\n+   */\n+  public abstract void shiftBytes(int sourceOffset, int length, int shift);\n+\n+  /**\n+   * Discern whether an out-of-bounds access has occurred since the last call to {@link #next()} or\n+   * {@link #next(long)}, or since the last call to {@link #shouldRetry()} that returned {@code true}, or since the\n+   * last call to this method.\n+   *\n+   * @return {@code true} if an access was out of bounds, or the {@link #raiseOutOfBounds()} method has been called.\n+   */\n+  public abstract boolean checkAndClearBoundsFlag();\n+\n+  /**\n+   * Check if a cursor error has been set on this or any linked cursor, and if so, remove it from the cursor\n+   * and throw it as a {@link CursorException}.\n+   */\n+  public abstract void checkAndClearCursorException() throws CursorException;\n+\n+  /**\n+   * Explicitly raise the out-of-bounds flag.\n+   *\n+   * @see #checkAndClearBoundsFlag()\n+   */\n+  public abstract void raiseOutOfBounds();\n+\n+  /**\n+   * Set an error condition on the cursor with the given message.\n+   * <p>\n+   * This will make calls to {@link #checkAndClearCursorException()} throw a {@link CursorException} with the given\n+   * message, unless the error has gotten cleared by a {@link #shouldRetry()} call that returned {@code true},\n+   * a call to {@link #next()} or {@link #next(long)}, or the cursor is closed.\n+   *\n+   * @param message The message of the {@link CursorException} that {@link #checkAndClearCursorException()} will\n+   *                throw.\n+   */\n+  public abstract void setCursorException(String message);\n+\n+  /**\n+   * Unconditionally clear any error condition that has been set on this or any linked cursor, without throwing an\n+   * exception.\n+   */\n+  public abstract void clearCursorException();\n+\n+  /**\n+   * Open a new page cursor with the same pf_flags as this cursor, as if calling the {@link PagedFile#io(long, int)}\n+   * on the relevant paged file. This cursor will then also delegate to the linked cursor when checking\n+   * {@link #shouldRetry()} and {@link #checkAndClearBoundsFlag()}.\n+   * <p>\n+   * Opening a linked cursor on a cursor that already has a linked cursor, will close the older linked cursor.\n+   * Closing a cursor also closes any linked cursor.\n+   *\n+   * @param pageId The page id that the linked cursor will be placed at after its first call to {@link #next()}.\n+   * @return A cursor that is linked with this cursor.\n+   */\n+  public abstract PageCursor openLinkedCursor(long pageId) throws IOException;\n+\n+  /**\n+   * Sets all bytes in this page to zero, as if this page was newly allocated at the end of the file.\n+   */\n+  public abstract void zapPage();\n+\n+  /**\n+   * @return {@code true} if this page cursor was opened with {@link PagedFile#PF_SHARED_WRITE_LOCK},\n+   * {@code false} otherwise.\n+   */\n+  public abstract boolean isWriteLocked();\n }\n",
            "diff_size": 329
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3255/PageCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3255/PageCursor.java\nindex b3765f28d67..fdd28f55f0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3255/PageCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3255/PageCursor.java\n@@ -68,7 +68,8 @@ import java.nio.ByteBuffer;\n public abstract class PageCursor implements AutoCloseable\n {\n     public static final long UNBOUND_PAGE_ID = -1;\n-    public static final int UNBOUND_PAGE_SIZE = -1;\n+\n+public static final int UNBOUND_PAGE_SIZE = -1;\n \n     /**\n      * Get the signed byte at the current page offset, and then increment the offset by one.\n@@ -395,4 +396,4 @@ public abstract class PageCursor implements AutoCloseable\n      * {@code false} otherwise.\n      */\n     public abstract boolean isWriteLocked();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}