{
    "project_name": "graphfoundation-ongdb",
    "error_id": "86",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "342",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/86/LocalTimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/86/LocalTimeValue.java\nindex 61eda9a61fc..74389cace28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/86/LocalTimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/86/LocalTimeValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.time.Clock;\n@@ -46,320 +47,317 @@ import static java.lang.Integer.parseInt;\n import static java.util.Objects.requireNonNull;\n import static org.neo4j.values.storable.DateTimeValue.parseZoneName;\n \n-public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue>\n+public final class LocalTimeValue extends TemporalValue<LocalTime, LocalTimeValue>\n {\n-    public static final LocalTimeValue MIN_VALUE = new LocalTimeValue( LocalTime.MIN );\n-    public static final LocalTimeValue MAX_VALUE = new LocalTimeValue( LocalTime.MAX );\n-\n-    public static LocalTimeValue localTime( LocalTime value )\n-    {\n-        return new LocalTimeValue( requireNonNull( value, \"LocalTime\" ) );\n-    }\n-\n-    public static LocalTimeValue localTime( int hour, int minute, int second, int nanosOfSecond )\n-    {\n-        return new LocalTimeValue( assertValidArgument( () -> LocalTime.of( hour, minute, second, nanosOfSecond ) ) );\n-    }\n-\n-    public static LocalTimeValue localTime( long nanoOfDay )\n-    {\n-        return new LocalTimeValue( assertValidArgument( () -> LocalTime.ofNanoOfDay( nanoOfDay ) ) );\n-    }\n-\n-    public static LocalTimeValue parse( CharSequence text )\n-    {\n-        return parse( LocalTimeValue.class, PATTERN, LocalTimeValue::parse, text );\n-    }\n-\n-    public static LocalTimeValue parse( TextValue text )\n-    {\n-        return parse( LocalTimeValue.class, PATTERN, LocalTimeValue::parse, text );\n-    }\n-\n-    public static LocalTimeValue now( Clock clock )\n-    {\n-        return new LocalTimeValue( LocalTime.now( clock ) );\n-    }\n-\n-    public static LocalTimeValue now( Clock clock, String timezone )\n-    {\n-        return now( clock.withZone( parseZoneName( timezone ) ) );\n-    }\n-\n-    public static LocalTimeValue now( Clock clock, Supplier<ZoneId> defaultZone )\n-    {\n-        return now( clock.withZone( defaultZone.get() ) );\n-    }\n-\n-    public static LocalTimeValue build( MapValue map, Supplier<ZoneId> defaultZone )\n-    {\n-        return StructureBuilder.build( builder( defaultZone ), map );\n-    }\n-\n-    public static LocalTimeValue select( AnyValue from, Supplier<ZoneId> defaultZone )\n-    {\n-        return builder( defaultZone ).selectTime( from );\n-    }\n+  public static final LocalTimeValue MIN_VALUE = new LocalTimeValue(LocalTime.MIN);\n+  public static final LocalTimeValue MAX_VALUE = new LocalTimeValue(LocalTime.MAX);\n+\n+  public static LocalTimeValue localTime(LocalTime value)\n+  {\n+    return new LocalTimeValue(requireNonNull(value, \"LocalTime\"));\n+  }\n+\n+  public static LocalTimeValue localTime(int hour, int minute, int second, int nanosOfSecond)\n+  {\n+    return new LocalTimeValue(assertValidArgument(() -> LocalTime.of(hour, minute, second, nanosOfSecond)));\n+  }\n+\n+  public static LocalTimeValue localTime(long nanoOfDay)\n+  {\n+    return new LocalTimeValue(assertValidArgument(() -> LocalTime.ofNanoOfDay(nanoOfDay)));\n+  }\n+\n+  public static LocalTimeValue parse(CharSequence text)\n+  {\n+    return parse(LocalTimeValue.class, PATTERN, LocalTimeValue::parse, text);\n+  }\n+\n+  public static LocalTimeValue parse(TextValue text)\n+  {\n+    return parse(LocalTimeValue.class, PATTERN, LocalTimeValue::parse, text);\n+  }\n+\n+  public static LocalTimeValue now(Clock clock)\n+  {\n+    return new LocalTimeValue(LocalTime.now(clock));\n+  }\n+\n+  public static LocalTimeValue now(Clock clock, String timezone)\n+  {\n+    return now(clock.withZone(parseZoneName(timezone)));\n+  }\n+\n+  public static LocalTimeValue now(Clock clock, Supplier<ZoneId> defaultZone)\n+  {\n+    return now(clock.withZone(defaultZone.get()));\n+  }\n+\n+  public static LocalTimeValue build(MapValue map, Supplier<ZoneId> defaultZone)\n+  {\n+    return StructureBuilder.build(builder(defaultZone), map);\n+  }\n+\n+  public static LocalTimeValue select(AnyValue from, Supplier<ZoneId> defaultZone)\n+  {\n+    return builder(defaultZone).selectTime(from);\n+  }\n+\n+  public static LocalTimeValue truncate(\n+      TemporalUnit unit,\n+      TemporalValue input,\n+      MapValue fields,\n+      Supplier<ZoneId> defaultZone)\n+  {\n+    LocalTime localTime = input.getLocalTimePart();\n+    LocalTime truncatedLT = assertValidUnit(() -> localTime.truncatedTo(unit));\n+    if (fields.size() == 0)\n+    {\n+      return localTime(truncatedLT);\n+    } else\n+    {\n+      Map<String, AnyValue> updatedFields = fields.getMapCopy();\n+      truncatedLT = updateFieldMapWithConflictingSubseconds(updatedFields, unit, truncatedLT);\n+      if (updatedFields.size() == 0)\n+      {\n+        return localTime(truncatedLT);\n+      }\n+      updatedFields.put(\"time\", localTime(truncatedLT));\n+      return build(VirtualValues.map(updatedFields), defaultZone);\n+    }\n+  }\n+\n+  static final LocalTime DEFAULT_LOCAL_TIME = LocalTime.of(TemporalFields.hour.defaultValue, TemporalFields.minute.defaultValue);\n+\n+  static TimeValue.TimeBuilder<LocalTimeValue> builder(Supplier<ZoneId> defaultZone)\n+  {\n+    return new TimeValue.TimeBuilder<LocalTimeValue>(defaultZone)\n+    {\n+      @Override\n+      protected boolean supportsTimeZone()\n+      {\n+        return false;\n+      }\n \n-    public static LocalTimeValue truncate(\n-            TemporalUnit unit,\n-            TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n-    {\n-        LocalTime localTime = input.getLocalTimePart();\n-        LocalTime truncatedLT = assertValidUnit( () -> localTime.truncatedTo( unit ) );\n-        if ( fields.size() == 0 )\n+      @Override\n+      public LocalTimeValue buildInternal()\n+      {\n+        LocalTime result;\n+        if (fields.containsKey(TemporalFields.time))\n         {\n-            return localTime( truncatedLT );\n-        }\n-        else\n+          AnyValue time = fields.get(TemporalFields.time);\n+          if (!(time instanceof TemporalValue))\n+          {\n+            throw new InvalidValuesArgumentException(String.format(\"Cannot construct local time from: %s\", time));\n+          }\n+          result = ((TemporalValue) time).getLocalTimePart();\n+        } else\n         {\n-            Map<String,AnyValue> updatedFields = fields.getMapCopy();\n-            truncatedLT = updateFieldMapWithConflictingSubseconds( updatedFields, unit, truncatedLT );\n-            if ( updatedFields.size() == 0 )\n-            {\n-                return localTime( truncatedLT );\n-            }\n-            updatedFields.put( \"time\", localTime( truncatedLT ) );\n-            return build( VirtualValues.map( updatedFields ), defaultZone );\n+          result = DEFAULT_LOCAL_TIME;\n         }\n-    }\n-\n-    static final LocalTime DEFAULT_LOCAL_TIME = LocalTime.of( TemporalFields.hour.defaultValue, TemporalFields.minute.defaultValue );\n-\n-    static TimeValue.TimeBuilder<LocalTimeValue> builder( Supplier<ZoneId> defaultZone )\n-    {\n-        return new TimeValue.TimeBuilder<LocalTimeValue>( defaultZone )\n-        {\n-            @Override\n-            protected boolean supportsTimeZone()\n-            {\n-                return false;\n-            }\n-\n-            @Override\n-            public LocalTimeValue buildInternal()\n-            {\n-                LocalTime result;\n-                if ( fields.containsKey( TemporalFields.time ) )\n-                {\n-                    AnyValue time = fields.get( TemporalFields.time );\n-                    if ( !(time instanceof TemporalValue) )\n-                    {\n-                        throw new InvalidValuesArgumentException( String.format( \"Cannot construct local time from: %s\", time ) );\n-                    }\n-                    result = ((TemporalValue) time).getLocalTimePart();\n-                }\n-                else\n-                {\n-                    result = DEFAULT_LOCAL_TIME;\n-                }\n-\n-                result = assignAllFields( result );\n-                return localTime( result );\n-            }\n-\n-            @Override\n-            protected LocalTimeValue selectTime(\n-                    AnyValue time )\n-            {\n-\n-                if ( !(time instanceof TemporalValue) )\n-                {\n-                    throw new InvalidValuesArgumentException( String.format( \"Cannot construct local time from: %s\", time ) );\n-                }\n-                TemporalValue v = (TemporalValue) time;\n-                LocalTime lt = v.getLocalTimePart();\n-                return localTime( lt );\n-            }\n-        };\n-    }\n-\n-    private final LocalTime value;\n-\n-    private LocalTimeValue( LocalTime value )\n-    {\n-        this.value = value;\n-    }\n-\n-    @Override\n-    int unsafeCompareTo( Value otherValue )\n-    {\n-        LocalTimeValue other = (LocalTimeValue) otherValue;\n-        return value.compareTo( other.value );\n-    }\n-\n-    @Override\n-    LocalTime temporal()\n-    {\n-        return value;\n-    }\n \n-    @Override\n-    LocalDate getDatePart()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the date of: %s\", this ) );\n-    }\n+        result = assignAllFields(result);\n+        return localTime(result);\n+      }\n \n-    @Override\n-    public String getTypeName()\n-    {\n-        return \"LocalTime\";\n-    }\n+      @Override\n+      protected LocalTimeValue selectTime(\n+          AnyValue time)\n+      {\n \n-    @Override\n-    LocalTime getLocalTimePart()\n-    {\n-        return value;\n-    }\n-\n-    @Override\n-    OffsetTime getTimePart( Supplier<ZoneId> defaultZone )\n-    {\n-        ZoneOffset currentOffset = assertValidArgument( () ->  ZonedDateTime.ofInstant( Instant.now(), defaultZone.get() ) ).getOffset();\n-        return OffsetTime.of( value, currentOffset );\n-    }\n-\n-    @Override\n-    ZoneId getZoneId( Supplier<ZoneId> defaultZone )\n-    {\n-        return defaultZone.get();\n-    }\n-\n-    @Override\n-    ZoneId getZoneId()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the timezone of: %s\", this ) );\n-    }\n-\n-    @Override\n-    ZoneOffset getZoneOffset()\n-    {\n-        throw new UnsupportedTemporalUnitException( String.format( \"Cannot get the offset of: %s\", this ) );\n-    }\n-\n-    @Override\n-    public boolean supportsTimeZone()\n-    {\n-        return false;\n-    }\n-\n-    @Override\n-    boolean hasTime()\n-    {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean equals( Value other )\n-    {\n-        return other instanceof LocalTimeValue && value.equals( ((LocalTimeValue) other).value );\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n-    {\n-        writer.writeLocalTime( value );\n-    }\n-\n-    @Override\n-    public String prettyPrint()\n-    {\n-        return assertPrintable( () -> value.format( DateTimeFormatter.ISO_LOCAL_TIME ) );\n-    }\n-\n-    @Override\n-    public ValueGroup valueGroup()\n-    {\n-        return ValueGroup.LOCAL_TIME;\n-    }\n-\n-    @Override\n-    protected int computeHash()\n-    {\n-        return value.hashCode();\n-    }\n-\n-    @Override\n-    public <T> T map( ValueMapper<T> mapper )\n-    {\n-        return mapper.mapLocalTime( this );\n-    }\n-\n-    @Override\n-    public LocalTimeValue add( DurationValue duration )\n-    {\n-        return replacement( assertValidArithmetic( () -> value.plusNanos( duration.nanosOfDay() ) ) );\n-    }\n-\n-    @Override\n-    public LocalTimeValue sub( DurationValue duration )\n-    {\n-        return replacement( assertValidArithmetic( () -> value.minusNanos( duration.nanosOfDay() ) ) );\n-    }\n-\n-    @Override\n-    LocalTimeValue replacement( LocalTime time )\n-    {\n-        return time == value ? this : new LocalTimeValue( time );\n-    }\n-\n-    static final String TIME_PATTERN = \"(?:(?:(?<longHour>[0-9]{1,2})(?::(?<longMinute>[0-9]{1,2})\"\n-            + \"(?::(?<longSecond>[0-9]{1,2})(?:\\\\.(?<longFraction>[0-9]{1,9}))?)?)?)|\"\n-            + \"(?:(?<shortHour>[0-9]{2})(?:(?<shortMinute>[0-9]{2})\"\n-            + \"(?:(?<shortSecond>[0-9]{2})(?:\\\\.(?<shortFraction>[0-9]{1,9}))?)?)?))\";\n-    private static final Pattern PATTERN = Pattern.compile( \"(?:T)?\" + TIME_PATTERN );\n-\n-    private static LocalTimeValue parse( Matcher matcher )\n-    {\n-        return new LocalTimeValue( parseTime( matcher ) );\n-    }\n-\n-    static LocalTime parseTime( Matcher matcher )\n-    {\n-        int hour;\n-        int minute;\n-        int second;\n-        int fraction;\n-        String longHour = matcher.group( \"longHour\" );\n-        if ( longHour != null )\n-        {\n-            hour = parseInt( longHour );\n-            minute = optInt( matcher.group( \"longMinute\" ) );\n-            second = optInt( matcher.group( \"longSecond\" ) );\n-            fraction = parseNanos( matcher.group( \"longFraction\" ) );\n-        }\n-        else\n+        if (!(time instanceof TemporalValue))\n         {\n-            String shortHour = matcher.group( \"shortHour\" );\n-            hour = parseInt( shortHour );\n-            minute = optInt( matcher.group( \"shortMinute\" ) );\n-            second = optInt( matcher.group( \"shortSecond\" ) );\n-            fraction = parseNanos( matcher.group( \"shortFraction\" ) );\n+          throw new InvalidValuesArgumentException(String.format(\"Cannot construct local time from: %s\", time));\n         }\n-        return assertParsable( () -> LocalTime.of( hour, minute, second, fraction ) );\n-    }\n-\n-    private static int parseNanos( String value )\n-    {\n-        if ( value == null )\n-        {\n-            return 0;\n-        }\n-        int nanos = parseInt( value );\n-        if ( nanos != 0 )\n-        {\n-            for ( int i = value.length(); i < 9; i++ )\n-            {\n-                nanos *= 10;\n-            }\n-        }\n-        return nanos;\n-    }\n-\n-    static int optInt( String value )\n-    {\n-        return value == null ? 0 : parseInt( value );\n-    }\n+        TemporalValue v = (TemporalValue) time;\n+        LocalTime lt = v.getLocalTimePart();\n+        return localTime(lt);\n+      }\n+    };\n+  }\n+\n+  private final LocalTime value;\n+\n+  private LocalTimeValue(LocalTime value)\n+  {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  int unsafeCompareTo(Value otherValue)\n+  {\n+    LocalTimeValue other = (LocalTimeValue) otherValue;\n+    return value.compareTo(other.value);\n+  }\n+\n+  @Override\n+  LocalTime temporal()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  LocalDate getDatePart()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the date of: %s\", this));\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"LocalTime\";\n+  }\n+\n+  @Override\n+  LocalTime getLocalTimePart()\n+  {\n+    return value;\n+  }\n+\n+  @Override\n+  OffsetTime getTimePart(Supplier<ZoneId> defaultZone)\n+  {\n+    ZoneOffset currentOffset = assertValidArgument(() -> ZonedDateTime.ofInstant(Instant.now(), defaultZone.get())).getOffset();\n+    return OffsetTime.of(value, currentOffset);\n+  }\n+\n+  @Override\n+  ZoneId getZoneId(Supplier<ZoneId> defaultZone)\n+  {\n+    return defaultZone.get();\n+  }\n+\n+  @Override\n+  ZoneId getZoneId()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the timezone of: %s\", this));\n+  }\n+\n+  @Override\n+  ZoneOffset getZoneOffset()\n+  {\n+    throw new UnsupportedTemporalUnitException(String.format(\"Cannot get the offset of: %s\", this));\n+  }\n+\n+  @Override\n+  public boolean supportsTimeZone()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  boolean hasTime()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean equals(Value other)\n+  {\n+    return other instanceof LocalTimeValue && value.equals(((LocalTimeValue) other).value);\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeLocalTime(value);\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    return assertPrintable(() -> value.format(DateTimeFormatter.ISO_LOCAL_TIME));\n+  }\n+\n+  @Override\n+  public ValueGroup valueGroup()\n+  {\n+    return ValueGroup.LOCAL_TIME;\n+  }\n+\n+  @Override\n+  protected int computeHash()\n+  {\n+    return value.hashCode();\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapLocalTime(this);\n+  }\n+\n+  @Override\n+  public LocalTimeValue add(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.plusNanos(duration.nanosOfDay())));\n+  }\n+\n+  @Override\n+  public LocalTimeValue sub(DurationValue duration)\n+  {\n+    return replacement(assertValidArithmetic(() -> value.minusNanos(duration.nanosOfDay())));\n+  }\n+\n+  @Override\n+  LocalTimeValue replacement(LocalTime time)\n+  {\n+    return time == value ? this : new LocalTimeValue(time);\n+  }\n+\n+  static final String TIME_PATTERN = \"(?:(?:(?<longHour>[0-9]{1,2})(?::(?<longMinute>[0-9]{1,2})\"\n+      + \"(?::(?<longSecond>[0-9]{1,2})(?:\\\\.(?<longFraction>[0-9]{1,9}))?)?)?)|\"\n+      + \"(?:(?<shortHour>[0-9]{2})(?:(?<shortMinute>[0-9]{2})\"\n+      + \"(?:(?<shortSecond>[0-9]{2})(?:\\\\.(?<shortFraction>[0-9]{1,9}))?)?)?))\";\n+  private static final Pattern PATTERN = Pattern.compile(\"(?:T)?\" + TIME_PATTERN);\n+\n+  private static LocalTimeValue parse(Matcher matcher)\n+  {\n+    return new LocalTimeValue(parseTime(matcher));\n+  }\n+\n+  static LocalTime parseTime(Matcher matcher)\n+  {\n+    int hour;\n+    int minute;\n+    int second;\n+    int fraction;\n+    String longHour = matcher.group(\"longHour\");\n+    if (longHour != null)\n+    {\n+      hour = parseInt(longHour);\n+      minute = optInt(matcher.group(\"longMinute\"));\n+      second = optInt(matcher.group(\"longSecond\"));\n+      fraction = parseNanos(matcher.group(\"longFraction\"));\n+    } else\n+    {\n+      String shortHour = matcher.group(\"shortHour\");\n+      hour = parseInt(shortHour);\n+      minute = optInt(matcher.group(\"shortMinute\"));\n+      second = optInt(matcher.group(\"shortSecond\"));\n+      fraction = parseNanos(matcher.group(\"shortFraction\"));\n+    }\n+    return assertParsable(() -> LocalTime.of(hour, minute, second, fraction));\n+  }\n+\n+  private static int parseNanos(String value)\n+  {\n+    if (value == null)\n+    {\n+      return 0;\n+    }\n+    int nanos = parseInt(value);\n+    if (nanos != 0)\n+    {\n+      for (int i = value.length(); i < 9; i++)\n+      {\n+        nanos *= 10;\n+      }\n+    }\n+    return nanos;\n+  }\n+\n+  static int optInt(String value)\n+  {\n+    return value == null ? 0 : parseInt(value);\n+  }\n }\n",
            "diff_size": 515
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "306",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 306).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/86/LocalTimeValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/86/LocalTimeValue.java\nindex 61eda9a61fc..992b11ad706 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/86/LocalTimeValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/86/LocalTimeValue.java\n@@ -101,11 +101,9 @@ public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue\n         return builder( defaultZone ).selectTime( from );\n     }\n \n-    public static LocalTimeValue truncate(\n-            TemporalUnit unit,\n+    public static LocalTimeValue truncate( TemporalUnit unit,\n             TemporalValue input,\n-            MapValue fields,\n-            Supplier<ZoneId> defaultZone )\n+            MapValue fields, Supplier<ZoneId> defaultZone )\n     {\n         LocalTime localTime = input.getLocalTimePart();\n         LocalTime truncatedLT = assertValidUnit( () -> localTime.truncatedTo( unit ) );\n@@ -145,11 +143,12 @@ public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue\n                 if ( fields.containsKey( TemporalFields.time ) )\n                 {\n                     AnyValue time = fields.get( TemporalFields.time );\n-                    if ( !(time instanceof TemporalValue) )\n+                    if ( !( time instanceof TemporalValue) )\n                     {\n                         throw new InvalidValuesArgumentException( String.format( \"Cannot construct local time from: %s\", time ) );\n                     }\n-                    result = ((TemporalValue) time).getLocalTimePart();\n+\n+result = ((TemporalValue) time).getLocalTimePart();\n                 }\n                 else\n                 {\n@@ -161,15 +160,14 @@ public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue\n             }\n \n             @Override\n-            protected LocalTimeValue selectTime(\n-                    AnyValue time )\n+            protected LocalTimeValue selectTime( AnyValue time )\n             {\n-\n-                if ( !(time instanceof TemporalValue) )\n+    if ( !( time instanceof TemporalValue) )\n                 {\n                     throw new InvalidValuesArgumentException( String.format( \"Cannot construct local time from: %s\", time ) );\n                 }\n-                TemporalValue v = (TemporalValue) time;\n+\n+TemporalValue v = (TemporalValue) time;\n                 LocalTime lt = v.getLocalTimePart();\n                 return localTime( lt );\n             }\n@@ -217,7 +215,7 @@ public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue\n     @Override\n     OffsetTime getTimePart( Supplier<ZoneId> defaultZone )\n     {\n-        ZoneOffset currentOffset = assertValidArgument( () ->  ZonedDateTime.ofInstant( Instant.now(), defaultZone.get() ) ).getOffset();\n+        ZoneOffset currentOffset = assertValidArgument( () -> ZonedDateTime.ofInstant( Instant.now(), defaultZone.get() ) ).getOffset();\n         return OffsetTime.of( value, currentOffset );\n     }\n \n@@ -305,11 +303,8 @@ public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue\n         return time == value ? this : new LocalTimeValue( time );\n     }\n \n-    static final String TIME_PATTERN = \"(?:(?:(?<longHour>[0-9]{1,2})(?::(?<longMinute>[0-9]{1,2})\"\n-            + \"(?::(?<longSecond>[0-9]{1,2})(?:\\\\.(?<longFraction>[0-9]{1,9}))?)?)?)|\"\n-            + \"(?:(?<shortHour>[0-9]{2})(?:(?<shortMinute>[0-9]{2})\"\n-            + \"(?:(?<shortSecond>[0-9]{2})(?:\\\\.(?<shortFraction>[0-9]{1,9}))?)?)?))\";\n-    private static final Pattern PATTERN = Pattern.compile( \"(?:T)?\" + TIME_PATTERN );\n+    static final String TIME_PATTERN = \"(?:(?:(?<longHour>[0-9]{1,2})(?::(?<longMinute>[0-9]{1,2})\" + \"(?::(?<longSecond>[0-9]{1,2})(?:\\\\.(?<longFraction>[0-9]{1,9}))?)?)?)|\" + \"(?:(?<shortHour>[0-9]{2})(?:(?<shortMinute>[0-9]{2})\" + \"(?:(?<shortSecond>[0-9]{2})(?:\\\\.(?<shortFraction>[0-9]{1,9}))?)?)?))\";\n+private static final Pattern PATTERN = Pattern.compile( \"(?:T)?\" + TIME_PATTERN );\n \n     private static LocalTimeValue parse( Matcher matcher )\n     {\n@@ -338,7 +333,8 @@ public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue\n             second = optInt( matcher.group( \"shortSecond\" ) );\n             fraction = parseNanos( matcher.group( \"shortFraction\" ) );\n         }\n-        return assertParsable( () -> LocalTime.of( hour, minute, second, fraction ) );\n+\n+return assertParsable( () -> LocalTime.of( hour, minute, second, fraction ) );\n     }\n \n     private static int parseNanos( String value )\n@@ -362,4 +358,4 @@ public final class LocalTimeValue extends TemporalValue<LocalTime,LocalTimeValue\n     {\n         return value == null ? 0 : parseInt( value );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}