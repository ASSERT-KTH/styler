{
    "project_name": "codefollower-H2-Research",
    "error_id": "477",
    "information": {
        "errors": [
            {
                "line": "55",
                "column": "7",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "//    @Override\n//    public String getSQL() {\n//    \t//\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528StringUtils.quoteIdentifier\u6027\u80fd\u66f4\u597d\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u60c5\u51b5\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6807\u8bc6\u7b26\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\uff0c\n//        //\u8fd9\u65f6\u5c31\u4e0d\u5fc5\u8981\u518d\u91cd\u65b0\u6784\u9020\u4e00\u4e2a\u52a0\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\n//        return \"@\" + Parser.quoteIdentifier(name);\n//    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "55",
                    "column": "7",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "56",
                    "column": "7",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/477/Variable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/477/Variable.java\nindex f78a34e4f47..60d8045c5a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/477/Variable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/477/Variable.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression;\n \n import org.h2.command.Parser;\n@@ -17,35 +18,35 @@ import org.h2.value.Value;\n  * A user-defined variable, for example: @ID.\n  */\n public class Variable extends Expression {\n-    // \u5bf9\u4e8e\u5982\u4e0b\u8bed\u53e5:\n-    // SET @topVariableName=3\n-    // select @topVariableName\n-    // select @nullVariableName //\u4e0d\u5b58\u5728\u7684\u53d8\u91cf\u540d\uff0c\u6b64\u65f6\u503c\u4e3aValueNull.INSTANCE\n-    // \u5b57\u6bb5name\u548clastValue\u5206\u522b\u662f\n-    // topVariableName, 3\n-    // nullVariableName, ValueNull.INSTANCE\n-    private final String name;\n-    private Value lastValue;\n-    \n-    //\u53ea\u770b\u5230\u5728org.h2.command.Parser.readTerm()\u4e2d\u4f7f\u7528\n-    public Variable(Session session, String name) {\n-        this.name = name;\n-        lastValue = session.getVariable(name);\n-    }\n+  // \u5bf9\u4e8e\u5982\u4e0b\u8bed\u53e5:\n+  // SET @topVariableName=3\n+  // select @topVariableName\n+  // select @nullVariableName //\u4e0d\u5b58\u5728\u7684\u53d8\u91cf\u540d\uff0c\u6b64\u65f6\u503c\u4e3aValueNull.INSTANCE\n+  // \u5b57\u6bb5name\u548clastValue\u5206\u522b\u662f\n+  // topVariableName, 3\n+  // nullVariableName, ValueNull.INSTANCE\n+  private final String name;\n+  private Value lastValue;\n \n-    @Override\n-    public int getCost() {\n-        return 0;\n-    }\n+  //\u53ea\u770b\u5230\u5728org.h2.command.Parser.readTerm()\u4e2d\u4f7f\u7528\n+  public Variable(Session session, String name) {\n+    this.name = name;\n+    lastValue = session.getVariable(name);\n+  }\n \n-    @Override\n-    public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n-        builder.append('@');\n-        return Parser.quoteIdentifier(builder, name, alwaysQuote);\n-    }\n+  @Override\n+  public int getCost() {\n+    return 0;\n+  }\n+\n+  @Override\n+  public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n+    builder.append('@');\n+    return Parser.quoteIdentifier(builder, name, alwaysQuote);\n+  }\n \n \n-//<<<<<<< HEAD\n+  //<<<<<<< HEAD\n //    public long getPrecision() {\n //        return lastValue.getPrecision();\n //    }\n@@ -65,65 +66,65 @@ public class Variable extends Expression {\n //    @Override\n //    public int getType() {\n //=======\n-    @Override\n-    public TypeInfo getType() {\n-        return lastValue.getType();\n-    }\n+  @Override\n+  public TypeInfo getType() {\n+    return lastValue.getType();\n+  }\n \n-    @Override\n-    public Value getValue(Session session) {\n-        lastValue = session.getVariable(name);\n-        return lastValue;\n-    }\n+  @Override\n+  public Value getValue(Session session) {\n+    lastValue = session.getVariable(name);\n+    return lastValue;\n+  }\n \n-    @Override\n-    public boolean isEverything(ExpressionVisitor visitor) {\n-        switch (visitor.getType()) {\n-        case ExpressionVisitor.EVALUATABLE:\n-            // the value will be evaluated at execute time\n-        case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:\n-            // it is checked independently if the value is the same as the last\n-            // time\n-        case ExpressionVisitor.OPTIMIZABLE_AGGREGATE:\n-        case ExpressionVisitor.READONLY:\n-        case ExpressionVisitor.INDEPENDENT:\n-        case ExpressionVisitor.NOT_FROM_RESOLVER:\n-        case ExpressionVisitor.QUERY_COMPARABLE:\n-        case ExpressionVisitor.GET_DEPENDENCIES:\n-        case ExpressionVisitor.GET_COLUMNS1:\n-        case ExpressionVisitor.GET_COLUMNS2:\n-            return true;\n-        case ExpressionVisitor.DETERMINISTIC:\n-        \t//\u56e0\u4e3a\u53d8\u91cf\u672c\u8eab\u5c31\u662f\u53ef\u53d8\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u786e\u5b9a\uff0c\n-        \t//\u5f53\u8981\u5224\u65ad\u5f53\u524d\u8868\u8fbe\u5f0f(\u5373\u53d8\u91cf)\u662f\u5426\u6ee1\u8db3ExpressionVisitor.DETERMINISTIC(\u786e\u5b9a\u6027)\u65f6\u663e\u7136\u8fd4\u56defalse\n-            return false;\n-        default:\n-            throw DbException.throwInternalError(\"type=\"+visitor.getType());\n-        }\n+  @Override\n+  public boolean isEverything(ExpressionVisitor visitor) {\n+    switch (visitor.getType()) {\n+      case ExpressionVisitor.EVALUATABLE:\n+        // the value will be evaluated at execute time\n+      case ExpressionVisitor.SET_MAX_DATA_MODIFICATION_ID:\n+        // it is checked independently if the value is the same as the last\n+        // time\n+      case ExpressionVisitor.OPTIMIZABLE_AGGREGATE:\n+      case ExpressionVisitor.READONLY:\n+      case ExpressionVisitor.INDEPENDENT:\n+      case ExpressionVisitor.NOT_FROM_RESOLVER:\n+      case ExpressionVisitor.QUERY_COMPARABLE:\n+      case ExpressionVisitor.GET_DEPENDENCIES:\n+      case ExpressionVisitor.GET_COLUMNS1:\n+      case ExpressionVisitor.GET_COLUMNS2:\n+        return true;\n+      case ExpressionVisitor.DETERMINISTIC:\n+        //\u56e0\u4e3a\u53d8\u91cf\u672c\u8eab\u5c31\u662f\u53ef\u53d8\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u786e\u5b9a\uff0c\n+        //\u5f53\u8981\u5224\u65ad\u5f53\u524d\u8868\u8fbe\u5f0f(\u5373\u53d8\u91cf)\u662f\u5426\u6ee1\u8db3ExpressionVisitor.DETERMINISTIC(\u786e\u5b9a\u6027)\u65f6\u663e\u7136\u8fd4\u56defalse\n+        return false;\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + visitor.getType());\n     }\n+  }\n \n-    @Override\n-    public void mapColumns(ColumnResolver resolver, int level, int state) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void mapColumns(ColumnResolver resolver, int level, int state) {\n+    // nothing to do\n+  }\n \n-    @Override\n-    public Expression optimize(Session session) {\n-        return this;\n-    }\n+  @Override\n+  public Expression optimize(Session session) {\n+    return this;\n+  }\n \n-    @Override\n-    public void setEvaluatable(TableFilter tableFilter, boolean value) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void setEvaluatable(TableFilter tableFilter, boolean value) {\n+    // nothing to do\n+  }\n \n-    @Override\n-    public void updateAggregate(Session session, int stage) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void updateAggregate(Session session, int stage) {\n+    // nothing to do\n+  }\n \n-    public String getName() {\n-        return name;\n-    }\n+  public String getName() {\n+    return name;\n+  }\n \n }\n",
            "diff_size": 85
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/477/Variable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/477/Variable.java\nindex f78a34e4f47..cb1f42215b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/477/Variable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/477/Variable.java\n@@ -16,6 +16,8 @@ import org.h2.value.Value;\n /**\n  * A user-defined variable, for example: @ID.\n  */\n+\n+\n public class Variable extends Expression {\n     // \u5bf9\u4e8e\u5982\u4e0b\u8bed\u53e5:\n     // SET @topVariableName=3\n@@ -24,10 +26,12 @@ public class Variable extends Expression {\n     // \u5b57\u6bb5name\u548clastValue\u5206\u522b\u662f\n     // topVariableName, 3\n     // nullVariableName, ValueNull.INSTANCE\n+\n     private final String name;\n     private Value lastValue;\n     \n     //\u53ea\u770b\u5230\u5728org.h2.command.Parser.readTerm()\u4e2d\u4f7f\u7528\n+\n     public Variable(Session session, String name) {\n         this.name = name;\n         lastValue = session.getVariable(name);\n@@ -52,7 +56,7 @@ public class Variable extends Expression {\n //\n //    @Override\n //    public String getSQL() {\n-//    \t//\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528StringUtils.quoteIdentifier\u6027\u80fd\u66f4\u597d\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u60c5\u51b5\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6807\u8bc6\u7b26\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\uff0c\n+//      //\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528StringUtils.quoteIdentifier\u6027\u80fd\u66f4\u597d\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u60c5\u51b5\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6807\u8bc6\u7b26\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\uff0c\n //        //\u8fd9\u65f6\u5c31\u4e0d\u5fc5\u8981\u518d\u91cd\u65b0\u6784\u9020\u4e00\u4e2a\u52a0\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\n //        return \"@\" + Parser.quoteIdentifier(name);\n //    }\n@@ -65,6 +69,7 @@ public class Variable extends Expression {\n //    @Override\n //    public int getType() {\n //=======\n+\n     @Override\n     public TypeInfo getType() {\n         return lastValue.getType();\n@@ -94,17 +99,18 @@ public class Variable extends Expression {\n         case ExpressionVisitor.GET_COLUMNS2:\n             return true;\n         case ExpressionVisitor.DETERMINISTIC:\n-        \t//\u56e0\u4e3a\u53d8\u91cf\u672c\u8eab\u5c31\u662f\u53ef\u53d8\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u786e\u5b9a\uff0c\n-        \t//\u5f53\u8981\u5224\u65ad\u5f53\u524d\u8868\u8fbe\u5f0f(\u5373\u53d8\u91cf)\u662f\u5426\u6ee1\u8db3ExpressionVisitor.DETERMINISTIC(\u786e\u5b9a\u6027)\u65f6\u663e\u7136\u8fd4\u56defalse\n+            //\u56e0\u4e3a\u53d8\u91cf\u672c\u8eab\u5c31\u662f\u53ef\u53d8\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u786e\u5b9a\uff0c\n+            //\u5f53\u8981\u5224\u65ad\u5f53\u524d\u8868\u8fbe\u5f0f(\u5373\u53d8\u91cf)\u662f\u5426\u6ee1\u8db3ExpressionVisitor.DETERMINISTIC(\u786e\u5b9a\u6027)\u65f6\u663e\u7136\u8fd4\u56defalse\n             return false;\n         default:\n-            throw DbException.throwInternalError(\"type=\"+visitor.getType());\n+            throw DbException.throwInternalError(\"type=\" + visitor.getType());\n         }\n     }\n \n     @Override\n     public void mapColumns(ColumnResolver resolver, int level, int state) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -115,15 +121,18 @@ public class Variable extends Expression {\n     @Override\n     public void setEvaluatable(TableFilter tableFilter, boolean value) {\n         // nothing to do\n+\n     }\n \n     @Override\n     public void updateAggregate(Session session, int stage) {\n         // nothing to do\n+\n     }\n \n+\n     public String getName() {\n         return name;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "55",
                    "column": "7",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "97",
                    "column": "9",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/477/Variable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/477/Variable.java\nindex f78a34e4f47..36d15ef3bc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/477/Variable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/477/Variable.java\n@@ -52,7 +52,7 @@ public class Variable extends Expression {\n //\n //    @Override\n //    public String getSQL() {\n-//    \t//\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528StringUtils.quoteIdentifier\u6027\u80fd\u66f4\u597d\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u60c5\u51b5\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6807\u8bc6\u7b26\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\uff0c\n+//        //\u8fd9\u65f6\u5c31\u4e0d\u5fc5\u8981\u518d\u91cd\u65b0\u6784\u9020\u4e00\u4e2a\u52a0\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\n //        //\u8fd9\u65f6\u5c31\u4e0d\u5fc5\u8981\u518d\u91cd\u65b0\u6784\u9020\u4e00\u4e2a\u52a0\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\n //        return \"@\" + Parser.quoteIdentifier(name);\n //    }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}