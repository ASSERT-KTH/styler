{
    "project_name": "wso2-attic-commons",
    "error_id": "377",
    "information": {
        "errors": [
            {
                "line": "335",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\n            }\n            else if (object instanceof XmlSchemaComplexType && ((XmlSchemaComplexType) object).getQName().equals(name)) {\n                //return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\n            \treturn (XmlSchemaComplexType) object;\n            } ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "335",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/377/DataServiceDocLitWrappedSchemaGenerator.java\nindex cd4ae148c82..dae461ae8f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/377/DataServiceDocLitWrappedSchemaGenerator.java\n@@ -334,7 +334,7 @@ public class DataServiceDocLitWrappedSchemaGenerator {\n             }\r\n             else if (object instanceof XmlSchemaComplexType && ((XmlSchemaComplexType) object).getQName().equals(name)) {\r\n                 //return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\r\n-            \treturn (XmlSchemaComplexType) object;\r\n+                          return (XmlSchemaComplexType) object;\r\n             } \r\n             \r\n         }\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/377/DataServiceDocLitWrappedSchemaGenerator.java\nindex cd4ae148c82..fd98ba8dbe1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/377/DataServiceDocLitWrappedSchemaGenerator.java\n@@ -25,319 +25,317 @@ import org.apache.ws.commons.schema.utils.NamespaceMap;\n import org.wso2.ws.dataservice.beans.Param;\r\n \r\n /*\r\n-* Copyright 2004,2005 The Apache Software Foundation.\r\n-*\r\n-* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n-* you may not use this file except in compliance with the License.\r\n-* You may obtain a copy of the License at\r\n-*\r\n-*      http://www.apache.org/licenses/LICENSE-2.0\r\n-*\r\n-* Unless required by applicable law or agreed to in writing, software\r\n-* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n-* See the License for the specific language governing permissions and\r\n-* limitations under the License.\r\n-*\r\n-*\r\n-*/\r\n+ * Copyright 2004,2005 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ *\r\n+ *\r\n+ */\r\n+\r\n /**\r\n  * This class is used to generate XML Schema for Data Service\r\n  */\r\n public class DataServiceDocLitWrappedSchemaGenerator {\r\n \r\n-    private AxisService axisService;\r\n-    protected Map schemaMap = new Hashtable();\r\n-    protected TypeTable typeTable = new TypeTable();\r\n-    protected String schemaTargetNameSpace;\r\n-    protected String schema_namespace_prefix;\r\n-    public static final String NAME_SPACE_PREFIX = \"ax2\";// axis2 name space\r\n-\r\n-    private static int prefixCount = 1;\r\n-    protected String attrFormDefault = null;\r\n-\r\n-    protected String elementFormDefault = null;\r\n-\r\n-    protected XmlSchemaCollection xmlSchemaCollection = new XmlSchemaCollection();\r\n-\r\n-    protected Map targetNamespacePrefixMap = new Hashtable();\r\n-    private Map queryRefMap;\r\n-\r\n-    public DataServiceDocLitWrappedSchemaGenerator(AxisService axisService, Map queryRefMap) {\r\n-        this.axisService = axisService;\r\n-        schemaTargetNameSpace = axisService.getTargetNamespace();\r\n-        axisService.setSchemaTargetNamespace(schemaTargetNameSpace);\r\n-        schema_namespace_prefix = axisService.getSchemaTargetNamespacePrefix();\r\n-        this.queryRefMap = queryRefMap;\r\n+  private AxisService axisService;\r\n+  protected Map schemaMap = new Hashtable();\r\n+  protected TypeTable typeTable = new TypeTable();\r\n+  protected String schemaTargetNameSpace;\r\n+  protected String schema_namespace_prefix;\r\n+  public static final String NAME_SPACE_PREFIX = \"ax2\";// axis2 name space\r\n+\r\n+  private static int prefixCount = 1;\r\n+  protected String attrFormDefault = null;\r\n+\r\n+  protected String elementFormDefault = null;\r\n+\r\n+  protected XmlSchemaCollection xmlSchemaCollection = new XmlSchemaCollection();\r\n+\r\n+  protected Map targetNamespacePrefixMap = new Hashtable();\r\n+  private Map queryRefMap;\r\n+\r\n+  public DataServiceDocLitWrappedSchemaGenerator(AxisService axisService, Map queryRefMap) {\r\n+    this.axisService = axisService;\r\n+    schemaTargetNameSpace = axisService.getTargetNamespace();\r\n+    axisService.setSchemaTargetNamespace(schemaTargetNameSpace);\r\n+    schema_namespace_prefix = axisService.getSchemaTargetNamespacePrefix();\r\n+    this.queryRefMap = queryRefMap;\r\n+  }\r\n+\r\n+  /**\r\n+   * This go through AxisService and generate XMLSchema\r\n+   */\r\n+  public void generateSchema() {\r\n+    Iterator operations = axisService.getOperations();\r\n+    while (operations.hasNext()) {\r\n+      AxisOperation axisOperation = (AxisOperation) operations.next();\r\n+      generateSchemaforOperation(axisOperation);\r\n     }\r\n-\r\n-    /**\r\n-     * This go through AxisService and generate XMLSchema\r\n-     */\r\n-    public void generateSchema() {\r\n-        Iterator operations = axisService.getOperations();\r\n-        while (operations.hasNext()) {\r\n-            AxisOperation axisOperation = (AxisOperation) operations.next();\r\n-            generateSchemaforOperation(axisOperation);\r\n-        }\r\n-        axisService.addSchema(schemaMap.values());\r\n+    axisService.addSchema(schemaMap.values());\r\n //        try {\r\n //\t\t\taxisService.printSchema(System.out);\r\n //\t\t} catch (AxisFault e) {\r\n //\t\t\te.printStackTrace();\r\n //\t\t}\r\n+  }\r\n+\r\n+  /**\r\n+   * To generate schema element for operation , this will generate doc/lit/wrapped type schema\r\n+   *\r\n+   * @param axisOperation : AxisOperation\r\n+   */\r\n+  private void generateSchemaforOperation(AxisOperation axisOperation) {\r\n+    String operationName = axisOperation.getName().getLocalPart();\r\n+    AxisMessage inMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);\r\n+    Parameter callQueryParamter = axisOperation.getParameter(DBConstants.CALL_QUERY_ELEMENT);\r\n+    if (callQueryParamter == null) {\r\n+      return;\r\n     }\r\n-\r\n-    /**\r\n-     * To generate schema element for operation , this will generate doc/lit/wrapped type schema\r\n-     *\r\n-     * @param axisOperation : AxisOperation\r\n-     */\r\n-    private void generateSchemaforOperation(AxisOperation axisOperation) {\r\n-        String operationName = axisOperation.getName().getLocalPart();\r\n-        AxisMessage inMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_IN_VALUE);\r\n-        Parameter callQueryParamter = axisOperation.getParameter(DBConstants.CALL_QUERY_ELEMENT);\r\n-        if (callQueryParamter == null) {\r\n-            return;\r\n-        }\r\n-        CallQuery callQuery = (CallQuery) callQueryParamter.getValue();\r\n-        if (inMessage != null) {\r\n-            inMessage.setName(operationName + Java2WSDLConstants.MESSAGE_SUFFIX);\r\n-        }\r\n-        generateSchemaForInput(operationName, callQuery, inMessage);\r\n-        //processing outMessage\r\n-        AxisMessage outMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\r\n-        outMessage.setName(operationName + Java2WSDLConstants.RESPONSE);\r\n-        if (callQuery.getElementName() != null) {\r\n-        \t//generateSchemaForOutput(callQuery, false);\r\n-            generateSchemaForOutput(callQuery, true);\r\n-            outMessage.setElementQName(typeTable.getQNamefortheType(callQuery.getElementName()));\r\n-        }\r\n+    CallQuery callQuery = (CallQuery) callQueryParamter.getValue();\r\n+    if (inMessage != null) {\r\n+      inMessage.setName(operationName + Java2WSDLConstants.MESSAGE_SUFFIX);\r\n     }\r\n-\r\n-    private void generateSchemaForOutput(CallQuery callQuery , boolean addComplexType) {\r\n-        XmlSchemaComplexType methodSchemaType =\r\n-                createSchemaTypeForMethodPart(callQuery.getElementName(), callQuery , addComplexType);\r\n-        XmlSchemaSequence sequence = new XmlSchemaSequence();\r\n-        methodSchemaType.setParticle(sequence);\r\n-        QName rawQName = generateSchemaForRaw(callQuery);\r\n-        XmlSchemaElement elt1 = new XmlSchemaElement();\r\n-        elt1.setName(callQuery.getRawName());\r\n-        elt1.setSchemaTypeName(rawQName);\r\n-        sequence.getItems().add(elt1);\r\n-        elt1.setMinOccurs(0);\r\n-        elt1.setNillable(true);\r\n-        elt1.setMaxOccurs(Long.MAX_VALUE);\r\n-        //elt1.setQName(rawQName);\r\n-\r\n+    generateSchemaForInput(operationName, callQuery, inMessage);\r\n+    //processing outMessage\r\n+    AxisMessage outMessage = axisOperation.getMessage(WSDLConstants.MESSAGE_LABEL_OUT_VALUE);\r\n+    outMessage.setName(operationName + Java2WSDLConstants.RESPONSE);\r\n+    if (callQuery.getElementName() != null) {\r\n+      //generateSchemaForOutput(callQuery, false);\r\n+      generateSchemaForOutput(callQuery, true);\r\n+      outMessage.setElementQName(typeTable.getQNamefortheType(callQuery.getElementName()));\r\n     }\r\n+  }\r\n+\r\n+  private void generateSchemaForOutput(CallQuery callQuery, boolean addComplexType) {\r\n+    XmlSchemaComplexType methodSchemaType =\r\n+      createSchemaTypeForMethodPart(callQuery.getElementName(), callQuery, addComplexType);\r\n+    XmlSchemaSequence sequence = new XmlSchemaSequence();\r\n+    methodSchemaType.setParticle(sequence);\r\n+    QName rawQName = generateSchemaForRaw(callQuery);\r\n+    XmlSchemaElement elt1 = new XmlSchemaElement();\r\n+    elt1.setName(callQuery.getRawName());\r\n+    elt1.setSchemaTypeName(rawQName);\r\n+    sequence.getItems().add(elt1);\r\n+    elt1.setMinOccurs(0);\r\n+    elt1.setNillable(true);\r\n+    elt1.setMaxOccurs(Long.MAX_VALUE);\r\n+    //elt1.setQName(rawQName);\r\n+\r\n+  }\r\n+\r\n+  private QName generateSchemaForRaw(CallQuery callQuery) {\r\n+    //XmlSchema xmlSchema = getXmlSchema(schemaTargetNameSpace);\r\n+    XmlSchema xmlSchema = getXmlSchema(callQuery.getDefaultNamespace());\r\n \r\n-    private QName generateSchemaForRaw(CallQuery callQuery) {\r\n-        //XmlSchema xmlSchema = getXmlSchema(schemaTargetNameSpace);\r\n-    \tXmlSchema xmlSchema = getXmlSchema(callQuery.getDefaultNamespace());    \t\t\r\n-        \r\n //        QName elementName =\r\n //                new QName(this.schemaTargetNameSpace, callQuery.getRawName(),\r\n //                        this.schema_namespace_prefix);\r\n-    \t\r\n-        QName elementName = new QName(callQuery.getDefaultNamespace(), callQuery.getRawName(),\r\n-                    callQuery.getNsPrefix());\r\n-        \r\n-        XmlSchemaComplexType methodSchemaType = getComplexTypeForElement(xmlSchema, elementName);\r\n-        if (methodSchemaType == null) {\r\n-            methodSchemaType = new XmlSchemaComplexType(xmlSchema);\r\n-            methodSchemaType.setName(callQuery.getRawName());\r\n-            xmlSchema.getItems().add(methodSchemaType);\r\n-            xmlSchema.getElements().add(elementName, methodSchemaType);\r\n-        }\r\n-       \ttypeTable.addComplexSchema(callQuery.getRawName(), elementName);\t\r\n-    \t\r\n-        XmlSchemaSequence sequence = new XmlSchemaSequence();\r\n-        methodSchemaType.setParticle(sequence);\r\n-        ArrayList outParams = callQuery.getOutputParms();\r\n-        for (int i = 0; i < outParams.size(); i++) {\r\n-            Param param = (Param)outParams.get(i);\r\n-            generateSchemaForQueryElement(param, sequence);\r\n-        }\r\n-        ArrayList hrefs = callQuery.getQueryRefList();\r\n-        if (hrefs != null) {\r\n-            for (int i = 0; i < hrefs.size(); i++) {\r\n-                String ref = (String) hrefs.get(i);\r\n-                QName refQname = typeTable.getQNamefortheType(ref);\r\n-                if (refQname == null) {\r\n-                    CallQuery query = (CallQuery) queryRefMap.get(ref);\r\n-                    //if (query == null) {\r\n-                    if (query != null) {\r\n-                        refQname = generateTypeforRef(query);\r\n-                    }\r\n-                    if (refQname != null) {\r\n-                        XmlSchemaElement elt1 = new XmlSchemaElement();\r\n-                        elt1.setName(query.getElementName());\r\n-                        elt1.setQName(refQname);\r\n-                        elt1.setSchemaTypeName(refQname);\r\n-                        sequence.getItems().add(elt1);\r\n-                        elt1.setMinOccurs(0);\r\n-                        elt1.setNillable(true);\r\n-                    }\r\n-                }\r\n-            }\r\n-        }\r\n-        return typeTable.getQNamefortheType(callQuery.getRawName());\r\n-    }\r\n \r\n-    private QName generateTypeforRef(CallQuery query) {\r\n-        if (query.getElementName() != null) {\r\n-            generateSchemaForOutput(query, true);\r\n-            return typeTable.getQNamefortheType(query.getElementName());\r\n-        }\r\n-        return null;\r\n-    }\r\n+    QName elementName = new QName(callQuery.getDefaultNamespace(), callQuery.getRawName(),\r\n+      callQuery.getNsPrefix());\r\n \r\n-    private void generateSchemaForQueryElement(Param param, XmlSchemaSequence sequence) {\r\n-        QName schemaTypeName = typeTable.getSimpleSchemaTypeName(param.getSqlType());\r\n-        if (schemaTypeName == null) {\r\n-            //something has gone wrong.\r\n-        } else {\r\n+    XmlSchemaComplexType methodSchemaType = getComplexTypeForElement(xmlSchema, elementName);\r\n+    if (methodSchemaType == null) {\r\n+      methodSchemaType = new XmlSchemaComplexType(xmlSchema);\r\n+      methodSchemaType.setName(callQuery.getRawName());\r\n+      xmlSchema.getItems().add(methodSchemaType);\r\n+      xmlSchema.getElements().add(elementName, methodSchemaType);\r\n+    }\r\n+    typeTable.addComplexSchema(callQuery.getRawName(), elementName);\r\n+\r\n+    XmlSchemaSequence sequence = new XmlSchemaSequence();\r\n+    methodSchemaType.setParticle(sequence);\r\n+    ArrayList outParams = callQuery.getOutputParms();\r\n+    for (int i = 0; i < outParams.size(); i++) {\r\n+      Param param = (Param) outParams.get(i);\r\n+      generateSchemaForQueryElement(param, sequence);\r\n+    }\r\n+    ArrayList hrefs = callQuery.getQueryRefList();\r\n+    if (hrefs != null) {\r\n+      for (int i = 0; i < hrefs.size(); i++) {\r\n+        String ref = (String) hrefs.get(i);\r\n+        QName refQname = typeTable.getQNamefortheType(ref);\r\n+        if (refQname == null) {\r\n+          CallQuery query = (CallQuery) queryRefMap.get(ref);\r\n+          //if (query == null) {\r\n+          if (query != null) {\r\n+            refQname = generateTypeforRef(query);\r\n+          }\r\n+          if (refQname != null) {\r\n             XmlSchemaElement elt1 = new XmlSchemaElement();\r\n-            elt1.setName(param.getName());\r\n-            elt1.setSchemaTypeName(schemaTypeName);\r\n+            elt1.setName(query.getElementName());\r\n+            elt1.setQName(refQname);\r\n+            elt1.setSchemaTypeName(refQname);\r\n             sequence.getItems().add(elt1);\r\n             elt1.setMinOccurs(0);\r\n             elt1.setNillable(true);\r\n-\r\n+          }\r\n         }\r\n+      }\r\n     }\r\n+    return typeTable.getQNamefortheType(callQuery.getRawName());\r\n+  }\r\n \r\n-    private void generateSchemaForInput(String operationName, CallQuery callQuery, AxisMessage inMessage) {\r\n-        XmlSchemaSequence sequence = new XmlSchemaSequence();\r\n-        XmlSchemaComplexType methodSchemaType = createSchemaTypeForMethodPart(operationName,callQuery , false);\r\n-        methodSchemaType.setParticle(sequence);\r\n-\r\n-        ArrayList inputParams = callQuery.getInputParms();\r\n-        for (int i = 0; i < inputParams.size(); i++) {\r\n-            Param param = (Param) inputParams.get(i);\r\n-            if(\"IN\".equals(param.getType()) \r\n-            \t\t|| \"INOUT\".equals(param.getType())){\r\n-            \tgenerateSchemaForQueryElement(param, sequence);\r\n-            }            \r\n-        }\r\n-        inMessage.setElementQName(typeTable.getQNamefortheType(operationName));\r\n+  private QName generateTypeforRef(CallQuery query) {\r\n+    if (query.getElementName() != null) {\r\n+      generateSchemaForOutput(query, true);\r\n+      return typeTable.getQNamefortheType(query.getElementName());\r\n     }\r\n+    return null;\r\n+  }\r\n+\r\n+  private void generateSchemaForQueryElement(Param param, XmlSchemaSequence sequence) {\r\n+    QName schemaTypeName = typeTable.getSimpleSchemaTypeName(param.getSqlType());\r\n+    if (schemaTypeName == null) {\r\n+      //something has gone wrong.\r\n+    } else {\r\n+      XmlSchemaElement elt1 = new XmlSchemaElement();\r\n+      elt1.setName(param.getName());\r\n+      elt1.setSchemaTypeName(schemaTypeName);\r\n+      sequence.getItems().add(elt1);\r\n+      elt1.setMinOccurs(0);\r\n+      elt1.setNillable(true);\r\n \r\n-    private XmlSchemaComplexType createSchemaTypeForMethodPart(String operationName,CallQuery callQuery ,\r\n-                                                               boolean addComplextype) {\r\n-        XmlSchema xmlSchema = getXmlSchema(callQuery.getDefaultNamespace());\r\n-        QName elementName =\r\n-                new QName(callQuery.getDefaultNamespace(), operationName, callQuery.getNsPrefix());\r\n-\r\n-        XmlSchemaComplexType complexType = getComplexTypeForElement(xmlSchema, elementName);\r\n-        if (complexType == null) {\r\n-            complexType = new XmlSchemaComplexType(xmlSchema);\r\n-\r\n-            XmlSchemaElement globalElement = new XmlSchemaElement();\r\n-            globalElement.setName(operationName);\r\n-            globalElement.setQName(elementName);\r\n-\r\n-            if (addComplextype) {\r\n-                complexType.setName(operationName);\r\n-                xmlSchema.getItems().add(complexType);\r\n-                globalElement.setSchemaTypeName(complexType.getQName());\r\n-            } else {\r\n-                globalElement.setSchemaType(complexType);\r\n-            }\r\n-             xmlSchema.getItems().add(globalElement);\r\n-            xmlSchema.getElements().add(elementName, globalElement);\r\n-        }\r\n-        typeTable.addComplexSchema(operationName, elementName);        \t\r\n-        \r\n-        return complexType;\r\n     }\r\n+  }\r\n+\r\n+  private void generateSchemaForInput(String operationName, CallQuery callQuery, AxisMessage inMessage) {\r\n+    XmlSchemaSequence sequence = new XmlSchemaSequence();\r\n+    XmlSchemaComplexType methodSchemaType = createSchemaTypeForMethodPart(operationName, callQuery, false);\r\n+    methodSchemaType.setParticle(sequence);\r\n+\r\n+    ArrayList inputParams = callQuery.getInputParms();\r\n+    for (int i = 0; i < inputParams.size(); i++) {\r\n+      Param param = (Param) inputParams.get(i);\r\n+      if (\"IN\".equals(param.getType())\r\n+        || \"INOUT\".equals(param.getType())) {\r\n+        generateSchemaForQueryElement(param, sequence);\r\n+      }\r\n+    }\r\n+    inMessage.setElementQName(typeTable.getQNamefortheType(operationName));\r\n+  }\r\n+\r\n+  private XmlSchemaComplexType createSchemaTypeForMethodPart(String operationName, CallQuery callQuery,\r\n+                                                             boolean addComplextype) {\r\n+    XmlSchema xmlSchema = getXmlSchema(callQuery.getDefaultNamespace());\r\n+    QName elementName =\r\n+      new QName(callQuery.getDefaultNamespace(), operationName, callQuery.getNsPrefix());\r\n+\r\n+    XmlSchemaComplexType complexType = getComplexTypeForElement(xmlSchema, elementName);\r\n+    if (complexType == null) {\r\n+      complexType = new XmlSchemaComplexType(xmlSchema);\r\n+\r\n+      XmlSchemaElement globalElement = new XmlSchemaElement();\r\n+      globalElement.setName(operationName);\r\n+      globalElement.setQName(elementName);\r\n+\r\n+      if (addComplextype) {\r\n+        complexType.setName(operationName);\r\n+        xmlSchema.getItems().add(complexType);\r\n+        globalElement.setSchemaTypeName(complexType.getQName());\r\n+      } else {\r\n+        globalElement.setSchemaType(complexType);\r\n+      }\r\n+      xmlSchema.getItems().add(globalElement);\r\n+      xmlSchema.getElements().add(elementName, globalElement);\r\n+    }\r\n+    typeTable.addComplexSchema(operationName, elementName);\r\n \r\n-    private XmlSchema getXmlSchema(String targetNamespace) {\r\n-        XmlSchema xmlSchema;\r\n-\r\n-        if ((xmlSchema = (XmlSchema) schemaMap.get(targetNamespace)) == null) {\r\n-            String targetNamespacePrefix;\r\n-\r\n-            if (targetNamespace.equals(schemaTargetNameSpace) &&\r\n-                    schema_namespace_prefix != null) {\r\n-                targetNamespacePrefix = schema_namespace_prefix;\r\n-            } else {\r\n-                targetNamespacePrefix = generatePrefix();\r\n-            }\r\n-\r\n+    return complexType;\r\n+  }\r\n \r\n-            xmlSchema = new XmlSchema(targetNamespace, xmlSchemaCollection);\r\n-            xmlSchema.setAttributeFormDefault(getAttrFormDefaultSetting());\r\n-            xmlSchema.setElementFormDefault(getElementFormDefaultSetting());\r\n-            //xmlSchema.setAttributeFormDefault(new XmlSchemaForm(XmlSchemaForm.QUALIFIED));\r\n-            //xmlSchema.setElementFormDefault(new XmlSchemaForm(XmlSchemaForm.QUALIFIED));\r\n-            \r\n-            \r\n+  private XmlSchema getXmlSchema(String targetNamespace) {\r\n+    XmlSchema xmlSchema;\r\n \r\n+    if ((xmlSchema = (XmlSchema) schemaMap.get(targetNamespace)) == null) {\r\n+      String targetNamespacePrefix;\r\n \r\n-            targetNamespacePrefixMap.put(targetNamespace, targetNamespacePrefix);\r\n-            schemaMap.put(targetNamespace, xmlSchema);\r\n+      if (targetNamespace.equals(schemaTargetNameSpace) &&\r\n+        schema_namespace_prefix != null) {\r\n+        targetNamespacePrefix = schema_namespace_prefix;\r\n+      } else {\r\n+        targetNamespacePrefix = generatePrefix();\r\n+      }\r\n \r\n-            NamespaceMap prefixmap = new NamespaceMap();\r\n-            prefixmap.put(Java2WSDLConstants.DEFAULT_SCHEMA_NAMESPACE_PREFIX,\r\n-                    Java2WSDLConstants.URI_2001_SCHEMA_XSD);\r\n-            prefixmap.put(targetNamespacePrefix, targetNamespace);\r\n-            xmlSchema.setNamespaceContext(prefixmap);\r\n-        }\r\n-        return xmlSchema;\r\n-    }\r\n \r\n+      xmlSchema = new XmlSchema(targetNamespace, xmlSchemaCollection);\r\n+      xmlSchema.setAttributeFormDefault(getAttrFormDefaultSetting());\r\n+      xmlSchema.setElementFormDefault(getElementFormDefaultSetting());\r\n+      //xmlSchema.setAttributeFormDefault(new XmlSchemaForm(XmlSchemaForm.QUALIFIED));\r\n+      //xmlSchema.setElementFormDefault(new XmlSchemaForm(XmlSchemaForm.QUALIFIED));\r\n \r\n-    protected String generatePrefix() {\r\n-        return NAME_SPACE_PREFIX + prefixCount++;\r\n-    }\r\n \r\n-    protected XmlSchemaForm getAttrFormDefaultSetting() {\r\n-        if (Java2WSDLConstants.FORM_DEFAULT_UNQUALIFIED.equals(getAttrFormDefault())) {\r\n-            return new XmlSchemaForm(XmlSchemaForm.UNQUALIFIED);\r\n-        } else {\r\n-            return new XmlSchemaForm(XmlSchemaForm.QUALIFIED);\r\n-        }\r\n-    }\r\n+      targetNamespacePrefixMap.put(targetNamespace, targetNamespacePrefix);\r\n+      schemaMap.put(targetNamespace, xmlSchema);\r\n \r\n-    protected XmlSchemaForm getElementFormDefaultSetting() {\r\n-        if (Java2WSDLConstants.FORM_DEFAULT_UNQUALIFIED.equals(getElementFormDefault())) {\r\n-            return new XmlSchemaForm(XmlSchemaForm.UNQUALIFIED);\r\n-        } else {\r\n-            return new XmlSchemaForm(XmlSchemaForm.QUALIFIED);\r\n-        }\r\n+      NamespaceMap prefixmap = new NamespaceMap();\r\n+      prefixmap.put(Java2WSDLConstants.DEFAULT_SCHEMA_NAMESPACE_PREFIX,\r\n+        Java2WSDLConstants.URI_2001_SCHEMA_XSD);\r\n+      prefixmap.put(targetNamespacePrefix, targetNamespace);\r\n+      xmlSchema.setNamespaceContext(prefixmap);\r\n     }\r\n+    return xmlSchema;\r\n+  }\r\n \r\n-    public String getAttrFormDefault() {\r\n-        return attrFormDefault;\r\n-    }\r\n \r\n-    public void setAttrFormDefault(String attrFormDefault) {\r\n-        this.attrFormDefault = attrFormDefault;\r\n-    }\r\n+  protected String generatePrefix() {\r\n+    return NAME_SPACE_PREFIX + prefixCount++;\r\n+  }\r\n \r\n-    public String getElementFormDefault() {\r\n-        return elementFormDefault;\r\n+  protected XmlSchemaForm getAttrFormDefaultSetting() {\r\n+    if (Java2WSDLConstants.FORM_DEFAULT_UNQUALIFIED.equals(getAttrFormDefault())) {\r\n+      return new XmlSchemaForm(XmlSchemaForm.UNQUALIFIED);\r\n+    } else {\r\n+      return new XmlSchemaForm(XmlSchemaForm.QUALIFIED);\r\n     }\r\n+  }\r\n \r\n-    public void setElementFormDefault(String elementFormDefault) {\r\n-        this.elementFormDefault = elementFormDefault;\r\n+  protected XmlSchemaForm getElementFormDefaultSetting() {\r\n+    if (Java2WSDLConstants.FORM_DEFAULT_UNQUALIFIED.equals(getElementFormDefault())) {\r\n+      return new XmlSchemaForm(XmlSchemaForm.UNQUALIFIED);\r\n+    } else {\r\n+      return new XmlSchemaForm(XmlSchemaForm.QUALIFIED);\r\n     }\r\n+  }\r\n+\r\n+  public String getAttrFormDefault() {\r\n+    return attrFormDefault;\r\n+  }\r\n+\r\n+  public void setAttrFormDefault(String attrFormDefault) {\r\n+    this.attrFormDefault = attrFormDefault;\r\n+  }\r\n+\r\n+  public String getElementFormDefault() {\r\n+    return elementFormDefault;\r\n+  }\r\n+\r\n+  public void setElementFormDefault(String elementFormDefault) {\r\n+    this.elementFormDefault = elementFormDefault;\r\n+  }\r\n+\r\n+  protected XmlSchemaComplexType getComplexTypeForElement(XmlSchema xmlSchema, QName name) {\r\n+    Iterator iterator = xmlSchema.getItems().getIterator();\r\n+    while (iterator.hasNext()) {\r\n+      XmlSchemaObject object = (XmlSchemaObject) iterator.next();\r\n+      if (object instanceof XmlSchemaElement && ((XmlSchemaElement) object).getQName().equals(name)) {\r\n+        return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\r\n+      } else if (object instanceof XmlSchemaComplexType && ((XmlSchemaComplexType) object).getQName().equals(name)) {\r\n+        //return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\r\n+        return (XmlSchemaComplexType) object;\r\n+      }\r\n \r\n-    protected XmlSchemaComplexType getComplexTypeForElement(XmlSchema xmlSchema, QName name) {\r\n-        Iterator iterator = xmlSchema.getItems().getIterator();\r\n-        while (iterator.hasNext()) {\r\n-            XmlSchemaObject object = (XmlSchemaObject) iterator.next();\r\n-            if (object instanceof XmlSchemaElement && ((XmlSchemaElement) object).getQName().equals(name)) {\r\n-                return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\r\n-            }\r\n-            else if (object instanceof XmlSchemaComplexType && ((XmlSchemaComplexType) object).getQName().equals(name)) {\r\n-                //return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\r\n-            \treturn (XmlSchemaComplexType) object;\r\n-            } \r\n-            \r\n-        }\r\n-        return null;\r\n     }\r\n+    return null;\r\n+  }\r\n }\r\n",
            "diff_size": 447
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "335",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/377/DataServiceDocLitWrappedSchemaGenerator.java\nindex cd4ae148c82..ed84ab5cf4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/377/DataServiceDocLitWrappedSchemaGenerator.java\n@@ -334,7 +334,8 @@ public class DataServiceDocLitWrappedSchemaGenerator {\n             }\r\n             else if (object instanceof XmlSchemaComplexType && ((XmlSchemaComplexType) object).getQName().equals(name)) {\r\n                 //return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\r\n-            \treturn (XmlSchemaComplexType) object;\r\n+\r\n+              return (XmlSchemaComplexType) object;\r\n             } \r\n             \r\n         }\r\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "335",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/377/DataServiceDocLitWrappedSchemaGenerator.java\nindex cd4ae148c82..dae461ae8f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/377/DataServiceDocLitWrappedSchemaGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/377/DataServiceDocLitWrappedSchemaGenerator.java\n@@ -334,7 +334,7 @@ public class DataServiceDocLitWrappedSchemaGenerator {\n             }\r\n             else if (object instanceof XmlSchemaComplexType && ((XmlSchemaComplexType) object).getQName().equals(name)) {\r\n                 //return (XmlSchemaComplexType) ((XmlSchemaElement) object).getSchemaType();\r\n-            \treturn (XmlSchemaComplexType) object;\r\n+                          return (XmlSchemaComplexType) object;\r\n             } \r\n             \r\n         }\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}