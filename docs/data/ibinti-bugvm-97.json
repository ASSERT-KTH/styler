{
    "project_name": "ibinti-bugvm",
    "error_id": "97",
    "information": {
        "errors": [
            {
                "line": "53",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 82).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * Retrieves cookies that match the specified URI. Return not expired cookies.\n     * For every outgoing HTTP request, this method will be called.\n     *\n     * @param uri",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/97/CookieStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/97/CookieStore.java\nindex 619d65c719e..1c203494ccc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/97/CookieStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/97/CookieStore.java\n@@ -20,7 +20,7 @@ import java.util.List;\n \n /**\n  * A CookieStore object is a repository for cookies.\n- *\n+ * <p>\n  * CookieManager will store cookies of every incoming HTTP response into\n  * CookieStore, and retrieve cookies for every outgoing HTTP request.Expired\n  * HttpCookies should be removed from this store by themselves.\n@@ -29,75 +29,69 @@ import java.util.List;\n  */\n public interface CookieStore {\n \n-    /**\n-     * Saves a HTTP cookie to this store. This is called for every incoming HTTP\n-     * response.\n-     *\n-     * A cookie may or may not has an associated URI. If not, the cookie's\n-     * domain and path attribute will show cradleland. If there is an\n-     * associated URI and no domain and path attribute are speicifed for the\n-     * cookie, the given URI will indicate where this cookie comes from.\n-     *\n-     * If a cookie corresponding to the given URI already exists, then it is\n-     * replaced with the new one.\n-     *\n-     * @param uri\n-     *            the uri associated with the specified cookie. A null value\n-     *            indicates the cookie is not associated with a URI\n-     * @param cookie\n-     *            the cookie to be stored\n-     */\n-    void add(URI uri, HttpCookie cookie);\n+  /**\n+   * Saves a HTTP cookie to this store. This is called for every incoming HTTP\n+   * response.\n+   * <p>\n+   * A cookie may or may not has an associated URI. If not, the cookie's\n+   * domain and path attribute will show cradleland. If there is an\n+   * associated URI and no domain and path attribute are speicifed for the\n+   * cookie, the given URI will indicate where this cookie comes from.\n+   * <p>\n+   * If a cookie corresponding to the given URI already exists, then it is\n+   * replaced with the new one.\n+   *\n+   * @param uri    the uri associated with the specified cookie. A null value\n+   *               indicates the cookie is not associated with a URI\n+   * @param cookie the cookie to be stored\n+   */\n+  void add(URI uri, HttpCookie cookie);\n \n-    /**\n-     * Retrieves cookies that match the specified URI. Return not expired cookies.\n-     * For every outgoing HTTP request, this method will be called.\n-     *\n-     * @param uri\n-     *            the uri this cookie associated with. If null, this cookie will\n-     *            not be associated with an URI\n-     * @return an immutable list of HttpCookies, return empty list if no cookies\n-     *         match the given URI\n-     * @throws NullPointerException\n-     *             if uri is null\n-     */\n-    List<HttpCookie> get(URI uri);\n+  /**\n+   * Retrieves cookies that match the specified URI. Return not expired cookies.\n+   * For every outgoing HTTP request, this method will be called.\n+   *\n+   * @param uri the uri this cookie associated with. If null, this cookie will\n+   *            not be associated with an URI\n+   * @return an immutable list of HttpCookies, return empty list if no cookies\n+   * match the given URI\n+   * @throws NullPointerException if uri is null\n+   */\n+  List<HttpCookie> get(URI uri);\n \n-    /**\n-     * Get all cookies in cookie store which are not expired.\n-     *\n-     * @return an empty list if there's no http cookie in store, or an immutable\n-     *         list of cookies\n-     */\n-    List<HttpCookie> getCookies();\n+  /**\n+   * Get all cookies in cookie store which are not expired.\n+   *\n+   * @return an empty list if there's no http cookie in store, or an immutable\n+   * list of cookies\n+   */\n+  List<HttpCookie> getCookies();\n \n-    /**\n-     * Get a set of URIs, which is composed of associated URI with all the\n-     * cookies in the store.\n-     *\n-     * @return zero-length list if no cookie in the store is associated with any\n-     *         URIs, otherwise an immutable list of URIs.\n-     */\n-    List<URI> getURIs();\n+  /**\n+   * Get a set of URIs, which is composed of associated URI with all the\n+   * cookies in the store.\n+   *\n+   * @return zero-length list if no cookie in the store is associated with any\n+   * URIs, otherwise an immutable list of URIs.\n+   */\n+  List<URI> getURIs();\n \n-    /**\n-     * Remove the specified cookie from the store.\n-     *\n-     * @param uri\n-     *            the uri associated with the specified cookie. If the cookie is\n-     *            not associated with an URI when added, uri should be null;\n-     *            otherwise the uri should be non-null.\n-     * @param cookie\n-     *            the cookie to be removed\n-     * @return true if the specified cookie is contained in this store and\n-     *         removed successfully\n-     */\n-    boolean remove(URI uri, HttpCookie cookie);\n+  /**\n+   * Remove the specified cookie from the store.\n+   *\n+   * @param uri    the uri associated with the specified cookie. If the cookie is\n+   *               not associated with an URI when added, uri should be null;\n+   *               otherwise the uri should be non-null.\n+   * @param cookie the cookie to be removed\n+   * @return true if the specified cookie is contained in this store and\n+   * removed successfully\n+   */\n+  boolean remove(URI uri, HttpCookie cookie);\n \n-    /**\n-     * Clear this cookie store.\n-     *\n-     * @return true if any cookies were removed as a result of this call.\n-     */\n-    boolean removeAll();\n+  /**\n+   * Clear this cookie store.\n+   *\n+   * @return true if any cookies were removed as a result of this call.\n+   */\n+  boolean removeAll();\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/97/CookieStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/97/CookieStore.java\nindex 619d65c719e..d09b7e8b1cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/97/CookieStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/97/CookieStore.java\n@@ -100,4 +100,4 @@ public interface CookieStore {\n      * @return true if any cookies were removed as a result of this call.\n      */\n     boolean removeAll();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/97/CookieStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/97/CookieStore.java\nindex 619d65c719e..e6cf623df1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/97/CookieStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/97/CookieStore.java\n@@ -27,6 +27,8 @@ import java.util.List;\n  *\n  * @since 1.6\n  */\n+\n+\n public interface CookieStore {\n \n     /**\n@@ -47,6 +49,8 @@ public interface CookieStore {\n      * @param cookie\n      *            the cookie to be stored\n      */\n+\n+\n     void add(URI uri, HttpCookie cookie);\n \n     /**\n@@ -61,6 +65,8 @@ public interface CookieStore {\n      * @throws NullPointerException\n      *             if uri is null\n      */\n+\n+\n     List<HttpCookie> get(URI uri);\n \n     /**\n@@ -69,6 +75,8 @@ public interface CookieStore {\n      * @return an empty list if there's no http cookie in store, or an immutable\n      *         list of cookies\n      */\n+\n+\n     List<HttpCookie> getCookies();\n \n     /**\n@@ -78,6 +86,8 @@ public interface CookieStore {\n      * @return zero-length list if no cookie in the store is associated with any\n      *         URIs, otherwise an immutable list of URIs.\n      */\n+\n+\n     List<URI> getURIs();\n \n     /**\n@@ -92,6 +102,8 @@ public interface CookieStore {\n      * @return true if the specified cookie is contained in this store and\n      *         removed successfully\n      */\n+\n+\n     boolean remove(URI uri, HttpCookie cookie);\n \n     /**\n@@ -99,5 +111,7 @@ public interface CookieStore {\n      *\n      * @return true if any cookies were removed as a result of this call.\n      */\n+\n+\n     boolean removeAll();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}