{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1795",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "104",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1795/ConnectorValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1795/ConnectorValidator.java\nindex 14bcda4b56a..8ed49eb22b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1795/ConnectorValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1795/ConnectorValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.configuration;\n \n import java.util.Arrays;\n@@ -42,221 +43,219 @@ import static java.util.stream.Collectors.toSet;\n \n public abstract class ConnectorValidator implements SettingGroup<Object>\n {\n-    private static final Set<String> validTypes =\n-            Arrays.stream( Connector.ConnectorType.values() )\n-                    .map( Enum::name )\n-                    .collect( toSet() );\n-    static final String DEPRECATED_CONNECTOR_MSG =\n-            \"Warning: connectors with names other than [http,https,bolt] are%n\" +\n-                    \"deprecated and support for them will be removed in a future%n\" +\n-                    \"version of Neo4j. Offending lines in \" + Config.DEFAULT_CONFIG_FILE_NAME + \":%n%n%s\";\n-    protected final Connector.ConnectorType type;\n-\n-    public ConnectorValidator( @Nonnull Connector.ConnectorType type )\n+  private static final Set<String> validTypes =\n+      Arrays.stream(Connector.ConnectorType.values())\n+          .map(Enum::name)\n+          .collect(toSet());\n+  static final String DEPRECATED_CONNECTOR_MSG =\n+      \"Warning: connectors with names other than [http,https,bolt] are%n\" +\n+          \"deprecated and support for them will be removed in a future%n\" +\n+          \"version of Neo4j. Offending lines in \" + Config.DEFAULT_CONFIG_FILE_NAME + \":%n%n%s\";\n+  protected final Connector.ConnectorType type;\n+\n+  public ConnectorValidator(@Nonnull Connector.ConnectorType type)\n+  {\n+    this.type = type;\n+  }\n+\n+  /**\n+   * Determine if this instance is responsible for validating a setting.\n+   *\n+   * @param key       the key of the setting\n+   * @param rawConfig raw map of config settings to validate\n+   * @return true if this instance is responsible for parsing the setting, false otherwise.\n+   * @throws InvalidSettingException if an answer can not be determined, for example in case of a missing second\n+   *                                 mandatory setting.\n+   */\n+  public boolean owns(@Nonnull String key, @Nonnull Map<String, String> rawConfig) throws InvalidSettingException\n+  {\n+    String[] parts = key.split(\"\\\\.\");\n+    if (parts.length < 2)\n     {\n-        this.type = type;\n+      return false;\n     }\n-\n-    /**\n-     * Determine if this instance is responsible for validating a setting.\n-     *\n-     * @param key the key of the setting\n-     * @param rawConfig raw map of config settings to validate\n-     * @return true if this instance is responsible for parsing the setting, false otherwise.\n-     * @throws InvalidSettingException if an answer can not be determined, for example in case of a missing second\n-     * mandatory setting.\n-     */\n-    public boolean owns( @Nonnull String key, @Nonnull Map<String,String> rawConfig ) throws InvalidSettingException\n+    if (!parts[0].equals(\"dbms\") || !parts[1].equals(\"connector\"))\n     {\n-        String[] parts = key.split( \"\\\\.\" );\n-        if ( parts.length < 2 )\n-        {\n-            return false;\n-        }\n-        if ( !parts[0].equals( \"dbms\" ) || !parts[1].equals( \"connector\" ) )\n-        {\n-            return false;\n-        }\n-\n-        // Do not allow invalid settings under 'dbms.connector.**'\n-        if ( parts.length != 4 )\n-        {\n-            throw new InvalidSettingException( format( \"Invalid connector setting: %s\", key ) );\n-        }\n-\n-        /*if ( !subSettings().contains( parts[3] ) )\n-        {\n-            return false;\n-        }*/\n-\n-        // A type must be specified, or it is not possible to know who owns this setting\n-        String groupKey = parts[2];\n-        String typeKey = String.join( \".\", parts[0], parts[1], groupKey, \"type\" );\n-        String typeValue = rawConfig.get( typeKey );\n-\n-        if ( typeValue == null )\n-        {\n-            // We can infer the type of the connector from some names\n-            if ( groupKey.equalsIgnoreCase( \"http\" ) || groupKey.equalsIgnoreCase( \"https\" ) )\n-            {\n-                typeValue = Connector.ConnectorType.HTTP.name();\n-            }\n-            else if ( groupKey.equalsIgnoreCase( \"bolt\" ) )\n-            {\n-                typeValue = Connector.ConnectorType.BOLT.name();\n-            }\n-        }\n-\n-        // If this is a connector not called bolt or http, then we require the type\n-        if ( typeValue == null )\n-        {\n-            throw new InvalidSettingException( format( \"Missing mandatory value for '%s'\", typeKey ) );\n-        }\n-\n-        if ( !validTypes.contains( typeValue ) )\n-        {\n-            throw new InvalidSettingException(\n-                    format( \"'%s' must be one of %s; not '%s'\",\n-                            typeKey, String.join( \", \", validTypes ), typeValue ) );\n-        }\n-\n-        return this.type.name().equals( typeValue );\n+      return false;\n     }\n \n-    @Nonnull\n-    public Stream<Entry<String,String>> ownedEntries( @Nonnull Map<String,String> params )\n-            throws InvalidSettingException\n+    // Do not allow invalid settings under 'dbms.connector.**'\n+    if (parts.length != 4)\n     {\n-        return params.entrySet().stream()\n-                .filter( it -> owns( it.getKey(), params ) );\n+      throw new InvalidSettingException(format(\"Invalid connector setting: %s\", key));\n     }\n \n-    @Override\n-    @Nonnull\n-    public Map<String,String> validate( @Nonnull Map<String,String> rawConfig, @Nonnull Consumer<String> warningConsumer )\n-            throws InvalidSettingException\n-    {\n-        final HashMap<String,String> result = new HashMap<>();\n-\n-        ownedEntries( rawConfig ).forEach( s ->\n-                result.putAll( getSettingFor( s.getKey(), rawConfig )\n-                        .orElseThrow( () -> new InvalidSettingException(\n-                                format( \"Invalid connector setting: %s\", s.getKey() ) ) )\n-                        .validate( rawConfig, warningConsumer ) ) );\n-\n-        warnAboutDeprecatedConnectors( result, warningConsumer );\n-\n-        return result;\n-    }\n-\n-    private void warnAboutDeprecatedConnectors( @Nonnull Map<String,String> connectorSettings,\n-            @Nonnull Consumer<String> warningConsumer )\n-    {\n-        final HashSet<String> nonDefaultConnectors = new HashSet<>();\n-        connectorSettings.entrySet().stream()\n-                .map( Entry::getKey )\n-                .filter( settingKey ->\n-                {\n-                    String name = settingKey.split( \"\\\\.\" )[2];\n-                    return isDeprecatedConnectorName( name );\n-                } )\n-                .forEach( nonDefaultConnectors::add );\n-\n-        if ( !nonDefaultConnectors.isEmpty() )\n+        /*if ( !subSettings().contains( parts[3] ) )\n         {\n-            warningConsumer.accept( format(\n-                    DEPRECATED_CONNECTOR_MSG,\n-                    nonDefaultConnectors.stream()\n-                            .sorted()\n-                            .map( s -> format( \">  %s%n\", s ) )\n-                            .collect( joining() ) ) );\n-        }\n-    }\n-\n-    protected boolean isDeprecatedConnectorName( String name )\n-    {\n-        return !( name.equalsIgnoreCase( \"http\" ) || name.equalsIgnoreCase( \"https\" ) || name\n-                .equalsIgnoreCase( \"bolt\" ) );\n-    }\n-\n-    @Override\n-    @Nonnull\n-    public Map<String,Object> values( @Nonnull Map<String,String> params )\n-    {\n-        final HashMap<String,Object> result = new HashMap<>();\n-\n-        ownedEntries( params ).forEach( s ->\n-                result.putAll( getSettingFor( s.getKey(), params )\n-                        .orElseThrow( () -> new InvalidSettingException(\n-                                format( \"Invalid connector setting: %s\", s.getKey() ) ) )\n-                        .values( params ) ) );\n-\n-        return result;\n-    }\n-\n-    /**\n-     *\n-     * @return a setting which is not necessarily literally defined in the map provided\n-     */\n-    @Nonnull\n-    protected abstract Optional<Setting<Object>> getSettingFor( @Nonnull String settingName,\n-            @Nonnull Map<String,String> params );\n-\n-    @Override\n-    public List<Setting<Object>> settings( @Nonnull Map<String,String> params )\n-    {\n-        return ownedEntries( params )\n-                .map( e -> getSettingFor( e.getKey(), params ) )\n-                .filter( Optional::isPresent )\n-                .map( Optional::get )\n-                .collect( toList() );\n-    }\n-\n-    @Override\n-    public boolean deprecated()\n-    {\n-        return false;\n-    }\n-\n-    @Override\n-    public Optional<String> replacement()\n-    {\n-        return Optional.empty();\n-    }\n+            return false;\n+        }*/\n \n-    @Override\n-    public boolean internal()\n-    {\n-        return false;\n-    }\n+    // A type must be specified, or it is not possible to know who owns this setting\n+    String groupKey = parts[2];\n+    String typeKey = String.join(\".\", parts[0], parts[1], groupKey, \"type\");\n+    String typeValue = rawConfig.get(typeKey);\n \n-    @Override\n-    public boolean secret()\n+    if (typeValue == null)\n     {\n-        return false;\n+      // We can infer the type of the connector from some names\n+      if (groupKey.equalsIgnoreCase(\"http\") || groupKey.equalsIgnoreCase(\"https\"))\n+      {\n+        typeValue = Connector.ConnectorType.HTTP.name();\n+      } else if (groupKey.equalsIgnoreCase(\"bolt\"))\n+      {\n+        typeValue = Connector.ConnectorType.BOLT.name();\n+      }\n     }\n \n-    @Override\n-    public Optional<String> documentedDefaultValue()\n+    // If this is a connector not called bolt or http, then we require the type\n+    if (typeValue == null)\n     {\n-        return Optional.empty();\n+      throw new InvalidSettingException(format(\"Missing mandatory value for '%s'\", typeKey));\n     }\n \n-    @Override\n-    public String valueDescription()\n+    if (!validTypes.contains(typeValue))\n     {\n-        return \"a group of connector settings\";\n+      throw new InvalidSettingException(\n+          format(\"'%s' must be one of %s; not '%s'\",\n+              typeKey, String.join(\", \", validTypes), typeValue));\n     }\n \n-    @Override\n-    public Optional<String> description()\n-    {\n-        return Optional.empty();\n-    }\n+    return this.type.name().equals(typeValue);\n+  }\n+\n+  @Nonnull\n+  public Stream<Entry<String, String>> ownedEntries(@Nonnull Map<String, String> params)\n+      throws InvalidSettingException\n+  {\n+    return params.entrySet().stream()\n+        .filter(it -> owns(it.getKey(), params));\n+  }\n+\n+  @Override\n+  @Nonnull\n+  public Map<String, String> validate(@Nonnull Map<String, String> rawConfig, @Nonnull Consumer<String> warningConsumer)\n+      throws InvalidSettingException\n+  {\n+    final HashMap<String, String> result = new HashMap<>();\n+\n+    ownedEntries(rawConfig).forEach(s ->\n+        result.putAll(getSettingFor(s.getKey(), rawConfig)\n+            .orElseThrow(() -> new InvalidSettingException(\n+                format(\"Invalid connector setting: %s\", s.getKey())))\n+            .validate(rawConfig, warningConsumer)));\n+\n+    warnAboutDeprecatedConnectors(result, warningConsumer);\n+\n+    return result;\n+  }\n+\n+  private void warnAboutDeprecatedConnectors(@Nonnull Map<String, String> connectorSettings,\n+                                             @Nonnull Consumer<String> warningConsumer)\n+  {\n+    final HashSet<String> nonDefaultConnectors = new HashSet<>();\n+    connectorSettings.entrySet().stream()\n+        .map(Entry::getKey)\n+        .filter(settingKey ->\n+        {\n+          String name = settingKey.split(\"\\\\.\")[2];\n+          return isDeprecatedConnectorName(name);\n+        })\n+        .forEach(nonDefaultConnectors::add);\n \n-    @Override\n-    public boolean dynamic()\n+    if (!nonDefaultConnectors.isEmpty())\n     {\n-        return false;\n+      warningConsumer.accept(format(\n+          DEPRECATED_CONNECTOR_MSG,\n+          nonDefaultConnectors.stream()\n+              .sorted()\n+              .map(s -> format(\">  %s%n\", s))\n+              .collect(joining())));\n     }\n+  }\n+\n+  protected boolean isDeprecatedConnectorName(String name)\n+  {\n+    return !(name.equalsIgnoreCase(\"http\") || name.equalsIgnoreCase(\"https\") || name\n+        .equalsIgnoreCase(\"bolt\"));\n+  }\n+\n+  @Override\n+  @Nonnull\n+  public Map<String, Object> values(@Nonnull Map<String, String> params)\n+  {\n+    final HashMap<String, Object> result = new HashMap<>();\n+\n+    ownedEntries(params).forEach(s ->\n+        result.putAll(getSettingFor(s.getKey(), params)\n+            .orElseThrow(() -> new InvalidSettingException(\n+                format(\"Invalid connector setting: %s\", s.getKey())))\n+            .values(params)));\n+\n+    return result;\n+  }\n+\n+  /**\n+   * @return a setting which is not necessarily literally defined in the map provided\n+   */\n+  @Nonnull\n+  protected abstract Optional<Setting<Object>> getSettingFor(@Nonnull String settingName,\n+                                                             @Nonnull Map<String, String> params);\n+\n+  @Override\n+  public List<Setting<Object>> settings(@Nonnull Map<String, String> params)\n+  {\n+    return ownedEntries(params)\n+        .map(e -> getSettingFor(e.getKey(), params))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get)\n+        .collect(toList());\n+  }\n+\n+  @Override\n+  public boolean deprecated()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public Optional<String> replacement()\n+  {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public boolean internal()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean secret()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public Optional<String> documentedDefaultValue()\n+  {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public String valueDescription()\n+  {\n+    return \"a group of connector settings\";\n+  }\n+\n+  @Override\n+  public Optional<String> description()\n+  {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public boolean dynamic()\n+  {\n+    return false;\n+  }\n }\n",
            "diff_size": 349
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 407).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "column": "407",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 251).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1795/ConnectorValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1795/ConnectorValidator.java\nindex 14bcda4b56a..c82460b0476 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1795/ConnectorValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1795/ConnectorValidator.java\n@@ -42,15 +42,9 @@ import static java.util.stream.Collectors.toSet;\n \n public abstract class ConnectorValidator implements SettingGroup<Object>\n {\n-    private static final Set<String> validTypes =\n-            Arrays.stream( Connector.ConnectorType.values() )\n-                    .map( Enum::name )\n-                    .collect( toSet() );\n-    static final String DEPRECATED_CONNECTOR_MSG =\n-            \"Warning: connectors with names other than [http,https,bolt] are%n\" +\n-                    \"deprecated and support for them will be removed in a future%n\" +\n-                    \"version of Neo4j. Offending lines in \" + Config.DEFAULT_CONFIG_FILE_NAME + \":%n%n%s\";\n-    protected final Connector.ConnectorType type;\n+    private static final Set<String> validTypes = Arrays.stream( Connector.ConnectorType.values() ).map( Enum::name ).collect( toSet() ); static final String DEPRECATED_CONNECTOR_MSG = \"Warning: connectors with names other than [http,https,bolt] are%n\" + \"deprecated and support for them will be removed in a future%n\" + \"version of Neo4j. Offending lines in \" + Config.DEFAULT_CONFIG_FILE_NAME + \":%n%n%s\";\n+\n+protected final Connector.ConnectorType type;\n \n     public ConnectorValidator( @Nonnull Connector.ConnectorType type )\n     {\n@@ -73,7 +67,8 @@ public abstract class ConnectorValidator implements SettingGroup<Object>\n         {\n             return false;\n         }\n-        if ( !parts[0].equals( \"dbms\" ) || !parts[1].equals( \"connector\" ) )\n+\n+if ( !parts[0].equals( \"dbms\" ) || !parts[1].equals( \"connector\" ) )\n         {\n             return false;\n         }\n@@ -93,8 +88,7 @@ public abstract class ConnectorValidator implements SettingGroup<Object>\n         String groupKey = parts[2];\n         String typeKey = String.join( \".\", parts[0], parts[1], groupKey, \"type\" );\n         String typeValue = rawConfig.get( typeKey );\n-\n-        if ( typeValue == null )\n+if ( typeValue == null )\n         {\n             // We can infer the type of the connector from some names\n             if ( groupKey.equalsIgnoreCase( \"http\" ) || groupKey.equalsIgnoreCase( \"https\" ) )\n@@ -115,68 +109,49 @@ public abstract class ConnectorValidator implements SettingGroup<Object>\n \n         if ( !validTypes.contains( typeValue ) )\n         {\n-            throw new InvalidSettingException(\n-                    format( \"'%s' must be one of %s; not '%s'\",\n+            throw new InvalidSettingException( format( \"'%s' must be one of %s; not '%s'\",\n                             typeKey, String.join( \", \", validTypes ), typeValue ) );\n-        }\n+    }\n \n         return this.type.name().equals( typeValue );\n     }\n \n     @Nonnull\n-    public Stream<Entry<String,String>> ownedEntries( @Nonnull Map<String,String> params )\n-            throws InvalidSettingException\n-    {\n-        return params.entrySet().stream()\n-                .filter( it -> owns( it.getKey(), params ) );\n+    public Stream<Entry<String,String>> ownedEntries( @Nonnull Map<String,String> params ) throws InvalidSettingException\n+{\n+        return params.entrySet().stream().filter( it -> owns( it.getKey(), params ) );\n     }\n \n     @Override\n     @Nonnull\n-    public Map<String,String> validate( @Nonnull Map<String,String> rawConfig, @Nonnull Consumer<String> warningConsumer )\n-            throws InvalidSettingException\n-    {\n+    public Map<String,String> validate( @Nonnull Map<String,String> rawConfig, @Nonnull Consumer<String> warningConsumer ) throws InvalidSettingException\n+{\n         final HashMap<String,String> result = new HashMap<>();\n \n-        ownedEntries( rawConfig ).forEach( s ->\n-                result.putAll( getSettingFor( s.getKey(), rawConfig )\n-                        .orElseThrow( () -> new InvalidSettingException(\n-                                format( \"Invalid connector setting: %s\", s.getKey() ) ) )\n-                        .validate( rawConfig, warningConsumer ) ) );\n-\n-        warnAboutDeprecatedConnectors( result, warningConsumer );\n-\n-        return result;\n+        ownedEntries( rawConfig ).forEach( s -> result.putAll( getSettingFor( s.getKey(), rawConfig ).orElseThrow( () -> new InvalidSettingException( format( \"Invalid connector setting: %s\", s.getKey() ) ) ).validate( rawConfig, warningConsumer ) ) );\n+warnAboutDeprecatedConnectors( result, warningConsumer );\n+return result;\n     }\n \n     private void warnAboutDeprecatedConnectors( @Nonnull Map<String,String> connectorSettings,\n             @Nonnull Consumer<String> warningConsumer )\n     {\n         final HashSet<String> nonDefaultConnectors = new HashSet<>();\n-        connectorSettings.entrySet().stream()\n-                .map( Entry::getKey )\n-                .filter( settingKey ->\n+        connectorSettings.entrySet().stream().map( Entry::getKey ).filter( settingKey ->\n                 {\n                     String name = settingKey.split( \"\\\\.\" )[2];\n                     return isDeprecatedConnectorName( name );\n-                } )\n-                .forEach( nonDefaultConnectors::add );\n-\n-        if ( !nonDefaultConnectors.isEmpty() )\n+                } ).forEach( nonDefaultConnectors::add );\n+if ( !nonDefaultConnectors.isEmpty() )\n         {\n-            warningConsumer.accept( format(\n-                    DEPRECATED_CONNECTOR_MSG,\n-                    nonDefaultConnectors.stream()\n-                            .sorted()\n-                            .map( s -> format( \">  %s%n\", s ) )\n-                            .collect( joining() ) ) );\n-        }\n+            warningConsumer.accept( format( DEPRECATED_CONNECTOR_MSG,\n+                    nonDefaultConnectors.stream().sorted().map( s -> format( \">  %s%n\", s ) ).collect( joining() ) ) );\n+    }\n     }\n \n     protected boolean isDeprecatedConnectorName( String name )\n     {\n-        return !( name.equalsIgnoreCase( \"http\" ) || name.equalsIgnoreCase( \"https\" ) || name\n-                .equalsIgnoreCase( \"bolt\" ) );\n+        return !( name.equalsIgnoreCase( \"http\" ) || name.equalsIgnoreCase( \"https\" ) || name.equalsIgnoreCase( \"bolt\" ) );\n     }\n \n     @Override\n@@ -185,13 +160,8 @@ public abstract class ConnectorValidator implements SettingGroup<Object>\n     {\n         final HashMap<String,Object> result = new HashMap<>();\n \n-        ownedEntries( params ).forEach( s ->\n-                result.putAll( getSettingFor( s.getKey(), params )\n-                        .orElseThrow( () -> new InvalidSettingException(\n-                                format( \"Invalid connector setting: %s\", s.getKey() ) ) )\n-                        .values( params ) ) );\n-\n-        return result;\n+        ownedEntries( params ).forEach( s -> result.putAll( getSettingFor( s.getKey(), params ).orElseThrow( () -> new InvalidSettingException( format( \"Invalid connector setting: %s\", s.getKey() ) ) ).values( params ) ) );\n+return result;\n     }\n \n     /**\n@@ -202,14 +172,10 @@ public abstract class ConnectorValidator implements SettingGroup<Object>\n     protected abstract Optional<Setting<Object>> getSettingFor( @Nonnull String settingName,\n             @Nonnull Map<String,String> params );\n \n-    @Override\n+@Override\n     public List<Setting<Object>> settings( @Nonnull Map<String,String> params )\n     {\n-        return ownedEntries( params )\n-                .map( e -> getSettingFor( e.getKey(), params ) )\n-                .filter( Optional::isPresent )\n-                .map( Optional::get )\n-                .collect( toList() );\n+        return ownedEntries( params ).map( e -> getSettingFor( e.getKey(), params ) ).filter( Optional::isPresent ).map( Optional::get ).collect( toList() );\n     }\n \n     @Override\n@@ -259,4 +225,4 @@ public abstract class ConnectorValidator implements SettingGroup<Object>\n     {\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 63
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}