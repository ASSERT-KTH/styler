{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1787",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1787/PathInterest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1787/PathInterest.java\nindex 629b1b8ec38..39d521286b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1787/PathInterest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1787/PathInterest.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.Comparator;\n@@ -27,96 +28,101 @@ import java.util.function.BiFunction;\n  * {@link org.neo4j.graphalgo.impl.path.Dijkstra} or {@link org.neo4j.graphalgo.impl.path.AStar}.\n  * {@link #comparator()} provides a comparator on priority object to be used when ordering paths.\n  * {@link #canBeRuledOut(int, Object, Object)}\n+ *\n  * @author Anton Persson\n  */\n public interface PathInterest<P>\n {\n-    /**\n-     * @return {@link java.util.Comparator} to use when ordering in priority map\n-     */\n-    Comparator<P> comparator();\n+  /**\n+   * @return {@link java.util.Comparator} to use when ordering in priority map\n+   */\n+  Comparator<P> comparator();\n \n-    /**\n-     * Decide if a traversal branch with numberOfVisits, pathPriority and oldPriority (based on end node) can be ruled\n-     * out from further traversal or not.\n-     * @param numberOfVisits number of times a traversal branch ending on the same node has been traversed from.\n-     * @param pathPriority priority of traversal branch currently considered.\n-     * @param oldPriority priority of other traversal branch.\n-     * @return true if traversal branch can be ruled out from further traversal, false otherwise.\n-     */\n-    boolean canBeRuledOut( int numberOfVisits, P pathPriority, P oldPriority );\n+  /**\n+   * Decide if a traversal branch with numberOfVisits, pathPriority and oldPriority (based on end node) can be ruled\n+   * out from further traversal or not.\n+   *\n+   * @param numberOfVisits number of times a traversal branch ending on the same node has been traversed from.\n+   * @param pathPriority   priority of traversal branch currently considered.\n+   * @param oldPriority    priority of other traversal branch.\n+   * @return true if traversal branch can be ruled out from further traversal, false otherwise.\n+   */\n+  boolean canBeRuledOut(int numberOfVisits, P pathPriority, P oldPriority);\n \n-    /**\n-     * Decide if a traversal branch that previously has not been ruled out still is interesting. This would typically\n-     * mean that a certain number of paths are of interest.\n-     * @param numberOfVisits\n-     * @return true if traversal branch still is of interest\n-     */\n-    boolean stillInteresting( int numberOfVisits );\n+  /**\n+   * Decide if a traversal branch that previously has not been ruled out still is interesting. This would typically\n+   * mean that a certain number of paths are of interest.\n+   *\n+   * @param numberOfVisits\n+   * @return true if traversal branch still is of interest\n+   */\n+  boolean stillInteresting(int numberOfVisits);\n+\n+  /**\n+   * Should traversal stop when traversed beyond lowest cost?\n+   *\n+   * @return true if traversal should stop beyond lowest cost.\n+   */\n+  boolean stopAfterLowestCost();\n \n+  abstract class PriorityBasedPathInterest<P> implements PathInterest<P>\n+  {\n     /**\n-     * Should traversal stop when traversed beyond lowest cost?\n-     * @return true if traversal should stop beyond lowest cost.\n+     * @return {@link BiFunction} to be used when deciding if entity can be ruled out or not.\n      */\n-    boolean stopAfterLowestCost();\n+    abstract BiFunction<P, P, Boolean> interestFunction();\n \n-    abstract class PriorityBasedPathInterest<P> implements PathInterest<P>\n+    @Override\n+    public boolean canBeRuledOut(int numberOfVisits, P pathPriority, P oldPriority)\n     {\n-        /**\n-         * @return {@link BiFunction} to be used when deciding if entity can be ruled out or not.\n-         */\n-        abstract BiFunction<P,P,Boolean> interestFunction();\n-\n-        @Override\n-        public boolean canBeRuledOut( int numberOfVisits, P pathPriority, P oldPriority )\n-        {\n-            return !interestFunction().apply( pathPriority, oldPriority );\n-        }\n-\n-        @Override\n-        public boolean stillInteresting( int numberOfVisits )\n-        {\n-            return true;\n-        }\n+      return !interestFunction().apply(pathPriority, oldPriority);\n+    }\n \n-        /**\n-         * @return true\n-         */\n-        @Override\n-        public boolean stopAfterLowestCost()\n-        {\n-            return true;\n-        }\n+    @Override\n+    public boolean stillInteresting(int numberOfVisits)\n+    {\n+      return true;\n     }\n \n-    abstract class VisitCountBasedPathInterest<P> implements PathInterest<P>\n+    /**\n+     * @return true\n+     */\n+    @Override\n+    public boolean stopAfterLowestCost()\n     {\n-        abstract int numberOfWantedPaths();\n+      return true;\n+    }\n+  }\n \n-        /**\n-         * Use {@link #numberOfWantedPaths()} to decide if an entity should be ruled out or not and if an entity\n-         * still is of interest.\n-         * @param numberOfVisits number of times a traversal branch ending on the same node has been traversed from.\n-         * @param pathPriority priority of traversal branch currently considered.\n-         * @param oldPriority priority of other traversal branch.\n-         * @return numberOfVisits > {@link #numberOfWantedPaths()}\n-         */\n-        @Override\n-        public boolean canBeRuledOut( int numberOfVisits, P pathPriority, P oldPriority )\n-        {\n-            return numberOfVisits > numberOfWantedPaths();\n-        }\n+  abstract class VisitCountBasedPathInterest<P> implements PathInterest<P>\n+  {\n+    abstract int numberOfWantedPaths();\n \n-        @Override\n-        public boolean stillInteresting( int numberOfVisits )\n-        {\n-            return numberOfVisits <= numberOfWantedPaths();\n-        }\n+    /**\n+     * Use {@link #numberOfWantedPaths()} to decide if an entity should be ruled out or not and if an entity\n+     * still is of interest.\n+     *\n+     * @param numberOfVisits number of times a traversal branch ending on the same node has been traversed from.\n+     * @param pathPriority   priority of traversal branch currently considered.\n+     * @param oldPriority    priority of other traversal branch.\n+     * @return numberOfVisits > {@link #numberOfWantedPaths()}\n+     */\n+    @Override\n+    public boolean canBeRuledOut(int numberOfVisits, P pathPriority, P oldPriority)\n+    {\n+      return numberOfVisits > numberOfWantedPaths();\n+    }\n+\n+    @Override\n+    public boolean stillInteresting(int numberOfVisits)\n+    {\n+      return numberOfVisits <= numberOfWantedPaths();\n+    }\n \n-        @Override\n-        public boolean stopAfterLowestCost()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public boolean stopAfterLowestCost()\n+    {\n+      return false;\n     }\n+  }\n }\n",
            "diff_size": 109
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "107",
                    "column": "34",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1787/PathInterest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1787/PathInterest.java\nindex 629b1b8ec38..f78a0d0fa89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1787/PathInterest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1787/PathInterest.java\n@@ -104,7 +104,7 @@ public interface PathInterest<P>\n         @Override\n         public boolean canBeRuledOut( int numberOfVisits, P pathPriority, P oldPriority )\n         {\n-            return numberOfVisits > numberOfWantedPaths();\n+            return numberOfVisits> numberOfWantedPaths();\n         }\n \n         @Override\n@@ -119,4 +119,4 @@ public interface PathInterest<P>\n             return false;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}