{
    "project_name": "h2database-h2database",
    "error_id": "135",
    "information": {
        "errors": [
            {
                "line": "471",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            ResultSet rs = null;\n            try {\n\t\t if (sql.startsWith(\"@\")) {\n\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n\t\t     int rowCount = printResult(rs, listMode);\n\t\t } else if (stat.execute(sql)) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "472",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/135/Shell.java\nindex cf501c66c96..b4c4b704bcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/135/Shell.java\n@@ -468,7 +468,7 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n+                if (sql.startsWith(\"@\")) {\n \t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n \t\t     int rowCount = printResult(rs, listMode);\n \t\t } else if (stat.execute(sql)) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "381",
                    "column": "18",
                    "severity": "warning",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/135/Shell.java\nindex cf501c66c96..a1dedf8e2c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/135/Shell.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.tools;\n \n import java.io.BufferedReader;\n@@ -33,6 +34,7 @@ import org.h2.util.Utils;\n \n /**\n  * Interactive command line tool to access a database using JDBC.\n+ *\n  * @h2.resource\n  */\n public class Shell extends Tool implements Runnable {\n@@ -73,9 +75,9 @@ public class Shell extends Tool implements Runnable {\n      * </table>\n      * If special characters don't work as expected, you may need to use\n      * -Dfile.encoding=UTF-8 (Mac OS X) or CP850 (Windows).\n-     * @h2.resource\n      *\n      * @param args the command line arguments\n+     * @h2.resource\n      */\n     public static void main(String... args) throws SQLException {\n         new Shell().runTool(args);\n@@ -235,7 +237,8 @@ public class Shell extends Tool implements Runnable {\n                     showHelp();\n                 } else if (\"list\".equals(lower)) {\n                     listMode = !listMode;\n-                    println(\"Result list mode is now \" + (listMode ? \"on\" : \"off\"));\n+                    println(\"Result list mode is now \" +\n+                            (listMode ? \"on\" : \"off\"));\n                 } else if (\"history\".equals(lower)) {\n                     for (int i = 0, size = history.size(); i < size; i++) {\n                         String s = history.get(i);\n@@ -248,7 +251,8 @@ public class Shell extends Tool implements Runnable {\n                         println(\"No history\");\n                     }\n                 } else if (lower.startsWith(\"autocommit\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"autocommit\".length());\n+                    lower = StringUtils\n+                            .trimSubstring(lower, \"autocommit\".length());\n                     if (\"true\".equals(lower)) {\n                         conn.setAutoCommit(true);\n                     } else if (\"false\".equals(lower)) {\n@@ -258,7 +262,8 @@ public class Shell extends Tool implements Runnable {\n                     }\n                     println(\"Autocommit is now \" + conn.getAutoCommit());\n                 } else if (lower.startsWith(\"maxwidth\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"maxwidth\".length());\n+                    lower = StringUtils\n+                            .trimSubstring(lower, \"maxwidth\".length());\n                     try {\n                         maxColumnSize = Integer.parseInt(lower);\n                     } catch (NumberFormatException e) {\n@@ -328,11 +333,12 @@ public class Shell extends Tool implements Runnable {\n                 prop = new Properties();\n             } else {\n                 prop = SortedProperties.loadProperties(\n-                        serverPropertiesDir + \"/\" + Constants.SERVER_PROPERTIES_NAME);\n+                        serverPropertiesDir + \"/\" +\n+                                Constants.SERVER_PROPERTIES_NAME);\n             }\n             String data = null;\n             boolean found = false;\n-            for (int i = 0;; i++) {\n+            for (int i = 0; ; i++) {\n                 String d = prop.getProperty(Integer.toString(i));\n                 if (d == null) {\n                     break;\n@@ -363,23 +369,29 @@ public class Shell extends Tool implements Runnable {\n         println(\"[Enter]   \" + user);\n         print(\"User      \");\n         user = readLine(user);\n-        conn = url.startsWith(Constants.START_URL) ? connectH2(driver, url, user)\n+        conn = url.startsWith(Constants.START_URL) ?\n+                connectH2(driver, url, user)\n                 : JdbcUtils.getConnection(driver, url, user, readPassword());\n         stat = conn.createStatement();\n         println(\"Connected\");\n     }\n \n-    private Connection connectH2(String driver, String url, String user) throws IOException, SQLException {\n-        for (;;) {\n+    private Connection connectH2(String driver, String url, String user)\n+            throws IOException, SQLException {\n+        for (; ; ) {\n             String password = readPassword();\n             try {\n-                return JdbcUtils.getConnection(driver, url + \";IFEXISTS=TRUE\", user, password);\n+                return JdbcUtils\n+                        .getConnection(driver, url + \";IFEXISTS=TRUE\", user,\n+                                password);\n             } catch (SQLException ex) {\n-                if (ex.getErrorCode() == ErrorCode.DATABASE_NOT_FOUND_WITH_IF_EXISTS_1) {\n+                if (ex.getErrorCode() ==\n+                        ErrorCode.DATABASE_NOT_FOUND_WITH_IF_EXISTS_1) {\n                     println(\"Type the same password again to confirm database creation.\");\n                     String password2 = readPassword();\n                     if (password.equals(password2)) {\n-                        return JdbcUtils.getConnection(driver, url, user, password);\n+                        return JdbcUtils\n+                                .getConnection(driver, url, user, password);\n                     } else {\n                         println(\"Passwords don't match. Try again.\");\n                     }\n@@ -409,7 +421,8 @@ public class Shell extends Tool implements Runnable {\n         try {\n             Object console = Utils.callStaticMethod(\"java.lang.System.console\");\n             print(\"Password  \");\n-            char[] password = (char[]) Utils.callMethod(console, \"readPassword\");\n+            char[] password =\n+                    (char[]) Utils.callMethod(console, \"readPassword\");\n             return password == null ? null : new String(password);\n         } catch (Exception e) {\n             // ignore, use the default solution\n@@ -468,15 +481,16 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n-\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n-\t\t     int rowCount = printResult(rs, listMode);\n-\t\t } else if (stat.execute(sql)) {\n+                if (sql.startsWith(\"@\")) {\n+                    rs = JdbcUtils.getMetaResultSet(conn, sql);\n+                    int rowCount = printResult(rs, listMode);\n+                } else if (stat.execute(sql)) {\n                     rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n                     println(\"(\" + rowCount + (rowCount == 1 ?\n-                            \" row, \" : \" rows, \") + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n+                            \" row, \" : \" rows, \") +\n+                            TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n                 } else {\n                     int updateCount = stat.getUpdateCount();\n                     time = System.nanoTime() - time;\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "472",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/135/Shell.java\nindex cf501c66c96..dae57a37930 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/135/Shell.java\n@@ -468,11 +468,11 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n+    if (sql.startsWith(\"@\")) {\n \t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n \t\t     int rowCount = printResult(rs, listMode);\n \t\t } else if (stat.execute(sql)) {\n-                    rs = stat.getResultSet();\n+    rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n                     println(\"(\" + rowCount + (rowCount == 1 ?\n@@ -625,4 +625,4 @@ public class Shell extends Tool implements Runnable {\n         return rowCount;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/135/Shell.java\nindex cf501c66c96..bc372320a34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/135/Shell.java\n@@ -20,7 +20,6 @@ import java.sql.Statement;\n import java.util.ArrayList;\n import java.util.Properties;\n import java.util.concurrent.TimeUnit;\n-\n import org.h2.api.ErrorCode;\n import org.h2.engine.Constants;\n import org.h2.server.web.ConnectionInfo;\n@@ -35,13 +34,14 @@ import org.h2.util.Utils;\n  * Interactive command line tool to access a database using JDBC.\n  * @h2.resource\n  */\n+\n+\n public class Shell extends Tool implements Runnable {\n \n     private static final int MAX_ROW_BUFFER = 5000;\n     private static final int HISTORY_COUNT = 20;\n     // Windows: '\\u00b3';\n     private static final char BOX_VERTICAL = '|';\n-\n     private PrintStream err = System.err;\n     private InputStream in = System.in;\n     private BufferedReader reader;\n@@ -49,7 +49,7 @@ public class Shell extends Tool implements Runnable {\n     private Statement stat;\n     private boolean listMode;\n     private int maxColumnSize = 100;\n-    private final ArrayList<String> history = new ArrayList<>();\n+    private final ArrayList<String> history = new ArrayList< >();\n     private boolean stopHide;\n     private String serverPropertiesDir = Constants.SERVER_PROPERTIES_DIR;\n \n@@ -77,6 +77,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param args the command line arguments\n      */\n+\n+\n     public static void main(String... args) throws SQLException {\n         new Shell().runTool(args);\n     }\n@@ -86,6 +88,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param err the new standard error stream\n      */\n+\n+\n     public void setErr(PrintStream err) {\n         this.err = err;\n     }\n@@ -95,6 +99,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param in the input stream to use\n      */\n+\n+\n     public void setIn(InputStream in) {\n         this.in = in;\n     }\n@@ -104,6 +110,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param reader the input stream reader to use\n      */\n+\n+\n     public void setInReader(BufferedReader reader) {\n         this.reader = reader;\n     }\n@@ -113,6 +121,7 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param args the command line settings\n      */\n+\n     @Override\n     public void runTool(String... args) throws SQLException {\n         String url = null;\n@@ -125,23 +134,23 @@ public class Shell extends Tool implements Runnable {\n                 url = args[++i];\n             } else if (arg.equals(\"-user\")) {\n                 user = args[++i];\n-            } else if (arg.equals(\"-password\")) {\n-                password = args[++i];\n+                                                              } else if (arg.equals(\"-password\")) {\n+                       password = args[++i];\n             } else if (arg.equals(\"-driver\")) {\n-                String driver = args[++i];\n-                JdbcUtils.loadUserClass(driver);\n+                                                                         String driver = args[++i];\n+                                                                         JdbcUtils.loadUserClass(driver);\n             } else if (arg.equals(\"-sql\")) {\n-                sql = args[++i];\n-            } else if (arg.equals(\"-properties\")) {\n-                serverPropertiesDir = args[++i];\n-            } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n-                showUsage();\n-                return;\n-            } else if (arg.equals(\"-list\")) {\n-                listMode = true;\n-            } else {\n-                showUsageAndThrowUnsupportedOption(arg);\n-            }\n+                       sql = args[++i];\n+                   } else if (arg.equals(\"-properties\")) {\n+                       serverPropertiesDir = args[++i];\n+                                                                     } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n+                              showUsage();\n+                              return;\n+                   } else if (arg.equals(\"-list\")) {\n+                                                                                listMode = true;\n+                   } else {\n+                                                                                showUsageAndThrowUnsupportedOption(arg);\n+                                                                            }\n         }\n         if (url != null) {\n             conn = DriverManager.getConnection(url, user, password);\n@@ -176,6 +185,8 @@ public class Shell extends Tool implements Runnable {\n      * @param conn the connection\n      * @param args the command line settings\n      */\n+\n+\n     public void runTool(Connection conn, String... args) throws SQLException {\n         this.conn = conn;\n         this.stat = conn.createStatement();\n@@ -234,67 +245,67 @@ public class Shell extends Tool implements Runnable {\n                 } else if (\"help\".equals(lower) || \"?\".equals(lower)) {\n                     showHelp();\n                 } else if (\"list\".equals(lower)) {\n-                    listMode = !listMode;\n-                    println(\"Result list mode is now \" + (listMode ? \"on\" : \"off\"));\n+                           listMode = !listMode;\n+                           println(\"Result list mode is now \" + (listMode ? \"on\" : \"off\"));\n                 } else if (\"history\".equals(lower)) {\n-                    for (int i = 0, size = history.size(); i < size; i++) {\n-                        String s = history.get(i);\n-                        s = s.replace('\\n', ' ').replace('\\r', ' ');\n-                        println(\"#\" + (1 + i) + \": \" + s);\n-                    }\n-                    if (!history.isEmpty()) {\n-                        println(\"To re-run a statement, type the number and press and enter\");\n-                    } else {\n-                        println(\"No history\");\n-                    }\n+                           for (int i = 0, size = history.size(); i < size; i++) {\n+                               String s = history.get(i);\n+                               s = s.replace('\\n', ' ').replace('\\r', ' ');\n+                               println(\"#\" + (1 + i) + \": \" + s);\n+                           }\n+                           if (!history.isEmpty()) {\n+                               println(\"To re-run a statement, type the number and press and enter\");\n+                           } else {\n+                               println(\"No history\");\n+                           }\n                 } else if (lower.startsWith(\"autocommit\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"autocommit\".length());\n-                    if (\"true\".equals(lower)) {\n-                        conn.setAutoCommit(true);\n-                    } else if (\"false\".equals(lower)) {\n-                        conn.setAutoCommit(false);\n-                    } else {\n-                        println(\"Usage: autocommit [true|false]\");\n-                    }\n-                    println(\"Autocommit is now \" + conn.getAutoCommit());\n-                } else if (lower.startsWith(\"maxwidth\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"maxwidth\".length());\n-                    try {\n-                        maxColumnSize = Integer.parseInt(lower);\n-                    } catch (NumberFormatException e) {\n-                        println(\"Usage: maxwidth <integer value>\");\n-                    }\n-                    println(\"Maximum column width is now \" + maxColumnSize);\n-                } else {\n-                    boolean addToHistory = true;\n-                    if (statement == null) {\n-                        if (StringUtils.isNumber(line)) {\n-                            int pos = Integer.parseInt(line);\n-                            if (pos == 0 || pos > history.size()) {\n-                                println(\"Not found\");\n-                            } else {\n-                                statement = history.get(pos - 1);\n-                                addToHistory = false;\n-                                println(statement);\n-                                end = true;\n-                            }\n-                        } else {\n-                            statement = line;\n-                        }\n-                    } else {\n-                        statement += \"\\n\" + line;\n-                    }\n-                    if (end) {\n-                        if (addToHistory) {\n-                            history.add(0, statement);\n-                            if (history.size() > HISTORY_COUNT) {\n-                                history.remove(HISTORY_COUNT);\n-                            }\n-                        }\n-                        execute(statement);\n-                        statement = null;\n-                    }\n-                }\n+                           lower = StringUtils.trimSubstring(lower, \"autocommit\".length());\n+                           if (\"true\".equals(lower)) {\n+                               conn.setAutoCommit(true);\n+                           } else if (\"false\".equals(lower)) {\n+                               conn.setAutoCommit(false);\n+                                                           } else {\n+                               println(\"Usage: autocommit [true|false]\");\n+                           }\n+                           println(\"Autocommit is now \" + conn.getAutoCommit());\n+                       } else if (lower.startsWith(\"maxwidth\")) {\n+                           lower = StringUtils.trimSubstring(lower, \"maxwidth\".length());\n+                           try {\n+                               maxColumnSize = Integer.parseInt(lower);\n+                           } catch (NumberFormatException e) {\n+                               println(\"Usage: maxwidth <integer value>\");\n+                           }\n+                           println(\"Maximum column width is now \" + maxColumnSize);\n+                       } else {\n+                           boolean addToHistory = true;\n+                           if (statement == null) {\n+                               if (StringUtils.isNumber(line)) {\n+                                   int pos = Integer.parseInt(line);\n+                                   if (pos == 0 || pos > history.size()) {\n+                                       println(\"Not found\");\n+                                   } else {\n+                                       statement = history.get(pos - 1);\n+                                       addToHistory = false;\n+                                       println(statement);\n+                                       end = true;\n+                                   }\n+                               } else {\n+                                   statement = line;\n+                               }\n+                           } else {\n+                               statement += \"\\n\" + line;\n+                           }\n+                           if (end) {\n+                               if (addToHistory) {\n+                                   history.add(0, statement);\n+                                   if (history.size() > HISTORY_COUNT) {\n+                                       history.remove(HISTORY_COUNT);\n+                                   }\n+                               }\n+                               execute(statement);\n+                               statement = null;\n+                           }\n+                       }\n             } catch (SQLException e) {\n                 println(\"SQL Exception: \" + e.getMessage());\n                 statement = null;\n@@ -327,8 +338,7 @@ public class Shell extends Tool implements Runnable {\n             if (\"null\".equals(serverPropertiesDir)) {\n                 prop = new Properties();\n             } else {\n-                prop = SortedProperties.loadProperties(\n-                        serverPropertiesDir + \"/\" + Constants.SERVER_PROPERTIES_NAME);\n+                prop = SortedProperties.loadProperties(serverPropertiesDir + \"/\" + Constants.SERVER_PROPERTIES_NAME);\n             }\n             String data = null;\n             boolean found = false;\n@@ -348,6 +358,7 @@ public class Shell extends Tool implements Runnable {\n             }\n         } catch (IOException e) {\n             // ignore\n+\n         }\n         println(\"[Enter]   \" + url);\n         print(\"URL       \");\n@@ -363,8 +374,7 @@ public class Shell extends Tool implements Runnable {\n         println(\"[Enter]   \" + user);\n         print(\"User      \");\n         user = readLine(user);\n-        conn = url.startsWith(Constants.START_URL) ? connectH2(driver, url, user)\n-                : JdbcUtils.getConnection(driver, url, user, readPassword());\n+        conn = url.startsWith(Constants.START_URL) ? connectH2(driver, url, user) : JdbcUtils.getConnection(driver, url, user, readPassword());\n         stat = conn.createStatement();\n         println(\"Connected\");\n     }\n@@ -395,6 +405,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param s the string to print\n      */\n+\n+\n     protected void print(String s) {\n         out.print(s);\n         out.flush();\n@@ -413,6 +425,7 @@ public class Shell extends Tool implements Runnable {\n             return password == null ? null : new String(password);\n         } catch (Exception e) {\n             // ignore, use the default solution\n+\n         }\n         Thread passwordHider = new Thread(this, \"Password hider\");\n         stopHide = false;\n@@ -424,6 +437,7 @@ public class Shell extends Tool implements Runnable {\n             passwordHider.join();\n         } catch (InterruptedException e) {\n             // ignore\n+\n         }\n         print(\"\\b\\b\");\n         return p;\n@@ -434,6 +448,7 @@ public class Shell extends Tool implements Runnable {\n      * Hides the password by repeatedly printing\n      * backspace, backspace, &gt;, &lt;.\n      */\n+\n     @Override\n     public void run() {\n         while (!stopHide) {\n@@ -442,11 +457,11 @@ public class Shell extends Tool implements Runnable {\n                 Thread.sleep(10);\n             } catch (InterruptedException e) {\n                 // ignore\n+\n             }\n         }\n     }\n \n-\n     private String readLine(String defaultValue) throws IOException {\n         String s = readLine();\n         return s.isEmpty() ? defaultValue : s;\n@@ -468,20 +483,19 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n-\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n-\t\t     int rowCount = printResult(rs, listMode);\n-\t\t } else if (stat.execute(sql)) {\n+                if (sql.startsWith(\"@\")) {\n+                    rs = JdbcUtils.getMetaResultSet(conn, sql);\n+                    int rowCount = printResult(rs, listMode);\n+                } else if (stat.execute(sql)) {\n                     rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n-                    println(\"(\" + rowCount + (rowCount == 1 ?\n-                            \" row, \" : \" rows, \") + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n+                    println(\"(\" + rowCount + (rowCount == 1 ? \" row, \" : \" rows, \") + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n                 } else {\n                     int updateCount = stat.getUpdateCount();\n                     time = System.nanoTime() - time;\n-                    println(\"(Update count: \" + updateCount + \", \" +\n-                            TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n+                    println(\"(Update count: \" + updateCount + \", \"\n+                    + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n                 }\n             } finally {\n                 JdbcUtils.closeSilently(rs);\n@@ -505,7 +519,7 @@ public class Shell extends Tool implements Runnable {\n         ResultSetMetaData meta = rs.getMetaData();\n         int len = meta.getColumnCount();\n         boolean truncated = false;\n-        ArrayList<String[]> rows = new ArrayList<>();\n+        ArrayList<String[]> rows = new ArrayList< >();\n         // buffer the header\n         String[] columns = new String[len];\n         for (int i = 0; i < len; i++) {\n@@ -530,8 +544,7 @@ public class Shell extends Tool implements Runnable {\n         return rowCount;\n     }\n \n-    private boolean loadRow(ResultSet rs, int len, ArrayList<String[]> rows)\n-            throws SQLException {\n+    private boolean loadRow(ResultSet rs, int len, ArrayList<String[]> rows) throws SQLException {\n         boolean truncated = false;\n         String[] row = new String[len];\n         for (int i = 0; i < len; i++) {\n@@ -625,4 +638,4 @@ public class Shell extends Tool implements Runnable {\n         return rowCount;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 114
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "472",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/135/Shell.java\nindex cf501c66c96..b4c4b704bcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/135/Shell.java\n@@ -468,7 +468,7 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n+                if (sql.startsWith(\"@\")) {\n \t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n \t\t     int rowCount = printResult(rs, listMode);\n \t\t } else if (stat.execute(sql)) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "472",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/135/Shell.java\nindex cf501c66c96..b4c4b704bcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/135/Shell.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/135/Shell.java\n@@ -468,7 +468,7 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n+                if (sql.startsWith(\"@\")) {\n \t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n \t\t     int rowCount = printResult(rs, listMode);\n \t\t } else if (stat.execute(sql)) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}