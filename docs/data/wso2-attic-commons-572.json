{
    "project_name": "wso2-attic-commons",
    "error_id": "572",
    "information": {
        "errors": [
            {
                "line": "320",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                            values.add((String) ((SimpleAttribute) subAttribute).getValue());\n                        } else if (subAttribute instanceof ComplexAttribute) {\n                            //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n                            SimpleAttribute valueAttribute =\n                                    (SimpleAttribute) (((ComplexAttribute) subAttribute).getSubAttribute(\n                                            SCIMConstants.CommonSchemaConstants.VALUE));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/572/User.java\nindex d7efb4722ff..a43842e6501 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/572/User.java\n@@ -317,8 +317,8 @@ public class User extends AbstractSCIMObject {\n                         if (subAttribute instanceof SimpleAttribute) {\n                             values.add((String) ((SimpleAttribute) subAttribute).getValue());\n                         } else if (subAttribute instanceof ComplexAttribute) {\n-                            //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n-                            SimpleAttribute valueAttribute =\n+                        //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n+                        SimpleAttribute valueAttribute =\n                                     (SimpleAttribute) (((ComplexAttribute) subAttribute).getSubAttribute(\n                                             SCIMConstants.CommonSchemaConstants.VALUE));\n                             values.add((String) valueAttribute.getValue());\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/572/User.java\nindex d7efb4722ff..a337c710f12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/572/User.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.charon.core.objects;\n \n import org.wso2.charon.core.attributes.Attribute;\n@@ -40,83 +41,83 @@ import java.util.Map;\n  */\n public class User extends AbstractSCIMObject {\n \n-    public User() {\n-        super();\n-    }\n-\n-    /**\n-     * Set bulkID when going to do the bulk operation\n-     *\n-     * @param bulkID\n-     * @throws CharonException\n-     */\n-    public void setBulkID(String bulkID) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.BULK_ID, SCIMSchemaDefinitions.BULK_ID,\n-                           bulkID, DataType.STRING);\n-    }\n-\n-    /**\n-     * Get bulkID\n-     *\n-     * @return\n-     * @throws CharonException\n-     */\n-    public String getBulkID() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.CommonSchemaConstants.BULK_ID);\n-    }\n-\n-    /**\n-     * Set path ex - /Users or /Groups\n-     *\n-     * @param path\n-     * @throws CharonException\n-     */\n-    public void setPath(String path) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.PATH, SCIMSchemaDefinitions.PATH,\n-                           path, DataType.STRING);\n-    }\n-\n-    /**\n-     * Get path\n-     *\n-     * @return\n-     * @throws CharonException\n-     */\n-    public String getPath() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.CommonSchemaConstants.PATH);\n-    }\n-\n-    /**\n-     * Set request method ex - POST\n-     *\n-     * @param method\n-     * @throws CharonException\n-     */\n-    public void setMethod(String method) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.METHOD, SCIMSchemaDefinitions.METHOD,\n-                           method, DataType.STRING);\n-    }\n-\n-    /**\n-     * Get request method\n-     *\n-     * @return\n-     * @throws CharonException\n-     */\n-    public String getMethod() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.CommonSchemaConstants.METHOD);\n-    }\n-\n-    /***********************UserName manipulation methods*************************************/\n-    /**\n-     * Set UserName attribute of the User.\n-     *\n-     * @param userName\n-     * @throws CharonException\n-     */\n-    public void setUserName(String userName) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_NAME, SCIMSchemaDefinitions.USER_NAME,\n-                           userName, DataType.STRING);\n+  public User() {\n+    super();\n+  }\n+\n+  /**\n+   * Set bulkID when going to do the bulk operation\n+   *\n+   * @param bulkID\n+   * @throws CharonException\n+   */\n+  public void setBulkID(String bulkID) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.CommonSchemaConstants.BULK_ID, SCIMSchemaDefinitions.BULK_ID,\n+      bulkID, DataType.STRING);\n+  }\n+\n+  /**\n+   * Get bulkID\n+   *\n+   * @return\n+   * @throws CharonException\n+   */\n+  public String getBulkID() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.CommonSchemaConstants.BULK_ID);\n+  }\n+\n+  /**\n+   * Set path ex - /Users or /Groups\n+   *\n+   * @param path\n+   * @throws CharonException\n+   */\n+  public void setPath(String path) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.CommonSchemaConstants.PATH, SCIMSchemaDefinitions.PATH,\n+      path, DataType.STRING);\n+  }\n+\n+  /**\n+   * Get path\n+   *\n+   * @return\n+   * @throws CharonException\n+   */\n+  public String getPath() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.CommonSchemaConstants.PATH);\n+  }\n+\n+  /**\n+   * Set request method ex - POST\n+   *\n+   * @param method\n+   * @throws CharonException\n+   */\n+  public void setMethod(String method) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.CommonSchemaConstants.METHOD, SCIMSchemaDefinitions.METHOD,\n+      method, DataType.STRING);\n+  }\n+\n+  /**\n+   * Get request method\n+   *\n+   * @return\n+   * @throws CharonException\n+   */\n+  public String getMethod() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.CommonSchemaConstants.METHOD);\n+  }\n+\n+  /***********************UserName manipulation methods*************************************/\n+  /**\n+   * Set UserName attribute of the User.\n+   *\n+   * @param userName\n+   * @throws CharonException\n+   */\n+  public void setUserName(String userName) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_NAME, SCIMSchemaDefinitions.USER_NAME,\n+      userName, DataType.STRING);\n         /*if (isAttributeExist(SCIMConstants.UserSchemaConstants.USER_NAME)) {\n             ((SimpleAttribute) attributeList.get(\n                     SCIMConstants.UserSchemaConstants.USER_NAME)).updateValue(\n@@ -133,17 +134,17 @@ public class User extends AbstractSCIMObject {\n                     SCIMSchemaDefinitions.USER_NAME, userNameAttribute);\n             attributeList.put(SCIMConstants.UserSchemaConstants.USER_NAME, userNameAttribute);\n         }*/\n-    }\n-\n-    /**\n-     * Get UserName attribute of the user.\n-     *\n-     * @return\n-     * @throws NotFoundException\n-     * @throws CharonException\n-     */\n-    public String getUserName() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.USER_NAME);\n+  }\n+\n+  /**\n+   * Get UserName attribute of the user.\n+   *\n+   * @return\n+   * @throws NotFoundException\n+   * @throws CharonException\n+   */\n+  public String getUserName() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.USER_NAME);\n         /*if (isAttributeExist(SCIMConstants.UserSchemaConstants.USER_NAME)) {\n             return ((SimpleAttribute) attributeList.get(\n                     SCIMConstants.UserSchemaConstants.USER_NAME)).getStringValue();\n@@ -151,885 +152,885 @@ public class User extends AbstractSCIMObject {\n         } else {\n             return null;\n         }*/\n-    }\n-\n-    /**\n-     * ******************************Email manipulation methods**************************\n-     */\n-    public void setEmail(Map<String, Object> propertyValues) throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n-            (attributeList.get(SCIMConstants.UserSchemaConstants.EMAILS)).\n-                    setComplexValue(propertyValues);\n-        } else {\n-            MultiValuedAttribute membersAttribute =\n-                    new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.EMAILS);\n-            membersAttribute.setComplexValue(propertyValues);\n-            membersAttribute =\n-                    (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n-                            SCIMSchemaDefinitions.EMAILS, membersAttribute);\n-            this.attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, membersAttribute);\n-        }\n-    }\n-\n-    /**\n-     * Set the work email in the multi valued attribute - emails\n-     *\n-     * @param email\n-     * @param isPrimary\n-     * @throws CharonException\n-     */\n-    public void setWorkEmail(String email, boolean isPrimary) throws CharonException {\n+  }\n+\n+  /**\n+   * ******************************Email manipulation methods**************************\n+   */\n+  public void setEmail(Map<String, Object> propertyValues) throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n+      (attributeList.get(SCIMConstants.UserSchemaConstants.EMAILS)).\n+        setComplexValue(propertyValues);\n+    } else {\n+      MultiValuedAttribute membersAttribute =\n+        new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.EMAILS);\n+      membersAttribute.setComplexValue(propertyValues);\n+      membersAttribute =\n+        (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n+          SCIMSchemaDefinitions.EMAILS, membersAttribute);\n+      this.attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, membersAttribute);\n+    }\n+  }\n+\n+  /**\n+   * Set the work email in the multi valued attribute - emails\n+   *\n+   * @param email\n+   * @param isPrimary\n+   * @throws CharonException\n+   */\n+  public void setWorkEmail(String email, boolean isPrimary) throws CharonException {\n         /*MultiValuedAttribute emailsAttribute = new MultiValuedAttribute(\n                 SCIMConstants.UserSchemaConstants.EMAILS, SCIMConstants.CORE_SCHEMA_URI);\n         emailsAttribute.setAttributeValue(SCIMConstants.UserSchemaConstants.WORK,\n                                           isPrimary, null, email, DataType.STRING);\n         attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, emailsAttribute);*/\n-        Map<String, Object> propertyValues = new HashMap<String, Object>();\n-        propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n-        propertyValues.put(SCIMConstants.CommonSchemaConstants.TYPE, SCIMConstants.UserSchemaConstants.WORK);\n-        if (isPrimary) {\n-            propertyValues.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n-        }\n-        setEmail(propertyValues);\n-    }\n-\n-    /**\n-     * Get the work email from the multi valued attribute - emails\n-     *\n-     * @return\n-     * @throws CharonException\n-     * @throws NotFoundException\n-     */\n-    public String getWorkEmail() throws CharonException, NotFoundException {\n-        MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n-                SCIMConstants.UserSchemaConstants.EMAILS);\n-        if (emailsAttribute != null) {\n-            return (String) emailsAttribute.getAttributeValueByType(\n-                    SCIMConstants.UserSchemaConstants.WORK);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Set home email in the multi valued attribute - emails.\n-     *\n-     * @param email\n-     * @param isPrimary\n-     * @throws CharonException\n-     */\n-    public void setHomeEmail(String email, boolean isPrimary) throws CharonException {\n+    Map<String, Object> propertyValues = new HashMap<String, Object>();\n+    propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n+    propertyValues.put(SCIMConstants.CommonSchemaConstants.TYPE, SCIMConstants.UserSchemaConstants.WORK);\n+    if (isPrimary) {\n+      propertyValues.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n+    }\n+    setEmail(propertyValues);\n+  }\n+\n+  /**\n+   * Get the work email from the multi valued attribute - emails\n+   *\n+   * @return\n+   * @throws CharonException\n+   * @throws NotFoundException\n+   */\n+  public String getWorkEmail() throws CharonException, NotFoundException {\n+    MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n+      SCIMConstants.UserSchemaConstants.EMAILS);\n+    if (emailsAttribute != null) {\n+      return (String) emailsAttribute.getAttributeValueByType(\n+        SCIMConstants.UserSchemaConstants.WORK);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Set home email in the multi valued attribute - emails.\n+   *\n+   * @param email\n+   * @param isPrimary\n+   * @throws CharonException\n+   */\n+  public void setHomeEmail(String email, boolean isPrimary) throws CharonException {\n         /*MultiValuedAttribute emailsAttribute = new MultiValuedAttribute(\n                 SCIMConstants.UserSchemaConstants.EMAILS, SCIMConstants.CORE_SCHEMA_URI);\n         emailsAttribute.setAttributeValue(SCIMConstants.UserSchemaConstants.HOME,\n                                           isPrimary, null, email, DataType.STRING);\n         attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, emailsAttribute);*/\n-        Map<String, Object> propertyValues = new HashMap<String, Object>();\n-        propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n-        propertyValues.put(SCIMConstants.CommonSchemaConstants.TYPE, SCIMConstants.UserSchemaConstants.HOME);\n-        if (isPrimary) {\n-            propertyValues.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n-        }\n-        setEmail(propertyValues);\n-    }\n-\n-    /**\n-     * Get the home email from the multi valued attribute - emails\n-     *\n-     * @return\n-     */\n-    public String getHomeEmail() throws CharonException, NotFoundException {\n-        MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n-                SCIMConstants.UserSchemaConstants.EMAILS);\n-        if (emailsAttribute != null) {\n-            return (String) emailsAttribute.getAttributeValueByType(\n-                    SCIMConstants.UserSchemaConstants.HOME);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Set any custom type email provided by user, in the multi valued attribute - email\n-     *\n-     * @param email\n-     * @param isPrimary\n-     * @param type\n-     * @throws CharonException\n-     */\n-    public void setOtherEmail(String email, boolean isPrimary, String type) throws CharonException {\n+    Map<String, Object> propertyValues = new HashMap<String, Object>();\n+    propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n+    propertyValues.put(SCIMConstants.CommonSchemaConstants.TYPE, SCIMConstants.UserSchemaConstants.HOME);\n+    if (isPrimary) {\n+      propertyValues.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n+    }\n+    setEmail(propertyValues);\n+  }\n+\n+  /**\n+   * Get the home email from the multi valued attribute - emails\n+   *\n+   * @return\n+   */\n+  public String getHomeEmail() throws CharonException, NotFoundException {\n+    MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n+      SCIMConstants.UserSchemaConstants.EMAILS);\n+    if (emailsAttribute != null) {\n+      return (String) emailsAttribute.getAttributeValueByType(\n+        SCIMConstants.UserSchemaConstants.HOME);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Set any custom type email provided by user, in the multi valued attribute - email\n+   *\n+   * @param email\n+   * @param isPrimary\n+   * @param type\n+   * @throws CharonException\n+   */\n+  public void setOtherEmail(String email, boolean isPrimary, String type) throws CharonException {\n         /*MultiValuedAttribute emailsAttribute = new MultiValuedAttribute(\n                 SCIMConstants.UserSchemaConstants.EMAILS, SCIMConstants.CORE_SCHEMA_URI);\n         emailsAttribute.setAttributeValue(type,\n                                           isPrimary, null, email, DataType.STRING);\n         attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, emailsAttribute);*/\n-        Map<String, Object> propertyValues = new HashMap<String, Object>();\n-        propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n-        propertyValues.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n-        if (isPrimary) {\n-            propertyValues.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n-        }\n-        setEmail(propertyValues);\n+    Map<String, Object> propertyValues = new HashMap<String, Object>();\n+    propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n+    propertyValues.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n+    if (isPrimary) {\n+      propertyValues.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n     }\n+    setEmail(propertyValues);\n+  }\n \n \n-    public void setEmails(String[] emails) throws CharonException {\n+  public void setEmails(String[] emails) throws CharonException {\n         /*MultiValuedAttribute emailsAttribute = new MultiValuedAttribute(\n                 SCIMConstants.UserSchemaConstants.EMAILS, SCIMConstants.CORE_SCHEMA_URI);\n         for (String email : emails) {\n             emailsAttribute.setSimpleAttributeValue(email, DataType.STRING);\n         }\n         attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, emailsAttribute);*/\n-        Map<String, Object> propertyValues = new HashMap<String, Object>();\n-        if (emails != null && emails.length != 0) {\n-            for (String email : emails) {\n-                propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n-                setEmail(propertyValues);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Get the email addresses as an array of Strings. Since emails is an multi-valued attribute\n-     * and since a multi-valued attribute can contain the values in different ways, needs to check\n-     * for all those possible ways.\n-     *\n-     * @return\n-     */\n-    public String[] getEmails() throws CharonException {\n-\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n-            //get the emails attribute\n-            MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.EMAILS);\n-            //check if the values are stored just as a list of Strings.\n-            if (emailsAttribute.getValuesAsStrings() != null &&\n-                emailsAttribute.getValuesAsStrings().size() != 0) {\n-                List<String> emails = emailsAttribute.getValuesAsStrings();\n-                return emails.toArray(new String[emails.size()]);\n-            } else {\n-                //check is the values are stored as simple of complex attributes\n-                List<Attribute> subAttributes = emailsAttribute.getValuesAsSubAttributes();\n-                List<String> values = new ArrayList<String>();\n-                if (subAttributes != null && subAttributes.size() != 0) {\n-                    for (Attribute subAttribute : subAttributes) {\n-                        //if value is a simple attribute of type: \"value : \"email\";\n-                        if (subAttribute instanceof SimpleAttribute) {\n-                            values.add((String) ((SimpleAttribute) subAttribute).getValue());\n-                        } else if (subAttribute instanceof ComplexAttribute) {\n-                            //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n-                            SimpleAttribute valueAttribute =\n-                                    (SimpleAttribute) (((ComplexAttribute) subAttribute).getSubAttribute(\n-                                            SCIMConstants.CommonSchemaConstants.VALUE));\n-                            values.add((String) valueAttribute.getValue());\n-                        }\n-                    }\n-\n-                }\n-                String[] valuesAsStrings = null;\n-                if (values.size() != 0) {\n-                    valuesAsStrings = new String[values.size()];\n-                    int i = 0;\n-                    for (String value : values) {\n-                        valuesAsStrings[i] = value;\n-                        i++;\n-                    }\n-                }\n-                //return (String[])values.toString gave class cast exception\n-                return valuesAsStrings;\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public String getPrimaryEmail() throws CharonException, NotFoundException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n-            MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.EMAILS);\n-            return (String) emailsAttribute.getPrimaryValue();\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Retrieve any custom type email set by the user in the multi valued attribute - email\n-     *\n-     * @param type\n-     * @return\n-     * @throws CharonException\n-     * @throws NotFoundException\n-     */\n-    public String getEmailByType(String type) throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n-            MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.EMAILS);\n-            return (String) emailsAttribute.getAttributeValueByType(type);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * ************DisplayName manipulation methods.*************************************\n-     */\n-\n-    public String getDisplayName() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.DISPLAY_NAME);\n-    }\n-\n-    public void setDisplayName(String displayName) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.DISPLAY_NAME,\n-                           SCIMSchemaDefinitions.USER_DISPLAY_NAME, displayName, DataType.STRING);\n-    }\n-\n-    /**\n-     * ***********************Name manipulation methods**********************************\n-     */\n-    private void createName() throws CharonException {\n-        ComplexAttribute nameAttribute =\n-                (ComplexAttribute) DefaultAttributeFactory.createAttribute(\n-                        SCIMSchemaDefinitions.NAME, new ComplexAttribute(SCIMConstants.UserSchemaConstants.NAME));\n-        if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.NAME)) {\n-            throw new CharonException(ResponseCodeConstants.ATTRIBUTE_ALREADY_EXIST);\n-        } else {\n-            attributeList.put(SCIMConstants.UserSchemaConstants.NAME, nameAttribute);\n-        }\n-    }\n-\n-    private ComplexAttribute getNameAttribute() {\n-        if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.NAME)) {\n-            return (ComplexAttribute) attributeList.get(SCIMConstants.UserSchemaConstants.NAME);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    private boolean isNameExist() {\n-        if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.NAME)) {\n-            return true;\n-        } else {\n-            return false;\n-        }\n-    }\n-    //formatted name\n-\n-    public void setFormattedName(String formattedName) throws CharonException {\n-        SimpleAttribute formattedAttribute =\n-                (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n-                        SCIMSchemaDefinitions.FORMATTED,\n-                        new SimpleAttribute(SCIMConstants.UserSchemaConstants.FORMATTED_NAME, formattedName));\n-        if (isNameExist()) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            nameAttribute.setSubAttribute(formattedAttribute);\n-        } else {\n-            createName();\n-            getNameAttribute().setSubAttribute(formattedAttribute);\n-        }\n-    }\n-\n-    public String getFormattedName() throws CharonException {\n-        if (getNameAttribute() != null) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            SimpleAttribute formattedName = (SimpleAttribute) nameAttribute.getSubAttribute(\n-                    SCIMConstants.UserSchemaConstants.FORMATTED_NAME);\n-            if (formattedName != null) {\n-                return formattedName.getStringValue();\n-            } else {\n-                return null;\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    //family name\n-\n-    public void setFamilyName(String familyName) throws CharonException {\n-        SimpleAttribute familyNameAttribute =\n-                (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n-                        SCIMSchemaDefinitions.FAMILY_NAME,\n-                        new SimpleAttribute(SCIMConstants.UserSchemaConstants.FAMILY_NAME, familyName));\n-        if (isNameExist()) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            nameAttribute.setSubAttribute(familyNameAttribute);\n-        } else {\n-            createName();\n-            getNameAttribute().setSubAttribute(familyNameAttribute);\n-        }\n-    }\n-\n-    public String getFamilyName() throws CharonException {\n-        if (getNameAttribute() != null) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            SimpleAttribute familyName = (SimpleAttribute) nameAttribute.getSubAttribute(\n-                    SCIMConstants.UserSchemaConstants.FAMILY_NAME);\n-            if (familyName != null) {\n-                return familyName.getStringValue();\n-            } else {\n-                return null;\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    //given name\n-\n-    public void setGivenName(String givenName) throws CharonException {\n-        SimpleAttribute givenNameAttribute =\n-                (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n-                        SCIMSchemaDefinitions.GIVEN_NAME,\n-                        new SimpleAttribute(SCIMConstants.UserSchemaConstants.GIVEN_NAME, givenName));\n-        if (isNameExist()) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            nameAttribute.setSubAttribute(givenNameAttribute);\n-        } else {\n-            createName();\n-            getNameAttribute().setSubAttribute(givenNameAttribute);\n-        }\n-    }\n-\n-    public String getGivenName() throws CharonException {\n-        if (getNameAttribute() != null) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            SimpleAttribute givenName = (SimpleAttribute) nameAttribute.getSubAttribute(\n-                    SCIMConstants.UserSchemaConstants.GIVEN_NAME);\n-            if (givenName != null) {\n-                return givenName.getStringValue();\n-            } else {\n-                return null;\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    //middle name\n-\n-    public void setMiddleName(String middleName) throws CharonException {\n-        SimpleAttribute middleNameAttribute =\n-                (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n-                        SCIMSchemaDefinitions.MIDDLE_NAME,\n-                        new SimpleAttribute(SCIMConstants.UserSchemaConstants.MIDDLE_NAME, middleName));\n-        if (isNameExist()) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            nameAttribute.setSubAttribute(middleNameAttribute);\n-        } else {\n-            createName();\n-            getNameAttribute().setSubAttribute(middleNameAttribute);\n-        }\n-    }\n-\n-    public String getMiddleName() throws CharonException {\n-        if (getNameAttribute() != null) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            SimpleAttribute middleName = (SimpleAttribute) nameAttribute.getSubAttribute(\n-                    SCIMConstants.UserSchemaConstants.MIDDLE_NAME);\n-            if (middleName != null) {\n-                return middleName.getStringValue();\n-            } else {\n-                return null;\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    //honorificPrefix\n-\n-    public void setHonorificPrefix(String honorificPrefix) throws CharonException {\n-        SimpleAttribute honorificPrefixAttribute =\n-                (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n-                        SCIMSchemaDefinitions.HONORIFIC_PREFIX,\n-                        new SimpleAttribute(SCIMConstants.UserSchemaConstants.HONORIFIC_PREFIX, honorificPrefix));\n-        if (isNameExist()) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            nameAttribute.setSubAttribute(honorificPrefixAttribute);\n-        } else {\n-            createName();\n-            getNameAttribute().setSubAttribute(honorificPrefixAttribute);\n-        }\n-    }\n-\n-    public String getHonorificPrefix() throws CharonException {\n-        if (getNameAttribute() != null) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            SimpleAttribute middleName = (SimpleAttribute) nameAttribute.getSubAttribute(\n-                    SCIMConstants.UserSchemaConstants.HONORIFIC_PREFIX);\n-            if (middleName != null) {\n-                return middleName.getStringValue();\n-            } else {\n-                return null;\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    //honorificSuffix\n-\n-    public void setHonorificSuffix(String honorificSuffix) throws CharonException {\n-        SimpleAttribute honorificSuffixAttribute =\n-                (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n-                        SCIMSchemaDefinitions.HONORIFIC_SUFFIX,\n-                        new SimpleAttribute(SCIMConstants.UserSchemaConstants.HONORIFIC_SUFFIX, honorificSuffix));\n-        if (isNameExist()) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            nameAttribute.setSubAttribute(honorificSuffixAttribute);\n-        } else {\n-            createName();\n-            getNameAttribute().setSubAttribute(honorificSuffixAttribute);\n-        }\n-    }\n-\n-    public String getHonorificSuffix() throws CharonException {\n-        if (getNameAttribute() != null) {\n-            ComplexAttribute nameAttribute = getNameAttribute();\n-            SimpleAttribute honorificSuffixAttribute = (SimpleAttribute) nameAttribute.getSubAttribute(\n-                    SCIMConstants.UserSchemaConstants.HONORIFIC_SUFFIX);\n-            if (honorificSuffixAttribute != null) {\n-                return honorificSuffixAttribute.getStringValue();\n-            } else {\n-                return null;\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * *********************Nick Name*************************************************\n-     */\n-    public void setNickName(String nickName) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.NICK_NAME,\n-                           SCIMSchemaDefinitions.NICK_NAME, nickName, DataType.STRING);\n-    }\n-\n-    public String getNickName() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.NICK_NAME);\n-    }\n-\n-    /**\n-     * *********************Profile URL***********************************************\n-     */\n-    public void setProfileURL(String profileURL) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PROFILE_URL,\n-                           SCIMSchemaDefinitions.PROFILE_URL, profileURL, DataType.STRING);\n-    }\n-\n-    public String getProfileURL() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.PROFILE_URL);\n-    }\n-\n-    /**\n-     * ***************************Title*******************************************\n-     */\n-    public void setTitle(String title) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.TITLE, SCIMSchemaDefinitions.TITLE,\n-                           title, DataType.STRING);\n-    }\n-\n-    public String getTitle() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.TITLE);\n-    }\n-\n-    /**\n-     * ***************************User Type***************************************\n-     */\n-    public void setUserType(String userType) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_TYPE,\n-                           SCIMSchemaDefinitions.USER_TYPE, userType, DataType.STRING);\n-    }\n-\n-    public String getUserType() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.USER_TYPE);\n-    }\n-\n-    /**\n-     * ***************************Preferred Language******************************\n-     */\n-    public void setPreferredLanguage(String preferredLanguage) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PREFERRED_LANGUAGE,\n-                           SCIMSchemaDefinitions.PREFERRED_LANGUAGE, preferredLanguage, DataType.STRING);\n-    }\n-\n-    public String getPreferredLanguage() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.PREFERRED_LANGUAGE);\n-    }\n-\n-    /**\n-     * ***************************Locale******************************************\n-     */\n-    public void setLocale(String locale) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.LOCALE, SCIMSchemaDefinitions.LOCALE,\n-                           locale, DataType.STRING);\n-    }\n-\n-    public String getLocale() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.LOCALE);\n-    }\n-\n-    /**\n-     * *******************************Time Zone***************************************\n-     */\n-    public void setTimeZone(String timeZone) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.TIME_ZONE,\n-                           SCIMSchemaDefinitions.TIMEZONE, timeZone, DataType.STRING);\n-    }\n-\n-    public String getTimeZone() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.TIME_ZONE);\n-    }\n-\n-    /**\n-     * ********************************Active****************************************\n-     */\n-    public void setActive(Boolean active) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.ACTIVE,\n-                           SCIMSchemaDefinitions.ACTIVE, active, DataType.BOOLEAN);\n-    }\n-\n-    public Boolean getActive() throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.ACTIVE)) {\n-            return ((SimpleAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.ACTIVE)).getBooleanValue();\n-        } else {\n-            return false;\n-        }\n-    }\n-\n-    /**\n-     * ********************************Password**************************************\n-     */\n-    public void setPassword(String password) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PASSWORD, SCIMSchemaDefinitions.PASSWORD,\n-                           password, DataType.STRING);\n-    }\n-\n-    public String getPassword() throws CharonException {\n-        return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.PASSWORD);\n-    }\n-\n-    /**\n-     * ********************************Phone Numbers**********************************\n-     */\n-    public void setPhoneNumber(String phoneNumber, String type, boolean isPrimary)\n-            throws CharonException {\n-        Map<String, Object> phoneNumberProperties = new HashMap<String, Object>();\n-        phoneNumberProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, phoneNumber);\n-        phoneNumberProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n-        if (isPrimary) {\n-            phoneNumberProperties.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n-        }\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n-            attributeList.get(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS).setComplexValue(\n-                    phoneNumberProperties);\n-        } else {\n-            MultiValuedAttribute multiValuedAttribute =\n-                    new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS);\n-            multiValuedAttribute.setComplexValue(phoneNumberProperties);\n-            multiValuedAttribute = (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n-                    SCIMSchemaDefinitions.PHONE_NUMBERS, multiValuedAttribute);\n-            attributeList.put(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS, multiValuedAttribute);\n-        }\n-    }\n-\n-    public String getPhoneNumber(String type) throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n-            return (String) ((MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)).getAttributeValueByType(type);\n-\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public List<String> getPhoneNumbers(String type) throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n-            return ((MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)).getAttributeValuesByType(type);\n-\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public String getPrimaryPhoneNumber() throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n-            return (String) ((MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)).getPrimaryValue();\n-\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * *******************************IMs*******************************************\n-     */\n-    public void setIM(String imAddress, String type, Boolean isPrimary) throws CharonException {\n-        Map<String, Object> imProperties = new HashMap<String, Object>();\n-        imProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, imAddress);\n-        imProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n-        if (isPrimary) {\n-            imProperties.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n-        }\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n-            attributeList.get(SCIMConstants.UserSchemaConstants.IMS).setComplexValue(\n-                    imProperties);\n-        } else {\n-            MultiValuedAttribute multiValuedAttribute =\n-                    new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.IMS);\n-            multiValuedAttribute.setComplexValue(imProperties);\n-            multiValuedAttribute = (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n-                    SCIMSchemaDefinitions.IMS, multiValuedAttribute);\n-            attributeList.put(SCIMConstants.UserSchemaConstants.IMS, multiValuedAttribute);\n-        }\n-    }\n-\n-    public String getIM(String type) throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n-            return (String) ((MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.IMS)).getAttributeValueByType(type);\n-\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public List<String> getIMs(String im) throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n-            return ((MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.IMS)).getAttributeValuesByType(im);\n-\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public String getPrimaryIM() throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n-            return (String) ((MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.IMS)).getPrimaryValue();\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * ********************************Photos***************************************\n-     */\n-\n-    /**\n-     * ********************************Addresses************************************\n-     */\n-\n-    /**\n-     * *************************Groups Attribute************************************\n-     */\n-    //types: direct, indirect\n-    public List<String> getGroups() throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n-            MultiValuedAttribute groupsAttribute = (MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.GROUPS);\n-            return groupsAttribute.getAttributeValuesByType(null);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public List<String> getDirectGroups() throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n-            MultiValuedAttribute groupsAttribute = (MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.GROUPS);\n-            return groupsAttribute.getAttributeValuesByType(\n-                    SCIMConstants.UserSchemaConstants.DIRECT_MEMBERSHIP);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public void setDirectGroups(List<String> directGroupIds) throws CharonException {\n-        if (directGroupIds != null && !directGroupIds.isEmpty()) {\n-            for (String directGroupId : directGroupIds) {\n-                Map<String, Object> groupValueProperties = new HashMap<String, Object>();\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE,\n-                                         SCIMConstants.UserSchemaConstants.DIRECT_MEMBERSHIP);\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, directGroupId);\n-                setGroup(groupValueProperties);\n+    Map<String, Object> propertyValues = new HashMap<String, Object>();\n+    if (emails != null && emails.length != 0) {\n+      for (String email : emails) {\n+        propertyValues.put(SCIMConstants.CommonSchemaConstants.VALUE, email);\n+        setEmail(propertyValues);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Get the email addresses as an array of Strings. Since emails is an multi-valued attribute\n+   * and since a multi-valued attribute can contain the values in different ways, needs to check\n+   * for all those possible ways.\n+   *\n+   * @return\n+   */\n+  public String[] getEmails() throws CharonException {\n+\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n+      //get the emails attribute\n+      MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.EMAILS);\n+      //check if the values are stored just as a list of Strings.\n+      if (emailsAttribute.getValuesAsStrings() != null &&\n+        emailsAttribute.getValuesAsStrings().size() != 0) {\n+        List<String> emails = emailsAttribute.getValuesAsStrings();\n+        return emails.toArray(new String[emails.size()]);\n+      } else {\n+        //check is the values are stored as simple of complex attributes\n+        List<Attribute> subAttributes = emailsAttribute.getValuesAsSubAttributes();\n+        List<String> values = new ArrayList<String>();\n+        if (subAttributes != null && subAttributes.size() != 0) {\n+          for (Attribute subAttribute : subAttributes) {\n+            //if value is a simple attribute of type: \"value : \"email\";\n+            if (subAttribute instanceof SimpleAttribute) {\n+              values.add((String) ((SimpleAttribute) subAttribute).getValue());\n+            } else if (subAttribute instanceof ComplexAttribute) {\n+              //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n+              SimpleAttribute valueAttribute =\n+                (SimpleAttribute) (((ComplexAttribute) subAttribute).getSubAttribute(\n+                  SCIMConstants.CommonSchemaConstants.VALUE));\n+              values.add((String) valueAttribute.getValue());\n             }\n-        }\n-    }\n+          }\n \n-    public List<String> getIndirectGroups() throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n-            MultiValuedAttribute groupsAttribute = (MultiValuedAttribute) attributeList.get(\n-                    SCIMConstants.UserSchemaConstants.GROUPS);\n-            return groupsAttribute.getAttributeValuesByType(\n-                    SCIMConstants.UserSchemaConstants.INDIRECT_MEMBERSHIP);\n-        } else {\n-            return null;\n         }\n-    }\n-\n-    public void setIndirectGroups(List<String> inDirectGroupIds) throws CharonException {\n-        if (inDirectGroupIds != null && !inDirectGroupIds.isEmpty()) {\n-            for (String inDirectGroupId : inDirectGroupIds) {\n-                Map<String, Object> groupValueProperties = new HashMap<String, Object>();\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE,\n-                                         SCIMConstants.UserSchemaConstants.INDIRECT_MEMBERSHIP);\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, inDirectGroupId);\n-                setGroup(groupValueProperties);\n-            }\n+        String[] valuesAsStrings = null;\n+        if (values.size() != 0) {\n+          valuesAsStrings = new String[values.size()];\n+          int i = 0;\n+          for (String value : values) {\n+            valuesAsStrings[i] = value;\n+            i++;\n+          }\n         }\n-    }\n-\n-    public void setGroup(String type, String value, String display) throws CharonException {\n+        //return (String[])values.toString gave class cast exception\n+        return valuesAsStrings;\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public String getPrimaryEmail() throws CharonException, NotFoundException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n+      MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.EMAILS);\n+      return (String) emailsAttribute.getPrimaryValue();\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Retrieve any custom type email set by the user in the multi valued attribute - email\n+   *\n+   * @param type\n+   * @return\n+   * @throws CharonException\n+   * @throws NotFoundException\n+   */\n+  public String getEmailByType(String type) throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.EMAILS)) {\n+      MultiValuedAttribute emailsAttribute = (MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.EMAILS);\n+      return (String) emailsAttribute.getAttributeValueByType(type);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * ************DisplayName manipulation methods.*************************************\n+   */\n+\n+  public String getDisplayName() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.DISPLAY_NAME);\n+  }\n+\n+  public void setDisplayName(String displayName) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.DISPLAY_NAME,\n+      SCIMSchemaDefinitions.USER_DISPLAY_NAME, displayName, DataType.STRING);\n+  }\n+\n+  /**\n+   * ***********************Name manipulation methods**********************************\n+   */\n+  private void createName() throws CharonException {\n+    ComplexAttribute nameAttribute =\n+      (ComplexAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.NAME, new ComplexAttribute(SCIMConstants.UserSchemaConstants.NAME));\n+    if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.NAME)) {\n+      throw new CharonException(ResponseCodeConstants.ATTRIBUTE_ALREADY_EXIST);\n+    } else {\n+      attributeList.put(SCIMConstants.UserSchemaConstants.NAME, nameAttribute);\n+    }\n+  }\n+\n+  private ComplexAttribute getNameAttribute() {\n+    if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.NAME)) {\n+      return (ComplexAttribute) attributeList.get(SCIMConstants.UserSchemaConstants.NAME);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  private boolean isNameExist() {\n+    if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.NAME)) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+  //formatted name\n+\n+  public void setFormattedName(String formattedName) throws CharonException {\n+    SimpleAttribute formattedAttribute =\n+      (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.FORMATTED,\n+        new SimpleAttribute(SCIMConstants.UserSchemaConstants.FORMATTED_NAME, formattedName));\n+    if (isNameExist()) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      nameAttribute.setSubAttribute(formattedAttribute);\n+    } else {\n+      createName();\n+      getNameAttribute().setSubAttribute(formattedAttribute);\n+    }\n+  }\n+\n+  public String getFormattedName() throws CharonException {\n+    if (getNameAttribute() != null) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      SimpleAttribute formattedName = (SimpleAttribute) nameAttribute.getSubAttribute(\n+        SCIMConstants.UserSchemaConstants.FORMATTED_NAME);\n+      if (formattedName != null) {\n+        return formattedName.getStringValue();\n+      } else {\n+        return null;\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  //family name\n+\n+  public void setFamilyName(String familyName) throws CharonException {\n+    SimpleAttribute familyNameAttribute =\n+      (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.FAMILY_NAME,\n+        new SimpleAttribute(SCIMConstants.UserSchemaConstants.FAMILY_NAME, familyName));\n+    if (isNameExist()) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      nameAttribute.setSubAttribute(familyNameAttribute);\n+    } else {\n+      createName();\n+      getNameAttribute().setSubAttribute(familyNameAttribute);\n+    }\n+  }\n+\n+  public String getFamilyName() throws CharonException {\n+    if (getNameAttribute() != null) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      SimpleAttribute familyName = (SimpleAttribute) nameAttribute.getSubAttribute(\n+        SCIMConstants.UserSchemaConstants.FAMILY_NAME);\n+      if (familyName != null) {\n+        return familyName.getStringValue();\n+      } else {\n+        return null;\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  //given name\n+\n+  public void setGivenName(String givenName) throws CharonException {\n+    SimpleAttribute givenNameAttribute =\n+      (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.GIVEN_NAME,\n+        new SimpleAttribute(SCIMConstants.UserSchemaConstants.GIVEN_NAME, givenName));\n+    if (isNameExist()) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      nameAttribute.setSubAttribute(givenNameAttribute);\n+    } else {\n+      createName();\n+      getNameAttribute().setSubAttribute(givenNameAttribute);\n+    }\n+  }\n+\n+  public String getGivenName() throws CharonException {\n+    if (getNameAttribute() != null) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      SimpleAttribute givenName = (SimpleAttribute) nameAttribute.getSubAttribute(\n+        SCIMConstants.UserSchemaConstants.GIVEN_NAME);\n+      if (givenName != null) {\n+        return givenName.getStringValue();\n+      } else {\n+        return null;\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  //middle name\n+\n+  public void setMiddleName(String middleName) throws CharonException {\n+    SimpleAttribute middleNameAttribute =\n+      (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.MIDDLE_NAME,\n+        new SimpleAttribute(SCIMConstants.UserSchemaConstants.MIDDLE_NAME, middleName));\n+    if (isNameExist()) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      nameAttribute.setSubAttribute(middleNameAttribute);\n+    } else {\n+      createName();\n+      getNameAttribute().setSubAttribute(middleNameAttribute);\n+    }\n+  }\n+\n+  public String getMiddleName() throws CharonException {\n+    if (getNameAttribute() != null) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      SimpleAttribute middleName = (SimpleAttribute) nameAttribute.getSubAttribute(\n+        SCIMConstants.UserSchemaConstants.MIDDLE_NAME);\n+      if (middleName != null) {\n+        return middleName.getStringValue();\n+      } else {\n+        return null;\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  //honorificPrefix\n+\n+  public void setHonorificPrefix(String honorificPrefix) throws CharonException {\n+    SimpleAttribute honorificPrefixAttribute =\n+      (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.HONORIFIC_PREFIX,\n+        new SimpleAttribute(SCIMConstants.UserSchemaConstants.HONORIFIC_PREFIX, honorificPrefix));\n+    if (isNameExist()) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      nameAttribute.setSubAttribute(honorificPrefixAttribute);\n+    } else {\n+      createName();\n+      getNameAttribute().setSubAttribute(honorificPrefixAttribute);\n+    }\n+  }\n+\n+  public String getHonorificPrefix() throws CharonException {\n+    if (getNameAttribute() != null) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      SimpleAttribute middleName = (SimpleAttribute) nameAttribute.getSubAttribute(\n+        SCIMConstants.UserSchemaConstants.HONORIFIC_PREFIX);\n+      if (middleName != null) {\n+        return middleName.getStringValue();\n+      } else {\n+        return null;\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  //honorificSuffix\n+\n+  public void setHonorificSuffix(String honorificSuffix) throws CharonException {\n+    SimpleAttribute honorificSuffixAttribute =\n+      (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.HONORIFIC_SUFFIX,\n+        new SimpleAttribute(SCIMConstants.UserSchemaConstants.HONORIFIC_SUFFIX, honorificSuffix));\n+    if (isNameExist()) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      nameAttribute.setSubAttribute(honorificSuffixAttribute);\n+    } else {\n+      createName();\n+      getNameAttribute().setSubAttribute(honorificSuffixAttribute);\n+    }\n+  }\n+\n+  public String getHonorificSuffix() throws CharonException {\n+    if (getNameAttribute() != null) {\n+      ComplexAttribute nameAttribute = getNameAttribute();\n+      SimpleAttribute honorificSuffixAttribute = (SimpleAttribute) nameAttribute.getSubAttribute(\n+        SCIMConstants.UserSchemaConstants.HONORIFIC_SUFFIX);\n+      if (honorificSuffixAttribute != null) {\n+        return honorificSuffixAttribute.getStringValue();\n+      } else {\n+        return null;\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * *********************Nick Name*************************************************\n+   */\n+  public void setNickName(String nickName) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.NICK_NAME,\n+      SCIMSchemaDefinitions.NICK_NAME, nickName, DataType.STRING);\n+  }\n+\n+  public String getNickName() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.NICK_NAME);\n+  }\n+\n+  /**\n+   * *********************Profile URL***********************************************\n+   */\n+  public void setProfileURL(String profileURL) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.PROFILE_URL,\n+      SCIMSchemaDefinitions.PROFILE_URL, profileURL, DataType.STRING);\n+  }\n+\n+  public String getProfileURL() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.PROFILE_URL);\n+  }\n+\n+  /**\n+   * ***************************Title*******************************************\n+   */\n+  public void setTitle(String title) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.TITLE, SCIMSchemaDefinitions.TITLE,\n+      title, DataType.STRING);\n+  }\n+\n+  public String getTitle() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.TITLE);\n+  }\n+\n+  /**\n+   * ***************************User Type***************************************\n+   */\n+  public void setUserType(String userType) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_TYPE,\n+      SCIMSchemaDefinitions.USER_TYPE, userType, DataType.STRING);\n+  }\n+\n+  public String getUserType() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.USER_TYPE);\n+  }\n+\n+  /**\n+   * ***************************Preferred Language******************************\n+   */\n+  public void setPreferredLanguage(String preferredLanguage) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.PREFERRED_LANGUAGE,\n+      SCIMSchemaDefinitions.PREFERRED_LANGUAGE, preferredLanguage, DataType.STRING);\n+  }\n+\n+  public String getPreferredLanguage() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.PREFERRED_LANGUAGE);\n+  }\n+\n+  /**\n+   * ***************************Locale******************************************\n+   */\n+  public void setLocale(String locale) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.LOCALE, SCIMSchemaDefinitions.LOCALE,\n+      locale, DataType.STRING);\n+  }\n+\n+  public String getLocale() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.LOCALE);\n+  }\n+\n+  /**\n+   * *******************************Time Zone***************************************\n+   */\n+  public void setTimeZone(String timeZone) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.TIME_ZONE,\n+      SCIMSchemaDefinitions.TIMEZONE, timeZone, DataType.STRING);\n+  }\n+\n+  public String getTimeZone() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.TIME_ZONE);\n+  }\n+\n+  /**\n+   * ********************************Active****************************************\n+   */\n+  public void setActive(Boolean active) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.ACTIVE,\n+      SCIMSchemaDefinitions.ACTIVE, active, DataType.BOOLEAN);\n+  }\n+\n+  public Boolean getActive() throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.ACTIVE)) {\n+      return ((SimpleAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.ACTIVE)).getBooleanValue();\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * ********************************Password**************************************\n+   */\n+  public void setPassword(String password) throws CharonException {\n+    setSimpleAttribute(SCIMConstants.UserSchemaConstants.PASSWORD, SCIMSchemaDefinitions.PASSWORD,\n+      password, DataType.STRING);\n+  }\n+\n+  public String getPassword() throws CharonException {\n+    return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.PASSWORD);\n+  }\n+\n+  /**\n+   * ********************************Phone Numbers**********************************\n+   */\n+  public void setPhoneNumber(String phoneNumber, String type, boolean isPrimary)\n+    throws CharonException {\n+    Map<String, Object> phoneNumberProperties = new HashMap<String, Object>();\n+    phoneNumberProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, phoneNumber);\n+    phoneNumberProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n+    if (isPrimary) {\n+      phoneNumberProperties.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n+    }\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n+      attributeList.get(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS).setComplexValue(\n+        phoneNumberProperties);\n+    } else {\n+      MultiValuedAttribute multiValuedAttribute =\n+        new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS);\n+      multiValuedAttribute.setComplexValue(phoneNumberProperties);\n+      multiValuedAttribute = (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.PHONE_NUMBERS, multiValuedAttribute);\n+      attributeList.put(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS, multiValuedAttribute);\n+    }\n+  }\n+\n+  public String getPhoneNumber(String type) throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n+      return (String) ((MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)).getAttributeValueByType(type);\n+\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public List<String> getPhoneNumbers(String type) throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n+      return ((MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)).getAttributeValuesByType(type);\n+\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public String getPrimaryPhoneNumber() throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n+      return (String) ((MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)).getPrimaryValue();\n+\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * *******************************IMs*******************************************\n+   */\n+  public void setIM(String imAddress, String type, Boolean isPrimary) throws CharonException {\n+    Map<String, Object> imProperties = new HashMap<String, Object>();\n+    imProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, imAddress);\n+    imProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n+    if (isPrimary) {\n+      imProperties.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n+    }\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n+      attributeList.get(SCIMConstants.UserSchemaConstants.IMS).setComplexValue(\n+        imProperties);\n+    } else {\n+      MultiValuedAttribute multiValuedAttribute =\n+        new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.IMS);\n+      multiValuedAttribute.setComplexValue(imProperties);\n+      multiValuedAttribute = (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.IMS, multiValuedAttribute);\n+      attributeList.put(SCIMConstants.UserSchemaConstants.IMS, multiValuedAttribute);\n+    }\n+  }\n+\n+  public String getIM(String type) throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n+      return (String) ((MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.IMS)).getAttributeValueByType(type);\n+\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public List<String> getIMs(String im) throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n+      return ((MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.IMS)).getAttributeValuesByType(im);\n+\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public String getPrimaryIM() throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n+      return (String) ((MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.IMS)).getPrimaryValue();\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * ********************************Photos***************************************\n+   */\n+\n+  /**\n+   * ********************************Addresses************************************\n+   */\n+\n+  /**\n+   * *************************Groups Attribute************************************\n+   */\n+  //types: direct, indirect\n+  public List<String> getGroups() throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n+      MultiValuedAttribute groupsAttribute = (MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.GROUPS);\n+      return groupsAttribute.getAttributeValuesByType(null);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public List<String> getDirectGroups() throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n+      MultiValuedAttribute groupsAttribute = (MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.GROUPS);\n+      return groupsAttribute.getAttributeValuesByType(\n+        SCIMConstants.UserSchemaConstants.DIRECT_MEMBERSHIP);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public void setDirectGroups(List<String> directGroupIds) throws CharonException {\n+    if (directGroupIds != null && !directGroupIds.isEmpty()) {\n+      for (String directGroupId : directGroupIds) {\n         Map<String, Object> groupValueProperties = new HashMap<String, Object>();\n-        if (type != null) {\n-            groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n-        }\n-        if (value != null) {\n-            groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, value);\n-        }\n-        if (display != null) {\n-            groupValueProperties.put(SCIMConstants.CommonSchemaConstants.DISPLAY, display);\n-        }\n-        if (!groupValueProperties.isEmpty()) {\n-            setGroup(groupValueProperties);\n-        }\n-    }\n-\n-    private void setGroup(Map<String, Object> groupProperties) throws CharonException {\n-        if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.GROUPS)) {\n-            MultiValuedAttribute groupsAttribute = (MultiValuedAttribute)\n-                    attributeList.get(SCIMConstants.UserSchemaConstants.GROUPS);\n-            groupsAttribute.setComplexValue(groupProperties);\n-        } else {\n-            MultiValuedAttribute groupsAttribute = new MultiValuedAttribute(\n-                    SCIMConstants.UserSchemaConstants.GROUPS);\n-            groupsAttribute.setComplexValue(groupProperties);\n-            groupsAttribute = (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n-                    SCIMSchemaDefinitions.GROUPS, groupsAttribute);\n-            attributeList.put(SCIMConstants.UserSchemaConstants.GROUPS, groupsAttribute);\n-        }\n-    }\n-\n-    //isUserMemberOfGroup\n-\n-    public boolean isUserMemberOfGroup(String type, String groupId) throws CharonException {\n-        if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n-            MultiValuedAttribute groupsAttribute = (MultiValuedAttribute)\n-                    attributeList.get(SCIMConstants.UserSchemaConstants.GROUPS);\n-            List<String> groups = groupsAttribute.getAttributeValuesByType(type);\n-            for (String group : groups) {\n-                if (groupId.equals(group)) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        } else {\n-            return false;\n-        }\n-    }\n-\n-    //removeUserFromGroup\n-\n-    public void removeFromGroup(String groupId) throws CharonException {\n-        MultiValuedAttribute groupsAttribute = (MultiValuedAttribute)\n-                attributeList.get(SCIMConstants.UserSchemaConstants.GROUPS);\n-        List<Attribute> values = groupsAttribute.getValuesAsSubAttributes();\n-        for (Attribute value : values) {\n-            SimpleAttribute valueAttribute = (SimpleAttribute) ((ComplexAttribute) value).getSubAttribute(\n-                    SCIMConstants.CommonSchemaConstants.VALUE);\n-            if (groupId.equals(valueAttribute.getStringValue())) {\n-                groupsAttribute.removeAttributeValue(value);\n-                break;\n-            }\n+        groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE,\n+          SCIMConstants.UserSchemaConstants.DIRECT_MEMBERSHIP);\n+        groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, directGroupId);\n+        setGroup(groupValueProperties);\n+      }\n+    }\n+  }\n+\n+  public List<String> getIndirectGroups() throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n+      MultiValuedAttribute groupsAttribute = (MultiValuedAttribute) attributeList.get(\n+        SCIMConstants.UserSchemaConstants.GROUPS);\n+      return groupsAttribute.getAttributeValuesByType(\n+        SCIMConstants.UserSchemaConstants.INDIRECT_MEMBERSHIP);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public void setIndirectGroups(List<String> inDirectGroupIds) throws CharonException {\n+    if (inDirectGroupIds != null && !inDirectGroupIds.isEmpty()) {\n+      for (String inDirectGroupId : inDirectGroupIds) {\n+        Map<String, Object> groupValueProperties = new HashMap<String, Object>();\n+        groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE,\n+          SCIMConstants.UserSchemaConstants.INDIRECT_MEMBERSHIP);\n+        groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, inDirectGroupId);\n+        setGroup(groupValueProperties);\n+      }\n+    }\n+  }\n+\n+  public void setGroup(String type, String value, String display) throws CharonException {\n+    Map<String, Object> groupValueProperties = new HashMap<String, Object>();\n+    if (type != null) {\n+      groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, type);\n+    }\n+    if (value != null) {\n+      groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, value);\n+    }\n+    if (display != null) {\n+      groupValueProperties.put(SCIMConstants.CommonSchemaConstants.DISPLAY, display);\n+    }\n+    if (!groupValueProperties.isEmpty()) {\n+      setGroup(groupValueProperties);\n+    }\n+  }\n+\n+  private void setGroup(Map<String, Object> groupProperties) throws CharonException {\n+    if (attributeList.containsKey(SCIMConstants.UserSchemaConstants.GROUPS)) {\n+      MultiValuedAttribute groupsAttribute = (MultiValuedAttribute)\n+        attributeList.get(SCIMConstants.UserSchemaConstants.GROUPS);\n+      groupsAttribute.setComplexValue(groupProperties);\n+    } else {\n+      MultiValuedAttribute groupsAttribute = new MultiValuedAttribute(\n+        SCIMConstants.UserSchemaConstants.GROUPS);\n+      groupsAttribute.setComplexValue(groupProperties);\n+      groupsAttribute = (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n+        SCIMSchemaDefinitions.GROUPS, groupsAttribute);\n+      attributeList.put(SCIMConstants.UserSchemaConstants.GROUPS, groupsAttribute);\n+    }\n+  }\n+\n+  //isUserMemberOfGroup\n+\n+  public boolean isUserMemberOfGroup(String type, String groupId) throws CharonException {\n+    if (isAttributeExist(SCIMConstants.UserSchemaConstants.GROUPS)) {\n+      MultiValuedAttribute groupsAttribute = (MultiValuedAttribute)\n+        attributeList.get(SCIMConstants.UserSchemaConstants.GROUPS);\n+      List<String> groups = groupsAttribute.getAttributeValuesByType(type);\n+      for (String group : groups) {\n+        if (groupId.equals(group)) {\n+          return true;\n         }\n-    }\n-\n-    /**\n-     * *************************Entitlements****************************************\n-     */\n-\n-    /**\n-     * ****************************roles********************************************\n-     */\n-\n-    /**\n-     * *****************************X509Certificates********************************\n-     */\n-\n-\n-    /**\n-     * Update the attribute value by attribute name. Needs to be overloaded by specific types of\n-     * attributes.\n-     *\n-     * @param attributeName\n-     * @param attributeValue public void updateValue(Object value) {\n-     *                       this.value = value;\n-     *                       }\n-     *                       public void updateValue(Object value) {\n-     *                       this.value = value;\n-     *                       }\n-     */\n+      }\n+      return false;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  //removeUserFromGroup\n+\n+  public void removeFromGroup(String groupId) throws CharonException {\n+    MultiValuedAttribute groupsAttribute = (MultiValuedAttribute)\n+      attributeList.get(SCIMConstants.UserSchemaConstants.GROUPS);\n+    List<Attribute> values = groupsAttribute.getValuesAsSubAttributes();\n+    for (Attribute value : values) {\n+      SimpleAttribute valueAttribute = (SimpleAttribute) ((ComplexAttribute) value).getSubAttribute(\n+        SCIMConstants.CommonSchemaConstants.VALUE);\n+      if (groupId.equals(valueAttribute.getStringValue())) {\n+        groupsAttribute.removeAttributeValue(value);\n+        break;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * *************************Entitlements****************************************\n+   */\n+\n+  /**\n+   * ****************************roles********************************************\n+   */\n+\n+  /**\n+   * *****************************X509Certificates********************************\n+   */\n+\n+\n+  /**\n+   * Update the attribute value by attribute name. Needs to be overloaded by specific types of\n+   * attributes.\n+   *\n+   * @param attributeName\n+   * @param attributeValue public void updateValue(Object value) {\n+   *                       this.value = value;\n+   *                       }\n+   *                       public void updateValue(Object value) {\n+   *                       this.value = value;\n+   *                       }\n+   */\n     /*@Override\n     public void updateAttribute(String attributeName, Object attributeValue) {\n         //To change body of implemented methods use File | Settings | File Templates.\n     }*/\n \n-    /**\n-     * Validates whether the given SCIM object adheres to the SCIM schema.\n-     *\n-     * @param scimObject\n-     * @return\n-     */\n-    public boolean validate(SCIMObject scimObject) {\n-        return false;  //To change body of implemented methods use File | Settings | File Templates.\n-    }\n-\n-    /**\n-     * Take common functionality of setting a value to a simple attribute, into one place.\n-     *\n-     * @param attributeName\n-     * @param attributeSchema\n-     * @param value\n-     * @param dataType\n-     * @throws CharonException\n-     */\n-    private void setSimpleAttribute(String attributeName, AttributeSchema attributeSchema,\n-                                    Object value, DataType dataType) throws CharonException {\n-        if (isAttributeExist(attributeName)) {\n-            //since we check read-only aspect in service provider side, no need to check it here.\n-            //if (!attributeSchema.getReadOnly()) {\n-            ((SimpleAttribute) attributeList.get(attributeName)).updateValue(value, dataType);\n+  /**\n+   * Validates whether the given SCIM object adheres to the SCIM schema.\n+   *\n+   * @param scimObject\n+   * @return\n+   */\n+  public boolean validate(SCIMObject scimObject) {\n+    return false;  //To change body of implemented methods use File | Settings | File Templates.\n+  }\n+\n+  /**\n+   * Take common functionality of setting a value to a simple attribute, into one place.\n+   *\n+   * @param attributeName\n+   * @param attributeSchema\n+   * @param value\n+   * @param dataType\n+   * @throws CharonException\n+   */\n+  private void setSimpleAttribute(String attributeName, AttributeSchema attributeSchema,\n+                                  Object value, DataType dataType) throws CharonException {\n+    if (isAttributeExist(attributeName)) {\n+      //since we check read-only aspect in service provider side, no need to check it here.\n+      //if (!attributeSchema.getReadOnly()) {\n+      ((SimpleAttribute) attributeList.get(attributeName)).updateValue(value, dataType);\n             /*} else {\n                 //log info level log that version already set and can't set again.\n                 throw new CharonException(ResponseCodeConstants.ATTRIBUTE_READ_ONLY);\n             }*/\n-        } else {\n-            SimpleAttribute simpleAttribute = new SimpleAttribute(\n-                    attributeName, value);\n+    } else {\n+      SimpleAttribute simpleAttribute = new SimpleAttribute(\n+        attributeName, value);\n             /*SimpleAttribute userNameAttribute = new SimpleAttribute(\n                     SCIMConstants.UserSchemaConstants.USER_NAME,\n                     SCIMConstants.CORE_SCHEMA_URI, userName, DataType.STRING,\n                     false, false);*/\n-            simpleAttribute = (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n-                    attributeSchema, simpleAttribute);\n-            attributeList.put(attributeName, simpleAttribute);\n-        }\n+      simpleAttribute = (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n+        attributeSchema, simpleAttribute);\n+      attributeList.put(attributeName, simpleAttribute);\n     }\n+  }\n \n-    private String getSimpleAttributeStringVal(String attributeName) throws CharonException {\n-        if (isAttributeExist(attributeName)) {\n-            return ((SimpleAttribute) attributeList.get(attributeName)).getStringValue();\n-        } else {\n-            return null;\n-        }\n+  private String getSimpleAttributeStringVal(String attributeName) throws CharonException {\n+    if (isAttributeExist(attributeName)) {\n+      return ((SimpleAttribute) attributeList.get(attributeName)).getStringValue();\n+    } else {\n+      return null;\n     }\n+  }\n \n \n }\n",
            "diff_size": 1491
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "318",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "380",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "602",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "613",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "624",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "635",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "646",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "657",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "668",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "679",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "695",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "843",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "865",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "986",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/572/User.java\nindex d7efb4722ff..c9625d848b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/572/User.java\n@@ -51,8 +51,7 @@ public class User extends AbstractSCIMObject {\n      * @throws CharonException\n      */\n     public void setBulkID(String bulkID) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.BULK_ID, SCIMSchemaDefinitions.BULK_ID,\n-                           bulkID, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.BULK_ID, SCIMSchemaDefinitions.BULK_ID, bulkID, DataType.STRING);\n     }\n \n     /**\n@@ -72,8 +71,7 @@ public class User extends AbstractSCIMObject {\n      * @throws CharonException\n      */\n     public void setPath(String path) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.PATH, SCIMSchemaDefinitions.PATH,\n-                           path, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.PATH, SCIMSchemaDefinitions.PATH, path, DataType.STRING);\n     }\n \n     /**\n@@ -93,8 +91,7 @@ public class User extends AbstractSCIMObject {\n      * @throws CharonException\n      */\n     public void setMethod(String method) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.METHOD, SCIMSchemaDefinitions.METHOD,\n-                           method, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.CommonSchemaConstants.METHOD, SCIMSchemaDefinitions.METHOD, method, DataType.STRING);\n     }\n \n     /**\n@@ -115,9 +112,7 @@ public class User extends AbstractSCIMObject {\n      * @throws CharonException\n      */\n     public void setUserName(String userName) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_NAME, SCIMSchemaDefinitions.USER_NAME,\n-                           userName, DataType.STRING);\n-        /*if (isAttributeExist(SCIMConstants.UserSchemaConstants.USER_NAME)) {\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_NAME, SCIMSchemaDefinitions.USER_NAME, userName, DataType.STRING); /*if (isAttributeExist(SCIMConstants.UserSchemaConstants.USER_NAME)) {\n             ((SimpleAttribute) attributeList.get(\n                     SCIMConstants.UserSchemaConstants.USER_NAME)).updateValue(\n                     userName, DataType.STRING);\n@@ -125,10 +120,13 @@ public class User extends AbstractSCIMObject {\n             //TODO:since the constructor is too long, pass an attribute schema.\n             SimpleAttribute userNameAttribute = new SimpleAttribute(\n                     SCIMConstants.UserSchemaConstants.USER_NAME, userName);\n-            *//*SimpleAttribute userNameAttribute = new SimpleAttribute(\n+            */\n+\n+/*SimpleAttribute userNameAttribute = new SimpleAttribute(\n                     SCIMConstants.UserSchemaConstants.USER_NAME,\n                     SCIMConstants.CORE_SCHEMA_URI, userName, DataType.STRING,\n-                    false, false);*//*\n+                    false, false);*/\n+/*\n             userNameAttribute = (SimpleAttribute) DefaultAttributeFactory.createAttribute(\n                     SCIMSchemaDefinitions.USER_NAME, userNameAttribute);\n             attributeList.put(SCIMConstants.UserSchemaConstants.USER_NAME, userNameAttribute);\n@@ -167,7 +165,7 @@ public class User extends AbstractSCIMObject {\n             membersAttribute =\n                     (MultiValuedAttribute) DefaultAttributeFactory.createAttribute(\n                             SCIMSchemaDefinitions.EMAILS, membersAttribute);\n-            this.attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, membersAttribute);\n+this.attributeList.put(SCIMConstants.UserSchemaConstants.EMAILS, membersAttribute);\n         }\n     }\n \n@@ -374,14 +372,12 @@ public class User extends AbstractSCIMObject {\n     /**\n      * ************DisplayName manipulation methods.*************************************\n      */\n-\n-    public String getDisplayName() throws CharonException {\n+public String getDisplayName() throws CharonException {\n         return getSimpleAttributeStringVal(SCIMConstants.UserSchemaConstants.DISPLAY_NAME);\n     }\n \n     public void setDisplayName(String displayName) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.DISPLAY_NAME,\n-                           SCIMSchemaDefinitions.USER_DISPLAY_NAME, displayName, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.DISPLAY_NAME, SCIMSchemaDefinitions.USER_DISPLAY_NAME, displayName, DataType.STRING);\n     }\n \n     /**\n@@ -603,8 +599,7 @@ public class User extends AbstractSCIMObject {\n      * *********************Nick Name*************************************************\n      */\n     public void setNickName(String nickName) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.NICK_NAME,\n-                           SCIMSchemaDefinitions.NICK_NAME, nickName, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.NICK_NAME, SCIMSchemaDefinitions.NICK_NAME, nickName, DataType.STRING);\n     }\n \n     public String getNickName() throws CharonException {\n@@ -615,8 +610,7 @@ public class User extends AbstractSCIMObject {\n      * *********************Profile URL***********************************************\n      */\n     public void setProfileURL(String profileURL) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PROFILE_URL,\n-                           SCIMSchemaDefinitions.PROFILE_URL, profileURL, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PROFILE_URL, SCIMSchemaDefinitions.PROFILE_URL, profileURL, DataType.STRING);\n     }\n \n     public String getProfileURL() throws CharonException {\n@@ -627,8 +621,7 @@ public class User extends AbstractSCIMObject {\n      * ***************************Title*******************************************\n      */\n     public void setTitle(String title) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.TITLE, SCIMSchemaDefinitions.TITLE,\n-                           title, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.TITLE, SCIMSchemaDefinitions.TITLE, title, DataType.STRING);\n     }\n \n     public String getTitle() throws CharonException {\n@@ -639,8 +632,7 @@ public class User extends AbstractSCIMObject {\n      * ***************************User Type***************************************\n      */\n     public void setUserType(String userType) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_TYPE,\n-                           SCIMSchemaDefinitions.USER_TYPE, userType, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.USER_TYPE, SCIMSchemaDefinitions.USER_TYPE, userType, DataType.STRING);\n     }\n \n     public String getUserType() throws CharonException {\n@@ -651,8 +643,7 @@ public class User extends AbstractSCIMObject {\n      * ***************************Preferred Language******************************\n      */\n     public void setPreferredLanguage(String preferredLanguage) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PREFERRED_LANGUAGE,\n-                           SCIMSchemaDefinitions.PREFERRED_LANGUAGE, preferredLanguage, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PREFERRED_LANGUAGE, SCIMSchemaDefinitions.PREFERRED_LANGUAGE, preferredLanguage, DataType.STRING);\n     }\n \n     public String getPreferredLanguage() throws CharonException {\n@@ -663,8 +654,7 @@ public class User extends AbstractSCIMObject {\n      * ***************************Locale******************************************\n      */\n     public void setLocale(String locale) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.LOCALE, SCIMSchemaDefinitions.LOCALE,\n-                           locale, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.LOCALE, SCIMSchemaDefinitions.LOCALE, locale, DataType.STRING);\n     }\n \n     public String getLocale() throws CharonException {\n@@ -675,8 +665,7 @@ public class User extends AbstractSCIMObject {\n      * *******************************Time Zone***************************************\n      */\n     public void setTimeZone(String timeZone) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.TIME_ZONE,\n-                           SCIMSchemaDefinitions.TIMEZONE, timeZone, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.TIME_ZONE, SCIMSchemaDefinitions.TIMEZONE, timeZone, DataType.STRING);\n     }\n \n     public String getTimeZone() throws CharonException {\n@@ -687,8 +676,7 @@ public class User extends AbstractSCIMObject {\n      * ********************************Active****************************************\n      */\n     public void setActive(Boolean active) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.ACTIVE,\n-                           SCIMSchemaDefinitions.ACTIVE, active, DataType.BOOLEAN);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.ACTIVE, SCIMSchemaDefinitions.ACTIVE, active, DataType.BOOLEAN);\n     }\n \n     public Boolean getActive() throws CharonException {\n@@ -704,8 +692,7 @@ public class User extends AbstractSCIMObject {\n      * ********************************Password**************************************\n      */\n     public void setPassword(String password) throws CharonException {\n-        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PASSWORD, SCIMSchemaDefinitions.PASSWORD,\n-                           password, DataType.STRING);\n+        setSimpleAttribute(SCIMConstants.UserSchemaConstants.PASSWORD, SCIMSchemaDefinitions.PASSWORD, password, DataType.STRING);\n     }\n \n     public String getPassword() throws CharonException {\n@@ -724,8 +711,7 @@ public class User extends AbstractSCIMObject {\n             phoneNumberProperties.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n         }\n         if (isAttributeExist(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS)) {\n-            attributeList.get(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS).setComplexValue(\n-                    phoneNumberProperties);\n+            attributeList.get(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS).setComplexValue(phoneNumberProperties);\n         } else {\n             MultiValuedAttribute multiValuedAttribute =\n                     new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.PHONE_NUMBERS);\n@@ -777,8 +763,7 @@ public class User extends AbstractSCIMObject {\n             imProperties.put(SCIMConstants.CommonSchemaConstants.PRIMARY, isPrimary);\n         }\n         if (isAttributeExist(SCIMConstants.UserSchemaConstants.IMS)) {\n-            attributeList.get(SCIMConstants.UserSchemaConstants.IMS).setComplexValue(\n-                    imProperties);\n+            attributeList.get(SCIMConstants.UserSchemaConstants.IMS).setComplexValue(imProperties);\n         } else {\n             MultiValuedAttribute multiValuedAttribute =\n                     new MultiValuedAttribute(SCIMConstants.UserSchemaConstants.IMS);\n@@ -855,9 +840,8 @@ public class User extends AbstractSCIMObject {\n         if (directGroupIds != null && !directGroupIds.isEmpty()) {\n             for (String directGroupId : directGroupIds) {\n                 Map<String, Object> groupValueProperties = new HashMap<String, Object>();\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE,\n-                                         SCIMConstants.UserSchemaConstants.DIRECT_MEMBERSHIP);\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, directGroupId);\n+                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, SCIMConstants.UserSchemaConstants.DIRECT_MEMBERSHIP);\n+groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, directGroupId);\n                 setGroup(groupValueProperties);\n             }\n         }\n@@ -878,9 +862,8 @@ public class User extends AbstractSCIMObject {\n         if (inDirectGroupIds != null && !inDirectGroupIds.isEmpty()) {\n             for (String inDirectGroupId : inDirectGroupIds) {\n                 Map<String, Object> groupValueProperties = new HashMap<String, Object>();\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE,\n-                                         SCIMConstants.UserSchemaConstants.INDIRECT_MEMBERSHIP);\n-                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, inDirectGroupId);\n+                groupValueProperties.put(SCIMConstants.CommonSchemaConstants.TYPE, SCIMConstants.UserSchemaConstants.INDIRECT_MEMBERSHIP);\n+groupValueProperties.put(SCIMConstants.CommonSchemaConstants.VALUE, inDirectGroupId);\n                 setGroup(groupValueProperties);\n             }\n         }\n@@ -1000,8 +983,7 @@ public class User extends AbstractSCIMObject {\n      * @param dataType\n      * @throws CharonException\n      */\n-    private void setSimpleAttribute(String attributeName, AttributeSchema attributeSchema,\n-                                    Object value, DataType dataType) throws CharonException {\n+    private void setSimpleAttribute(String attributeName, AttributeSchema attributeSchema, Object value, DataType dataType) throws CharonException {\n         if (isAttributeExist(attributeName)) {\n             //since we check read-only aspect in service provider side, no need to check it here.\n             //if (!attributeSchema.getReadOnly()) {\n@@ -1013,7 +995,8 @@ public class User extends AbstractSCIMObject {\n         } else {\n             SimpleAttribute simpleAttribute = new SimpleAttribute(\n                     attributeName, value);\n-            /*SimpleAttribute userNameAttribute = new SimpleAttribute(\n+\n+/*SimpleAttribute userNameAttribute = new SimpleAttribute(\n                     SCIMConstants.UserSchemaConstants.USER_NAME,\n                     SCIMConstants.CORE_SCHEMA_URI, userName, DataType.STRING,\n                     false, false);*/\n@@ -1032,4 +1015,4 @@ public class User extends AbstractSCIMObject {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/572/User.java\nindex d7efb4722ff..a43842e6501 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/572/User.java\n@@ -317,8 +317,8 @@ public class User extends AbstractSCIMObject {\n                         if (subAttribute instanceof SimpleAttribute) {\n                             values.add((String) ((SimpleAttribute) subAttribute).getValue());\n                         } else if (subAttribute instanceof ComplexAttribute) {\n-                            //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n-                            SimpleAttribute valueAttribute =\n+                        //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n+                        SimpleAttribute valueAttribute =\n                                     (SimpleAttribute) (((ComplexAttribute) subAttribute).getSubAttribute(\n                                             SCIMConstants.CommonSchemaConstants.VALUE));\n                             values.add((String) valueAttribute.getValue());\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/572/User.java\nindex d7efb4722ff..6ea0a2fc1d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/572/User.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/572/User.java\n@@ -317,8 +317,9 @@ public class User extends AbstractSCIMObject {\n                         if (subAttribute instanceof SimpleAttribute) {\n                             values.add((String) ((SimpleAttribute) subAttribute).getValue());\n                         } else if (subAttribute instanceof ComplexAttribute) {\n-                            //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n-                            SimpleAttribute valueAttribute =\n+                        //if the value is a complex attribute itself, obtain the \"value\" sub attribute and get the value\n+                        SimpleAttribute\n+                        valueAttribute =\n                                     (SimpleAttribute) (((ComplexAttribute) subAttribute).getSubAttribute(\n                                             SCIMConstants.CommonSchemaConstants.VALUE));\n                             values.add((String) valueAttribute.getValue());\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}