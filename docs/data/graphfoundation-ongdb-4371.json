{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4371",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "60",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4371/TransactionStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4371/TransactionStats.java\nindex 21c54580328..718021dbfb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4371/TransactionStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4371/TransactionStats.java\n@@ -17,153 +17,153 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction;\n \n import java.util.concurrent.atomic.AtomicLong;\n \n public class TransactionStats implements TransactionMonitor, TransactionCounters\n {\n-    private final AtomicLong startedTransactionCount = new AtomicLong();\n-    private final AtomicLong activeReadTransactionCount = new AtomicLong();\n-    private final AtomicLong activeWriteTransactionCount = new AtomicLong();\n-    private final AtomicLong committedReadTransactionCount = new AtomicLong();\n-    private final AtomicLong committedWriteTransactionCount = new AtomicLong();\n-    private final AtomicLong rolledBackReadTransactionCount = new AtomicLong();\n-    private final AtomicLong rolledBackWriteTransactionCount = new AtomicLong();\n-    private final AtomicLong terminatedReadTransactionCount = new AtomicLong();\n-    private final AtomicLong terminatedWriteTransactionCount = new AtomicLong();\n-    private volatile long peakTransactionCount;\n-\n-    @Override\n-    public void transactionStarted()\n-    {\n-        startedTransactionCount.incrementAndGet();\n-        long active = activeReadTransactionCount.incrementAndGet();\n-        peakTransactionCount = Math.max( peakTransactionCount, active );\n-    }\n-\n-    @Override\n-    public void transactionFinished( boolean committed, boolean write )\n-    {\n-        decrementCounter( activeReadTransactionCount, activeWriteTransactionCount, write );\n-        if ( committed )\n-        {\n-            incrementCounter( committedReadTransactionCount, committedWriteTransactionCount, write );\n-        }\n-        else\n-        {\n-            incrementCounter( rolledBackReadTransactionCount, rolledBackWriteTransactionCount, write );\n-        }\n-    }\n-\n-    @Override\n-    public void transactionTerminated( boolean write )\n-    {\n-        incrementCounter( terminatedReadTransactionCount, terminatedWriteTransactionCount, write );\n-    }\n-\n-    @Override\n-    public void upgradeToWriteTransaction()\n-    {\n-        long readCount = activeReadTransactionCount.decrementAndGet();\n-        assert readCount >= 0;\n-        long writeCount = activeWriteTransactionCount.incrementAndGet();\n-        assert writeCount > 0;\n-    }\n-\n-    @Override\n-    public long getPeakConcurrentNumberOfTransactions()\n-    {\n-        return peakTransactionCount;\n-    }\n-\n-    @Override\n-    public long getNumberOfStartedTransactions()\n-    {\n-        return startedTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfCommittedTransactions()\n-    {\n-        return getNumberOfCommittedReadTransactions() + getNumberOfCommittedWriteTransactions();\n-    }\n-\n-    @Override\n-    public long getNumberOfCommittedReadTransactions()\n-    {\n-        return committedReadTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfCommittedWriteTransactions()\n-    {\n-        return committedWriteTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfActiveTransactions()\n-    {\n-        return getNumberOfActiveReadTransactions() + getNumberOfActiveWriteTransactions();\n-    }\n-\n-    @Override\n-    public long getNumberOfActiveReadTransactions()\n-    {\n-        return activeReadTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfActiveWriteTransactions()\n-    {\n-        return activeWriteTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfTerminatedTransactions()\n-    {\n-        return getNumberOfTerminatedReadTransactions() + getNumberOfTerminatedWriteTransactions();\n-    }\n-\n-    @Override\n-    public long getNumberOfTerminatedReadTransactions()\n-    {\n-        return terminatedReadTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfTerminatedWriteTransactions()\n-    {\n-        return terminatedWriteTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfRolledBackTransactions()\n-    {\n-        return getNumberOfRolledBackReadTransactions() + getNumberOfRolledBackWriteTransactions();\n-    }\n-\n-    @Override\n-    public long getNumberOfRolledBackReadTransactions()\n-    {\n-        return rolledBackReadTransactionCount.get();\n-    }\n-\n-    @Override\n-    public long getNumberOfRolledBackWriteTransactions()\n-    {\n-        return rolledBackWriteTransactionCount.get();\n-    }\n-\n-    private void incrementCounter( AtomicLong readCount, AtomicLong writeCount, boolean write )\n-    {\n-        long count = write ? writeCount.incrementAndGet() : readCount.incrementAndGet();\n-        assert count > 0;\n-    }\n-\n-    private void decrementCounter( AtomicLong readCount, AtomicLong writeCount, boolean write )\n-    {\n-        long count = write ? writeCount.decrementAndGet() : readCount.decrementAndGet();\n-        assert count >= 0;\n-    }\n+  private final AtomicLong startedTransactionCount = new AtomicLong();\n+  private final AtomicLong activeReadTransactionCount = new AtomicLong();\n+  private final AtomicLong activeWriteTransactionCount = new AtomicLong();\n+  private final AtomicLong committedReadTransactionCount = new AtomicLong();\n+  private final AtomicLong committedWriteTransactionCount = new AtomicLong();\n+  private final AtomicLong rolledBackReadTransactionCount = new AtomicLong();\n+  private final AtomicLong rolledBackWriteTransactionCount = new AtomicLong();\n+  private final AtomicLong terminatedReadTransactionCount = new AtomicLong();\n+  private final AtomicLong terminatedWriteTransactionCount = new AtomicLong();\n+  private volatile long peakTransactionCount;\n+\n+  @Override\n+  public void transactionStarted()\n+  {\n+    startedTransactionCount.incrementAndGet();\n+    long active = activeReadTransactionCount.incrementAndGet();\n+    peakTransactionCount = Math.max(peakTransactionCount, active);\n+  }\n+\n+  @Override\n+  public void transactionFinished(boolean committed, boolean write)\n+  {\n+    decrementCounter(activeReadTransactionCount, activeWriteTransactionCount, write);\n+    if (committed)\n+    {\n+      incrementCounter(committedReadTransactionCount, committedWriteTransactionCount, write);\n+    } else\n+    {\n+      incrementCounter(rolledBackReadTransactionCount, rolledBackWriteTransactionCount, write);\n+    }\n+  }\n+\n+  @Override\n+  public void transactionTerminated(boolean write)\n+  {\n+    incrementCounter(terminatedReadTransactionCount, terminatedWriteTransactionCount, write);\n+  }\n+\n+  @Override\n+  public void upgradeToWriteTransaction()\n+  {\n+    long readCount = activeReadTransactionCount.decrementAndGet();\n+    assert readCount >= 0;\n+    long writeCount = activeWriteTransactionCount.incrementAndGet();\n+    assert writeCount > 0;\n+  }\n+\n+  @Override\n+  public long getPeakConcurrentNumberOfTransactions()\n+  {\n+    return peakTransactionCount;\n+  }\n+\n+  @Override\n+  public long getNumberOfStartedTransactions()\n+  {\n+    return startedTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfCommittedTransactions()\n+  {\n+    return getNumberOfCommittedReadTransactions() + getNumberOfCommittedWriteTransactions();\n+  }\n+\n+  @Override\n+  public long getNumberOfCommittedReadTransactions()\n+  {\n+    return committedReadTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfCommittedWriteTransactions()\n+  {\n+    return committedWriteTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfActiveTransactions()\n+  {\n+    return getNumberOfActiveReadTransactions() + getNumberOfActiveWriteTransactions();\n+  }\n+\n+  @Override\n+  public long getNumberOfActiveReadTransactions()\n+  {\n+    return activeReadTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfActiveWriteTransactions()\n+  {\n+    return activeWriteTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfTerminatedTransactions()\n+  {\n+    return getNumberOfTerminatedReadTransactions() + getNumberOfTerminatedWriteTransactions();\n+  }\n+\n+  @Override\n+  public long getNumberOfTerminatedReadTransactions()\n+  {\n+    return terminatedReadTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfTerminatedWriteTransactions()\n+  {\n+    return terminatedWriteTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfRolledBackTransactions()\n+  {\n+    return getNumberOfRolledBackReadTransactions() + getNumberOfRolledBackWriteTransactions();\n+  }\n+\n+  @Override\n+  public long getNumberOfRolledBackReadTransactions()\n+  {\n+    return rolledBackReadTransactionCount.get();\n+  }\n+\n+  @Override\n+  public long getNumberOfRolledBackWriteTransactions()\n+  {\n+    return rolledBackWriteTransactionCount.get();\n+  }\n+\n+  private void incrementCounter(AtomicLong readCount, AtomicLong writeCount, boolean write)\n+  {\n+    long count = write ? writeCount.incrementAndGet() : readCount.incrementAndGet();\n+    assert count > 0;\n+  }\n+\n+  private void decrementCounter(AtomicLong readCount, AtomicLong writeCount, boolean write)\n+  {\n+    long count = write ? writeCount.decrementAndGet() : readCount.decrementAndGet();\n+    assert count >= 0;\n+  }\n }\n",
            "diff_size": 144
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4371/TransactionStats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4371/TransactionStats.java\nindex 21c54580328..01d995ca60f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4371/TransactionStats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4371/TransactionStats.java\n@@ -166,4 +166,4 @@ public class TransactionStats implements TransactionMonitor, TransactionCounters\n         long count = write ? writeCount.decrementAndGet() : readCount.decrementAndGet();\n         assert count >= 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}