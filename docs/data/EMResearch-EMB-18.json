{
    "project_name": "EMResearch-EMB",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "37",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * Converts case of the string token according to match element attributes.\n   * @param s Token to be converted.\n   * @param sample the sample string used to determine how the original string looks like (used only on case preservation)\n   * @return Converted string.\n   */\n  public static String convertCase(Match.CaseConversion conversion, String s, String sample, Language lang) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/18/CaseConversionHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/18/CaseConversionHelper.java\nindex 0c753a9add3..922fbc95f2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/18/CaseConversionHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/18/CaseConversionHelper.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules.patterns;\n \n import org.languagetool.Language;\n@@ -28,48 +29,49 @@ import java.util.Locale;\n  */\n public final class CaseConversionHelper {\n \n-  private CaseConversionHelper() {\n-  }\n-\n-  /**\n-   * Converts case of the string token according to match element attributes.\n-   * @param s Token to be converted.\n-   * @param sample the sample string used to determine how the original string looks like (used only on case preservation)\n-   * @return Converted string.\n-   */\n-  public static String convertCase(Match.CaseConversion conversion, String s, String sample, Language lang) {\n-    if (StringTools.isEmpty(s)) {\n-      return s;\n+    private CaseConversionHelper() {\n     }\n-    String token = s;\n-    switch (conversion) {\n-      case NONE:\n-        break;\n-      case PRESERVE:\n-        if (StringTools.startsWithUppercase(sample)) {\n-          if (StringTools.isAllUppercase(sample)) {\n-            token = token.toUpperCase(Locale.ENGLISH);\n-          } else {\n-            token = StringTools.uppercaseFirstChar(token, lang);\n-          }\n+\n+    /**\n+     * Converts case of the string token according to match element attributes.\n+     *\n+     * @param s      Token to be converted.\n+     * @param sample the sample string used to determine how the original string looks like (used only on case preservation)\n+     * @return Converted string.\n+     */\n+    public static String convertCase(Match.CaseConversion conversion, String s, String sample, Language lang) {\n+        if (StringTools.isEmpty(s)) {\n+            return s;\n+        }\n+        String token = s;\n+        switch (conversion) {\n+            case NONE:\n+                break;\n+            case PRESERVE:\n+                if (StringTools.startsWithUppercase(sample)) {\n+                    if (StringTools.isAllUppercase(sample)) {\n+                        token = token.toUpperCase(Locale.ENGLISH);\n+                    } else {\n+                        token = StringTools.uppercaseFirstChar(token, lang);\n+                    }\n+                }\n+                break;\n+            case STARTLOWER:\n+                token = token.substring(0, 1).toLowerCase() + token.substring(1);\n+                break;\n+            case STARTUPPER:\n+                token = StringTools.uppercaseFirstChar(token, lang);\n+                break;\n+            case ALLUPPER:\n+                token = token.toUpperCase(Locale.ENGLISH);\n+                break;\n+            case ALLLOWER:\n+                token = token.toLowerCase();\n+                break;\n+            default:\n+                break;\n         }\n-        break;\n-      case STARTLOWER:\n-        token = token.substring(0, 1).toLowerCase() + token.substring(1);\n-        break;\n-      case STARTUPPER:\n-        token = StringTools.uppercaseFirstChar(token, lang);\n-        break;\n-      case ALLUPPER:\n-        token = token.toUpperCase(Locale.ENGLISH);\n-        break;\n-      case ALLLOWER:\n-        token = token.toLowerCase();\n-        break;\n-      default:\n-        break;\n+        return token;\n     }\n-    return token;\n-  }\n \n }\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/18/CaseConversionHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/18/CaseConversionHelper.java\nindex 0c753a9add3..98bdbbf07ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/18/CaseConversionHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/18/CaseConversionHelper.java\n@@ -72,4 +72,4 @@ public final class CaseConversionHelper {\n     return token;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/18/CaseConversionHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/18/CaseConversionHelper.java\nindex 0c753a9add3..49916c22d8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/18/CaseConversionHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/18/CaseConversionHelper.java\n@@ -20,16 +20,18 @@ package org.languagetool.rules.patterns;\n \n import org.languagetool.Language;\n import org.languagetool.tools.StringTools;\n-\n import java.util.Locale;\n \n /**\n  * @since 3.2\n  */\n+\n+\n public final class CaseConversionHelper {\n \n-  private CaseConversionHelper() {\n-  }\n+    private CaseConversionHelper() {\n+\n+    }\n \n   /**\n    * Converts case of the string token according to match element attributes.\n@@ -37,39 +39,40 @@ public final class CaseConversionHelper {\n    * @param sample the sample string used to determine how the original string looks like (used only on case preservation)\n    * @return Converted string.\n    */\n-  public static String convertCase(Match.CaseConversion conversion, String s, String sample, Language lang) {\n-    if (StringTools.isEmpty(s)) {\n-      return s;\n-    }\n-    String token = s;\n-    switch (conversion) {\n-      case NONE:\n-        break;\n-      case PRESERVE:\n-        if (StringTools.startsWithUppercase(sample)) {\n-          if (StringTools.isAllUppercase(sample)) {\n-            token = token.toUpperCase(Locale.ENGLISH);\n-          } else {\n-            token = StringTools.uppercaseFirstChar(token, lang);\n-          }\n+\n+    public static String convertCase(Match.CaseConversion conversion, String s, String sample, Language lang) {\n+        if (StringTools.isEmpty(s)) {\n+            return s;\n         }\n-        break;\n-      case STARTLOWER:\n-        token = token.substring(0, 1).toLowerCase() + token.substring(1);\n-        break;\n-      case STARTUPPER:\n-        token = StringTools.uppercaseFirstChar(token, lang);\n-        break;\n-      case ALLUPPER:\n-        token = token.toUpperCase(Locale.ENGLISH);\n-        break;\n-      case ALLLOWER:\n-        token = token.toLowerCase();\n-        break;\n-      default:\n-        break;\n-    }\n-    return token;\n-  }\n+        String token = s;\n+        switch (conversion) {\n+            case NONE:\n+                break;\n+            case PRESERVE:\n+                if (StringTools.startsWithUppercase(sample)) {\n+            if (StringTools.isAllUppercase(sample)) {\n+                token = token.toUpperCase(Locale.ENGLISH);\n+            } else {\n+                token = StringTools.uppercaseFirstChar(token, lang);\n+            }\n+                }\n \n-}\n+                break;\n+            case STARTLOWER:\n+                token = token.substring(0, 1).toLowerCase() + token.substring(1);\n+                break;\n+            case STARTUPPER:\n+                token = StringTools.uppercaseFirstChar(token, lang);\n+                break;\n+            case ALLUPPER:\n+                token = token.toUpperCase(Locale.ENGLISH);\n+                break;\n+            case ALLLOWER:\n+                token = token.toLowerCase();\n+                break;\n+            default:\n+                break;\n+        }\n+        return token;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}