{
    "project_name": "codefollower-H2-Research",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "119",
                "column": "13",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    public void addWord(String word, Integer id) {\n        synchronized (words) {\n            if(!words.containsKey(word)) {\n                words.put(word, id);\n            }\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/28/FullTextSettings.java\nindex 4d80a0d7a56..5596eae8dd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/28/FullTextSettings.java\n@@ -116,7 +116,7 @@ final class FullTextSettings {\n      */\n     public void addWord(String word, Integer id) {\n         synchronized (words) {\n-            if(!words.containsKey(word)) {\n+            if (!words.containsKey(word)) {\n                 words.put(word, id);\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/28/FullTextSettings.java\nindex 4d80a0d7a56..bcd19740ad2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/28/FullTextSettings.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.fulltext;\n \n import java.sql.Connection;\n@@ -23,260 +24,263 @@ import org.h2.util.SoftHashMap;\n  */\n final class FullTextSettings {\n \n-    /**\n-     * The settings of open indexes.\n-     */\n-    private static final Map<String, FullTextSettings> SETTINGS = new HashMap<>();\n+  /**\n+   * The settings of open indexes.\n+   */\n+  private static final Map<String, FullTextSettings> SETTINGS = new HashMap<>();\n \n-    /**\n-     * Whether this instance has been initialized.\n-     */\n-    private boolean initialized;\n+  /**\n+   * Whether this instance has been initialized.\n+   */\n+  private boolean initialized;\n \n-    /**\n-     * The set of words not to index (stop words).\n-     */\n-    private final Set<String> ignoreList = new HashSet<>();\n+  /**\n+   * The set of words not to index (stop words).\n+   */\n+  private final Set<String> ignoreList = new HashSet<>();\n \n-    /**\n-     * The set of words / terms.\n-     */\n-    private final Map<String, Integer> words = new HashMap<>();\n+  /**\n+   * The set of words / terms.\n+   */\n+  private final Map<String, Integer> words = new HashMap<>();\n \n-    /**\n-     * The set of indexes in this database.\n-     */\n-    private final ConcurrentHashMap<Integer, IndexInfo> indexes = new ConcurrentHashMap<>();\n+  /**\n+   * The set of indexes in this database.\n+   */\n+  private final ConcurrentHashMap<Integer, IndexInfo> indexes = new ConcurrentHashMap<>();\n \n-    /**\n-     * The prepared statement cache.\n-     */\n-    private final SoftHashMap<Connection,\n-            SoftHashMap<String, PreparedStatement>> cache =\n-            new SoftHashMap<>();\n+  /**\n+   * The prepared statement cache.\n+   */\n+  private final SoftHashMap<Connection,\n+      SoftHashMap<String, PreparedStatement>> cache =\n+      new SoftHashMap<>();\n \n-    /**\n-     * The whitespace characters.\n-     */\n-    private String whitespaceChars = \" \\t\\n\\r\\f+\\\"*%&/()=?'!,.;:-_#@|^~`{}[]<>\\\\\";\n+  /**\n+   * The whitespace characters.\n+   */\n+  private String whitespaceChars = \" \\t\\n\\r\\f+\\\"*%&/()=?'!,.;:-_#@|^~`{}[]<>\\\\\";\n \n-    /**\n-     * Create a new instance.\n-     */\n-    private FullTextSettings() {\n-        // don't allow construction\n-    }\n+  /**\n+   * Create a new instance.\n+   */\n+  private FullTextSettings() {\n+    // don't allow construction\n+  }\n \n-    /**\n-     * Clear set of ignored words\n-     */\n-    public void clearIgnored() {\n-        synchronized (ignoreList) {\n-            ignoreList.clear();\n-        }\n+  /**\n+   * Clear set of ignored words\n+   */\n+  public void clearIgnored() {\n+    synchronized (ignoreList) {\n+      ignoreList.clear();\n     }\n+  }\n \n-    /**\n-     * Amend set of ignored words\n-     * @param words to add\n-     */\n-    public void addIgnored(Iterable<String> words) {\n-        synchronized (ignoreList) {\n-            for (String word : words) {\n-                word = normalizeWord(word);\n-                ignoreList.add(word);\n-            }\n-        }\n+  /**\n+   * Amend set of ignored words\n+   *\n+   * @param words to add\n+   */\n+  public void addIgnored(Iterable<String> words) {\n+    synchronized (ignoreList) {\n+      for (String word : words) {\n+        word = normalizeWord(word);\n+        ignoreList.add(word);\n+      }\n     }\n+  }\n \n-    /**\n-     * Clear set of searchable words\n-     */\n-    public void clearWordList() {\n-        synchronized (words) {\n-            words.clear();\n-        }\n+  /**\n+   * Clear set of searchable words\n+   */\n+  public void clearWordList() {\n+    synchronized (words) {\n+      words.clear();\n     }\n+  }\n \n-    /**\n-     * Get id for a searchable word\n-     * @param word to find id for\n-     * @return Integer id or null if word is not found\n-     */\n-    public Integer getWordId(String word) {\n-        synchronized (words) {\n-            return words.get(word);\n-        }\n+  /**\n+   * Get id for a searchable word\n+   *\n+   * @param word to find id for\n+   * @return Integer id or null if word is not found\n+   */\n+  public Integer getWordId(String word) {\n+    synchronized (words) {\n+      return words.get(word);\n     }\n+  }\n \n-    /**\n-     * Register searchable word\n-     * @param word to register\n-     * @param id to register with\n-     */\n-    public void addWord(String word, Integer id) {\n-        synchronized (words) {\n-            if(!words.containsKey(word)) {\n-                words.put(word, id);\n-            }\n-        }\n+  /**\n+   * Register searchable word\n+   *\n+   * @param word to register\n+   * @param id   to register with\n+   */\n+  public void addWord(String word, Integer id) {\n+    synchronized (words) {\n+      if (!words.containsKey(word)) {\n+        words.put(word, id);\n+      }\n     }\n+  }\n \n-    /**\n-     * Get the index information for the given index id.\n-     *\n-     * @param indexId the index id\n-     * @return the index info\n-     */\n-    protected IndexInfo getIndexInfo(int indexId) {\n-        return indexes.get(indexId);\n-    }\n+  /**\n+   * Get the index information for the given index id.\n+   *\n+   * @param indexId the index id\n+   * @return the index info\n+   */\n+  protected IndexInfo getIndexInfo(int indexId) {\n+    return indexes.get(indexId);\n+  }\n \n-    /**\n-     * Add an index.\n-     *\n-     * @param index the index\n-     */\n-    protected void addIndexInfo(IndexInfo index) {\n-        indexes.put(index.id, index);\n-    }\n+  /**\n+   * Add an index.\n+   *\n+   * @param index the index\n+   */\n+  protected void addIndexInfo(IndexInfo index) {\n+    indexes.put(index.id, index);\n+  }\n \n-    /**\n-     * Convert a word to uppercase. This method returns null if the word is in\n-     * the ignore list.\n-     *\n-     * @param word the word to convert and check\n-     * @return the uppercase version of the word or null\n-     */\n-    protected String convertWord(String word) {\n-        word = normalizeWord(word);\n-        synchronized (ignoreList) {\n-            if (ignoreList.contains(word)) {\n-                return null;\n-            }\n-        }\n-        return word;\n+  /**\n+   * Convert a word to uppercase. This method returns null if the word is in\n+   * the ignore list.\n+   *\n+   * @param word the word to convert and check\n+   * @return the uppercase version of the word or null\n+   */\n+  protected String convertWord(String word) {\n+    word = normalizeWord(word);\n+    synchronized (ignoreList) {\n+      if (ignoreList.contains(word)) {\n+        return null;\n+      }\n     }\n+    return word;\n+  }\n \n-    /**\n-     * Get or create the fulltext settings for this database.\n-     *\n-     * @param conn the connection\n-     * @return the settings\n-     */\n-    protected static FullTextSettings getInstance(Connection conn)\n-            throws SQLException {\n-        String path = getIndexPath(conn);\n-        FullTextSettings setting;\n-        synchronized (SETTINGS) {\n-            setting = SETTINGS.get(path);\n-            if (setting == null) {\n-                setting = new FullTextSettings();\n-                SETTINGS.put(path, setting);\n-            }\n-        }\n-        return setting;\n+  /**\n+   * Get or create the fulltext settings for this database.\n+   *\n+   * @param conn the connection\n+   * @return the settings\n+   */\n+  protected static FullTextSettings getInstance(Connection conn)\n+      throws SQLException {\n+    String path = getIndexPath(conn);\n+    FullTextSettings setting;\n+    synchronized (SETTINGS) {\n+      setting = SETTINGS.get(path);\n+      if (setting == null) {\n+        setting = new FullTextSettings();\n+        SETTINGS.put(path, setting);\n+      }\n     }\n+    return setting;\n+  }\n \n-    /**\n-     * Get the file system path.\n-     *\n-     * @param conn the connection\n-     * @return the file system path\n-     */\n-    private static String getIndexPath(Connection conn) throws SQLException {\n-        Statement stat = conn.createStatement();\n-        ResultSet rs = stat.executeQuery(\n-                \"CALL IFNULL(DATABASE_PATH(), 'MEM:' || DATABASE())\");\n-        rs.next();\n-        String path = rs.getString(1);\n-        if (\"MEM:UNNAMED\".equals(path)) {\n-            throw FullText.throwException(\n-                    \"Fulltext search for private (unnamed) \" +\n-                    \"in-memory databases is not supported.\");\n-        }\n-        rs.close();\n-        return path;\n+  /**\n+   * Get the file system path.\n+   *\n+   * @param conn the connection\n+   * @return the file system path\n+   */\n+  private static String getIndexPath(Connection conn) throws SQLException {\n+    Statement stat = conn.createStatement();\n+    ResultSet rs = stat.executeQuery(\n+        \"CALL IFNULL(DATABASE_PATH(), 'MEM:' || DATABASE())\");\n+    rs.next();\n+    String path = rs.getString(1);\n+    if (\"MEM:UNNAMED\".equals(path)) {\n+      throw FullText.throwException(\n+          \"Fulltext search for private (unnamed) \" +\n+              \"in-memory databases is not supported.\");\n     }\n+    rs.close();\n+    return path;\n+  }\n \n-    /**\n-     * Prepare a statement. The statement is cached in a soft reference cache.\n-     *\n-     * @param conn the connection\n-     * @param sql the statement\n-     * @return the prepared statement\n-     */\n-    protected synchronized PreparedStatement prepare(Connection conn, String sql)\n-            throws SQLException {\n-        SoftHashMap<String, PreparedStatement> c = cache.get(conn);\n-        if (c == null) {\n-            c = new SoftHashMap<>();\n-            cache.put(conn, c);\n-        }\n-        PreparedStatement prep = c.get(sql);\n-        if (prep != null && prep.getConnection().isClosed()) {\n-            prep = null;\n-        }\n-        if (prep == null) {\n-            prep = conn.prepareStatement(sql);\n-            c.put(sql, prep);\n-        }\n-        return prep;\n+  /**\n+   * Prepare a statement. The statement is cached in a soft reference cache.\n+   *\n+   * @param conn the connection\n+   * @param sql  the statement\n+   * @return the prepared statement\n+   */\n+  protected synchronized PreparedStatement prepare(Connection conn, String sql)\n+      throws SQLException {\n+    SoftHashMap<String, PreparedStatement> c = cache.get(conn);\n+    if (c == null) {\n+      c = new SoftHashMap<>();\n+      cache.put(conn, c);\n     }\n-\n-    /**\n-     * Remove all indexes from the settings.\n-     */\n-    protected void removeAllIndexes() {\n-        indexes.clear();\n+    PreparedStatement prep = c.get(sql);\n+    if (prep != null && prep.getConnection().isClosed()) {\n+      prep = null;\n     }\n-\n-    /**\n-     * Remove an index from the settings.\n-     *\n-     * @param index the index to remove\n-     */\n-    protected void removeIndexInfo(IndexInfo index) {\n-        indexes.remove(index.id);\n+    if (prep == null) {\n+      prep = conn.prepareStatement(sql);\n+      c.put(sql, prep);\n     }\n+    return prep;\n+  }\n \n-    /**\n-     * Set the initialized flag.\n-     *\n-     * @param b the new value\n-     */\n-    protected void setInitialized(boolean b) {\n-        this.initialized = b;\n-    }\n+  /**\n+   * Remove all indexes from the settings.\n+   */\n+  protected void removeAllIndexes() {\n+    indexes.clear();\n+  }\n \n-    /**\n-     * Get the initialized flag.\n-     *\n-     * @return whether this instance is initialized\n-     */\n-    protected boolean isInitialized() {\n-        return initialized;\n-    }\n+  /**\n+   * Remove an index from the settings.\n+   *\n+   * @param index the index to remove\n+   */\n+  protected void removeIndexInfo(IndexInfo index) {\n+    indexes.remove(index.id);\n+  }\n \n-    /**\n-     * Close all fulltext settings, freeing up memory.\n-     */\n-    protected static void closeAll() {\n-        synchronized (SETTINGS) {\n-            SETTINGS.clear();\n-        }\n-    }\n+  /**\n+   * Set the initialized flag.\n+   *\n+   * @param b the new value\n+   */\n+  protected void setInitialized(boolean b) {\n+    this.initialized = b;\n+  }\n \n-    protected void setWhitespaceChars(String whitespaceChars) {\n-        this.whitespaceChars = whitespaceChars;\n-    }\n+  /**\n+   * Get the initialized flag.\n+   *\n+   * @return whether this instance is initialized\n+   */\n+  protected boolean isInitialized() {\n+    return initialized;\n+  }\n \n-    protected String getWhitespaceChars() {\n-        return whitespaceChars;\n+  /**\n+   * Close all fulltext settings, freeing up memory.\n+   */\n+  protected static void closeAll() {\n+    synchronized (SETTINGS) {\n+      SETTINGS.clear();\n     }\n+  }\n \n-    private static String normalizeWord(String word) {\n-        // TODO this is locale specific, document\n-        return word.toUpperCase();\n-    }\n+  protected void setWhitespaceChars(String whitespaceChars) {\n+    this.whitespaceChars = whitespaceChars;\n+  }\n+\n+  protected String getWhitespaceChars() {\n+    return whitespaceChars;\n+  }\n+\n+  private static String normalizeWord(String word) {\n+    // TODO this is locale specific, document\n+    return word.toUpperCase();\n+  }\n }\n",
            "diff_size": 253
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/28/FullTextSettings.java\nindex 4d80a0d7a56..1de26d4329a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/28/FullTextSettings.java\n@@ -116,7 +116,7 @@ final class FullTextSettings {\n      */\n     public void addWord(String word, Integer id) {\n         synchronized (words) {\n-            if(!words.containsKey(word)) {\n+            if (!words.containsKey(word)) {\n                 words.put(word, id);\n             }\n         }\n@@ -279,4 +279,4 @@ final class FullTextSettings {\n         // TODO this is locale specific, document\n         return word.toUpperCase();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/28/FullTextSettings.java\nindex 4d80a0d7a56..1966ba7153f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/28/FullTextSettings.java\n@@ -15,18 +15,20 @@ import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n-\n import org.h2.util.SoftHashMap;\n \n /**\n  * The global settings of a full text search.\n  */\n+\n+\n final class FullTextSettings {\n \n     /**\n      * The settings of open indexes.\n      */\n-    private static final Map<String, FullTextSettings> SETTINGS = new HashMap<>();\n+\n+    private static final Map<String, FullTextSettings> SETTINGS = new HashMap< >();\n \n     /**\n      * Whether this instance has been initialized.\n@@ -36,24 +38,23 @@ final class FullTextSettings {\n     /**\n      * The set of words not to index (stop words).\n      */\n-    private final Set<String> ignoreList = new HashSet<>();\n+    private final Set<String> ignoreList = new HashSet< >();\n \n     /**\n      * The set of words / terms.\n      */\n-    private final Map<String, Integer> words = new HashMap<>();\n+    private final Map<String, Integer> words = new HashMap< >();\n \n     /**\n      * The set of indexes in this database.\n      */\n-    private final ConcurrentHashMap<Integer, IndexInfo> indexes = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<Integer, IndexInfo> indexes = new ConcurrentHashMap< >();\n \n     /**\n      * The prepared statement cache.\n      */\n     private final SoftHashMap<Connection,\n-            SoftHashMap<String, PreparedStatement>> cache =\n-            new SoftHashMap<>();\n+            SoftHashMap<String, PreparedStatement>> cache = new SoftHashMap< >();\n \n     /**\n      * The whitespace characters.\n@@ -63,13 +64,17 @@ final class FullTextSettings {\n     /**\n      * Create a new instance.\n      */\n+\n     private FullTextSettings() {\n         // don't allow construction\n+\n     }\n \n     /**\n      * Clear set of ignored words\n      */\n+\n+\n     public void clearIgnored() {\n         synchronized (ignoreList) {\n             ignoreList.clear();\n@@ -80,6 +85,8 @@ final class FullTextSettings {\n      * Amend set of ignored words\n      * @param words to add\n      */\n+\n+\n     public void addIgnored(Iterable<String> words) {\n         synchronized (ignoreList) {\n             for (String word : words) {\n@@ -92,6 +99,8 @@ final class FullTextSettings {\n     /**\n      * Clear set of searchable words\n      */\n+\n+\n     public void clearWordList() {\n         synchronized (words) {\n             words.clear();\n@@ -103,6 +112,8 @@ final class FullTextSettings {\n      * @param word to find id for\n      * @return Integer id or null if word is not found\n      */\n+\n+\n     public Integer getWordId(String word) {\n         synchronized (words) {\n             return words.get(word);\n@@ -114,9 +125,11 @@ final class FullTextSettings {\n      * @param word to register\n      * @param id to register with\n      */\n+\n+\n     public void addWord(String word, Integer id) {\n         synchronized (words) {\n-            if(!words.containsKey(word)) {\n+            if (!words.containsKey(word)) {\n                 words.put(word, id);\n             }\n         }\n@@ -128,6 +141,8 @@ final class FullTextSettings {\n      * @param indexId the index id\n      * @return the index info\n      */\n+\n+\n     protected IndexInfo getIndexInfo(int indexId) {\n         return indexes.get(indexId);\n     }\n@@ -137,6 +152,8 @@ final class FullTextSettings {\n      *\n      * @param index the index\n      */\n+\n+\n     protected void addIndexInfo(IndexInfo index) {\n         indexes.put(index.id, index);\n     }\n@@ -148,6 +165,8 @@ final class FullTextSettings {\n      * @param word the word to convert and check\n      * @return the uppercase version of the word or null\n      */\n+\n+\n     protected String convertWord(String word) {\n         word = normalizeWord(word);\n         synchronized (ignoreList) {\n@@ -164,8 +183,9 @@ final class FullTextSettings {\n      * @param conn the connection\n      * @return the settings\n      */\n-    protected static FullTextSettings getInstance(Connection conn)\n-            throws SQLException {\n+\n+\n+    protected static FullTextSettings getInstance(Connection conn) throws SQLException {\n         String path = getIndexPath(conn);\n         FullTextSettings setting;\n         synchronized (SETTINGS) {\n@@ -184,16 +204,14 @@ final class FullTextSettings {\n      * @param conn the connection\n      * @return the file system path\n      */\n+\n     private static String getIndexPath(Connection conn) throws SQLException {\n         Statement stat = conn.createStatement();\n-        ResultSet rs = stat.executeQuery(\n-                \"CALL IFNULL(DATABASE_PATH(), 'MEM:' || DATABASE())\");\n+        ResultSet rs = stat.executeQuery(\"CALL IFNULL(DATABASE_PATH(), 'MEM:' || DATABASE())\");\n         rs.next();\n         String path = rs.getString(1);\n         if (\"MEM:UNNAMED\".equals(path)) {\n-            throw FullText.throwException(\n-                    \"Fulltext search for private (unnamed) \" +\n-                    \"in-memory databases is not supported.\");\n+            throw FullText.throwException(\"Fulltext search for private (unnamed) \" + \"in-memory databases is not supported.\");\n         }\n         rs.close();\n         return path;\n@@ -206,11 +224,12 @@ final class FullTextSettings {\n      * @param sql the statement\n      * @return the prepared statement\n      */\n-    protected synchronized PreparedStatement prepare(Connection conn, String sql)\n-            throws SQLException {\n+\n+\n+    protected synchronized PreparedStatement prepare(Connection conn, String sql) throws SQLException {\n         SoftHashMap<String, PreparedStatement> c = cache.get(conn);\n         if (c == null) {\n-            c = new SoftHashMap<>();\n+            c = new SoftHashMap< >();\n             cache.put(conn, c);\n         }\n         PreparedStatement prep = c.get(sql);\n@@ -227,6 +246,8 @@ final class FullTextSettings {\n     /**\n      * Remove all indexes from the settings.\n      */\n+\n+\n     protected void removeAllIndexes() {\n         indexes.clear();\n     }\n@@ -236,6 +257,8 @@ final class FullTextSettings {\n      *\n      * @param index the index to remove\n      */\n+\n+\n     protected void removeIndexInfo(IndexInfo index) {\n         indexes.remove(index.id);\n     }\n@@ -245,6 +268,8 @@ final class FullTextSettings {\n      *\n      * @param b the new value\n      */\n+\n+\n     protected void setInitialized(boolean b) {\n         this.initialized = b;\n     }\n@@ -254,6 +279,8 @@ final class FullTextSettings {\n      *\n      * @return whether this instance is initialized\n      */\n+\n+\n     protected boolean isInitialized() {\n         return initialized;\n     }\n@@ -261,16 +288,20 @@ final class FullTextSettings {\n     /**\n      * Close all fulltext settings, freeing up memory.\n      */\n+\n+\n     protected static void closeAll() {\n         synchronized (SETTINGS) {\n             SETTINGS.clear();\n         }\n     }\n \n+\n     protected void setWhitespaceChars(String whitespaceChars) {\n         this.whitespaceChars = whitespaceChars;\n     }\n \n+\n     protected String getWhitespaceChars() {\n         return whitespaceChars;\n     }\n@@ -279,4 +310,5 @@ final class FullTextSettings {\n         // TODO this is locale specific, document\n         return word.toUpperCase();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/28/FullTextSettings.java\nindex 4d80a0d7a56..5596eae8dd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/28/FullTextSettings.java\n@@ -116,7 +116,7 @@ final class FullTextSettings {\n      */\n     public void addWord(String word, Integer id) {\n         synchronized (words) {\n-            if(!words.containsKey(word)) {\n+            if (!words.containsKey(word)) {\n                 words.put(word, id);\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/28/FullTextSettings.java\nindex 4d80a0d7a56..5596eae8dd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/28/FullTextSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/28/FullTextSettings.java\n@@ -116,7 +116,7 @@ final class FullTextSettings {\n      */\n     public void addWord(String word, Integer id) {\n         synchronized (words) {\n-            if(!words.containsKey(word)) {\n+            if (!words.containsKey(word)) {\n                 words.put(word, id);\n             }\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}