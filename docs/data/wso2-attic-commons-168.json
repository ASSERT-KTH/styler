{
    "project_name": "wso2-attic-commons",
    "error_id": "168",
    "information": {
        "errors": [
            {
                "line": "95",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        super.fromDOM(e);\n        \n        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") && !XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n            throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n            \n\t    namespace = XML.assign(e.getAttributeNS(null,\"Namespace\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/168/SAMLAction.java\nindex 3521acb5b26..17fab877bd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/168/SAMLAction.java\n@@ -91,8 +91,8 @@ public class SAMLAction extends SAMLObject implements Cloneable\n      */\n     public void fromDOM(Element e) throws SAMLException {\n         super.fromDOM(e);\n-        \n-        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") && !XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n+\n+        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") &&!XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n             throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n             \n \t    namespace = XML.assign(e.getAttributeNS(null,\"Namespace\"));\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/168/SAMLAction.java\nindex 3521acb5b26..28af9d54db4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/168/SAMLAction.java\n@@ -1,6 +1,6 @@\n /*\n  *  Copyright 2001-2005 Internet2\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n@@ -23,171 +23,178 @@ import org.w3c.dom.Document;\n import org.w3c.dom.Node;\n \n /**\n- *  Represents a SAML Action\n+ * Represents a SAML Action\n  *\n- * @author     Helen Rehn\n- * @created    October 4, 2002\n+ * @author Helen Rehn\n+ * @created October 4, 2002\n  */\n-public class SAMLAction extends SAMLObject implements Cloneable\n-{\n-    /** SAML Action Namespace URI values */\n-\n-    public static final String SAML_ACTION_NAMESPACE_RWEDC = \"urn:oasis:names:tc:SAML:1.0:action:rwedc\";\n-\n-    public static final String SAML_ACTION_NAMESPACE_RWEDC_NEG = \"urn:oasis:names:tc:SAML:1.0:action:rwedc-negation\";\n-\n-    public static final String SAML_ACTION_NAMESPACE_GHPP = \"urn:oasis:names:tc:SAML:1.0:action:ghpp\";\n-\n-    public static final String SAML_ACTION_NAMESPACE_UNIX = \"urn:oasis:names:tc:SAML:1.0:action:unix\";\n-\n-    private String namespace = null;\n-    private String data = null;\n-\n-    /**\n-     *  Default constructor\n-     */\n-    public SAMLAction() {\n-    }\n-\n-    /**\n-     *  Builds an action out of its component parts\n-     *\n-     * @param  namespace  a URI reference representing the namespace in\n-     *                    which the name of the specified action is to be\n-     *                    interpreted\n-     * @param  data       an action sought to be performed on the specified\n-     *                    resource\n-     * @exception  SAMLException  Raised if an action cannot be constructed\n-     *      from the supplied information\n-     */\n-    public SAMLAction(String namespace, String data) throws SAMLException {\n-  \t    this.namespace = XML.assign(namespace);\n-  \t    this.data = XML.assign(data);\n+public class SAMLAction extends SAMLObject implements Cloneable {\n+  /**\n+   * SAML Action Namespace URI values\n+   */\n+\n+  public static final String SAML_ACTION_NAMESPACE_RWEDC = \"urn:oasis:names:tc:SAML:1.0:action:rwedc\";\n+\n+  public static final String SAML_ACTION_NAMESPACE_RWEDC_NEG = \"urn:oasis:names:tc:SAML:1.0:action:rwedc-negation\";\n+\n+  public static final String SAML_ACTION_NAMESPACE_GHPP = \"urn:oasis:names:tc:SAML:1.0:action:ghpp\";\n+\n+  public static final String SAML_ACTION_NAMESPACE_UNIX = \"urn:oasis:names:tc:SAML:1.0:action:unix\";\n+\n+  private String namespace = null;\n+  private String data = null;\n+\n+  /**\n+   * Default constructor\n+   */\n+  public SAMLAction() {\n+  }\n+\n+  /**\n+   * Builds an action out of its component parts\n+   *\n+   * @param namespace a URI reference representing the namespace in\n+   *                  which the name of the specified action is to be\n+   *                  interpreted\n+   * @param data      an action sought to be performed on the specified\n+   *                  resource\n+   * @throws SAMLException Raised if an action cannot be constructed\n+   *                       from the supplied information\n+   */\n+  public SAMLAction(String namespace, String data) throws SAMLException {\n+    this.namespace = XML.assign(namespace);\n+    this.data = XML.assign(data);\n+  }\n+\n+  /**\n+   * Reconstructs an action from a DOM tree\n+   *\n+   * @param e The root of a DOM tree\n+   * @throws SAMLException Thrown if the object cannot be constructed\n+   */\n+  public SAMLAction(Element e) throws SAMLException {\n+    fromDOM(e);\n+  }\n+\n+  /**\n+   * Reconstructs an action from a stream\n+   *\n+   * @param in A stream containing XML\n+   * @throws SAMLException Raised if an exception occurs while constructing\n+   *                       the object.\n+   */\n+  public SAMLAction(InputStream in) throws SAMLException {\n+    fromDOM(fromStream(in));\n+  }\n+\n+  /**\n+   * @see org.opensaml.SAMLObject#fromDOM(org.w3c.dom.Element)\n+   */\n+  public void fromDOM(Element e) throws SAMLException {\n+    super.fromDOM(e);\n+\n+    if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") &&\n+      !XML.isElementNamed(e, XML.SAML_NS, \"Action\")) {\n+      throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n     }\n \n-    /**\n-     *  Reconstructs an action from a DOM tree\n-     *\n-     * @param  e                  The root of a DOM tree\n-     * @exception  SAMLException  Thrown if the object cannot be constructed\n-     */\n-    public SAMLAction(Element e) throws SAMLException {\n-        fromDOM(e);\n+    namespace = XML.assign(e.getAttributeNS(null, \"Namespace\"));\n+    if (e.hasChildNodes()) {\n+      data = XML.assign(e.getFirstChild().getNodeValue());\n     }\n \n-    /**\n-     *  Reconstructs an action from a stream\n-     *\n-     * @param  in                   A stream containing XML\n-     * @exception  SAMLException  Raised if an exception occurs while constructing\n-     *                              the object.\n-     */\n-    public SAMLAction(InputStream in) throws SAMLException {\n-        fromDOM(fromStream(in));\n+    checkValidity();\n+  }\n+\n+  /**\n+   * Gets the namespace from the action\n+   *\n+   * @return the namespace\n+   */\n+  public String getNamespace() {\n+    return namespace;\n+  }\n+\n+  /**\n+   * Gets the data from the action\n+   *\n+   * @return the data\n+   */\n+  public String getData() {\n+    return data;\n+  }\n+\n+  /**\n+   * Sets the namespace of the action\n+   *\n+   * @param namespace the namespace\n+   */\n+  public void setNamespace(String namespace) {\n+    this.namespace = XML.assign(namespace);\n+    setDirty(true);\n+  }\n+\n+  /**\n+   * Sets the data of the action\n+   *\n+   * @param data the data\n+   */\n+  public void setData(String data) {\n+    if (XML.isEmpty(data)) {\n+      throw new IllegalArgumentException(\"data cannot be null or empty\");\n     }\n-    \n-    /**\n-     * @see org.opensaml.SAMLObject#fromDOM(org.w3c.dom.Element)\n-     */\n-    public void fromDOM(Element e) throws SAMLException {\n-        super.fromDOM(e);\n-        \n-        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") && !XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n-            throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n-            \n-\t    namespace = XML.assign(e.getAttributeNS(null,\"Namespace\"));\n-        if (e.hasChildNodes())\n-            data = XML.assign(e.getFirstChild().getNodeValue());\n-        \n-\t    checkValidity();\n+    this.data = data;\n+    setDirty(true);\n+  }\n+\n+  /**\n+   * @see org.opensaml.SAMLObject#buildRoot(org.w3c.dom.Document, boolean)\n+   */\n+  protected Element buildRoot(Document doc, boolean xmlns) {\n+    Element a = doc.createElementNS(XML.SAML_NS, \"Action\");\n+    if (xmlns) {\n+      a.setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n     }\n-    \n-    /**\n-     *  Gets the namespace from the action\n-     *\n-     * @return    the namespace\n-     */\n-    public String getNamespace() {\n-\t   return namespace;\n-    }\n-\n-    /**\n-     *  Gets the data from the action\n-     *\n-     * @return    the data\n-     */\n-    public String getData() {\n-    \treturn data;\n+    return a;\n+  }\n+\n+  /**\n+   * @see org.opensaml.SAMLObject#toDOM(org.w3c.dom.Document, boolean)\n+   */\n+  public Node toDOM(Document doc, boolean xmlns) throws SAMLException {\n+    // Let the base build/verify the DOM root.\n+    super.toDOM(doc, xmlns);\n+    if (dirty) {\n+      // Dirty bit is set, so we need to rebuild.\n+      Element a = (Element) root;\n+      if (!XML.isEmpty(namespace)) {\n+        a.setAttributeNS(null, \"Namespace\", namespace);\n+      }\n+      a.appendChild(doc.createTextNode(data));\n+      setDirty(false);\n+    } else if (xmlns) {\n+      ((Element) root).setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n     }\n-\n-    /**\n-     *  Sets the namespace of the action\n-     * \n-     * @param namespace    the namespace\n-     */\n-    public void setNamespace(String namespace) {\n-        this.namespace = XML.assign(namespace);\n-        setDirty(true);\n-    }\n-\n-    /**\n-     *  Sets the data of the action\n-     * \n-     * @param data    the data\n-     */\n-    public void setData(String data) {\n-        if (XML.isEmpty(data))\n-            throw new IllegalArgumentException(\"data cannot be null or empty\");\n-        this.data = data;\n-        setDirty(true);\n-    }\n-\n-    /**\n-     *  @see org.opensaml.SAMLObject#buildRoot(org.w3c.dom.Document,boolean)\n-     */\n-    protected Element buildRoot(Document doc, boolean xmlns) {\n-        Element a = doc.createElementNS(XML.SAML_NS, \"Action\");\n-        if (xmlns)\n-            a.setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n-        return a;\n-    }\n-\n-    /**\n-     *  @see org.opensaml.SAMLObject#toDOM(org.w3c.dom.Document,boolean)\n-     */\n-    public Node toDOM(Document doc, boolean xmlns) throws SAMLException {\n-        // Let the base build/verify the DOM root. \n-        super.toDOM(doc, xmlns);\n-        if (dirty) {\n-            // Dirty bit is set, so we need to rebuild.\n-            Element a = (Element)root;\n-            if (!XML.isEmpty(namespace))\n-            \ta.setAttributeNS(null, \"Namespace\", namespace); \n-        \ta.appendChild(doc.createTextNode(data));\n-            setDirty(false);\n-        }\n-        else if (xmlns) {\n-            ((Element)root).setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n-        }\n-    \treturn root;\n-    }\n-    \n-    /**\n-     * @see org.opensaml.SAMLObject#checkValidity()\n-     */\n-    public void checkValidity() throws SAMLException {\n-        if (XML.isEmpty(data))\n-            throw new MalformedException(\"Action is invalid, data must have a value\");\n-    }\n-\n-    /**\n-     *  Copies a SAML object such that no dependencies exist between the original and the copy\n-     * \n-     * @return      The new object\n-     * @see java.lang.Object#clone()\n-     */\n-    public Object clone() throws CloneNotSupportedException {\n-        return super.clone();\n+    return root;\n+  }\n+\n+  /**\n+   * @see org.opensaml.SAMLObject#checkValidity()\n+   */\n+  public void checkValidity() throws SAMLException {\n+    if (XML.isEmpty(data)) {\n+      throw new MalformedException(\"Action is invalid, data must have a value\");\n     }\n+  }\n+\n+  /**\n+   * Copies a SAML object such that no dependencies exist between the original and the copy\n+   *\n+   * @return The new object\n+   * @see java.lang.Object#clone()\n+   */\n+  public Object clone() throws CloneNotSupportedException {\n+    return super.clone();\n+  }\n }\n \n",
            "diff_size": 233
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/168/SAMLAction.java\nindex 3521acb5b26..ba20450373d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/168/SAMLAction.java\n@@ -31,8 +31,7 @@ import org.w3c.dom.Node;\n public class SAMLAction extends SAMLObject implements Cloneable\n {\n     /** SAML Action Namespace URI values */\n-\n-    public static final String SAML_ACTION_NAMESPACE_RWEDC = \"urn:oasis:names:tc:SAML:1.0:action:rwedc\";\n+public static final String SAML_ACTION_NAMESPACE_RWEDC = \"urn:oasis:names:tc:SAML:1.0:action:rwedc\";\n \n     public static final String SAML_ACTION_NAMESPACE_RWEDC_NEG = \"urn:oasis:names:tc:SAML:1.0:action:rwedc-negation\";\n \n@@ -61,7 +60,7 @@ public class SAMLAction extends SAMLObject implements Cloneable\n      *      from the supplied information\n      */\n     public SAMLAction(String namespace, String data) throws SAMLException {\n-  \t    this.namespace = XML.assign(namespace);\n+    this.namespace = XML.assign(namespace);\n   \t    this.data = XML.assign(data);\n     }\n \n@@ -94,9 +93,8 @@ public class SAMLAction extends SAMLObject implements Cloneable\n         \n         if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") && !XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n             throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n-            \n-\t    namespace = XML.assign(e.getAttributeNS(null,\"Namespace\"));\n-        if (e.hasChildNodes())\n+namespace = XML.assign(e.getAttributeNS(null,\"Namespace\"));\n+if (e.hasChildNodes())\n             data = XML.assign(e.getFirstChild().getNodeValue());\n         \n \t    checkValidity();\n@@ -108,7 +106,7 @@ public class SAMLAction extends SAMLObject implements Cloneable\n      * @return    the namespace\n      */\n     public String getNamespace() {\n-\t   return namespace;\n+    return namespace;\n     }\n \n     /**\n@@ -162,9 +160,9 @@ public class SAMLAction extends SAMLObject implements Cloneable\n             // Dirty bit is set, so we need to rebuild.\n             Element a = (Element)root;\n             if (!XML.isEmpty(namespace))\n-            \ta.setAttributeNS(null, \"Namespace\", namespace); \n-        \ta.appendChild(doc.createTextNode(data));\n-            setDirty(false);\n+            \ta.setAttributeNS(null, \"Namespace\", namespace);\n+a.appendChild(doc.createTextNode(data));\n+setDirty(false);\n         }\n         else if (xmlns) {\n             ((Element)root).setAttributeNS(XML.XMLNS_NS, \"xmlns\", XML.SAML_NS);\n@@ -189,5 +187,4 @@ public class SAMLAction extends SAMLObject implements Cloneable\n     public Object clone() throws CloneNotSupportedException {\n         return super.clone();\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/168/SAMLAction.java\nindex 3521acb5b26..48faf099f52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/168/SAMLAction.java\n@@ -91,9 +91,8 @@ public class SAMLAction extends SAMLObject implements Cloneable\n      */\n     public void fromDOM(Element e) throws SAMLException {\n         super.fromDOM(e);\n-        \n-        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") && !XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n-            throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n+    if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") && !XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n+        throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n             \n \t    namespace = XML.assign(e.getAttributeNS(null,\"Namespace\"));\n         if (e.hasChildNodes())\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/168/SAMLAction.java\nindex 3521acb5b26..17fab877bd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/168/SAMLAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/168/SAMLAction.java\n@@ -91,8 +91,8 @@ public class SAMLAction extends SAMLObject implements Cloneable\n      */\n     public void fromDOM(Element e) throws SAMLException {\n         super.fromDOM(e);\n-        \n-        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") && !XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n+\n+        if (config.getBooleanProperty(\"org.opensaml.strict-dom-checking\") &&!XML.isElementNamed(e,XML.SAML_NS,\"Action\"))\n             throw new MalformedException(SAMLException.RESPONDER, \"SAMLAction() requires saml:Action at root\");\n             \n \t    namespace = XML.assign(e.getAttributeNS(null,\"Namespace\"));\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}