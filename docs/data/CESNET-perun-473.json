{
    "project_name": "CESNET-perun",
    "error_id": "473",
    "information": {
        "errors": [
            {
                "line": "7",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/**\n * The base of Perun-Dispatcher checked exceptions.\n * \n * @author Michal Karm Babacek\n */\npublic abstract class DispatcherException extends Exception {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "7",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/473/DispatcherException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/473/DispatcherException.java\nindex 01f794b8b2e..fcd3a3cc721 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/473/DispatcherException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/473/DispatcherException.java\n@@ -4,41 +4,41 @@ import org.apache.log4j.Logger;\n \n /**\n  * The base of Perun-Dispatcher checked exceptions.\n- * \n+ *\n  * @author Michal Karm Babacek\n  */\n public abstract class DispatcherException extends Exception {\n-\tstatic final long serialVersionUID = 0;\n-\n-\tstatic Logger logger = Logger.getLogger(DispatcherException.class);\n-\tprivate String errorId = Long.toHexString(System.currentTimeMillis());\n-\n-\tpublic DispatcherException() {\n-\t\tsuper();\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\tpublic DispatcherException(String message) {\n-\t\tsuper(message);\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\tpublic DispatcherException(String message, Throwable cause) {\n-\t\tsuper(message, cause);\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\tpublic DispatcherException(Throwable cause) {\n-\t\tsuper(cause != null ? cause.getMessage() : null, cause);\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\t@Override\n-\tpublic String getMessage() {\n-\t\treturn \"Error \" + errorId + \": \" + super.getMessage();\n-\t}\n-\n-\tpublic String getErrorId() {\n-\t\treturn errorId;\n-\t}\n+    static final long serialVersionUID = 0;\n+\n+    static Logger logger = Logger.getLogger(DispatcherException.class);\n+    private String errorId = Long.toHexString(System.currentTimeMillis());\n+\n+    public DispatcherException() {\n+        super();\n+        logger.error(\"Error ID: \" + errorId, this);\n+    }\n+\n+    public DispatcherException(String message) {\n+        super(message);\n+        logger.error(\"Error ID: \" + errorId, this);\n+    }\n+\n+    public DispatcherException(String message, Throwable cause) {\n+        super(message, cause);\n+        logger.error(\"Error ID: \" + errorId, this);\n+    }\n+\n+    public DispatcherException(Throwable cause) {\n+        super(cause != null ? cause.getMessage() : null, cause);\n+        logger.error(\"Error ID: \" + errorId, this);\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        return \"Error \" + errorId + \": \" + super.getMessage();\n+    }\n+\n+    public String getErrorId() {\n+        return errorId;\n+    }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "7",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/473/DispatcherException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/473/DispatcherException.java\nindex 01f794b8b2e..33a20d9fd62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/473/DispatcherException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/473/DispatcherException.java\n@@ -7,38 +7,41 @@ import org.apache.log4j.Logger;\n  * \n  * @author Michal Karm Babacek\n  */\n+\n+\n public abstract class DispatcherException extends Exception {\n-\tstatic final long serialVersionUID = 0;\n-\n-\tstatic Logger logger = Logger.getLogger(DispatcherException.class);\n-\tprivate String errorId = Long.toHexString(System.currentTimeMillis());\n-\n-\tpublic DispatcherException() {\n-\t\tsuper();\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\tpublic DispatcherException(String message) {\n-\t\tsuper(message);\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\tpublic DispatcherException(String message, Throwable cause) {\n-\t\tsuper(message, cause);\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\tpublic DispatcherException(Throwable cause) {\n-\t\tsuper(cause != null ? cause.getMessage() : null, cause);\n-\t\tlogger.error(\"Error ID: \" + errorId, this);\n-\t}\n-\n-\t@Override\n-\tpublic String getMessage() {\n-\t\treturn \"Error \" + errorId + \": \" + super.getMessage();\n-\t}\n-\n-\tpublic String getErrorId() {\n-\t\treturn errorId;\n-\t}\n-}\n+ static final long serialVersionUID = 0;\n+\n+ static Logger logger = Logger.getLogger(DispatcherException.class);\n+ private String errorId = Long.toHexString(System.currentTimeMillis());\n+\n+\n+ public DispatcherException() {\n+  super();\n+  logger.error(\"Error ID: \" + errorId, this);\n+ }\n+\n+ public DispatcherException(String message) {\n+  super(message);\n+  logger.error(\"Error ID: \" + errorId, this);\n+ }\n+\n+ public DispatcherException(String message, Throwable cause) {\n+  super(message, cause);\n+  logger.error(\"Error ID: \" + errorId, this);\n+ }\n+\n+ public DispatcherException(Throwable cause) {\n+  super(cause != null ? cause.getMessage() : null, cause);\n+  logger.error(\"Error ID: \" + errorId, this);\n+ }\n+\n+ @Override\n+ public String getMessage() {\n+  return \"Error \" + errorId + \": \" +super.getMessage();\n+ }\n+\n+ public String getErrorId() {\n+  return errorId;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "7",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}