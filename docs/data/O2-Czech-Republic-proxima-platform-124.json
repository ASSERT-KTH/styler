{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "124",
    "information": {
        "errors": [
            {
                "line": "52",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 95).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assertEquals(event, deserialized.get());\n    assertEquals(\n        Event.class.getName(), factory.getClassName(new URI(\"avro:\" + Event.class.getName())));\n  }\n\n  @Test",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/124/AvroSerializerFactoryTest.java\nindex 31e5ce572a2..5aeb37ea779 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/124/AvroSerializerFactoryTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.scheme.avro;\n \n import static org.junit.Assert.assertEquals;\n@@ -49,7 +50,8 @@ public class AvroSerializerFactoryTest {\n     assertTrue(deserialized.isPresent());\n     assertEquals(event, deserialized.get());\n     assertEquals(\n-        Event.class.getName(), factory.getClassName(new URI(\"avro:\" + Event.class.getName())));\n+        Event.class.getName(),\n+        factory.getClassName(new URI(\"avro:\" + Event.class.getName())));\n   }\n \n   @Test\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/124/AvroSerializerFactoryTest.java\nindex 31e5ce572a2..5d5a7d32c12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/124/AvroSerializerFactoryTest.java\n@@ -34,16 +34,13 @@ public class AvroSerializerFactoryTest {\n \n   @Test\n   public void testEqualsAfterSerializeAndDeserialize() throws URISyntaxException {\n-    Event event =\n-        Event.newBuilder()\n+    Event event = Event.newBuilder()\n             .setGatewayId(\"gateway\")\n             .setPayload(ByteBuffer.wrap(\"my-payload\".getBytes()))\n             .build();\n \n-    ValueSerializer<Event> serializer =\n-        factory.getValueSerializer(new URI(\"avro:\" + event.getClass().getName()));\n-\n-    byte[] bytes = serializer.serialize(event);\n+    ValueSerializer<Event> serializer = factory.getValueSerializer(new URI(\"avro:\" + event.getClass().getName()));\n+  byte[] bytes = serializer.serialize(event);\n \n     Optional<Event> deserialized = serializer.deserialize(bytes);\n     assertTrue(deserialized.isPresent());\n@@ -54,16 +51,14 @@ public class AvroSerializerFactoryTest {\n \n   @Test\n   public void testGetDefault() throws URISyntaxException {\n-    ValueSerializer<Event> serializer =\n-        factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n+    ValueSerializer<Event> serializer = factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n     Event object = new Event();\n     assertEquals(object, serializer.getDefault());\n   }\n \n   @Test\n   public void testIsUsable() throws URISyntaxException {\n-    ValueSerializer<Event> serializer =\n-        factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n+    ValueSerializer<Event> serializer = factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n     assertTrue(serializer.isUsable());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/124/AvroSerializerFactoryTest.java\nindex 31e5ce572a2..6d7a0b02613 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/124/AvroSerializerFactoryTest.java\n@@ -17,7 +17,6 @@ package cz.o2.proxima.scheme.avro;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-\n import cz.o2.proxima.scheme.ValueSerializer;\n import cz.o2.proxima.scheme.ValueSerializerFactory;\n import cz.o2.proxima.scheme.avro.test.Event;\n@@ -28,42 +27,35 @@ import java.util.Optional;\n import org.junit.Test;\n \n /** Test {@link AvroSerializerFactory}. */\n+\n+\n public class AvroSerializerFactoryTest {\n \n   private final ValueSerializerFactory factory = new AvroSerializerFactory();\n \n   @Test\n   public void testEqualsAfterSerializeAndDeserialize() throws URISyntaxException {\n-    Event event =\n-        Event.newBuilder()\n-            .setGatewayId(\"gateway\")\n-            .setPayload(ByteBuffer.wrap(\"my-payload\".getBytes()))\n-            .build();\n-\n-    ValueSerializer<Event> serializer =\n-        factory.getValueSerializer(new URI(\"avro:\" + event.getClass().getName()));\n-\n+    Event event = Event.newBuilder().setGatewayId(\"gateway\")\n+                                    .setPayload(ByteBuffer.wrap(\"my-payload\".getBytes()))\n+                                    .build();\n+    ValueSerializer<Event> serializer = factory.getValueSerializer(new URI(\"avro:\" + event.getClass().getName()));\n     byte[] bytes = serializer.serialize(event);\n-\n     Optional<Event> deserialized = serializer.deserialize(bytes);\n     assertTrue(deserialized.isPresent());\n     assertEquals(event, deserialized.get());\n-    assertEquals(\n-        Event.class.getName(), factory.getClassName(new URI(\"avro:\" + Event.class.getName())));\n+    assertEquals(Event.class.getName(), factory.getClassName(new URI(\"avro:\" + Event.class.getName())));\n   }\n \n   @Test\n   public void testGetDefault() throws URISyntaxException {\n-    ValueSerializer<Event> serializer =\n-        factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n+    ValueSerializer<Event> serializer = factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n     Event object = new Event();\n     assertEquals(object, serializer.getDefault());\n   }\n \n   @Test\n   public void testIsUsable() throws URISyntaxException {\n-    ValueSerializer<Event> serializer =\n-        factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n+    ValueSerializer<Event> serializer = factory.getValueSerializer(new URI(\"avro:\" + Event.class.getName()));\n     assertTrue(serializer.isUsable());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "52",
                    "column": "68",
                    "severity": "error",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "52",
                    "column": "69",
                    "severity": "error",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/124/AvroSerializerFactoryTest.java\nindex 31e5ce572a2..d67b7589711 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/124/AvroSerializerFactoryTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/124/AvroSerializerFactoryTest.java\n@@ -49,7 +49,8 @@ public class AvroSerializerFactoryTest {\n     assertTrue(deserialized.isPresent());\n     assertEquals(event, deserialized.get());\n     assertEquals(\n-        Event.class.getName(), factory.getClassName(new URI(\"avro:\" + Event.class.getName())));\n+        Event.class.getName(), factory.getClassName(new URI(\"avro:\"+Event.class.getName())\n+        ));\n   }\n \n   @Test\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}