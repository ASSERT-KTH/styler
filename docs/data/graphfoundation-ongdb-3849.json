{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3849",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3849/LogEntryCommit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3849/LogEntryCommit.java\nindex e006ca7d3b0..44a950aca59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3849/LogEntryCommit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3849/LogEntryCommit.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.entry;\n \n import java.util.TimeZone;\n@@ -28,74 +29,74 @@ import static org.neo4j.kernel.impl.transaction.log.entry.LogEntryVersion.CURREN\n \n public class LogEntryCommit extends AbstractLogEntry\n {\n-    private final long txId;\n-    private final long timeWritten;\n-    protected final String name;\n+  private final long txId;\n+  private final long timeWritten;\n+  protected final String name;\n \n-    public LogEntryCommit( long txId, long timeWritten )\n-    {\n-        this( CURRENT, txId, timeWritten );\n-    }\n+  public LogEntryCommit(long txId, long timeWritten)\n+  {\n+    this(CURRENT, txId, timeWritten);\n+  }\n \n-    public LogEntryCommit( LogEntryVersion version, long txId, long timeWritten )\n-    {\n-        super( version, TX_COMMIT );\n-        this.txId = txId;\n-        this.timeWritten = timeWritten;\n-        this.name = \"Commit\";\n-    }\n+  public LogEntryCommit(LogEntryVersion version, long txId, long timeWritten)\n+  {\n+    super(version, TX_COMMIT);\n+    this.txId = txId;\n+    this.timeWritten = timeWritten;\n+    this.name = \"Commit\";\n+  }\n \n-    public long getTxId()\n-    {\n-        return txId;\n-    }\n+  public long getTxId()\n+  {\n+    return txId;\n+  }\n \n-    public long getTimeWritten()\n-    {\n-        return timeWritten;\n-    }\n+  public long getTimeWritten()\n+  {\n+    return timeWritten;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return toString( Format.DEFAULT_TIME_ZONE );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return toString(Format.DEFAULT_TIME_ZONE);\n+  }\n \n-    @Override\n-    public String toString( TimeZone timeZone )\n-    {\n-        return name + \"[txId=\" + getTxId() + \", \" + timestamp( getTimeWritten(), timeZone ) + \"]\";\n-    }\n+  @Override\n+  public String toString(TimeZone timeZone)\n+  {\n+    return name + \"[txId=\" + getTxId() + \", \" + timestamp(getTimeWritten(), timeZone) + \"]\";\n+  }\n \n-    @Override\n-    @SuppressWarnings( \"unchecked\" )\n-    public <T extends LogEntry> T as()\n-    {\n-        return (T) this;\n-    }\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public <T extends LogEntry> T as()\n+  {\n+    return (T) this;\n+  }\n \n-    @Override\n-    public boolean equals( Object o )\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        LogEntryCommit commit = (LogEntryCommit) o;\n-        return timeWritten == commit.timeWritten && txId == commit.txId && name.equals( commit.name );\n+      return true;\n     }\n-\n-    @Override\n-    public int hashCode()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        int result = (int) (txId ^ (txId >>> 32));\n-        result = 31 * result + (int) (timeWritten ^ (timeWritten >>> 32));\n-        result = 31 * result + name.hashCode();\n-        return result;\n+      return false;\n     }\n+\n+    LogEntryCommit commit = (LogEntryCommit) o;\n+    return timeWritten == commit.timeWritten && txId == commit.txId && name.equals(commit.name);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = (int) (txId ^ (txId >>> 32));\n+    result = 31 * result + (int) (timeWritten ^ (timeWritten >>> 32));\n+    result = 31 * result + name.hashCode();\n+    return result;\n+  }\n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3849/LogEntryCommit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3849/LogEntryCommit.java\nindex e006ca7d3b0..d68c037c331 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3849/LogEntryCommit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3849/LogEntryCommit.java\n@@ -81,7 +81,8 @@ public class LogEntryCommit extends AbstractLogEntry\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n@@ -93,9 +94,9 @@ public class LogEntryCommit extends AbstractLogEntry\n     @Override\n     public int hashCode()\n     {\n-        int result = (int) (txId ^ (txId >>> 32));\n-        result = 31 * result + (int) (timeWritten ^ (timeWritten >>> 32));\n+        int result = ( int) ( txId ^ ( txId >>> 32 ));\n+        result = 31 * result + ( int) ( timeWritten ^ ( timeWritten >>> 32 ));\n         result = 31 * result + name.hashCode();\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}