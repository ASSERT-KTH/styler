{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1116",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "335",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1116/PropertyRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1116/PropertyRecord.java\nindex 4303e956b18..f06e073aab1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1116/PropertyRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1116/PropertyRecord.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import java.util.Arrays;\n@@ -40,369 +41,368 @@ import static org.neo4j.kernel.impl.store.record.Record.NO_PREVIOUS_PROPERTY;\n  */\n public class PropertyRecord extends AbstractBaseRecord implements Iterable<PropertyBlock>\n {\n-    private static final byte TYPE_NODE = 1;\n-    private static final byte TYPE_REL = 2;\n-\n-    private long nextProp;\n-    private long prevProp;\n-    // Holds the purely physical representation of the loaded properties in this record. This is so that\n-    // StorePropertyCursor is able to use this raw data without the rather heavy and bloated data structures\n-    // of PropertyBlock and thereabouts. So when a property record is loaded only these blocks are read,\n-    // the construction of all PropertyBlock instances are loaded lazily when they are first needed, loaded\n-    // by ensureBlocksLoaded().\n-    // Modifications to a property record are still done on the PropertyBlock abstraction and so it's also\n-    // that data that gets written to the log and record when it's time to do so.\n-    private final long[] blocks = new long[PropertyType.getPayloadSizeLongs()];\n-    private int blocksCursor;\n-\n-    // These MUST ONLY be populated if we're accessing PropertyBlocks. On just loading this record only the\n-    // next/prev and blocks should be filled.\n-    private final PropertyBlock[] blockRecords =\n-            new PropertyBlock[PropertyType.getPayloadSizeLongs() /*we can have at most these many*/];\n-    private boolean blocksLoaded;\n-    private int blockRecordsCursor;\n-    private long entityId;\n-    private byte entityType;\n-    private List<DynamicRecord> deletedRecords;\n-\n-    public PropertyRecord( long id )\n-    {\n-        super( id );\n-    }\n-\n-    public PropertyRecord( long id, PrimitiveRecord primitive )\n-    {\n-        super( id );\n-        primitive.setIdTo( this );\n-    }\n-\n-    public PropertyRecord initialize( boolean inUse, long prevProp, long nextProp )\n-    {\n-        super.initialize( inUse );\n-        this.prevProp = prevProp;\n-        this.nextProp = nextProp;\n-        this.deletedRecords = null;\n-        this.blockRecordsCursor = blocksCursor = 0;\n-        this.blocksLoaded = false;\n-        return this;\n-    }\n-\n-    @Override\n-    public void clear()\n-    {\n-        super.initialize( false );\n-        this.entityId = -1;\n-        this.entityType = 0;\n-        this.prevProp = NO_PREVIOUS_PROPERTY.intValue();\n-        this.nextProp = NO_NEXT_PROPERTY.intValue();\n-        this.deletedRecords = null;\n-        this.blockRecordsCursor = blocksCursor = 0;\n-        this.blocksLoaded = false;\n-    }\n-\n-    public void setNodeId( long nodeId )\n-    {\n-        entityType = TYPE_NODE;\n-        entityId = nodeId;\n-    }\n-\n-    public void setRelId( long relId )\n-    {\n-        entityType = TYPE_REL;\n-        entityId = relId;\n-    }\n-\n-    public boolean isNodeSet()\n-    {\n-        return entityType == TYPE_NODE;\n-    }\n-\n-    public boolean isRelSet()\n-    {\n-        return entityType == TYPE_REL;\n-    }\n-\n-    public long getNodeId()\n-    {\n-        if ( isNodeSet() )\n-        {\n-            return entityId;\n-        }\n-        return -1;\n-    }\n-\n-    public long getRelId()\n-    {\n-        if ( isRelSet() )\n+  private static final byte TYPE_NODE = 1;\n+  private static final byte TYPE_REL = 2;\n+\n+  private long nextProp;\n+  private long prevProp;\n+  // Holds the purely physical representation of the loaded properties in this record. This is so that\n+  // StorePropertyCursor is able to use this raw data without the rather heavy and bloated data structures\n+  // of PropertyBlock and thereabouts. So when a property record is loaded only these blocks are read,\n+  // the construction of all PropertyBlock instances are loaded lazily when they are first needed, loaded\n+  // by ensureBlocksLoaded().\n+  // Modifications to a property record are still done on the PropertyBlock abstraction and so it's also\n+  // that data that gets written to the log and record when it's time to do so.\n+  private final long[] blocks = new long[PropertyType.getPayloadSizeLongs()];\n+  private int blocksCursor;\n+\n+  // These MUST ONLY be populated if we're accessing PropertyBlocks. On just loading this record only the\n+  // next/prev and blocks should be filled.\n+  private final PropertyBlock[] blockRecords =\n+      new PropertyBlock[PropertyType.getPayloadSizeLongs() /*we can have at most these many*/];\n+  private boolean blocksLoaded;\n+  private int blockRecordsCursor;\n+  private long entityId;\n+  private byte entityType;\n+  private List<DynamicRecord> deletedRecords;\n+\n+  public PropertyRecord(long id)\n+  {\n+    super(id);\n+  }\n+\n+  public PropertyRecord(long id, PrimitiveRecord primitive)\n+  {\n+    super(id);\n+    primitive.setIdTo(this);\n+  }\n+\n+  public PropertyRecord initialize(boolean inUse, long prevProp, long nextProp)\n+  {\n+    super.initialize(inUse);\n+    this.prevProp = prevProp;\n+    this.nextProp = nextProp;\n+    this.deletedRecords = null;\n+    this.blockRecordsCursor = blocksCursor = 0;\n+    this.blocksLoaded = false;\n+    return this;\n+  }\n+\n+  @Override\n+  public void clear()\n+  {\n+    super.initialize(false);\n+    this.entityId = -1;\n+    this.entityType = 0;\n+    this.prevProp = NO_PREVIOUS_PROPERTY.intValue();\n+    this.nextProp = NO_NEXT_PROPERTY.intValue();\n+    this.deletedRecords = null;\n+    this.blockRecordsCursor = blocksCursor = 0;\n+    this.blocksLoaded = false;\n+  }\n+\n+  public void setNodeId(long nodeId)\n+  {\n+    entityType = TYPE_NODE;\n+    entityId = nodeId;\n+  }\n+\n+  public void setRelId(long relId)\n+  {\n+    entityType = TYPE_REL;\n+    entityId = relId;\n+  }\n+\n+  public boolean isNodeSet()\n+  {\n+    return entityType == TYPE_NODE;\n+  }\n+\n+  public boolean isRelSet()\n+  {\n+    return entityType == TYPE_REL;\n+  }\n+\n+  public long getNodeId()\n+  {\n+    if (isNodeSet())\n+    {\n+      return entityId;\n+    }\n+    return -1;\n+  }\n+\n+  public long getRelId()\n+  {\n+    if (isRelSet())\n+    {\n+      return entityId;\n+    }\n+    return -1;\n+  }\n+\n+  /**\n+   * Gets the sum of the sizes of the blocks in this record, in bytes.\n+   */\n+  public int size()\n+  {\n+    ensureBlocksLoaded();\n+    int result = 0;\n+    for (int i = 0; i < blockRecordsCursor; i++)\n+    {\n+      result += blockRecords[i].getSize();\n+    }\n+    return result;\n+  }\n+\n+  public int numberOfProperties()\n+  {\n+    ensureBlocksLoaded();\n+    return blockRecordsCursor;\n+  }\n+\n+  @Override\n+  public Iterator<PropertyBlock> iterator()\n+  {\n+    ensureBlocksLoaded();\n+    return new Iterator<PropertyBlock>()\n+    {\n+      // state for the Iterator aspect of this class.\n+      private int blockRecordsIteratorCursor;\n+      private boolean canRemoveFromIterator;\n+\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return blockRecordsIteratorCursor < blockRecordsCursor;\n+      }\n+\n+      @Override\n+      public PropertyBlock next()\n+      {\n+        if (!hasNext())\n         {\n-            return entityId;\n+          throw new NoSuchElementException();\n         }\n-        return -1;\n-    }\n-\n-    /**\n-     * Gets the sum of the sizes of the blocks in this record, in bytes.\n-     */\n-    public int size()\n-    {\n-        ensureBlocksLoaded();\n-        int result = 0;\n-        for ( int i = 0; i < blockRecordsCursor; i++ )\n+        canRemoveFromIterator = true;\n+        return blockRecords[blockRecordsIteratorCursor++];\n+      }\n+\n+      @Override\n+      public void remove()\n+      {\n+        if (!canRemoveFromIterator)\n         {\n-            result += blockRecords[i].getSize();\n+          throw new IllegalStateException(\n+              \"cursor:\" + blockRecordsIteratorCursor + \" canRemove:\" + canRemoveFromIterator);\n         }\n-        return result;\n-    }\n \n-    public int numberOfProperties()\n-    {\n-        ensureBlocksLoaded();\n-        return blockRecordsCursor;\n-    }\n-\n-    @Override\n-    public Iterator<PropertyBlock> iterator()\n-    {\n-        ensureBlocksLoaded();\n-        return new Iterator<PropertyBlock>()\n+        if (--blockRecordsCursor > --blockRecordsIteratorCursor)\n         {\n-            // state for the Iterator aspect of this class.\n-            private int blockRecordsIteratorCursor;\n-            private boolean canRemoveFromIterator;\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return blockRecordsIteratorCursor < blockRecordsCursor;\n-            }\n-\n-            @Override\n-            public PropertyBlock next()\n-            {\n-                if ( !hasNext() )\n-                {\n-                    throw new NoSuchElementException();\n-                }\n-                canRemoveFromIterator = true;\n-                return blockRecords[blockRecordsIteratorCursor++];\n-            }\n-\n-            @Override\n-            public void remove()\n-            {\n-                if ( !canRemoveFromIterator )\n-                {\n-                    throw new IllegalStateException(\n-                            \"cursor:\" + blockRecordsIteratorCursor + \" canRemove:\" + canRemoveFromIterator );\n-                }\n-\n-                if ( --blockRecordsCursor > --blockRecordsIteratorCursor )\n-                {\n-                    blockRecords[blockRecordsIteratorCursor] = blockRecords[blockRecordsCursor];\n-                }\n-                canRemoveFromIterator = false;\n-            }\n-        };\n-    }\n-\n-    public List<DynamicRecord> getDeletedRecords()\n-    {\n-        return deletedRecords != null ? deletedRecords : Collections.emptyList();\n-    }\n-\n-    public void addDeletedRecord( DynamicRecord record )\n-    {\n-        assert !record.inUse();\n-        if ( deletedRecords == null )\n-        {\n-            deletedRecords = new LinkedList<>();\n+          blockRecords[blockRecordsIteratorCursor] = blockRecords[blockRecordsCursor];\n         }\n-        deletedRecords.add( record );\n-    }\n-\n-    public void addPropertyBlock( PropertyBlock block )\n-    {\n-        ensureBlocksLoaded();\n-        assert size() + block.getSize() <= PropertyType.getPayloadSize() :\n-                \"Exceeded capacity of property record \" + this\n-                + \". My current size is reported as \" + size() + \"The added block was \" + block +\n-                \" (note that size is \" + block.getSize() + \")\";\n-\n+        canRemoveFromIterator = false;\n+      }\n+    };\n+  }\n+\n+  public List<DynamicRecord> getDeletedRecords()\n+  {\n+    return deletedRecords != null ? deletedRecords : Collections.emptyList();\n+  }\n+\n+  public void addDeletedRecord(DynamicRecord record)\n+  {\n+    assert !record.inUse();\n+    if (deletedRecords == null)\n+    {\n+      deletedRecords = new LinkedList<>();\n+    }\n+    deletedRecords.add(record);\n+  }\n+\n+  public void addPropertyBlock(PropertyBlock block)\n+  {\n+    ensureBlocksLoaded();\n+    assert size() + block.getSize() <= PropertyType.getPayloadSize() :\n+        \"Exceeded capacity of property record \" + this\n+            + \". My current size is reported as \" + size() + \"The added block was \" + block +\n+            \" (note that size is \" + block.getSize() + \")\";\n+\n+    blockRecords[blockRecordsCursor++] = block;\n+  }\n+\n+  /**\n+   * Reads blocks[] and constructs {@link PropertyBlock} instances from them, making that abstraction\n+   * available to the outside. Done the first time any PropertyBlock is needed or manipulated.\n+   */\n+  private void ensureBlocksLoaded()\n+  {\n+    if (!blocksLoaded)\n+    {\n+      assert blockRecordsCursor == 0;\n+      // We haven't loaded the blocks yet, please do so now\n+      int index = 0;\n+      while (index < blocksCursor)\n+      {\n+        PropertyType type = PropertyType.getPropertyTypeOrThrow(blocks[index]);\n+        PropertyBlock block = new PropertyBlock();\n+        int length = type.calculateNumberOfBlocksUsed(blocks[index]);\n+        block.setValueBlocks(Arrays.copyOfRange(blocks, index, index + length));\n         blockRecords[blockRecordsCursor++] = block;\n-    }\n-\n-    /**\n-     * Reads blocks[] and constructs {@link PropertyBlock} instances from them, making that abstraction\n-     * available to the outside. Done the first time any PropertyBlock is needed or manipulated.\n-     */\n-    private void ensureBlocksLoaded()\n-    {\n-        if ( !blocksLoaded )\n-        {\n-            assert blockRecordsCursor == 0;\n-            // We haven't loaded the blocks yet, please do so now\n-            int index = 0;\n-            while ( index < blocksCursor )\n-            {\n-                PropertyType type = PropertyType.getPropertyTypeOrThrow( blocks[index] );\n-                PropertyBlock block = new PropertyBlock();\n-                int length = type.calculateNumberOfBlocksUsed( blocks[index] );\n-                block.setValueBlocks( Arrays.copyOfRange( blocks, index, index + length ) );\n-                blockRecords[blockRecordsCursor++] = block;\n-                index += length;\n-            }\n-            blocksLoaded = true;\n-        }\n-    }\n-\n-    public void setPropertyBlock( PropertyBlock block )\n-    {\n-        removePropertyBlock( block.getKeyIndexId() );\n-        addPropertyBlock( block );\n-    }\n-\n-    public PropertyBlock getPropertyBlock( int keyIndex )\n-    {\n-        ensureBlocksLoaded();\n-        for ( int i = 0; i < blockRecordsCursor; i++ )\n-        {\n-            PropertyBlock block = blockRecords[i];\n-            if ( block.getKeyIndexId() == keyIndex )\n-            {\n-                return block;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public PropertyBlock removePropertyBlock( int keyIndex )\n-    {\n-        ensureBlocksLoaded();\n-        for ( int i = 0; i < blockRecordsCursor; i++ )\n-        {\n-            if ( blockRecords[i].getKeyIndexId() == keyIndex )\n-            {\n-                PropertyBlock block = blockRecords[i];\n-                if ( --blockRecordsCursor > i )\n-                {\n-                    blockRecords[i] = blockRecords[blockRecordsCursor];\n-                }\n-                return block;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public void clearPropertyBlocks()\n-    {\n-        blockRecordsCursor = 0;\n-    }\n-\n-    public long getNextProp()\n-    {\n-        return nextProp;\n-    }\n-\n-    public void setNextProp( long nextProp )\n-    {\n-        this.nextProp = nextProp;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        StringBuilder buf = new StringBuilder();\n-        buf.append( \"Property[\" ).append( getId() ).append( \",used=\" ).append( inUse() ).append( \",prev=\" ).append(\n-                prevProp ).append( \",next=\" ).append( nextProp );\n-\n-        if ( entityId != -1 )\n-        {\n-            buf.append( entityType == TYPE_NODE ? \",node=\" : \",rel=\" ).append( entityId );\n-        }\n-\n-        if ( blocksLoaded )\n-        {\n-            for ( int i = 0; i < blockRecordsCursor; i++ )\n-            {\n-                buf.append( ',' ).append( blockRecords[i] );\n-            }\n-        }\n-        else\n-        {\n-            buf.append( \", (blocks not loaded)\" );\n-        }\n-\n-        if ( deletedRecords != null )\n+        index += length;\n+      }\n+      blocksLoaded = true;\n+    }\n+  }\n+\n+  public void setPropertyBlock(PropertyBlock block)\n+  {\n+    removePropertyBlock(block.getKeyIndexId());\n+    addPropertyBlock(block);\n+  }\n+\n+  public PropertyBlock getPropertyBlock(int keyIndex)\n+  {\n+    ensureBlocksLoaded();\n+    for (int i = 0; i < blockRecordsCursor; i++)\n+    {\n+      PropertyBlock block = blockRecords[i];\n+      if (block.getKeyIndexId() == keyIndex)\n+      {\n+        return block;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  public PropertyBlock removePropertyBlock(int keyIndex)\n+  {\n+    ensureBlocksLoaded();\n+    for (int i = 0; i < blockRecordsCursor; i++)\n+    {\n+      if (blockRecords[i].getKeyIndexId() == keyIndex)\n+      {\n+        PropertyBlock block = blockRecords[i];\n+        if (--blockRecordsCursor > i)\n         {\n-            for ( DynamicRecord dyn : deletedRecords )\n-            {\n-                buf.append( \", del:\" ).append( dyn );\n-            }\n+          blockRecords[i] = blockRecords[blockRecordsCursor];\n         }\n-\n-        buf.append( \"]\" );\n-        return buf.toString();\n-    }\n-\n-    public void setChanged( PrimitiveRecord primitive )\n-    {\n-        primitive.setIdTo( this );\n+        return block;\n+      }\n     }\n+    return null;\n+  }\n \n-    public long getPrevProp()\n-    {\n-        return prevProp;\n-    }\n+  public void clearPropertyBlocks()\n+  {\n+    blockRecordsCursor = 0;\n+  }\n \n-    public void setPrevProp( long prev )\n-    {\n-        prevProp = prev;\n-    }\n-\n-    @Override\n-    public PropertyRecord clone()\n-    {\n-        PropertyRecord result = (PropertyRecord) new PropertyRecord( getId() ).initialize( inUse() );\n-        result.nextProp = nextProp;\n-        result.prevProp = prevProp;\n-        result.entityId = entityId;\n-        result.entityType = entityType;\n-        System.arraycopy( blocks, 0, result.blocks, 0, blocks.length );\n-        result.blocksCursor = blocksCursor;\n-        for ( int i = 0; i < blockRecordsCursor; i++ )\n-        {\n-            result.blockRecords[i] = blockRecords[i].clone();\n-        }\n-        result.blockRecordsCursor = blockRecordsCursor;\n-        result.blocksLoaded = blocksLoaded;\n-        if ( deletedRecords != null )\n-        {\n-            for ( DynamicRecord deletedRecord : deletedRecords )\n-            {\n-                result.addDeletedRecord( deletedRecord.clone() );\n-            }\n-        }\n-        return result;\n-    }\n-\n-    public long[] getBlocks()\n-    {\n-        return blocks;\n-    }\n-\n-    public void addLoadedBlock( long block )\n-    {\n-        assert blocksCursor + 1 <= blocks.length : \"Capacity of \" + blocks.length + \" exceeded\";\n-        blocks[blocksCursor++] = block;\n-    }\n-\n-    public int getBlockCapacity()\n-    {\n-        return blocks.length;\n-    }\n-\n-    public int getNumberOfBlocks()\n-    {\n-        return blocksCursor;\n-    }\n+  public long getNextProp()\n+  {\n+    return nextProp;\n+  }\n+\n+  public void setNextProp(long nextProp)\n+  {\n+    this.nextProp = nextProp;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder buf = new StringBuilder();\n+    buf.append(\"Property[\").append(getId()).append(\",used=\").append(inUse()).append(\",prev=\").append(\n+        prevProp).append(\",next=\").append(nextProp);\n+\n+    if (entityId != -1)\n+    {\n+      buf.append(entityType == TYPE_NODE ? \",node=\" : \",rel=\").append(entityId);\n+    }\n+\n+    if (blocksLoaded)\n+    {\n+      for (int i = 0; i < blockRecordsCursor; i++)\n+      {\n+        buf.append(',').append(blockRecords[i]);\n+      }\n+    } else\n+    {\n+      buf.append(\", (blocks not loaded)\");\n+    }\n+\n+    if (deletedRecords != null)\n+    {\n+      for (DynamicRecord dyn : deletedRecords)\n+      {\n+        buf.append(\", del:\").append(dyn);\n+      }\n+    }\n+\n+    buf.append(\"]\");\n+    return buf.toString();\n+  }\n+\n+  public void setChanged(PrimitiveRecord primitive)\n+  {\n+    primitive.setIdTo(this);\n+  }\n+\n+  public long getPrevProp()\n+  {\n+    return prevProp;\n+  }\n+\n+  public void setPrevProp(long prev)\n+  {\n+    prevProp = prev;\n+  }\n+\n+  @Override\n+  public PropertyRecord clone()\n+  {\n+    PropertyRecord result = (PropertyRecord) new PropertyRecord(getId()).initialize(inUse());\n+    result.nextProp = nextProp;\n+    result.prevProp = prevProp;\n+    result.entityId = entityId;\n+    result.entityType = entityType;\n+    System.arraycopy(blocks, 0, result.blocks, 0, blocks.length);\n+    result.blocksCursor = blocksCursor;\n+    for (int i = 0; i < blockRecordsCursor; i++)\n+    {\n+      result.blockRecords[i] = blockRecords[i].clone();\n+    }\n+    result.blockRecordsCursor = blockRecordsCursor;\n+    result.blocksLoaded = blocksLoaded;\n+    if (deletedRecords != null)\n+    {\n+      for (DynamicRecord deletedRecord : deletedRecords)\n+      {\n+        result.addDeletedRecord(deletedRecord.clone());\n+      }\n+    }\n+    return result;\n+  }\n+\n+  public long[] getBlocks()\n+  {\n+    return blocks;\n+  }\n+\n+  public void addLoadedBlock(long block)\n+  {\n+    assert blocksCursor + 1 <= blocks.length : \"Capacity of \" + blocks.length + \" exceeded\";\n+    blocks[blocksCursor++] = block;\n+  }\n+\n+  public int getBlockCapacity()\n+  {\n+    return blocks.length;\n+  }\n+\n+  public int getNumberOfBlocks()\n+  {\n+    return blocksCursor;\n+  }\n }\n",
            "diff_size": 494
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "199",
                    "column": "42",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "227",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 295).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "227",
                    "column": "295",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "283",
                    "column": "42",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "313",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1116/PropertyRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1116/PropertyRecord.java\nindex 4303e956b18..59a27c00362 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1116/PropertyRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1116/PropertyRecord.java\n@@ -57,9 +57,8 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n \n     // These MUST ONLY be populated if we're accessing PropertyBlocks. On just loading this record only the\n     // next/prev and blocks should be filled.\n-    private final PropertyBlock[] blockRecords =\n-            new PropertyBlock[PropertyType.getPayloadSizeLongs() /*we can have at most these many*/];\n-    private boolean blocksLoaded;\n+    private final PropertyBlock[] blockRecords = new PropertyBlock[PropertyType.getPayloadSizeLongs() /*we can have at most these many*/];\n+private boolean blocksLoaded;\n     private int blockRecordsCursor;\n     private long entityId;\n     private byte entityType;\n@@ -151,7 +150,8 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n         {\n             result += blockRecords[i].getSize();\n         }\n-        return result;\n+\n+return result;\n     }\n \n     public int numberOfProperties()\n@@ -183,7 +183,8 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n                 {\n                     throw new NoSuchElementException();\n                 }\n-                canRemoveFromIterator = true;\n+\n+canRemoveFromIterator = true;\n                 return blockRecords[blockRecordsIteratorCursor++];\n             }\n \n@@ -192,15 +193,15 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n             {\n                 if ( !canRemoveFromIterator )\n                 {\n-                    throw new IllegalStateException(\n-                            \"cursor:\" + blockRecordsIteratorCursor + \" canRemove:\" + canRemoveFromIterator );\n+                    throw new IllegalStateException( \"cursor:\" + blockRecordsIteratorCursor + \" canRemove:\" + canRemoveFromIterator );\n                 }\n \n-                if ( --blockRecordsCursor > --blockRecordsIteratorCursor )\n+                if ( --blockRecordsCursor> --blockRecordsIteratorCursor )\n                 {\n                     blockRecords[blockRecordsIteratorCursor] = blockRecords[blockRecordsCursor];\n                 }\n-                canRemoveFromIterator = false;\n+\n+canRemoveFromIterator = false;\n             }\n         };\n     }\n@@ -223,12 +224,7 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n     public void addPropertyBlock( PropertyBlock block )\n     {\n         ensureBlocksLoaded();\n-        assert size() + block.getSize() <= PropertyType.getPayloadSize() :\n-                \"Exceeded capacity of property record \" + this\n-                + \". My current size is reported as \" + size() + \"The added block was \" + block +\n-                \" (note that size is \" + block.getSize() + \")\";\n-\n-        blockRecords[blockRecordsCursor++] = block;\n+        assert size() + block.getSize() <= PropertyType.getPayloadSize() : \"Exceeded capacity of property record \" + this + \". My current size is reported as \" + size() + \"The added block was \" + block + \" (note that size is \" + block.getSize() + \")\"; blockRecords[blockRecordsCursor++] = block;\n     }\n \n     /**\n@@ -251,7 +247,8 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n                 blockRecords[blockRecordsCursor++] = block;\n                 index += length;\n             }\n-            blocksLoaded = true;\n+\n+blocksLoaded = true;\n         }\n     }\n \n@@ -283,11 +280,12 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n             if ( blockRecords[i].getKeyIndexId() == keyIndex )\n             {\n                 PropertyBlock block = blockRecords[i];\n-                if ( --blockRecordsCursor > i )\n+                if ( --blockRecordsCursor> i )\n                 {\n                     blockRecords[i] = blockRecords[blockRecordsCursor];\n                 }\n-                return block;\n+\n+return block;\n             }\n         }\n         return null;\n@@ -312,10 +310,8 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n     public String toString()\n     {\n         StringBuilder buf = new StringBuilder();\n-        buf.append( \"Property[\" ).append( getId() ).append( \",used=\" ).append( inUse() ).append( \",prev=\" ).append(\n-                prevProp ).append( \",next=\" ).append( nextProp );\n-\n-        if ( entityId != -1 )\n+        buf.append( \"Property[\" ).append( getId() ).append( \",used=\" ).append( inUse() ).append( \",prev=\" ).append( prevProp ).append( \",next=\" ).append( nextProp );\n+if ( entityId != -1 )\n         {\n             buf.append( entityType == TYPE_NODE ? \",node=\" : \",rel=\" ).append( entityId );\n         }\n@@ -405,4 +401,4 @@ public class PropertyRecord extends AbstractBaseRecord implements Iterable<Prope\n     {\n         return blocksCursor;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}